{
  "version": 3,
  "sources": ["../../src/remote/playwrightConnection.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DispatcherConnection, PlaywrightDispatcher, RootDispatcher } from '../server';\nimport { AndroidDevice } from '../server/android/android';\nimport { Browser } from '../server/browser';\nimport { DebugControllerDispatcher } from '../server/dispatchers/debugControllerDispatcher';\nimport { startProfiling, stopProfiling } from '../server/utils/profiler';\nimport { monotonicTime, Semaphore } from '../utils';\nimport { debugLogger } from '../server/utils/debugLogger';\nimport { PlaywrightDispatcherOptions } from '../server/dispatchers/playwrightDispatcher';\n\nimport type { DispatcherScope, Playwright } from '../server';\nimport type { WebSocket } from '../utilsBundle';\n\nexport interface PlaywrightInitializeResult extends PlaywrightDispatcherOptions {\n  dispose?(): Promise<void>;\n}\n\nexport class PlaywrightConnection {\n  private _ws: WebSocket;\n  private _semaphore: Semaphore;\n  private _dispatcherConnection: DispatcherConnection;\n  private _cleanups: (() => Promise<void>)[] = [];\n  private _id: string;\n  private _disconnected = false;\n  private _root: DispatcherScope;\n  private _profileName: string;\n\n  constructor(semaphore: Semaphore, ws: WebSocket, controller: boolean, playwright: Playwright, initialize: () => Promise<PlaywrightInitializeResult>, id: string) {\n    this._ws = ws;\n    this._semaphore = semaphore;\n    this._id = id;\n    this._profileName = new Date().toISOString();\n\n    const lock = this._semaphore.acquire();\n\n    this._dispatcherConnection = new DispatcherConnection();\n    this._dispatcherConnection.onmessage = async message => {\n      await lock;\n      if (ws.readyState !== ws.CLOSING) {\n        const messageString = JSON.stringify(message);\n        if (debugLogger.isEnabled('server:channel'))\n          debugLogger.log('server:channel', `[${this._id}] ${monotonicTime() * 1000} SEND \u25BA ${messageString}`);\n        if (debugLogger.isEnabled('server:metadata'))\n          this.logServerMetadata(message, messageString, 'SEND');\n        ws.send(messageString);\n      }\n    };\n    ws.on('message', async (message: string) => {\n      await lock;\n      const messageString = Buffer.from(message).toString();\n      const jsonMessage = JSON.parse(messageString);\n      if (debugLogger.isEnabled('server:channel'))\n        debugLogger.log('server:channel', `[${this._id}] ${monotonicTime() * 1000} \u25C0 RECV ${messageString}`);\n      if (debugLogger.isEnabled('server:metadata'))\n        this.logServerMetadata(jsonMessage, messageString, 'RECV');\n      this._dispatcherConnection.dispatch(jsonMessage);\n    });\n\n    ws.on('close', () => this._onDisconnect());\n    ws.on('error', (error: Error) => this._onDisconnect(error));\n\n    if (controller) {\n      debugLogger.log('server', `[${this._id}] engaged reuse controller mode`);\n      this._root = new DebugControllerDispatcher(this._dispatcherConnection, playwright.debugController);\n      return;\n    }\n\n    this._root = new RootDispatcher(this._dispatcherConnection, async (scope, params) => {\n      await startProfiling();\n\n      const options = await initialize();\n      if (options.preLaunchedBrowser) {\n        const browser = options.preLaunchedBrowser;\n        browser.options.sdkLanguage = params.sdkLanguage;\n        browser.on(Browser.Events.Disconnected, () => {\n          // Underlying browser did close for some reason - force disconnect the client.\n          this.close({ code: 1001, reason: 'Browser closed' });\n        });\n      }\n      if (options.preLaunchedAndroidDevice) {\n        const androidDevice = options.preLaunchedAndroidDevice;\n        androidDevice.on(AndroidDevice.Events.Close, () => {\n          // Underlying android device did close for some reason - force disconnect the client.\n          this.close({ code: 1001, reason: 'Android device disconnected' });\n        });\n      }\n      if (options.dispose)\n        this._cleanups.push(options.dispose);\n\n      const dispatcher = new PlaywrightDispatcher(scope, playwright, options);\n      this._cleanups.push(() => dispatcher.cleanup());\n\n      return dispatcher;\n    });\n  }\n\n  private async _onDisconnect(error?: Error) {\n    this._disconnected = true;\n    debugLogger.log('server', `[${this._id}] disconnected. error: ${error}`);\n    await this._root.stopPendingOperations(new Error('Disconnected')).catch(() => {});\n    this._root._dispose();\n    debugLogger.log('server', `[${this._id}] starting cleanup`);\n    for (const cleanup of this._cleanups)\n      await cleanup().catch(() => {});\n    await stopProfiling(this._profileName);\n    this._semaphore.release();\n    debugLogger.log('server', `[${this._id}] finished cleanup`);\n  }\n\n  private logServerMetadata(message: object, messageString: string, direction: 'SEND' | 'RECV') {\n    const serverLogMetadata = {\n      wallTime: Date.now(),\n      id: (message as any).id,\n      guid: (message as any).guid,\n      method: (message as any).method,\n      payloadSizeInBytes: Buffer.byteLength(messageString, 'utf-8')\n    };\n    debugLogger.log('server:metadata', (direction === 'SEND' ? 'SEND \u25BA ' : '\u25C0 RECV ') + JSON.stringify(serverLogMetadata));\n  }\n\n  async close(reason?: { code: number, reason: string }) {\n    if (this._disconnected)\n      return;\n    debugLogger.log('server', `[${this._id}] force closing connection: ${reason?.reason || ''} (${reason?.code || 0})`);\n    try {\n      this._ws.close(reason?.code, reason?.reason);\n    } catch (e) {\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
