{
  "version": 3,
  "sources": ["../../src/remote/playwrightServer.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlaywrightConnection, PlaywrightInitializeResult } from './playwrightConnection';\nimport { createPlaywright } from '../server/playwright';\nimport { Semaphore } from '../utils/isomorphic/semaphore';\nimport { DEFAULT_PLAYWRIGHT_LAUNCH_TIMEOUT } from '../utils/isomorphic/time';\nimport { WSServer } from '../server/utils/wsServer';\nimport { wrapInASCIIBox } from '../server/utils/ascii';\nimport { getPlaywrightVersion } from '../server/utils/userAgent';\nimport { debugLogger, isUnderTest } from '../utils';\nimport { SocksProxy } from '../server/utils/socksProxy';\nimport { Browser } from '../server/browser';\nimport { ProgressController } from '../server/progress';\n\nimport type { AndroidDevice } from '../server/android/android';\nimport type { Playwright } from '../server/playwright';\nimport type { LaunchOptions as LaunchOptionsWithoutTimeout } from '../server/types';\n\ntype LaunchOptionsWithTimeout = LaunchOptionsWithoutTimeout & { timeout: number };\n\ntype ServerOptions = {\n  path: string;\n  maxConnections: number;\n  mode: 'default' | 'launchServer' | 'launchServerShared' | 'extension';\n  preLaunchedBrowser?: Browser;\n  preLaunchedAndroidDevice?: AndroidDevice;\n  preLaunchedSocksProxy?: SocksProxy;\n  debugController?: boolean;\n};\n\nexport class PlaywrightServer {\n  private _playwright: Playwright;\n  private _options: ServerOptions;\n  private _wsServer: WSServer;\n\n  private _dontReuseBrowsers = new Set<Browser>();\n\n  constructor(options: ServerOptions) {\n    this._options = options;\n    if (options.preLaunchedBrowser) {\n      this._playwright = options.preLaunchedBrowser.attribution.playwright;\n      this._dontReuse(options.preLaunchedBrowser);\n    }\n    if (options.preLaunchedAndroidDevice)\n      this._playwright = options.preLaunchedAndroidDevice._android.attribution.playwright;\n    this._playwright ??= createPlaywright({ sdkLanguage: 'javascript', isServer: true });\n\n    const browserSemaphore = new Semaphore(this._options.maxConnections);\n    const controllerSemaphore = new Semaphore(1);\n    const reuseBrowserSemaphore = new Semaphore(1);\n\n    this._wsServer = new WSServer({\n      onRequest: (request, response) => {\n        if (request.method === 'GET' && request.url === '/json') {\n          response.setHeader('Content-Type', 'application/json');\n          response.end(JSON.stringify({\n            wsEndpointPath: this._options.path,\n          }));\n          return;\n        }\n        response.end('Running');\n      },\n\n      onUpgrade: (request, socket) => {\n        const uaError = userAgentVersionMatchesErrorMessage(request.headers['user-agent'] || '');\n        if (uaError)\n          return { error: `HTTP/${request.httpVersion} 428 Precondition Required\\r\\n\\r\\n${uaError}` };\n      },\n\n      onHeaders: headers => {\n        if (process.env.PWTEST_SERVER_WS_HEADERS)\n          headers.push(process.env.PWTEST_SERVER_WS_HEADERS!);\n      },\n\n      onConnection: (request, url, ws, id) => {\n        const browserHeader = request.headers['x-playwright-browser'];\n        const browserName = url.searchParams.get('browser') || (Array.isArray(browserHeader) ? browserHeader[0] : browserHeader) || null;\n        const proxyHeader = request.headers['x-playwright-proxy'];\n        const proxyValue = url.searchParams.get('proxy') || (Array.isArray(proxyHeader) ? proxyHeader[0] : proxyHeader);\n\n        const launchOptionsHeader = request.headers['x-playwright-launch-options'] || '';\n        const launchOptionsHeaderValue = Array.isArray(launchOptionsHeader) ? launchOptionsHeader[0] : launchOptionsHeader;\n        const launchOptionsParam = url.searchParams.get('launch-options');\n        let launchOptions: LaunchOptionsWithTimeout = { timeout: DEFAULT_PLAYWRIGHT_LAUNCH_TIMEOUT };\n        try {\n          launchOptions = JSON.parse(launchOptionsParam || launchOptionsHeaderValue);\n          if (!launchOptions.timeout)\n            launchOptions.timeout = DEFAULT_PLAYWRIGHT_LAUNCH_TIMEOUT;\n        } catch (e) {\n        }\n\n        const isExtension = this._options.mode === 'extension';\n        const allowFSPaths = isExtension;\n        launchOptions = filterLaunchOptions(launchOptions, allowFSPaths);\n\n        if (url.searchParams.has('debug-controller')) {\n          if (!(this._options.debugController || isExtension))\n            throw new Error('Debug controller is not enabled');\n          return new PlaywrightConnection(\n              controllerSemaphore,\n              ws,\n              true,\n              this._playwright,\n              async () => { throw new Error('shouldnt be used'); },\n              id,\n          );\n        }\n\n        if (isExtension) {\n          const connectFilter = url.searchParams.get('connect');\n          if (connectFilter) {\n            if (connectFilter !== 'first')\n              throw new Error(`Unknown connect filter: ${connectFilter}`);\n            return new PlaywrightConnection(\n                browserSemaphore,\n                ws,\n                false,\n                this._playwright,\n                () => this._initConnectMode(id, connectFilter, browserName, launchOptions),\n                id,\n            );\n          }\n\n          return new PlaywrightConnection(\n              reuseBrowserSemaphore,\n              ws,\n              false,\n              this._playwright,\n              () => this._initReuseBrowsersMode(browserName, launchOptions, id),\n              id,\n          );\n        }\n\n        if (this._options.mode === 'launchServer' || this._options.mode === 'launchServerShared') {\n          if (this._options.preLaunchedBrowser) {\n            return new PlaywrightConnection(\n                browserSemaphore,\n                ws,\n                false,\n                this._playwright,\n                () => this._initPreLaunchedBrowserMode(id),\n                id,\n            );\n          }\n\n          return new PlaywrightConnection(\n              browserSemaphore,\n              ws,\n              false,\n              this._playwright,\n              () => this._initPreLaunchedAndroidMode(id),\n              id,\n          );\n        }\n\n        return new PlaywrightConnection(\n            browserSemaphore,\n            ws,\n            false,\n            this._playwright,\n            () => this._initLaunchBrowserMode(browserName, proxyValue, launchOptions, id),\n            id,\n        );\n      },\n    });\n  }\n\n  private async _initReuseBrowsersMode(browserName: string | null, launchOptions: LaunchOptionsWithTimeout, id: string): Promise<PlaywrightInitializeResult> {\n    // Note: reuse browser mode does not support socks proxy, because\n    // clients come and go, while the browser stays the same.\n\n    debugLogger.log('server', `[${id}] engaged reuse browsers mode for ${browserName}`);\n\n    const requestedOptions = launchOptionsHash(launchOptions);\n    let browser = this._playwright.allBrowsers().find(b => {\n      if (b.options.name !== browserName)\n        return false;\n      if (this._dontReuseBrowsers.has(b))\n        return false;\n      const existingOptions = launchOptionsHash({ ...b.options.originalLaunchOptions, timeout: DEFAULT_PLAYWRIGHT_LAUNCH_TIMEOUT });\n      return existingOptions === requestedOptions;\n    });\n\n    // Close remaining browsers of this type+channel. Keep different browser types for the speed.\n    for (const b of this._playwright.allBrowsers()) {\n      if (b === browser)\n        continue;\n      if (this._dontReuseBrowsers.has(b))\n        continue;\n      if (b.options.name === browserName && b.options.channel === launchOptions.channel)\n        await b.close({ reason: 'Connection terminated' });\n    }\n\n    if (!browser) {\n      const browserType = this._playwright[(browserName || 'chromium') as 'chromium'];\n      const controller = new ProgressController();\n      browser = await controller.run(progress => browserType.launch(progress, {\n        ...launchOptions,\n        headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS,\n      }), launchOptions.timeout);\n    }\n\n    return {\n      preLaunchedBrowser: browser,\n      denyLaunch: true,\n      dispose: async () => {\n        // Don't close the pages so that user could debug them,\n        // but close all the empty contexts to clean up.\n        // keep around browser so it can be reused by the next connection.\n        for (const context of browser.contexts()) {\n          if (!context.pages().length)\n            await context.close({ reason: 'Connection terminated' });\n        }\n      }\n    };\n  }\n\n  private async _initConnectMode(id: string, filter: 'first', browserName: string | null, launchOptions: LaunchOptionsWithTimeout): Promise<PlaywrightInitializeResult> {\n    browserName ??= 'chromium';\n\n    debugLogger.log('server', `[${id}] engaged connect mode`);\n\n    let browser = this._playwright.allBrowsers().find(b => b.options.name === browserName);\n    if (!browser) {\n      const browserType = this._playwright[browserName as 'chromium'];\n      const controller = new ProgressController();\n      browser = await controller.run(progress => browserType.launch(progress, launchOptions), launchOptions.timeout);\n      this._dontReuse(browser);\n    }\n\n    return {\n      preLaunchedBrowser: browser,\n      denyLaunch: true,\n      sharedBrowser: true,\n    };\n  }\n\n  private async _initPreLaunchedBrowserMode(id: string): Promise<PlaywrightInitializeResult> {\n    debugLogger.log('server', `[${id}] engaged pre-launched (browser) mode`);\n\n    const browser = this._options.preLaunchedBrowser!;\n\n    // In pre-launched mode, keep only the pre-launched browser.\n    for (const b of this._playwright.allBrowsers()) {\n      if (b !== browser)\n        await b.close({ reason: 'Connection terminated' });\n    }\n\n    return {\n      preLaunchedBrowser: browser,\n      socksProxy: this._options.preLaunchedSocksProxy,\n      sharedBrowser: this._options.mode === 'launchServerShared',\n      denyLaunch: true,\n    };\n  }\n\n  private async _initPreLaunchedAndroidMode(id: string): Promise<PlaywrightInitializeResult> {\n    debugLogger.log('server', `[${id}] engaged pre-launched (Android) mode`);\n    const androidDevice = this._options.preLaunchedAndroidDevice!;\n    return {\n      preLaunchedAndroidDevice: androidDevice,\n      denyLaunch: true,\n    };\n  }\n\n  private async _initLaunchBrowserMode(browserName: string | null, proxyValue: string | undefined, launchOptions: LaunchOptionsWithTimeout, id: string): Promise<PlaywrightInitializeResult> {\n    debugLogger.log('server', `[${id}] engaged launch mode for \"${browserName}\"`);\n    let socksProxy: SocksProxy | undefined;\n    if (proxyValue) {\n      socksProxy = new SocksProxy();\n      socksProxy.setPattern(proxyValue);\n      launchOptions.socksProxyPort = await socksProxy.listen(0);\n      debugLogger.log('server', `[${id}] started socks proxy on port ${launchOptions.socksProxyPort}`);\n    } else {\n      launchOptions.socksProxyPort = undefined;\n    }\n    const browserType = this._playwright[browserName as 'chromium'];\n    const controller = new ProgressController();\n    const browser = await controller.run(progress => browserType.launch(progress, launchOptions), launchOptions.timeout);\n    this._dontReuseBrowsers.add(browser);\n    return {\n      preLaunchedBrowser: browser,\n      socksProxy,\n      denyLaunch: true,\n      dispose: async () => {\n        await browser.close({ reason: 'Connection terminated' });\n        socksProxy?.close();\n      },\n    };\n  }\n\n  private _dontReuse(browser: Browser) {\n    this._dontReuseBrowsers.add(browser);\n    browser.on(Browser.Events.Disconnected, () => {\n      this._dontReuseBrowsers.delete(browser);\n    });\n  }\n\n  async listen(port: number = 0, hostname?: string): Promise<string> {\n    return this._wsServer.listen(port, hostname, this._options.path);\n  }\n\n  async close() {\n    await this._wsServer.close();\n  }\n}\n\nfunction userAgentVersionMatchesErrorMessage(userAgent: string) {\n  const match = userAgent.match(/^Playwright\\/(\\d+\\.\\d+\\.\\d+)/);\n  if (!match) {\n    // Cannot parse user agent - be lax.\n    return;\n  }\n  const received = match[1].split('.').slice(0, 2).join('.');\n  const expected = getPlaywrightVersion(true);\n  if (received !== expected) {\n    return wrapInASCIIBox([\n      `Playwright version mismatch:`,\n      `  - server version: v${expected}`,\n      `  - client version: v${received}`,\n      ``,\n      `If you are using VSCode extension, restart VSCode.`,\n      ``,\n      `If you are connecting to a remote service,`,\n      `keep your local Playwright version in sync`,\n      `with the remote service version.`,\n      ``,\n      `<3 Playwright Team`\n    ].join('\\n'), 1);\n  }\n}\n\nfunction launchOptionsHash(options: LaunchOptionsWithTimeout) {\n  const copy = { ...options };\n  for (const k of Object.keys(copy)) {\n    const key = k as keyof LaunchOptionsWithTimeout;\n    if (copy[key] === defaultLaunchOptions[key])\n      delete copy[key];\n  }\n  for (const key of optionsThatAllowBrowserReuse)\n    delete copy[key];\n  return JSON.stringify(copy);\n}\n\nfunction filterLaunchOptions(options: LaunchOptionsWithTimeout, allowFSPaths: boolean): LaunchOptionsWithTimeout {\n  return {\n    channel: options.channel,\n    args: options.args,\n    ignoreAllDefaultArgs: options.ignoreAllDefaultArgs,\n    ignoreDefaultArgs: options.ignoreDefaultArgs,\n    timeout: options.timeout,\n    headless: options.headless,\n    proxy: options.proxy,\n    chromiumSandbox: options.chromiumSandbox,\n    firefoxUserPrefs: options.firefoxUserPrefs,\n    slowMo: options.slowMo,\n    executablePath: (isUnderTest() || allowFSPaths) ? options.executablePath : undefined,\n    downloadsPath: allowFSPaths ? options.downloadsPath : undefined,\n  };\n}\n\nconst defaultLaunchOptions: Partial<LaunchOptionsWithTimeout> = {\n  ignoreAllDefaultArgs: false,\n  handleSIGINT: false,\n  handleSIGTERM: false,\n  handleSIGHUP: false,\n  headless: true,\n  devtools: false,\n};\n\nconst optionsThatAllowBrowserReuse: (keyof LaunchOptionsWithTimeout)[] = [\n  'headless',\n  'timeout',\n  'tracesDir',\n];\n"],
  "mappings": "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",
  "names": []
}
