{
  "version": 3,
  "sources": ["../../src/worker/fixtureRunner.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { escapeWithQuotes, ManualPromise } from 'playwright-core/lib/utils';\n\nimport { fixtureParameterNames } from '../common/fixtures';\nimport { filterStackFile, formatLocation } from '../util';\n\nimport type { TestInfoImpl } from './testInfo';\nimport type { FixtureDescription, RunnableDescription } from './timeoutManager';\nimport type { WorkerInfo } from '../../types/test';\nimport type { Location } from '../../types/testReporter';\nimport type { FixturePool, FixtureRegistration, FixtureScope } from '../common/fixtures';\n\nclass Fixture {\n  runner: FixtureRunner;\n  registration: FixtureRegistration;\n  value: any;\n  failed = false;\n\n  private _useFuncFinished: ManualPromise<void> | undefined;\n  private _selfTeardownComplete: Promise<void> | undefined;\n  private _setupDescription: FixtureDescription;\n  private _teardownDescription: FixtureDescription;\n  private _stepInfo: { title: string, category: 'fixture', location?: Location, group?: string };\n  _deps = new Set<Fixture>();\n  _usages = new Set<Fixture>();\n\n  constructor(runner: FixtureRunner, registration: FixtureRegistration) {\n    this.runner = runner;\n    this.registration = registration;\n    this.value = null;\n    const isUserFixture = this.registration.location && filterStackFile(this.registration.location.file);\n    const title = this.registration.customTitle || this.registration.name;\n    const location = isUserFixture ? this.registration.location : undefined;\n    this._stepInfo = { title: `Fixture ${escapeWithQuotes(title, '\"')}`, category: 'fixture', location };\n    if (this.registration.box)\n      this._stepInfo.group = isUserFixture ? 'configuration' : 'internal';\n    this._setupDescription = {\n      title,\n      phase: 'setup',\n      location,\n      slot: this.registration.timeout === undefined ? undefined : {\n        timeout: this.registration.timeout,\n        elapsed: 0,\n      }\n    };\n    this._teardownDescription = { ...this._setupDescription, phase: 'teardown' };\n  }\n\n  async setup(testInfo: TestInfoImpl, runnable: RunnableDescription) {\n    this.runner.instanceForId.set(this.registration.id, this);\n\n    if (typeof this.registration.fn !== 'function') {\n      this.value = this.registration.fn;\n      return;\n    }\n\n    await testInfo._runAsStep(this._stepInfo, async () => {\n      await testInfo._runWithTimeout({ ...runnable, fixture: this._setupDescription }, () => this._setupInternal(testInfo));\n    });\n  }\n\n  private async _setupInternal(testInfo: TestInfoImpl) {\n    const params: { [key: string]: any } = {};\n    for (const name of this.registration.deps) {\n      const registration = this.runner.pool!.resolve(name, this.registration)!;\n      const dep = this.runner.instanceForId.get(registration.id);\n      if (!dep) {\n        this.failed = true;\n        return;\n      }\n      // Fixture teardown is root => leaves, when we need to teardown a fixture,\n      // it recursively tears down its usages first.\n      dep._usages.add(this);\n      // Don't forget to decrement all usages when fixture goes.\n      // Otherwise worker-scope fixtures will retain test-scope fixtures forever.\n      this._deps.add(dep);\n      params[name] = dep.value;\n      if (dep.failed) {\n        this.failed = true;\n        return;\n      }\n    }\n\n    let called = false;\n    const useFuncStarted = new ManualPromise<void>();\n    const useFunc = async (value: any) => {\n      if (called)\n        throw new Error(`Cannot provide fixture value for the second time`);\n      called = true;\n      this.value = value;\n      this._useFuncFinished = new ManualPromise<void>();\n      useFuncStarted.resolve();\n      await this._useFuncFinished;\n    };\n\n    const workerInfo: WorkerInfo = { config: testInfo.config, parallelIndex: testInfo.parallelIndex, workerIndex: testInfo.workerIndex, project: testInfo.project };\n    const info = this.registration.scope === 'worker' ? workerInfo : testInfo;\n    this._selfTeardownComplete = (async () => {\n      try {\n        await this.registration.fn(params, useFunc, info);\n      } catch (error) {\n        this.failed = true;\n        if (!useFuncStarted.isDone())\n          useFuncStarted.reject(error);\n        else\n          throw error;\n      }\n    })();\n    await useFuncStarted;\n  }\n\n  async teardown(testInfo: TestInfoImpl, runnable: RunnableDescription) {\n    try {\n      const fixtureRunnable = { ...runnable, fixture: this._teardownDescription };\n      // Do not even start the teardown for a fixture that does not have any\n      // time remaining in the time slot. This avoids cascading timeouts.\n      if (!testInfo._timeoutManager.isTimeExhaustedFor(fixtureRunnable)) {\n        await testInfo._runAsStep(this._stepInfo, async () => {\n          await testInfo._runWithTimeout(fixtureRunnable, () => this._teardownInternal());\n        });\n      }\n    } finally {\n      // To preserve fixtures integrity, forcefully cleanup fixtures\n      // that cannnot teardown due to a timeout or an error.\n      for (const dep of this._deps)\n        dep._usages.delete(this);\n      this.runner.instanceForId.delete(this.registration.id);\n    }\n  }\n\n  private async _teardownInternal() {\n    if (typeof this.registration.fn !== 'function')\n      return;\n    if (this._usages.size !== 0) {\n      // TODO: replace with assert.\n      console.error('Internal error: fixture integrity at', this._teardownDescription.title);  // eslint-disable-line no-console\n      this._usages.clear();\n    }\n    if (this._useFuncFinished) {\n      this._useFuncFinished.resolve();\n      this._useFuncFinished = undefined;\n      await this._selfTeardownComplete;\n    }\n  }\n\n  _collectFixturesInTeardownOrder(scope: FixtureScope, collector: Set<Fixture>) {\n    if (this.registration.scope !== scope)\n      return;\n    for (const fixture of this._usages)\n      fixture._collectFixturesInTeardownOrder(scope, collector);\n    collector.add(this);\n  }\n}\n\nexport class FixtureRunner {\n  private testScopeClean = true;\n  pool: FixturePool | undefined;\n  instanceForId = new Map<string, Fixture>();\n\n  setPool(pool: FixturePool) {\n    if (!this.testScopeClean)\n      throw new Error('Did not teardown test scope');\n    if (this.pool && pool.digest !== this.pool.digest) {\n      throw new Error([\n        `Playwright detected inconsistent test.use() options.`,\n        `Most common mistakes that lead to this issue:`,\n        `  - Calling test.use() outside of the test file, for example in a common helper.`,\n        `  - One test file imports from another test file.`,\n      ].join('\\n'));\n    }\n    this.pool = pool;\n  }\n\n  private _collectFixturesInSetupOrder(registration: FixtureRegistration, collector: Set<FixtureRegistration>) {\n    if (collector.has(registration))\n      return;\n    for (const name of registration.deps) {\n      const dep = this.pool!.resolve(name, registration)!;\n      this._collectFixturesInSetupOrder(dep, collector);\n    }\n    collector.add(registration);\n  }\n\n  async teardownScope(scope: FixtureScope, testInfo: TestInfoImpl, runnable: RunnableDescription) {\n    // Teardown fixtures in the reverse order.\n    const fixtures = Array.from(this.instanceForId.values()).reverse();\n    const collector = new Set<Fixture>();\n    for (const fixture of fixtures)\n      fixture._collectFixturesInTeardownOrder(scope, collector);\n    let firstError: Error | undefined;\n    for (const fixture of collector) {\n      try {\n        await fixture.teardown(testInfo, runnable);\n      } catch (error) {\n        firstError = firstError ?? error;\n      }\n    }\n    if (scope === 'test')\n      this.testScopeClean = true;\n    if (firstError)\n      throw firstError;\n  }\n\n  async resolveParametersForFunction(fn: Function, testInfo: TestInfoImpl, autoFixtures: 'worker' | 'test' | 'all-hooks-only', runnable: RunnableDescription): Promise<object | null> {\n    const collector = new Set<FixtureRegistration>();\n\n    // Collect automatic fixtures.\n    const auto: FixtureRegistration[] = [];\n    for (const registration of this.pool!.autoFixtures()) {\n      let shouldRun = true;\n      if (autoFixtures === 'all-hooks-only')\n        shouldRun = registration.scope === 'worker' || registration.auto === 'all-hooks-included';\n      else if (autoFixtures === 'worker')\n        shouldRun = registration.scope === 'worker';\n      if (shouldRun)\n        auto.push(registration);\n    }\n    auto.sort((r1, r2) => (r1.scope === 'worker' ? 0 : 1) - (r2.scope === 'worker' ? 0 : 1));\n    for (const registration of auto)\n      this._collectFixturesInSetupOrder(registration, collector);\n\n    // Collect used fixtures.\n    const names = getRequiredFixtureNames(fn);\n    for (const name of names)\n      this._collectFixturesInSetupOrder(this.pool!.resolve(name)!, collector);\n\n    // Setup fixtures.\n    for (const registration of collector)\n      await this._setupFixtureForRegistration(registration, testInfo, runnable);\n\n    // Create params object.\n    const params: { [key: string]: any } = {};\n    for (const name of names) {\n      const registration = this.pool!.resolve(name)!;\n      const fixture = this.instanceForId.get(registration.id);\n      if (!fixture || fixture.failed)\n        return null;\n      params[name] = fixture.value;\n    }\n    return params;\n  }\n\n  async resolveParametersAndRunFunction(fn: Function, testInfo: TestInfoImpl, autoFixtures: 'worker' | 'test' | 'all-hooks-only', runnable: RunnableDescription) {\n    const params = await this.resolveParametersForFunction(fn, testInfo, autoFixtures, runnable);\n    if (params === null) {\n      // Do not run the function when fixture setup has already failed.\n      return null;\n    }\n    await testInfo._runWithTimeout(runnable, () => fn(params, testInfo));\n  }\n\n  private async _setupFixtureForRegistration(registration: FixtureRegistration, testInfo: TestInfoImpl, runnable: RunnableDescription): Promise<Fixture> {\n    if (registration.scope === 'test')\n      this.testScopeClean = false;\n\n    let fixture = this.instanceForId.get(registration.id);\n    if (fixture)\n      return fixture;\n\n    fixture = new Fixture(this, registration);\n    await fixture.setup(testInfo, runnable);\n    return fixture;\n  }\n\n  dependsOnWorkerFixturesOnly(fn: Function, location: Location): boolean {\n    const names = getRequiredFixtureNames(fn, location);\n    for (const name of names) {\n      const registration = this.pool!.resolve(name)!;\n      if (registration.scope !== 'worker')\n        return false;\n    }\n    return true;\n  }\n}\n\nfunction getRequiredFixtureNames(fn: Function, location?: Location) {\n  return fixtureParameterNames(fn, location ?? { file: '<unknown>', line: 1, column: 1 }, e => {\n    throw new Error(`${formatLocation(e.location!)}: ${e.message}`);\n  });\n}\n"],
  "mappings": "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",
  "names": []
}
