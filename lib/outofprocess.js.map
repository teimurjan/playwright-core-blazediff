{
  "version": 3,
  "sources": ["../src/outofprocess.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as childProcess from 'child_process';\nimport path from 'path';\n\nimport { Connection } from './client/connection';\nimport { PipeTransport } from './server/utils/pipeTransport';\nimport { ManualPromise } from './utils/isomorphic/manualPromise';\nimport { nodePlatform } from './server/utils/nodePlatform';\n\nimport type { Playwright } from './client/playwright';\n\n\nexport async function start(env: any = {}): Promise<{ playwright: Playwright, stop: () => Promise<void> }> {\n  const client = new PlaywrightClient(env);\n  const playwright = await client._playwright;\n  (playwright as any).driverProcess = client._driverProcess;\n  return { playwright, stop: () => client.stop() };\n}\n\nclass PlaywrightClient {\n  _playwright: Promise<Playwright>;\n  _driverProcess: childProcess.ChildProcess;\n  private _closePromise = new ManualPromise<void>();\n\n  constructor(env: any) {\n    this._driverProcess = childProcess.fork(path.join(__dirname, '..', 'cli.js'), ['run-driver'], {\n      stdio: 'pipe',\n      detached: true,\n      env: {\n        ...process.env,\n        ...env\n      },\n    });\n    this._driverProcess.unref();\n    // eslint-disable-next-line no-restricted-properties\n    this._driverProcess.stderr!.on('data', data => process.stderr.write(data));\n\n    const connection = new Connection(nodePlatform);\n    const transport = new PipeTransport(this._driverProcess.stdin!, this._driverProcess.stdout!);\n    connection.onmessage = message => transport.send(JSON.stringify(message));\n    transport.onmessage = message => connection.dispatch(JSON.parse(message));\n    transport.onclose = () => this._closePromise.resolve();\n\n    this._playwright = connection.initializePlaywright();\n  }\n\n  async stop() {\n    this._driverProcess.stdin!.destroy();\n    this._driverProcess.stdout!.destroy();\n    this._driverProcess.stderr!.destroy();\n    await this._closePromise;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,mBAA8B;AAC9B,kBAAiB;AAEjB,wBAA2B;AAC3B,2BAA8B;AAC9B,2BAA8B;AAC9B,0BAA6B;AAK7B,eAAsB,MAAM,MAAW,CAAC,GAAmE;AACzG,QAAM,SAAS,IAAI,iBAAiB,GAAG;AACvC,QAAM,aAAa,MAAM,OAAO;AAChC,EAAC,WAAmB,gBAAgB,OAAO;AAC3C,SAAO,EAAE,YAAY,MAAM,MAAM,OAAO,KAAK,EAAE;AACjD;AAEA,MAAM,iBAAiB;AAAA,EAKrB,YAAY,KAAU;AAFtB,SAAQ,gBAAgB,IAAI,mCAAoB;AAG9C,SAAK,iBAAiB,aAAa,KAAK,YAAAA,QAAK,KAAK,WAAW,MAAM,QAAQ,GAAG,CAAC,YAAY,GAAG;AAAA,MAC5F,OAAO;AAAA,MACP,UAAU;AAAA,MACV,KAAK;AAAA,QACH,GAAG,QAAQ;AAAA,QACX,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AACD,SAAK,eAAe,MAAM;AAE1B,SAAK,eAAe,OAAQ,GAAG,QAAQ,UAAQ,QAAQ,OAAO,MAAM,IAAI,CAAC;AAEzE,UAAM,aAAa,IAAI,6BAAW,gCAAY;AAC9C,UAAM,YAAY,IAAI,mCAAc,KAAK,eAAe,OAAQ,KAAK,eAAe,MAAO;AAC3F,eAAW,YAAY,aAAW,UAAU,KAAK,KAAK,UAAU,OAAO,CAAC;AACxE,cAAU,YAAY,aAAW,WAAW,SAAS,KAAK,MAAM,OAAO,CAAC;AACxE,cAAU,UAAU,MAAM,KAAK,cAAc,QAAQ;AAErD,SAAK,cAAc,WAAW,qBAAqB;AAAA,EACrD;AAAA,EAEA,MAAM,OAAO;AACX,SAAK,eAAe,MAAO,QAAQ;AACnC,SAAK,eAAe,OAAQ,QAAQ;AACpC,SAAK,eAAe,OAAQ,QAAQ;AACpC,UAAM,KAAK;AAAA,EACb;AACF;",
  "names": ["path"]
}
