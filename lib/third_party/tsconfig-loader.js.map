{
  "version": 3,
  "sources": ["../../src/third_party/tsconfig-loader.ts"],
  "sourcesContent": ["/**\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 Jonas Kello\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint-disable */\n\nimport path from 'path';\nimport fs from 'fs';\nimport { json5 } from '../utilsBundle';\n\n/**\n * Typing for the parts of tsconfig that we care about\n */\ninterface TsConfig {\n  extends?: string;\n  compilerOptions?: {\n    baseUrl?: string;\n    paths?: { [key: string]: Array<string> };\n    strict?: boolean;\n    allowJs?: boolean;\n  };\n  references?: { path: string }[];\n}\n\nexport interface LoadedTsConfig {\n  tsConfigPath: string;\n  paths?: {\n    mapping: { [key: string]: Array<string> };\n    pathsBasePath: string;  // absolute path\n  };\n  absoluteBaseUrl?: string;\n  allowJs?: boolean;\n}\n\nexport function loadTsConfig(configPath: string): LoadedTsConfig[] {\n  try {\n    const references: LoadedTsConfig[] = [];\n    const config = innerLoadTsConfig(configPath, references);\n    return [config, ...references];\n  } catch (e) {\n    throw new Error(`Failed to load tsconfig file at ${configPath}:\\n${e.message}`);\n  }\n}\n\nfunction resolveConfigFile(baseConfigFile: string, referencedConfigFile: string) {\n  if (!referencedConfigFile.endsWith('.json'))\n    referencedConfigFile += '.json';\n  const currentDir = path.dirname(baseConfigFile);\n  let resolvedConfigFile = path.resolve(currentDir, referencedConfigFile);\n  // TODO: I don't see how this makes sense, delete in the next minor release.\n  if (referencedConfigFile.includes('/') && referencedConfigFile.includes('.') && !fs.existsSync(resolvedConfigFile))\n    resolvedConfigFile = path.join(currentDir, 'node_modules', referencedConfigFile);\n  return resolvedConfigFile;\n}\n\nfunction innerLoadTsConfig(\n  configFilePath: string,\n  references: LoadedTsConfig[],\n  visited = new Map<string, LoadedTsConfig>(),\n): LoadedTsConfig {\n  if (visited.has(configFilePath))\n    return visited.get(configFilePath)!;\n\n  let result: LoadedTsConfig = {\n    tsConfigPath: configFilePath,\n  };\n  // Retain result instance below, so that caching works.\n  visited.set(configFilePath, result);\n\n  if (!fs.existsSync(configFilePath))\n    return result;\n\n  const configString = fs.readFileSync(configFilePath, 'utf-8');\n  const cleanedJson = StripBom(configString);\n  const parsedConfig: TsConfig = json5.parse(cleanedJson);\n\n  const extendsArray = Array.isArray(parsedConfig.extends) ? parsedConfig.extends : (parsedConfig.extends ? [parsedConfig.extends] : []);\n  for (const extendedConfig of extendsArray) {\n    const extendedConfigPath = resolveConfigFile(configFilePath, extendedConfig);\n    const base = innerLoadTsConfig(extendedConfigPath, references, visited);\n    // Retain result instance, so that caching works.\n    Object.assign(result, base, { tsConfigPath: configFilePath });\n  }\n\n  if (parsedConfig.compilerOptions?.allowJs !== undefined)\n    result.allowJs = parsedConfig.compilerOptions.allowJs;\n  if (parsedConfig.compilerOptions?.paths !== undefined) {\n    // We must store pathsBasePath from the config that defines \"paths\" and later resolve\n    // based on this absolute path, when no \"baseUrl\" is specified. See tsc for reference:\n    // https://github.com/microsoft/TypeScript/blob/353ccb7688351ae33ccf6e0acb913aa30621eaf4/src/compiler/commandLineParser.ts#L3129\n    // https://github.com/microsoft/TypeScript/blob/353ccb7688351ae33ccf6e0acb913aa30621eaf4/src/compiler/moduleSpecifiers.ts#L510\n    result.paths = {\n      mapping: parsedConfig.compilerOptions.paths,\n      pathsBasePath: path.dirname(configFilePath),\n    };\n  }\n  if (parsedConfig.compilerOptions?.baseUrl !== undefined) {\n    // Follow tsc and resolve all relative file paths in the config right away.\n    // This way it is safe to inherit paths between the configs.\n    result.absoluteBaseUrl = path.resolve(path.dirname(configFilePath), parsedConfig.compilerOptions.baseUrl);\n  }\n\n  for (const ref of parsedConfig.references || [])\n    references.push(innerLoadTsConfig(resolveConfigFile(configFilePath, ref.path), references, visited));\n\n  if (path.basename(configFilePath) === 'jsconfig.json' && result.allowJs === undefined)\n    result.allowJs = true;\n  return result;\n}\n\nfunction StripBom(string: string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof string}`);\n\t}\n\n\t// Catches EFBBBF (UTF-8 BOM) because the buffer-to-string\n\t// conversion translates it to FEFF (UTF-16 BOM).\n\tif (string.charCodeAt(0) === 0xFEFF) {\n\t\treturn string.slice(1);\n\t}\n\n\treturn string;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA,kBAAiB;AACjB,gBAAe;AACf,yBAAsB;AA0Bf,SAAS,aAAa,YAAsC;AACjE,MAAI;AACF,UAAM,aAA+B,CAAC;AACtC,UAAM,SAAS,kBAAkB,YAAY,UAAU;AACvD,WAAO,CAAC,QAAQ,GAAG,UAAU;AAAA,EAC/B,SAAS,GAAG;AACV,UAAM,IAAI,MAAM,mCAAmC,UAAU;AAAA,EAAM,EAAE,OAAO,EAAE;AAAA,EAChF;AACF;AAEA,SAAS,kBAAkB,gBAAwB,sBAA8B;AAC/E,MAAI,CAAC,qBAAqB,SAAS,OAAO;AACxC,4BAAwB;AAC1B,QAAM,aAAa,YAAAA,QAAK,QAAQ,cAAc;AAC9C,MAAI,qBAAqB,YAAAA,QAAK,QAAQ,YAAY,oBAAoB;AAEtE,MAAI,qBAAqB,SAAS,GAAG,KAAK,qBAAqB,SAAS,GAAG,KAAK,CAAC,UAAAC,QAAG,WAAW,kBAAkB;AAC/G,yBAAqB,YAAAD,QAAK,KAAK,YAAY,gBAAgB,oBAAoB;AACjF,SAAO;AACT;AAEA,SAAS,kBACP,gBACA,YACA,UAAU,oBAAI,IAA4B,GAC1B;AAChB,MAAI,QAAQ,IAAI,cAAc;AAC5B,WAAO,QAAQ,IAAI,cAAc;AAEnC,MAAI,SAAyB;AAAA,IAC3B,cAAc;AAAA,EAChB;AAEA,UAAQ,IAAI,gBAAgB,MAAM;AAElC,MAAI,CAAC,UAAAC,QAAG,WAAW,cAAc;AAC/B,WAAO;AAET,QAAM,eAAe,UAAAA,QAAG,aAAa,gBAAgB,OAAO;AAC5D,QAAM,cAAc,SAAS,YAAY;AACzC,QAAM,eAAyB,yBAAM,MAAM,WAAW;AAEtD,QAAM,eAAe,MAAM,QAAQ,aAAa,OAAO,IAAI,aAAa,UAAW,aAAa,UAAU,CAAC,aAAa,OAAO,IAAI,CAAC;AACpI,aAAW,kBAAkB,cAAc;AACzC,UAAM,qBAAqB,kBAAkB,gBAAgB,cAAc;AAC3E,UAAM,OAAO,kBAAkB,oBAAoB,YAAY,OAAO;AAEtE,WAAO,OAAO,QAAQ,MAAM,EAAE,cAAc,eAAe,CAAC;AAAA,EAC9D;AAEA,MAAI,aAAa,iBAAiB,YAAY;AAC5C,WAAO,UAAU,aAAa,gBAAgB;AAChD,MAAI,aAAa,iBAAiB,UAAU,QAAW;AAKrD,WAAO,QAAQ;AAAA,MACb,SAAS,aAAa,gBAAgB;AAAA,MACtC,eAAe,YAAAD,QAAK,QAAQ,cAAc;AAAA,IAC5C;AAAA,EACF;AACA,MAAI,aAAa,iBAAiB,YAAY,QAAW;AAGvD,WAAO,kBAAkB,YAAAA,QAAK,QAAQ,YAAAA,QAAK,QAAQ,cAAc,GAAG,aAAa,gBAAgB,OAAO;AAAA,EAC1G;AAEA,aAAW,OAAO,aAAa,cAAc,CAAC;AAC5C,eAAW,KAAK,kBAAkB,kBAAkB,gBAAgB,IAAI,IAAI,GAAG,YAAY,OAAO,CAAC;AAErG,MAAI,YAAAA,QAAK,SAAS,cAAc,MAAM,mBAAmB,OAAO,YAAY;AAC1E,WAAO,UAAU;AACnB,SAAO;AACT;AAEA,SAAS,SAAS,QAAgB;AACjC,MAAI,OAAO,WAAW,UAAU;AAC/B,UAAM,IAAI,UAAU,0BAA0B,OAAO,MAAM,EAAE;AAAA,EAC9D;AAIA,MAAI,OAAO,WAAW,CAAC,MAAM,OAAQ;AACpC,WAAO,OAAO,MAAM,CAAC;AAAA,EACtB;AAEA,SAAO;AACR;",
  "names": ["path", "fs"]
}
