{
  "version": 3,
  "sources": ["../../src/third_party/pirates.ts"],
  "sourcesContent": ["/**\n *  MIT License\n *\n *  Copyright (c) 2016-2018 Ari Porad\n *  Modifications copyright (c) Microsoft Corporation.\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"Software\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in all\n *  copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *  SOFTWARE.\n */\n\nimport Module from 'module';\nimport path from 'path';\n\nexport function addHook(transformHook: (code: string, filename: string) => string, shouldTransform: (filename: string) => boolean, extensions: string[]) {\n  // This is a shortened and slightly changed version of https://github.com/danez/pirates.\n  //\n  // We cannot use pirates directly due to https://github.com/microsoft/playwright/issues/35812.\n  // If we overwrite the '.cjs', the following code does not run because there is a custom loader defined:\n  // https://github.com/nodejs/node/blob/b1973550e09d5a2a07c70be5de6e3ae4722ad230/lib/internal/modules/esm/translators.js#L397-L403\n  //\n  // Here we rely on the default '.js' loader to handle '.cjs' files.\n  const extensionsToOverwrite = extensions.filter(e => e !== '.cjs');\n  const allSupportedExtensions = new Set(extensions);\n  const loaders = (Module as any)._extensions;\n  const jsLoader = loaders['.js'];\n  for (const extension of extensionsToOverwrite) {\n    const originalLoader = loaders[extension] || jsLoader;\n    function newLoader(this: any, mod: any, filename: string, ...loaderArgs: any[]) {\n      if (allSupportedExtensions.has(path.extname(filename)) && shouldTransform(filename)) {\n        const oldCompile = mod._compile;\n        function newCompile(this: any, code: string, file: string, ...ignoredArgs: any[]) {\n          // Note: we do not pass |args| downstream to make sure \"esm modules\" loaded through here\n          // are treated as \"commonjs\", for example for \".mjs\" files.\n          // In theory, we should fix this, but it is a breaking change, even for playwright's own tests.\n          mod._compile = oldCompile;\n          return oldCompile.call(this, transformHook(code, filename), file);\n        }\n        mod._compile = newCompile;\n      }\n      originalLoader.call(this, mod, filename, ...loaderArgs);\n    }\n    loaders[extension] = newLoader;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA,oBAAmB;AACnB,kBAAiB;AAEV,SAAS,QAAQ,eAA2D,iBAAgD,YAAsB;AAQvJ,QAAM,wBAAwB,WAAW,OAAO,OAAK,MAAM,MAAM;AACjE,QAAM,yBAAyB,IAAI,IAAI,UAAU;AACjD,QAAM,UAAW,cAAAA,QAAe;AAChC,QAAM,WAAW,QAAQ,KAAK;AAC9B,aAAW,aAAa,uBAAuB;AAE7C,QAASC,aAAT,SAA8B,KAAU,aAAqB,YAAmB;AAC9E,UAAI,uBAAuB,IAAI,YAAAC,QAAK,QAAQ,QAAQ,CAAC,KAAK,gBAAgB,QAAQ,GAAG;AAEnF,YAASC,cAAT,SAA+B,MAAc,SAAiB,aAAoB;AAIhF,cAAI,WAAW;AACf,iBAAO,WAAW,KAAK,MAAM,cAAc,MAAM,QAAQ,GAAG,IAAI;AAAA,QAClE;AANS,yBAAAA;AADT,cAAM,aAAa,IAAI;AAQvB,YAAI,WAAWA;AAAA,MACjB;AACA,qBAAe,KAAK,MAAM,KAAK,UAAU,GAAG,UAAU;AAAA,IACxD;AAbS,oBAAAF;AADT,UAAM,iBAAiB,QAAQ,SAAS,KAAK;AAe7C,YAAQ,SAAS,IAAIA;AAAA,EACvB;AACF;",
  "names": ["Module", "newLoader", "path", "newCompile"]
}
