{
  "version": 3,
  "sources": ["../../src/loader/loaderMain.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deserializeConfig } from '../common/configLoader';\nimport { incorporateCompilationCache } from '../common/esmLoaderHost';\nimport { PoolBuilder } from '../common/poolBuilder';\nimport { ProcessRunner } from '../common/process';\nimport { loadTestFile } from '../common/testLoader';\nimport { serializeCompilationCache } from '../transform/compilationCache';\n\nimport type { TestError } from '../../types/testReporter';\nimport type { FullConfigInternal } from '../common/config';\nimport type { SerializedConfig } from '../common/ipc';\n\nexport class LoaderMain extends ProcessRunner {\n  private _serializedConfig: SerializedConfig;\n  private _configPromise: Promise<FullConfigInternal> | undefined;\n  private _poolBuilder = PoolBuilder.createForLoader();\n\n  constructor(serializedConfig: SerializedConfig) {\n    super();\n    this._serializedConfig = serializedConfig;\n  }\n\n  private _config(): Promise<FullConfigInternal> {\n    if (!this._configPromise)\n      this._configPromise = deserializeConfig(this._serializedConfig);\n    return this._configPromise;\n  }\n\n  async loadTestFile(params: { file: string }) {\n    const testErrors: TestError[] = [];\n    const config = await this._config();\n    const fileSuite = await loadTestFile(params.file, config.config.rootDir, testErrors);\n    this._poolBuilder.buildPools(fileSuite);\n    return { fileSuite: fileSuite._deepSerialize(), testErrors };\n  }\n\n  async getCompilationCacheFromLoader() {\n    await incorporateCompilationCache();\n    return serializeCompilationCache();\n  }\n}\n\nexport const create = (config: SerializedConfig) => new LoaderMain(config);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,0BAAkC;AAClC,2BAA4C;AAC5C,yBAA4B;AAC5B,qBAA8B;AAC9B,wBAA6B;AAC7B,8BAA0C;AAMnC,MAAM,mBAAmB,6BAAc;AAAA,EAK5C,YAAY,kBAAoC;AAC9C,UAAM;AAHR,SAAQ,eAAe,+BAAY,gBAAgB;AAIjD,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEQ,UAAuC;AAC7C,QAAI,CAAC,KAAK;AACR,WAAK,qBAAiB,uCAAkB,KAAK,iBAAiB;AAChE,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,aAAa,QAA0B;AAC3C,UAAM,aAA0B,CAAC;AACjC,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,YAAY,UAAM,gCAAa,OAAO,MAAM,OAAO,OAAO,SAAS,UAAU;AACnF,SAAK,aAAa,WAAW,SAAS;AACtC,WAAO,EAAE,WAAW,UAAU,eAAe,GAAG,WAAW;AAAA,EAC7D;AAAA,EAEA,MAAM,gCAAgC;AACpC,cAAM,kDAA4B;AAClC,eAAO,mDAA0B;AAAA,EACnC;AACF;AAEO,MAAM,SAAS,CAAC,WAA6B,IAAI,WAAW,MAAM;",
  "names": []
}
