const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/codeMirrorModule-XTQkAsR6.js","assets/codeMirrorModule-DuST8d_k.css"])))=>i.map(i=>d[i]);
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
var react = { exports: {} };
var react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReact_production_min;
function requireReact_production_min() {
  if (hasRequiredReact_production_min) return react_production_min;
  hasRequiredReact_production_min = 1;
  var l = Symbol.for("react.element"), n = Symbol.for("react.portal"), p = Symbol.for("react.fragment"), q = Symbol.for("react.strict_mode"), r = Symbol.for("react.profiler"), t = Symbol.for("react.provider"), u = Symbol.for("react.context"), v = Symbol.for("react.forward_ref"), w = Symbol.for("react.suspense"), x = Symbol.for("react.memo"), y = Symbol.for("react.lazy"), z = Symbol.iterator;
  function A(a) {
    if (null === a || "object" !== typeof a) return null;
    a = z && a[z] || a["@@iterator"];
    return "function" === typeof a ? a : null;
  }
  var B = { isMounted: function() {
    return false;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  } }, C = Object.assign, D = {};
  function E(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = e || B;
  }
  E.prototype.isReactComponent = {};
  E.prototype.setState = function(a, b) {
    if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, a, b, "setState");
  };
  E.prototype.forceUpdate = function(a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };
  function F() {
  }
  F.prototype = E.prototype;
  function G(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = e || B;
  }
  var H = G.prototype = new F();
  H.constructor = G;
  C(H, E.prototype);
  H.isPureReactComponent = true;
  var I = Array.isArray, J = Object.prototype.hasOwnProperty, K = { current: null }, L = { key: true, ref: true, __self: true, __source: true };
  function M(a, b, e) {
    var d, c = {}, k = null, h = null;
    if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
    var g = arguments.length - 2;
    if (1 === g) c.children = e;
    else if (1 < g) {
      for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
      c.children = f;
    }
    if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
    return { $$typeof: l, type: a, key: k, ref: h, props: c, _owner: K.current };
  }
  function N(a, b) {
    return { $$typeof: l, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
  }
  function O(a) {
    return "object" === typeof a && null !== a && a.$$typeof === l;
  }
  function escape(a) {
    var b = { "=": "=0", ":": "=2" };
    return "$" + a.replace(/[=:]/g, function(a2) {
      return b[a2];
    });
  }
  var P = /\/+/g;
  function Q(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
  }
  function R(a, b, e, d, c) {
    var k = typeof a;
    if ("undefined" === k || "boolean" === k) a = null;
    var h = false;
    if (null === a) h = true;
    else switch (k) {
      case "string":
      case "number":
        h = true;
        break;
      case "object":
        switch (a.$$typeof) {
          case l:
          case n:
            h = true;
        }
    }
    if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function(a2) {
      return a2;
    })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
    h = 0;
    d = "" === d ? "." : d + ":";
    if (I(a)) for (var g = 0; g < a.length; g++) {
      k = a[g];
      var f = d + Q(k, g);
      h += R(k, b, e, f, c);
    }
    else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done; ) k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);
    else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
    return h;
  }
  function S(a, b, e) {
    if (null == a) return a;
    var d = [], c = 0;
    R(a, d, "", "", function(a2) {
      return b.call(e, a2, c++);
    });
    return d;
  }
  function T(a) {
    if (-1 === a._status) {
      var b = a._result;
      b = b();
      b.then(function(b2) {
        if (0 === a._status || -1 === a._status) a._status = 1, a._result = b2;
      }, function(b2) {
        if (0 === a._status || -1 === a._status) a._status = 2, a._result = b2;
      });
      -1 === a._status && (a._status = 0, a._result = b);
    }
    if (1 === a._status) return a._result.default;
    throw a._result;
  }
  var U = { current: null }, V = { transition: null }, W = { ReactCurrentDispatcher: U, ReactCurrentBatchConfig: V, ReactCurrentOwner: K };
  function X() {
    throw Error("act(...) is not supported in production builds of React.");
  }
  react_production_min.Children = { map: S, forEach: function(a, b, e) {
    S(a, function() {
      b.apply(this, arguments);
    }, e);
  }, count: function(a) {
    var b = 0;
    S(a, function() {
      b++;
    });
    return b;
  }, toArray: function(a) {
    return S(a, function(a2) {
      return a2;
    }) || [];
  }, only: function(a) {
    if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
    return a;
  } };
  react_production_min.Component = E;
  react_production_min.Fragment = p;
  react_production_min.Profiler = r;
  react_production_min.PureComponent = G;
  react_production_min.StrictMode = q;
  react_production_min.Suspense = w;
  react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
  react_production_min.act = X;
  react_production_min.cloneElement = function(a, b, e) {
    if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
    var d = C({}, a.props), c = a.key, k = a.ref, h = a._owner;
    if (null != b) {
      void 0 !== b.ref && (k = b.ref, h = K.current);
      void 0 !== b.key && (c = "" + b.key);
      if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
      for (f in b) J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;
    else if (1 < f) {
      g = Array(f);
      for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
      d.children = g;
    }
    return { $$typeof: l, type: a.type, key: c, ref: k, props: d, _owner: h };
  };
  react_production_min.createContext = function(a) {
    a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
    a.Provider = { $$typeof: t, _context: a };
    return a.Consumer = a;
  };
  react_production_min.createElement = M;
  react_production_min.createFactory = function(a) {
    var b = M.bind(null, a);
    b.type = a;
    return b;
  };
  react_production_min.createRef = function() {
    return { current: null };
  };
  react_production_min.forwardRef = function(a) {
    return { $$typeof: v, render: a };
  };
  react_production_min.isValidElement = O;
  react_production_min.lazy = function(a) {
    return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T };
  };
  react_production_min.memo = function(a, b) {
    return { $$typeof: x, type: a, compare: void 0 === b ? null : b };
  };
  react_production_min.startTransition = function(a) {
    var b = V.transition;
    V.transition = {};
    try {
      a();
    } finally {
      V.transition = b;
    }
  };
  react_production_min.unstable_act = X;
  react_production_min.useCallback = function(a, b) {
    return U.current.useCallback(a, b);
  };
  react_production_min.useContext = function(a) {
    return U.current.useContext(a);
  };
  react_production_min.useDebugValue = function() {
  };
  react_production_min.useDeferredValue = function(a) {
    return U.current.useDeferredValue(a);
  };
  react_production_min.useEffect = function(a, b) {
    return U.current.useEffect(a, b);
  };
  react_production_min.useId = function() {
    return U.current.useId();
  };
  react_production_min.useImperativeHandle = function(a, b, e) {
    return U.current.useImperativeHandle(a, b, e);
  };
  react_production_min.useInsertionEffect = function(a, b) {
    return U.current.useInsertionEffect(a, b);
  };
  react_production_min.useLayoutEffect = function(a, b) {
    return U.current.useLayoutEffect(a, b);
  };
  react_production_min.useMemo = function(a, b) {
    return U.current.useMemo(a, b);
  };
  react_production_min.useReducer = function(a, b, e) {
    return U.current.useReducer(a, b, e);
  };
  react_production_min.useRef = function(a) {
    return U.current.useRef(a);
  };
  react_production_min.useState = function(a) {
    return U.current.useState(a);
  };
  react_production_min.useSyncExternalStore = function(a, b, e) {
    return U.current.useSyncExternalStore(a, b, e);
  };
  react_production_min.useTransition = function() {
    return U.current.useTransition();
  };
  react_production_min.version = "18.3.1";
  return react_production_min;
}
var hasRequiredReact;
function requireReact() {
  if (hasRequiredReact) return react.exports;
  hasRequiredReact = 1;
  {
    react.exports = requireReact_production_min();
  }
  return react.exports;
}
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_production_min;
function requireReactJsxRuntime_production_min() {
  if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
  hasRequiredReactJsxRuntime_production_min = 1;
  var f = requireReact(), k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p = { key: true, ref: true, __self: true, __source: true };
  function q(c, a, g) {
    var b, d = {}, e = null, h = null;
    void 0 !== g && (e = "" + g);
    void 0 !== a.key && (e = "" + a.key);
    void 0 !== a.ref && (h = a.ref);
    for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
    if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
    return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
  }
  reactJsxRuntime_production_min.Fragment = l;
  reactJsxRuntime_production_min.jsx = q;
  reactJsxRuntime_production_min.jsxs = q;
  return reactJsxRuntime_production_min;
}
var hasRequiredJsxRuntime;
function requireJsxRuntime() {
  if (hasRequiredJsxRuntime) return jsxRuntime.exports;
  hasRequiredJsxRuntime = 1;
  {
    jsxRuntime.exports = requireReactJsxRuntime_production_min();
  }
  return jsxRuntime.exports;
}
var jsxRuntimeExports = requireJsxRuntime();
var reactExports = requireReact();
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
function useMeasure() {
  const ref = React.useRef(null);
  const [measure, setMeasure] = React.useState(new DOMRect(0, 0, 10, 10));
  React.useLayoutEffect(() => {
    const target = ref.current;
    if (!target)
      return;
    const bounds = target.getBoundingClientRect();
    setMeasure(new DOMRect(0, 0, bounds.width, bounds.height));
    const resizeObserver = new ResizeObserver((entries) => {
      const entry = entries[entries.length - 1];
      if (entry && entry.contentRect)
        setMeasure(entry.contentRect);
    });
    resizeObserver.observe(target);
    return () => resizeObserver.disconnect();
  }, [ref]);
  return [measure, ref];
}
function msToString(ms) {
  if (ms < 0 || !isFinite(ms))
    return "-";
  if (ms === 0)
    return "0";
  if (ms < 1e3)
    return ms.toFixed(0) + "ms";
  const seconds = ms / 1e3;
  if (seconds < 60)
    return seconds.toFixed(1) + "s";
  const minutes = seconds / 60;
  if (minutes < 60)
    return minutes.toFixed(1) + "m";
  const hours = minutes / 60;
  if (hours < 24)
    return hours.toFixed(1) + "h";
  const days = hours / 24;
  return days.toFixed(1) + "d";
}
function copy(text) {
  const textArea = document.createElement("textarea");
  textArea.style.position = "absolute";
  textArea.style.zIndex = "-1000";
  textArea.value = text;
  document.body.appendChild(textArea);
  textArea.select();
  document.execCommand("copy");
  textArea.remove();
}
function useSetting(name, defaultValue) {
  if (name)
    defaultValue = settings.getObject(name, defaultValue);
  const [value, setValue] = React.useState(defaultValue);
  const setValueWrapper = React.useCallback((value2) => {
    if (name)
      settings.setObject(name, value2);
    else
      setValue(value2);
  }, [name, setValue]);
  React.useEffect(() => {
    if (name) {
      const onStoreChange = () => setValue(settings.getObject(name, defaultValue));
      settings.onChangeEmitter.addEventListener(name, onStoreChange);
      return () => settings.onChangeEmitter.removeEventListener(name, onStoreChange);
    }
  }, [defaultValue, name]);
  return [value, setValueWrapper];
}
class Settings {
  constructor() {
    this.onChangeEmitter = new EventTarget();
  }
  getString(name, defaultValue) {
    return localStorage[name] || defaultValue;
  }
  setString(name, value) {
    var _a;
    localStorage[name] = value;
    this.onChangeEmitter.dispatchEvent(new Event(name));
    (_a = window.saveSettings) == null ? void 0 : _a.call(window);
  }
  getObject(name, defaultValue) {
    if (!localStorage[name])
      return defaultValue;
    try {
      return JSON.parse(localStorage[name]);
    } catch {
      return defaultValue;
    }
  }
  setObject(name, value) {
    var _a;
    localStorage[name] = JSON.stringify(value);
    this.onChangeEmitter.dispatchEvent(new Event(name));
    (_a = window.saveSettings) == null ? void 0 : _a.call(window);
  }
}
const settings = new Settings();
function clsx(...classes) {
  return classes.filter(Boolean).join(" ");
}
const kControlCodesRe = "\\u0000-\\u0020\\u007f-\\u009f";
const kWebLinkRe = new RegExp("(?:[a-zA-Z][a-zA-Z0-9+.-]{2,}:\\/\\/|www\\.)[^\\s" + kControlCodesRe + '"]{2,}[^\\s' + kControlCodesRe + `"')}\\],:;.!?]`, "ug");
function applyTheme() {
  if (document.playwrightThemeInitialized)
    return;
  document.playwrightThemeInitialized = true;
  document.defaultView.addEventListener("focus", (event) => {
    if (event.target.document.nodeType === Node.DOCUMENT_NODE)
      document.body.classList.remove("inactive");
  }, false);
  document.defaultView.addEventListener("blur", (event) => {
    document.body.classList.add("inactive");
  }, false);
  const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)");
  const defaultTheme = prefersDarkScheme.matches ? "dark-mode" : "light-mode";
  const currentTheme2 = settings.getString("theme", defaultTheme);
  if (currentTheme2 === "dark-mode")
    document.body.classList.add("dark-mode");
}
const listeners = /* @__PURE__ */ new Set();
function toggleTheme() {
  const oldTheme = currentTheme();
  const newTheme = oldTheme === "dark-mode" ? "light-mode" : "dark-mode";
  if (oldTheme)
    document.body.classList.remove(oldTheme);
  document.body.classList.add(newTheme);
  settings.setString("theme", newTheme);
  for (const listener of listeners)
    listener(newTheme);
}
function currentTheme() {
  return document.body.classList.contains("dark-mode") ? "dark-mode" : "light-mode";
}
function useDarkModeSetting() {
  const [theme, setTheme] = React.useState(currentTheme() === "dark-mode");
  return [theme, (value) => {
    const current = currentTheme() === "dark-mode";
    if (current !== value)
      toggleTheme();
    setTheme(value);
  }];
}
var client = {};
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredScheduler_production_min;
function requireScheduler_production_min() {
  if (hasRequiredScheduler_production_min) return scheduler_production_min;
  hasRequiredScheduler_production_min = 1;
  (function(exports) {
    function f(a, b) {
      var c = a.length;
      a.push(b);
      a: for (; 0 < c; ) {
        var d = c - 1 >>> 1, e = a[d];
        if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;
        else break a;
      }
    }
    function h(a) {
      return 0 === a.length ? null : a[0];
    }
    function k(a) {
      if (0 === a.length) return null;
      var b = a[0], c = a.pop();
      if (c !== b) {
        a[0] = c;
        a: for (var d = 0, e = a.length, w = e >>> 1; d < w; ) {
          var m = 2 * (d + 1) - 1, C = a[m], n = m + 1, x = a[n];
          if (0 > g(C, c)) n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);
          else if (n < e && 0 > g(x, c)) a[d] = x, a[n] = c, d = n;
          else break a;
        }
      }
      return b;
    }
    function g(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return 0 !== c ? c : a.id - b.id;
    }
    if ("object" === typeof performance && "function" === typeof performance.now) {
      var l = performance;
      exports.unstable_now = function() {
        return l.now();
      };
    } else {
      var p = Date, q = p.now();
      exports.unstable_now = function() {
        return p.now() - q;
      };
    }
    var r = [], t = [], u = 1, v = null, y = 3, z = false, A = false, B = false, D = "function" === typeof setTimeout ? setTimeout : null, E = "function" === typeof clearTimeout ? clearTimeout : null, F = "undefined" !== typeof setImmediate ? setImmediate : null;
    "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function G(a) {
      for (var b = h(t); null !== b; ) {
        if (null === b.callback) k(t);
        else if (b.startTime <= a) k(t), b.sortIndex = b.expirationTime, f(r, b);
        else break;
        b = h(t);
      }
    }
    function H(a) {
      B = false;
      G(a);
      if (!A) if (null !== h(r)) A = true, I(J);
      else {
        var b = h(t);
        null !== b && K(H, b.startTime - a);
      }
    }
    function J(a, b) {
      A = false;
      B && (B = false, E(L), L = -1);
      z = true;
      var c = y;
      try {
        G(b);
        for (v = h(r); null !== v && (!(v.expirationTime > b) || a && !M()); ) {
          var d = v.callback;
          if ("function" === typeof d) {
            v.callback = null;
            y = v.priorityLevel;
            var e = d(v.expirationTime <= b);
            b = exports.unstable_now();
            "function" === typeof e ? v.callback = e : v === h(r) && k(r);
            G(b);
          } else k(r);
          v = h(r);
        }
        if (null !== v) var w = true;
        else {
          var m = h(t);
          null !== m && K(H, m.startTime - b);
          w = false;
        }
        return w;
      } finally {
        v = null, y = c, z = false;
      }
    }
    var N = false, O = null, L = -1, P = 5, Q = -1;
    function M() {
      return exports.unstable_now() - Q < P ? false : true;
    }
    function R() {
      if (null !== O) {
        var a = exports.unstable_now();
        Q = a;
        var b = true;
        try {
          b = O(true, a);
        } finally {
          b ? S() : (N = false, O = null);
        }
      } else N = false;
    }
    var S;
    if ("function" === typeof F) S = function() {
      F(R);
    };
    else if ("undefined" !== typeof MessageChannel) {
      var T = new MessageChannel(), U = T.port2;
      T.port1.onmessage = R;
      S = function() {
        U.postMessage(null);
      };
    } else S = function() {
      D(R, 0);
    };
    function I(a) {
      O = a;
      N || (N = true, S());
    }
    function K(a, b) {
      L = D(function() {
        a(exports.unstable_now());
      }, b);
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(a) {
      a.callback = null;
    };
    exports.unstable_continueExecution = function() {
      A || z || (A = true, I(J));
    };
    exports.unstable_forceFrameRate = function(a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1e3 / a) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return y;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return h(r);
    };
    exports.unstable_next = function(a) {
      switch (y) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;
        default:
          b = y;
      }
      var c = y;
      y = b;
      try {
        return a();
      } finally {
        y = c;
      }
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = function() {
    };
    exports.unstable_runWithPriority = function(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a = 3;
      }
      var c = y;
      y = a;
      try {
        return b();
      } finally {
        y = c;
      }
    };
    exports.unstable_scheduleCallback = function(a, b, c) {
      var d = exports.unstable_now();
      "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
      switch (a) {
        case 1:
          var e = -1;
          break;
        case 2:
          e = 250;
          break;
        case 5:
          e = 1073741823;
          break;
        case 4:
          e = 1e4;
          break;
        default:
          e = 5e3;
      }
      e = c + e;
      a = { id: u++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
      c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = true, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = true, I(J)));
      return a;
    };
    exports.unstable_shouldYield = M;
    exports.unstable_wrapCallback = function(a) {
      var b = y;
      return function() {
        var c = y;
        y = b;
        try {
          return a.apply(this, arguments);
        } finally {
          y = c;
        }
      };
    };
  })(scheduler_production_min);
  return scheduler_production_min;
}
var hasRequiredScheduler;
function requireScheduler() {
  if (hasRequiredScheduler) return scheduler.exports;
  hasRequiredScheduler = 1;
  {
    scheduler.exports = requireScheduler_production_min();
  }
  return scheduler.exports;
}
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactDom_production_min;
function requireReactDom_production_min() {
  if (hasRequiredReactDom_production_min) return reactDom_production_min;
  hasRequiredReactDom_production_min = 1;
  var aa = requireReact(), ca = requireScheduler();
  function p(a) {
    for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var da = /* @__PURE__ */ new Set(), ea = {};
  function fa(a, b) {
    ha(a, b);
    ha(a + "Capture", b);
  }
  function ha(a, b) {
    ea[a] = b;
    for (a = 0; a < b.length; a++) da.add(b[a]);
  }
  var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
  function oa(a) {
    if (ja.call(ma, a)) return true;
    if (ja.call(la, a)) return false;
    if (ka.test(a)) return ma[a] = true;
    la[a] = true;
    return false;
  }
  function pa(a, b, c, d) {
    if (null !== c && 0 === c.type) return false;
    switch (typeof b) {
      case "function":
      case "symbol":
        return true;
      case "boolean":
        if (d) return false;
        if (null !== c) return !c.acceptsBooleans;
        a = a.toLowerCase().slice(0, 5);
        return "data-" !== a && "aria-" !== a;
      default:
        return false;
    }
  }
  function qa(a, b, c, d) {
    if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return true;
    if (d) return false;
    if (null !== c) switch (c.type) {
      case 3:
        return !b;
      case 4:
        return false === b;
      case 5:
        return isNaN(b);
      case 6:
        return isNaN(b) || 1 > b;
    }
    return false;
  }
  function v(a, b, c, d, e, f, g) {
    this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
    this.attributeName = d;
    this.attributeNamespace = e;
    this.mustUseProperty = c;
    this.propertyName = a;
    this.type = b;
    this.sanitizeURL = f;
    this.removeEmptyString = g;
  }
  var z = {};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
    z[a] = new v(a, 0, false, a, null, false, false);
  });
  [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
    var b = a[0];
    z[b] = new v(b, 1, false, a[1], null, false, false);
  });
  ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
    z[a] = new v(a, 2, false, a.toLowerCase(), null, false, false);
  });
  ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
    z[a] = new v(a, 2, false, a, null, false, false);
  });
  "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
    z[a] = new v(a, 3, false, a.toLowerCase(), null, false, false);
  });
  ["checked", "multiple", "muted", "selected"].forEach(function(a) {
    z[a] = new v(a, 3, true, a, null, false, false);
  });
  ["capture", "download"].forEach(function(a) {
    z[a] = new v(a, 4, false, a, null, false, false);
  });
  ["cols", "rows", "size", "span"].forEach(function(a) {
    z[a] = new v(a, 6, false, a, null, false, false);
  });
  ["rowSpan", "start"].forEach(function(a) {
    z[a] = new v(a, 5, false, a.toLowerCase(), null, false, false);
  });
  var ra = /[\-:]([a-z])/g;
  function sa(a) {
    return a[1].toUpperCase();
  }
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
    var b = a.replace(
      ra,
      sa
    );
    z[b] = new v(b, 1, false, a, null, false, false);
  });
  "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
    var b = a.replace(ra, sa);
    z[b] = new v(b, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
  });
  ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
    var b = a.replace(ra, sa);
    z[b] = new v(b, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
  });
  ["tabIndex", "crossOrigin"].forEach(function(a) {
    z[a] = new v(a, 1, false, a.toLowerCase(), null, false, false);
  });
  z.xlinkHref = new v("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
  ["src", "href", "action", "formAction"].forEach(function(a) {
    z[a] = new v(a, 1, false, a.toLowerCase(), null, true, true);
  });
  function ta(a, b, c, d) {
    var e = z.hasOwnProperty(b) ? z[b] : null;
    if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? false : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && true === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
  }
  var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
  var Ia = Symbol.for("react.offscreen");
  var Ja = Symbol.iterator;
  function Ka(a) {
    if (null === a || "object" !== typeof a) return null;
    a = Ja && a[Ja] || a["@@iterator"];
    return "function" === typeof a ? a : null;
  }
  var A = Object.assign, La;
  function Ma(a) {
    if (void 0 === La) try {
      throw Error();
    } catch (c) {
      var b = c.stack.trim().match(/\n( *(at )?)/);
      La = b && b[1] || "";
    }
    return "\n" + La + a;
  }
  var Na = false;
  function Oa(a, b) {
    if (!a || Na) return "";
    Na = true;
    var c = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (b) if (b = function() {
        throw Error();
      }, Object.defineProperty(b.prototype, "props", { set: function() {
        throw Error();
      } }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b, []);
        } catch (l) {
          var d = l;
        }
        Reflect.construct(a, [], b);
      } else {
        try {
          b.call();
        } catch (l) {
          d = l;
        }
        a.call(b.prototype);
      }
      else {
        try {
          throw Error();
        } catch (l) {
          d = l;
        }
        a();
      }
    } catch (l) {
      if (l && d && "string" === typeof l.stack) {
        for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h]; ) h--;
        for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {
          if (1 !== g || 1 !== h) {
            do
              if (g--, h--, 0 > h || e[g] !== f[h]) {
                var k = "\n" + e[g].replace(" at new ", " at ");
                a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
                return k;
              }
            while (1 <= g && 0 <= h);
          }
          break;
        }
      }
    } finally {
      Na = false, Error.prepareStackTrace = c;
    }
    return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
  }
  function Pa(a) {
    switch (a.tag) {
      case 5:
        return Ma(a.type);
      case 16:
        return Ma("Lazy");
      case 13:
        return Ma("Suspense");
      case 19:
        return Ma("SuspenseList");
      case 0:
      case 2:
      case 15:
        return a = Oa(a.type, false), a;
      case 11:
        return a = Oa(a.type.render, false), a;
      case 1:
        return a = Oa(a.type, true), a;
      default:
        return "";
    }
  }
  function Qa(a) {
    if (null == a) return null;
    if ("function" === typeof a) return a.displayName || a.name || null;
    if ("string" === typeof a) return a;
    switch (a) {
      case ya:
        return "Fragment";
      case wa:
        return "Portal";
      case Aa:
        return "Profiler";
      case za:
        return "StrictMode";
      case Ea:
        return "Suspense";
      case Fa:
        return "SuspenseList";
    }
    if ("object" === typeof a) switch (a.$$typeof) {
      case Ca:
        return (a.displayName || "Context") + ".Consumer";
      case Ba:
        return (a._context.displayName || "Context") + ".Provider";
      case Da:
        var b = a.render;
        a = a.displayName;
        a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
        return a;
      case Ga:
        return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
      case Ha:
        b = a._payload;
        a = a._init;
        try {
          return Qa(a(b));
        } catch (c) {
        }
    }
    return null;
  }
  function Ra(a) {
    var b = a.type;
    switch (a.tag) {
      case 24:
        return "Cache";
      case 9:
        return (b.displayName || "Context") + ".Consumer";
      case 10:
        return (b._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return b;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return Qa(b);
      case 8:
        return b === za ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if ("function" === typeof b) return b.displayName || b.name || null;
        if ("string" === typeof b) return b;
    }
    return null;
  }
  function Sa(a) {
    switch (typeof a) {
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        return a;
      case "object":
        return a;
      default:
        return "";
    }
  }
  function Ta(a) {
    var b = a.type;
    return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
  }
  function Ua(a) {
    var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
    if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
      var e = c.get, f = c.set;
      Object.defineProperty(a, b, { configurable: true, get: function() {
        return e.call(this);
      }, set: function(a2) {
        d = "" + a2;
        f.call(this, a2);
      } });
      Object.defineProperty(a, b, { enumerable: c.enumerable });
      return { getValue: function() {
        return d;
      }, setValue: function(a2) {
        d = "" + a2;
      }, stopTracking: function() {
        a._valueTracker = null;
        delete a[b];
      } };
    }
  }
  function Va(a) {
    a._valueTracker || (a._valueTracker = Ua(a));
  }
  function Wa(a) {
    if (!a) return false;
    var b = a._valueTracker;
    if (!b) return true;
    var c = b.getValue();
    var d = "";
    a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
    a = d;
    return a !== c ? (b.setValue(a), true) : false;
  }
  function Xa(a) {
    a = a || ("undefined" !== typeof document ? document : void 0);
    if ("undefined" === typeof a) return null;
    try {
      return a.activeElement || a.body;
    } catch (b) {
      return a.body;
    }
  }
  function Ya(a, b) {
    var c = b.checked;
    return A({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
  }
  function Za(a, b) {
    var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
    c = Sa(null != b.value ? b.value : c);
    a._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
  }
  function ab(a, b) {
    b = b.checked;
    null != b && ta(a, "checked", b, false);
  }
  function bb(a, b) {
    ab(a, b);
    var c = Sa(b.value), d = b.type;
    if (null != c) if ("number" === d) {
      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
    } else a.value !== "" + c && (a.value = "" + c);
    else if ("submit" === d || "reset" === d) {
      a.removeAttribute("value");
      return;
    }
    b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
    null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
  }
  function db(a, b, c) {
    if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
      var d = b.type;
      if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
      b = "" + a._wrapperState.initialValue;
      c || b === a.value || (a.value = b);
      a.defaultValue = b;
    }
    c = a.name;
    "" !== c && (a.name = "");
    a.defaultChecked = !!a._wrapperState.initialChecked;
    "" !== c && (a.name = c);
  }
  function cb(a, b, c) {
    if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
  }
  var eb = Array.isArray;
  function fb(a, b, c, d) {
    a = a.options;
    if (b) {
      b = {};
      for (var e = 0; e < c.length; e++) b["$" + c[e]] = true;
      for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = true);
    } else {
      c = "" + Sa(c);
      b = null;
      for (e = 0; e < a.length; e++) {
        if (a[e].value === c) {
          a[e].selected = true;
          d && (a[e].defaultSelected = true);
          return;
        }
        null !== b || a[e].disabled || (b = a[e]);
      }
      null !== b && (b.selected = true);
    }
  }
  function gb(a, b) {
    if (null != b.dangerouslySetInnerHTML) throw Error(p(91));
    return A({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
  }
  function hb(a, b) {
    var c = b.value;
    if (null == c) {
      c = b.children;
      b = b.defaultValue;
      if (null != c) {
        if (null != b) throw Error(p(92));
        if (eb(c)) {
          if (1 < c.length) throw Error(p(93));
          c = c[0];
        }
        b = c;
      }
      null == b && (b = "");
      c = b;
    }
    a._wrapperState = { initialValue: Sa(c) };
  }
  function ib(a, b) {
    var c = Sa(b.value), d = Sa(b.defaultValue);
    null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
    null != d && (a.defaultValue = "" + d);
  }
  function jb(a) {
    var b = a.textContent;
    b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
  }
  function kb(a) {
    switch (a) {
      case "svg":
        return "http://www.w3.org/2000/svg";
      case "math":
        return "http://www.w3.org/1998/Math/MathML";
      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }
  function lb(a, b) {
    return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
  }
  var mb, nb = function(a) {
    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
      MSApp.execUnsafeLocalFunction(function() {
        return a(b, c, d, e);
      });
    } : a;
  }(function(a, b) {
    if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;
    else {
      mb = mb || document.createElement("div");
      mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
      for (b = mb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
      for (; b.firstChild; ) a.appendChild(b.firstChild);
    }
  });
  function ob(a, b) {
    if (b) {
      var c = a.firstChild;
      if (c && c === a.lastChild && 3 === c.nodeType) {
        c.nodeValue = b;
        return;
      }
    }
    a.textContent = b;
  }
  var pb = {
    animationIterationCount: true,
    aspectRatio: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridArea: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  }, qb = ["Webkit", "ms", "Moz", "O"];
  Object.keys(pb).forEach(function(a) {
    qb.forEach(function(b) {
      b = b + a.charAt(0).toUpperCase() + a.substring(1);
      pb[b] = pb[a];
    });
  });
  function rb(a, b, c) {
    return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
  }
  function sb(a, b) {
    a = a.style;
    for (var c in b) if (b.hasOwnProperty(c)) {
      var d = 0 === c.indexOf("--"), e = rb(c, b[c], d);
      "float" === c && (c = "cssFloat");
      d ? a.setProperty(c, e) : a[c] = e;
    }
  }
  var tb = A({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
  function ub(a, b) {
    if (b) {
      if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p(137, a));
      if (null != b.dangerouslySetInnerHTML) {
        if (null != b.children) throw Error(p(60));
        if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p(61));
      }
      if (null != b.style && "object" !== typeof b.style) throw Error(p(62));
    }
  }
  function vb(a, b) {
    if (-1 === a.indexOf("-")) return "string" === typeof b.is;
    switch (a) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return false;
      default:
        return true;
    }
  }
  var wb = null;
  function xb(a) {
    a = a.target || a.srcElement || window;
    a.correspondingUseElement && (a = a.correspondingUseElement);
    return 3 === a.nodeType ? a.parentNode : a;
  }
  var yb = null, zb = null, Ab = null;
  function Bb(a) {
    if (a = Cb(a)) {
      if ("function" !== typeof yb) throw Error(p(280));
      var b = a.stateNode;
      b && (b = Db(b), yb(a.stateNode, a.type, b));
    }
  }
  function Eb(a) {
    zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
  }
  function Fb() {
    if (zb) {
      var a = zb, b = Ab;
      Ab = zb = null;
      Bb(a);
      if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
    }
  }
  function Gb(a, b) {
    return a(b);
  }
  function Hb() {
  }
  var Ib = false;
  function Jb(a, b, c) {
    if (Ib) return a(b, c);
    Ib = true;
    try {
      return Gb(a, b, c);
    } finally {
      if (Ib = false, null !== zb || null !== Ab) Hb(), Fb();
    }
  }
  function Kb(a, b) {
    var c = a.stateNode;
    if (null === c) return null;
    var d = Db(c);
    if (null === d) return null;
    c = d[b];
    a: switch (b) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
        a = !d;
        break a;
      default:
        a = false;
    }
    if (a) return null;
    if (c && "function" !== typeof c) throw Error(p(231, b, typeof c));
    return c;
  }
  var Lb = false;
  if (ia) try {
    var Mb = {};
    Object.defineProperty(Mb, "passive", { get: function() {
      Lb = true;
    } });
    window.addEventListener("test", Mb, Mb);
    window.removeEventListener("test", Mb, Mb);
  } catch (a) {
    Lb = false;
  }
  function Nb(a, b, c, d, e, f, g, h, k) {
    var l = Array.prototype.slice.call(arguments, 3);
    try {
      b.apply(c, l);
    } catch (m) {
      this.onError(m);
    }
  }
  var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a) {
    Ob = true;
    Pb = a;
  } };
  function Tb(a, b, c, d, e, f, g, h, k) {
    Ob = false;
    Pb = null;
    Nb.apply(Sb, arguments);
  }
  function Ub(a, b, c, d, e, f, g, h, k) {
    Tb.apply(this, arguments);
    if (Ob) {
      if (Ob) {
        var l = Pb;
        Ob = false;
        Pb = null;
      } else throw Error(p(198));
      Qb || (Qb = true, Rb = l);
    }
  }
  function Vb(a) {
    var b = a, c = a;
    if (a.alternate) for (; b.return; ) b = b.return;
    else {
      a = b;
      do
        b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
      while (a);
    }
    return 3 === b.tag ? c : null;
  }
  function Wb(a) {
    if (13 === a.tag) {
      var b = a.memoizedState;
      null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
      if (null !== b) return b.dehydrated;
    }
    return null;
  }
  function Xb(a) {
    if (Vb(a) !== a) throw Error(p(188));
  }
  function Yb(a) {
    var b = a.alternate;
    if (!b) {
      b = Vb(a);
      if (null === b) throw Error(p(188));
      return b !== a ? null : a;
    }
    for (var c = a, d = b; ; ) {
      var e = c.return;
      if (null === e) break;
      var f = e.alternate;
      if (null === f) {
        d = e.return;
        if (null !== d) {
          c = d;
          continue;
        }
        break;
      }
      if (e.child === f.child) {
        for (f = e.child; f; ) {
          if (f === c) return Xb(e), a;
          if (f === d) return Xb(e), b;
          f = f.sibling;
        }
        throw Error(p(188));
      }
      if (c.return !== d.return) c = e, d = f;
      else {
        for (var g = false, h = e.child; h; ) {
          if (h === c) {
            g = true;
            c = e;
            d = f;
            break;
          }
          if (h === d) {
            g = true;
            d = e;
            c = f;
            break;
          }
          h = h.sibling;
        }
        if (!g) {
          for (h = f.child; h; ) {
            if (h === c) {
              g = true;
              c = f;
              d = e;
              break;
            }
            if (h === d) {
              g = true;
              d = f;
              c = e;
              break;
            }
            h = h.sibling;
          }
          if (!g) throw Error(p(189));
        }
      }
      if (c.alternate !== d) throw Error(p(190));
    }
    if (3 !== c.tag) throw Error(p(188));
    return c.stateNode.current === c ? a : b;
  }
  function Zb(a) {
    a = Yb(a);
    return null !== a ? $b(a) : null;
  }
  function $b(a) {
    if (5 === a.tag || 6 === a.tag) return a;
    for (a = a.child; null !== a; ) {
      var b = $b(a);
      if (null !== b) return b;
      a = a.sibling;
    }
    return null;
  }
  var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
  function mc(a) {
    if (lc && "function" === typeof lc.onCommitFiberRoot) try {
      lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
    } catch (b) {
    }
  }
  var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
  function nc(a) {
    a >>>= 0;
    return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
  }
  var rc = 64, sc = 4194304;
  function tc(a) {
    switch (a & -a) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return a & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return a & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return a;
    }
  }
  function uc(a, b) {
    var c = a.pendingLanes;
    if (0 === c) return 0;
    var d = 0, e = a.suspendedLanes, f = a.pingedLanes, g = c & 268435455;
    if (0 !== g) {
      var h = g & ~e;
      0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));
    } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));
    if (0 === d) return 0;
    if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
    0 !== (d & 4) && (d |= c & 16);
    b = a.entangledLanes;
    if (0 !== b) for (a = a.entanglements, b &= d; 0 < b; ) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
    return d;
  }
  function vc(a, b) {
    switch (a) {
      case 1:
      case 2:
      case 4:
        return b + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return b + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function wc(a, b) {
    for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f; ) {
      var g = 31 - oc(f), h = 1 << g, k = e[g];
      if (-1 === k) {
        if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
      } else k <= b && (a.expiredLanes |= h);
      f &= ~h;
    }
  }
  function xc(a) {
    a = a.pendingLanes & -1073741825;
    return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
  }
  function yc() {
    var a = rc;
    rc <<= 1;
    0 === (rc & 4194240) && (rc = 64);
    return a;
  }
  function zc(a) {
    for (var b = [], c = 0; 31 > c; c++) b.push(a);
    return b;
  }
  function Ac(a, b, c) {
    a.pendingLanes |= b;
    536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
    a = a.eventTimes;
    b = 31 - oc(b);
    a[b] = c;
  }
  function Bc(a, b) {
    var c = a.pendingLanes & ~b;
    a.pendingLanes = b;
    a.suspendedLanes = 0;
    a.pingedLanes = 0;
    a.expiredLanes &= b;
    a.mutableReadLanes &= b;
    a.entangledLanes &= b;
    b = a.entanglements;
    var d = a.eventTimes;
    for (a = a.expirationTimes; 0 < c; ) {
      var e = 31 - oc(c), f = 1 << e;
      b[e] = 0;
      d[e] = -1;
      a[e] = -1;
      c &= ~f;
    }
  }
  function Cc(a, b) {
    var c = a.entangledLanes |= b;
    for (a = a.entanglements; c; ) {
      var d = 31 - oc(c), e = 1 << d;
      e & b | a[d] & b && (a[d] |= b);
      c &= ~e;
    }
  }
  var C = 0;
  function Dc(a) {
    a &= -a;
    return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
  }
  var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
  function Sc(a, b) {
    switch (a) {
      case "focusin":
      case "focusout":
        Lc = null;
        break;
      case "dragenter":
      case "dragleave":
        Mc = null;
        break;
      case "mouseover":
      case "mouseout":
        Nc = null;
        break;
      case "pointerover":
      case "pointerout":
        Oc.delete(b.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        Pc.delete(b.pointerId);
    }
  }
  function Tc(a, b, c, d, e, f) {
    if (null === a || a.nativeEvent !== f) return a = { blockedOn: b, domEventName: c, eventSystemFlags: d, nativeEvent: f, targetContainers: [e] }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
    a.eventSystemFlags |= d;
    b = a.targetContainers;
    null !== e && -1 === b.indexOf(e) && b.push(e);
    return a;
  }
  function Uc(a, b, c, d, e) {
    switch (b) {
      case "focusin":
        return Lc = Tc(Lc, a, b, c, d, e), true;
      case "dragenter":
        return Mc = Tc(Mc, a, b, c, d, e), true;
      case "mouseover":
        return Nc = Tc(Nc, a, b, c, d, e), true;
      case "pointerover":
        var f = e.pointerId;
        Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));
        return true;
      case "gotpointercapture":
        return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), true;
    }
    return false;
  }
  function Vc(a) {
    var b = Wc(a.target);
    if (null !== b) {
      var c = Vb(b);
      if (null !== c) {
        if (b = c.tag, 13 === b) {
          if (b = Wb(c), null !== b) {
            a.blockedOn = b;
            Ic(a.priority, function() {
              Gc(c);
            });
            return;
          }
        } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
          a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
          return;
        }
      }
    }
    a.blockedOn = null;
  }
  function Xc(a) {
    if (null !== a.blockedOn) return false;
    for (var b = a.targetContainers; 0 < b.length; ) {
      var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
      if (null === c) {
        c = a.nativeEvent;
        var d = new c.constructor(c.type, c);
        wb = d;
        c.target.dispatchEvent(d);
        wb = null;
      } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, false;
      b.shift();
    }
    return true;
  }
  function Zc(a, b, c) {
    Xc(a) && c.delete(b);
  }
  function $c() {
    Jc = false;
    null !== Lc && Xc(Lc) && (Lc = null);
    null !== Mc && Xc(Mc) && (Mc = null);
    null !== Nc && Xc(Nc) && (Nc = null);
    Oc.forEach(Zc);
    Pc.forEach(Zc);
  }
  function ad(a, b) {
    a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
  }
  function bd(a) {
    function b(b2) {
      return ad(b2, a);
    }
    if (0 < Kc.length) {
      ad(Kc[0], a);
      for (var c = 1; c < Kc.length; c++) {
        var d = Kc[c];
        d.blockedOn === a && (d.blockedOn = null);
      }
    }
    null !== Lc && ad(Lc, a);
    null !== Mc && ad(Mc, a);
    null !== Nc && ad(Nc, a);
    Oc.forEach(b);
    Pc.forEach(b);
    for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
    for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn); ) Vc(c), null === c.blockedOn && Qc.shift();
  }
  var cd = ua.ReactCurrentBatchConfig, dd = true;
  function ed(a, b, c, d) {
    var e = C, f = cd.transition;
    cd.transition = null;
    try {
      C = 1, fd(a, b, c, d);
    } finally {
      C = e, cd.transition = f;
    }
  }
  function gd(a, b, c, d) {
    var e = C, f = cd.transition;
    cd.transition = null;
    try {
      C = 4, fd(a, b, c, d);
    } finally {
      C = e, cd.transition = f;
    }
  }
  function fd(a, b, c, d) {
    if (dd) {
      var e = Yc(a, b, c, d);
      if (null === e) hd(a, b, d, id, c), Sc(a, d);
      else if (Uc(e, a, b, c, d)) d.stopPropagation();
      else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
        for (; null !== e; ) {
          var f = Cb(e);
          null !== f && Ec(f);
          f = Yc(a, b, c, d);
          null === f && hd(a, b, d, id, c);
          if (f === e) break;
          e = f;
        }
        null !== e && d.stopPropagation();
      } else hd(a, b, d, null, c);
    }
  }
  var id = null;
  function Yc(a, b, c, d) {
    id = null;
    a = xb(d);
    a = Wc(a);
    if (null !== a) if (b = Vb(a), null === b) a = null;
    else if (c = b.tag, 13 === c) {
      a = Wb(b);
      if (null !== a) return a;
      a = null;
    } else if (3 === c) {
      if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
      a = null;
    } else b !== a && (a = null);
    id = a;
    return null;
  }
  function jd(a) {
    switch (a) {
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 1;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "toggle":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 4;
      case "message":
        switch (ec()) {
          case fc:
            return 1;
          case gc:
            return 4;
          case hc:
          case ic:
            return 16;
          case jc:
            return 536870912;
          default:
            return 16;
        }
      default:
        return 16;
    }
  }
  var kd = null, ld = null, md = null;
  function nd() {
    if (md) return md;
    var a, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
    for (a = 0; a < c && b[a] === e[a]; a++) ;
    var g = c - a;
    for (d = 1; d <= g && b[c - d] === e[f - d]; d++) ;
    return md = e.slice(a, 1 < d ? 1 - d : void 0);
  }
  function od(a) {
    var b = a.keyCode;
    "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
    10 === a && (a = 13);
    return 32 <= a || 13 === a ? a : 0;
  }
  function pd() {
    return true;
  }
  function qd() {
    return false;
  }
  function rd(a) {
    function b(b2, d, e, f, g) {
      this._reactName = b2;
      this._targetInst = e;
      this.type = d;
      this.nativeEvent = f;
      this.target = g;
      this.currentTarget = null;
      for (var c in a) a.hasOwnProperty(c) && (b2 = a[c], this[c] = b2 ? b2(f) : f[c]);
      this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : false === f.returnValue) ? pd : qd;
      this.isPropagationStopped = qd;
      return this;
    }
    A(b.prototype, { preventDefault: function() {
      this.defaultPrevented = true;
      var a2 = this.nativeEvent;
      a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
    }, stopPropagation: function() {
      var a2 = this.nativeEvent;
      a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
    }, persist: function() {
    }, isPersistent: pd });
    return b;
  }
  var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
    return a.timeStamp || Date.now();
  }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
    return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
  }, movementX: function(a) {
    if ("movementX" in a) return a.movementX;
    a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
    return wd;
  }, movementY: function(a) {
    return "movementY" in a ? a.movementY : xd;
  } }), Bd = rd(Ad), Cd = A({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A({}, sd, { clipboardData: function(a) {
    return "clipboardData" in a ? a.clipboardData : window.clipboardData;
  } }), Jd = rd(Id), Kd = A({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  }, Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
  function Pd(a) {
    var b = this.nativeEvent;
    return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : false;
  }
  function zd() {
    return Pd;
  }
  var Qd = A({}, ud, { key: function(a) {
    if (a.key) {
      var b = Md[a.key] || a.key;
      if ("Unidentified" !== b) return b;
    }
    return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
  }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
    return "keypress" === a.type ? od(a) : 0;
  }, keyCode: function(a) {
    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  }, which: function(a) {
    return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  } }), Rd = rd(Qd), Sd = A({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A({}, Ad, {
    deltaX: function(a) {
      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    },
    deltaY: function(a) {
      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
  ia && "documentMode" in document && (be = document.documentMode);
  var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
  function ge(a, b) {
    switch (a) {
      case "keyup":
        return -1 !== $d.indexOf(b.keyCode);
      case "keydown":
        return 229 !== b.keyCode;
      case "keypress":
      case "mousedown":
      case "focusout":
        return true;
      default:
        return false;
    }
  }
  function he(a) {
    a = a.detail;
    return "object" === typeof a && "data" in a ? a.data : null;
  }
  var ie = false;
  function je(a, b) {
    switch (a) {
      case "compositionend":
        return he(b);
      case "keypress":
        if (32 !== b.which) return null;
        fe = true;
        return ee;
      case "textInput":
        return a = b.data, a === ee && fe ? null : a;
      default:
        return null;
    }
  }
  function ke(a, b) {
    if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
    switch (a) {
      case "paste":
        return null;
      case "keypress":
        if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
          if (b.char && 1 < b.char.length) return b.char;
          if (b.which) return String.fromCharCode(b.which);
        }
        return null;
      case "compositionend":
        return de && "ko" !== b.locale ? null : b.data;
      default:
        return null;
    }
  }
  var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
  function me(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return "input" === b ? !!le[a.type] : "textarea" === b ? true : false;
  }
  function ne(a, b, c, d) {
    Eb(d);
    b = oe(b, "onChange");
    0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({ event: c, listeners: b }));
  }
  var pe = null, qe = null;
  function re(a) {
    se(a, 0);
  }
  function te(a) {
    var b = ue(a);
    if (Wa(b)) return a;
  }
  function ve(a, b) {
    if ("change" === a) return b;
  }
  var we = false;
  if (ia) {
    var xe;
    if (ia) {
      var ye = "oninput" in document;
      if (!ye) {
        var ze = document.createElement("div");
        ze.setAttribute("oninput", "return;");
        ye = "function" === typeof ze.oninput;
      }
      xe = ye;
    } else xe = false;
    we = xe && (!document.documentMode || 9 < document.documentMode);
  }
  function Ae() {
    pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
  }
  function Be(a) {
    if ("value" === a.propertyName && te(qe)) {
      var b = [];
      ne(b, qe, a, xb(a));
      Jb(re, b);
    }
  }
  function Ce(a, b, c) {
    "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
  }
  function De(a) {
    if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
  }
  function Ee(a, b) {
    if ("click" === a) return te(b);
  }
  function Fe(a, b) {
    if ("input" === a || "change" === a) return te(b);
  }
  function Ge(a, b) {
    return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
  }
  var He = "function" === typeof Object.is ? Object.is : Ge;
  function Ie(a, b) {
    if (He(a, b)) return true;
    if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return false;
    var c = Object.keys(a), d = Object.keys(b);
    if (c.length !== d.length) return false;
    for (d = 0; d < c.length; d++) {
      var e = c[d];
      if (!ja.call(b, e) || !He(a[e], b[e])) return false;
    }
    return true;
  }
  function Je(a) {
    for (; a && a.firstChild; ) a = a.firstChild;
    return a;
  }
  function Ke(a, b) {
    var c = Je(a);
    a = 0;
    for (var d; c; ) {
      if (3 === c.nodeType) {
        d = a + c.textContent.length;
        if (a <= b && d >= b) return { node: c, offset: b - a };
        a = d;
      }
      a: {
        for (; c; ) {
          if (c.nextSibling) {
            c = c.nextSibling;
            break a;
          }
          c = c.parentNode;
        }
        c = void 0;
      }
      c = Je(c);
    }
  }
  function Le(a, b) {
    return a && b ? a === b ? true : a && 3 === a.nodeType ? false : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : false : false;
  }
  function Me() {
    for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
      try {
        var c = "string" === typeof b.contentWindow.location.href;
      } catch (d) {
        c = false;
      }
      if (c) a = b.contentWindow;
      else break;
      b = Xa(a.document);
    }
    return b;
  }
  function Ne(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
  }
  function Oe(a) {
    var b = Me(), c = a.focusedElem, d = a.selectionRange;
    if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
      if (null !== d && Ne(c)) {
        if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
        else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
          a = a.getSelection();
          var e = c.textContent.length, f = Math.min(d.start, e);
          d = void 0 === d.end ? f : Math.min(d.end, e);
          !a.extend && f > d && (e = d, d = f, f = e);
          e = Ke(c, f);
          var g = Ke(
            c,
            d
          );
          e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
        }
      }
      b = [];
      for (a = c; a = a.parentNode; ) 1 === a.nodeType && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
      "function" === typeof c.focus && c.focus();
      for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
    }
  }
  var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
  function Ue(a, b, c) {
    var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
    Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({ event: b, listeners: d }), b.target = Qe)));
  }
  function Ve(a, b) {
    var c = {};
    c[a.toLowerCase()] = b.toLowerCase();
    c["Webkit" + a] = "webkit" + b;
    c["Moz" + a] = "moz" + b;
    return c;
  }
  var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
  ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
  function Ze(a) {
    if (Xe[a]) return Xe[a];
    if (!We[a]) return a;
    var b = We[a], c;
    for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
    return a;
  }
  var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
  function ff(a, b) {
    df.set(a, b);
    fa(b, [a]);
  }
  for (var gf = 0; gf < ef.length; gf++) {
    var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
    ff(jf, "on" + kf);
  }
  ff($e, "onAnimationEnd");
  ff(af, "onAnimationIteration");
  ff(bf, "onAnimationStart");
  ff("dblclick", "onDoubleClick");
  ff("focusin", "onFocus");
  ff("focusout", "onBlur");
  ff(cf, "onTransitionEnd");
  ha("onMouseEnter", ["mouseout", "mouseover"]);
  ha("onMouseLeave", ["mouseout", "mouseover"]);
  ha("onPointerEnter", ["pointerout", "pointerover"]);
  ha("onPointerLeave", ["pointerout", "pointerover"]);
  fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
  fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
  fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
  fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
  fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
  fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
  var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
  function nf(a, b, c) {
    var d = a.type || "unknown-event";
    a.currentTarget = c;
    Ub(d, b, void 0, a);
    a.currentTarget = null;
  }
  function se(a, b) {
    b = 0 !== (b & 4);
    for (var c = 0; c < a.length; c++) {
      var d = a[c], e = d.event;
      d = d.listeners;
      a: {
        var f = void 0;
        if (b) for (var g = d.length - 1; 0 <= g; g--) {
          var h = d[g], k = h.instance, l = h.currentTarget;
          h = h.listener;
          if (k !== f && e.isPropagationStopped()) break a;
          nf(e, h, l);
          f = k;
        }
        else for (g = 0; g < d.length; g++) {
          h = d[g];
          k = h.instance;
          l = h.currentTarget;
          h = h.listener;
          if (k !== f && e.isPropagationStopped()) break a;
          nf(e, h, l);
          f = k;
        }
      }
    }
    if (Qb) throw a = Rb, Qb = false, Rb = null, a;
  }
  function D(a, b) {
    var c = b[of];
    void 0 === c && (c = b[of] = /* @__PURE__ */ new Set());
    var d = a + "__bubble";
    c.has(d) || (pf(b, a, 2, false), c.add(d));
  }
  function qf(a, b, c) {
    var d = 0;
    b && (d |= 4);
    pf(c, a, d, b);
  }
  var rf = "_reactListening" + Math.random().toString(36).slice(2);
  function sf(a) {
    if (!a[rf]) {
      a[rf] = true;
      da.forEach(function(b2) {
        "selectionchange" !== b2 && (mf.has(b2) || qf(b2, false, a), qf(b2, true, a));
      });
      var b = 9 === a.nodeType ? a : a.ownerDocument;
      null === b || b[rf] || (b[rf] = true, qf("selectionchange", false, b));
    }
  }
  function pf(a, b, c, d) {
    switch (jd(b)) {
      case 1:
        var e = ed;
        break;
      case 4:
        e = gd;
        break;
      default:
        e = fd;
    }
    c = e.bind(null, b, c, a);
    e = void 0;
    !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = true);
    d ? void 0 !== e ? a.addEventListener(b, c, { capture: true, passive: e }) : a.addEventListener(b, c, true) : void 0 !== e ? a.addEventListener(b, c, { passive: e }) : a.addEventListener(b, c, false);
  }
  function hd(a, b, c, d, e) {
    var f = d;
    if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (; ; ) {
      if (null === d) return;
      var g = d.tag;
      if (3 === g || 4 === g) {
        var h = d.stateNode.containerInfo;
        if (h === e || 8 === h.nodeType && h.parentNode === e) break;
        if (4 === g) for (g = d.return; null !== g; ) {
          var k = g.tag;
          if (3 === k || 4 === k) {
            if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
          }
          g = g.return;
        }
        for (; null !== h; ) {
          g = Wc(h);
          if (null === g) return;
          k = g.tag;
          if (5 === k || 6 === k) {
            d = f = g;
            continue a;
          }
          h = h.parentNode;
        }
      }
      d = d.return;
    }
    Jb(function() {
      var d2 = f, e2 = xb(c), g2 = [];
      a: {
        var h2 = df.get(a);
        if (void 0 !== h2) {
          var k2 = td, n = a;
          switch (a) {
            case "keypress":
              if (0 === od(c)) break a;
            case "keydown":
            case "keyup":
              k2 = Rd;
              break;
            case "focusin":
              n = "focus";
              k2 = Fd;
              break;
            case "focusout":
              n = "blur";
              k2 = Fd;
              break;
            case "beforeblur":
            case "afterblur":
              k2 = Fd;
              break;
            case "click":
              if (2 === c.button) break a;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              k2 = Bd;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              k2 = Dd;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              k2 = Vd;
              break;
            case $e:
            case af:
            case bf:
              k2 = Hd;
              break;
            case cf:
              k2 = Xd;
              break;
            case "scroll":
              k2 = vd;
              break;
            case "wheel":
              k2 = Zd;
              break;
            case "copy":
            case "cut":
            case "paste":
              k2 = Jd;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              k2 = Td;
          }
          var t = 0 !== (b & 4), J = !t && "scroll" === a, x = t ? null !== h2 ? h2 + "Capture" : null : h2;
          t = [];
          for (var w = d2, u; null !== w; ) {
            u = w;
            var F = u.stateNode;
            5 === u.tag && null !== F && (u = F, null !== x && (F = Kb(w, x), null != F && t.push(tf(w, F, u))));
            if (J) break;
            w = w.return;
          }
          0 < t.length && (h2 = new k2(h2, n, null, c, e2), g2.push({ event: h2, listeners: t }));
        }
      }
      if (0 === (b & 7)) {
        a: {
          h2 = "mouseover" === a || "pointerover" === a;
          k2 = "mouseout" === a || "pointerout" === a;
          if (h2 && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf])) break a;
          if (k2 || h2) {
            h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window;
            if (k2) {
              if (n = c.relatedTarget || c.toElement, k2 = d2, n = n ? Wc(n) : null, null !== n && (J = Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;
            } else k2 = null, n = d2;
            if (k2 !== n) {
              t = Bd;
              F = "onMouseLeave";
              x = "onMouseEnter";
              w = "mouse";
              if ("pointerout" === a || "pointerover" === a) t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
              J = null == k2 ? h2 : ue(k2);
              u = null == n ? h2 : ue(n);
              h2 = new t(F, w + "leave", k2, c, e2);
              h2.target = J;
              h2.relatedTarget = u;
              F = null;
              Wc(e2) === d2 && (t = new t(x, w + "enter", n, c, e2), t.target = u, t.relatedTarget = J, F = t);
              J = F;
              if (k2 && n) b: {
                t = k2;
                x = n;
                w = 0;
                for (u = t; u; u = vf(u)) w++;
                u = 0;
                for (F = x; F; F = vf(F)) u++;
                for (; 0 < w - u; ) t = vf(t), w--;
                for (; 0 < u - w; ) x = vf(x), u--;
                for (; w--; ) {
                  if (t === x || null !== x && t === x.alternate) break b;
                  t = vf(t);
                  x = vf(x);
                }
                t = null;
              }
              else t = null;
              null !== k2 && wf(g2, h2, k2, t, false);
              null !== n && null !== J && wf(g2, J, n, t, true);
            }
          }
        }
        a: {
          h2 = d2 ? ue(d2) : window;
          k2 = h2.nodeName && h2.nodeName.toLowerCase();
          if ("select" === k2 || "input" === k2 && "file" === h2.type) var na = ve;
          else if (me(h2)) if (we) na = Fe;
          else {
            na = De;
            var xa = Ce;
          }
          else (k2 = h2.nodeName) && "input" === k2.toLowerCase() && ("checkbox" === h2.type || "radio" === h2.type) && (na = Ee);
          if (na && (na = na(a, d2))) {
            ne(g2, na, c, e2);
            break a;
          }
          xa && xa(a, h2, d2);
          "focusout" === a && (xa = h2._wrapperState) && xa.controlled && "number" === h2.type && cb(h2, "number", h2.value);
        }
        xa = d2 ? ue(d2) : window;
        switch (a) {
          case "focusin":
            if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d2, Se = null;
            break;
          case "focusout":
            Se = Re = Qe = null;
            break;
          case "mousedown":
            Te = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            Te = false;
            Ue(g2, c, e2);
            break;
          case "selectionchange":
            if (Pe) break;
          case "keydown":
          case "keyup":
            Ue(g2, c, e2);
        }
        var $a;
        if (ae) b: {
          switch (a) {
            case "compositionstart":
              var ba = "onCompositionStart";
              break b;
            case "compositionend":
              ba = "onCompositionEnd";
              break b;
            case "compositionupdate":
              ba = "onCompositionUpdate";
              break b;
          }
          ba = void 0;
        }
        else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
        ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d2, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e2), g2.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));
        if ($a = ce ? je(a, c) : ke(a, c)) d2 = oe(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({ event: e2, listeners: d2 }), e2.data = $a);
      }
      se(g2, b);
    });
  }
  function tf(a, b, c) {
    return { instance: a, listener: b, currentTarget: c };
  }
  function oe(a, b) {
    for (var c = b + "Capture", d = []; null !== a; ) {
      var e = a, f = e.stateNode;
      5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));
      a = a.return;
    }
    return d;
  }
  function vf(a) {
    if (null === a) return null;
    do
      a = a.return;
    while (a && 5 !== a.tag);
    return a ? a : null;
  }
  function wf(a, b, c, d, e) {
    for (var f = b._reactName, g = []; null !== c && c !== d; ) {
      var h = c, k = h.alternate, l = h.stateNode;
      if (null !== k && k === d) break;
      5 === h.tag && null !== l && (h = l, e ? (k = Kb(c, f), null != k && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), null != k && g.push(tf(c, k, h))));
      c = c.return;
    }
    0 !== g.length && a.push({ event: b, listeners: g });
  }
  var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
  function zf(a) {
    return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
  }
  function Af(a, b, c) {
    b = zf(b);
    if (zf(a) !== b && c) throw Error(p(425));
  }
  function Bf() {
  }
  var Cf = null, Df = null;
  function Ef(a, b) {
    return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
  }
  var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
    return Hf.resolve(null).then(a).catch(If);
  } : Ff;
  function If(a) {
    setTimeout(function() {
      throw a;
    });
  }
  function Kf(a, b) {
    var c = b, d = 0;
    do {
      var e = c.nextSibling;
      a.removeChild(c);
      if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
        if (0 === d) {
          a.removeChild(e);
          bd(b);
          return;
        }
        d--;
      } else "$" !== c && "$?" !== c && "$!" !== c || d++;
      c = e;
    } while (c);
    bd(b);
  }
  function Lf(a) {
    for (; null != a; a = a.nextSibling) {
      var b = a.nodeType;
      if (1 === b || 3 === b) break;
      if (8 === b) {
        b = a.data;
        if ("$" === b || "$!" === b || "$?" === b) break;
        if ("/$" === b) return null;
      }
    }
    return a;
  }
  function Mf(a) {
    a = a.previousSibling;
    for (var b = 0; a; ) {
      if (8 === a.nodeType) {
        var c = a.data;
        if ("$" === c || "$!" === c || "$?" === c) {
          if (0 === b) return a;
          b--;
        } else "/$" === c && b++;
      }
      a = a.previousSibling;
    }
    return null;
  }
  var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
  function Wc(a) {
    var b = a[Of];
    if (b) return b;
    for (var c = a.parentNode; c; ) {
      if (b = c[uf] || c[Of]) {
        c = b.alternate;
        if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a; ) {
          if (c = a[Of]) return c;
          a = Mf(a);
        }
        return b;
      }
      a = c;
      c = a.parentNode;
    }
    return null;
  }
  function Cb(a) {
    a = a[Of] || a[uf];
    return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
  }
  function ue(a) {
    if (5 === a.tag || 6 === a.tag) return a.stateNode;
    throw Error(p(33));
  }
  function Db(a) {
    return a[Pf] || null;
  }
  var Sf = [], Tf = -1;
  function Uf(a) {
    return { current: a };
  }
  function E(a) {
    0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
  }
  function G(a, b) {
    Tf++;
    Sf[Tf] = a.current;
    a.current = b;
  }
  var Vf = {}, H = Uf(Vf), Wf = Uf(false), Xf = Vf;
  function Yf(a, b) {
    var c = a.type.contextTypes;
    if (!c) return Vf;
    var d = a.stateNode;
    if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
    var e = {}, f;
    for (f in c) e[f] = b[f];
    d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
    return e;
  }
  function Zf(a) {
    a = a.childContextTypes;
    return null !== a && void 0 !== a;
  }
  function $f() {
    E(Wf);
    E(H);
  }
  function ag(a, b, c) {
    if (H.current !== Vf) throw Error(p(168));
    G(H, b);
    G(Wf, c);
  }
  function bg(a, b, c) {
    var d = a.stateNode;
    b = b.childContextTypes;
    if ("function" !== typeof d.getChildContext) return c;
    d = d.getChildContext();
    for (var e in d) if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));
    return A({}, c, d);
  }
  function cg(a) {
    a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
    Xf = H.current;
    G(H, a);
    G(Wf, Wf.current);
    return true;
  }
  function dg(a, b, c) {
    var d = a.stateNode;
    if (!d) throw Error(p(169));
    c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
    G(Wf, c);
  }
  var eg = null, fg = false, gg = false;
  function hg(a) {
    null === eg ? eg = [a] : eg.push(a);
  }
  function ig(a) {
    fg = true;
    hg(a);
  }
  function jg() {
    if (!gg && null !== eg) {
      gg = true;
      var a = 0, b = C;
      try {
        var c = eg;
        for (C = 1; a < c.length; a++) {
          var d = c[a];
          do
            d = d(true);
          while (null !== d);
        }
        eg = null;
        fg = false;
      } catch (e) {
        throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
      } finally {
        C = b, gg = false;
      }
    }
    return null;
  }
  var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
  function tg(a, b) {
    kg[lg++] = ng;
    kg[lg++] = mg;
    mg = a;
    ng = b;
  }
  function ug(a, b, c) {
    og[pg++] = rg;
    og[pg++] = sg;
    og[pg++] = qg;
    qg = a;
    var d = rg;
    a = sg;
    var e = 32 - oc(d) - 1;
    d &= ~(1 << e);
    c += 1;
    var f = 32 - oc(b) + e;
    if (30 < f) {
      var g = e - e % 5;
      f = (d & (1 << g) - 1).toString(32);
      d >>= g;
      e -= g;
      rg = 1 << 32 - oc(b) + e | c << e | d;
      sg = f + a;
    } else rg = 1 << f | c << e | d, sg = a;
  }
  function vg(a) {
    null !== a.return && (tg(a, 1), ug(a, 1, 0));
  }
  function wg(a) {
    for (; a === mg; ) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
    for (; a === qg; ) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
  }
  var xg = null, yg = null, I = false, zg = null;
  function Ag(a, b) {
    var c = Bg(5, null, null, 0);
    c.elementType = "DELETED";
    c.stateNode = b;
    c.return = a;
    b = a.deletions;
    null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
  }
  function Cg(a, b) {
    switch (a.tag) {
      case 5:
        var c = a.type;
        b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
        return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), true) : false;
      case 6:
        return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, true) : false;
      case 13:
        return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b, treeContext: c, retryLane: 1073741824 }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, true) : false;
      default:
        return false;
    }
  }
  function Dg(a) {
    return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
  }
  function Eg(a) {
    if (I) {
      var b = yg;
      if (b) {
        var c = b;
        if (!Cg(a, b)) {
          if (Dg(a)) throw Error(p(418));
          b = Lf(c.nextSibling);
          var d = xg;
          b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = false, xg = a);
        }
      } else {
        if (Dg(a)) throw Error(p(418));
        a.flags = a.flags & -4097 | 2;
        I = false;
        xg = a;
      }
    }
  }
  function Fg(a) {
    for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; ) a = a.return;
    xg = a;
  }
  function Gg(a) {
    if (a !== xg) return false;
    if (!I) return Fg(a), I = true, false;
    var b;
    (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
    if (b && (b = yg)) {
      if (Dg(a)) throw Hg(), Error(p(418));
      for (; b; ) Ag(a, b), b = Lf(b.nextSibling);
    }
    Fg(a);
    if (13 === a.tag) {
      a = a.memoizedState;
      a = null !== a ? a.dehydrated : null;
      if (!a) throw Error(p(317));
      a: {
        a = a.nextSibling;
        for (b = 0; a; ) {
          if (8 === a.nodeType) {
            var c = a.data;
            if ("/$" === c) {
              if (0 === b) {
                yg = Lf(a.nextSibling);
                break a;
              }
              b--;
            } else "$" !== c && "$!" !== c && "$?" !== c || b++;
          }
          a = a.nextSibling;
        }
        yg = null;
      }
    } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
    return true;
  }
  function Hg() {
    for (var a = yg; a; ) a = Lf(a.nextSibling);
  }
  function Ig() {
    yg = xg = null;
    I = false;
  }
  function Jg(a) {
    null === zg ? zg = [a] : zg.push(a);
  }
  var Kg = ua.ReactCurrentBatchConfig;
  function Lg(a, b, c) {
    a = c.ref;
    if (null !== a && "function" !== typeof a && "object" !== typeof a) {
      if (c._owner) {
        c = c._owner;
        if (c) {
          if (1 !== c.tag) throw Error(p(309));
          var d = c.stateNode;
        }
        if (!d) throw Error(p(147, a));
        var e = d, f = "" + a;
        if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
        b = function(a2) {
          var b2 = e.refs;
          null === a2 ? delete b2[f] : b2[f] = a2;
        };
        b._stringRef = f;
        return b;
      }
      if ("string" !== typeof a) throw Error(p(284));
      if (!c._owner) throw Error(p(290, a));
    }
    return a;
  }
  function Mg(a, b) {
    a = Object.prototype.toString.call(b);
    throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
  }
  function Ng(a) {
    var b = a._init;
    return b(a._payload);
  }
  function Og(a) {
    function b(b2, c2) {
      if (a) {
        var d2 = b2.deletions;
        null === d2 ? (b2.deletions = [c2], b2.flags |= 16) : d2.push(c2);
      }
    }
    function c(c2, d2) {
      if (!a) return null;
      for (; null !== d2; ) b(c2, d2), d2 = d2.sibling;
      return null;
    }
    function d(a2, b2) {
      for (a2 = /* @__PURE__ */ new Map(); null !== b2; ) null !== b2.key ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
      return a2;
    }
    function e(a2, b2) {
      a2 = Pg(a2, b2);
      a2.index = 0;
      a2.sibling = null;
      return a2;
    }
    function f(b2, c2, d2) {
      b2.index = d2;
      if (!a) return b2.flags |= 1048576, c2;
      d2 = b2.alternate;
      if (null !== d2) return d2 = d2.index, d2 < c2 ? (b2.flags |= 2, c2) : d2;
      b2.flags |= 2;
      return c2;
    }
    function g(b2) {
      a && null === b2.alternate && (b2.flags |= 2);
      return b2;
    }
    function h(a2, b2, c2, d2) {
      if (null === b2 || 6 !== b2.tag) return b2 = Qg(c2, a2.mode, d2), b2.return = a2, b2;
      b2 = e(b2, c2);
      b2.return = a2;
      return b2;
    }
    function k(a2, b2, c2, d2) {
      var f2 = c2.type;
      if (f2 === ya) return m(a2, b2, c2.props.children, d2, c2.key);
      if (null !== b2 && (b2.elementType === f2 || "object" === typeof f2 && null !== f2 && f2.$$typeof === Ha && Ng(f2) === b2.type)) return d2 = e(b2, c2.props), d2.ref = Lg(a2, b2, c2), d2.return = a2, d2;
      d2 = Rg(c2.type, c2.key, c2.props, null, a2.mode, d2);
      d2.ref = Lg(a2, b2, c2);
      d2.return = a2;
      return d2;
    }
    function l(a2, b2, c2, d2) {
      if (null === b2 || 4 !== b2.tag || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation) return b2 = Sg(c2, a2.mode, d2), b2.return = a2, b2;
      b2 = e(b2, c2.children || []);
      b2.return = a2;
      return b2;
    }
    function m(a2, b2, c2, d2, f2) {
      if (null === b2 || 7 !== b2.tag) return b2 = Tg(c2, a2.mode, d2, f2), b2.return = a2, b2;
      b2 = e(b2, c2);
      b2.return = a2;
      return b2;
    }
    function q(a2, b2, c2) {
      if ("string" === typeof b2 && "" !== b2 || "number" === typeof b2) return b2 = Qg("" + b2, a2.mode, c2), b2.return = a2, b2;
      if ("object" === typeof b2 && null !== b2) {
        switch (b2.$$typeof) {
          case va:
            return c2 = Rg(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = Lg(a2, null, b2), c2.return = a2, c2;
          case wa:
            return b2 = Sg(b2, a2.mode, c2), b2.return = a2, b2;
          case Ha:
            var d2 = b2._init;
            return q(a2, d2(b2._payload), c2);
        }
        if (eb(b2) || Ka(b2)) return b2 = Tg(b2, a2.mode, c2, null), b2.return = a2, b2;
        Mg(a2, b2);
      }
      return null;
    }
    function r(a2, b2, c2, d2) {
      var e2 = null !== b2 ? b2.key : null;
      if ("string" === typeof c2 && "" !== c2 || "number" === typeof c2) return null !== e2 ? null : h(a2, b2, "" + c2, d2);
      if ("object" === typeof c2 && null !== c2) {
        switch (c2.$$typeof) {
          case va:
            return c2.key === e2 ? k(a2, b2, c2, d2) : null;
          case wa:
            return c2.key === e2 ? l(a2, b2, c2, d2) : null;
          case Ha:
            return e2 = c2._init, r(
              a2,
              b2,
              e2(c2._payload),
              d2
            );
        }
        if (eb(c2) || Ka(c2)) return null !== e2 ? null : m(a2, b2, c2, d2, null);
        Mg(a2, c2);
      }
      return null;
    }
    function y(a2, b2, c2, d2, e2) {
      if ("string" === typeof d2 && "" !== d2 || "number" === typeof d2) return a2 = a2.get(c2) || null, h(b2, a2, "" + d2, e2);
      if ("object" === typeof d2 && null !== d2) {
        switch (d2.$$typeof) {
          case va:
            return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, k(b2, a2, d2, e2);
          case wa:
            return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, l(b2, a2, d2, e2);
          case Ha:
            var f2 = d2._init;
            return y(a2, b2, c2, f2(d2._payload), e2);
        }
        if (eb(d2) || Ka(d2)) return a2 = a2.get(c2) || null, m(b2, a2, d2, e2, null);
        Mg(b2, d2);
      }
      return null;
    }
    function n(e2, g2, h2, k2) {
      for (var l2 = null, m2 = null, u = g2, w = g2 = 0, x = null; null !== u && w < h2.length; w++) {
        u.index > w ? (x = u, u = null) : x = u.sibling;
        var n2 = r(e2, u, h2[w], k2);
        if (null === n2) {
          null === u && (u = x);
          break;
        }
        a && u && null === n2.alternate && b(e2, u);
        g2 = f(n2, g2, w);
        null === m2 ? l2 = n2 : m2.sibling = n2;
        m2 = n2;
        u = x;
      }
      if (w === h2.length) return c(e2, u), I && tg(e2, w), l2;
      if (null === u) {
        for (; w < h2.length; w++) u = q(e2, h2[w], k2), null !== u && (g2 = f(u, g2, w), null === m2 ? l2 = u : m2.sibling = u, m2 = u);
        I && tg(e2, w);
        return l2;
      }
      for (u = d(e2, u); w < h2.length; w++) x = y(u, e2, w, h2[w], k2), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g2 = f(x, g2, w), null === m2 ? l2 = x : m2.sibling = x, m2 = x);
      a && u.forEach(function(a2) {
        return b(e2, a2);
      });
      I && tg(e2, w);
      return l2;
    }
    function t(e2, g2, h2, k2) {
      var l2 = Ka(h2);
      if ("function" !== typeof l2) throw Error(p(150));
      h2 = l2.call(h2);
      if (null == h2) throw Error(p(151));
      for (var u = l2 = null, m2 = g2, w = g2 = 0, x = null, n2 = h2.next(); null !== m2 && !n2.done; w++, n2 = h2.next()) {
        m2.index > w ? (x = m2, m2 = null) : x = m2.sibling;
        var t2 = r(e2, m2, n2.value, k2);
        if (null === t2) {
          null === m2 && (m2 = x);
          break;
        }
        a && m2 && null === t2.alternate && b(e2, m2);
        g2 = f(t2, g2, w);
        null === u ? l2 = t2 : u.sibling = t2;
        u = t2;
        m2 = x;
      }
      if (n2.done) return c(
        e2,
        m2
      ), I && tg(e2, w), l2;
      if (null === m2) {
        for (; !n2.done; w++, n2 = h2.next()) n2 = q(e2, n2.value, k2), null !== n2 && (g2 = f(n2, g2, w), null === u ? l2 = n2 : u.sibling = n2, u = n2);
        I && tg(e2, w);
        return l2;
      }
      for (m2 = d(e2, m2); !n2.done; w++, n2 = h2.next()) n2 = y(m2, e2, w, n2.value, k2), null !== n2 && (a && null !== n2.alternate && m2.delete(null === n2.key ? w : n2.key), g2 = f(n2, g2, w), null === u ? l2 = n2 : u.sibling = n2, u = n2);
      a && m2.forEach(function(a2) {
        return b(e2, a2);
      });
      I && tg(e2, w);
      return l2;
    }
    function J(a2, d2, f2, h2) {
      "object" === typeof f2 && null !== f2 && f2.type === ya && null === f2.key && (f2 = f2.props.children);
      if ("object" === typeof f2 && null !== f2) {
        switch (f2.$$typeof) {
          case va:
            a: {
              for (var k2 = f2.key, l2 = d2; null !== l2; ) {
                if (l2.key === k2) {
                  k2 = f2.type;
                  if (k2 === ya) {
                    if (7 === l2.tag) {
                      c(a2, l2.sibling);
                      d2 = e(l2, f2.props.children);
                      d2.return = a2;
                      a2 = d2;
                      break a;
                    }
                  } else if (l2.elementType === k2 || "object" === typeof k2 && null !== k2 && k2.$$typeof === Ha && Ng(k2) === l2.type) {
                    c(a2, l2.sibling);
                    d2 = e(l2, f2.props);
                    d2.ref = Lg(a2, l2, f2);
                    d2.return = a2;
                    a2 = d2;
                    break a;
                  }
                  c(a2, l2);
                  break;
                } else b(a2, l2);
                l2 = l2.sibling;
              }
              f2.type === ya ? (d2 = Tg(f2.props.children, a2.mode, h2, f2.key), d2.return = a2, a2 = d2) : (h2 = Rg(f2.type, f2.key, f2.props, null, a2.mode, h2), h2.ref = Lg(a2, d2, f2), h2.return = a2, a2 = h2);
            }
            return g(a2);
          case wa:
            a: {
              for (l2 = f2.key; null !== d2; ) {
                if (d2.key === l2) if (4 === d2.tag && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                  c(a2, d2.sibling);
                  d2 = e(d2, f2.children || []);
                  d2.return = a2;
                  a2 = d2;
                  break a;
                } else {
                  c(a2, d2);
                  break;
                }
                else b(a2, d2);
                d2 = d2.sibling;
              }
              d2 = Sg(f2, a2.mode, h2);
              d2.return = a2;
              a2 = d2;
            }
            return g(a2);
          case Ha:
            return l2 = f2._init, J(a2, d2, l2(f2._payload), h2);
        }
        if (eb(f2)) return n(a2, d2, f2, h2);
        if (Ka(f2)) return t(a2, d2, f2, h2);
        Mg(a2, f2);
      }
      return "string" === typeof f2 && "" !== f2 || "number" === typeof f2 ? (f2 = "" + f2, null !== d2 && 6 === d2.tag ? (c(a2, d2.sibling), d2 = e(d2, f2), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = Qg(f2, a2.mode, h2), d2.return = a2, a2 = d2), g(a2)) : c(a2, d2);
    }
    return J;
  }
  var Ug = Og(true), Vg = Og(false), Wg = Uf(null), Xg = null, Yg = null, Zg = null;
  function $g() {
    Zg = Yg = Xg = null;
  }
  function ah(a) {
    var b = Wg.current;
    E(Wg);
    a._currentValue = b;
  }
  function bh(a, b, c) {
    for (; null !== a; ) {
      var d = a.alternate;
      (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
      if (a === c) break;
      a = a.return;
    }
  }
  function ch(a, b) {
    Xg = a;
    Zg = Yg = null;
    a = a.dependencies;
    null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (dh = true), a.firstContext = null);
  }
  function eh(a) {
    var b = a._currentValue;
    if (Zg !== a) if (a = { context: a, memoizedValue: b, next: null }, null === Yg) {
      if (null === Xg) throw Error(p(308));
      Yg = a;
      Xg.dependencies = { lanes: 0, firstContext: a };
    } else Yg = Yg.next = a;
    return b;
  }
  var fh = null;
  function gh(a) {
    null === fh ? fh = [a] : fh.push(a);
  }
  function hh(a, b, c, d) {
    var e = b.interleaved;
    null === e ? (c.next = c, gh(b)) : (c.next = e.next, e.next = c);
    b.interleaved = c;
    return ih(a, d);
  }
  function ih(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    null !== c && (c.lanes |= b);
    c = a;
    for (a = a.return; null !== a; ) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
    return 3 === c.tag ? c.stateNode : null;
  }
  var jh = false;
  function kh(a) {
    a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
  }
  function lh(a, b) {
    a = a.updateQueue;
    b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
  }
  function mh(a, b) {
    return { eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null };
  }
  function nh(a, b, c) {
    var d = a.updateQueue;
    if (null === d) return null;
    d = d.shared;
    if (0 !== (K & 2)) {
      var e = d.pending;
      null === e ? b.next = b : (b.next = e.next, e.next = b);
      d.pending = b;
      return ih(a, c);
    }
    e = d.interleaved;
    null === e ? (b.next = b, gh(d)) : (b.next = e.next, e.next = b);
    d.interleaved = b;
    return ih(a, c);
  }
  function oh(a, b, c) {
    b = b.updateQueue;
    if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
      var d = b.lanes;
      d &= a.pendingLanes;
      c |= d;
      b.lanes = c;
      Cc(a, c);
    }
  }
  function ph(a, b) {
    var c = a.updateQueue, d = a.alternate;
    if (null !== d && (d = d.updateQueue, c === d)) {
      var e = null, f = null;
      c = c.firstBaseUpdate;
      if (null !== c) {
        do {
          var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
          null === f ? e = f = g : f = f.next = g;
          c = c.next;
        } while (null !== c);
        null === f ? e = f = b : f = f.next = b;
      } else e = f = b;
      c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects };
      a.updateQueue = c;
      return;
    }
    a = c.lastBaseUpdate;
    null === a ? c.firstBaseUpdate = b : a.next = b;
    c.lastBaseUpdate = b;
  }
  function qh(a, b, c, d) {
    var e = a.updateQueue;
    jh = false;
    var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
    if (null !== h) {
      e.shared.pending = null;
      var k = h, l = k.next;
      k.next = null;
      null === g ? f = l : g.next = l;
      g = k;
      var m = a.alternate;
      null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
    }
    if (null !== f) {
      var q = e.baseState;
      g = 0;
      m = l = k = null;
      h = f;
      do {
        var r = h.lane, y = h.eventTime;
        if ((d & r) === r) {
          null !== m && (m = m.next = {
            eventTime: y,
            lane: 0,
            tag: h.tag,
            payload: h.payload,
            callback: h.callback,
            next: null
          });
          a: {
            var n = a, t = h;
            r = b;
            y = c;
            switch (t.tag) {
              case 1:
                n = t.payload;
                if ("function" === typeof n) {
                  q = n.call(y, q, r);
                  break a;
                }
                q = n;
                break a;
              case 3:
                n.flags = n.flags & -65537 | 128;
              case 0:
                n = t.payload;
                r = "function" === typeof n ? n.call(y, q, r) : n;
                if (null === r || void 0 === r) break a;
                q = A({}, q, r);
                break a;
              case 2:
                jh = true;
            }
          }
          null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [h] : r.push(h));
        } else y = { eventTime: y, lane: r, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
        h = h.next;
        if (null === h) if (h = e.shared.pending, null === h) break;
        else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
      } while (1);
      null === m && (k = q);
      e.baseState = k;
      e.firstBaseUpdate = l;
      e.lastBaseUpdate = m;
      b = e.shared.interleaved;
      if (null !== b) {
        e = b;
        do
          g |= e.lane, e = e.next;
        while (e !== b);
      } else null === f && (e.shared.lanes = 0);
      rh |= g;
      a.lanes = g;
      a.memoizedState = q;
    }
  }
  function sh(a, b, c) {
    a = b.effects;
    b.effects = null;
    if (null !== a) for (b = 0; b < a.length; b++) {
      var d = a[b], e = d.callback;
      if (null !== e) {
        d.callback = null;
        d = c;
        if ("function" !== typeof e) throw Error(p(191, e));
        e.call(d);
      }
    }
  }
  var th = {}, uh = Uf(th), vh = Uf(th), wh = Uf(th);
  function xh(a) {
    if (a === th) throw Error(p(174));
    return a;
  }
  function yh(a, b) {
    G(wh, b);
    G(vh, a);
    G(uh, th);
    a = b.nodeType;
    switch (a) {
      case 9:
      case 11:
        b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
        break;
      default:
        a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
    }
    E(uh);
    G(uh, b);
  }
  function zh() {
    E(uh);
    E(vh);
    E(wh);
  }
  function Ah(a) {
    xh(wh.current);
    var b = xh(uh.current);
    var c = lb(b, a.type);
    b !== c && (G(vh, a), G(uh, c));
  }
  function Bh(a) {
    vh.current === a && (E(uh), E(vh));
  }
  var L = Uf(0);
  function Ch(a) {
    for (var b = a; null !== b; ) {
      if (13 === b.tag) {
        var c = b.memoizedState;
        if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
      } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
        if (0 !== (b.flags & 128)) return b;
      } else if (null !== b.child) {
        b.child.return = b;
        b = b.child;
        continue;
      }
      if (b === a) break;
      for (; null === b.sibling; ) {
        if (null === b.return || b.return === a) return null;
        b = b.return;
      }
      b.sibling.return = b.return;
      b = b.sibling;
    }
    return null;
  }
  var Dh = [];
  function Eh() {
    for (var a = 0; a < Dh.length; a++) Dh[a]._workInProgressVersionPrimary = null;
    Dh.length = 0;
  }
  var Fh = ua.ReactCurrentDispatcher, Gh = ua.ReactCurrentBatchConfig, Hh = 0, M = null, N = null, O = null, Ih = false, Jh = false, Kh = 0, Lh = 0;
  function P() {
    throw Error(p(321));
  }
  function Mh(a, b) {
    if (null === b) return false;
    for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return false;
    return true;
  }
  function Nh(a, b, c, d, e, f) {
    Hh = f;
    M = b;
    b.memoizedState = null;
    b.updateQueue = null;
    b.lanes = 0;
    Fh.current = null === a || null === a.memoizedState ? Oh : Ph;
    a = c(d, e);
    if (Jh) {
      f = 0;
      do {
        Jh = false;
        Kh = 0;
        if (25 <= f) throw Error(p(301));
        f += 1;
        O = N = null;
        b.updateQueue = null;
        Fh.current = Qh;
        a = c(d, e);
      } while (Jh);
    }
    Fh.current = Rh;
    b = null !== N && null !== N.next;
    Hh = 0;
    O = N = M = null;
    Ih = false;
    if (b) throw Error(p(300));
    return a;
  }
  function Sh() {
    var a = 0 !== Kh;
    Kh = 0;
    return a;
  }
  function Th() {
    var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
    null === O ? M.memoizedState = O = a : O = O.next = a;
    return O;
  }
  function Uh() {
    if (null === N) {
      var a = M.alternate;
      a = null !== a ? a.memoizedState : null;
    } else a = N.next;
    var b = null === O ? M.memoizedState : O.next;
    if (null !== b) O = b, N = a;
    else {
      if (null === a) throw Error(p(310));
      N = a;
      a = { memoizedState: N.memoizedState, baseState: N.baseState, baseQueue: N.baseQueue, queue: N.queue, next: null };
      null === O ? M.memoizedState = O = a : O = O.next = a;
    }
    return O;
  }
  function Vh(a, b) {
    return "function" === typeof b ? b(a) : b;
  }
  function Wh(a) {
    var b = Uh(), c = b.queue;
    if (null === c) throw Error(p(311));
    c.lastRenderedReducer = a;
    var d = N, e = d.baseQueue, f = c.pending;
    if (null !== f) {
      if (null !== e) {
        var g = e.next;
        e.next = f.next;
        f.next = g;
      }
      d.baseQueue = e = f;
      c.pending = null;
    }
    if (null !== e) {
      f = e.next;
      d = d.baseState;
      var h = g = null, k = null, l = f;
      do {
        var m = l.lane;
        if ((Hh & m) === m) null !== k && (k = k.next = { lane: 0, action: l.action, hasEagerState: l.hasEagerState, eagerState: l.eagerState, next: null }), d = l.hasEagerState ? l.eagerState : a(d, l.action);
        else {
          var q = {
            lane: m,
            action: l.action,
            hasEagerState: l.hasEagerState,
            eagerState: l.eagerState,
            next: null
          };
          null === k ? (h = k = q, g = d) : k = k.next = q;
          M.lanes |= m;
          rh |= m;
        }
        l = l.next;
      } while (null !== l && l !== f);
      null === k ? g = d : k.next = h;
      He(d, b.memoizedState) || (dh = true);
      b.memoizedState = d;
      b.baseState = g;
      b.baseQueue = k;
      c.lastRenderedState = d;
    }
    a = c.interleaved;
    if (null !== a) {
      e = a;
      do
        f = e.lane, M.lanes |= f, rh |= f, e = e.next;
      while (e !== a);
    } else null === e && (c.lanes = 0);
    return [b.memoizedState, c.dispatch];
  }
  function Xh(a) {
    var b = Uh(), c = b.queue;
    if (null === c) throw Error(p(311));
    c.lastRenderedReducer = a;
    var d = c.dispatch, e = c.pending, f = b.memoizedState;
    if (null !== e) {
      c.pending = null;
      var g = e = e.next;
      do
        f = a(f, g.action), g = g.next;
      while (g !== e);
      He(f, b.memoizedState) || (dh = true);
      b.memoizedState = f;
      null === b.baseQueue && (b.baseState = f);
      c.lastRenderedState = f;
    }
    return [f, d];
  }
  function Yh() {
  }
  function Zh(a, b) {
    var c = M, d = Uh(), e = b(), f = !He(d.memoizedState, e);
    f && (d.memoizedState = e, dh = true);
    d = d.queue;
    $h(ai.bind(null, c, d, a), [a]);
    if (d.getSnapshot !== b || f || null !== O && O.memoizedState.tag & 1) {
      c.flags |= 2048;
      bi(9, ci.bind(null, c, d, e, b), void 0, null);
      if (null === Q) throw Error(p(349));
      0 !== (Hh & 30) || di(c, b, e);
    }
    return e;
  }
  function di(a, b, c) {
    a.flags |= 16384;
    a = { getSnapshot: b, value: c };
    b = M.updateQueue;
    null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
  }
  function ci(a, b, c, d) {
    b.value = c;
    b.getSnapshot = d;
    ei(b) && fi(a);
  }
  function ai(a, b, c) {
    return c(function() {
      ei(b) && fi(a);
    });
  }
  function ei(a) {
    var b = a.getSnapshot;
    a = a.value;
    try {
      var c = b();
      return !He(a, c);
    } catch (d) {
      return true;
    }
  }
  function fi(a) {
    var b = ih(a, 1);
    null !== b && gi(b, a, 1, -1);
  }
  function hi(a) {
    var b = Th();
    "function" === typeof a && (a = a());
    b.memoizedState = b.baseState = a;
    a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Vh, lastRenderedState: a };
    b.queue = a;
    a = a.dispatch = ii.bind(null, M, a);
    return [b.memoizedState, a];
  }
  function bi(a, b, c, d) {
    a = { tag: a, create: b, destroy: c, deps: d, next: null };
    b = M.updateQueue;
    null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
    return a;
  }
  function ji() {
    return Uh().memoizedState;
  }
  function ki(a, b, c, d) {
    var e = Th();
    M.flags |= a;
    e.memoizedState = bi(1 | b, c, void 0, void 0 === d ? null : d);
  }
  function li(a, b, c, d) {
    var e = Uh();
    d = void 0 === d ? null : d;
    var f = void 0;
    if (null !== N) {
      var g = N.memoizedState;
      f = g.destroy;
      if (null !== d && Mh(d, g.deps)) {
        e.memoizedState = bi(b, c, f, d);
        return;
      }
    }
    M.flags |= a;
    e.memoizedState = bi(1 | b, c, f, d);
  }
  function mi(a, b) {
    return ki(8390656, 8, a, b);
  }
  function $h(a, b) {
    return li(2048, 8, a, b);
  }
  function ni(a, b) {
    return li(4, 2, a, b);
  }
  function oi(a, b) {
    return li(4, 4, a, b);
  }
  function pi(a, b) {
    if ("function" === typeof b) return a = a(), b(a), function() {
      b(null);
    };
    if (null !== b && void 0 !== b) return a = a(), b.current = a, function() {
      b.current = null;
    };
  }
  function qi(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([a]) : null;
    return li(4, 4, pi.bind(null, b, a), c);
  }
  function ri() {
  }
  function si(a, b) {
    var c = Uh();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Mh(b, d[1])) return d[0];
    c.memoizedState = [a, b];
    return a;
  }
  function ti(a, b) {
    var c = Uh();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Mh(b, d[1])) return d[0];
    a = a();
    c.memoizedState = [a, b];
    return a;
  }
  function ui(a, b, c) {
    if (0 === (Hh & 21)) return a.baseState && (a.baseState = false, dh = true), a.memoizedState = c;
    He(c, b) || (c = yc(), M.lanes |= c, rh |= c, a.baseState = true);
    return b;
  }
  function vi(a, b) {
    var c = C;
    C = 0 !== c && 4 > c ? c : 4;
    a(true);
    var d = Gh.transition;
    Gh.transition = {};
    try {
      a(false), b();
    } finally {
      C = c, Gh.transition = d;
    }
  }
  function wi() {
    return Uh().memoizedState;
  }
  function xi(a, b, c) {
    var d = yi(a);
    c = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
    if (zi(a)) Ai(b, c);
    else if (c = hh(a, b, c, d), null !== c) {
      var e = R();
      gi(c, a, d, e);
      Bi(c, b, d);
    }
  }
  function ii(a, b, c) {
    var d = yi(a), e = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
    if (zi(a)) Ai(b, e);
    else {
      var f = a.alternate;
      if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
        var g = b.lastRenderedState, h = f(g, c);
        e.hasEagerState = true;
        e.eagerState = h;
        if (He(h, g)) {
          var k = b.interleaved;
          null === k ? (e.next = e, gh(b)) : (e.next = k.next, k.next = e);
          b.interleaved = e;
          return;
        }
      } catch (l) {
      } finally {
      }
      c = hh(a, b, e, d);
      null !== c && (e = R(), gi(c, a, d, e), Bi(c, b, d));
    }
  }
  function zi(a) {
    var b = a.alternate;
    return a === M || null !== b && b === M;
  }
  function Ai(a, b) {
    Jh = Ih = true;
    var c = a.pending;
    null === c ? b.next = b : (b.next = c.next, c.next = b);
    a.pending = b;
  }
  function Bi(a, b, c) {
    if (0 !== (c & 4194240)) {
      var d = b.lanes;
      d &= a.pendingLanes;
      c |= d;
      b.lanes = c;
      Cc(a, c);
    }
  }
  var Rh = { readContext: eh, useCallback: P, useContext: P, useEffect: P, useImperativeHandle: P, useInsertionEffect: P, useLayoutEffect: P, useMemo: P, useReducer: P, useRef: P, useState: P, useDebugValue: P, useDeferredValue: P, useTransition: P, useMutableSource: P, useSyncExternalStore: P, useId: P, unstable_isNewReconciler: false }, Oh = { readContext: eh, useCallback: function(a, b) {
    Th().memoizedState = [a, void 0 === b ? null : b];
    return a;
  }, useContext: eh, useEffect: mi, useImperativeHandle: function(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([a]) : null;
    return ki(
      4194308,
      4,
      pi.bind(null, b, a),
      c
    );
  }, useLayoutEffect: function(a, b) {
    return ki(4194308, 4, a, b);
  }, useInsertionEffect: function(a, b) {
    return ki(4, 2, a, b);
  }, useMemo: function(a, b) {
    var c = Th();
    b = void 0 === b ? null : b;
    a = a();
    c.memoizedState = [a, b];
    return a;
  }, useReducer: function(a, b, c) {
    var d = Th();
    b = void 0 !== c ? c(b) : b;
    d.memoizedState = d.baseState = b;
    a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };
    d.queue = a;
    a = a.dispatch = xi.bind(null, M, a);
    return [d.memoizedState, a];
  }, useRef: function(a) {
    var b = Th();
    a = { current: a };
    return b.memoizedState = a;
  }, useState: hi, useDebugValue: ri, useDeferredValue: function(a) {
    return Th().memoizedState = a;
  }, useTransition: function() {
    var a = hi(false), b = a[0];
    a = vi.bind(null, a[1]);
    Th().memoizedState = a;
    return [b, a];
  }, useMutableSource: function() {
  }, useSyncExternalStore: function(a, b, c) {
    var d = M, e = Th();
    if (I) {
      if (void 0 === c) throw Error(p(407));
      c = c();
    } else {
      c = b();
      if (null === Q) throw Error(p(349));
      0 !== (Hh & 30) || di(d, b, c);
    }
    e.memoizedState = c;
    var f = { value: c, getSnapshot: b };
    e.queue = f;
    mi(ai.bind(
      null,
      d,
      f,
      a
    ), [a]);
    d.flags |= 2048;
    bi(9, ci.bind(null, d, f, c, b), void 0, null);
    return c;
  }, useId: function() {
    var a = Th(), b = Q.identifierPrefix;
    if (I) {
      var c = sg;
      var d = rg;
      c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
      b = ":" + b + "R" + c;
      c = Kh++;
      0 < c && (b += "H" + c.toString(32));
      b += ":";
    } else c = Lh++, b = ":" + b + "r" + c.toString(32) + ":";
    return a.memoizedState = b;
  }, unstable_isNewReconciler: false }, Ph = {
    readContext: eh,
    useCallback: si,
    useContext: eh,
    useEffect: $h,
    useImperativeHandle: qi,
    useInsertionEffect: ni,
    useLayoutEffect: oi,
    useMemo: ti,
    useReducer: Wh,
    useRef: ji,
    useState: function() {
      return Wh(Vh);
    },
    useDebugValue: ri,
    useDeferredValue: function(a) {
      var b = Uh();
      return ui(b, N.memoizedState, a);
    },
    useTransition: function() {
      var a = Wh(Vh)[0], b = Uh().memoizedState;
      return [a, b];
    },
    useMutableSource: Yh,
    useSyncExternalStore: Zh,
    useId: wi,
    unstable_isNewReconciler: false
  }, Qh = { readContext: eh, useCallback: si, useContext: eh, useEffect: $h, useImperativeHandle: qi, useInsertionEffect: ni, useLayoutEffect: oi, useMemo: ti, useReducer: Xh, useRef: ji, useState: function() {
    return Xh(Vh);
  }, useDebugValue: ri, useDeferredValue: function(a) {
    var b = Uh();
    return null === N ? b.memoizedState = a : ui(b, N.memoizedState, a);
  }, useTransition: function() {
    var a = Xh(Vh)[0], b = Uh().memoizedState;
    return [a, b];
  }, useMutableSource: Yh, useSyncExternalStore: Zh, useId: wi, unstable_isNewReconciler: false };
  function Ci(a, b) {
    if (a && a.defaultProps) {
      b = A({}, b);
      a = a.defaultProps;
      for (var c in a) void 0 === b[c] && (b[c] = a[c]);
      return b;
    }
    return b;
  }
  function Di(a, b, c, d) {
    b = a.memoizedState;
    c = c(d, b);
    c = null === c || void 0 === c ? b : A({}, b, c);
    a.memoizedState = c;
    0 === a.lanes && (a.updateQueue.baseState = c);
  }
  var Ei = { isMounted: function(a) {
    return (a = a._reactInternals) ? Vb(a) === a : false;
  }, enqueueSetState: function(a, b, c) {
    a = a._reactInternals;
    var d = R(), e = yi(a), f = mh(d, e);
    f.payload = b;
    void 0 !== c && null !== c && (f.callback = c);
    b = nh(a, f, e);
    null !== b && (gi(b, a, e, d), oh(b, a, e));
  }, enqueueReplaceState: function(a, b, c) {
    a = a._reactInternals;
    var d = R(), e = yi(a), f = mh(d, e);
    f.tag = 1;
    f.payload = b;
    void 0 !== c && null !== c && (f.callback = c);
    b = nh(a, f, e);
    null !== b && (gi(b, a, e, d), oh(b, a, e));
  }, enqueueForceUpdate: function(a, b) {
    a = a._reactInternals;
    var c = R(), d = yi(a), e = mh(c, d);
    e.tag = 2;
    void 0 !== b && null !== b && (e.callback = b);
    b = nh(a, e, d);
    null !== b && (gi(b, a, d, c), oh(b, a, d));
  } };
  function Fi(a, b, c, d, e, f, g) {
    a = a.stateNode;
    return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : true;
  }
  function Gi(a, b, c) {
    var d = false, e = Vf;
    var f = b.contextType;
    "object" === typeof f && null !== f ? f = eh(f) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
    b = new b(c, f);
    a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
    b.updater = Ei;
    a.stateNode = b;
    b._reactInternals = a;
    d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
    return b;
  }
  function Hi(a, b, c, d) {
    a = b.state;
    "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
    "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
    b.state !== a && Ei.enqueueReplaceState(b, b.state, null);
  }
  function Ii(a, b, c, d) {
    var e = a.stateNode;
    e.props = c;
    e.state = a.memoizedState;
    e.refs = {};
    kh(a);
    var f = b.contextType;
    "object" === typeof f && null !== f ? e.context = eh(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a, f));
    e.state = a.memoizedState;
    f = b.getDerivedStateFromProps;
    "function" === typeof f && (Di(a, b, f, c), e.state = a.memoizedState);
    "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Ei.enqueueReplaceState(e, e.state, null), qh(a, c, e, d), e.state = a.memoizedState);
    "function" === typeof e.componentDidMount && (a.flags |= 4194308);
  }
  function Ji(a, b) {
    try {
      var c = "", d = b;
      do
        c += Pa(d), d = d.return;
      while (d);
      var e = c;
    } catch (f) {
      e = "\nError generating stack: " + f.message + "\n" + f.stack;
    }
    return { value: a, source: b, stack: e, digest: null };
  }
  function Ki(a, b, c) {
    return { value: a, source: null, stack: null != c ? c : null, digest: null != b ? b : null };
  }
  function Li(a, b) {
    try {
      console.error(b.value);
    } catch (c) {
      setTimeout(function() {
        throw c;
      });
    }
  }
  var Mi = "function" === typeof WeakMap ? WeakMap : Map;
  function Ni(a, b, c) {
    c = mh(-1, c);
    c.tag = 3;
    c.payload = { element: null };
    var d = b.value;
    c.callback = function() {
      Oi || (Oi = true, Pi = d);
      Li(a, b);
    };
    return c;
  }
  function Qi(a, b, c) {
    c = mh(-1, c);
    c.tag = 3;
    var d = a.type.getDerivedStateFromError;
    if ("function" === typeof d) {
      var e = b.value;
      c.payload = function() {
        return d(e);
      };
      c.callback = function() {
        Li(a, b);
      };
    }
    var f = a.stateNode;
    null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
      Li(a, b);
      "function" !== typeof d && (null === Ri ? Ri = /* @__PURE__ */ new Set([this]) : Ri.add(this));
      var c2 = b.stack;
      this.componentDidCatch(b.value, { componentStack: null !== c2 ? c2 : "" });
    });
    return c;
  }
  function Si(a, b, c) {
    var d = a.pingCache;
    if (null === d) {
      d = a.pingCache = new Mi();
      var e = /* @__PURE__ */ new Set();
      d.set(b, e);
    } else e = d.get(b), void 0 === e && (e = /* @__PURE__ */ new Set(), d.set(b, e));
    e.has(c) || (e.add(c), a = Ti.bind(null, a, b, c), b.then(a, a));
  }
  function Ui(a) {
    do {
      var b;
      if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? true : false : true;
      if (b) return a;
      a = a.return;
    } while (null !== a);
    return null;
  }
  function Vi(a, b, c, d, e) {
    if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = mh(-1, 1), b.tag = 2, nh(c, b, 1))), c.lanes |= 1), a;
    a.flags |= 65536;
    a.lanes = e;
    return a;
  }
  var Wi = ua.ReactCurrentOwner, dh = false;
  function Xi(a, b, c, d) {
    b.child = null === a ? Vg(b, null, c, d) : Ug(b, a.child, c, d);
  }
  function Yi(a, b, c, d, e) {
    c = c.render;
    var f = b.ref;
    ch(b, e);
    d = Nh(a, b, c, d, f, e);
    c = Sh();
    if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
    I && c && vg(b);
    b.flags |= 1;
    Xi(a, b, d, e);
    return b.child;
  }
  function $i(a, b, c, d, e) {
    if (null === a) {
      var f = c.type;
      if ("function" === typeof f && !aj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, bj(a, b, f, d, e);
      a = Rg(c.type, null, d, b, b.mode, e);
      a.ref = b.ref;
      a.return = b;
      return b.child = a;
    }
    f = a.child;
    if (0 === (a.lanes & e)) {
      var g = f.memoizedProps;
      c = c.compare;
      c = null !== c ? c : Ie;
      if (c(g, d) && a.ref === b.ref) return Zi(a, b, e);
    }
    b.flags |= 1;
    a = Pg(f, d);
    a.ref = b.ref;
    a.return = b;
    return b.child = a;
  }
  function bj(a, b, c, d, e) {
    if (null !== a) {
      var f = a.memoizedProps;
      if (Ie(f, d) && a.ref === b.ref) if (dh = false, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (dh = true);
      else return b.lanes = a.lanes, Zi(a, b, e);
    }
    return cj(a, b, c, d, e);
  }
  function dj(a, b, c) {
    var d = b.pendingProps, e = d.children, f = null !== a ? a.memoizedState : null;
    if ("hidden" === d.mode) if (0 === (b.mode & 1)) b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(ej, fj), fj |= c;
    else {
      if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b.updateQueue = null, G(ej, fj), fj |= a, null;
      b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
      d = null !== f ? f.baseLanes : c;
      G(ej, fj);
      fj |= d;
    }
    else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(ej, fj), fj |= d;
    Xi(a, b, e, c);
    return b.child;
  }
  function gj(a, b) {
    var c = b.ref;
    if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
  }
  function cj(a, b, c, d, e) {
    var f = Zf(c) ? Xf : H.current;
    f = Yf(b, f);
    ch(b, e);
    c = Nh(a, b, c, d, f, e);
    d = Sh();
    if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
    I && d && vg(b);
    b.flags |= 1;
    Xi(a, b, c, e);
    return b.child;
  }
  function hj(a, b, c, d, e) {
    if (Zf(c)) {
      var f = true;
      cg(b);
    } else f = false;
    ch(b, e);
    if (null === b.stateNode) ij(a, b), Gi(b, c, d), Ii(b, c, d, e), d = true;
    else if (null === a) {
      var g = b.stateNode, h = b.memoizedProps;
      g.props = h;
      var k = g.context, l = c.contextType;
      "object" === typeof l && null !== l ? l = eh(l) : (l = Zf(c) ? Xf : H.current, l = Yf(b, l));
      var m = c.getDerivedStateFromProps, q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
      q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Hi(b, g, d, l);
      jh = false;
      var r = b.memoizedState;
      g.state = r;
      qh(b, d, g, e);
      k = b.memoizedState;
      h !== d || r !== k || Wf.current || jh ? ("function" === typeof m && (Di(b, c, m, d), k = b.memoizedState), (h = jh || Fi(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = false);
    } else {
      g = b.stateNode;
      lh(a, b);
      h = b.memoizedProps;
      l = b.type === b.elementType ? h : Ci(b.type, h);
      g.props = l;
      q = b.pendingProps;
      r = g.context;
      k = c.contextType;
      "object" === typeof k && null !== k ? k = eh(k) : (k = Zf(c) ? Xf : H.current, k = Yf(b, k));
      var y = c.getDerivedStateFromProps;
      (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && Hi(b, g, d, k);
      jh = false;
      r = b.memoizedState;
      g.state = r;
      qh(b, d, g, e);
      var n = b.memoizedState;
      h !== q || r !== n || Wf.current || jh ? ("function" === typeof y && (Di(b, c, y, d), n = b.memoizedState), (l = jh || Fi(b, c, l, d, r, n, k) || false) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = false);
    }
    return jj(a, b, c, d, f, e);
  }
  function jj(a, b, c, d, e, f) {
    gj(a, b);
    var g = 0 !== (b.flags & 128);
    if (!d && !g) return e && dg(b, c, false), Zi(a, b, f);
    d = b.stateNode;
    Wi.current = b;
    var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
    b.flags |= 1;
    null !== a && g ? (b.child = Ug(b, a.child, null, f), b.child = Ug(b, null, h, f)) : Xi(a, b, h, f);
    b.memoizedState = d.state;
    e && dg(b, c, true);
    return b.child;
  }
  function kj(a) {
    var b = a.stateNode;
    b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, false);
    yh(a, b.containerInfo);
  }
  function lj(a, b, c, d, e) {
    Ig();
    Jg(e);
    b.flags |= 256;
    Xi(a, b, c, d);
    return b.child;
  }
  var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
  function nj(a) {
    return { baseLanes: a, cachePool: null, transitions: null };
  }
  function oj(a, b, c) {
    var d = b.pendingProps, e = L.current, f = false, g = 0 !== (b.flags & 128), h;
    (h = g) || (h = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
    if (h) f = true, b.flags &= -129;
    else if (null === a || null !== a.memoizedState) e |= 1;
    G(L, e & 1);
    if (null === a) {
      Eg(b);
      a = b.memoizedState;
      if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
      g = d.children;
      a = d.fallback;
      return f ? (d = b.mode, f = b.child, g = { mode: "hidden", children: g }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = pj(g, d, 0, null), a = Tg(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = nj(c), b.memoizedState = mj, a) : qj(b, g);
    }
    e = a.memoizedState;
    if (null !== e && (h = e.dehydrated, null !== h)) return rj(a, b, g, d, h, e, c);
    if (f) {
      f = d.fallback;
      g = b.mode;
      e = a.child;
      h = e.sibling;
      var k = { mode: "hidden", children: d.children };
      0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = Pg(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
      null !== h ? f = Pg(h, f) : (f = Tg(f, g, c, null), f.flags |= 2);
      f.return = b;
      d.return = b;
      d.sibling = f;
      b.child = d;
      d = f;
      f = b.child;
      g = a.child.memoizedState;
      g = null === g ? nj(c) : { baseLanes: g.baseLanes | c, cachePool: null, transitions: g.transitions };
      f.memoizedState = g;
      f.childLanes = a.childLanes & ~c;
      b.memoizedState = mj;
      return d;
    }
    f = a.child;
    a = f.sibling;
    d = Pg(f, { mode: "visible", children: d.children });
    0 === (b.mode & 1) && (d.lanes = c);
    d.return = b;
    d.sibling = null;
    null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
    b.child = d;
    b.memoizedState = null;
    return d;
  }
  function qj(a, b) {
    b = pj({ mode: "visible", children: b }, a.mode, 0, null);
    b.return = a;
    return a.child = b;
  }
  function sj(a, b, c, d) {
    null !== d && Jg(d);
    Ug(b, a.child, null, c);
    a = qj(b, b.pendingProps.children);
    a.flags |= 2;
    b.memoizedState = null;
    return a;
  }
  function rj(a, b, c, d, e, f, g) {
    if (c) {
      if (b.flags & 256) return b.flags &= -257, d = Ki(Error(p(422))), sj(a, b, g, d);
      if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
      f = d.fallback;
      e = b.mode;
      d = pj({ mode: "visible", children: d.children }, e, 0, null);
      f = Tg(f, e, g, null);
      f.flags |= 2;
      d.return = b;
      f.return = b;
      d.sibling = f;
      b.child = d;
      0 !== (b.mode & 1) && Ug(b, a.child, null, g);
      b.child.memoizedState = nj(g);
      b.memoizedState = mj;
      return f;
    }
    if (0 === (b.mode & 1)) return sj(a, b, g, null);
    if ("$!" === e.data) {
      d = e.nextSibling && e.nextSibling.dataset;
      if (d) var h = d.dgst;
      d = h;
      f = Error(p(419));
      d = Ki(f, d, void 0);
      return sj(a, b, g, d);
    }
    h = 0 !== (g & a.childLanes);
    if (dh || h) {
      d = Q;
      if (null !== d) {
        switch (g & -g) {
          case 4:
            e = 2;
            break;
          case 16:
            e = 8;
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            e = 32;
            break;
          case 536870912:
            e = 268435456;
            break;
          default:
            e = 0;
        }
        e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
        0 !== e && e !== f.retryLane && (f.retryLane = e, ih(a, e), gi(d, a, e, -1));
      }
      tj();
      d = Ki(Error(p(421)));
      return sj(a, b, g, d);
    }
    if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = uj.bind(null, a), e._reactRetry = b, null;
    a = f.treeContext;
    yg = Lf(e.nextSibling);
    xg = b;
    I = true;
    zg = null;
    null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
    b = qj(b, d.children);
    b.flags |= 4096;
    return b;
  }
  function vj(a, b, c) {
    a.lanes |= b;
    var d = a.alternate;
    null !== d && (d.lanes |= b);
    bh(a.return, b, c);
  }
  function wj(a, b, c, d, e) {
    var f = a.memoizedState;
    null === f ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
  }
  function xj(a, b, c) {
    var d = b.pendingProps, e = d.revealOrder, f = d.tail;
    Xi(a, b, d.children, c);
    d = L.current;
    if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;
    else {
      if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a; ) {
        if (13 === a.tag) null !== a.memoizedState && vj(a, c, b);
        else if (19 === a.tag) vj(a, c, b);
        else if (null !== a.child) {
          a.child.return = a;
          a = a.child;
          continue;
        }
        if (a === b) break a;
        for (; null === a.sibling; ) {
          if (null === a.return || a.return === b) break a;
          a = a.return;
        }
        a.sibling.return = a.return;
        a = a.sibling;
      }
      d &= 1;
    }
    G(L, d);
    if (0 === (b.mode & 1)) b.memoizedState = null;
    else switch (e) {
      case "forwards":
        c = b.child;
        for (e = null; null !== c; ) a = c.alternate, null !== a && null === Ch(a) && (e = c), c = c.sibling;
        c = e;
        null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
        wj(b, false, e, c, f);
        break;
      case "backwards":
        c = null;
        e = b.child;
        for (b.child = null; null !== e; ) {
          a = e.alternate;
          if (null !== a && null === Ch(a)) {
            b.child = e;
            break;
          }
          a = e.sibling;
          e.sibling = c;
          c = e;
          e = a;
        }
        wj(b, true, c, null, f);
        break;
      case "together":
        wj(b, false, null, null, void 0);
        break;
      default:
        b.memoizedState = null;
    }
    return b.child;
  }
  function ij(a, b) {
    0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
  }
  function Zi(a, b, c) {
    null !== a && (b.dependencies = a.dependencies);
    rh |= b.lanes;
    if (0 === (c & b.childLanes)) return null;
    if (null !== a && b.child !== a.child) throw Error(p(153));
    if (null !== b.child) {
      a = b.child;
      c = Pg(a, a.pendingProps);
      b.child = c;
      for (c.return = b; null !== a.sibling; ) a = a.sibling, c = c.sibling = Pg(a, a.pendingProps), c.return = b;
      c.sibling = null;
    }
    return b.child;
  }
  function yj(a, b, c) {
    switch (b.tag) {
      case 3:
        kj(b);
        Ig();
        break;
      case 5:
        Ah(b);
        break;
      case 1:
        Zf(b.type) && cg(b);
        break;
      case 4:
        yh(b, b.stateNode.containerInfo);
        break;
      case 10:
        var d = b.type._context, e = b.memoizedProps.value;
        G(Wg, d._currentValue);
        d._currentValue = e;
        break;
      case 13:
        d = b.memoizedState;
        if (null !== d) {
          if (null !== d.dehydrated) return G(L, L.current & 1), b.flags |= 128, null;
          if (0 !== (c & b.child.childLanes)) return oj(a, b, c);
          G(L, L.current & 1);
          a = Zi(a, b, c);
          return null !== a ? a.sibling : null;
        }
        G(L, L.current & 1);
        break;
      case 19:
        d = 0 !== (c & b.childLanes);
        if (0 !== (a.flags & 128)) {
          if (d) return xj(a, b, c);
          b.flags |= 128;
        }
        e = b.memoizedState;
        null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
        G(L, L.current);
        if (d) break;
        else return null;
      case 22:
      case 23:
        return b.lanes = 0, dj(a, b, c);
    }
    return Zi(a, b, c);
  }
  var zj, Aj, Bj, Cj;
  zj = function(a, b) {
    for (var c = b.child; null !== c; ) {
      if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
      else if (4 !== c.tag && null !== c.child) {
        c.child.return = c;
        c = c.child;
        continue;
      }
      if (c === b) break;
      for (; null === c.sibling; ) {
        if (null === c.return || c.return === b) return;
        c = c.return;
      }
      c.sibling.return = c.return;
      c = c.sibling;
    }
  };
  Aj = function() {
  };
  Bj = function(a, b, c, d) {
    var e = a.memoizedProps;
    if (e !== d) {
      a = b.stateNode;
      xh(uh.current);
      var f = null;
      switch (c) {
        case "input":
          e = Ya(a, e);
          d = Ya(a, d);
          f = [];
          break;
        case "select":
          e = A({}, e, { value: void 0 });
          d = A({}, d, { value: void 0 });
          f = [];
          break;
        case "textarea":
          e = gb(a, e);
          d = gb(a, d);
          f = [];
          break;
        default:
          "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
      }
      ub(c, d);
      var g;
      c = null;
      for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
        var h = e[l];
        for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
      } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
      for (l in d) {
        var k = d[l];
        h = null != e ? e[l] : void 0;
        if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) if (h) {
          for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
          for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
        } else c || (f || (f = []), f.push(
          l,
          c
        )), c = k;
        else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
      }
      c && (f = f || []).push("style", c);
      var l = f;
      if (b.updateQueue = l) b.flags |= 4;
    }
  };
  Cj = function(a, b, c, d) {
    c !== d && (b.flags |= 4);
  };
  function Dj(a, b) {
    if (!I) switch (a.tailMode) {
      case "hidden":
        b = a.tail;
        for (var c = null; null !== b; ) null !== b.alternate && (c = b), b = b.sibling;
        null === c ? a.tail = null : c.sibling = null;
        break;
      case "collapsed":
        c = a.tail;
        for (var d = null; null !== c; ) null !== c.alternate && (d = c), c = c.sibling;
        null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
    }
  }
  function S(a) {
    var b = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
    if (b) for (var e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
    else for (e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
    a.subtreeFlags |= d;
    a.childLanes = c;
    return b;
  }
  function Ej(a, b, c) {
    var d = b.pendingProps;
    wg(b);
    switch (b.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return S(b), null;
      case 1:
        return Zf(b.type) && $f(), S(b), null;
      case 3:
        d = b.stateNode;
        zh();
        E(Wf);
        E(H);
        Eh();
        d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
        if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Fj(zg), zg = null));
        Aj(a, b);
        S(b);
        return null;
      case 5:
        Bh(b);
        var e = xh(wh.current);
        c = b.type;
        if (null !== a && null != b.stateNode) Bj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
        else {
          if (!d) {
            if (null === b.stateNode) throw Error(p(166));
            S(b);
            return null;
          }
          a = xh(uh.current);
          if (Gg(b)) {
            d = b.stateNode;
            c = b.type;
            var f = b.memoizedProps;
            d[Of] = b;
            d[Pf] = f;
            a = 0 !== (b.mode & 1);
            switch (c) {
              case "dialog":
                D("cancel", d);
                D("close", d);
                break;
              case "iframe":
              case "object":
              case "embed":
                D("load", d);
                break;
              case "video":
              case "audio":
                for (e = 0; e < lf.length; e++) D(lf[e], d);
                break;
              case "source":
                D("error", d);
                break;
              case "img":
              case "image":
              case "link":
                D(
                  "error",
                  d
                );
                D("load", d);
                break;
              case "details":
                D("toggle", d);
                break;
              case "input":
                Za(d, f);
                D("invalid", d);
                break;
              case "select":
                d._wrapperState = { wasMultiple: !!f.multiple };
                D("invalid", d);
                break;
              case "textarea":
                hb(d, f), D("invalid", d);
            }
            ub(c, f);
            e = null;
            for (var g in f) if (f.hasOwnProperty(g)) {
              var h = f[g];
              "children" === g ? "string" === typeof h ? d.textContent !== h && (true !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (true !== f.suppressHydrationWarning && Af(
                d.textContent,
                h,
                a
              ), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);
            }
            switch (c) {
              case "input":
                Va(d);
                db(d, f, true);
                break;
              case "textarea":
                Va(d);
                jb(d);
                break;
              case "select":
              case "option":
                break;
              default:
                "function" === typeof f.onClick && (d.onclick = Bf);
            }
            d = e;
            b.updateQueue = d;
            null !== d && (b.flags |= 4);
          } else {
            g = 9 === e.nodeType ? e : e.ownerDocument;
            "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
            "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, { is: d.is }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = true : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
            a[Of] = b;
            a[Pf] = d;
            zj(a, b, false, false);
            b.stateNode = a;
            a: {
              g = vb(c, d);
              switch (c) {
                case "dialog":
                  D("cancel", a);
                  D("close", a);
                  e = d;
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D("load", a);
                  e = d;
                  break;
                case "video":
                case "audio":
                  for (e = 0; e < lf.length; e++) D(lf[e], a);
                  e = d;
                  break;
                case "source":
                  D("error", a);
                  e = d;
                  break;
                case "img":
                case "image":
                case "link":
                  D(
                    "error",
                    a
                  );
                  D("load", a);
                  e = d;
                  break;
                case "details":
                  D("toggle", a);
                  e = d;
                  break;
                case "input":
                  Za(a, d);
                  e = Ya(a, d);
                  D("invalid", a);
                  break;
                case "option":
                  e = d;
                  break;
                case "select":
                  a._wrapperState = { wasMultiple: !!d.multiple };
                  e = A({}, d, { value: void 0 });
                  D("invalid", a);
                  break;
                case "textarea":
                  hb(a, d);
                  e = gb(a, d);
                  D("invalid", a);
                  break;
                default:
                  e = d;
              }
              ub(c, e);
              h = e;
              for (f in h) if (h.hasOwnProperty(f)) {
                var k = h[f];
                "style" === f ? sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && ob(a, k) : "number" === typeof k && ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D("scroll", a) : null != k && ta(a, f, k, g));
              }
              switch (c) {
                case "input":
                  Va(a);
                  db(a, d, false);
                  break;
                case "textarea":
                  Va(a);
                  jb(a);
                  break;
                case "option":
                  null != d.value && a.setAttribute("value", "" + Sa(d.value));
                  break;
                case "select":
                  a.multiple = !!d.multiple;
                  f = d.value;
                  null != f ? fb(a, !!d.multiple, f, false) : null != d.defaultValue && fb(
                    a,
                    !!d.multiple,
                    d.defaultValue,
                    true
                  );
                  break;
                default:
                  "function" === typeof e.onClick && (a.onclick = Bf);
              }
              switch (c) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  d = !!d.autoFocus;
                  break a;
                case "img":
                  d = true;
                  break a;
                default:
                  d = false;
              }
            }
            d && (b.flags |= 4);
          }
          null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
        }
        S(b);
        return null;
      case 6:
        if (a && null != b.stateNode) Cj(a, b, a.memoizedProps, d);
        else {
          if ("string" !== typeof d && null === b.stateNode) throw Error(p(166));
          c = xh(wh.current);
          xh(uh.current);
          if (Gg(b)) {
            d = b.stateNode;
            c = b.memoizedProps;
            d[Of] = b;
            if (f = d.nodeValue !== c) {
              if (a = xg, null !== a) switch (a.tag) {
                case 3:
                  Af(d.nodeValue, c, 0 !== (a.mode & 1));
                  break;
                case 5:
                  true !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
              }
            }
            f && (b.flags |= 4);
          } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
        }
        S(b);
        return null;
      case 13:
        E(L);
        d = b.memoizedState;
        if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
          if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = false;
          else if (f = Gg(b), null !== d && null !== d.dehydrated) {
            if (null === a) {
              if (!f) throw Error(p(318));
              f = b.memoizedState;
              f = null !== f ? f.dehydrated : null;
              if (!f) throw Error(p(317));
              f[Of] = b;
            } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
            S(b);
            f = false;
          } else null !== zg && (Fj(zg), zg = null), f = true;
          if (!f) return b.flags & 65536 ? b : null;
        }
        if (0 !== (b.flags & 128)) return b.lanes = c, b;
        d = null !== d;
        d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (L.current & 1) ? 0 === T && (T = 3) : tj()));
        null !== b.updateQueue && (b.flags |= 4);
        S(b);
        return null;
      case 4:
        return zh(), Aj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;
      case 10:
        return ah(b.type._context), S(b), null;
      case 17:
        return Zf(b.type) && $f(), S(b), null;
      case 19:
        E(L);
        f = b.memoizedState;
        if (null === f) return S(b), null;
        d = 0 !== (b.flags & 128);
        g = f.rendering;
        if (null === g) if (d) Dj(f, false);
        else {
          if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a; ) {
            g = Ch(a);
            if (null !== g) {
              b.flags |= 128;
              Dj(f, false);
              d = g.updateQueue;
              null !== d && (b.updateQueue = d, b.flags |= 4);
              b.subtreeFlags = 0;
              d = c;
              for (c = b.child; null !== c; ) f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c = c.sibling;
              G(L, L.current & 1 | 2);
              return b.child;
            }
            a = a.sibling;
          }
          null !== f.tail && B() > Gj && (b.flags |= 128, d = true, Dj(f, false), b.lanes = 4194304);
        }
        else {
          if (!d) if (a = Ch(g), null !== a) {
            if (b.flags |= 128, d = true, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Dj(f, true), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I) return S(b), null;
          } else 2 * B() - f.renderingStartTime > Gj && 1073741824 !== c && (b.flags |= 128, d = true, Dj(f, false), b.lanes = 4194304);
          f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
        }
        if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = L.current, G(L, d ? c & 1 | 2 : c & 1), b;
        S(b);
        return null;
      case 22:
      case 23:
        return Hj(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (fj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error(p(156, b.tag));
  }
  function Ij(a, b) {
    wg(b);
    switch (b.tag) {
      case 1:
        return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
      case 3:
        return zh(), E(Wf), E(H), Eh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
      case 5:
        return Bh(b), null;
      case 13:
        E(L);
        a = b.memoizedState;
        if (null !== a && null !== a.dehydrated) {
          if (null === b.alternate) throw Error(p(340));
          Ig();
        }
        a = b.flags;
        return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
      case 19:
        return E(L), null;
      case 4:
        return zh(), null;
      case 10:
        return ah(b.type._context), null;
      case 22:
      case 23:
        return Hj(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var Jj = false, U = false, Kj = "function" === typeof WeakSet ? WeakSet : Set, V = null;
  function Lj(a, b) {
    var c = a.ref;
    if (null !== c) if ("function" === typeof c) try {
      c(null);
    } catch (d) {
      W(a, b, d);
    }
    else c.current = null;
  }
  function Mj(a, b, c) {
    try {
      c();
    } catch (d) {
      W(a, b, d);
    }
  }
  var Nj = false;
  function Oj(a, b) {
    Cf = dd;
    a = Me();
    if (Ne(a)) {
      if ("selectionStart" in a) var c = { start: a.selectionStart, end: a.selectionEnd };
      else a: {
        c = (c = a.ownerDocument) && c.defaultView || window;
        var d = c.getSelection && c.getSelection();
        if (d && 0 !== d.rangeCount) {
          c = d.anchorNode;
          var e = d.anchorOffset, f = d.focusNode;
          d = d.focusOffset;
          try {
            c.nodeType, f.nodeType;
          } catch (F) {
            c = null;
            break a;
          }
          var g = 0, h = -1, k = -1, l = 0, m = 0, q = a, r = null;
          b: for (; ; ) {
            for (var y; ; ) {
              q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
              q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);
              3 === q.nodeType && (g += q.nodeValue.length);
              if (null === (y = q.firstChild)) break;
              r = q;
              q = y;
            }
            for (; ; ) {
              if (q === a) break b;
              r === c && ++l === e && (h = g);
              r === f && ++m === d && (k = g);
              if (null !== (y = q.nextSibling)) break;
              q = r;
              r = q.parentNode;
            }
            q = y;
          }
          c = -1 === h || -1 === k ? null : { start: h, end: k };
        } else c = null;
      }
      c = c || { start: 0, end: 0 };
    } else c = null;
    Df = { focusedElem: a, selectionRange: c };
    dd = false;
    for (V = b; null !== V; ) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;
    else for (; null !== V; ) {
      b = V;
      try {
        var n = b.alternate;
        if (0 !== (b.flags & 1024)) switch (b.tag) {
          case 0:
          case 11:
          case 15:
            break;
          case 1:
            if (null !== n) {
              var t = n.memoizedProps, J = n.memoizedState, x = b.stateNode, w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Ci(b.type, t), J);
              x.__reactInternalSnapshotBeforeUpdate = w;
            }
            break;
          case 3:
            var u = b.stateNode.containerInfo;
            1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
            break;
          case 5:
          case 6:
          case 4:
          case 17:
            break;
          default:
            throw Error(p(163));
        }
      } catch (F) {
        W(b, b.return, F);
      }
      a = b.sibling;
      if (null !== a) {
        a.return = b.return;
        V = a;
        break;
      }
      V = b.return;
    }
    n = Nj;
    Nj = false;
    return n;
  }
  function Pj(a, b, c) {
    var d = b.updateQueue;
    d = null !== d ? d.lastEffect : null;
    if (null !== d) {
      var e = d = d.next;
      do {
        if ((e.tag & a) === a) {
          var f = e.destroy;
          e.destroy = void 0;
          void 0 !== f && Mj(b, c, f);
        }
        e = e.next;
      } while (e !== d);
    }
  }
  function Qj(a, b) {
    b = b.updateQueue;
    b = null !== b ? b.lastEffect : null;
    if (null !== b) {
      var c = b = b.next;
      do {
        if ((c.tag & a) === a) {
          var d = c.create;
          c.destroy = d();
        }
        c = c.next;
      } while (c !== b);
    }
  }
  function Rj(a) {
    var b = a.ref;
    if (null !== b) {
      var c = a.stateNode;
      switch (a.tag) {
        case 5:
          a = c;
          break;
        default:
          a = c;
      }
      "function" === typeof b ? b(a) : b.current = a;
    }
  }
  function Sj(a) {
    var b = a.alternate;
    null !== b && (a.alternate = null, Sj(b));
    a.child = null;
    a.deletions = null;
    a.sibling = null;
    5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
    a.stateNode = null;
    a.return = null;
    a.dependencies = null;
    a.memoizedProps = null;
    a.memoizedState = null;
    a.pendingProps = null;
    a.stateNode = null;
    a.updateQueue = null;
  }
  function Tj(a) {
    return 5 === a.tag || 3 === a.tag || 4 === a.tag;
  }
  function Uj(a) {
    a: for (; ; ) {
      for (; null === a.sibling; ) {
        if (null === a.return || Tj(a.return)) return null;
        a = a.return;
      }
      a.sibling.return = a.return;
      for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
        if (a.flags & 2) continue a;
        if (null === a.child || 4 === a.tag) continue a;
        else a.child.return = a, a = a.child;
      }
      if (!(a.flags & 2)) return a.stateNode;
    }
  }
  function Vj(a, b, c) {
    var d = a.tag;
    if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));
    else if (4 !== d && (a = a.child, null !== a)) for (Vj(a, b, c), a = a.sibling; null !== a; ) Vj(a, b, c), a = a.sibling;
  }
  function Wj(a, b, c) {
    var d = a.tag;
    if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);
    else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a; ) Wj(a, b, c), a = a.sibling;
  }
  var X = null, Xj = false;
  function Yj(a, b, c) {
    for (c = c.child; null !== c; ) Zj(a, b, c), c = c.sibling;
  }
  function Zj(a, b, c) {
    if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
      lc.onCommitFiberUnmount(kc, c);
    } catch (h) {
    }
    switch (c.tag) {
      case 5:
        U || Lj(c, b);
      case 6:
        var d = X, e = Xj;
        X = null;
        Yj(a, b, c);
        X = d;
        Xj = e;
        null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));
        break;
      case 18:
        null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));
        break;
      case 4:
        d = X;
        e = Xj;
        X = c.stateNode.containerInfo;
        Xj = true;
        Yj(a, b, c);
        X = d;
        Xj = e;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
          e = d = d.next;
          do {
            var f = e, g = f.destroy;
            f = f.tag;
            void 0 !== g && (0 !== (f & 2) ? Mj(c, b, g) : 0 !== (f & 4) && Mj(c, b, g));
            e = e.next;
          } while (e !== d);
        }
        Yj(a, b, c);
        break;
      case 1:
        if (!U && (Lj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
          d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
        } catch (h) {
          W(c, b, h);
        }
        Yj(a, b, c);
        break;
      case 21:
        Yj(a, b, c);
        break;
      case 22:
        c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Yj(a, b, c), U = d) : Yj(a, b, c);
        break;
      default:
        Yj(a, b, c);
    }
  }
  function ak(a) {
    var b = a.updateQueue;
    if (null !== b) {
      a.updateQueue = null;
      var c = a.stateNode;
      null === c && (c = a.stateNode = new Kj());
      b.forEach(function(b2) {
        var d = bk.bind(null, a, b2);
        c.has(b2) || (c.add(b2), b2.then(d, d));
      });
    }
  }
  function ck(a, b) {
    var c = b.deletions;
    if (null !== c) for (var d = 0; d < c.length; d++) {
      var e = c[d];
      try {
        var f = a, g = b, h = g;
        a: for (; null !== h; ) {
          switch (h.tag) {
            case 5:
              X = h.stateNode;
              Xj = false;
              break a;
            case 3:
              X = h.stateNode.containerInfo;
              Xj = true;
              break a;
            case 4:
              X = h.stateNode.containerInfo;
              Xj = true;
              break a;
          }
          h = h.return;
        }
        if (null === X) throw Error(p(160));
        Zj(f, g, e);
        X = null;
        Xj = false;
        var k = e.alternate;
        null !== k && (k.return = null);
        e.return = null;
      } catch (l) {
        W(e, b, l);
      }
    }
    if (b.subtreeFlags & 12854) for (b = b.child; null !== b; ) dk(b, a), b = b.sibling;
  }
  function dk(a, b) {
    var c = a.alternate, d = a.flags;
    switch (a.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        ck(b, a);
        ek(a);
        if (d & 4) {
          try {
            Pj(3, a, a.return), Qj(3, a);
          } catch (t) {
            W(a, a.return, t);
          }
          try {
            Pj(5, a, a.return);
          } catch (t) {
            W(a, a.return, t);
          }
        }
        break;
      case 1:
        ck(b, a);
        ek(a);
        d & 512 && null !== c && Lj(c, c.return);
        break;
      case 5:
        ck(b, a);
        ek(a);
        d & 512 && null !== c && Lj(c, c.return);
        if (a.flags & 32) {
          var e = a.stateNode;
          try {
            ob(e, "");
          } catch (t) {
            W(a, a.return, t);
          }
        }
        if (d & 4 && (e = a.stateNode, null != e)) {
          var f = a.memoizedProps, g = null !== c ? c.memoizedProps : f, h = a.type, k = a.updateQueue;
          a.updateQueue = null;
          if (null !== k) try {
            "input" === h && "radio" === f.type && null != f.name && ab(e, f);
            vb(h, g);
            var l = vb(h, f);
            for (g = 0; g < k.length; g += 2) {
              var m = k[g], q = k[g + 1];
              "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);
            }
            switch (h) {
              case "input":
                bb(e, f);
                break;
              case "textarea":
                ib(e, f);
                break;
              case "select":
                var r = e._wrapperState.wasMultiple;
                e._wrapperState.wasMultiple = !!f.multiple;
                var y = f.value;
                null != y ? fb(e, !!f.multiple, y, false) : r !== !!f.multiple && (null != f.defaultValue ? fb(
                  e,
                  !!f.multiple,
                  f.defaultValue,
                  true
                ) : fb(e, !!f.multiple, f.multiple ? [] : "", false));
            }
            e[Pf] = f;
          } catch (t) {
            W(a, a.return, t);
          }
        }
        break;
      case 6:
        ck(b, a);
        ek(a);
        if (d & 4) {
          if (null === a.stateNode) throw Error(p(162));
          e = a.stateNode;
          f = a.memoizedProps;
          try {
            e.nodeValue = f;
          } catch (t) {
            W(a, a.return, t);
          }
        }
        break;
      case 3:
        ck(b, a);
        ek(a);
        if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
          bd(b.containerInfo);
        } catch (t) {
          W(a, a.return, t);
        }
        break;
      case 4:
        ck(b, a);
        ek(a);
        break;
      case 13:
        ck(b, a);
        ek(a);
        e = a.child;
        e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (fk = B()));
        d & 4 && ak(a);
        break;
      case 22:
        m = null !== c && null !== c.memoizedState;
        a.mode & 1 ? (U = (l = U) || m, ck(b, a), U = l) : ck(b, a);
        ek(a);
        if (d & 8192) {
          l = null !== a.memoizedState;
          if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for (V = a, m = a.child; null !== m; ) {
            for (q = V = m; null !== V; ) {
              r = V;
              y = r.child;
              switch (r.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  Pj(4, r, r.return);
                  break;
                case 1:
                  Lj(r, r.return);
                  var n = r.stateNode;
                  if ("function" === typeof n.componentWillUnmount) {
                    d = r;
                    c = r.return;
                    try {
                      b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                    } catch (t) {
                      W(d, c, t);
                    }
                  }
                  break;
                case 5:
                  Lj(r, r.return);
                  break;
                case 22:
                  if (null !== r.memoizedState) {
                    gk(q);
                    continue;
                  }
              }
              null !== y ? (y.return = r, V = y) : gk(q);
            }
            m = m.sibling;
          }
          a: for (m = null, q = a; ; ) {
            if (5 === q.tag) {
              if (null === m) {
                m = q;
                try {
                  e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));
                } catch (t) {
                  W(a, a.return, t);
                }
              }
            } else if (6 === q.tag) {
              if (null === m) try {
                q.stateNode.nodeValue = l ? "" : q.memoizedProps;
              } catch (t) {
                W(a, a.return, t);
              }
            } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
              q.child.return = q;
              q = q.child;
              continue;
            }
            if (q === a) break a;
            for (; null === q.sibling; ) {
              if (null === q.return || q.return === a) break a;
              m === q && (m = null);
              q = q.return;
            }
            m === q && (m = null);
            q.sibling.return = q.return;
            q = q.sibling;
          }
        }
        break;
      case 19:
        ck(b, a);
        ek(a);
        d & 4 && ak(a);
        break;
      case 21:
        break;
      default:
        ck(
          b,
          a
        ), ek(a);
    }
  }
  function ek(a) {
    var b = a.flags;
    if (b & 2) {
      try {
        a: {
          for (var c = a.return; null !== c; ) {
            if (Tj(c)) {
              var d = c;
              break a;
            }
            c = c.return;
          }
          throw Error(p(160));
        }
        switch (d.tag) {
          case 5:
            var e = d.stateNode;
            d.flags & 32 && (ob(e, ""), d.flags &= -33);
            var f = Uj(a);
            Wj(a, f, e);
            break;
          case 3:
          case 4:
            var g = d.stateNode.containerInfo, h = Uj(a);
            Vj(a, h, g);
            break;
          default:
            throw Error(p(161));
        }
      } catch (k) {
        W(a, a.return, k);
      }
      a.flags &= -3;
    }
    b & 4096 && (a.flags &= -4097);
  }
  function hk(a, b, c) {
    V = a;
    ik(a);
  }
  function ik(a, b, c) {
    for (var d = 0 !== (a.mode & 1); null !== V; ) {
      var e = V, f = e.child;
      if (22 === e.tag && d) {
        var g = null !== e.memoizedState || Jj;
        if (!g) {
          var h = e.alternate, k = null !== h && null !== h.memoizedState || U;
          h = Jj;
          var l = U;
          Jj = g;
          if ((U = k) && !l) for (V = e; null !== V; ) g = V, k = g.child, 22 === g.tag && null !== g.memoizedState ? jk(e) : null !== k ? (k.return = g, V = k) : jk(e);
          for (; null !== f; ) V = f, ik(f), f = f.sibling;
          V = e;
          Jj = h;
          U = l;
        }
        kk(a);
      } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V = f) : kk(a);
    }
  }
  function kk(a) {
    for (; null !== V; ) {
      var b = V;
      if (0 !== (b.flags & 8772)) {
        var c = b.alternate;
        try {
          if (0 !== (b.flags & 8772)) switch (b.tag) {
            case 0:
            case 11:
            case 15:
              U || Qj(5, b);
              break;
            case 1:
              var d = b.stateNode;
              if (b.flags & 4 && !U) if (null === c) d.componentDidMount();
              else {
                var e = b.elementType === b.type ? c.memoizedProps : Ci(b.type, c.memoizedProps);
                d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
              }
              var f = b.updateQueue;
              null !== f && sh(b, f, d);
              break;
            case 3:
              var g = b.updateQueue;
              if (null !== g) {
                c = null;
                if (null !== b.child) switch (b.child.tag) {
                  case 5:
                    c = b.child.stateNode;
                    break;
                  case 1:
                    c = b.child.stateNode;
                }
                sh(b, g, c);
              }
              break;
            case 5:
              var h = b.stateNode;
              if (null === c && b.flags & 4) {
                c = h;
                var k = b.memoizedProps;
                switch (b.type) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    k.autoFocus && c.focus();
                    break;
                  case "img":
                    k.src && (c.src = k.src);
                }
              }
              break;
            case 6:
              break;
            case 4:
              break;
            case 12:
              break;
            case 13:
              if (null === b.memoizedState) {
                var l = b.alternate;
                if (null !== l) {
                  var m = l.memoizedState;
                  if (null !== m) {
                    var q = m.dehydrated;
                    null !== q && bd(q);
                  }
                }
              }
              break;
            case 19:
            case 17:
            case 21:
            case 22:
            case 23:
            case 25:
              break;
            default:
              throw Error(p(163));
          }
          U || b.flags & 512 && Rj(b);
        } catch (r) {
          W(b, b.return, r);
        }
      }
      if (b === a) {
        V = null;
        break;
      }
      c = b.sibling;
      if (null !== c) {
        c.return = b.return;
        V = c;
        break;
      }
      V = b.return;
    }
  }
  function gk(a) {
    for (; null !== V; ) {
      var b = V;
      if (b === a) {
        V = null;
        break;
      }
      var c = b.sibling;
      if (null !== c) {
        c.return = b.return;
        V = c;
        break;
      }
      V = b.return;
    }
  }
  function jk(a) {
    for (; null !== V; ) {
      var b = V;
      try {
        switch (b.tag) {
          case 0:
          case 11:
          case 15:
            var c = b.return;
            try {
              Qj(4, b);
            } catch (k) {
              W(b, c, k);
            }
            break;
          case 1:
            var d = b.stateNode;
            if ("function" === typeof d.componentDidMount) {
              var e = b.return;
              try {
                d.componentDidMount();
              } catch (k) {
                W(b, e, k);
              }
            }
            var f = b.return;
            try {
              Rj(b);
            } catch (k) {
              W(b, f, k);
            }
            break;
          case 5:
            var g = b.return;
            try {
              Rj(b);
            } catch (k) {
              W(b, g, k);
            }
        }
      } catch (k) {
        W(b, b.return, k);
      }
      if (b === a) {
        V = null;
        break;
      }
      var h = b.sibling;
      if (null !== h) {
        h.return = b.return;
        V = h;
        break;
      }
      V = b.return;
    }
  }
  var lk = Math.ceil, mk = ua.ReactCurrentDispatcher, nk = ua.ReactCurrentOwner, ok = ua.ReactCurrentBatchConfig, K = 0, Q = null, Y = null, Z = 0, fj = 0, ej = Uf(0), T = 0, pk = null, rh = 0, qk = 0, rk = 0, sk = null, tk = null, fk = 0, Gj = Infinity, uk = null, Oi = false, Pi = null, Ri = null, vk = false, wk = null, xk = 0, yk = 0, zk = null, Ak = -1, Bk = 0;
  function R() {
    return 0 !== (K & 6) ? B() : -1 !== Ak ? Ak : Ak = B();
  }
  function yi(a) {
    if (0 === (a.mode & 1)) return 1;
    if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
    if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
    a = C;
    if (0 !== a) return a;
    a = window.event;
    a = void 0 === a ? 16 : jd(a.type);
    return a;
  }
  function gi(a, b, c, d) {
    if (50 < yk) throw yk = 0, zk = null, Error(p(185));
    Ac(a, c, d);
    if (0 === (K & 2) || a !== Q) a === Q && (0 === (K & 2) && (qk |= c), 4 === T && Ck(a, Z)), Dk(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Gj = B() + 500, fg && jg());
  }
  function Dk(a, b) {
    var c = a.callbackNode;
    wc(a, b);
    var d = uc(a, a === Q ? Z : 0);
    if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;
    else if (b = d & -d, a.callbackPriority !== b) {
      null != c && bc(c);
      if (1 === b) 0 === a.tag ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)), Jf(function() {
        0 === (K & 6) && jg();
      }), c = null;
      else {
        switch (Dc(d)) {
          case 1:
            c = fc;
            break;
          case 4:
            c = gc;
            break;
          case 16:
            c = hc;
            break;
          case 536870912:
            c = jc;
            break;
          default:
            c = hc;
        }
        c = Fk(c, Gk.bind(null, a));
      }
      a.callbackPriority = b;
      a.callbackNode = c;
    }
  }
  function Gk(a, b) {
    Ak = -1;
    Bk = 0;
    if (0 !== (K & 6)) throw Error(p(327));
    var c = a.callbackNode;
    if (Hk() && a.callbackNode !== c) return null;
    var d = uc(a, a === Q ? Z : 0);
    if (0 === d) return null;
    if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Ik(a, d);
    else {
      b = d;
      var e = K;
      K |= 2;
      var f = Jk();
      if (Q !== a || Z !== b) uk = null, Gj = B() + 500, Kk(a, b);
      do
        try {
          Lk();
          break;
        } catch (h) {
          Mk(a, h);
        }
      while (1);
      $g();
      mk.current = f;
      K = e;
      null !== Y ? b = 0 : (Q = null, Z = 0, b = T);
    }
    if (0 !== b) {
      2 === b && (e = xc(a), 0 !== e && (d = e, b = Nk(a, e)));
      if (1 === b) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
      if (6 === b) Ck(a, d);
      else {
        e = a.current.alternate;
        if (0 === (d & 30) && !Ok(e) && (b = Ik(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Nk(a, f))), 1 === b)) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
        a.finishedWork = e;
        a.finishedLanes = d;
        switch (b) {
          case 0:
          case 1:
            throw Error(p(345));
          case 2:
            Pk(a, tk, uk);
            break;
          case 3:
            Ck(a, d);
            if ((d & 130023424) === d && (b = fk + 500 - B(), 10 < b)) {
              if (0 !== uc(a, 0)) break;
              e = a.suspendedLanes;
              if ((e & d) !== d) {
                R();
                a.pingedLanes |= a.suspendedLanes & e;
                break;
              }
              a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b);
              break;
            }
            Pk(a, tk, uk);
            break;
          case 4:
            Ck(a, d);
            if ((d & 4194240) === d) break;
            b = a.eventTimes;
            for (e = -1; 0 < d; ) {
              var g = 31 - oc(d);
              f = 1 << g;
              g = b[g];
              g > e && (e = g);
              d &= ~f;
            }
            d = e;
            d = B() - d;
            d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * lk(d / 1960)) - d;
            if (10 < d) {
              a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d);
              break;
            }
            Pk(a, tk, uk);
            break;
          case 5:
            Pk(a, tk, uk);
            break;
          default:
            throw Error(p(329));
        }
      }
    }
    Dk(a, B());
    return a.callbackNode === c ? Gk.bind(null, a) : null;
  }
  function Nk(a, b) {
    var c = sk;
    a.current.memoizedState.isDehydrated && (Kk(a, b).flags |= 256);
    a = Ik(a, b);
    2 !== a && (b = tk, tk = c, null !== b && Fj(b));
    return a;
  }
  function Fj(a) {
    null === tk ? tk = a : tk.push.apply(tk, a);
  }
  function Ok(a) {
    for (var b = a; ; ) {
      if (b.flags & 16384) {
        var c = b.updateQueue;
        if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
          var e = c[d], f = e.getSnapshot;
          e = e.value;
          try {
            if (!He(f(), e)) return false;
          } catch (g) {
            return false;
          }
        }
      }
      c = b.child;
      if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;
      else {
        if (b === a) break;
        for (; null === b.sibling; ) {
          if (null === b.return || b.return === a) return true;
          b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
      }
    }
    return true;
  }
  function Ck(a, b) {
    b &= ~rk;
    b &= ~qk;
    a.suspendedLanes |= b;
    a.pingedLanes &= ~b;
    for (a = a.expirationTimes; 0 < b; ) {
      var c = 31 - oc(b), d = 1 << c;
      a[c] = -1;
      b &= ~d;
    }
  }
  function Ek(a) {
    if (0 !== (K & 6)) throw Error(p(327));
    Hk();
    var b = uc(a, 0);
    if (0 === (b & 1)) return Dk(a, B()), null;
    var c = Ik(a, b);
    if (0 !== a.tag && 2 === c) {
      var d = xc(a);
      0 !== d && (b = d, c = Nk(a, d));
    }
    if (1 === c) throw c = pk, Kk(a, 0), Ck(a, b), Dk(a, B()), c;
    if (6 === c) throw Error(p(345));
    a.finishedWork = a.current.alternate;
    a.finishedLanes = b;
    Pk(a, tk, uk);
    Dk(a, B());
    return null;
  }
  function Qk(a, b) {
    var c = K;
    K |= 1;
    try {
      return a(b);
    } finally {
      K = c, 0 === K && (Gj = B() + 500, fg && jg());
    }
  }
  function Rk(a) {
    null !== wk && 0 === wk.tag && 0 === (K & 6) && Hk();
    var b = K;
    K |= 1;
    var c = ok.transition, d = C;
    try {
      if (ok.transition = null, C = 1, a) return a();
    } finally {
      C = d, ok.transition = c, K = b, 0 === (K & 6) && jg();
    }
  }
  function Hj() {
    fj = ej.current;
    E(ej);
  }
  function Kk(a, b) {
    a.finishedWork = null;
    a.finishedLanes = 0;
    var c = a.timeoutHandle;
    -1 !== c && (a.timeoutHandle = -1, Gf(c));
    if (null !== Y) for (c = Y.return; null !== c; ) {
      var d = c;
      wg(d);
      switch (d.tag) {
        case 1:
          d = d.type.childContextTypes;
          null !== d && void 0 !== d && $f();
          break;
        case 3:
          zh();
          E(Wf);
          E(H);
          Eh();
          break;
        case 5:
          Bh(d);
          break;
        case 4:
          zh();
          break;
        case 13:
          E(L);
          break;
        case 19:
          E(L);
          break;
        case 10:
          ah(d.type._context);
          break;
        case 22:
        case 23:
          Hj();
      }
      c = c.return;
    }
    Q = a;
    Y = a = Pg(a.current, null);
    Z = fj = b;
    T = 0;
    pk = null;
    rk = qk = rh = 0;
    tk = sk = null;
    if (null !== fh) {
      for (b = 0; b < fh.length; b++) if (c = fh[b], d = c.interleaved, null !== d) {
        c.interleaved = null;
        var e = d.next, f = c.pending;
        if (null !== f) {
          var g = f.next;
          f.next = e;
          d.next = g;
        }
        c.pending = d;
      }
      fh = null;
    }
    return a;
  }
  function Mk(a, b) {
    do {
      var c = Y;
      try {
        $g();
        Fh.current = Rh;
        if (Ih) {
          for (var d = M.memoizedState; null !== d; ) {
            var e = d.queue;
            null !== e && (e.pending = null);
            d = d.next;
          }
          Ih = false;
        }
        Hh = 0;
        O = N = M = null;
        Jh = false;
        Kh = 0;
        nk.current = null;
        if (null === c || null === c.return) {
          T = 1;
          pk = b;
          Y = null;
          break;
        }
        a: {
          var f = a, g = c.return, h = c, k = b;
          b = Z;
          h.flags |= 32768;
          if (null !== k && "object" === typeof k && "function" === typeof k.then) {
            var l = k, m = h, q = m.tag;
            if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
              var r = m.alternate;
              r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
            }
            var y = Ui(g);
            if (null !== y) {
              y.flags &= -257;
              Vi(y, g, h, f, b);
              y.mode & 1 && Si(f, l, b);
              b = y;
              k = l;
              var n = b.updateQueue;
              if (null === n) {
                var t = /* @__PURE__ */ new Set();
                t.add(k);
                b.updateQueue = t;
              } else n.add(k);
              break a;
            } else {
              if (0 === (b & 1)) {
                Si(f, l, b);
                tj();
                break a;
              }
              k = Error(p(426));
            }
          } else if (I && h.mode & 1) {
            var J = Ui(g);
            if (null !== J) {
              0 === (J.flags & 65536) && (J.flags |= 256);
              Vi(J, g, h, f, b);
              Jg(Ji(k, h));
              break a;
            }
          }
          f = k = Ji(k, h);
          4 !== T && (T = 2);
          null === sk ? sk = [f] : sk.push(f);
          f = g;
          do {
            switch (f.tag) {
              case 3:
                f.flags |= 65536;
                b &= -b;
                f.lanes |= b;
                var x = Ni(f, k, b);
                ph(f, x);
                break a;
              case 1:
                h = k;
                var w = f.type, u = f.stateNode;
                if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Ri || !Ri.has(u)))) {
                  f.flags |= 65536;
                  b &= -b;
                  f.lanes |= b;
                  var F = Qi(f, h, b);
                  ph(f, F);
                  break a;
                }
            }
            f = f.return;
          } while (null !== f);
        }
        Sk(c);
      } catch (na) {
        b = na;
        Y === c && null !== c && (Y = c = c.return);
        continue;
      }
      break;
    } while (1);
  }
  function Jk() {
    var a = mk.current;
    mk.current = Rh;
    return null === a ? Rh : a;
  }
  function tj() {
    if (0 === T || 3 === T || 2 === T) T = 4;
    null === Q || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q, Z);
  }
  function Ik(a, b) {
    var c = K;
    K |= 2;
    var d = Jk();
    if (Q !== a || Z !== b) uk = null, Kk(a, b);
    do
      try {
        Tk();
        break;
      } catch (e) {
        Mk(a, e);
      }
    while (1);
    $g();
    K = c;
    mk.current = d;
    if (null !== Y) throw Error(p(261));
    Q = null;
    Z = 0;
    return T;
  }
  function Tk() {
    for (; null !== Y; ) Uk(Y);
  }
  function Lk() {
    for (; null !== Y && !cc(); ) Uk(Y);
  }
  function Uk(a) {
    var b = Vk(a.alternate, a, fj);
    a.memoizedProps = a.pendingProps;
    null === b ? Sk(a) : Y = b;
    nk.current = null;
  }
  function Sk(a) {
    var b = a;
    do {
      var c = b.alternate;
      a = b.return;
      if (0 === (b.flags & 32768)) {
        if (c = Ej(c, b, fj), null !== c) {
          Y = c;
          return;
        }
      } else {
        c = Ij(c, b);
        if (null !== c) {
          c.flags &= 32767;
          Y = c;
          return;
        }
        if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
        else {
          T = 6;
          Y = null;
          return;
        }
      }
      b = b.sibling;
      if (null !== b) {
        Y = b;
        return;
      }
      Y = b = a;
    } while (null !== b);
    0 === T && (T = 5);
  }
  function Pk(a, b, c) {
    var d = C, e = ok.transition;
    try {
      ok.transition = null, C = 1, Wk(a, b, c, d);
    } finally {
      ok.transition = e, C = d;
    }
    return null;
  }
  function Wk(a, b, c, d) {
    do
      Hk();
    while (null !== wk);
    if (0 !== (K & 6)) throw Error(p(327));
    c = a.finishedWork;
    var e = a.finishedLanes;
    if (null === c) return null;
    a.finishedWork = null;
    a.finishedLanes = 0;
    if (c === a.current) throw Error(p(177));
    a.callbackNode = null;
    a.callbackPriority = 0;
    var f = c.lanes | c.childLanes;
    Bc(a, f);
    a === Q && (Y = Q = null, Z = 0);
    0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || vk || (vk = true, Fk(hc, function() {
      Hk();
      return null;
    }));
    f = 0 !== (c.flags & 15990);
    if (0 !== (c.subtreeFlags & 15990) || f) {
      f = ok.transition;
      ok.transition = null;
      var g = C;
      C = 1;
      var h = K;
      K |= 4;
      nk.current = null;
      Oj(a, c);
      dk(c, a);
      Oe(Df);
      dd = !!Cf;
      Df = Cf = null;
      a.current = c;
      hk(c);
      dc();
      K = h;
      C = g;
      ok.transition = f;
    } else a.current = c;
    vk && (vk = false, wk = a, xk = e);
    f = a.pendingLanes;
    0 === f && (Ri = null);
    mc(c.stateNode);
    Dk(a, B());
    if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, { componentStack: e.stack, digest: e.digest });
    if (Oi) throw Oi = false, a = Pi, Pi = null, a;
    0 !== (xk & 1) && 0 !== a.tag && Hk();
    f = a.pendingLanes;
    0 !== (f & 1) ? a === zk ? yk++ : (yk = 0, zk = a) : yk = 0;
    jg();
    return null;
  }
  function Hk() {
    if (null !== wk) {
      var a = Dc(xk), b = ok.transition, c = C;
      try {
        ok.transition = null;
        C = 16 > a ? 16 : a;
        if (null === wk) var d = false;
        else {
          a = wk;
          wk = null;
          xk = 0;
          if (0 !== (K & 6)) throw Error(p(331));
          var e = K;
          K |= 4;
          for (V = a.current; null !== V; ) {
            var f = V, g = f.child;
            if (0 !== (V.flags & 16)) {
              var h = f.deletions;
              if (null !== h) {
                for (var k = 0; k < h.length; k++) {
                  var l = h[k];
                  for (V = l; null !== V; ) {
                    var m = V;
                    switch (m.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Pj(8, m, f);
                    }
                    var q = m.child;
                    if (null !== q) q.return = m, V = q;
                    else for (; null !== V; ) {
                      m = V;
                      var r = m.sibling, y = m.return;
                      Sj(m);
                      if (m === l) {
                        V = null;
                        break;
                      }
                      if (null !== r) {
                        r.return = y;
                        V = r;
                        break;
                      }
                      V = y;
                    }
                  }
                }
                var n = f.alternate;
                if (null !== n) {
                  var t = n.child;
                  if (null !== t) {
                    n.child = null;
                    do {
                      var J = t.sibling;
                      t.sibling = null;
                      t = J;
                    } while (null !== t);
                  }
                }
                V = f;
              }
            }
            if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, V = g;
            else b: for (; null !== V; ) {
              f = V;
              if (0 !== (f.flags & 2048)) switch (f.tag) {
                case 0:
                case 11:
                case 15:
                  Pj(9, f, f.return);
              }
              var x = f.sibling;
              if (null !== x) {
                x.return = f.return;
                V = x;
                break b;
              }
              V = f.return;
            }
          }
          var w = a.current;
          for (V = w; null !== V; ) {
            g = V;
            var u = g.child;
            if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, V = u;
            else b: for (g = w; null !== V; ) {
              h = V;
              if (0 !== (h.flags & 2048)) try {
                switch (h.tag) {
                  case 0:
                  case 11:
                  case 15:
                    Qj(9, h);
                }
              } catch (na) {
                W(h, h.return, na);
              }
              if (h === g) {
                V = null;
                break b;
              }
              var F = h.sibling;
              if (null !== F) {
                F.return = h.return;
                V = F;
                break b;
              }
              V = h.return;
            }
          }
          K = e;
          jg();
          if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
            lc.onPostCommitFiberRoot(kc, a);
          } catch (na) {
          }
          d = true;
        }
        return d;
      } finally {
        C = c, ok.transition = b;
      }
    }
    return false;
  }
  function Xk(a, b, c) {
    b = Ji(c, b);
    b = Ni(a, b, 1);
    a = nh(a, b, 1);
    b = R();
    null !== a && (Ac(a, 1, b), Dk(a, b));
  }
  function W(a, b, c) {
    if (3 === a.tag) Xk(a, a, c);
    else for (; null !== b; ) {
      if (3 === b.tag) {
        Xk(b, a, c);
        break;
      } else if (1 === b.tag) {
        var d = b.stateNode;
        if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ri || !Ri.has(d))) {
          a = Ji(c, a);
          a = Qi(b, a, 1);
          b = nh(b, a, 1);
          a = R();
          null !== b && (Ac(b, 1, a), Dk(b, a));
          break;
        }
      }
      b = b.return;
    }
  }
  function Ti(a, b, c) {
    var d = a.pingCache;
    null !== d && d.delete(b);
    b = R();
    a.pingedLanes |= a.suspendedLanes & c;
    Q === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - fk ? Kk(a, 0) : rk |= c);
    Dk(a, b);
  }
  function Yk(a, b) {
    0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
    var c = R();
    a = ih(a, b);
    null !== a && (Ac(a, b, c), Dk(a, c));
  }
  function uj(a) {
    var b = a.memoizedState, c = 0;
    null !== b && (c = b.retryLane);
    Yk(a, c);
  }
  function bk(a, b) {
    var c = 0;
    switch (a.tag) {
      case 13:
        var d = a.stateNode;
        var e = a.memoizedState;
        null !== e && (c = e.retryLane);
        break;
      case 19:
        d = a.stateNode;
        break;
      default:
        throw Error(p(314));
    }
    null !== d && d.delete(b);
    Yk(a, c);
  }
  var Vk;
  Vk = function(a, b, c) {
    if (null !== a) if (a.memoizedProps !== b.pendingProps || Wf.current) dh = true;
    else {
      if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return dh = false, yj(a, b, c);
      dh = 0 !== (a.flags & 131072) ? true : false;
    }
    else dh = false, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
    b.lanes = 0;
    switch (b.tag) {
      case 2:
        var d = b.type;
        ij(a, b);
        a = b.pendingProps;
        var e = Yf(b, H.current);
        ch(b, c);
        e = Nh(null, b, d, a, e, c);
        var f = Sh();
        b.flags |= 1;
        "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = true, cg(b)) : f = false, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, kh(b), e.updater = Ei, b.stateNode = e, e._reactInternals = b, Ii(b, d, a, c), b = jj(null, b, d, true, f, c)) : (b.tag = 0, I && f && vg(b), Xi(null, b, e, c), b = b.child);
        return b;
      case 16:
        d = b.elementType;
        a: {
          ij(a, b);
          a = b.pendingProps;
          e = d._init;
          d = e(d._payload);
          b.type = d;
          e = b.tag = Zk(d);
          a = Ci(d, a);
          switch (e) {
            case 0:
              b = cj(null, b, d, a, c);
              break a;
            case 1:
              b = hj(null, b, d, a, c);
              break a;
            case 11:
              b = Yi(null, b, d, a, c);
              break a;
            case 14:
              b = $i(null, b, d, Ci(d.type, a), c);
              break a;
          }
          throw Error(p(
            306,
            d,
            ""
          ));
        }
        return b;
      case 0:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), cj(a, b, d, e, c);
      case 1:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), hj(a, b, d, e, c);
      case 3:
        a: {
          kj(b);
          if (null === a) throw Error(p(387));
          d = b.pendingProps;
          f = b.memoizedState;
          e = f.element;
          lh(a, b);
          qh(b, d, null, c);
          var g = b.memoizedState;
          d = g.element;
          if (f.isDehydrated) if (f = { element: d, isDehydrated: false, cache: g.cache, pendingSuspenseBoundaries: g.pendingSuspenseBoundaries, transitions: g.transitions }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
            e = Ji(Error(p(423)), b);
            b = lj(a, b, d, c, e);
            break a;
          } else if (d !== e) {
            e = Ji(Error(p(424)), b);
            b = lj(a, b, d, c, e);
            break a;
          } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = true, zg = null, c = Vg(b, null, d, c), b.child = c; c; ) c.flags = c.flags & -3 | 4096, c = c.sibling;
          else {
            Ig();
            if (d === e) {
              b = Zi(a, b, c);
              break a;
            }
            Xi(a, b, d, c);
          }
          b = b.child;
        }
        return b;
      case 5:
        return Ah(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), gj(a, b), Xi(a, b, g, c), b.child;
      case 6:
        return null === a && Eg(b), null;
      case 13:
        return oj(a, b, c);
      case 4:
        return yh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Ug(b, null, d, c) : Xi(a, b, d, c), b.child;
      case 11:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), Yi(a, b, d, e, c);
      case 7:
        return Xi(a, b, b.pendingProps, c), b.child;
      case 8:
        return Xi(a, b, b.pendingProps.children, c), b.child;
      case 12:
        return Xi(a, b, b.pendingProps.children, c), b.child;
      case 10:
        a: {
          d = b.type._context;
          e = b.pendingProps;
          f = b.memoizedProps;
          g = e.value;
          G(Wg, d._currentValue);
          d._currentValue = g;
          if (null !== f) if (He(f.value, g)) {
            if (f.children === e.children && !Wf.current) {
              b = Zi(a, b, c);
              break a;
            }
          } else for (f = b.child, null !== f && (f.return = b); null !== f; ) {
            var h = f.dependencies;
            if (null !== h) {
              g = f.child;
              for (var k = h.firstContext; null !== k; ) {
                if (k.context === d) {
                  if (1 === f.tag) {
                    k = mh(-1, c & -c);
                    k.tag = 2;
                    var l = f.updateQueue;
                    if (null !== l) {
                      l = l.shared;
                      var m = l.pending;
                      null === m ? k.next = k : (k.next = m.next, m.next = k);
                      l.pending = k;
                    }
                  }
                  f.lanes |= c;
                  k = f.alternate;
                  null !== k && (k.lanes |= c);
                  bh(
                    f.return,
                    c,
                    b
                  );
                  h.lanes |= c;
                  break;
                }
                k = k.next;
              }
            } else if (10 === f.tag) g = f.type === b.type ? null : f.child;
            else if (18 === f.tag) {
              g = f.return;
              if (null === g) throw Error(p(341));
              g.lanes |= c;
              h = g.alternate;
              null !== h && (h.lanes |= c);
              bh(g, c, b);
              g = f.sibling;
            } else g = f.child;
            if (null !== g) g.return = f;
            else for (g = f; null !== g; ) {
              if (g === b) {
                g = null;
                break;
              }
              f = g.sibling;
              if (null !== f) {
                f.return = g.return;
                g = f;
                break;
              }
              g = g.return;
            }
            f = g;
          }
          Xi(a, b, e.children, c);
          b = b.child;
        }
        return b;
      case 9:
        return e = b.type, d = b.pendingProps.children, ch(b, c), e = eh(e), d = d(e), b.flags |= 1, Xi(a, b, d, c), b.child;
      case 14:
        return d = b.type, e = Ci(d, b.pendingProps), e = Ci(d.type, e), $i(a, b, d, e, c);
      case 15:
        return bj(a, b, b.type, b.pendingProps, c);
      case 17:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), ij(a, b), b.tag = 1, Zf(d) ? (a = true, cg(b)) : a = false, ch(b, c), Gi(b, d, e), Ii(b, d, e, c), jj(null, b, d, true, a, c);
      case 19:
        return xj(a, b, c);
      case 22:
        return dj(a, b, c);
    }
    throw Error(p(156, b.tag));
  };
  function Fk(a, b) {
    return ac(a, b);
  }
  function $k(a, b, c, d) {
    this.tag = a;
    this.key = c;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = b;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = d;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }
  function Bg(a, b, c, d) {
    return new $k(a, b, c, d);
  }
  function aj(a) {
    a = a.prototype;
    return !(!a || !a.isReactComponent);
  }
  function Zk(a) {
    if ("function" === typeof a) return aj(a) ? 1 : 0;
    if (void 0 !== a && null !== a) {
      a = a.$$typeof;
      if (a === Da) return 11;
      if (a === Ga) return 14;
    }
    return 2;
  }
  function Pg(a, b) {
    var c = a.alternate;
    null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
    c.flags = a.flags & 14680064;
    c.childLanes = a.childLanes;
    c.lanes = a.lanes;
    c.child = a.child;
    c.memoizedProps = a.memoizedProps;
    c.memoizedState = a.memoizedState;
    c.updateQueue = a.updateQueue;
    b = a.dependencies;
    c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
    c.sibling = a.sibling;
    c.index = a.index;
    c.ref = a.ref;
    return c;
  }
  function Rg(a, b, c, d, e, f) {
    var g = 2;
    d = a;
    if ("function" === typeof a) aj(a) && (g = 1);
    else if ("string" === typeof a) g = 5;
    else a: switch (a) {
      case ya:
        return Tg(c.children, e, f, b);
      case za:
        g = 8;
        e |= 8;
        break;
      case Aa:
        return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;
      case Ea:
        return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;
      case Fa:
        return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;
      case Ia:
        return pj(c, e, f, b);
      default:
        if ("object" === typeof a && null !== a) switch (a.$$typeof) {
          case Ba:
            g = 10;
            break a;
          case Ca:
            g = 9;
            break a;
          case Da:
            g = 11;
            break a;
          case Ga:
            g = 14;
            break a;
          case Ha:
            g = 16;
            d = null;
            break a;
        }
        throw Error(p(130, null == a ? a : typeof a, ""));
    }
    b = Bg(g, c, b, e);
    b.elementType = a;
    b.type = d;
    b.lanes = f;
    return b;
  }
  function Tg(a, b, c, d) {
    a = Bg(7, a, d, b);
    a.lanes = c;
    return a;
  }
  function pj(a, b, c, d) {
    a = Bg(22, a, d, b);
    a.elementType = Ia;
    a.lanes = c;
    a.stateNode = { isHidden: false };
    return a;
  }
  function Qg(a, b, c) {
    a = Bg(6, a, null, b);
    a.lanes = c;
    return a;
  }
  function Sg(a, b, c) {
    b = Bg(4, null !== a.children ? a.children : [], a.key, b);
    b.lanes = c;
    b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
    return b;
  }
  function al(a, b, c, d, e) {
    this.tag = b;
    this.containerInfo = a;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.pendingContext = this.context = null;
    this.callbackPriority = 0;
    this.eventTimes = zc(0);
    this.expirationTimes = zc(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = zc(0);
    this.identifierPrefix = d;
    this.onRecoverableError = e;
    this.mutableSourceEagerHydrationData = null;
  }
  function bl(a, b, c, d, e, f, g, h, k) {
    a = new al(a, b, c, h, k);
    1 === b ? (b = 1, true === f && (b |= 8)) : b = 0;
    f = Bg(3, null, null, b);
    a.current = f;
    f.stateNode = a;
    f.memoizedState = { element: d, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null };
    kh(f);
    return a;
  }
  function cl(a, b, c) {
    var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return { $$typeof: wa, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
  }
  function dl(a) {
    if (!a) return Vf;
    a = a._reactInternals;
    a: {
      if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));
      var b = a;
      do {
        switch (b.tag) {
          case 3:
            b = b.stateNode.context;
            break a;
          case 1:
            if (Zf(b.type)) {
              b = b.stateNode.__reactInternalMemoizedMergedChildContext;
              break a;
            }
        }
        b = b.return;
      } while (null !== b);
      throw Error(p(171));
    }
    if (1 === a.tag) {
      var c = a.type;
      if (Zf(c)) return bg(a, c, b);
    }
    return b;
  }
  function el(a, b, c, d, e, f, g, h, k) {
    a = bl(c, d, true, a, e, f, g, h, k);
    a.context = dl(null);
    c = a.current;
    d = R();
    e = yi(c);
    f = mh(d, e);
    f.callback = void 0 !== b && null !== b ? b : null;
    nh(c, f, e);
    a.current.lanes = e;
    Ac(a, e, d);
    Dk(a, d);
    return a;
  }
  function fl(a, b, c, d) {
    var e = b.current, f = R(), g = yi(e);
    c = dl(c);
    null === b.context ? b.context = c : b.pendingContext = c;
    b = mh(f, g);
    b.payload = { element: a };
    d = void 0 === d ? null : d;
    null !== d && (b.callback = d);
    a = nh(e, b, g);
    null !== a && (gi(a, e, g, f), oh(a, e, g));
    return g;
  }
  function gl(a) {
    a = a.current;
    if (!a.child) return null;
    switch (a.child.tag) {
      case 5:
        return a.child.stateNode;
      default:
        return a.child.stateNode;
    }
  }
  function hl(a, b) {
    a = a.memoizedState;
    if (null !== a && null !== a.dehydrated) {
      var c = a.retryLane;
      a.retryLane = 0 !== c && c < b ? c : b;
    }
  }
  function il(a, b) {
    hl(a, b);
    (a = a.alternate) && hl(a, b);
  }
  function jl() {
    return null;
  }
  var kl = "function" === typeof reportError ? reportError : function(a) {
    console.error(a);
  };
  function ll(a) {
    this._internalRoot = a;
  }
  ml.prototype.render = ll.prototype.render = function(a) {
    var b = this._internalRoot;
    if (null === b) throw Error(p(409));
    fl(a, b, null, null);
  };
  ml.prototype.unmount = ll.prototype.unmount = function() {
    var a = this._internalRoot;
    if (null !== a) {
      this._internalRoot = null;
      var b = a.containerInfo;
      Rk(function() {
        fl(null, a, null, null);
      });
      b[uf] = null;
    }
  };
  function ml(a) {
    this._internalRoot = a;
  }
  ml.prototype.unstable_scheduleHydration = function(a) {
    if (a) {
      var b = Hc();
      a = { blockedOn: null, target: a, priority: b };
      for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++) ;
      Qc.splice(c, 0, a);
      0 === c && Vc(a);
    }
  };
  function nl(a) {
    return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
  }
  function ol(a) {
    return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
  }
  function pl() {
  }
  function ql(a, b, c, d, e) {
    if (e) {
      if ("function" === typeof d) {
        var f = d;
        d = function() {
          var a2 = gl(g);
          f.call(a2);
        };
      }
      var g = el(b, d, a, 0, null, false, false, "", pl);
      a._reactRootContainer = g;
      a[uf] = g.current;
      sf(8 === a.nodeType ? a.parentNode : a);
      Rk();
      return g;
    }
    for (; e = a.lastChild; ) a.removeChild(e);
    if ("function" === typeof d) {
      var h = d;
      d = function() {
        var a2 = gl(k);
        h.call(a2);
      };
    }
    var k = bl(a, 0, false, null, null, false, false, "", pl);
    a._reactRootContainer = k;
    a[uf] = k.current;
    sf(8 === a.nodeType ? a.parentNode : a);
    Rk(function() {
      fl(b, k, c, d);
    });
    return k;
  }
  function rl(a, b, c, d, e) {
    var f = c._reactRootContainer;
    if (f) {
      var g = f;
      if ("function" === typeof e) {
        var h = e;
        e = function() {
          var a2 = gl(g);
          h.call(a2);
        };
      }
      fl(b, g, a, e);
    } else g = ql(c, b, a, e, d);
    return gl(g);
  }
  Ec = function(a) {
    switch (a.tag) {
      case 3:
        var b = a.stateNode;
        if (b.current.memoizedState.isDehydrated) {
          var c = tc(b.pendingLanes);
          0 !== c && (Cc(b, c | 1), Dk(b, B()), 0 === (K & 6) && (Gj = B() + 500, jg()));
        }
        break;
      case 13:
        Rk(function() {
          var b2 = ih(a, 1);
          if (null !== b2) {
            var c2 = R();
            gi(b2, a, 1, c2);
          }
        }), il(a, 1);
    }
  };
  Fc = function(a) {
    if (13 === a.tag) {
      var b = ih(a, 134217728);
      if (null !== b) {
        var c = R();
        gi(b, a, 134217728, c);
      }
      il(a, 134217728);
    }
  };
  Gc = function(a) {
    if (13 === a.tag) {
      var b = yi(a), c = ih(a, b);
      if (null !== c) {
        var d = R();
        gi(c, a, b, d);
      }
      il(a, b);
    }
  };
  Hc = function() {
    return C;
  };
  Ic = function(a, b) {
    var c = C;
    try {
      return C = a, b();
    } finally {
      C = c;
    }
  };
  yb = function(a, b, c) {
    switch (b) {
      case "input":
        bb(a, c);
        b = c.name;
        if ("radio" === c.type && null != b) {
          for (c = a; c.parentNode; ) c = c.parentNode;
          c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
          for (b = 0; b < c.length; b++) {
            var d = c[b];
            if (d !== a && d.form === a.form) {
              var e = Db(d);
              if (!e) throw Error(p(90));
              Wa(d);
              bb(d, e);
            }
          }
        }
        break;
      case "textarea":
        ib(a, c);
        break;
      case "select":
        b = c.value, null != b && fb(a, !!c.multiple, b, false);
    }
  };
  Gb = Qk;
  Hb = Rk;
  var sl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Qk] }, tl = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.3.1", rendererPackageName: "react-dom" };
  var ul = { bundleType: tl.bundleType, version: tl.version, rendererPackageName: tl.rendererPackageName, rendererConfig: tl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
    a = Zb(a);
    return null === a ? null : a.stateNode;
  }, findFiberByHostInstance: tl.findFiberByHostInstance || jl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.1-next-f1338f8080-20240426" };
  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!vl.isDisabled && vl.supportsFiber) try {
      kc = vl.inject(ul), lc = vl;
    } catch (a) {
    }
  }
  reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
  reactDom_production_min.createPortal = function(a, b) {
    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!nl(b)) throw Error(p(200));
    return cl(a, b, null, c);
  };
  reactDom_production_min.createRoot = function(a, b) {
    if (!nl(a)) throw Error(p(299));
    var c = false, d = "", e = kl;
    null !== b && void 0 !== b && (true === b.unstable_strictMode && (c = true), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
    b = bl(a, 1, false, null, null, c, false, d, e);
    a[uf] = b.current;
    sf(8 === a.nodeType ? a.parentNode : a);
    return new ll(b);
  };
  reactDom_production_min.findDOMNode = function(a) {
    if (null == a) return null;
    if (1 === a.nodeType) return a;
    var b = a._reactInternals;
    if (void 0 === b) {
      if ("function" === typeof a.render) throw Error(p(188));
      a = Object.keys(a).join(",");
      throw Error(p(268, a));
    }
    a = Zb(b);
    a = null === a ? null : a.stateNode;
    return a;
  };
  reactDom_production_min.flushSync = function(a) {
    return Rk(a);
  };
  reactDom_production_min.hydrate = function(a, b, c) {
    if (!ol(b)) throw Error(p(200));
    return rl(null, a, b, true, c);
  };
  reactDom_production_min.hydrateRoot = function(a, b, c) {
    if (!nl(a)) throw Error(p(405));
    var d = null != c && c.hydratedSources || null, e = false, f = "", g = kl;
    null !== c && void 0 !== c && (true === c.unstable_strictMode && (e = true), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
    b = el(b, null, a, 1, null != c ? c : null, e, false, f, g);
    a[uf] = b.current;
    sf(a);
    if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(
      c,
      e
    );
    return new ml(b);
  };
  reactDom_production_min.render = function(a, b, c) {
    if (!ol(b)) throw Error(p(200));
    return rl(null, a, b, false, c);
  };
  reactDom_production_min.unmountComponentAtNode = function(a) {
    if (!ol(a)) throw Error(p(40));
    return a._reactRootContainer ? (Rk(function() {
      rl(null, null, a, false, function() {
        a._reactRootContainer = null;
        a[uf] = null;
      });
    }), true) : false;
  };
  reactDom_production_min.unstable_batchedUpdates = Qk;
  reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
    if (!ol(c)) throw Error(p(200));
    if (null == a || void 0 === a._reactInternals) throw Error(p(38));
    return rl(a, b, c, false, d);
  };
  reactDom_production_min.version = "18.3.1-next-f1338f8080-20240426";
  return reactDom_production_min;
}
var hasRequiredReactDom;
function requireReactDom() {
  if (hasRequiredReactDom) return reactDom.exports;
  hasRequiredReactDom = 1;
  function checkDCE() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
      return;
    }
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      console.error(err);
    }
  }
  {
    checkDCE();
    reactDom.exports = requireReactDom_production_min();
  }
  return reactDom.exports;
}
var hasRequiredClient;
function requireClient() {
  if (hasRequiredClient) return client;
  hasRequiredClient = 1;
  var m = requireReactDom();
  {
    client.createRoot = m.createRoot;
    client.hydrateRoot = m.hydrateRoot;
  }
  return client;
}
var clientExports = requireClient();
const scriptRel = "modulepreload";
const assetsURL = function(dep) {
  return "/" + dep;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  let promise = Promise.resolve();
  if (deps && deps.length > 0) {
    let allSettled2 = function(promises) {
      return Promise.all(
        promises.map(
          (p) => Promise.resolve(p).then(
            (value) => ({ status: "fulfilled", value }),
            (reason) => ({ status: "rejected", reason })
          )
        )
      );
    };
    document.getElementsByTagName("link");
    const cspNonceMeta = document.querySelector(
      "meta[property=csp-nonce]"
    );
    const cspNonce = (cspNonceMeta == null ? void 0 : cspNonceMeta.nonce) || (cspNonceMeta == null ? void 0 : cspNonceMeta.getAttribute("nonce"));
    promise = allSettled2(
      deps.map((dep) => {
        dep = assetsURL(dep);
        if (dep in seen) return;
        seen[dep] = true;
        const isCss = dep.endsWith(".css");
        const cssSelector = isCss ? '[rel="stylesheet"]' : "";
        if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
          return;
        }
        const link = document.createElement("link");
        link.rel = isCss ? "stylesheet" : scriptRel;
        if (!isCss) {
          link.as = "script";
        }
        link.crossOrigin = "";
        link.href = dep;
        if (cspNonce) {
          link.setAttribute("nonce", cspNonce);
        }
        document.head.appendChild(link);
        if (isCss) {
          return new Promise((res, rej) => {
            link.addEventListener("load", res);
            link.addEventListener(
              "error",
              () => rej(new Error(`Unable to preload CSS for ${dep}`))
            );
          });
        }
      })
    );
  }
  function handlePreloadError(err) {
    const e = new Event("vite:preloadError", {
      cancelable: true
    });
    e.payload = err;
    window.dispatchEvent(e);
    if (!e.defaultPrevented) {
      throw err;
    }
  }
  return promise.then((res) => {
    for (const item of res || []) {
      if (item.status !== "rejected") continue;
      handlePreloadError(item.reason);
    }
    return baseModule().catch(handlePreloadError);
  });
};
function ansi2html(text, defaultColors) {
  const regex = /(\x1b\[(\d+(;\d+)*)m)|([^\x1b]+)/g;
  const tokens = [];
  let match;
  let style = {};
  let reverse = false;
  let fg = defaultColors == null ? void 0 : defaultColors.fg;
  let bg = defaultColors == null ? void 0 : defaultColors.bg;
  while ((match = regex.exec(text)) !== null) {
    const [, , codeStr, , text2] = match;
    if (codeStr) {
      const code = +codeStr;
      switch (code) {
        case 0:
          style = {};
          break;
        case 1:
          style["font-weight"] = "bold";
          break;
        case 2:
          style["opacity"] = "0.8";
          break;
        case 3:
          style["font-style"] = "italic";
          break;
        case 4:
          style["text-decoration"] = "underline";
          break;
        case 7:
          reverse = true;
          break;
        case 8:
          style.display = "none";
          break;
        case 9:
          style["text-decoration"] = "line-through";
          break;
        case 22:
          delete style["font-weight"];
          delete style["font-style"];
          delete style["opacity"];
          delete style["text-decoration"];
          break;
        case 23:
          delete style["font-weight"];
          delete style["font-style"];
          delete style["opacity"];
          break;
        case 24:
          delete style["text-decoration"];
          break;
        case 27:
          reverse = false;
          break;
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
          fg = ansiColors[code - 30];
          break;
        case 39:
          fg = defaultColors == null ? void 0 : defaultColors.fg;
          break;
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
          bg = ansiColors[code - 40];
          break;
        case 49:
          bg = defaultColors == null ? void 0 : defaultColors.bg;
          break;
        case 53:
          style["text-decoration"] = "overline";
          break;
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
          fg = brightAnsiColors[code - 90];
          break;
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
          bg = brightAnsiColors[code - 100];
          break;
      }
    } else if (text2) {
      const styleCopy = { ...style };
      const color = reverse ? bg : fg;
      if (color !== void 0)
        styleCopy["color"] = color;
      const backgroundColor = reverse ? fg : bg;
      if (backgroundColor !== void 0)
        styleCopy["background-color"] = backgroundColor;
      tokens.push(`<span style="${styleBody(styleCopy)}">${escapeHTML(text2)}</span>`);
    }
  }
  return tokens.join("");
}
const ansiColors = {
  0: "var(--vscode-terminal-ansiBlack)",
  1: "var(--vscode-terminal-ansiRed)",
  2: "var(--vscode-terminal-ansiGreen)",
  3: "var(--vscode-terminal-ansiYellow)",
  4: "var(--vscode-terminal-ansiBlue)",
  5: "var(--vscode-terminal-ansiMagenta)",
  6: "var(--vscode-terminal-ansiCyan)",
  7: "var(--vscode-terminal-ansiWhite)"
};
const brightAnsiColors = {
  0: "var(--vscode-terminal-ansiBrightBlack)",
  1: "var(--vscode-terminal-ansiBrightRed)",
  2: "var(--vscode-terminal-ansiBrightGreen)",
  3: "var(--vscode-terminal-ansiBrightYellow)",
  4: "var(--vscode-terminal-ansiBrightBlue)",
  5: "var(--vscode-terminal-ansiBrightMagenta)",
  6: "var(--vscode-terminal-ansiBrightCyan)",
  7: "var(--vscode-terminal-ansiBrightWhite)"
};
function escapeHTML(text) {
  return text.replace(/[&"<>]/g, (c) => ({ "&": "&amp;", '"': "&quot;", "<": "&lt;", ">": "&gt;" })[c]);
}
function styleBody(style) {
  return Object.entries(style).map(([name, value]) => `${name}: ${value}`).join("; ");
}
const CodeMirrorWrapper = ({
  text,
  highlighter,
  mimeType,
  linkify,
  readOnly,
  highlight,
  revealLine,
  lineNumbers,
  isFocused,
  focusOnChange,
  wrapLines,
  onChange,
  dataTestId,
  placeholder
}) => {
  const [measure, codemirrorElement] = useMeasure();
  const [modulePromise] = reactExports.useState(__vitePreload(() => import("./codeMirrorModule-XTQkAsR6.js"), true ? __vite__mapDeps([0,1]) : void 0).then((m) => m.default));
  const codemirrorRef = reactExports.useRef(null);
  const [codemirror, setCodemirror] = reactExports.useState();
  reactExports.useEffect(() => {
    (async () => {
      var _a, _b;
      const CodeMirror = await modulePromise;
      defineCustomMode(CodeMirror);
      const element = codemirrorElement.current;
      if (!element)
        return;
      const mode = highlighterToMode(highlighter) || mimeTypeToMode(mimeType) || (linkify ? "text/linkified" : "");
      if (codemirrorRef.current && mode === codemirrorRef.current.cm.getOption("mode") && !!readOnly === codemirrorRef.current.cm.getOption("readOnly") && lineNumbers === codemirrorRef.current.cm.getOption("lineNumbers") && wrapLines === codemirrorRef.current.cm.getOption("lineWrapping") && placeholder === codemirrorRef.current.cm.getOption("placeholder")) {
        return;
      }
      (_b = (_a = codemirrorRef.current) == null ? void 0 : _a.cm) == null ? void 0 : _b.getWrapperElement().remove();
      const cm = CodeMirror(element, {
        value: "",
        mode,
        readOnly: !!readOnly,
        lineNumbers,
        lineWrapping: wrapLines,
        placeholder
      });
      codemirrorRef.current = { cm };
      if (isFocused)
        cm.focus();
      setCodemirror(cm);
      return cm;
    })();
  }, [modulePromise, codemirror, codemirrorElement, highlighter, mimeType, linkify, lineNumbers, wrapLines, readOnly, isFocused, placeholder]);
  reactExports.useEffect(() => {
    if (codemirrorRef.current)
      codemirrorRef.current.cm.setSize(measure.width, measure.height);
  }, [measure]);
  reactExports.useLayoutEffect(() => {
    var _a;
    if (!codemirror)
      return;
    let valueChanged = false;
    if (codemirror.getValue() !== text) {
      codemirror.setValue(text);
      valueChanged = true;
      if (focusOnChange) {
        codemirror.execCommand("selectAll");
        codemirror.focus();
      }
    }
    if (valueChanged || JSON.stringify(highlight) !== JSON.stringify(codemirrorRef.current.highlight)) {
      for (const h of codemirrorRef.current.highlight || [])
        codemirror.removeLineClass(h.line - 1, "wrap");
      for (const h of highlight || [])
        codemirror.addLineClass(h.line - 1, "wrap", `source-line-${h.type}`);
      for (const w of codemirrorRef.current.widgets || [])
        codemirror.removeLineWidget(w);
      for (const m of codemirrorRef.current.markers || [])
        m.clear();
      const widgets = [];
      const markers = [];
      for (const h of highlight || []) {
        if (h.type !== "subtle-error" && h.type !== "error")
          continue;
        const line = (_a = codemirrorRef.current) == null ? void 0 : _a.cm.getLine(h.line - 1);
        if (line) {
          const attributes = {};
          attributes["title"] = h.message || "";
          markers.push(codemirror.markText(
            { line: h.line - 1, ch: 0 },
            { line: h.line - 1, ch: h.column || line.length },
            { className: "source-line-error-underline", attributes }
          ));
        }
        if (h.type === "error") {
          const errorWidgetElement = document.createElement("div");
          errorWidgetElement.innerHTML = ansi2html(h.message || "");
          errorWidgetElement.className = "source-line-error-widget";
          widgets.push(codemirror.addLineWidget(h.line, errorWidgetElement, { above: true, coverGutter: false }));
        }
      }
      codemirrorRef.current.highlight = highlight;
      codemirrorRef.current.widgets = widgets;
      codemirrorRef.current.markers = markers;
    }
    if (typeof revealLine === "number" && codemirrorRef.current.cm.lineCount() >= revealLine)
      codemirror.scrollIntoView({ line: Math.max(0, revealLine - 1), ch: 0 }, 50);
    let changeListener;
    if (onChange) {
      changeListener = () => onChange(codemirror.getValue());
      codemirror.on("change", changeListener);
    }
    return () => {
      if (changeListener)
        codemirror.off("change", changeListener);
    };
  }, [codemirror, text, highlight, revealLine, focusOnChange, onChange]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { "data-testid": dataTestId, className: "cm-wrapper", ref: codemirrorElement, onClick: onCodeMirrorClick });
};
function onCodeMirrorClick(event) {
  var _a;
  if (!(event.target instanceof HTMLElement))
    return;
  let url;
  if (event.target.classList.contains("cm-linkified")) {
    url = event.target.textContent;
  } else if (event.target.classList.contains("cm-link") && ((_a = event.target.nextElementSibling) == null ? void 0 : _a.classList.contains("cm-url"))) {
    url = event.target.nextElementSibling.textContent.slice(1, -1);
  }
  if (url) {
    event.preventDefault();
    event.stopPropagation();
    window.open(url, "_blank");
  }
}
let customModeDefined = false;
function defineCustomMode(cm) {
  if (customModeDefined)
    return;
  customModeDefined = true;
  cm.defineSimpleMode("text/linkified", {
    start: [
      { regex: kWebLinkRe, token: "linkified" }
    ]
  });
}
function mimeTypeToMode(mimeType) {
  if (!mimeType)
    return;
  if (mimeType.includes("javascript") || mimeType.includes("json"))
    return "javascript";
  if (mimeType.includes("python"))
    return "python";
  if (mimeType.includes("csharp"))
    return "text/x-csharp";
  if (mimeType.includes("java"))
    return "text/x-java";
  if (mimeType.includes("markdown"))
    return "markdown";
  if (mimeType.includes("html") || mimeType.includes("svg"))
    return "htmlmixed";
  if (mimeType.includes("css"))
    return "css";
}
function highlighterToMode(highlighter) {
  if (!highlighter)
    return;
  return {
    javascript: "javascript",
    jsonl: "javascript",
    python: "python",
    csharp: "text/x-csharp",
    java: "text/x-java",
    markdown: "markdown",
    html: "htmlmixed",
    css: "css",
    yaml: "yaml"
  }[highlighter];
}
const kMinSize = 50;
const SplitView = ({
  sidebarSize,
  sidebarHidden = false,
  sidebarIsFirst = false,
  orientation = "vertical",
  minSidebarSize = kMinSize,
  settingName,
  sidebar,
  main
}) => {
  const defaultSize = Math.max(minSidebarSize, sidebarSize) * window.devicePixelRatio;
  const [hSize, setHSize] = useSetting(settingName ? settingName + "." + orientation + ":size" : void 0, defaultSize);
  const [vSize, setVSize] = useSetting(settingName ? settingName + "." + orientation + ":size" : void 0, defaultSize);
  const [resizing, setResizing] = reactExports.useState(null);
  const [measure, ref] = useMeasure();
  let size;
  if (orientation === "vertical") {
    size = vSize / window.devicePixelRatio;
    if (measure && measure.height < size)
      size = measure.height - 10;
  } else {
    size = hSize / window.devicePixelRatio;
    if (measure && measure.width < size)
      size = measure.width - 10;
  }
  document.body.style.userSelect = resizing ? "none" : "inherit";
  let resizerStyle = {};
  if (orientation === "vertical") {
    if (sidebarIsFirst)
      resizerStyle = { top: resizing ? 0 : size - 4, bottom: resizing ? 0 : void 0, height: resizing ? "initial" : 8 };
    else
      resizerStyle = { bottom: resizing ? 0 : size - 4, top: resizing ? 0 : void 0, height: resizing ? "initial" : 8 };
  } else {
    if (sidebarIsFirst)
      resizerStyle = { left: resizing ? 0 : size - 4, right: resizing ? 0 : void 0, width: resizing ? "initial" : 8 };
    else
      resizerStyle = { right: resizing ? 0 : size - 4, left: resizing ? 0 : void 0, width: resizing ? "initial" : 8 };
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: clsx("split-view", orientation, sidebarIsFirst && "sidebar-first"), ref, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "split-view-main", children: main }),
    !sidebarHidden && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { flexBasis: size }, className: "split-view-sidebar", children: sidebar }),
    !sidebarHidden && /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        style: resizerStyle,
        className: "split-view-resizer",
        onMouseDown: (event) => setResizing({ offset: orientation === "vertical" ? event.clientY : event.clientX, size }),
        onMouseUp: () => setResizing(null),
        onMouseMove: (event) => {
          if (!event.buttons) {
            setResizing(null);
          } else if (resizing) {
            const offset = orientation === "vertical" ? event.clientY : event.clientX;
            const delta = offset - resizing.offset;
            const newSize = sidebarIsFirst ? resizing.size + delta : resizing.size - delta;
            const splitView = event.target.parentElement;
            const rect = splitView.getBoundingClientRect();
            const size2 = Math.min(Math.max(minSidebarSize, newSize), (orientation === "vertical" ? rect.height : rect.width) - minSidebarSize);
            if (orientation === "vertical")
              setVSize(size2 * window.devicePixelRatio);
            else
              setHSize(size2 * window.devicePixelRatio);
          }
        }
      }
    )
  ] });
};
const Toolbar = ({
  noShadow,
  children,
  noMinHeight,
  className,
  sidebarBackground,
  onClick
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: clsx("toolbar", noShadow && "no-shadow", noMinHeight && "no-min-height", className, sidebarBackground && "toolbar-sidebar-background"), onClick, children });
};
const TabbedPane = ({ tabs, selectedTab, setSelectedTab, leftToolbar, rightToolbar, dataTestId, mode }) => {
  const id = reactExports.useId();
  if (!selectedTab)
    selectedTab = tabs[0].id;
  if (!mode)
    mode = "default";
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "tabbed-pane", "data-testid": dataTestId, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "vbox", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Toolbar, { children: [
      leftToolbar && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { style: { flex: "none", display: "flex", margin: "0 4px", alignItems: "center" }, children: [
        ...leftToolbar
      ] }),
      mode === "default" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { flex: "auto", display: "flex", height: "100%", overflow: "hidden" }, role: "tablist", children: [
        ...tabs.map((tab) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          TabbedPaneTab,
          {
            id: tab.id,
            ariaControls: `${id}-${tab.id}`,
            title: tab.title,
            count: tab.count,
            errorCount: tab.errorCount,
            selected: selectedTab === tab.id,
            onSelect: setSelectedTab
          },
          tab.id
        ))
      ] }),
      mode === "select" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { flex: "auto", display: "flex", height: "100%", overflow: "hidden" }, role: "tablist", children: /* @__PURE__ */ jsxRuntimeExports.jsx("select", { style: { width: "100%", background: "none", cursor: "pointer" }, value: selectedTab, onChange: (e) => {
        setSelectedTab == null ? void 0 : setSelectedTab(tabs[e.currentTarget.selectedIndex].id);
      }, children: tabs.map((tab) => {
        let suffix = "";
        if (tab.count)
          suffix = ` (${tab.count})`;
        if (tab.errorCount)
          suffix = ` (${tab.errorCount})`;
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("option", { value: tab.id, role: "tab", "aria-controls": `${id}-${tab.id}`, children: [
          tab.title,
          suffix
        ] }, tab.id);
      }) }) }),
      rightToolbar && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { style: { flex: "none", display: "flex", alignItems: "center" }, children: [
        ...rightToolbar
      ] })
    ] }),
    tabs.map((tab) => {
      const className = "tab-content tab-" + tab.id;
      if (tab.component)
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { id: `${id}-${tab.id}`, role: "tabpanel", "aria-label": tab.title, className, style: { display: selectedTab === tab.id ? "inherit" : "none" }, children: tab.component }, tab.id);
      if (selectedTab === tab.id)
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { id: `${id}-${tab.id}`, role: "tabpanel", "aria-label": tab.title, className, children: tab.render() }, tab.id);
    })
  ] }) });
};
const TabbedPaneTab = ({ id, title, count, errorCount, selected, onSelect, ariaControls }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      className: clsx("tabbed-pane-tab", selected && "selected"),
      onClick: () => onSelect == null ? void 0 : onSelect(id),
      role: "tab",
      title,
      "aria-controls": ariaControls,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "tabbed-pane-tab-label", children: title }),
        !!count && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "tabbed-pane-tab-counter", children: count }),
        !!errorCount && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "tabbed-pane-tab-counter error", children: errorCount })
      ]
    }
  );
};
const SourceChooser = ({ sources, fileId, setFileId }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("select", { className: "source-chooser", hidden: !sources.length, title: "Source chooser", value: fileId, onChange: (event) => {
    setFileId(event.target.selectedOptions[0].value);
  }, children: renderSourceOptions(sources) });
};
function renderSourceOptions(sources) {
  const transformTitle = (title) => title.replace(/.*[/\\]([^/\\]+)/, "$1");
  const renderOption = (source) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: source.id, children: transformTitle(source.label) }, source.id);
  const sourcesByGroups = /* @__PURE__ */ new Map();
  for (const source of sources) {
    let list = sourcesByGroups.get(source.group || "Debugger");
    if (!list) {
      list = [];
      sourcesByGroups.set(source.group || "Debugger", list);
    }
    list.push(source);
  }
  return [...sourcesByGroups.entries()].map(([group, sources2]) => /* @__PURE__ */ jsxRuntimeExports.jsx("optgroup", { label: group, children: sources2.filter((s) => (s.group || "Debugger") === group).map((source) => renderOption(source)) }, group));
}
function emptySource() {
  return {
    id: "default",
    isRecorded: false,
    text: "",
    language: "javascript",
    label: "",
    highlight: []
  };
}
const ToolbarButton = reactExports.forwardRef(function ToolbarButton2({
  children,
  title = "",
  icon,
  disabled = false,
  toggled = false,
  onClick = () => {
  },
  style,
  testId,
  className,
  ariaLabel
}, ref) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "button",
    {
      ref,
      className: clsx(className, "toolbar-button", icon, toggled && "toggled"),
      onMouseDown: preventDefault,
      onClick,
      onDoubleClick: preventDefault,
      title,
      disabled: !!disabled,
      style,
      "data-testid": testId,
      "aria-label": ariaLabel || title,
      children: [
        icon && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `codicon codicon-${icon}`, style: children ? { marginRight: 5 } : {} }),
        children
      ]
    }
  );
});
const ToolbarSeparator = ({
  style
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "toolbar-separator", style });
};
const preventDefault = (e) => {
  e.stopPropagation();
  e.preventDefault();
};
const between = function(num, first, last) {
  return num >= first && num <= last;
};
function digit(code) {
  return between(code, 48, 57);
}
function hexdigit(code) {
  return digit(code) || between(code, 65, 70) || between(code, 97, 102);
}
function uppercaseletter(code) {
  return between(code, 65, 90);
}
function lowercaseletter(code) {
  return between(code, 97, 122);
}
function letter(code) {
  return uppercaseletter(code) || lowercaseletter(code);
}
function nonascii(code) {
  return code >= 128;
}
function namestartchar(code) {
  return letter(code) || nonascii(code) || code === 95;
}
function namechar(code) {
  return namestartchar(code) || digit(code) || code === 45;
}
function nonprintable(code) {
  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;
}
function newline(code) {
  return code === 10;
}
function whitespace(code) {
  return newline(code) || code === 9 || code === 32;
}
const maximumallowedcodepoint = 1114111;
class InvalidCharacterError extends Error {
  constructor(message) {
    super(message);
    this.name = "InvalidCharacterError";
  }
}
function preprocess(str) {
  const codepoints = [];
  for (let i = 0; i < str.length; i++) {
    let code = str.charCodeAt(i);
    if (code === 13 && str.charCodeAt(i + 1) === 10) {
      code = 10;
      i++;
    }
    if (code === 13 || code === 12)
      code = 10;
    if (code === 0)
      code = 65533;
    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {
      const lead = code - 55296;
      const trail = str.charCodeAt(i + 1) - 56320;
      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;
      i++;
    }
    codepoints.push(code);
  }
  return codepoints;
}
function stringFromCode(code) {
  if (code <= 65535)
    return String.fromCharCode(code);
  code -= Math.pow(2, 16);
  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;
  const trail = code % Math.pow(2, 10) + 56320;
  return String.fromCharCode(lead) + String.fromCharCode(trail);
}
function tokenize(str1) {
  const str = preprocess(str1);
  let i = -1;
  const tokens = [];
  let code;
  const codepoint = function(i2) {
    if (i2 >= str.length)
      return -1;
    return str[i2];
  };
  const next = function(num) {
    if (num === void 0)
      num = 1;
    if (num > 3)
      throw "Spec Error: no more than three codepoints of lookahead.";
    return codepoint(i + num);
  };
  const consume = function(num) {
    if (num === void 0)
      num = 1;
    i += num;
    code = codepoint(i);
    return true;
  };
  const reconsume = function() {
    i -= 1;
    return true;
  };
  const eof = function(codepoint2) {
    if (codepoint2 === void 0)
      codepoint2 = code;
    return codepoint2 === -1;
  };
  const consumeAToken = function() {
    consumeComments();
    consume();
    if (whitespace(code)) {
      while (whitespace(next()))
        consume();
      return new WhitespaceToken();
    } else if (code === 34) {
      return consumeAStringToken();
    } else if (code === 35) {
      if (namechar(next()) || areAValidEscape(next(1), next(2))) {
        const token = new HashToken("");
        if (wouldStartAnIdentifier(next(1), next(2), next(3)))
          token.type = "id";
        token.value = consumeAName();
        return token;
      } else {
        return new DelimToken(code);
      }
    } else if (code === 36) {
      if (next() === 61) {
        consume();
        return new SuffixMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 39) {
      return consumeAStringToken();
    } else if (code === 40) {
      return new OpenParenToken();
    } else if (code === 41) {
      return new CloseParenToken();
    } else if (code === 42) {
      if (next() === 61) {
        consume();
        return new SubstringMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 43) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 44) {
      return new CommaToken();
    } else if (code === 45) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else if (next(1) === 45 && next(2) === 62) {
        consume(2);
        return new CDCToken();
      } else if (startsWithAnIdentifier()) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 46) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 58) {
      return new ColonToken();
    } else if (code === 59) {
      return new SemicolonToken();
    } else if (code === 60) {
      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {
        consume(3);
        return new CDOToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 64) {
      if (wouldStartAnIdentifier(next(1), next(2), next(3)))
        return new AtKeywordToken(consumeAName());
      else
        return new DelimToken(code);
    } else if (code === 91) {
      return new OpenSquareToken();
    } else if (code === 92) {
      if (startsWithAValidEscape()) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 93) {
      return new CloseSquareToken();
    } else if (code === 94) {
      if (next() === 61) {
        consume();
        return new PrefixMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 123) {
      return new OpenCurlyToken();
    } else if (code === 124) {
      if (next() === 61) {
        consume();
        return new DashMatchToken();
      } else if (next() === 124) {
        consume();
        return new ColumnToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 125) {
      return new CloseCurlyToken();
    } else if (code === 126) {
      if (next() === 61) {
        consume();
        return new IncludeMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (digit(code)) {
      reconsume();
      return consumeANumericToken();
    } else if (namestartchar(code)) {
      reconsume();
      return consumeAnIdentlikeToken();
    } else if (eof()) {
      return new EOFToken();
    } else {
      return new DelimToken(code);
    }
  };
  const consumeComments = function() {
    while (next(1) === 47 && next(2) === 42) {
      consume(2);
      while (true) {
        consume();
        if (code === 42 && next() === 47) {
          consume();
          break;
        } else if (eof()) {
          return;
        }
      }
    }
  };
  const consumeANumericToken = function() {
    const num = consumeANumber();
    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {
      const token = new DimensionToken();
      token.value = num.value;
      token.repr = num.repr;
      token.type = num.type;
      token.unit = consumeAName();
      return token;
    } else if (next() === 37) {
      consume();
      const token = new PercentageToken();
      token.value = num.value;
      token.repr = num.repr;
      return token;
    } else {
      const token = new NumberToken();
      token.value = num.value;
      token.repr = num.repr;
      token.type = num.type;
      return token;
    }
  };
  const consumeAnIdentlikeToken = function() {
    const str2 = consumeAName();
    if (str2.toLowerCase() === "url" && next() === 40) {
      consume();
      while (whitespace(next(1)) && whitespace(next(2)))
        consume();
      if (next() === 34 || next() === 39)
        return new FunctionToken(str2);
      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))
        return new FunctionToken(str2);
      else
        return consumeAURLToken();
    } else if (next() === 40) {
      consume();
      return new FunctionToken(str2);
    } else {
      return new IdentToken(str2);
    }
  };
  const consumeAStringToken = function(endingCodePoint) {
    if (endingCodePoint === void 0)
      endingCodePoint = code;
    let string2 = "";
    while (consume()) {
      if (code === endingCodePoint || eof()) {
        return new StringToken(string2);
      } else if (newline(code)) {
        reconsume();
        return new BadStringToken();
      } else if (code === 92) {
        if (eof(next()))
          ;
        else if (newline(next()))
          consume();
        else
          string2 += stringFromCode(consumeEscape());
      } else {
        string2 += stringFromCode(code);
      }
    }
    throw new Error("Internal error");
  };
  const consumeAURLToken = function() {
    const token = new URLToken("");
    while (whitespace(next()))
      consume();
    if (eof(next()))
      return token;
    while (consume()) {
      if (code === 41 || eof()) {
        return token;
      } else if (whitespace(code)) {
        while (whitespace(next()))
          consume();
        if (next() === 41 || eof(next())) {
          consume();
          return token;
        } else {
          consumeTheRemnantsOfABadURL();
          return new BadURLToken();
        }
      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {
        consumeTheRemnantsOfABadURL();
        return new BadURLToken();
      } else if (code === 92) {
        if (startsWithAValidEscape()) {
          token.value += stringFromCode(consumeEscape());
        } else {
          consumeTheRemnantsOfABadURL();
          return new BadURLToken();
        }
      } else {
        token.value += stringFromCode(code);
      }
    }
    throw new Error("Internal error");
  };
  const consumeEscape = function() {
    consume();
    if (hexdigit(code)) {
      const digits = [code];
      for (let total = 0; total < 5; total++) {
        if (hexdigit(next())) {
          consume();
          digits.push(code);
        } else {
          break;
        }
      }
      if (whitespace(next()))
        consume();
      let value = parseInt(digits.map(function(x) {
        return String.fromCharCode(x);
      }).join(""), 16);
      if (value > maximumallowedcodepoint)
        value = 65533;
      return value;
    } else if (eof()) {
      return 65533;
    } else {
      return code;
    }
  };
  const areAValidEscape = function(c1, c2) {
    if (c1 !== 92)
      return false;
    if (newline(c2))
      return false;
    return true;
  };
  const startsWithAValidEscape = function() {
    return areAValidEscape(code, next());
  };
  const wouldStartAnIdentifier = function(c1, c2, c3) {
    if (c1 === 45)
      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);
    else if (namestartchar(c1))
      return true;
    else if (c1 === 92)
      return areAValidEscape(c1, c2);
    else
      return false;
  };
  const startsWithAnIdentifier = function() {
    return wouldStartAnIdentifier(code, next(1), next(2));
  };
  const wouldStartANumber = function(c1, c2, c3) {
    if (c1 === 43 || c1 === 45) {
      if (digit(c2))
        return true;
      if (c2 === 46 && digit(c3))
        return true;
      return false;
    } else if (c1 === 46) {
      if (digit(c2))
        return true;
      return false;
    } else if (digit(c1)) {
      return true;
    } else {
      return false;
    }
  };
  const startsWithANumber = function() {
    return wouldStartANumber(code, next(1), next(2));
  };
  const consumeAName = function() {
    let result = "";
    while (consume()) {
      if (namechar(code)) {
        result += stringFromCode(code);
      } else if (startsWithAValidEscape()) {
        result += stringFromCode(consumeEscape());
      } else {
        reconsume();
        return result;
      }
    }
    throw new Error("Internal parse error");
  };
  const consumeANumber = function() {
    let repr = "";
    let type = "integer";
    if (next() === 43 || next() === 45) {
      consume();
      repr += stringFromCode(code);
    }
    while (digit(next())) {
      consume();
      repr += stringFromCode(code);
    }
    if (next(1) === 46 && digit(next(2))) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    }
    const c1 = next(1), c2 = next(2), c3 = next(3);
    if ((c1 === 69 || c1 === 101) && digit(c2)) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    }
    const value = convertAStringToANumber(repr);
    return { type, value, repr };
  };
  const convertAStringToANumber = function(string2) {
    return +string2;
  };
  const consumeTheRemnantsOfABadURL = function() {
    while (consume()) {
      if (code === 41 || eof()) {
        return;
      } else if (startsWithAValidEscape()) {
        consumeEscape();
      } else ;
    }
  };
  let iterationCount = 0;
  while (!eof(next())) {
    tokens.push(consumeAToken());
    iterationCount++;
    if (iterationCount > str.length * 2)
      throw new Error("I'm infinite-looping!");
  }
  return tokens;
}
class CSSParserToken {
  constructor() {
    this.tokenType = "";
  }
  toJSON() {
    return { token: this.tokenType };
  }
  toString() {
    return this.tokenType;
  }
  toSource() {
    return "" + this;
  }
}
class BadStringToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "BADSTRING";
  }
}
class BadURLToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "BADURL";
  }
}
class WhitespaceToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "WHITESPACE";
  }
  toString() {
    return "WS";
  }
  toSource() {
    return " ";
  }
}
class CDOToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "CDO";
  }
  toSource() {
    return "<!--";
  }
}
class CDCToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "CDC";
  }
  toSource() {
    return "-->";
  }
}
class ColonToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = ":";
  }
}
class SemicolonToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = ";";
  }
}
class CommaToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = ",";
  }
}
class GroupingToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.value = "";
    this.mirror = "";
  }
}
class OpenCurlyToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "{";
    this.value = "{";
    this.mirror = "}";
  }
}
class CloseCurlyToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "}";
    this.value = "}";
    this.mirror = "{";
  }
}
class OpenSquareToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "[";
    this.value = "[";
    this.mirror = "]";
  }
}
class CloseSquareToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "]";
    this.value = "]";
    this.mirror = "[";
  }
}
class OpenParenToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "(";
    this.value = "(";
    this.mirror = ")";
  }
}
class CloseParenToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = ")";
    this.value = ")";
    this.mirror = "(";
  }
}
class IncludeMatchToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "~=";
  }
}
class DashMatchToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "|=";
  }
}
class PrefixMatchToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "^=";
  }
}
class SuffixMatchToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "$=";
  }
}
class SubstringMatchToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "*=";
  }
}
class ColumnToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "||";
  }
}
class EOFToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "EOF";
  }
  toSource() {
    return "";
  }
}
class DelimToken extends CSSParserToken {
  constructor(code) {
    super();
    this.tokenType = "DELIM";
    this.value = "";
    this.value = stringFromCode(code);
  }
  toString() {
    return "DELIM(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    return json;
  }
  toSource() {
    if (this.value === "\\")
      return "\\\n";
    else
      return this.value;
  }
}
class StringValuedToken extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.value = "";
  }
  ASCIIMatch(str) {
    return this.value.toLowerCase() === str.toLowerCase();
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    return json;
  }
}
class IdentToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "IDENT";
    this.value = val;
  }
  toString() {
    return "IDENT(" + this.value + ")";
  }
  toSource() {
    return escapeIdent(this.value);
  }
}
class FunctionToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "FUNCTION";
    this.value = val;
    this.mirror = ")";
  }
  toString() {
    return "FUNCTION(" + this.value + ")";
  }
  toSource() {
    return escapeIdent(this.value) + "(";
  }
}
class AtKeywordToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "AT-KEYWORD";
    this.value = val;
  }
  toString() {
    return "AT(" + this.value + ")";
  }
  toSource() {
    return "@" + escapeIdent(this.value);
  }
}
class HashToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "HASH";
    this.value = val;
    this.type = "unrestricted";
  }
  toString() {
    return "HASH(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.type = this.type;
    return json;
  }
  toSource() {
    if (this.type === "id")
      return "#" + escapeIdent(this.value);
    else
      return "#" + escapeHash(this.value);
  }
}
class StringToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "STRING";
    this.value = val;
  }
  toString() {
    return '"' + escapeString(this.value) + '"';
  }
}
class URLToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "URL";
    this.value = val;
  }
  toString() {
    return "URL(" + this.value + ")";
  }
  toSource() {
    return 'url("' + escapeString(this.value) + '")';
  }
}
class NumberToken extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "NUMBER";
    this.type = "integer";
    this.repr = "";
  }
  toString() {
    if (this.type === "integer")
      return "INT(" + this.value + ")";
    return "NUMBER(" + this.value + ")";
  }
  toJSON() {
    const json = super.toJSON();
    json.value = this.value;
    json.type = this.type;
    json.repr = this.repr;
    return json;
  }
  toSource() {
    return this.repr;
  }
}
class PercentageToken extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "PERCENTAGE";
    this.repr = "";
  }
  toString() {
    return "PERCENTAGE(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.repr = this.repr;
    return json;
  }
  toSource() {
    return this.repr + "%";
  }
}
class DimensionToken extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "DIMENSION";
    this.type = "integer";
    this.repr = "";
    this.unit = "";
  }
  toString() {
    return "DIM(" + this.value + "," + this.unit + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.type = this.type;
    json.repr = this.repr;
    json.unit = this.unit;
    return json;
  }
  toSource() {
    const source = this.repr;
    let unit = escapeIdent(this.unit);
    if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {
      unit = "\\65 " + unit.slice(1, unit.length);
    }
    return source + unit;
  }
}
function escapeIdent(string2) {
  string2 = "" + string2;
  let result = "";
  const firstcode = string2.charCodeAt(0);
  for (let i = 0; i < string2.length; i++) {
    const code = string2.charCodeAt(i);
    if (code === 0)
      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)
      result += "\\" + code.toString(16) + " ";
    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
      result += string2[i];
    else
      result += "\\" + string2[i];
  }
  return result;
}
function escapeHash(string2) {
  string2 = "" + string2;
  let result = "";
  for (let i = 0; i < string2.length; i++) {
    const code = string2.charCodeAt(i);
    if (code === 0)
      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
      result += string2[i];
    else
      result += "\\" + code.toString(16) + " ";
  }
  return result;
}
function escapeString(string2) {
  string2 = "" + string2;
  let result = "";
  for (let i = 0; i < string2.length; i++) {
    const code = string2.charCodeAt(i);
    if (code === 0)
      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (between(code, 1, 31) || code === 127)
      result += "\\" + code.toString(16) + " ";
    else if (code === 34 || code === 92)
      result += "\\" + string2[i];
    else
      result += string2[i];
  }
  return result;
}
class InvalidSelectorError extends Error {
}
function parseCSS(selector, customNames) {
  let tokens;
  try {
    tokens = tokenize(selector);
    if (!(tokens[tokens.length - 1] instanceof EOFToken))
      tokens.push(new EOFToken());
  } catch (e) {
    const newMessage = e.message + ` while parsing css selector "${selector}". Did you mean to CSS.escape it?`;
    const index = (e.stack || "").indexOf(e.message);
    if (index !== -1)
      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);
    e.message = newMessage;
    throw e;
  }
  const unsupportedToken = tokens.find((token) => {
    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.
    // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }
    // Or this way :xpath( {complex-xpath-goes-here("hello")} )
    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?
    token instanceof URLToken || token instanceof PercentageToken;
  });
  if (unsupportedToken)
    throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);
  let pos = 0;
  const names = /* @__PURE__ */ new Set();
  function unexpected() {
    return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);
  }
  function skipWhitespace() {
    while (tokens[pos] instanceof WhitespaceToken)
      pos++;
  }
  function isIdent(p = pos) {
    return tokens[p] instanceof IdentToken;
  }
  function isString(p = pos) {
    return tokens[p] instanceof StringToken;
  }
  function isNumber(p = pos) {
    return tokens[p] instanceof NumberToken;
  }
  function isComma(p = pos) {
    return tokens[p] instanceof CommaToken;
  }
  function isOpenParen(p = pos) {
    return tokens[p] instanceof OpenParenToken;
  }
  function isCloseParen(p = pos) {
    return tokens[p] instanceof CloseParenToken;
  }
  function isFunction(p = pos) {
    return tokens[p] instanceof FunctionToken;
  }
  function isStar(p = pos) {
    return tokens[p] instanceof DelimToken && tokens[p].value === "*";
  }
  function isEOF(p = pos) {
    return tokens[p] instanceof EOFToken;
  }
  function isClauseCombinator(p = pos) {
    return tokens[p] instanceof DelimToken && [">", "+", "~"].includes(tokens[p].value);
  }
  function isSelectorClauseEnd(p = pos) {
    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;
  }
  function consumeFunctionArguments() {
    const result2 = [consumeArgument()];
    while (true) {
      skipWhitespace();
      if (!isComma())
        break;
      pos++;
      result2.push(consumeArgument());
    }
    return result2;
  }
  function consumeArgument() {
    skipWhitespace();
    if (isNumber())
      return tokens[pos++].value;
    if (isString())
      return tokens[pos++].value;
    return consumeComplexSelector();
  }
  function consumeComplexSelector() {
    const result2 = { simples: [] };
    skipWhitespace();
    if (isClauseCombinator()) {
      result2.simples.push({ selector: { functions: [{ name: "scope", args: [] }] }, combinator: "" });
    } else {
      result2.simples.push({ selector: consumeSimpleSelector(), combinator: "" });
    }
    while (true) {
      skipWhitespace();
      if (isClauseCombinator()) {
        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;
        skipWhitespace();
      } else if (isSelectorClauseEnd()) {
        break;
      }
      result2.simples.push({ combinator: "", selector: consumeSimpleSelector() });
    }
    return result2;
  }
  function consumeSimpleSelector() {
    let rawCSSString = "";
    const functions = [];
    while (!isSelectorClauseEnd()) {
      if (isIdent() || isStar()) {
        rawCSSString += tokens[pos++].toSource();
      } else if (tokens[pos] instanceof HashToken) {
        rawCSSString += tokens[pos++].toSource();
      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === ".") {
        pos++;
        if (isIdent())
          rawCSSString += "." + tokens[pos++].toSource();
        else
          throw unexpected();
      } else if (tokens[pos] instanceof ColonToken) {
        pos++;
        if (isIdent()) {
          if (!customNames.has(tokens[pos].value.toLowerCase())) {
            rawCSSString += ":" + tokens[pos++].toSource();
          } else {
            const name = tokens[pos++].value.toLowerCase();
            functions.push({ name, args: [] });
            names.add(name);
          }
        } else if (isFunction()) {
          const name = tokens[pos++].value.toLowerCase();
          if (!customNames.has(name)) {
            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;
          } else {
            functions.push({ name, args: consumeFunctionArguments() });
            names.add(name);
          }
          skipWhitespace();
          if (!isCloseParen())
            throw unexpected();
          pos++;
        } else {
          throw unexpected();
        }
      } else if (tokens[pos] instanceof OpenSquareToken) {
        rawCSSString += "[";
        pos++;
        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())
          rawCSSString += tokens[pos++].toSource();
        if (!(tokens[pos] instanceof CloseSquareToken))
          throw unexpected();
        rawCSSString += "]";
        pos++;
      } else {
        throw unexpected();
      }
    }
    if (!rawCSSString && !functions.length)
      throw unexpected();
    return { css: rawCSSString || void 0, functions };
  }
  function consumeBuiltinFunctionArguments() {
    let s = "";
    let balance = 1;
    while (!isEOF()) {
      if (isOpenParen() || isFunction())
        balance++;
      if (isCloseParen())
        balance--;
      if (!balance)
        break;
      s += tokens[pos++].toSource();
    }
    return s;
  }
  const result = consumeFunctionArguments();
  if (!isEOF())
    throw unexpected();
  if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))
    throw new InvalidSelectorError(`Error while parsing css selector "${selector}". Did you mean to CSS.escape it?`);
  return { selector: result, names: Array.from(names) };
}
const kNestedSelectorNames = /* @__PURE__ */ new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);
const kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set(["left-of", "right-of", "above", "below", "near"]);
const customCSSNames = /* @__PURE__ */ new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);
function parseSelector(selector) {
  const parsedStrings = parseSelectorString(selector);
  const parts = [];
  for (const part of parsedStrings.parts) {
    if (part.name === "css" || part.name === "css:light") {
      if (part.name === "css:light")
        part.body = ":light(" + part.body + ")";
      const parsedCSS = parseCSS(part.body, customCSSNames);
      parts.push({
        name: "css",
        body: parsedCSS.selector,
        source: part.body
      });
      continue;
    }
    if (kNestedSelectorNames.has(part.name)) {
      let innerSelector;
      let distance;
      try {
        const unescaped = JSON.parse("[" + part.body + "]");
        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")
          throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
        innerSelector = unescaped[0];
        if (unescaped.length === 2) {
          if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))
            throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
          distance = unescaped[1];
        }
      } catch (e) {
        throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
      }
      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };
      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");
      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;
      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))
        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);
      parts.push(nested);
      continue;
    }
    parts.push({ ...part, source: part.body });
  }
  if (kNestedSelectorNames.has(parts[0].name))
    throw new InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);
  return {
    capture: parsedStrings.capture,
    parts
  };
}
function selectorPartsEqual(list1, list2) {
  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });
}
function stringifySelector(selector, forceEngineName) {
  if (typeof selector === "string")
    return selector;
  return selector.parts.map((p, i) => {
    let includeEngine = true;
    if (!forceEngineName && i !== selector.capture) {
      if (p.name === "css")
        includeEngine = false;
      else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))
        includeEngine = false;
    }
    const prefix = includeEngine ? p.name + "=" : "";
    return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;
  }).join(" >> ");
}
function parseSelectorString(selector) {
  let index = 0;
  let quote;
  let start = 0;
  const result = { parts: [] };
  const append = () => {
    const part = selector.substring(start, index).trim();
    const eqIndex = part.indexOf("=");
    let name;
    let body;
    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {
      name = part.substring(0, eqIndex).trim();
      body = part.substring(eqIndex + 1);
    } else if (part.length > 1 && part[0] === '"' && part[part.length - 1] === '"') {
      name = "text";
      body = part;
    } else if (part.length > 1 && part[0] === "'" && part[part.length - 1] === "'") {
      name = "text";
      body = part;
    } else if (/^\(*\/\//.test(part) || part.startsWith("..")) {
      name = "xpath";
      body = part;
    } else {
      name = "css";
      body = part;
    }
    let capture = false;
    if (name[0] === "*") {
      capture = true;
      name = name.substring(1);
    }
    result.parts.push({ name, body });
    if (capture) {
      if (result.capture !== void 0)
        throw new InvalidSelectorError(`Only one of the selectors can capture using * modifier`);
      result.capture = result.parts.length - 1;
    }
  };
  if (!selector.includes(">>")) {
    index = selector.length;
    append();
    return result;
  }
  const shouldIgnoreTextSelectorQuote = () => {
    const prefix = selector.substring(start, index);
    const match = prefix.match(/^\s*text\s*=(.*)$/);
    return !!match && !!match[1];
  };
  while (index < selector.length) {
    const c = selector[index];
    if (c === "\\" && index + 1 < selector.length) {
      index += 2;
    } else if (c === quote) {
      quote = void 0;
      index++;
    } else if (!quote && (c === '"' || c === "'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {
      quote = c;
      index++;
    } else if (!quote && c === ">" && selector[index + 1] === ">") {
      append();
      index += 2;
      start = index;
    } else {
      index++;
    }
  }
  append();
  return result;
}
function parseAttributeSelector(selector, allowUnquotedStrings) {
  let wp = 0;
  let EOL = selector.length === 0;
  const next = () => selector[wp] || "";
  const eat1 = () => {
    const result2 = next();
    ++wp;
    EOL = wp >= selector.length;
    return result2;
  };
  const syntaxError = (stage) => {
    if (EOL)
      throw new InvalidSelectorError(`Unexpected end of selector while parsing selector \`${selector}\``);
    throw new InvalidSelectorError(`Error while parsing selector \`${selector}\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));
  };
  function skipSpaces() {
    while (!EOL && /\s/.test(next()))
      eat1();
  }
  function isCSSNameChar(char) {
    return char >= "" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";
  }
  function readIdentifier() {
    let result2 = "";
    skipSpaces();
    while (!EOL && isCSSNameChar(next()))
      result2 += eat1();
    return result2;
  }
  function readQuotedString(quote) {
    let result2 = eat1();
    if (result2 !== quote)
      syntaxError("parsing quoted string");
    while (!EOL && next() !== quote) {
      if (next() === "\\")
        eat1();
      result2 += eat1();
    }
    if (next() !== quote)
      syntaxError("parsing quoted string");
    result2 += eat1();
    return result2;
  }
  function readRegularExpression() {
    if (eat1() !== "/")
      syntaxError("parsing regular expression");
    let source = "";
    let inClass = false;
    while (!EOL) {
      if (next() === "\\") {
        source += eat1();
        if (EOL)
          syntaxError("parsing regular expression");
      } else if (inClass && next() === "]") {
        inClass = false;
      } else if (!inClass && next() === "[") {
        inClass = true;
      } else if (!inClass && next() === "/") {
        break;
      }
      source += eat1();
    }
    if (eat1() !== "/")
      syntaxError("parsing regular expression");
    let flags = "";
    while (!EOL && next().match(/[dgimsuy]/))
      flags += eat1();
    try {
      return new RegExp(source, flags);
    } catch (e) {
      throw new InvalidSelectorError(`Error while parsing selector \`${selector}\`: ${e.message}`);
    }
  }
  function readAttributeToken() {
    let token = "";
    skipSpaces();
    if (next() === `'` || next() === `"`)
      token = readQuotedString(next()).slice(1, -1);
    else
      token = readIdentifier();
    if (!token)
      syntaxError("parsing property path");
    return token;
  }
  function readOperator() {
    skipSpaces();
    let op = "";
    if (!EOL)
      op += eat1();
    if (!EOL && op !== "=")
      op += eat1();
    if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))
      syntaxError("parsing operator");
    return op;
  }
  function readAttribute() {
    eat1();
    const jsonPath = [];
    jsonPath.push(readAttributeToken());
    skipSpaces();
    while (next() === ".") {
      eat1();
      jsonPath.push(readAttributeToken());
      skipSpaces();
    }
    if (next() === "]") {
      eat1();
      return { name: jsonPath.join("."), jsonPath, op: "<truthy>", value: null, caseSensitive: false };
    }
    const operator = readOperator();
    let value = void 0;
    let caseSensitive = true;
    skipSpaces();
    if (next() === "/") {
      if (operator !== "=")
        throw new InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with regular expression`);
      value = readRegularExpression();
    } else if (next() === `'` || next() === `"`) {
      value = readQuotedString(next()).slice(1, -1);
      skipSpaces();
      if (next() === "i" || next() === "I") {
        caseSensitive = false;
        eat1();
      } else if (next() === "s" || next() === "S") {
        caseSensitive = true;
        eat1();
      }
    } else {
      value = "";
      while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))
        value += eat1();
      if (value === "true") {
        value = true;
      } else if (value === "false") {
        value = false;
      } else ;
    }
    skipSpaces();
    if (next() !== "]")
      syntaxError("parsing attribute value");
    eat1();
    if (operator !== "=" && typeof value !== "string")
      throw new InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);
    return { name: jsonPath.join("."), jsonPath, op: operator, value, caseSensitive };
  }
  const result = {
    name: "",
    attributes: []
  };
  result.name = readIdentifier();
  skipSpaces();
  while (next() === "[") {
    result.attributes.push(readAttribute());
    skipSpaces();
  }
  if (!EOL)
    syntaxError(void 0);
  if (!result.name && !result.attributes.length)
    throw new InvalidSelectorError(`Error while parsing selector \`${selector}\` - selector cannot be empty`);
  return result;
}
function escapeWithQuotes(text, char = "'") {
  const stringified = JSON.stringify(text);
  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\"/g, '"');
  if (char === "'")
    return char + escapedText.replace(/[']/g, "\\'") + char;
  if (char === '"')
    return char + escapedText.replace(/["]/g, '\\"') + char;
  if (char === "`")
    return char + escapedText.replace(/[`]/g, "\\`") + char;
  throw new Error("Invalid escape char");
}
function toTitleCase(name) {
  return name.charAt(0).toUpperCase() + name.substring(1);
}
function toSnakeCase(name) {
  return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();
}
function normalizeEscapedRegexQuotes(source) {
  return source.replace(/(^|[^\\])(\\\\)*\\(['"`])/g, "$1$2$3");
}
function asLocator(lang, selector, isFrameLocator = false) {
  return asLocators(lang, selector, isFrameLocator, 1)[0];
}
function asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {
  try {
    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);
  } catch (e) {
    return [selector];
  }
}
function innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {
  const parts = [...parsed.parts];
  const tokens = [];
  let nextBase = isFrameLocator ? "frame-locator" : "page";
  for (let index = 0; index < parts.length; index++) {
    const part = parts[index];
    const base = nextBase;
    nextBase = "locator";
    if (part.name === "internal:describe")
      continue;
    if (part.name === "nth") {
      if (part.body === "0")
        tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);
      else if (part.body === "-1")
        tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);
      else
        tokens.push([factory.generateLocator(base, "nth", part.body)]);
      continue;
    }
    if (part.name === "visible") {
      tokens.push([factory.generateLocator(base, "visible", part.body), factory.generateLocator(base, "default", `visible=${part.body}`)]);
      continue;
    }
    if (part.name === "internal:text") {
      const { exact, text } = detectExact(part.body);
      tokens.push([factory.generateLocator(base, "text", text, { exact })]);
      continue;
    }
    if (part.name === "internal:has-text") {
      const { exact, text } = detectExact(part.body);
      if (!exact) {
        tokens.push([factory.generateLocator(base, "has-text", text, { exact })]);
        continue;
      }
    }
    if (part.name === "internal:has-not-text") {
      const { exact, text } = detectExact(part.body);
      if (!exact) {
        tokens.push([factory.generateLocator(base, "has-not-text", text, { exact })]);
        continue;
      }
    }
    if (part.name === "internal:has") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));
      continue;
    }
    if (part.name === "internal:has-not") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));
      continue;
    }
    if (part.name === "internal:and") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));
      continue;
    }
    if (part.name === "internal:or") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));
      continue;
    }
    if (part.name === "internal:chain") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));
      continue;
    }
    if (part.name === "internal:label") {
      const { exact, text } = detectExact(part.body);
      tokens.push([factory.generateLocator(base, "label", text, { exact })]);
      continue;
    }
    if (part.name === "internal:role") {
      const attrSelector = parseAttributeSelector(part.body);
      const options = { attrs: [] };
      for (const attr of attrSelector.attributes) {
        if (attr.name === "name") {
          options.exact = attr.caseSensitive;
          options.name = attr.value;
        } else {
          if (attr.name === "level" && typeof attr.value === "string")
            attr.value = +attr.value;
          options.attrs.push({ name: attr.name === "include-hidden" ? "includeHidden" : attr.name, value: attr.value });
        }
      }
      tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);
      continue;
    }
    if (part.name === "internal:testid") {
      const attrSelector = parseAttributeSelector(part.body);
      const { value } = attrSelector.attributes[0];
      tokens.push([factory.generateLocator(base, "test-id", value)]);
      continue;
    }
    if (part.name === "internal:attr") {
      const attrSelector = parseAttributeSelector(part.body);
      const { name, value, caseSensitive } = attrSelector.attributes[0];
      const text = value;
      const exact = !!caseSensitive;
      if (name === "placeholder") {
        tokens.push([factory.generateLocator(base, "placeholder", text, { exact })]);
        continue;
      }
      if (name === "alt") {
        tokens.push([factory.generateLocator(base, "alt", text, { exact })]);
        continue;
      }
      if (name === "title") {
        tokens.push([factory.generateLocator(base, "title", text, { exact })]);
        continue;
      }
    }
    if (part.name === "internal:control" && part.body === "enter-frame") {
      const lastTokens = tokens[tokens.length - 1];
      const lastPart = parts[index - 1];
      const transformed = lastTokens.map((token) => factory.chainLocators([token, factory.generateLocator(base, "frame", "")]));
      if (["xpath", "css"].includes(lastPart.name)) {
        transformed.push(
          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] })),
          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] }, true))
        );
      }
      lastTokens.splice(0, lastTokens.length, ...transformed);
      nextBase = "frame-locator";
      continue;
    }
    const nextPart = parts[index + 1];
    const selectorPart = stringifySelector({ parts: [part] });
    const locatorPart = factory.generateLocator(base, "default", selectorPart);
    if (nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {
      const { exact, text } = detectExact(nextPart.body);
      if (!exact) {
        const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, { exact });
        const options = {};
        if (nextPart.name === "internal:has-text")
          options.hasText = text;
        else
          options.hasNotText = text;
        const combinedPart = factory.generateLocator(base, "default", selectorPart, options);
        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);
        index++;
        continue;
      }
    }
    let locatorPartWithEngine;
    if (["xpath", "css"].includes(part.name)) {
      const selectorPart2 = stringifySelector(
        { parts: [part] },
        /* forceEngineName */
        true
      );
      locatorPartWithEngine = factory.generateLocator(base, "default", selectorPart2);
    }
    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));
  }
  return combineTokens(factory, tokens, maxOutputSize);
}
function combineTokens(factory, tokens, maxOutputSize) {
  const currentTokens = tokens.map(() => "");
  const result = [];
  const visit2 = (index) => {
    if (index === tokens.length) {
      result.push(factory.chainLocators(currentTokens));
      return result.length < maxOutputSize;
    }
    for (const taken of tokens[index]) {
      currentTokens[index] = taken;
      if (!visit2(index + 1))
        return false;
    }
    return true;
  };
  visit2(0);
  return result;
}
function detectExact(text) {
  let exact = false;
  const match = text.match(/^\/(.*)\/([igm]*)$/);
  if (match)
    return { text: new RegExp(match[1], match[2]) };
  if (text.endsWith('"')) {
    text = JSON.parse(text);
    exact = true;
  } else if (text.endsWith('"s')) {
    text = JSON.parse(text.substring(0, text.length - 1));
    exact = true;
  } else if (text.endsWith('"i')) {
    text = JSON.parse(text.substring(0, text.length - 1));
    exact = false;
  }
  return { exact, text };
}
class JavaScriptLocatorFactory {
  constructor(preferredQuote) {
    this.preferredQuote = preferredQuote;
  }
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;
        if (options.hasNotText !== void 0)
          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;
        return `locator(${this.quote(body)})`;
      case "frame-locator":
        return `frameLocator(${this.quote(body)})`;
      case "frame":
        return `contentFrame()`;
      case "nth":
        return `nth(${body})`;
      case "first":
        return `first()`;
      case "last":
        return `last()`;
      case "visible":
        return `filter({ visible: ${body === "true" ? "true" : "false"} })`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(`name: ${this.regexToSourceString(options.name)}`);
        } else if (typeof options.name === "string") {
          attrs.push(`name: ${this.quote(options.name)}`);
          if (options.exact)
            attrs.push(`exact: true`);
        }
        for (const { name, value } of options.attrs)
          attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);
        const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";
        return `getByRole(${this.quote(body)}${attrString})`;
      case "has-text":
        return `filter({ hasText: ${this.toHasText(body)} })`;
      case "has-not-text":
        return `filter({ hasNotText: ${this.toHasText(body)} })`;
      case "has":
        return `filter({ has: ${body} })`;
      case "hasNot":
        return `filter({ hasNot: ${body} })`;
      case "and":
        return `and(${body})`;
      case "or":
        return `or(${body})`;
      case "chain":
        return `locator(${body})`;
      case "test-id":
        return `getByTestId(${this.toTestIdValue(body)})`;
      case "text":
        return this.toCallWithExact("getByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("getByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("getByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("getByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact("getByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToSourceString(re) {
    return normalizeEscapedRegexQuotes(String(re));
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp(body))
      return `${method}(${this.regexToSourceString(body)})`;
    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return this.regexToSourceString(body);
    return this.quote(body);
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToSourceString(value);
    return this.quote(value);
  }
  quote(text) {
    return escapeWithQuotes(text, this.preferredQuote ?? "'");
  }
}
class PythonLocatorFactory {
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;
        if (options.hasNotText !== void 0)
          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;
        return `locator(${this.quote(body)})`;
      case "frame-locator":
        return `frame_locator(${this.quote(body)})`;
      case "frame":
        return `content_frame`;
      case "nth":
        return `nth(${body})`;
      case "first":
        return `first`;
      case "last":
        return `last`;
      case "visible":
        return `filter(visible=${body === "true" ? "True" : "False"})`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(`name=${this.regexToString(options.name)}`);
        } else if (typeof options.name === "string") {
          attrs.push(`name=${this.quote(options.name)}`);
          if (options.exact)
            attrs.push(`exact=True`);
        }
        for (const { name, value } of options.attrs) {
          let valueString = typeof value === "string" ? this.quote(value) : value;
          if (typeof value === "boolean")
            valueString = value ? "True" : "False";
          attrs.push(`${toSnakeCase(name)}=${valueString}`);
        }
        const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";
        return `get_by_role(${this.quote(body)}${attrString})`;
      case "has-text":
        return `filter(has_text=${this.toHasText(body)})`;
      case "has-not-text":
        return `filter(has_not_text=${this.toHasText(body)})`;
      case "has":
        return `filter(has=${body})`;
      case "hasNot":
        return `filter(has_not=${body})`;
      case "and":
        return `and_(${body})`;
      case "or":
        return `or_(${body})`;
      case "chain":
        return `locator(${body})`;
      case "test-id":
        return `get_by_test_id(${this.toTestIdValue(body)})`;
      case "text":
        return this.toCallWithExact("get_by_text", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("get_by_alt_text", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("get_by_placeholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("get_by_label", body, !!options.exact);
      case "title":
        return this.toCallWithExact("get_by_title", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";
    return `re.compile(r"${normalizeEscapedRegexQuotes(body.source).replace(/\\\//, "/").replace(/"/g, '\\"')}"${suffix})`;
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp(body))
      return `${method}(${this.regexToString(body)})`;
    if (exact)
      return `${method}(${this.quote(body)}, exact=True)`;
    return `${method}(${this.quote(body)})`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return this.regexToString(body);
    return `${this.quote(body)}`;
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToString(value);
    return this.quote(value);
  }
  quote(text) {
    return escapeWithQuotes(text, '"');
  }
}
class JavaLocatorFactory {
  generateLocator(base, kind, body, options = {}) {
    let clazz;
    switch (base) {
      case "page":
        clazz = "Page";
        break;
      case "frame-locator":
        clazz = "FrameLocator";
        break;
      case "locator":
        clazz = "Locator";
        break;
    }
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;
        if (options.hasNotText !== void 0)
          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;
        return `locator(${this.quote(body)})`;
      case "frame-locator":
        return `frameLocator(${this.quote(body)})`;
      case "frame":
        return `contentFrame()`;
      case "nth":
        return `nth(${body})`;
      case "first":
        return `first()`;
      case "last":
        return `last()`;
      case "visible":
        return `filter(new ${clazz}.FilterOptions().setVisible(${body === "true" ? "true" : "false"}))`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(`.setName(${this.regexToString(options.name)})`);
        } else if (typeof options.name === "string") {
          attrs.push(`.setName(${this.quote(options.name)})`);
          if (options.exact)
            attrs.push(`.setExact(true)`);
        }
        for (const { name, value } of options.attrs)
          attrs.push(`.set${toTitleCase(name)}(${typeof value === "string" ? this.quote(value) : value})`);
        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";
        return `getByRole(AriaRole.${toSnakeCase(body).toUpperCase()}${attrString})`;
      case "has-text":
        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;
      case "has-not-text":
        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;
      case "has":
        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;
      case "hasNot":
        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;
      case "and":
        return `and(${body})`;
      case "or":
        return `or(${body})`;
      case "chain":
        return `locator(${body})`;
      case "test-id":
        return `getByTestId(${this.toTestIdValue(body)})`;
      case "text":
        return this.toCallWithExact(clazz, "getByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";
    return `Pattern.compile(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;
  }
  toCallWithExact(clazz, method, body, exact) {
    if (isRegExp(body))
      return `${method}(${this.regexToString(body)})`;
    if (exact)
      return `${method}(${this.quote(body)}, new ${clazz}.${toTitleCase(method)}Options().setExact(true))`;
    return `${method}(${this.quote(body)})`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return this.regexToString(body);
    return this.quote(body);
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToString(value);
    return this.quote(value);
  }
  quote(text) {
    return escapeWithQuotes(text, '"');
  }
}
class CSharpLocatorFactory {
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;
        if (options.hasNotText !== void 0)
          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;
        return `Locator(${this.quote(body)})`;
      case "frame-locator":
        return `FrameLocator(${this.quote(body)})`;
      case "frame":
        return `ContentFrame`;
      case "nth":
        return `Nth(${body})`;
      case "first":
        return `First`;
      case "last":
        return `Last`;
      case "visible":
        return `Filter(new() { Visible = ${body === "true" ? "true" : "false"} })`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);
        } else if (typeof options.name === "string") {
          attrs.push(`Name = ${this.quote(options.name)}`);
          if (options.exact)
            attrs.push(`Exact = true`);
        }
        for (const { name, value } of options.attrs)
          attrs.push(`${toTitleCase(name)} = ${typeof value === "string" ? this.quote(value) : value}`);
        const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";
        return `GetByRole(AriaRole.${toTitleCase(body)}${attrString})`;
      case "has-text":
        return `Filter(new() { ${this.toHasText(body)} })`;
      case "has-not-text":
        return `Filter(new() { ${this.toHasNotText(body)} })`;
      case "has":
        return `Filter(new() { Has = ${body} })`;
      case "hasNot":
        return `Filter(new() { HasNot = ${body} })`;
      case "and":
        return `And(${body})`;
      case "or":
        return `Or(${body})`;
      case "chain":
        return `Locator(${body})`;
      case "test-id":
        return `GetByTestId(${this.toTestIdValue(body)})`;
      case "text":
        return this.toCallWithExact("GetByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("GetByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("GetByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact("GetByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";
    return `new Regex(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp(body))
      return `${method}(${this.regexToString(body)})`;
    if (exact)
      return `${method}(${this.quote(body)}, new() { Exact = true })`;
    return `${method}(${this.quote(body)})`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return `HasTextRegex = ${this.regexToString(body)}`;
    return `HasText = ${this.quote(body)}`;
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToString(value);
    return this.quote(value);
  }
  toHasNotText(body) {
    if (isRegExp(body))
      return `HasNotTextRegex = ${this.regexToString(body)}`;
    return `HasNotText = ${this.quote(body)}`;
  }
  quote(text) {
    return escapeWithQuotes(text, '"');
  }
}
class JsonlLocatorFactory {
  generateLocator(base, kind, body, options = {}) {
    return JSON.stringify({
      kind,
      body,
      options
    });
  }
  chainLocators(locators) {
    const objects = locators.map((l) => JSON.parse(l));
    for (let i = 0; i < objects.length - 1; ++i)
      objects[i].next = objects[i + 1];
    return JSON.stringify(objects[0]);
  }
}
const generators = {
  javascript: JavaScriptLocatorFactory,
  python: PythonLocatorFactory,
  java: JavaLocatorFactory,
  csharp: CSharpLocatorFactory,
  jsonl: JsonlLocatorFactory
};
function isRegExp(obj) {
  return obj instanceof RegExp;
}
const CallLogView = ({
  language,
  log
}) => {
  const messagesEndRef = reactExports.useRef(null);
  const [expandOverrides, setExpandOverrides] = reactExports.useState(/* @__PURE__ */ new Map());
  reactExports.useLayoutEffect(() => {
    var _a;
    if (log.find((callLog) => callLog.reveal))
      (_a = messagesEndRef.current) == null ? void 0 : _a.scrollIntoView({ block: "center", inline: "nearest" });
  }, [messagesEndRef, log]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "call-log", style: { flex: "auto" }, children: [
    log.map((callLog) => {
      const expandOverride = expandOverrides.get(callLog.id);
      const isExpanded = typeof expandOverride === "boolean" ? expandOverride : callLog.status !== "done";
      const locator = callLog.params.selector ? asLocator(language, callLog.params.selector) : null;
      let titlePrefix = callLog.title;
      let titleSuffix = "";
      if (callLog.title.startsWith("expect.to") || callLog.title.startsWith("expect.not.to")) {
        titlePrefix = "expect(";
        titleSuffix = `).${callLog.title.substring("expect.".length)}()`;
      } else if (callLog.title.startsWith("locator.")) {
        titlePrefix = "";
        titleSuffix = `.${callLog.title.substring("locator.".length)}()`;
      } else if (locator || callLog.params.url) {
        titlePrefix = callLog.title + "(";
        titleSuffix = ")";
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: clsx("call-log-call", callLog.status), children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "call-log-call-header", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: clsx("codicon", `codicon-chevron-${isExpanded ? "down" : "right"}`), style: { cursor: "pointer" }, onClick: () => {
            const newOverrides = new Map(expandOverrides);
            newOverrides.set(callLog.id, !isExpanded);
            setExpandOverrides(newOverrides);
          } }),
          titlePrefix,
          callLog.params.url ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "call-log-details", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "call-log-url", title: callLog.params.url, children: callLog.params.url }) }) : void 0,
          locator ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "call-log-details", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "call-log-selector", title: `page.${locator}`, children: `page.${locator}` }) }) : void 0,
          titleSuffix,
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: clsx("codicon", iconClass(callLog)) }),
          typeof callLog.duration === "number" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "call-log-time", children: [
            "— ",
            msToString(callLog.duration)
          ] }) : void 0
        ] }),
        (isExpanded ? callLog.messages : []).map((message, i) => {
          return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "call-log-message", children: message.trim() }, i);
        }),
        !!callLog.error && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "call-log-message error", hidden: !isExpanded, children: callLog.error })
      ] }, callLog.id);
    }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ref: messagesEndRef })
  ] });
};
function iconClass(callLog) {
  switch (callLog.status) {
    case "done":
      return "codicon-check";
    case "in-progress":
      return "codicon-clock";
    case "paused":
      return "codicon-debug-pause";
    case "error":
      return "codicon-error";
  }
}
const ALIAS = Symbol.for("yaml.alias");
const DOC = Symbol.for("yaml.document");
const MAP = Symbol.for("yaml.map");
const PAIR = Symbol.for("yaml.pair");
const SCALAR$1 = Symbol.for("yaml.scalar");
const SEQ = Symbol.for("yaml.seq");
const NODE_TYPE = Symbol.for("yaml.node.type");
const isAlias = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === ALIAS;
const isDocument = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === DOC;
const isMap = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === MAP;
const isPair = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === PAIR;
const isScalar$1 = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SCALAR$1;
const isSeq = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SEQ;
function isCollection$1(node) {
  if (node && typeof node === "object")
    switch (node[NODE_TYPE]) {
      case MAP:
      case SEQ:
        return true;
    }
  return false;
}
function isNode(node) {
  if (node && typeof node === "object")
    switch (node[NODE_TYPE]) {
      case ALIAS:
      case MAP:
      case SCALAR$1:
      case SEQ:
        return true;
    }
  return false;
}
const hasAnchor = (node) => (isScalar$1(node) || isCollection$1(node)) && !!node.anchor;
const BREAK$1 = Symbol("break visit");
const SKIP$1 = Symbol("skip children");
const REMOVE$1 = Symbol("remove node");
function visit$1(node, visitor) {
  const visitor_ = initVisitor(visitor);
  if (isDocument(node)) {
    const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));
    if (cd === REMOVE$1)
      node.contents = null;
  } else
    visit_(null, node, visitor_, Object.freeze([]));
}
visit$1.BREAK = BREAK$1;
visit$1.SKIP = SKIP$1;
visit$1.REMOVE = REMOVE$1;
function visit_(key, node, visitor, path) {
  const ctrl = callVisitor(key, node, visitor, path);
  if (isNode(ctrl) || isPair(ctrl)) {
    replaceNode(key, path, ctrl);
    return visit_(key, ctrl, visitor, path);
  }
  if (typeof ctrl !== "symbol") {
    if (isCollection$1(node)) {
      path = Object.freeze(path.concat(node));
      for (let i = 0; i < node.items.length; ++i) {
        const ci = visit_(i, node.items[i], visitor, path);
        if (typeof ci === "number")
          i = ci - 1;
        else if (ci === BREAK$1)
          return BREAK$1;
        else if (ci === REMOVE$1) {
          node.items.splice(i, 1);
          i -= 1;
        }
      }
    } else if (isPair(node)) {
      path = Object.freeze(path.concat(node));
      const ck = visit_("key", node.key, visitor, path);
      if (ck === BREAK$1)
        return BREAK$1;
      else if (ck === REMOVE$1)
        node.key = null;
      const cv = visit_("value", node.value, visitor, path);
      if (cv === BREAK$1)
        return BREAK$1;
      else if (cv === REMOVE$1)
        node.value = null;
    }
  }
  return ctrl;
}
async function visitAsync(node, visitor) {
  const visitor_ = initVisitor(visitor);
  if (isDocument(node)) {
    const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));
    if (cd === REMOVE$1)
      node.contents = null;
  } else
    await visitAsync_(null, node, visitor_, Object.freeze([]));
}
visitAsync.BREAK = BREAK$1;
visitAsync.SKIP = SKIP$1;
visitAsync.REMOVE = REMOVE$1;
async function visitAsync_(key, node, visitor, path) {
  const ctrl = await callVisitor(key, node, visitor, path);
  if (isNode(ctrl) || isPair(ctrl)) {
    replaceNode(key, path, ctrl);
    return visitAsync_(key, ctrl, visitor, path);
  }
  if (typeof ctrl !== "symbol") {
    if (isCollection$1(node)) {
      path = Object.freeze(path.concat(node));
      for (let i = 0; i < node.items.length; ++i) {
        const ci = await visitAsync_(i, node.items[i], visitor, path);
        if (typeof ci === "number")
          i = ci - 1;
        else if (ci === BREAK$1)
          return BREAK$1;
        else if (ci === REMOVE$1) {
          node.items.splice(i, 1);
          i -= 1;
        }
      }
    } else if (isPair(node)) {
      path = Object.freeze(path.concat(node));
      const ck = await visitAsync_("key", node.key, visitor, path);
      if (ck === BREAK$1)
        return BREAK$1;
      else if (ck === REMOVE$1)
        node.key = null;
      const cv = await visitAsync_("value", node.value, visitor, path);
      if (cv === BREAK$1)
        return BREAK$1;
      else if (cv === REMOVE$1)
        node.value = null;
    }
  }
  return ctrl;
}
function initVisitor(visitor) {
  if (typeof visitor === "object" && (visitor.Collection || visitor.Node || visitor.Value)) {
    return Object.assign({
      Alias: visitor.Node,
      Map: visitor.Node,
      Scalar: visitor.Node,
      Seq: visitor.Node
    }, visitor.Value && {
      Map: visitor.Value,
      Scalar: visitor.Value,
      Seq: visitor.Value
    }, visitor.Collection && {
      Map: visitor.Collection,
      Seq: visitor.Collection
    }, visitor);
  }
  return visitor;
}
function callVisitor(key, node, visitor, path) {
  var _a, _b, _c, _d, _e;
  if (typeof visitor === "function")
    return visitor(key, node, path);
  if (isMap(node))
    return (_a = visitor.Map) == null ? void 0 : _a.call(visitor, key, node, path);
  if (isSeq(node))
    return (_b = visitor.Seq) == null ? void 0 : _b.call(visitor, key, node, path);
  if (isPair(node))
    return (_c = visitor.Pair) == null ? void 0 : _c.call(visitor, key, node, path);
  if (isScalar$1(node))
    return (_d = visitor.Scalar) == null ? void 0 : _d.call(visitor, key, node, path);
  if (isAlias(node))
    return (_e = visitor.Alias) == null ? void 0 : _e.call(visitor, key, node, path);
  return void 0;
}
function replaceNode(key, path, node) {
  const parent = path[path.length - 1];
  if (isCollection$1(parent)) {
    parent.items[key] = node;
  } else if (isPair(parent)) {
    if (key === "key")
      parent.key = node;
    else
      parent.value = node;
  } else if (isDocument(parent)) {
    parent.contents = node;
  } else {
    const pt = isAlias(parent) ? "alias" : "scalar";
    throw new Error(`Cannot replace node with ${pt} parent`);
  }
}
const escapeChars = {
  "!": "%21",
  ",": "%2C",
  "[": "%5B",
  "]": "%5D",
  "{": "%7B",
  "}": "%7D"
};
const escapeTagName = (tn) => tn.replace(/[!,[\]{}]/g, (ch) => escapeChars[ch]);
class Directives {
  constructor(yaml, tags) {
    this.docStart = null;
    this.docEnd = false;
    this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
    this.tags = Object.assign({}, Directives.defaultTags, tags);
  }
  clone() {
    const copy2 = new Directives(this.yaml, this.tags);
    copy2.docStart = this.docStart;
    return copy2;
  }
  /**
   * During parsing, get a Directives instance for the current document and
   * update the stream state according to the current version's spec.
   */
  atDocument() {
    const res = new Directives(this.yaml, this.tags);
    switch (this.yaml.version) {
      case "1.1":
        this.atNextDocument = true;
        break;
      case "1.2":
        this.atNextDocument = false;
        this.yaml = {
          explicit: Directives.defaultYaml.explicit,
          version: "1.2"
        };
        this.tags = Object.assign({}, Directives.defaultTags);
        break;
    }
    return res;
  }
  /**
   * @param onError - May be called even if the action was successful
   * @returns `true` on success
   */
  add(line, onError) {
    if (this.atNextDocument) {
      this.yaml = { explicit: Directives.defaultYaml.explicit, version: "1.1" };
      this.tags = Object.assign({}, Directives.defaultTags);
      this.atNextDocument = false;
    }
    const parts = line.trim().split(/[ \t]+/);
    const name = parts.shift();
    switch (name) {
      case "%TAG": {
        if (parts.length !== 2) {
          onError(0, "%TAG directive should contain exactly two parts");
          if (parts.length < 2)
            return false;
        }
        const [handle, prefix] = parts;
        this.tags[handle] = prefix;
        return true;
      }
      case "%YAML": {
        this.yaml.explicit = true;
        if (parts.length !== 1) {
          onError(0, "%YAML directive should contain exactly one part");
          return false;
        }
        const [version] = parts;
        if (version === "1.1" || version === "1.2") {
          this.yaml.version = version;
          return true;
        } else {
          const isValid = /^\d+\.\d+$/.test(version);
          onError(6, `Unsupported YAML version ${version}`, isValid);
          return false;
        }
      }
      default:
        onError(0, `Unknown directive ${name}`, true);
        return false;
    }
  }
  /**
   * Resolves a tag, matching handles to those defined in %TAG directives.
   *
   * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
   *   `'!local'` tag, or `null` if unresolvable.
   */
  tagName(source, onError) {
    if (source === "!")
      return "!";
    if (source[0] !== "!") {
      onError(`Not a valid tag: ${source}`);
      return null;
    }
    if (source[1] === "<") {
      const verbatim = source.slice(2, -1);
      if (verbatim === "!" || verbatim === "!!") {
        onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
        return null;
      }
      if (source[source.length - 1] !== ">")
        onError("Verbatim tags must end with a >");
      return verbatim;
    }
    const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/s);
    if (!suffix)
      onError(`The ${source} tag has no suffix`);
    const prefix = this.tags[handle];
    if (prefix) {
      try {
        return prefix + decodeURIComponent(suffix);
      } catch (error) {
        onError(String(error));
        return null;
      }
    }
    if (handle === "!")
      return source;
    onError(`Could not resolve tag: ${source}`);
    return null;
  }
  /**
   * Given a fully resolved tag, returns its printable string form,
   * taking into account current tag prefixes and defaults.
   */
  tagString(tag) {
    for (const [handle, prefix] of Object.entries(this.tags)) {
      if (tag.startsWith(prefix))
        return handle + escapeTagName(tag.substring(prefix.length));
    }
    return tag[0] === "!" ? tag : `!<${tag}>`;
  }
  toString(doc) {
    const lines = this.yaml.explicit ? [`%YAML ${this.yaml.version || "1.2"}`] : [];
    const tagEntries = Object.entries(this.tags);
    let tagNames;
    if (doc && tagEntries.length > 0 && isNode(doc.contents)) {
      const tags = {};
      visit$1(doc.contents, (_key, node) => {
        if (isNode(node) && node.tag)
          tags[node.tag] = true;
      });
      tagNames = Object.keys(tags);
    } else
      tagNames = [];
    for (const [handle, prefix] of tagEntries) {
      if (handle === "!!" && prefix === "tag:yaml.org,2002:")
        continue;
      if (!doc || tagNames.some((tn) => tn.startsWith(prefix)))
        lines.push(`%TAG ${handle} ${prefix}`);
    }
    return lines.join("\n");
  }
}
Directives.defaultYaml = { explicit: false, version: "1.2" };
Directives.defaultTags = { "!!": "tag:yaml.org,2002:" };
function anchorIsValid(anchor) {
  if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
    const sa = JSON.stringify(anchor);
    const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
    throw new Error(msg);
  }
  return true;
}
function anchorNames(root) {
  const anchors = /* @__PURE__ */ new Set();
  visit$1(root, {
    Value(_key, node) {
      if (node.anchor)
        anchors.add(node.anchor);
    }
  });
  return anchors;
}
function findNewAnchor(prefix, exclude) {
  for (let i = 1; true; ++i) {
    const name = `${prefix}${i}`;
    if (!exclude.has(name))
      return name;
  }
}
function createNodeAnchors(doc, prefix) {
  const aliasObjects = [];
  const sourceObjects = /* @__PURE__ */ new Map();
  let prevAnchors = null;
  return {
    onAnchor: (source) => {
      aliasObjects.push(source);
      if (!prevAnchors)
        prevAnchors = anchorNames(doc);
      const anchor = findNewAnchor(prefix, prevAnchors);
      prevAnchors.add(anchor);
      return anchor;
    },
    /**
     * With circular references, the source node is only resolved after all
     * of its child nodes are. This is why anchors are set only after all of
     * the nodes have been created.
     */
    setAnchors: () => {
      for (const source of aliasObjects) {
        const ref = sourceObjects.get(source);
        if (typeof ref === "object" && ref.anchor && (isScalar$1(ref.node) || isCollection$1(ref.node))) {
          ref.node.anchor = ref.anchor;
        } else {
          const error = new Error("Failed to resolve repeated object (this should not happen)");
          error.source = source;
          throw error;
        }
      }
    },
    sourceObjects
  };
}
function applyReviver(reviver, obj, key, val) {
  if (val && typeof val === "object") {
    if (Array.isArray(val)) {
      for (let i = 0, len = val.length; i < len; ++i) {
        const v0 = val[i];
        const v1 = applyReviver(reviver, val, String(i), v0);
        if (v1 === void 0)
          delete val[i];
        else if (v1 !== v0)
          val[i] = v1;
      }
    } else if (val instanceof Map) {
      for (const k of Array.from(val.keys())) {
        const v0 = val.get(k);
        const v1 = applyReviver(reviver, val, k, v0);
        if (v1 === void 0)
          val.delete(k);
        else if (v1 !== v0)
          val.set(k, v1);
      }
    } else if (val instanceof Set) {
      for (const v0 of Array.from(val)) {
        const v1 = applyReviver(reviver, val, v0, v0);
        if (v1 === void 0)
          val.delete(v0);
        else if (v1 !== v0) {
          val.delete(v0);
          val.add(v1);
        }
      }
    } else {
      for (const [k, v0] of Object.entries(val)) {
        const v1 = applyReviver(reviver, val, k, v0);
        if (v1 === void 0)
          delete val[k];
        else if (v1 !== v0)
          val[k] = v1;
      }
    }
  }
  return reviver.call(obj, key, val);
}
function toJS(value, arg, ctx) {
  if (Array.isArray(value))
    return value.map((v, i) => toJS(v, String(i), ctx));
  if (value && typeof value.toJSON === "function") {
    if (!ctx || !hasAnchor(value))
      return value.toJSON(arg, ctx);
    const data = { aliasCount: 0, count: 1, res: void 0 };
    ctx.anchors.set(value, data);
    ctx.onCreate = (res2) => {
      data.res = res2;
      delete ctx.onCreate;
    };
    const res = value.toJSON(arg, ctx);
    if (ctx.onCreate)
      ctx.onCreate(res);
    return res;
  }
  if (typeof value === "bigint" && !(ctx == null ? void 0 : ctx.keep))
    return Number(value);
  return value;
}
class NodeBase {
  constructor(type) {
    Object.defineProperty(this, NODE_TYPE, { value: type });
  }
  /** Create a copy of this node.  */
  clone() {
    const copy2 = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
    if (this.range)
      copy2.range = this.range.slice();
    return copy2;
  }
  /** A plain JavaScript representation of this node. */
  toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
    if (!isDocument(doc))
      throw new TypeError("A document argument is required");
    const ctx = {
      anchors: /* @__PURE__ */ new Map(),
      doc,
      keep: true,
      mapAsMap: mapAsMap === true,
      mapKeyWarned: false,
      maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100
    };
    const res = toJS(this, "", ctx);
    if (typeof onAnchor === "function")
      for (const { count, res: res2 } of ctx.anchors.values())
        onAnchor(res2, count);
    return typeof reviver === "function" ? applyReviver(reviver, { "": res }, "", res) : res;
  }
}
class Alias extends NodeBase {
  constructor(source) {
    super(ALIAS);
    this.source = source;
    Object.defineProperty(this, "tag", {
      set() {
        throw new Error("Alias nodes cannot have tags");
      }
    });
  }
  /**
   * Resolve the value of this alias within `doc`, finding the last
   * instance of the `source` anchor before this node.
   */
  resolve(doc) {
    let found = void 0;
    visit$1(doc, {
      Node: (_key, node) => {
        if (node === this)
          return visit$1.BREAK;
        if (node.anchor === this.source)
          found = node;
      }
    });
    return found;
  }
  toJSON(_arg, ctx) {
    if (!ctx)
      return { source: this.source };
    const { anchors, doc, maxAliasCount } = ctx;
    const source = this.resolve(doc);
    if (!source) {
      const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
      throw new ReferenceError(msg);
    }
    let data = anchors.get(source);
    if (!data) {
      toJS(source, null, ctx);
      data = anchors.get(source);
    }
    if (!data || data.res === void 0) {
      const msg = "This should not happen: Alias anchor was not resolved?";
      throw new ReferenceError(msg);
    }
    if (maxAliasCount >= 0) {
      data.count += 1;
      if (data.aliasCount === 0)
        data.aliasCount = getAliasCount(doc, source, anchors);
      if (data.count * data.aliasCount > maxAliasCount) {
        const msg = "Excessive alias count indicates a resource exhaustion attack";
        throw new ReferenceError(msg);
      }
    }
    return data.res;
  }
  toString(ctx, _onComment, _onChompKeep) {
    const src = `*${this.source}`;
    if (ctx) {
      anchorIsValid(this.source);
      if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
        const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
        throw new Error(msg);
      }
      if (ctx.implicitKey)
        return `${src} `;
    }
    return src;
  }
}
function getAliasCount(doc, node, anchors) {
  if (isAlias(node)) {
    const source = node.resolve(doc);
    const anchor = anchors && source && anchors.get(source);
    return anchor ? anchor.count * anchor.aliasCount : 0;
  } else if (isCollection$1(node)) {
    let count = 0;
    for (const item of node.items) {
      const c = getAliasCount(doc, item, anchors);
      if (c > count)
        count = c;
    }
    return count;
  } else if (isPair(node)) {
    const kc = getAliasCount(doc, node.key, anchors);
    const vc = getAliasCount(doc, node.value, anchors);
    return Math.max(kc, vc);
  }
  return 1;
}
const isScalarValue = (value) => !value || typeof value !== "function" && typeof value !== "object";
class Scalar extends NodeBase {
  constructor(value) {
    super(SCALAR$1);
    this.value = value;
  }
  toJSON(arg, ctx) {
    return (ctx == null ? void 0 : ctx.keep) ? this.value : toJS(this.value, arg, ctx);
  }
  toString() {
    return String(this.value);
  }
}
Scalar.BLOCK_FOLDED = "BLOCK_FOLDED";
Scalar.BLOCK_LITERAL = "BLOCK_LITERAL";
Scalar.PLAIN = "PLAIN";
Scalar.QUOTE_DOUBLE = "QUOTE_DOUBLE";
Scalar.QUOTE_SINGLE = "QUOTE_SINGLE";
const defaultTagPrefix = "tag:yaml.org,2002:";
function findTagObject(value, tagName, tags) {
  if (tagName) {
    const match = tags.filter((t) => t.tag === tagName);
    const tagObj = match.find((t) => !t.format) ?? match[0];
    if (!tagObj)
      throw new Error(`Tag ${tagName} not found`);
    return tagObj;
  }
  return tags.find((t) => {
    var _a;
    return ((_a = t.identify) == null ? void 0 : _a.call(t, value)) && !t.format;
  });
}
function createNode(value, tagName, ctx) {
  var _a, _b, _c;
  if (isDocument(value))
    value = value.contents;
  if (isNode(value))
    return value;
  if (isPair(value)) {
    const map2 = (_b = (_a = ctx.schema[MAP]).createNode) == null ? void 0 : _b.call(_a, ctx.schema, null, ctx);
    map2.items.push(value);
    return map2;
  }
  if (value instanceof String || value instanceof Number || value instanceof Boolean || typeof BigInt !== "undefined" && value instanceof BigInt) {
    value = value.valueOf();
  }
  const { aliasDuplicateObjects, onAnchor, onTagObj, schema: schema2, sourceObjects } = ctx;
  let ref = void 0;
  if (aliasDuplicateObjects && value && typeof value === "object") {
    ref = sourceObjects.get(value);
    if (ref) {
      if (!ref.anchor)
        ref.anchor = onAnchor(value);
      return new Alias(ref.anchor);
    } else {
      ref = { anchor: null, node: null };
      sourceObjects.set(value, ref);
    }
  }
  if (tagName == null ? void 0 : tagName.startsWith("!!"))
    tagName = defaultTagPrefix + tagName.slice(2);
  let tagObj = findTagObject(value, tagName, schema2.tags);
  if (!tagObj) {
    if (value && typeof value.toJSON === "function") {
      value = value.toJSON();
    }
    if (!value || typeof value !== "object") {
      const node2 = new Scalar(value);
      if (ref)
        ref.node = node2;
      return node2;
    }
    tagObj = value instanceof Map ? schema2[MAP] : Symbol.iterator in Object(value) ? schema2[SEQ] : schema2[MAP];
  }
  if (onTagObj) {
    onTagObj(tagObj);
    delete ctx.onTagObj;
  }
  const node = (tagObj == null ? void 0 : tagObj.createNode) ? tagObj.createNode(ctx.schema, value, ctx) : typeof ((_c = tagObj == null ? void 0 : tagObj.nodeClass) == null ? void 0 : _c.from) === "function" ? tagObj.nodeClass.from(ctx.schema, value, ctx) : new Scalar(value);
  if (tagName)
    node.tag = tagName;
  else if (!tagObj.default)
    node.tag = tagObj.tag;
  if (ref)
    ref.node = node;
  return node;
}
function collectionFromPath(schema2, path, value) {
  let v = value;
  for (let i = path.length - 1; i >= 0; --i) {
    const k = path[i];
    if (typeof k === "number" && Number.isInteger(k) && k >= 0) {
      const a = [];
      a[k] = v;
      v = a;
    } else {
      v = /* @__PURE__ */ new Map([[k, v]]);
    }
  }
  return createNode(v, void 0, {
    aliasDuplicateObjects: false,
    keepUndefined: false,
    onAnchor: () => {
      throw new Error("This should not happen, please report a bug.");
    },
    schema: schema2,
    sourceObjects: /* @__PURE__ */ new Map()
  });
}
const isEmptyPath = (path) => path == null || typeof path === "object" && !!path[Symbol.iterator]().next().done;
class Collection extends NodeBase {
  constructor(type, schema2) {
    super(type);
    Object.defineProperty(this, "schema", {
      value: schema2,
      configurable: true,
      enumerable: false,
      writable: true
    });
  }
  /**
   * Create a copy of this collection.
   *
   * @param schema - If defined, overwrites the original's schema
   */
  clone(schema2) {
    const copy2 = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
    if (schema2)
      copy2.schema = schema2;
    copy2.items = copy2.items.map((it) => isNode(it) || isPair(it) ? it.clone(schema2) : it);
    if (this.range)
      copy2.range = this.range.slice();
    return copy2;
  }
  /**
   * Adds a value to the collection. For `!!map` and `!!omap` the value must
   * be a Pair instance or a `{ key, value }` object, which may not have a key
   * that already exists in the map.
   */
  addIn(path, value) {
    if (isEmptyPath(path))
      this.add(value);
    else {
      const [key, ...rest] = path;
      const node = this.get(key, true);
      if (isCollection$1(node))
        node.addIn(rest, value);
      else if (node === void 0 && this.schema)
        this.set(key, collectionFromPath(this.schema, rest, value));
      else
        throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
  }
  /**
   * Removes a value from the collection.
   * @returns `true` if the item was found and removed.
   */
  deleteIn(path) {
    const [key, ...rest] = path;
    if (rest.length === 0)
      return this.delete(key);
    const node = this.get(key, true);
    if (isCollection$1(node))
      return node.deleteIn(rest);
    else
      throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
  }
  /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */
  getIn(path, keepScalar) {
    const [key, ...rest] = path;
    const node = this.get(key, true);
    if (rest.length === 0)
      return !keepScalar && isScalar$1(node) ? node.value : node;
    else
      return isCollection$1(node) ? node.getIn(rest, keepScalar) : void 0;
  }
  hasAllNullValues(allowScalar) {
    return this.items.every((node) => {
      if (!isPair(node))
        return false;
      const n = node.value;
      return n == null || allowScalar && isScalar$1(n) && n.value == null && !n.commentBefore && !n.comment && !n.tag;
    });
  }
  /**
   * Checks if the collection includes a value with the key `key`.
   */
  hasIn(path) {
    const [key, ...rest] = path;
    if (rest.length === 0)
      return this.has(key);
    const node = this.get(key, true);
    return isCollection$1(node) ? node.hasIn(rest) : false;
  }
  /**
   * Sets a value in this collection. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */
  setIn(path, value) {
    const [key, ...rest] = path;
    if (rest.length === 0) {
      this.set(key, value);
    } else {
      const node = this.get(key, true);
      if (isCollection$1(node))
        node.setIn(rest, value);
      else if (node === void 0 && this.schema)
        this.set(key, collectionFromPath(this.schema, rest, value));
      else
        throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
  }
}
const stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, "#");
function indentComment(comment, indent) {
  if (/^\n+$/.test(comment))
    return comment.substring(1);
  return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
}
const lineComment = (str, indent, comment) => str.endsWith("\n") ? indentComment(comment, indent) : comment.includes("\n") ? "\n" + indentComment(comment, indent) : (str.endsWith(" ") ? "" : " ") + comment;
const FOLD_FLOW = "flow";
const FOLD_BLOCK = "block";
const FOLD_QUOTED = "quoted";
function foldFlowLines(text, indent, mode = "flow", { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {
  if (!lineWidth || lineWidth < 0)
    return text;
  if (lineWidth < minContentWidth)
    minContentWidth = 0;
  const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
  if (text.length <= endStep)
    return text;
  const folds = [];
  const escapedFolds = {};
  let end = lineWidth - indent.length;
  if (typeof indentAtStart === "number") {
    if (indentAtStart > lineWidth - Math.max(2, minContentWidth))
      folds.push(0);
    else
      end = lineWidth - indentAtStart;
  }
  let split = void 0;
  let prev = void 0;
  let overflow = false;
  let i = -1;
  let escStart = -1;
  let escEnd = -1;
  if (mode === FOLD_BLOCK) {
    i = consumeMoreIndentedLines(text, i, indent.length);
    if (i !== -1)
      end = i + endStep;
  }
  for (let ch; ch = text[i += 1]; ) {
    if (mode === FOLD_QUOTED && ch === "\\") {
      escStart = i;
      switch (text[i + 1]) {
        case "x":
          i += 3;
          break;
        case "u":
          i += 5;
          break;
        case "U":
          i += 9;
          break;
        default:
          i += 1;
      }
      escEnd = i;
    }
    if (ch === "\n") {
      if (mode === FOLD_BLOCK)
        i = consumeMoreIndentedLines(text, i, indent.length);
      end = i + indent.length + endStep;
      split = void 0;
    } else {
      if (ch === " " && prev && prev !== " " && prev !== "\n" && prev !== "	") {
        const next = text[i + 1];
        if (next && next !== " " && next !== "\n" && next !== "	")
          split = i;
      }
      if (i >= end) {
        if (split) {
          folds.push(split);
          end = split + endStep;
          split = void 0;
        } else if (mode === FOLD_QUOTED) {
          while (prev === " " || prev === "	") {
            prev = ch;
            ch = text[i += 1];
            overflow = true;
          }
          const j = i > escEnd + 1 ? i - 2 : escStart - 1;
          if (escapedFolds[j])
            return text;
          folds.push(j);
          escapedFolds[j] = true;
          end = j + endStep;
          split = void 0;
        } else {
          overflow = true;
        }
      }
    }
    prev = ch;
  }
  if (overflow && onOverflow)
    onOverflow();
  if (folds.length === 0)
    return text;
  if (onFold)
    onFold();
  let res = text.slice(0, folds[0]);
  for (let i2 = 0; i2 < folds.length; ++i2) {
    const fold = folds[i2];
    const end2 = folds[i2 + 1] || text.length;
    if (fold === 0)
      res = `
${indent}${text.slice(0, end2)}`;
    else {
      if (mode === FOLD_QUOTED && escapedFolds[fold])
        res += `${text[fold]}\\`;
      res += `
${indent}${text.slice(fold + 1, end2)}`;
    }
  }
  return res;
}
function consumeMoreIndentedLines(text, i, indent) {
  let end = i;
  let start = i + 1;
  let ch = text[start];
  while (ch === " " || ch === "	") {
    if (i < start + indent) {
      ch = text[++i];
    } else {
      do {
        ch = text[++i];
      } while (ch && ch !== "\n");
      end = i;
      start = i + 1;
      ch = text[start];
    }
  }
  return end;
}
const getFoldOptions = (ctx, isBlock2) => ({
  indentAtStart: isBlock2 ? ctx.indent.length : ctx.indentAtStart,
  lineWidth: ctx.options.lineWidth,
  minContentWidth: ctx.options.minContentWidth
});
const containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str);
function lineLengthOverLimit(str, lineWidth, indentLength) {
  if (!lineWidth || lineWidth < 0)
    return false;
  const limit = lineWidth - indentLength;
  const strLen = str.length;
  if (strLen <= limit)
    return false;
  for (let i = 0, start = 0; i < strLen; ++i) {
    if (str[i] === "\n") {
      if (i - start > limit)
        return true;
      start = i + 1;
      if (strLen - start <= limit)
        return false;
    }
  }
  return true;
}
function doubleQuotedString(value, ctx) {
  const json = JSON.stringify(value);
  if (ctx.options.doubleQuotedAsJSON)
    return json;
  const { implicitKey } = ctx;
  const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
  const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
  let str = "";
  let start = 0;
  for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
    if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
      str += json.slice(start, i) + "\\ ";
      i += 1;
      start = i;
      ch = "\\";
    }
    if (ch === "\\")
      switch (json[i + 1]) {
        case "u":
          {
            str += json.slice(start, i);
            const code = json.substr(i + 2, 4);
            switch (code) {
              case "0000":
                str += "\\0";
                break;
              case "0007":
                str += "\\a";
                break;
              case "000b":
                str += "\\v";
                break;
              case "001b":
                str += "\\e";
                break;
              case "0085":
                str += "\\N";
                break;
              case "00a0":
                str += "\\_";
                break;
              case "2028":
                str += "\\L";
                break;
              case "2029":
                str += "\\P";
                break;
              default:
                if (code.substr(0, 2) === "00")
                  str += "\\x" + code.substr(2);
                else
                  str += json.substr(i, 6);
            }
            i += 5;
            start = i + 1;
          }
          break;
        case "n":
          if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
            i += 1;
          } else {
            str += json.slice(start, i) + "\n\n";
            while (json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"') {
              str += "\n";
              i += 2;
            }
            str += indent;
            if (json[i + 2] === " ")
              str += "\\";
            i += 1;
            start = i + 1;
          }
          break;
        default:
          i += 1;
      }
  }
  str = start ? str + json.slice(start) : json;
  return implicitKey ? str : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx, false));
}
function singleQuotedString(value, ctx) {
  if (ctx.options.singleQuote === false || ctx.implicitKey && value.includes("\n") || /[ \t]\n|\n[ \t]/.test(value))
    return doubleQuotedString(value, ctx);
  const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
  const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&
${indent}`) + "'";
  return ctx.implicitKey ? res : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx, false));
}
function quotedString(value, ctx) {
  const { singleQuote } = ctx.options;
  let qs;
  if (singleQuote === false)
    qs = doubleQuotedString;
  else {
    const hasDouble = value.includes('"');
    const hasSingle = value.includes("'");
    if (hasDouble && !hasSingle)
      qs = singleQuotedString;
    else if (hasSingle && !hasDouble)
      qs = doubleQuotedString;
    else
      qs = singleQuote ? singleQuotedString : doubleQuotedString;
  }
  return qs(value, ctx);
}
let blockEndNewlines;
try {
  blockEndNewlines = new RegExp("(^|(?<!\n))\n+(?!\n|$)", "g");
} catch {
  blockEndNewlines = /\n+(?!\n|$)/g;
}
function blockString({ comment, type, value }, ctx, onComment, onChompKeep) {
  const { blockQuote, commentString, lineWidth } = ctx.options;
  if (!blockQuote || /\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
    return quotedString(value, ctx);
  }
  const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? "  " : "");
  const literal = blockQuote === "literal" ? true : blockQuote === "folded" || type === Scalar.BLOCK_FOLDED ? false : type === Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, lineWidth, indent.length);
  if (!value)
    return literal ? "|\n" : ">\n";
  let chomp;
  let endStart;
  for (endStart = value.length; endStart > 0; --endStart) {
    const ch = value[endStart - 1];
    if (ch !== "\n" && ch !== "	" && ch !== " ")
      break;
  }
  let end = value.substring(endStart);
  const endNlPos = end.indexOf("\n");
  if (endNlPos === -1) {
    chomp = "-";
  } else if (value === end || endNlPos !== end.length - 1) {
    chomp = "+";
    if (onChompKeep)
      onChompKeep();
  } else {
    chomp = "";
  }
  if (end) {
    value = value.slice(0, -end.length);
    if (end[end.length - 1] === "\n")
      end = end.slice(0, -1);
    end = end.replace(blockEndNewlines, `$&${indent}`);
  }
  let startWithSpace = false;
  let startEnd;
  let startNlPos = -1;
  for (startEnd = 0; startEnd < value.length; ++startEnd) {
    const ch = value[startEnd];
    if (ch === " ")
      startWithSpace = true;
    else if (ch === "\n")
      startNlPos = startEnd;
    else
      break;
  }
  let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
  if (start) {
    value = value.substring(start.length);
    start = start.replace(/\n+/g, `$&${indent}`);
  }
  const indentSize = indent ? "2" : "1";
  let header = (literal ? "|" : ">") + (startWithSpace ? indentSize : "") + chomp;
  if (comment) {
    header += " " + commentString(comment.replace(/ ?[\r\n]+/g, " "));
    if (onComment)
      onComment();
  }
  if (literal) {
    value = value.replace(/\n+/g, `$&${indent}`);
    return `${header}
${indent}${start}${value}${end}`;
  }
  value = value.replace(/\n+/g, "\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${indent}`);
  const body = foldFlowLines(`${start}${value}${end}`, indent, FOLD_BLOCK, getFoldOptions(ctx, true));
  return `${header}
${indent}${body}`;
}
function plainString(item, ctx, onComment, onChompKeep) {
  const { type, value } = item;
  const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;
  if (implicitKey && value.includes("\n") || inFlow && /[[\]{},]/.test(value)) {
    return quotedString(value, ctx);
  }
  if (!value || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
    return implicitKey || inFlow || !value.includes("\n") ? quotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);
  }
  if (!implicitKey && !inFlow && type !== Scalar.PLAIN && value.includes("\n")) {
    return blockString(item, ctx, onComment, onChompKeep);
  }
  if (containsDocumentMarker(value)) {
    if (indent === "") {
      ctx.forceBlockIndent = true;
      return blockString(item, ctx, onComment, onChompKeep);
    } else if (implicitKey && indent === indentStep) {
      return quotedString(value, ctx);
    }
  }
  const str = value.replace(/\n+/g, `$&
${indent}`);
  if (actualString) {
    const test = (tag) => {
      var _a;
      return tag.default && tag.tag !== "tag:yaml.org,2002:str" && ((_a = tag.test) == null ? void 0 : _a.test(str));
    };
    const { compat, tags } = ctx.doc.schema;
    if (tags.some(test) || (compat == null ? void 0 : compat.some(test)))
      return quotedString(value, ctx);
  }
  return implicitKey ? str : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx, false));
}
function stringifyString(item, ctx, onComment, onChompKeep) {
  const { implicitKey, inFlow } = ctx;
  const ss = typeof item.value === "string" ? item : Object.assign({}, item, { value: String(item.value) });
  let { type } = item;
  if (type !== Scalar.QUOTE_DOUBLE) {
    if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value))
      type = Scalar.QUOTE_DOUBLE;
  }
  const _stringify = (_type) => {
    switch (_type) {
      case Scalar.BLOCK_FOLDED:
      case Scalar.BLOCK_LITERAL:
        return implicitKey || inFlow ? quotedString(ss.value, ctx) : blockString(ss, ctx, onComment, onChompKeep);
      case Scalar.QUOTE_DOUBLE:
        return doubleQuotedString(ss.value, ctx);
      case Scalar.QUOTE_SINGLE:
        return singleQuotedString(ss.value, ctx);
      case Scalar.PLAIN:
        return plainString(ss, ctx, onComment, onChompKeep);
      default:
        return null;
    }
  };
  let res = _stringify(type);
  if (res === null) {
    const { defaultKeyType, defaultStringType } = ctx.options;
    const t = implicitKey && defaultKeyType || defaultStringType;
    res = _stringify(t);
    if (res === null)
      throw new Error(`Unsupported default string type ${t}`);
  }
  return res;
}
function createStringifyContext(doc, options) {
  const opt = Object.assign({
    blockQuote: true,
    commentString: stringifyComment,
    defaultKeyType: null,
    defaultStringType: "PLAIN",
    directives: null,
    doubleQuotedAsJSON: false,
    doubleQuotedMinMultiLineLength: 40,
    falseStr: "false",
    flowCollectionPadding: true,
    indentSeq: true,
    lineWidth: 80,
    minContentWidth: 20,
    nullStr: "null",
    simpleKeys: false,
    singleQuote: null,
    trueStr: "true",
    verifyAliasOrder: true
  }, doc.schema.toStringOptions, options);
  let inFlow;
  switch (opt.collectionStyle) {
    case "block":
      inFlow = false;
      break;
    case "flow":
      inFlow = true;
      break;
    default:
      inFlow = null;
  }
  return {
    anchors: /* @__PURE__ */ new Set(),
    doc,
    flowCollectionPadding: opt.flowCollectionPadding ? " " : "",
    indent: "",
    indentStep: typeof opt.indent === "number" ? " ".repeat(opt.indent) : "  ",
    inFlow,
    options: opt
  };
}
function getTagObject(tags, item) {
  var _a;
  if (item.tag) {
    const match = tags.filter((t) => t.tag === item.tag);
    if (match.length > 0)
      return match.find((t) => t.format === item.format) ?? match[0];
  }
  let tagObj = void 0;
  let obj;
  if (isScalar$1(item)) {
    obj = item.value;
    let match = tags.filter((t) => {
      var _a2;
      return (_a2 = t.identify) == null ? void 0 : _a2.call(t, obj);
    });
    if (match.length > 1) {
      const testMatch = match.filter((t) => t.test);
      if (testMatch.length > 0)
        match = testMatch;
    }
    tagObj = match.find((t) => t.format === item.format) ?? match.find((t) => !t.format);
  } else {
    obj = item;
    tagObj = tags.find((t) => t.nodeClass && obj instanceof t.nodeClass);
  }
  if (!tagObj) {
    const name = ((_a = obj == null ? void 0 : obj.constructor) == null ? void 0 : _a.name) ?? typeof obj;
    throw new Error(`Tag not resolved for ${name} value`);
  }
  return tagObj;
}
function stringifyProps(node, tagObj, { anchors, doc }) {
  if (!doc.directives)
    return "";
  const props = [];
  const anchor = (isScalar$1(node) || isCollection$1(node)) && node.anchor;
  if (anchor && anchorIsValid(anchor)) {
    anchors.add(anchor);
    props.push(`&${anchor}`);
  }
  const tag = node.tag ? node.tag : tagObj.default ? null : tagObj.tag;
  if (tag)
    props.push(doc.directives.tagString(tag));
  return props.join(" ");
}
function stringify$2(item, ctx, onComment, onChompKeep) {
  var _a;
  if (isPair(item))
    return item.toString(ctx, onComment, onChompKeep);
  if (isAlias(item)) {
    if (ctx.doc.directives)
      return item.toString(ctx);
    if ((_a = ctx.resolvedAliases) == null ? void 0 : _a.has(item)) {
      throw new TypeError(`Cannot stringify circular structure without alias nodes`);
    } else {
      if (ctx.resolvedAliases)
        ctx.resolvedAliases.add(item);
      else
        ctx.resolvedAliases = /* @__PURE__ */ new Set([item]);
      item = item.resolve(ctx.doc);
    }
  }
  let tagObj = void 0;
  const node = isNode(item) ? item : ctx.doc.createNode(item, { onTagObj: (o) => tagObj = o });
  if (!tagObj)
    tagObj = getTagObject(ctx.doc.schema.tags, node);
  const props = stringifyProps(node, tagObj, ctx);
  if (props.length > 0)
    ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;
  const str = typeof tagObj.stringify === "function" ? tagObj.stringify(node, ctx, onComment, onChompKeep) : isScalar$1(node) ? stringifyString(node, ctx, onComment, onChompKeep) : node.toString(ctx, onComment, onChompKeep);
  if (!props)
    return str;
  return isScalar$1(node) || str[0] === "{" || str[0] === "[" ? `${props} ${str}` : `${props}
${ctx.indent}${str}`;
}
function stringifyPair({ key, value }, ctx, onComment, onChompKeep) {
  const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;
  let keyComment = isNode(key) && key.comment || null;
  if (simpleKeys) {
    if (keyComment) {
      throw new Error("With simple keys, key nodes cannot have comments");
    }
    if (isCollection$1(key) || !isNode(key) && typeof key === "object") {
      const msg = "With simple keys, collection cannot be used as a key value";
      throw new Error(msg);
    }
  }
  let explicitKey = !simpleKeys && (!key || keyComment && value == null && !ctx.inFlow || isCollection$1(key) || (isScalar$1(key) ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL : typeof key === "object"));
  ctx = Object.assign({}, ctx, {
    allNullValues: false,
    implicitKey: !explicitKey && (simpleKeys || !allNullValues),
    indent: indent + indentStep
  });
  let keyCommentDone = false;
  let chompKeep = false;
  let str = stringify$2(key, ctx, () => keyCommentDone = true, () => chompKeep = true);
  if (!explicitKey && !ctx.inFlow && str.length > 1024) {
    if (simpleKeys)
      throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
    explicitKey = true;
  }
  if (ctx.inFlow) {
    if (allNullValues || value == null) {
      if (keyCommentDone && onComment)
        onComment();
      return str === "" ? "?" : explicitKey ? `? ${str}` : str;
    }
  } else if (allNullValues && !simpleKeys || value == null && explicitKey) {
    str = `? ${str}`;
    if (keyComment && !keyCommentDone) {
      str += lineComment(str, ctx.indent, commentString(keyComment));
    } else if (chompKeep && onChompKeep)
      onChompKeep();
    return str;
  }
  if (keyCommentDone)
    keyComment = null;
  if (explicitKey) {
    if (keyComment)
      str += lineComment(str, ctx.indent, commentString(keyComment));
    str = `? ${str}
${indent}:`;
  } else {
    str = `${str}:`;
    if (keyComment)
      str += lineComment(str, ctx.indent, commentString(keyComment));
  }
  let vsb, vcb, valueComment;
  if (isNode(value)) {
    vsb = !!value.spaceBefore;
    vcb = value.commentBefore;
    valueComment = value.comment;
  } else {
    vsb = false;
    vcb = null;
    valueComment = null;
    if (value && typeof value === "object")
      value = doc.createNode(value);
  }
  ctx.implicitKey = false;
  if (!explicitKey && !keyComment && isScalar$1(value))
    ctx.indentAtStart = str.length + 1;
  chompKeep = false;
  if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow && !explicitKey && isSeq(value) && !value.flow && !value.tag && !value.anchor) {
    ctx.indent = ctx.indent.substring(2);
  }
  let valueCommentDone = false;
  const valueStr = stringify$2(value, ctx, () => valueCommentDone = true, () => chompKeep = true);
  let ws = " ";
  if (keyComment || vsb || vcb) {
    ws = vsb ? "\n" : "";
    if (vcb) {
      const cs = commentString(vcb);
      ws += `
${indentComment(cs, ctx.indent)}`;
    }
    if (valueStr === "" && !ctx.inFlow) {
      if (ws === "\n")
        ws = "\n\n";
    } else {
      ws += `
${ctx.indent}`;
    }
  } else if (!explicitKey && isCollection$1(value)) {
    const vs0 = valueStr[0];
    const nl0 = valueStr.indexOf("\n");
    const hasNewline = nl0 !== -1;
    const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;
    if (hasNewline || !flow) {
      let hasPropsLine = false;
      if (hasNewline && (vs0 === "&" || vs0 === "!")) {
        let sp0 = valueStr.indexOf(" ");
        if (vs0 === "&" && sp0 !== -1 && sp0 < nl0 && valueStr[sp0 + 1] === "!") {
          sp0 = valueStr.indexOf(" ", sp0 + 1);
        }
        if (sp0 === -1 || nl0 < sp0)
          hasPropsLine = true;
      }
      if (!hasPropsLine)
        ws = `
${ctx.indent}`;
    }
  } else if (valueStr === "" || valueStr[0] === "\n") {
    ws = "";
  }
  str += ws + valueStr;
  if (ctx.inFlow) {
    if (valueCommentDone && onComment)
      onComment();
  } else if (valueComment && !valueCommentDone) {
    str += lineComment(str, ctx.indent, commentString(valueComment));
  } else if (chompKeep && onChompKeep) {
    onChompKeep();
  }
  return str;
}
function warn(logLevel, warning) {
  if (logLevel === "debug" || logLevel === "warn") {
    if (typeof process !== "undefined" && process.emitWarning)
      process.emitWarning(warning);
    else
      console.warn(warning);
  }
}
const MERGE_KEY = "<<";
const merge = {
  identify: (value) => value === MERGE_KEY || typeof value === "symbol" && value.description === MERGE_KEY,
  default: "key",
  tag: "tag:yaml.org,2002:merge",
  test: /^<<$/,
  resolve: () => Object.assign(new Scalar(Symbol(MERGE_KEY)), {
    addToJSMap: addMergeToJSMap
  }),
  stringify: () => MERGE_KEY
};
const isMergeKey = (ctx, key) => (merge.identify(key) || isScalar$1(key) && (!key.type || key.type === Scalar.PLAIN) && merge.identify(key.value)) && (ctx == null ? void 0 : ctx.doc.schema.tags.some((tag) => tag.tag === merge.tag && tag.default));
function addMergeToJSMap(ctx, map2, value) {
  value = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;
  if (isSeq(value))
    for (const it of value.items)
      mergeValue(ctx, map2, it);
  else if (Array.isArray(value))
    for (const it of value)
      mergeValue(ctx, map2, it);
  else
    mergeValue(ctx, map2, value);
}
function mergeValue(ctx, map2, value) {
  const source = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;
  if (!isMap(source))
    throw new Error("Merge sources must be maps or map aliases");
  const srcMap = source.toJSON(null, ctx, Map);
  for (const [key, value2] of srcMap) {
    if (map2 instanceof Map) {
      if (!map2.has(key))
        map2.set(key, value2);
    } else if (map2 instanceof Set) {
      map2.add(key);
    } else if (!Object.prototype.hasOwnProperty.call(map2, key)) {
      Object.defineProperty(map2, key, {
        value: value2,
        writable: true,
        enumerable: true,
        configurable: true
      });
    }
  }
  return map2;
}
function addPairToJSMap(ctx, map2, { key, value }) {
  if (isNode(key) && key.addToJSMap)
    key.addToJSMap(ctx, map2, value);
  else if (isMergeKey(ctx, key))
    addMergeToJSMap(ctx, map2, value);
  else {
    const jsKey = toJS(key, "", ctx);
    if (map2 instanceof Map) {
      map2.set(jsKey, toJS(value, jsKey, ctx));
    } else if (map2 instanceof Set) {
      map2.add(jsKey);
    } else {
      const stringKey = stringifyKey(key, jsKey, ctx);
      const jsValue = toJS(value, stringKey, ctx);
      if (stringKey in map2)
        Object.defineProperty(map2, stringKey, {
          value: jsValue,
          writable: true,
          enumerable: true,
          configurable: true
        });
      else
        map2[stringKey] = jsValue;
    }
  }
  return map2;
}
function stringifyKey(key, jsKey, ctx) {
  if (jsKey === null)
    return "";
  if (typeof jsKey !== "object")
    return String(jsKey);
  if (isNode(key) && (ctx == null ? void 0 : ctx.doc)) {
    const strCtx = createStringifyContext(ctx.doc, {});
    strCtx.anchors = /* @__PURE__ */ new Set();
    for (const node of ctx.anchors.keys())
      strCtx.anchors.add(node.anchor);
    strCtx.inFlow = true;
    strCtx.inStringifyKey = true;
    const strKey = key.toString(strCtx);
    if (!ctx.mapKeyWarned) {
      let jsonStr = JSON.stringify(strKey);
      if (jsonStr.length > 40)
        jsonStr = jsonStr.substring(0, 36) + '..."';
      warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
      ctx.mapKeyWarned = true;
    }
    return strKey;
  }
  return JSON.stringify(jsKey);
}
function createPair(key, value, ctx) {
  const k = createNode(key, void 0, ctx);
  const v = createNode(value, void 0, ctx);
  return new Pair(k, v);
}
class Pair {
  constructor(key, value = null) {
    Object.defineProperty(this, NODE_TYPE, { value: PAIR });
    this.key = key;
    this.value = value;
  }
  clone(schema2) {
    let { key, value } = this;
    if (isNode(key))
      key = key.clone(schema2);
    if (isNode(value))
      value = value.clone(schema2);
    return new Pair(key, value);
  }
  toJSON(_, ctx) {
    const pair = (ctx == null ? void 0 : ctx.mapAsMap) ? /* @__PURE__ */ new Map() : {};
    return addPairToJSMap(ctx, pair, this);
  }
  toString(ctx, onComment, onChompKeep) {
    return (ctx == null ? void 0 : ctx.doc) ? stringifyPair(this, ctx, onComment, onChompKeep) : JSON.stringify(this);
  }
}
function stringifyCollection(collection, ctx, options) {
  const flow = ctx.inFlow ?? collection.flow;
  const stringify2 = flow ? stringifyFlowCollection : stringifyBlockCollection;
  return stringify2(collection, ctx, options);
}
function stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {
  const { indent, options: { commentString } } = ctx;
  const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });
  let chompKeep = false;
  const lines = [];
  for (let i = 0; i < items.length; ++i) {
    const item = items[i];
    let comment2 = null;
    if (isNode(item)) {
      if (!chompKeep && item.spaceBefore)
        lines.push("");
      addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
      if (item.comment)
        comment2 = item.comment;
    } else if (isPair(item)) {
      const ik = isNode(item.key) ? item.key : null;
      if (ik) {
        if (!chompKeep && ik.spaceBefore)
          lines.push("");
        addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
      }
    }
    chompKeep = false;
    let str2 = stringify$2(item, itemCtx, () => comment2 = null, () => chompKeep = true);
    if (comment2)
      str2 += lineComment(str2, itemIndent, commentString(comment2));
    if (chompKeep && comment2)
      chompKeep = false;
    lines.push(blockItemPrefix + str2);
  }
  let str;
  if (lines.length === 0) {
    str = flowChars.start + flowChars.end;
  } else {
    str = lines[0];
    for (let i = 1; i < lines.length; ++i) {
      const line = lines[i];
      str += line ? `
${indent}${line}` : "\n";
    }
  }
  if (comment) {
    str += "\n" + indentComment(commentString(comment), indent);
    if (onComment)
      onComment();
  } else if (chompKeep && onChompKeep)
    onChompKeep();
  return str;
}
function stringifyFlowCollection({ items }, ctx, { flowChars, itemIndent }) {
  const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;
  itemIndent += indentStep;
  const itemCtx = Object.assign({}, ctx, {
    indent: itemIndent,
    inFlow: true,
    type: null
  });
  let reqNewline = false;
  let linesAtValue = 0;
  const lines = [];
  for (let i = 0; i < items.length; ++i) {
    const item = items[i];
    let comment = null;
    if (isNode(item)) {
      if (item.spaceBefore)
        lines.push("");
      addCommentBefore(ctx, lines, item.commentBefore, false);
      if (item.comment)
        comment = item.comment;
    } else if (isPair(item)) {
      const ik = isNode(item.key) ? item.key : null;
      if (ik) {
        if (ik.spaceBefore)
          lines.push("");
        addCommentBefore(ctx, lines, ik.commentBefore, false);
        if (ik.comment)
          reqNewline = true;
      }
      const iv = isNode(item.value) ? item.value : null;
      if (iv) {
        if (iv.comment)
          comment = iv.comment;
        if (iv.commentBefore)
          reqNewline = true;
      } else if (item.value == null && (ik == null ? void 0 : ik.comment)) {
        comment = ik.comment;
      }
    }
    if (comment)
      reqNewline = true;
    let str = stringify$2(item, itemCtx, () => comment = null);
    if (i < items.length - 1)
      str += ",";
    if (comment)
      str += lineComment(str, itemIndent, commentString(comment));
    if (!reqNewline && (lines.length > linesAtValue || str.includes("\n")))
      reqNewline = true;
    lines.push(str);
    linesAtValue = lines.length;
  }
  const { start, end } = flowChars;
  if (lines.length === 0) {
    return start + end;
  } else {
    if (!reqNewline) {
      const len = lines.reduce((sum, line) => sum + line.length + 2, 2);
      reqNewline = ctx.options.lineWidth > 0 && len > ctx.options.lineWidth;
    }
    if (reqNewline) {
      let str = start;
      for (const line of lines)
        str += line ? `
${indentStep}${indent}${line}` : "\n";
      return `${str}
${indent}${end}`;
    } else {
      return `${start}${fcPadding}${lines.join(" ")}${fcPadding}${end}`;
    }
  }
}
function addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {
  if (comment && chompKeep)
    comment = comment.replace(/^\n+/, "");
  if (comment) {
    const ic = indentComment(commentString(comment), indent);
    lines.push(ic.trimStart());
  }
}
function findPair(items, key) {
  const k = isScalar$1(key) ? key.value : key;
  for (const it of items) {
    if (isPair(it)) {
      if (it.key === key || it.key === k)
        return it;
      if (isScalar$1(it.key) && it.key.value === k)
        return it;
    }
  }
  return void 0;
}
class YAMLMap extends Collection {
  static get tagName() {
    return "tag:yaml.org,2002:map";
  }
  constructor(schema2) {
    super(MAP, schema2);
    this.items = [];
  }
  /**
   * A generic collection parsing method that can be extended
   * to other node classes that inherit from YAMLMap
   */
  static from(schema2, obj, ctx) {
    const { keepUndefined, replacer } = ctx;
    const map2 = new this(schema2);
    const add = (key, value) => {
      if (typeof replacer === "function")
        value = replacer.call(obj, key, value);
      else if (Array.isArray(replacer) && !replacer.includes(key))
        return;
      if (value !== void 0 || keepUndefined)
        map2.items.push(createPair(key, value, ctx));
    };
    if (obj instanceof Map) {
      for (const [key, value] of obj)
        add(key, value);
    } else if (obj && typeof obj === "object") {
      for (const key of Object.keys(obj))
        add(key, obj[key]);
    }
    if (typeof schema2.sortMapEntries === "function") {
      map2.items.sort(schema2.sortMapEntries);
    }
    return map2;
  }
  /**
   * Adds a value to the collection.
   *
   * @param overwrite - If not set `true`, using a key that is already in the
   *   collection will throw. Otherwise, overwrites the previous value.
   */
  add(pair, overwrite) {
    var _a;
    let _pair;
    if (isPair(pair))
      _pair = pair;
    else if (!pair || typeof pair !== "object" || !("key" in pair)) {
      _pair = new Pair(pair, pair == null ? void 0 : pair.value);
    } else
      _pair = new Pair(pair.key, pair.value);
    const prev = findPair(this.items, _pair.key);
    const sortEntries = (_a = this.schema) == null ? void 0 : _a.sortMapEntries;
    if (prev) {
      if (!overwrite)
        throw new Error(`Key ${_pair.key} already set`);
      if (isScalar$1(prev.value) && isScalarValue(_pair.value))
        prev.value.value = _pair.value;
      else
        prev.value = _pair.value;
    } else if (sortEntries) {
      const i = this.items.findIndex((item) => sortEntries(_pair, item) < 0);
      if (i === -1)
        this.items.push(_pair);
      else
        this.items.splice(i, 0, _pair);
    } else {
      this.items.push(_pair);
    }
  }
  delete(key) {
    const it = findPair(this.items, key);
    if (!it)
      return false;
    const del = this.items.splice(this.items.indexOf(it), 1);
    return del.length > 0;
  }
  get(key, keepScalar) {
    const it = findPair(this.items, key);
    const node = it == null ? void 0 : it.value;
    return (!keepScalar && isScalar$1(node) ? node.value : node) ?? void 0;
  }
  has(key) {
    return !!findPair(this.items, key);
  }
  set(key, value) {
    this.add(new Pair(key, value), true);
  }
  /**
   * @param ctx - Conversion context, originally set in Document#toJS()
   * @param {Class} Type - If set, forces the returned collection type
   * @returns Instance of Type, Map, or Object
   */
  toJSON(_, ctx, Type) {
    const map2 = Type ? new Type() : (ctx == null ? void 0 : ctx.mapAsMap) ? /* @__PURE__ */ new Map() : {};
    if (ctx == null ? void 0 : ctx.onCreate)
      ctx.onCreate(map2);
    for (const item of this.items)
      addPairToJSMap(ctx, map2, item);
    return map2;
  }
  toString(ctx, onComment, onChompKeep) {
    if (!ctx)
      return JSON.stringify(this);
    for (const item of this.items) {
      if (!isPair(item))
        throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
    }
    if (!ctx.allNullValues && this.hasAllNullValues(false))
      ctx = Object.assign({}, ctx, { allNullValues: true });
    return stringifyCollection(this, ctx, {
      blockItemPrefix: "",
      flowChars: { start: "{", end: "}" },
      itemIndent: ctx.indent || "",
      onChompKeep,
      onComment
    });
  }
}
const map = {
  collection: "map",
  default: true,
  nodeClass: YAMLMap,
  tag: "tag:yaml.org,2002:map",
  resolve(map2, onError) {
    if (!isMap(map2))
      onError("Expected a mapping for this tag");
    return map2;
  },
  createNode: (schema2, obj, ctx) => YAMLMap.from(schema2, obj, ctx)
};
class YAMLSeq extends Collection {
  static get tagName() {
    return "tag:yaml.org,2002:seq";
  }
  constructor(schema2) {
    super(SEQ, schema2);
    this.items = [];
  }
  add(value) {
    this.items.push(value);
  }
  /**
   * Removes a value from the collection.
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   *
   * @returns `true` if the item was found and removed.
   */
  delete(key) {
    const idx = asItemIndex(key);
    if (typeof idx !== "number")
      return false;
    const del = this.items.splice(idx, 1);
    return del.length > 0;
  }
  get(key, keepScalar) {
    const idx = asItemIndex(key);
    if (typeof idx !== "number")
      return void 0;
    const it = this.items[idx];
    return !keepScalar && isScalar$1(it) ? it.value : it;
  }
  /**
   * Checks if the collection includes a value with the key `key`.
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   */
  has(key) {
    const idx = asItemIndex(key);
    return typeof idx === "number" && idx < this.items.length;
  }
  /**
   * Sets a value in this collection. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   *
   * If `key` does not contain a representation of an integer, this will throw.
   * It may be wrapped in a `Scalar`.
   */
  set(key, value) {
    const idx = asItemIndex(key);
    if (typeof idx !== "number")
      throw new Error(`Expected a valid index, not ${key}.`);
    const prev = this.items[idx];
    if (isScalar$1(prev) && isScalarValue(value))
      prev.value = value;
    else
      this.items[idx] = value;
  }
  toJSON(_, ctx) {
    const seq2 = [];
    if (ctx == null ? void 0 : ctx.onCreate)
      ctx.onCreate(seq2);
    let i = 0;
    for (const item of this.items)
      seq2.push(toJS(item, String(i++), ctx));
    return seq2;
  }
  toString(ctx, onComment, onChompKeep) {
    if (!ctx)
      return JSON.stringify(this);
    return stringifyCollection(this, ctx, {
      blockItemPrefix: "- ",
      flowChars: { start: "[", end: "]" },
      itemIndent: (ctx.indent || "") + "  ",
      onChompKeep,
      onComment
    });
  }
  static from(schema2, obj, ctx) {
    const { replacer } = ctx;
    const seq2 = new this(schema2);
    if (obj && Symbol.iterator in Object(obj)) {
      let i = 0;
      for (let it of obj) {
        if (typeof replacer === "function") {
          const key = obj instanceof Set ? it : String(i++);
          it = replacer.call(obj, key, it);
        }
        seq2.items.push(createNode(it, void 0, ctx));
      }
    }
    return seq2;
  }
}
function asItemIndex(key) {
  let idx = isScalar$1(key) ? key.value : key;
  if (idx && typeof idx === "string")
    idx = Number(idx);
  return typeof idx === "number" && Number.isInteger(idx) && idx >= 0 ? idx : null;
}
const seq = {
  collection: "seq",
  default: true,
  nodeClass: YAMLSeq,
  tag: "tag:yaml.org,2002:seq",
  resolve(seq2, onError) {
    if (!isSeq(seq2))
      onError("Expected a sequence for this tag");
    return seq2;
  },
  createNode: (schema2, obj, ctx) => YAMLSeq.from(schema2, obj, ctx)
};
const string = {
  identify: (value) => typeof value === "string",
  default: true,
  tag: "tag:yaml.org,2002:str",
  resolve: (str) => str,
  stringify(item, ctx, onComment, onChompKeep) {
    ctx = Object.assign({ actualString: true }, ctx);
    return stringifyString(item, ctx, onComment, onChompKeep);
  }
};
const nullTag = {
  identify: (value) => value == null,
  createNode: () => new Scalar(null),
  default: true,
  tag: "tag:yaml.org,2002:null",
  test: /^(?:~|[Nn]ull|NULL)?$/,
  resolve: () => new Scalar(null),
  stringify: ({ source }, ctx) => typeof source === "string" && nullTag.test.test(source) ? source : ctx.options.nullStr
};
const boolTag = {
  identify: (value) => typeof value === "boolean",
  default: true,
  tag: "tag:yaml.org,2002:bool",
  test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
  resolve: (str) => new Scalar(str[0] === "t" || str[0] === "T"),
  stringify({ source, value }, ctx) {
    if (source && boolTag.test.test(source)) {
      const sv = source[0] === "t" || source[0] === "T";
      if (value === sv)
        return source;
    }
    return value ? ctx.options.trueStr : ctx.options.falseStr;
  }
};
function stringifyNumber({ format, minFractionDigits, tag, value }) {
  if (typeof value === "bigint")
    return String(value);
  const num = typeof value === "number" ? value : Number(value);
  if (!isFinite(num))
    return isNaN(num) ? ".nan" : num < 0 ? "-.inf" : ".inf";
  let n = JSON.stringify(value);
  if (!format && minFractionDigits && (!tag || tag === "tag:yaml.org,2002:float") && /^\d/.test(n)) {
    let i = n.indexOf(".");
    if (i < 0) {
      i = n.length;
      n += ".";
    }
    let d = minFractionDigits - (n.length - i - 1);
    while (d-- > 0)
      n += "0";
  }
  return n;
}
const floatNaN$1 = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
  resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
  stringify: stringifyNumber
};
const floatExp$1 = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  format: "EXP",
  test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
  resolve: (str) => parseFloat(str),
  stringify(node) {
    const num = Number(node.value);
    return isFinite(num) ? num.toExponential() : stringifyNumber(node);
  }
};
const float$1 = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
  resolve(str) {
    const node = new Scalar(parseFloat(str));
    const dot = str.indexOf(".");
    if (dot !== -1 && str[str.length - 1] === "0")
      node.minFractionDigits = str.length - dot - 1;
    return node;
  },
  stringify: stringifyNumber
};
const intIdentify$2 = (value) => typeof value === "bigint" || Number.isInteger(value);
const intResolve$1 = (str, offset, radix, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);
function intStringify$1(node, radix, prefix) {
  const { value } = node;
  if (intIdentify$2(value) && value >= 0)
    return prefix + value.toString(radix);
  return stringifyNumber(node);
}
const intOct$1 = {
  identify: (value) => intIdentify$2(value) && value >= 0,
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "OCT",
  test: /^0o[0-7]+$/,
  resolve: (str, _onError, opt) => intResolve$1(str, 2, 8, opt),
  stringify: (node) => intStringify$1(node, 8, "0o")
};
const int$1 = {
  identify: intIdentify$2,
  default: true,
  tag: "tag:yaml.org,2002:int",
  test: /^[-+]?[0-9]+$/,
  resolve: (str, _onError, opt) => intResolve$1(str, 0, 10, opt),
  stringify: stringifyNumber
};
const intHex$1 = {
  identify: (value) => intIdentify$2(value) && value >= 0,
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "HEX",
  test: /^0x[0-9a-fA-F]+$/,
  resolve: (str, _onError, opt) => intResolve$1(str, 2, 16, opt),
  stringify: (node) => intStringify$1(node, 16, "0x")
};
const schema$2 = [
  map,
  seq,
  string,
  nullTag,
  boolTag,
  intOct$1,
  int$1,
  intHex$1,
  floatNaN$1,
  floatExp$1,
  float$1
];
function intIdentify$1(value) {
  return typeof value === "bigint" || Number.isInteger(value);
}
const stringifyJSON = ({ value }) => JSON.stringify(value);
const jsonScalars = [
  {
    identify: (value) => typeof value === "string",
    default: true,
    tag: "tag:yaml.org,2002:str",
    resolve: (str) => str,
    stringify: stringifyJSON
  },
  {
    identify: (value) => value == null,
    createNode: () => new Scalar(null),
    default: true,
    tag: "tag:yaml.org,2002:null",
    test: /^null$/,
    resolve: () => null,
    stringify: stringifyJSON
  },
  {
    identify: (value) => typeof value === "boolean",
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^true|false$/,
    resolve: (str) => str === "true",
    stringify: stringifyJSON
  },
  {
    identify: intIdentify$1,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^-?(?:0|[1-9][0-9]*)$/,
    resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),
    stringify: ({ value }) => intIdentify$1(value) ? value.toString() : JSON.stringify(value)
  },
  {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
    resolve: (str) => parseFloat(str),
    stringify: stringifyJSON
  }
];
const jsonError = {
  default: true,
  tag: "",
  test: /^/,
  resolve(str, onError) {
    onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
    return str;
  }
};
const schema$1 = [map, seq].concat(jsonScalars, jsonError);
const binary = {
  identify: (value) => value instanceof Uint8Array,
  // Buffer inherits from Uint8Array
  default: false,
  tag: "tag:yaml.org,2002:binary",
  /**
   * Returns a Buffer in node and an Uint8Array in browsers
   *
   * To use the resulting buffer as an image, you'll want to do something like:
   *
   *   const blob = new Blob([buffer], { type: 'image/jpeg' })
   *   document.querySelector('#photo').src = URL.createObjectURL(blob)
   */
  resolve(src, onError) {
    if (typeof Buffer === "function") {
      return Buffer.from(src, "base64");
    } else if (typeof atob === "function") {
      const str = atob(src.replace(/[\n\r]/g, ""));
      const buffer = new Uint8Array(str.length);
      for (let i = 0; i < str.length; ++i)
        buffer[i] = str.charCodeAt(i);
      return buffer;
    } else {
      onError("This environment does not support reading binary tags; either Buffer or atob is required");
      return src;
    }
  },
  stringify({ comment, type, value }, ctx, onComment, onChompKeep) {
    const buf = value;
    let str;
    if (typeof Buffer === "function") {
      str = buf instanceof Buffer ? buf.toString("base64") : Buffer.from(buf.buffer).toString("base64");
    } else if (typeof btoa === "function") {
      let s = "";
      for (let i = 0; i < buf.length; ++i)
        s += String.fromCharCode(buf[i]);
      str = btoa(s);
    } else {
      throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
    }
    if (!type)
      type = Scalar.BLOCK_LITERAL;
    if (type !== Scalar.QUOTE_DOUBLE) {
      const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
      const n = Math.ceil(str.length / lineWidth);
      const lines = new Array(n);
      for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {
        lines[i] = str.substr(o, lineWidth);
      }
      str = lines.join(type === Scalar.BLOCK_LITERAL ? "\n" : " ");
    }
    return stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);
  }
};
function resolvePairs(seq2, onError) {
  if (isSeq(seq2)) {
    for (let i = 0; i < seq2.items.length; ++i) {
      let item = seq2.items[i];
      if (isPair(item))
        continue;
      else if (isMap(item)) {
        if (item.items.length > 1)
          onError("Each pair must have its own sequence indicator");
        const pair = item.items[0] || new Pair(new Scalar(null));
        if (item.commentBefore)
          pair.key.commentBefore = pair.key.commentBefore ? `${item.commentBefore}
${pair.key.commentBefore}` : item.commentBefore;
        if (item.comment) {
          const cn = pair.value ?? pair.key;
          cn.comment = cn.comment ? `${item.comment}
${cn.comment}` : item.comment;
        }
        item = pair;
      }
      seq2.items[i] = isPair(item) ? item : new Pair(item);
    }
  } else
    onError("Expected a sequence for this tag");
  return seq2;
}
function createPairs(schema2, iterable, ctx) {
  const { replacer } = ctx;
  const pairs2 = new YAMLSeq(schema2);
  pairs2.tag = "tag:yaml.org,2002:pairs";
  let i = 0;
  if (iterable && Symbol.iterator in Object(iterable))
    for (let it of iterable) {
      if (typeof replacer === "function")
        it = replacer.call(iterable, String(i++), it);
      let key, value;
      if (Array.isArray(it)) {
        if (it.length === 2) {
          key = it[0];
          value = it[1];
        } else
          throw new TypeError(`Expected [key, value] tuple: ${it}`);
      } else if (it && it instanceof Object) {
        const keys = Object.keys(it);
        if (keys.length === 1) {
          key = keys[0];
          value = it[key];
        } else {
          throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);
        }
      } else {
        key = it;
      }
      pairs2.items.push(createPair(key, value, ctx));
    }
  return pairs2;
}
const pairs = {
  collection: "seq",
  default: false,
  tag: "tag:yaml.org,2002:pairs",
  resolve: resolvePairs,
  createNode: createPairs
};
class YAMLOMap extends YAMLSeq {
  constructor() {
    super();
    this.add = YAMLMap.prototype.add.bind(this);
    this.delete = YAMLMap.prototype.delete.bind(this);
    this.get = YAMLMap.prototype.get.bind(this);
    this.has = YAMLMap.prototype.has.bind(this);
    this.set = YAMLMap.prototype.set.bind(this);
    this.tag = YAMLOMap.tag;
  }
  /**
   * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
   * but TypeScript won't allow widening the signature of a child method.
   */
  toJSON(_, ctx) {
    if (!ctx)
      return super.toJSON(_);
    const map2 = /* @__PURE__ */ new Map();
    if (ctx == null ? void 0 : ctx.onCreate)
      ctx.onCreate(map2);
    for (const pair of this.items) {
      let key, value;
      if (isPair(pair)) {
        key = toJS(pair.key, "", ctx);
        value = toJS(pair.value, key, ctx);
      } else {
        key = toJS(pair, "", ctx);
      }
      if (map2.has(key))
        throw new Error("Ordered maps must not include duplicate keys");
      map2.set(key, value);
    }
    return map2;
  }
  static from(schema2, iterable, ctx) {
    const pairs2 = createPairs(schema2, iterable, ctx);
    const omap2 = new this();
    omap2.items = pairs2.items;
    return omap2;
  }
}
YAMLOMap.tag = "tag:yaml.org,2002:omap";
const omap = {
  collection: "seq",
  identify: (value) => value instanceof Map,
  nodeClass: YAMLOMap,
  default: false,
  tag: "tag:yaml.org,2002:omap",
  resolve(seq2, onError) {
    const pairs2 = resolvePairs(seq2, onError);
    const seenKeys = [];
    for (const { key } of pairs2.items) {
      if (isScalar$1(key)) {
        if (seenKeys.includes(key.value)) {
          onError(`Ordered maps must not include duplicate keys: ${key.value}`);
        } else {
          seenKeys.push(key.value);
        }
      }
    }
    return Object.assign(new YAMLOMap(), pairs2);
  },
  createNode: (schema2, iterable, ctx) => YAMLOMap.from(schema2, iterable, ctx)
};
function boolStringify({ value, source }, ctx) {
  const boolObj = value ? trueTag : falseTag;
  if (source && boolObj.test.test(source))
    return source;
  return value ? ctx.options.trueStr : ctx.options.falseStr;
}
const trueTag = {
  identify: (value) => value === true,
  default: true,
  tag: "tag:yaml.org,2002:bool",
  test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
  resolve: () => new Scalar(true),
  stringify: boolStringify
};
const falseTag = {
  identify: (value) => value === false,
  default: true,
  tag: "tag:yaml.org,2002:bool",
  test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,
  resolve: () => new Scalar(false),
  stringify: boolStringify
};
const floatNaN = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
  resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
  stringify: stringifyNumber
};
const floatExp = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  format: "EXP",
  test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
  resolve: (str) => parseFloat(str.replace(/_/g, "")),
  stringify(node) {
    const num = Number(node.value);
    return isFinite(num) ? num.toExponential() : stringifyNumber(node);
  }
};
const float = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
  resolve(str) {
    const node = new Scalar(parseFloat(str.replace(/_/g, "")));
    const dot = str.indexOf(".");
    if (dot !== -1) {
      const f = str.substring(dot + 1).replace(/_/g, "");
      if (f[f.length - 1] === "0")
        node.minFractionDigits = f.length;
    }
    return node;
  },
  stringify: stringifyNumber
};
const intIdentify = (value) => typeof value === "bigint" || Number.isInteger(value);
function intResolve(str, offset, radix, { intAsBigInt }) {
  const sign = str[0];
  if (sign === "-" || sign === "+")
    offset += 1;
  str = str.substring(offset).replace(/_/g, "");
  if (intAsBigInt) {
    switch (radix) {
      case 2:
        str = `0b${str}`;
        break;
      case 8:
        str = `0o${str}`;
        break;
      case 16:
        str = `0x${str}`;
        break;
    }
    const n2 = BigInt(str);
    return sign === "-" ? BigInt(-1) * n2 : n2;
  }
  const n = parseInt(str, radix);
  return sign === "-" ? -1 * n : n;
}
function intStringify(node, radix, prefix) {
  const { value } = node;
  if (intIdentify(value)) {
    const str = value.toString(radix);
    return value < 0 ? "-" + prefix + str.substr(1) : prefix + str;
  }
  return stringifyNumber(node);
}
const intBin = {
  identify: intIdentify,
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "BIN",
  test: /^[-+]?0b[0-1_]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),
  stringify: (node) => intStringify(node, 2, "0b")
};
const intOct = {
  identify: intIdentify,
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "OCT",
  test: /^[-+]?0[0-7_]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),
  stringify: (node) => intStringify(node, 8, "0")
};
const int = {
  identify: intIdentify,
  default: true,
  tag: "tag:yaml.org,2002:int",
  test: /^[-+]?[0-9][0-9_]*$/,
  resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
  stringify: stringifyNumber
};
const intHex = {
  identify: intIdentify,
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "HEX",
  test: /^[-+]?0x[0-9a-fA-F_]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
  stringify: (node) => intStringify(node, 16, "0x")
};
class YAMLSet extends YAMLMap {
  constructor(schema2) {
    super(schema2);
    this.tag = YAMLSet.tag;
  }
  add(key) {
    let pair;
    if (isPair(key))
      pair = key;
    else if (key && typeof key === "object" && "key" in key && "value" in key && key.value === null)
      pair = new Pair(key.key, null);
    else
      pair = new Pair(key, null);
    const prev = findPair(this.items, pair.key);
    if (!prev)
      this.items.push(pair);
  }
  /**
   * If `keepPair` is `true`, returns the Pair matching `key`.
   * Otherwise, returns the value of that Pair's key.
   */
  get(key, keepPair) {
    const pair = findPair(this.items, key);
    return !keepPair && isPair(pair) ? isScalar$1(pair.key) ? pair.key.value : pair.key : pair;
  }
  set(key, value) {
    if (typeof value !== "boolean")
      throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
    const prev = findPair(this.items, key);
    if (prev && !value) {
      this.items.splice(this.items.indexOf(prev), 1);
    } else if (!prev && value) {
      this.items.push(new Pair(key));
    }
  }
  toJSON(_, ctx) {
    return super.toJSON(_, ctx, Set);
  }
  toString(ctx, onComment, onChompKeep) {
    if (!ctx)
      return JSON.stringify(this);
    if (this.hasAllNullValues(true))
      return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);
    else
      throw new Error("Set items must all have null values");
  }
  static from(schema2, iterable, ctx) {
    const { replacer } = ctx;
    const set2 = new this(schema2);
    if (iterable && Symbol.iterator in Object(iterable))
      for (let value of iterable) {
        if (typeof replacer === "function")
          value = replacer.call(iterable, value, value);
        set2.items.push(createPair(value, null, ctx));
      }
    return set2;
  }
}
YAMLSet.tag = "tag:yaml.org,2002:set";
const set = {
  collection: "map",
  identify: (value) => value instanceof Set,
  nodeClass: YAMLSet,
  default: false,
  tag: "tag:yaml.org,2002:set",
  createNode: (schema2, iterable, ctx) => YAMLSet.from(schema2, iterable, ctx),
  resolve(map2, onError) {
    if (isMap(map2)) {
      if (map2.hasAllNullValues(true))
        return Object.assign(new YAMLSet(), map2);
      else
        onError("Set items must all have null values");
    } else
      onError("Expected a mapping for this tag");
    return map2;
  }
};
function parseSexagesimal(str, asBigInt) {
  const sign = str[0];
  const parts = sign === "-" || sign === "+" ? str.substring(1) : str;
  const num = (n) => asBigInt ? BigInt(n) : Number(n);
  const res = parts.replace(/_/g, "").split(":").reduce((res2, p) => res2 * num(60) + num(p), num(0));
  return sign === "-" ? num(-1) * res : res;
}
function stringifySexagesimal(node) {
  let { value } = node;
  let num = (n) => n;
  if (typeof value === "bigint")
    num = (n) => BigInt(n);
  else if (isNaN(value) || !isFinite(value))
    return stringifyNumber(node);
  let sign = "";
  if (value < 0) {
    sign = "-";
    value *= num(-1);
  }
  const _60 = num(60);
  const parts = [value % _60];
  if (value < 60) {
    parts.unshift(0);
  } else {
    value = (value - parts[0]) / _60;
    parts.unshift(value % _60);
    if (value >= 60) {
      value = (value - parts[0]) / _60;
      parts.unshift(value);
    }
  }
  return sign + parts.map((n) => String(n).padStart(2, "0")).join(":").replace(/000000\d*$/, "");
}
const intTime = {
  identify: (value) => typeof value === "bigint" || Number.isInteger(value),
  default: true,
  tag: "tag:yaml.org,2002:int",
  format: "TIME",
  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
  resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),
  stringify: stringifySexagesimal
};
const floatTime = {
  identify: (value) => typeof value === "number",
  default: true,
  tag: "tag:yaml.org,2002:float",
  format: "TIME",
  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
  resolve: (str) => parseSexagesimal(str, false),
  stringify: stringifySexagesimal
};
const timestamp = {
  identify: (value) => value instanceof Date,
  default: true,
  tag: "tag:yaml.org,2002:timestamp",
  // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
  // may be omitted altogether, resulting in a date format. In such a case, the time part is
  // assumed to be 00:00:00Z (start of day, UTC).
  test: RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),
  resolve(str) {
    const match = str.match(timestamp.test);
    if (!match)
      throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");
    const [, year, month, day, hour, minute, second] = match.map(Number);
    const millisec = match[7] ? Number((match[7] + "00").substr(1, 3)) : 0;
    let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
    const tz = match[8];
    if (tz && tz !== "Z") {
      let d = parseSexagesimal(tz, false);
      if (Math.abs(d) < 30)
        d *= 60;
      date -= 6e4 * d;
    }
    return new Date(date);
  },
  stringify: ({ value }) => value.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "")
};
const schema = [
  map,
  seq,
  string,
  nullTag,
  trueTag,
  falseTag,
  intBin,
  intOct,
  int,
  intHex,
  floatNaN,
  floatExp,
  float,
  binary,
  merge,
  omap,
  pairs,
  set,
  intTime,
  floatTime,
  timestamp
];
const schemas = /* @__PURE__ */ new Map([
  ["core", schema$2],
  ["failsafe", [map, seq, string]],
  ["json", schema$1],
  ["yaml11", schema],
  ["yaml-1.1", schema]
]);
const tagsByName = {
  binary,
  bool: boolTag,
  float: float$1,
  floatExp: floatExp$1,
  floatNaN: floatNaN$1,
  floatTime,
  int: int$1,
  intHex: intHex$1,
  intOct: intOct$1,
  intTime,
  map,
  merge,
  null: nullTag,
  omap,
  pairs,
  seq,
  set,
  timestamp
};
const coreKnownTags = {
  "tag:yaml.org,2002:binary": binary,
  "tag:yaml.org,2002:merge": merge,
  "tag:yaml.org,2002:omap": omap,
  "tag:yaml.org,2002:pairs": pairs,
  "tag:yaml.org,2002:set": set,
  "tag:yaml.org,2002:timestamp": timestamp
};
function getTags(customTags, schemaName, addMergeTag) {
  const schemaTags = schemas.get(schemaName);
  if (schemaTags && !customTags) {
    return addMergeTag && !schemaTags.includes(merge) ? schemaTags.concat(merge) : schemaTags.slice();
  }
  let tags = schemaTags;
  if (!tags) {
    if (Array.isArray(customTags))
      tags = [];
    else {
      const keys = Array.from(schemas.keys()).filter((key) => key !== "yaml11").map((key) => JSON.stringify(key)).join(", ");
      throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
    }
  }
  if (Array.isArray(customTags)) {
    for (const tag of customTags)
      tags = tags.concat(tag);
  } else if (typeof customTags === "function") {
    tags = customTags(tags.slice());
  }
  if (addMergeTag)
    tags = tags.concat(merge);
  return tags.reduce((tags2, tag) => {
    const tagObj = typeof tag === "string" ? tagsByName[tag] : tag;
    if (!tagObj) {
      const tagName = JSON.stringify(tag);
      const keys = Object.keys(tagsByName).map((key) => JSON.stringify(key)).join(", ");
      throw new Error(`Unknown custom tag ${tagName}; use one of ${keys}`);
    }
    if (!tags2.includes(tagObj))
      tags2.push(tagObj);
    return tags2;
  }, []);
}
const sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;
class Schema {
  constructor({ compat, customTags, merge: merge2, resolveKnownTags, schema: schema2, sortMapEntries, toStringDefaults }) {
    this.compat = Array.isArray(compat) ? getTags(compat, "compat") : compat ? getTags(null, compat) : null;
    this.name = typeof schema2 === "string" && schema2 || "core";
    this.knownTags = resolveKnownTags ? coreKnownTags : {};
    this.tags = getTags(customTags, this.name, merge2);
    this.toStringOptions = toStringDefaults ?? null;
    Object.defineProperty(this, MAP, { value: map });
    Object.defineProperty(this, SCALAR$1, { value: string });
    Object.defineProperty(this, SEQ, { value: seq });
    this.sortMapEntries = typeof sortMapEntries === "function" ? sortMapEntries : sortMapEntries === true ? sortMapEntriesByKey : null;
  }
  clone() {
    const copy2 = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));
    copy2.tags = this.tags.slice();
    return copy2;
  }
}
function stringifyDocument(doc, options) {
  var _a;
  const lines = [];
  let hasDirectives = options.directives === true;
  if (options.directives !== false && doc.directives) {
    const dir = doc.directives.toString(doc);
    if (dir) {
      lines.push(dir);
      hasDirectives = true;
    } else if (doc.directives.docStart)
      hasDirectives = true;
  }
  if (hasDirectives)
    lines.push("---");
  const ctx = createStringifyContext(doc, options);
  const { commentString } = ctx.options;
  if (doc.commentBefore) {
    if (lines.length !== 1)
      lines.unshift("");
    const cs = commentString(doc.commentBefore);
    lines.unshift(indentComment(cs, ""));
  }
  let chompKeep = false;
  let contentComment = null;
  if (doc.contents) {
    if (isNode(doc.contents)) {
      if (doc.contents.spaceBefore && hasDirectives)
        lines.push("");
      if (doc.contents.commentBefore) {
        const cs = commentString(doc.contents.commentBefore);
        lines.push(indentComment(cs, ""));
      }
      ctx.forceBlockIndent = !!doc.comment;
      contentComment = doc.contents.comment;
    }
    const onChompKeep = contentComment ? void 0 : () => chompKeep = true;
    let body = stringify$2(doc.contents, ctx, () => contentComment = null, onChompKeep);
    if (contentComment)
      body += lineComment(body, "", commentString(contentComment));
    if ((body[0] === "|" || body[0] === ">") && lines[lines.length - 1] === "---") {
      lines[lines.length - 1] = `--- ${body}`;
    } else
      lines.push(body);
  } else {
    lines.push(stringify$2(doc.contents, ctx));
  }
  if ((_a = doc.directives) == null ? void 0 : _a.docEnd) {
    if (doc.comment) {
      const cs = commentString(doc.comment);
      if (cs.includes("\n")) {
        lines.push("...");
        lines.push(indentComment(cs, ""));
      } else {
        lines.push(`... ${cs}`);
      }
    } else {
      lines.push("...");
    }
  } else {
    let dc = doc.comment;
    if (dc && chompKeep)
      dc = dc.replace(/^\n+/, "");
    if (dc) {
      if ((!chompKeep || contentComment) && lines[lines.length - 1] !== "")
        lines.push("");
      lines.push(indentComment(commentString(dc), ""));
    }
  }
  return lines.join("\n") + "\n";
}
class Document {
  constructor(value, replacer, options) {
    this.commentBefore = null;
    this.comment = null;
    this.errors = [];
    this.warnings = [];
    Object.defineProperty(this, NODE_TYPE, { value: DOC });
    let _replacer = null;
    if (typeof replacer === "function" || Array.isArray(replacer)) {
      _replacer = replacer;
    } else if (options === void 0 && replacer) {
      options = replacer;
      replacer = void 0;
    }
    const opt = Object.assign({
      intAsBigInt: false,
      keepSourceTokens: false,
      logLevel: "warn",
      prettyErrors: true,
      strict: true,
      stringKeys: false,
      uniqueKeys: true,
      version: "1.2"
    }, options);
    this.options = opt;
    let { version } = opt;
    if (options == null ? void 0 : options._directives) {
      this.directives = options._directives.atDocument();
      if (this.directives.yaml.explicit)
        version = this.directives.yaml.version;
    } else
      this.directives = new Directives({ version });
    this.setSchema(version, options);
    this.contents = value === void 0 ? null : this.createNode(value, _replacer, options);
  }
  /**
   * Create a deep copy of this Document and its contents.
   *
   * Custom Node values that inherit from `Object` still refer to their original instances.
   */
  clone() {
    const copy2 = Object.create(Document.prototype, {
      [NODE_TYPE]: { value: DOC }
    });
    copy2.commentBefore = this.commentBefore;
    copy2.comment = this.comment;
    copy2.errors = this.errors.slice();
    copy2.warnings = this.warnings.slice();
    copy2.options = Object.assign({}, this.options);
    if (this.directives)
      copy2.directives = this.directives.clone();
    copy2.schema = this.schema.clone();
    copy2.contents = isNode(this.contents) ? this.contents.clone(copy2.schema) : this.contents;
    if (this.range)
      copy2.range = this.range.slice();
    return copy2;
  }
  /** Adds a value to the document. */
  add(value) {
    if (assertCollection(this.contents))
      this.contents.add(value);
  }
  /** Adds a value to the document. */
  addIn(path, value) {
    if (assertCollection(this.contents))
      this.contents.addIn(path, value);
  }
  /**
   * Create a new `Alias` node, ensuring that the target `node` has the required anchor.
   *
   * If `node` already has an anchor, `name` is ignored.
   * Otherwise, the `node.anchor` value will be set to `name`,
   * or if an anchor with that name is already present in the document,
   * `name` will be used as a prefix for a new unique anchor.
   * If `name` is undefined, the generated anchor will use 'a' as a prefix.
   */
  createAlias(node, name) {
    if (!node.anchor) {
      const prev = anchorNames(this);
      node.anchor = // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
      !name || prev.has(name) ? findNewAnchor(name || "a", prev) : name;
    }
    return new Alias(node.anchor);
  }
  createNode(value, replacer, options) {
    let _replacer = void 0;
    if (typeof replacer === "function") {
      value = replacer.call({ "": value }, "", value);
      _replacer = replacer;
    } else if (Array.isArray(replacer)) {
      const keyToStr = (v) => typeof v === "number" || v instanceof String || v instanceof Number;
      const asStr = replacer.filter(keyToStr).map(String);
      if (asStr.length > 0)
        replacer = replacer.concat(asStr);
      _replacer = replacer;
    } else if (options === void 0 && replacer) {
      options = replacer;
      replacer = void 0;
    }
    const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};
    const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(
      this,
      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
      anchorPrefix || "a"
    );
    const ctx = {
      aliasDuplicateObjects: aliasDuplicateObjects ?? true,
      keepUndefined: keepUndefined ?? false,
      onAnchor,
      onTagObj,
      replacer: _replacer,
      schema: this.schema,
      sourceObjects
    };
    const node = createNode(value, tag, ctx);
    if (flow && isCollection$1(node))
      node.flow = true;
    setAnchors();
    return node;
  }
  /**
   * Convert a key and a value into a `Pair` using the current schema,
   * recursively wrapping all values as `Scalar` or `Collection` nodes.
   */
  createPair(key, value, options = {}) {
    const k = this.createNode(key, null, options);
    const v = this.createNode(value, null, options);
    return new Pair(k, v);
  }
  /**
   * Removes a value from the document.
   * @returns `true` if the item was found and removed.
   */
  delete(key) {
    return assertCollection(this.contents) ? this.contents.delete(key) : false;
  }
  /**
   * Removes a value from the document.
   * @returns `true` if the item was found and removed.
   */
  deleteIn(path) {
    if (isEmptyPath(path)) {
      if (this.contents == null)
        return false;
      this.contents = null;
      return true;
    }
    return assertCollection(this.contents) ? this.contents.deleteIn(path) : false;
  }
  /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */
  get(key, keepScalar) {
    return isCollection$1(this.contents) ? this.contents.get(key, keepScalar) : void 0;
  }
  /**
   * Returns item at `path`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */
  getIn(path, keepScalar) {
    if (isEmptyPath(path))
      return !keepScalar && isScalar$1(this.contents) ? this.contents.value : this.contents;
    return isCollection$1(this.contents) ? this.contents.getIn(path, keepScalar) : void 0;
  }
  /**
   * Checks if the document includes a value with the key `key`.
   */
  has(key) {
    return isCollection$1(this.contents) ? this.contents.has(key) : false;
  }
  /**
   * Checks if the document includes a value at `path`.
   */
  hasIn(path) {
    if (isEmptyPath(path))
      return this.contents !== void 0;
    return isCollection$1(this.contents) ? this.contents.hasIn(path) : false;
  }
  /**
   * Sets a value in this document. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */
  set(key, value) {
    if (this.contents == null) {
      this.contents = collectionFromPath(this.schema, [key], value);
    } else if (assertCollection(this.contents)) {
      this.contents.set(key, value);
    }
  }
  /**
   * Sets a value in this document. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */
  setIn(path, value) {
    if (isEmptyPath(path)) {
      this.contents = value;
    } else if (this.contents == null) {
      this.contents = collectionFromPath(this.schema, Array.from(path), value);
    } else if (assertCollection(this.contents)) {
      this.contents.setIn(path, value);
    }
  }
  /**
   * Change the YAML version and schema used by the document.
   * A `null` version disables support for directives, explicit tags, anchors, and aliases.
   * It also requires the `schema` option to be given as a `Schema` instance value.
   *
   * Overrides all previously set schema options.
   */
  setSchema(version, options = {}) {
    if (typeof version === "number")
      version = String(version);
    let opt;
    switch (version) {
      case "1.1":
        if (this.directives)
          this.directives.yaml.version = "1.1";
        else
          this.directives = new Directives({ version: "1.1" });
        opt = { resolveKnownTags: false, schema: "yaml-1.1" };
        break;
      case "1.2":
      case "next":
        if (this.directives)
          this.directives.yaml.version = version;
        else
          this.directives = new Directives({ version });
        opt = { resolveKnownTags: true, schema: "core" };
        break;
      case null:
        if (this.directives)
          delete this.directives;
        opt = null;
        break;
      default: {
        const sv = JSON.stringify(version);
        throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
      }
    }
    if (options.schema instanceof Object)
      this.schema = options.schema;
    else if (opt)
      this.schema = new Schema(Object.assign(opt, options));
    else
      throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
  }
  // json & jsonArg are only used from toJSON()
  toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
    const ctx = {
      anchors: /* @__PURE__ */ new Map(),
      doc: this,
      keep: !json,
      mapAsMap: mapAsMap === true,
      mapKeyWarned: false,
      maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100
    };
    const res = toJS(this.contents, jsonArg ?? "", ctx);
    if (typeof onAnchor === "function")
      for (const { count, res: res2 } of ctx.anchors.values())
        onAnchor(res2, count);
    return typeof reviver === "function" ? applyReviver(reviver, { "": res }, "", res) : res;
  }
  /**
   * A JSON representation of the document `contents`.
   *
   * @param jsonArg Used by `JSON.stringify` to indicate the array index or
   *   property name.
   */
  toJSON(jsonArg, onAnchor) {
    return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });
  }
  /** A YAML representation of the document. */
  toString(options = {}) {
    if (this.errors.length > 0)
      throw new Error("Document with errors cannot be stringified");
    if ("indent" in options && (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
      const s = JSON.stringify(options.indent);
      throw new Error(`"indent" option must be a positive integer, not ${s}`);
    }
    return stringifyDocument(this, options);
  }
}
function assertCollection(contents) {
  if (isCollection$1(contents))
    return true;
  throw new Error("Expected a YAML collection as document contents");
}
class YAMLError extends Error {
  constructor(name, pos, code, message) {
    super();
    this.name = name;
    this.code = code;
    this.message = message;
    this.pos = pos;
  }
}
class YAMLParseError extends YAMLError {
  constructor(pos, code, message) {
    super("YAMLParseError", pos, code, message);
  }
}
class YAMLWarning extends YAMLError {
  constructor(pos, code, message) {
    super("YAMLWarning", pos, code, message);
  }
}
const prettifyError = (src, lc) => (error) => {
  if (error.pos[0] === -1)
    return;
  error.linePos = error.pos.map((pos) => lc.linePos(pos));
  const { line, col } = error.linePos[0];
  error.message += ` at line ${line}, column ${col}`;
  let ci = col - 1;
  let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\n\r]+$/, "");
  if (ci >= 60 && lineStr.length > 80) {
    const trimStart = Math.min(ci - 39, lineStr.length - 79);
    lineStr = "…" + lineStr.substring(trimStart);
    ci -= trimStart - 1;
  }
  if (lineStr.length > 80)
    lineStr = lineStr.substring(0, 79) + "…";
  if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
    let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
    if (prev.length > 80)
      prev = prev.substring(0, 79) + "…\n";
    lineStr = prev + lineStr;
  }
  if (/[^ ]/.test(lineStr)) {
    let count = 1;
    const end = error.linePos[1];
    if (end && end.line === line && end.col > col) {
      count = Math.max(1, Math.min(end.col - col, 80 - ci));
    }
    const pointer = " ".repeat(ci) + "^".repeat(count);
    error.message += `:

${lineStr}
${pointer}
`;
  }
};
function resolveProps(tokens, { flow, indicator, next, offset, onError, parentIndent, startOnNewline }) {
  let spaceBefore = false;
  let atNewline = startOnNewline;
  let hasSpace = startOnNewline;
  let comment = "";
  let commentSep = "";
  let hasNewline = false;
  let reqSpace = false;
  let tab = null;
  let anchor = null;
  let tag = null;
  let newlineAfterProp = null;
  let comma = null;
  let found = null;
  let start = null;
  for (const token of tokens) {
    if (reqSpace) {
      if (token.type !== "space" && token.type !== "newline" && token.type !== "comma")
        onError(token.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
      reqSpace = false;
    }
    if (tab) {
      if (atNewline && token.type !== "comment" && token.type !== "newline") {
        onError(tab, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
      }
      tab = null;
    }
    switch (token.type) {
      case "space":
        if (!flow && (indicator !== "doc-start" || (next == null ? void 0 : next.type) !== "flow-collection") && token.source.includes("	")) {
          tab = token;
        }
        hasSpace = true;
        break;
      case "comment": {
        if (!hasSpace)
          onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
        const cb = token.source.substring(1) || " ";
        if (!comment)
          comment = cb;
        else
          comment += commentSep + cb;
        commentSep = "";
        atNewline = false;
        break;
      }
      case "newline":
        if (atNewline) {
          if (comment)
            comment += token.source;
          else
            spaceBefore = true;
        } else
          commentSep += token.source;
        atNewline = true;
        hasNewline = true;
        if (anchor || tag)
          newlineAfterProp = token;
        hasSpace = true;
        break;
      case "anchor":
        if (anchor)
          onError(token, "MULTIPLE_ANCHORS", "A node can have at most one anchor");
        if (token.source.endsWith(":"))
          onError(token.offset + token.source.length - 1, "BAD_ALIAS", "Anchor ending in : is ambiguous", true);
        anchor = token;
        if (start === null)
          start = token.offset;
        atNewline = false;
        hasSpace = false;
        reqSpace = true;
        break;
      case "tag": {
        if (tag)
          onError(token, "MULTIPLE_TAGS", "A node can have at most one tag");
        tag = token;
        if (start === null)
          start = token.offset;
        atNewline = false;
        hasSpace = false;
        reqSpace = true;
        break;
      }
      case indicator:
        if (anchor || tag)
          onError(token, "BAD_PROP_ORDER", `Anchors and tags must be after the ${token.source} indicator`);
        if (found)
          onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.source} in ${flow ?? "collection"}`);
        found = token;
        atNewline = indicator === "seq-item-ind" || indicator === "explicit-key-ind";
        hasSpace = false;
        break;
      case "comma":
        if (flow) {
          if (comma)
            onError(token, "UNEXPECTED_TOKEN", `Unexpected , in ${flow}`);
          comma = token;
          atNewline = false;
          hasSpace = false;
          break;
        }
      // else fallthrough
      default:
        onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.type} token`);
        atNewline = false;
        hasSpace = false;
    }
  }
  const last = tokens[tokens.length - 1];
  const end = last ? last.offset + last.source.length : offset;
  if (reqSpace && next && next.type !== "space" && next.type !== "newline" && next.type !== "comma" && (next.type !== "scalar" || next.source !== "")) {
    onError(next.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
  }
  if (tab && (atNewline && tab.indent <= parentIndent || (next == null ? void 0 : next.type) === "block-map" || (next == null ? void 0 : next.type) === "block-seq"))
    onError(tab, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
  return {
    comma,
    found,
    spaceBefore,
    comment,
    hasNewline,
    anchor,
    tag,
    newlineAfterProp,
    end,
    start: start ?? end
  };
}
function containsNewline(key) {
  if (!key)
    return null;
  switch (key.type) {
    case "alias":
    case "scalar":
    case "double-quoted-scalar":
    case "single-quoted-scalar":
      if (key.source.includes("\n"))
        return true;
      if (key.end) {
        for (const st of key.end)
          if (st.type === "newline")
            return true;
      }
      return false;
    case "flow-collection":
      for (const it of key.items) {
        for (const st of it.start)
          if (st.type === "newline")
            return true;
        if (it.sep) {
          for (const st of it.sep)
            if (st.type === "newline")
              return true;
        }
        if (containsNewline(it.key) || containsNewline(it.value))
          return true;
      }
      return false;
    default:
      return true;
  }
}
function flowIndentCheck(indent, fc, onError) {
  if ((fc == null ? void 0 : fc.type) === "flow-collection") {
    const end = fc.end[0];
    if (end.indent === indent && (end.source === "]" || end.source === "}") && containsNewline(fc)) {
      const msg = "Flow end indicator should be more indented than parent";
      onError(end, "BAD_INDENT", msg, true);
    }
  }
}
function mapIncludes(ctx, items, search) {
  const { uniqueKeys } = ctx.options;
  if (uniqueKeys === false)
    return false;
  const isEqual = typeof uniqueKeys === "function" ? uniqueKeys : (a, b) => a === b || isScalar$1(a) && isScalar$1(b) && a.value === b.value;
  return items.some((pair) => isEqual(pair.key, search));
}
const startColMsg = "All mapping items must start at the same column";
function resolveBlockMap({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, bm, onError, tag) {
  var _a;
  const NodeClass = (tag == null ? void 0 : tag.nodeClass) ?? YAMLMap;
  const map2 = new NodeClass(ctx.schema);
  if (ctx.atRoot)
    ctx.atRoot = false;
  let offset = bm.offset;
  let commentEnd = null;
  for (const collItem of bm.items) {
    const { start, key, sep, value } = collItem;
    const keyProps = resolveProps(start, {
      indicator: "explicit-key-ind",
      next: key ?? (sep == null ? void 0 : sep[0]),
      offset,
      onError,
      parentIndent: bm.indent,
      startOnNewline: true
    });
    const implicitKey = !keyProps.found;
    if (implicitKey) {
      if (key) {
        if (key.type === "block-seq")
          onError(offset, "BLOCK_AS_IMPLICIT_KEY", "A block sequence may not be used as an implicit map key");
        else if ("indent" in key && key.indent !== bm.indent)
          onError(offset, "BAD_INDENT", startColMsg);
      }
      if (!keyProps.anchor && !keyProps.tag && !sep) {
        commentEnd = keyProps.end;
        if (keyProps.comment) {
          if (map2.comment)
            map2.comment += "\n" + keyProps.comment;
          else
            map2.comment = keyProps.comment;
        }
        continue;
      }
      if (keyProps.newlineAfterProp || containsNewline(key)) {
        onError(key ?? start[start.length - 1], "MULTILINE_IMPLICIT_KEY", "Implicit keys need to be on a single line");
      }
    } else if (((_a = keyProps.found) == null ? void 0 : _a.indent) !== bm.indent) {
      onError(offset, "BAD_INDENT", startColMsg);
    }
    ctx.atKey = true;
    const keyStart = keyProps.end;
    const keyNode = key ? composeNode2(ctx, key, keyProps, onError) : composeEmptyNode2(ctx, keyStart, start, null, keyProps, onError);
    if (ctx.schema.compat)
      flowIndentCheck(bm.indent, key, onError);
    ctx.atKey = false;
    if (mapIncludes(ctx, map2.items, keyNode))
      onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
    const valueProps = resolveProps(sep ?? [], {
      indicator: "map-value-ind",
      next: value,
      offset: keyNode.range[2],
      onError,
      parentIndent: bm.indent,
      startOnNewline: !key || key.type === "block-scalar"
    });
    offset = valueProps.end;
    if (valueProps.found) {
      if (implicitKey) {
        if ((value == null ? void 0 : value.type) === "block-map" && !valueProps.hasNewline)
          onError(offset, "BLOCK_AS_IMPLICIT_KEY", "Nested mappings are not allowed in compact mappings");
        if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024)
          onError(keyNode.range, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit block mapping key");
      }
      const valueNode = value ? composeNode2(ctx, value, valueProps, onError) : composeEmptyNode2(ctx, offset, sep, null, valueProps, onError);
      if (ctx.schema.compat)
        flowIndentCheck(bm.indent, value, onError);
      offset = valueNode.range[2];
      const pair = new Pair(keyNode, valueNode);
      if (ctx.options.keepSourceTokens)
        pair.srcToken = collItem;
      map2.items.push(pair);
    } else {
      if (implicitKey)
        onError(keyNode.range, "MISSING_CHAR", "Implicit map keys need to be followed by map values");
      if (valueProps.comment) {
        if (keyNode.comment)
          keyNode.comment += "\n" + valueProps.comment;
        else
          keyNode.comment = valueProps.comment;
      }
      const pair = new Pair(keyNode);
      if (ctx.options.keepSourceTokens)
        pair.srcToken = collItem;
      map2.items.push(pair);
    }
  }
  if (commentEnd && commentEnd < offset)
    onError(commentEnd, "IMPOSSIBLE", "Map comment with trailing content");
  map2.range = [bm.offset, offset, commentEnd ?? offset];
  return map2;
}
function resolveBlockSeq({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, bs, onError, tag) {
  const NodeClass = (tag == null ? void 0 : tag.nodeClass) ?? YAMLSeq;
  const seq2 = new NodeClass(ctx.schema);
  if (ctx.atRoot)
    ctx.atRoot = false;
  if (ctx.atKey)
    ctx.atKey = false;
  let offset = bs.offset;
  let commentEnd = null;
  for (const { start, value } of bs.items) {
    const props = resolveProps(start, {
      indicator: "seq-item-ind",
      next: value,
      offset,
      onError,
      parentIndent: bs.indent,
      startOnNewline: true
    });
    if (!props.found) {
      if (props.anchor || props.tag || value) {
        if (value && value.type === "block-seq")
          onError(props.end, "BAD_INDENT", "All sequence items must start at the same column");
        else
          onError(offset, "MISSING_CHAR", "Sequence item without - indicator");
      } else {
        commentEnd = props.end;
        if (props.comment)
          seq2.comment = props.comment;
        continue;
      }
    }
    const node = value ? composeNode2(ctx, value, props, onError) : composeEmptyNode2(ctx, props.end, start, null, props, onError);
    if (ctx.schema.compat)
      flowIndentCheck(bs.indent, value, onError);
    offset = node.range[2];
    seq2.items.push(node);
  }
  seq2.range = [bs.offset, offset, commentEnd ?? offset];
  return seq2;
}
function resolveEnd(end, offset, reqSpace, onError) {
  let comment = "";
  if (end) {
    let hasSpace = false;
    let sep = "";
    for (const token of end) {
      const { source, type } = token;
      switch (type) {
        case "space":
          hasSpace = true;
          break;
        case "comment": {
          if (reqSpace && !hasSpace)
            onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
          const cb = source.substring(1) || " ";
          if (!comment)
            comment = cb;
          else
            comment += sep + cb;
          sep = "";
          break;
        }
        case "newline":
          if (comment)
            sep += source;
          hasSpace = true;
          break;
        default:
          onError(token, "UNEXPECTED_TOKEN", `Unexpected ${type} at node end`);
      }
      offset += source.length;
    }
  }
  return { comment, offset };
}
const blockMsg = "Block collections are not allowed within flow collections";
const isBlock = (token) => token && (token.type === "block-map" || token.type === "block-seq");
function resolveFlowCollection({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, fc, onError, tag) {
  const isMap2 = fc.start.source === "{";
  const fcName = isMap2 ? "flow map" : "flow sequence";
  const NodeClass = (tag == null ? void 0 : tag.nodeClass) ?? (isMap2 ? YAMLMap : YAMLSeq);
  const coll = new NodeClass(ctx.schema);
  coll.flow = true;
  const atRoot = ctx.atRoot;
  if (atRoot)
    ctx.atRoot = false;
  if (ctx.atKey)
    ctx.atKey = false;
  let offset = fc.offset + fc.start.source.length;
  for (let i = 0; i < fc.items.length; ++i) {
    const collItem = fc.items[i];
    const { start, key, sep, value } = collItem;
    const props = resolveProps(start, {
      flow: fcName,
      indicator: "explicit-key-ind",
      next: key ?? (sep == null ? void 0 : sep[0]),
      offset,
      onError,
      parentIndent: fc.indent,
      startOnNewline: false
    });
    if (!props.found) {
      if (!props.anchor && !props.tag && !sep && !value) {
        if (i === 0 && props.comma)
          onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
        else if (i < fc.items.length - 1)
          onError(props.start, "UNEXPECTED_TOKEN", `Unexpected empty item in ${fcName}`);
        if (props.comment) {
          if (coll.comment)
            coll.comment += "\n" + props.comment;
          else
            coll.comment = props.comment;
        }
        offset = props.end;
        continue;
      }
      if (!isMap2 && ctx.options.strict && containsNewline(key))
        onError(
          key,
          // checked by containsNewline()
          "MULTILINE_IMPLICIT_KEY",
          "Implicit keys of flow sequence pairs need to be on a single line"
        );
    }
    if (i === 0) {
      if (props.comma)
        onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
    } else {
      if (!props.comma)
        onError(props.start, "MISSING_CHAR", `Missing , between ${fcName} items`);
      if (props.comment) {
        let prevItemComment = "";
        loop: for (const st of start) {
          switch (st.type) {
            case "comma":
            case "space":
              break;
            case "comment":
              prevItemComment = st.source.substring(1);
              break loop;
            default:
              break loop;
          }
        }
        if (prevItemComment) {
          let prev = coll.items[coll.items.length - 1];
          if (isPair(prev))
            prev = prev.value ?? prev.key;
          if (prev.comment)
            prev.comment += "\n" + prevItemComment;
          else
            prev.comment = prevItemComment;
          props.comment = props.comment.substring(prevItemComment.length + 1);
        }
      }
    }
    if (!isMap2 && !sep && !props.found) {
      const valueNode = value ? composeNode2(ctx, value, props, onError) : composeEmptyNode2(ctx, props.end, sep, null, props, onError);
      coll.items.push(valueNode);
      offset = valueNode.range[2];
      if (isBlock(value))
        onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
    } else {
      ctx.atKey = true;
      const keyStart = props.end;
      const keyNode = key ? composeNode2(ctx, key, props, onError) : composeEmptyNode2(ctx, keyStart, start, null, props, onError);
      if (isBlock(key))
        onError(keyNode.range, "BLOCK_IN_FLOW", blockMsg);
      ctx.atKey = false;
      const valueProps = resolveProps(sep ?? [], {
        flow: fcName,
        indicator: "map-value-ind",
        next: value,
        offset: keyNode.range[2],
        onError,
        parentIndent: fc.indent,
        startOnNewline: false
      });
      if (valueProps.found) {
        if (!isMap2 && !props.found && ctx.options.strict) {
          if (sep)
            for (const st of sep) {
              if (st === valueProps.found)
                break;
              if (st.type === "newline") {
                onError(st, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
                break;
              }
            }
          if (props.start < valueProps.found.offset - 1024)
            onError(valueProps.found, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");
        }
      } else if (value) {
        if ("source" in value && value.source && value.source[0] === ":")
          onError(value, "MISSING_CHAR", `Missing space after : in ${fcName}`);
        else
          onError(valueProps.start, "MISSING_CHAR", `Missing , or : between ${fcName} items`);
      }
      const valueNode = value ? composeNode2(ctx, value, valueProps, onError) : valueProps.found ? composeEmptyNode2(ctx, valueProps.end, sep, null, valueProps, onError) : null;
      if (valueNode) {
        if (isBlock(value))
          onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
      } else if (valueProps.comment) {
        if (keyNode.comment)
          keyNode.comment += "\n" + valueProps.comment;
        else
          keyNode.comment = valueProps.comment;
      }
      const pair = new Pair(keyNode, valueNode);
      if (ctx.options.keepSourceTokens)
        pair.srcToken = collItem;
      if (isMap2) {
        const map2 = coll;
        if (mapIncludes(ctx, map2.items, keyNode))
          onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
        map2.items.push(pair);
      } else {
        const map2 = new YAMLMap(ctx.schema);
        map2.flow = true;
        map2.items.push(pair);
        const endRange = (valueNode ?? keyNode).range;
        map2.range = [keyNode.range[0], endRange[1], endRange[2]];
        coll.items.push(map2);
      }
      offset = valueNode ? valueNode.range[2] : valueProps.end;
    }
  }
  const expectedEnd = isMap2 ? "}" : "]";
  const [ce, ...ee] = fc.end;
  let cePos = offset;
  if (ce && ce.source === expectedEnd)
    cePos = ce.offset + ce.source.length;
  else {
    const name = fcName[0].toUpperCase() + fcName.substring(1);
    const msg = atRoot ? `${name} must end with a ${expectedEnd}` : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
    onError(offset, atRoot ? "MISSING_CHAR" : "BAD_INDENT", msg);
    if (ce && ce.source.length !== 1)
      ee.unshift(ce);
  }
  if (ee.length > 0) {
    const end = resolveEnd(ee, cePos, ctx.options.strict, onError);
    if (end.comment) {
      if (coll.comment)
        coll.comment += "\n" + end.comment;
      else
        coll.comment = end.comment;
    }
    coll.range = [fc.offset, cePos, end.offset];
  } else {
    coll.range = [fc.offset, cePos, cePos];
  }
  return coll;
}
function resolveCollection(CN2, ctx, token, onError, tagName, tag) {
  const coll = token.type === "block-map" ? resolveBlockMap(CN2, ctx, token, onError, tag) : token.type === "block-seq" ? resolveBlockSeq(CN2, ctx, token, onError, tag) : resolveFlowCollection(CN2, ctx, token, onError, tag);
  const Coll = coll.constructor;
  if (tagName === "!" || tagName === Coll.tagName) {
    coll.tag = Coll.tagName;
    return coll;
  }
  if (tagName)
    coll.tag = tagName;
  return coll;
}
function composeCollection(CN2, ctx, token, props, onError) {
  var _a;
  const tagToken = props.tag;
  const tagName = !tagToken ? null : ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg));
  if (token.type === "block-seq") {
    const { anchor, newlineAfterProp: nl } = props;
    const lastProp = anchor && tagToken ? anchor.offset > tagToken.offset ? anchor : tagToken : anchor ?? tagToken;
    if (lastProp && (!nl || nl.offset < lastProp.offset)) {
      const message = "Missing newline after block sequence props";
      onError(lastProp, "MISSING_CHAR", message);
    }
  }
  const expType = token.type === "block-map" ? "map" : token.type === "block-seq" ? "seq" : token.start.source === "{" ? "map" : "seq";
  if (!tagToken || !tagName || tagName === "!" || tagName === YAMLMap.tagName && expType === "map" || tagName === YAMLSeq.tagName && expType === "seq") {
    return resolveCollection(CN2, ctx, token, onError, tagName);
  }
  let tag = ctx.schema.tags.find((t) => t.tag === tagName && t.collection === expType);
  if (!tag) {
    const kt = ctx.schema.knownTags[tagName];
    if (kt && kt.collection === expType) {
      ctx.schema.tags.push(Object.assign({}, kt, { default: false }));
      tag = kt;
    } else {
      if (kt == null ? void 0 : kt.collection) {
        onError(tagToken, "BAD_COLLECTION_TYPE", `${kt.tag} used for ${expType} collection, but expects ${kt.collection}`, true);
      } else {
        onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, true);
      }
      return resolveCollection(CN2, ctx, token, onError, tagName);
    }
  }
  const coll = resolveCollection(CN2, ctx, token, onError, tagName, tag);
  const res = ((_a = tag.resolve) == null ? void 0 : _a.call(tag, coll, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg), ctx.options)) ?? coll;
  const node = isNode(res) ? res : new Scalar(res);
  node.range = coll.range;
  node.tag = tagName;
  if (tag == null ? void 0 : tag.format)
    node.format = tag.format;
  return node;
}
function resolveBlockScalar(ctx, scalar, onError) {
  const start = scalar.offset;
  const header = parseBlockScalarHeader(scalar, ctx.options.strict, onError);
  if (!header)
    return { value: "", type: null, comment: "", range: [start, start, start] };
  const type = header.mode === ">" ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;
  const lines = scalar.source ? splitLines(scalar.source) : [];
  let chompStart = lines.length;
  for (let i = lines.length - 1; i >= 0; --i) {
    const content = lines[i][1];
    if (content === "" || content === "\r")
      chompStart = i;
    else
      break;
  }
  if (chompStart === 0) {
    const value2 = header.chomp === "+" && lines.length > 0 ? "\n".repeat(Math.max(1, lines.length - 1)) : "";
    let end2 = start + header.length;
    if (scalar.source)
      end2 += scalar.source.length;
    return { value: value2, type, comment: header.comment, range: [start, end2, end2] };
  }
  let trimIndent = scalar.indent + header.indent;
  let offset = scalar.offset + header.length;
  let contentStart = 0;
  for (let i = 0; i < chompStart; ++i) {
    const [indent, content] = lines[i];
    if (content === "" || content === "\r") {
      if (header.indent === 0 && indent.length > trimIndent)
        trimIndent = indent.length;
    } else {
      if (indent.length < trimIndent) {
        const message = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
        onError(offset + indent.length, "MISSING_CHAR", message);
      }
      if (header.indent === 0)
        trimIndent = indent.length;
      contentStart = i;
      if (trimIndent === 0 && !ctx.atRoot) {
        const message = "Block scalar values in collections must be indented";
        onError(offset, "BAD_INDENT", message);
      }
      break;
    }
    offset += indent.length + content.length + 1;
  }
  for (let i = lines.length - 1; i >= chompStart; --i) {
    if (lines[i][0].length > trimIndent)
      chompStart = i + 1;
  }
  let value = "";
  let sep = "";
  let prevMoreIndented = false;
  for (let i = 0; i < contentStart; ++i)
    value += lines[i][0].slice(trimIndent) + "\n";
  for (let i = contentStart; i < chompStart; ++i) {
    let [indent, content] = lines[i];
    offset += indent.length + content.length + 1;
    const crlf = content[content.length - 1] === "\r";
    if (crlf)
      content = content.slice(0, -1);
    if (content && indent.length < trimIndent) {
      const src = header.indent ? "explicit indentation indicator" : "first line";
      const message = `Block scalar lines must not be less indented than their ${src}`;
      onError(offset - content.length - (crlf ? 2 : 1), "BAD_INDENT", message);
      indent = "";
    }
    if (type === Scalar.BLOCK_LITERAL) {
      value += sep + indent.slice(trimIndent) + content;
      sep = "\n";
    } else if (indent.length > trimIndent || content[0] === "	") {
      if (sep === " ")
        sep = "\n";
      else if (!prevMoreIndented && sep === "\n")
        sep = "\n\n";
      value += sep + indent.slice(trimIndent) + content;
      sep = "\n";
      prevMoreIndented = true;
    } else if (content === "") {
      if (sep === "\n")
        value += "\n";
      else
        sep = "\n";
    } else {
      value += sep + content;
      sep = " ";
      prevMoreIndented = false;
    }
  }
  switch (header.chomp) {
    case "-":
      break;
    case "+":
      for (let i = chompStart; i < lines.length; ++i)
        value += "\n" + lines[i][0].slice(trimIndent);
      if (value[value.length - 1] !== "\n")
        value += "\n";
      break;
    default:
      value += "\n";
  }
  const end = start + header.length + scalar.source.length;
  return { value, type, comment: header.comment, range: [start, end, end] };
}
function parseBlockScalarHeader({ offset, props }, strict, onError) {
  if (props[0].type !== "block-scalar-header") {
    onError(props[0], "IMPOSSIBLE", "Block scalar header not found");
    return null;
  }
  const { source } = props[0];
  const mode = source[0];
  let indent = 0;
  let chomp = "";
  let error = -1;
  for (let i = 1; i < source.length; ++i) {
    const ch = source[i];
    if (!chomp && (ch === "-" || ch === "+"))
      chomp = ch;
    else {
      const n = Number(ch);
      if (!indent && n)
        indent = n;
      else if (error === -1)
        error = offset + i;
    }
  }
  if (error !== -1)
    onError(error, "UNEXPECTED_TOKEN", `Block scalar header includes extra characters: ${source}`);
  let hasSpace = false;
  let comment = "";
  let length = source.length;
  for (let i = 1; i < props.length; ++i) {
    const token = props[i];
    switch (token.type) {
      case "space":
        hasSpace = true;
      // fallthrough
      case "newline":
        length += token.source.length;
        break;
      case "comment":
        if (strict && !hasSpace) {
          const message = "Comments must be separated from other tokens by white space characters";
          onError(token, "MISSING_CHAR", message);
        }
        length += token.source.length;
        comment = token.source.substring(1);
        break;
      case "error":
        onError(token, "UNEXPECTED_TOKEN", token.message);
        length += token.source.length;
        break;
      /* istanbul ignore next should not happen */
      default: {
        const message = `Unexpected token in block scalar header: ${token.type}`;
        onError(token, "UNEXPECTED_TOKEN", message);
        const ts = token.source;
        if (ts && typeof ts === "string")
          length += ts.length;
      }
    }
  }
  return { mode, indent, chomp, comment, length };
}
function splitLines(source) {
  const split = source.split(/\n( *)/);
  const first = split[0];
  const m = first.match(/^( *)/);
  const line0 = (m == null ? void 0 : m[1]) ? [m[1], first.slice(m[1].length)] : ["", first];
  const lines = [line0];
  for (let i = 1; i < split.length; i += 2)
    lines.push([split[i], split[i + 1]]);
  return lines;
}
function resolveFlowScalar(scalar, strict, onError) {
  const { offset, type, source, end } = scalar;
  let _type;
  let value;
  const _onError = (rel, code, msg) => onError(offset + rel, code, msg);
  switch (type) {
    case "scalar":
      _type = Scalar.PLAIN;
      value = plainValue(source, _onError);
      break;
    case "single-quoted-scalar":
      _type = Scalar.QUOTE_SINGLE;
      value = singleQuotedValue(source, _onError);
      break;
    case "double-quoted-scalar":
      _type = Scalar.QUOTE_DOUBLE;
      value = doubleQuotedValue(source, _onError);
      break;
    /* istanbul ignore next should not happen */
    default:
      onError(scalar, "UNEXPECTED_TOKEN", `Expected a flow scalar value, but found: ${type}`);
      return {
        value: "",
        type: null,
        comment: "",
        range: [offset, offset + source.length, offset + source.length]
      };
  }
  const valueEnd = offset + source.length;
  const re = resolveEnd(end, valueEnd, strict, onError);
  return {
    value,
    type: _type,
    comment: re.comment,
    range: [offset, valueEnd, re.offset]
  };
}
function plainValue(source, onError) {
  let badChar = "";
  switch (source[0]) {
    /* istanbul ignore next should not happen */
    case "	":
      badChar = "a tab character";
      break;
    case ",":
      badChar = "flow indicator character ,";
      break;
    case "%":
      badChar = "directive indicator character %";
      break;
    case "|":
    case ">": {
      badChar = `block scalar indicator ${source[0]}`;
      break;
    }
    case "@":
    case "`": {
      badChar = `reserved character ${source[0]}`;
      break;
    }
  }
  if (badChar)
    onError(0, "BAD_SCALAR_START", `Plain value cannot start with ${badChar}`);
  return foldLines(source);
}
function singleQuotedValue(source, onError) {
  if (source[source.length - 1] !== "'" || source.length === 1)
    onError(source.length, "MISSING_CHAR", "Missing closing 'quote");
  return foldLines(source.slice(1, -1)).replace(/''/g, "'");
}
function foldLines(source) {
  let first, line;
  try {
    first = new RegExp("(.*?)(?<![ 	])[ 	]*\r?\n", "sy");
    line = new RegExp("[ 	]*(.*?)(?:(?<![ 	])[ 	]*)?\r?\n", "sy");
  } catch {
    first = /(.*?)[ \t]*\r?\n/sy;
    line = /[ \t]*(.*?)[ \t]*\r?\n/sy;
  }
  let match = first.exec(source);
  if (!match)
    return source;
  let res = match[1];
  let sep = " ";
  let pos = first.lastIndex;
  line.lastIndex = pos;
  while (match = line.exec(source)) {
    if (match[1] === "") {
      if (sep === "\n")
        res += sep;
      else
        sep = "\n";
    } else {
      res += sep + match[1];
      sep = " ";
    }
    pos = line.lastIndex;
  }
  const last = /[ \t]*(.*)/sy;
  last.lastIndex = pos;
  match = last.exec(source);
  return res + sep + ((match == null ? void 0 : match[1]) ?? "");
}
function doubleQuotedValue(source, onError) {
  let res = "";
  for (let i = 1; i < source.length - 1; ++i) {
    const ch = source[i];
    if (ch === "\r" && source[i + 1] === "\n")
      continue;
    if (ch === "\n") {
      const { fold, offset } = foldNewline(source, i);
      res += fold;
      i = offset;
    } else if (ch === "\\") {
      let next = source[++i];
      const cc = escapeCodes[next];
      if (cc)
        res += cc;
      else if (next === "\n") {
        next = source[i + 1];
        while (next === " " || next === "	")
          next = source[++i + 1];
      } else if (next === "\r" && source[i + 1] === "\n") {
        next = source[++i + 1];
        while (next === " " || next === "	")
          next = source[++i + 1];
      } else if (next === "x" || next === "u" || next === "U") {
        const length = { x: 2, u: 4, U: 8 }[next];
        res += parseCharCode(source, i + 1, length, onError);
        i += length;
      } else {
        const raw = source.substr(i - 1, 2);
        onError(i - 1, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
        res += raw;
      }
    } else if (ch === " " || ch === "	") {
      const wsStart = i;
      let next = source[i + 1];
      while (next === " " || next === "	")
        next = source[++i + 1];
      if (next !== "\n" && !(next === "\r" && source[i + 2] === "\n"))
        res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
    } else {
      res += ch;
    }
  }
  if (source[source.length - 1] !== '"' || source.length === 1)
    onError(source.length, "MISSING_CHAR", 'Missing closing "quote');
  return res;
}
function foldNewline(source, offset) {
  let fold = "";
  let ch = source[offset + 1];
  while (ch === " " || ch === "	" || ch === "\n" || ch === "\r") {
    if (ch === "\r" && source[offset + 2] !== "\n")
      break;
    if (ch === "\n")
      fold += "\n";
    offset += 1;
    ch = source[offset + 1];
  }
  if (!fold)
    fold = " ";
  return { fold, offset };
}
const escapeCodes = {
  "0": "\0",
  // null character
  a: "\x07",
  // bell character
  b: "\b",
  // backspace
  e: "\x1B",
  // escape character
  f: "\f",
  // form feed
  n: "\n",
  // line feed
  r: "\r",
  // carriage return
  t: "	",
  // horizontal tab
  v: "\v",
  // vertical tab
  N: "",
  // Unicode next line
  _: " ",
  // Unicode non-breaking space
  L: "\u2028",
  // Unicode line separator
  P: "\u2029",
  // Unicode paragraph separator
  " ": " ",
  '"': '"',
  "/": "/",
  "\\": "\\",
  "	": "	"
};
function parseCharCode(source, offset, length, onError) {
  const cc = source.substr(offset, length);
  const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
  const code = ok ? parseInt(cc, 16) : NaN;
  if (isNaN(code)) {
    const raw = source.substr(offset - 2, length + 2);
    onError(offset - 2, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
    return raw;
  }
  return String.fromCodePoint(code);
}
function composeScalar(ctx, token, tagToken, onError) {
  const { value, type, comment, range } = token.type === "block-scalar" ? resolveBlockScalar(ctx, token, onError) : resolveFlowScalar(token, ctx.options.strict, onError);
  const tagName = tagToken ? ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg)) : null;
  let tag;
  if (ctx.options.stringKeys && ctx.atKey) {
    tag = ctx.schema[SCALAR$1];
  } else if (tagName)
    tag = findScalarTagByName(ctx.schema, value, tagName, tagToken, onError);
  else if (token.type === "scalar")
    tag = findScalarTagByTest(ctx, value, token, onError);
  else
    tag = ctx.schema[SCALAR$1];
  let scalar;
  try {
    const res = tag.resolve(value, (msg) => onError(tagToken ?? token, "TAG_RESOLVE_FAILED", msg), ctx.options);
    scalar = isScalar$1(res) ? res : new Scalar(res);
  } catch (error) {
    const msg = error instanceof Error ? error.message : String(error);
    onError(tagToken ?? token, "TAG_RESOLVE_FAILED", msg);
    scalar = new Scalar(value);
  }
  scalar.range = range;
  scalar.source = value;
  if (type)
    scalar.type = type;
  if (tagName)
    scalar.tag = tagName;
  if (tag.format)
    scalar.format = tag.format;
  if (comment)
    scalar.comment = comment;
  return scalar;
}
function findScalarTagByName(schema2, value, tagName, tagToken, onError) {
  var _a;
  if (tagName === "!")
    return schema2[SCALAR$1];
  const matchWithTest = [];
  for (const tag of schema2.tags) {
    if (!tag.collection && tag.tag === tagName) {
      if (tag.default && tag.test)
        matchWithTest.push(tag);
      else
        return tag;
    }
  }
  for (const tag of matchWithTest)
    if ((_a = tag.test) == null ? void 0 : _a.test(value))
      return tag;
  const kt = schema2.knownTags[tagName];
  if (kt && !kt.collection) {
    schema2.tags.push(Object.assign({}, kt, { default: false, test: void 0 }));
    return kt;
  }
  onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, tagName !== "tag:yaml.org,2002:str");
  return schema2[SCALAR$1];
}
function findScalarTagByTest({ atKey, directives, schema: schema2 }, value, token, onError) {
  const tag = schema2.tags.find((tag2) => {
    var _a;
    return (tag2.default === true || atKey && tag2.default === "key") && ((_a = tag2.test) == null ? void 0 : _a.test(value));
  }) || schema2[SCALAR$1];
  if (schema2.compat) {
    const compat = schema2.compat.find((tag2) => {
      var _a;
      return tag2.default && ((_a = tag2.test) == null ? void 0 : _a.test(value));
    }) ?? schema2[SCALAR$1];
    if (tag.tag !== compat.tag) {
      const ts = directives.tagString(tag.tag);
      const cs = directives.tagString(compat.tag);
      const msg = `Value may be parsed as either ${ts} or ${cs}`;
      onError(token, "TAG_RESOLVE_FAILED", msg, true);
    }
  }
  return tag;
}
function emptyScalarPosition(offset, before, pos) {
  if (before) {
    if (pos === null)
      pos = before.length;
    for (let i = pos - 1; i >= 0; --i) {
      let st = before[i];
      switch (st.type) {
        case "space":
        case "comment":
        case "newline":
          offset -= st.source.length;
          continue;
      }
      st = before[++i];
      while ((st == null ? void 0 : st.type) === "space") {
        offset += st.source.length;
        st = before[++i];
      }
      break;
    }
  }
  return offset;
}
const CN = { composeNode, composeEmptyNode };
function composeNode(ctx, token, props, onError) {
  const atKey = ctx.atKey;
  const { spaceBefore, comment, anchor, tag } = props;
  let node;
  let isSrcToken = true;
  switch (token.type) {
    case "alias":
      node = composeAlias(ctx, token, onError);
      if (anchor || tag)
        onError(token, "ALIAS_PROPS", "An alias node must not specify any properties");
      break;
    case "scalar":
    case "single-quoted-scalar":
    case "double-quoted-scalar":
    case "block-scalar":
      node = composeScalar(ctx, token, tag, onError);
      if (anchor)
        node.anchor = anchor.source.substring(1);
      break;
    case "block-map":
    case "block-seq":
    case "flow-collection":
      node = composeCollection(CN, ctx, token, props, onError);
      if (anchor)
        node.anchor = anchor.source.substring(1);
      break;
    default: {
      const message = token.type === "error" ? token.message : `Unsupported token (type: ${token.type})`;
      onError(token, "UNEXPECTED_TOKEN", message);
      node = composeEmptyNode(ctx, token.offset, void 0, null, props, onError);
      isSrcToken = false;
    }
  }
  if (anchor && node.anchor === "")
    onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
  if (atKey && ctx.options.stringKeys && (!isScalar$1(node) || typeof node.value !== "string" || node.tag && node.tag !== "tag:yaml.org,2002:str")) {
    const msg = "With stringKeys, all keys must be strings";
    onError(tag ?? token, "NON_STRING_KEY", msg);
  }
  if (spaceBefore)
    node.spaceBefore = true;
  if (comment) {
    if (token.type === "scalar" && token.source === "")
      node.comment = comment;
    else
      node.commentBefore = comment;
  }
  if (ctx.options.keepSourceTokens && isSrcToken)
    node.srcToken = token;
  return node;
}
function composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {
  const token = {
    type: "scalar",
    offset: emptyScalarPosition(offset, before, pos),
    indent: -1,
    source: ""
  };
  const node = composeScalar(ctx, token, tag, onError);
  if (anchor) {
    node.anchor = anchor.source.substring(1);
    if (node.anchor === "")
      onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
  }
  if (spaceBefore)
    node.spaceBefore = true;
  if (comment) {
    node.comment = comment;
    node.range[2] = end;
  }
  return node;
}
function composeAlias({ options }, { offset, source, end }, onError) {
  const alias = new Alias(source.substring(1));
  if (alias.source === "")
    onError(offset, "BAD_ALIAS", "Alias cannot be an empty string");
  if (alias.source.endsWith(":"))
    onError(offset + source.length - 1, "BAD_ALIAS", "Alias ending in : is ambiguous", true);
  const valueEnd = offset + source.length;
  const re = resolveEnd(end, valueEnd, options.strict, onError);
  alias.range = [offset, valueEnd, re.offset];
  if (re.comment)
    alias.comment = re.comment;
  return alias;
}
function composeDoc(options, directives, { offset, start, value, end }, onError) {
  const opts = Object.assign({ _directives: directives }, options);
  const doc = new Document(void 0, opts);
  const ctx = {
    atKey: false,
    atRoot: true,
    directives: doc.directives,
    options: doc.options,
    schema: doc.schema
  };
  const props = resolveProps(start, {
    indicator: "doc-start",
    next: value ?? (end == null ? void 0 : end[0]),
    offset,
    onError,
    parentIndent: 0,
    startOnNewline: true
  });
  if (props.found) {
    doc.directives.docStart = true;
    if (value && (value.type === "block-map" || value.type === "block-seq") && !props.hasNewline)
      onError(props.end, "MISSING_CHAR", "Block collection cannot start on same line with directives-end marker");
  }
  doc.contents = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);
  const contentEnd = doc.contents.range[2];
  const re = resolveEnd(end, contentEnd, false, onError);
  if (re.comment)
    doc.comment = re.comment;
  doc.range = [offset, contentEnd, re.offset];
  return doc;
}
function getErrorPos(src) {
  if (typeof src === "number")
    return [src, src + 1];
  if (Array.isArray(src))
    return src.length === 2 ? src : [src[0], src[1]];
  const { offset, source } = src;
  return [offset, offset + (typeof source === "string" ? source.length : 1)];
}
function parsePrelude(prelude) {
  var _a;
  let comment = "";
  let atComment = false;
  let afterEmptyLine = false;
  for (let i = 0; i < prelude.length; ++i) {
    const source = prelude[i];
    switch (source[0]) {
      case "#":
        comment += (comment === "" ? "" : afterEmptyLine ? "\n\n" : "\n") + (source.substring(1) || " ");
        atComment = true;
        afterEmptyLine = false;
        break;
      case "%":
        if (((_a = prelude[i + 1]) == null ? void 0 : _a[0]) !== "#")
          i += 1;
        atComment = false;
        break;
      default:
        if (!atComment)
          afterEmptyLine = true;
        atComment = false;
    }
  }
  return { comment, afterEmptyLine };
}
class Composer {
  constructor(options = {}) {
    this.doc = null;
    this.atDirectives = false;
    this.prelude = [];
    this.errors = [];
    this.warnings = [];
    this.onError = (source, code, message, warning) => {
      const pos = getErrorPos(source);
      if (warning)
        this.warnings.push(new YAMLWarning(pos, code, message));
      else
        this.errors.push(new YAMLParseError(pos, code, message));
    };
    this.directives = new Directives({ version: options.version || "1.2" });
    this.options = options;
  }
  decorate(doc, afterDoc) {
    const { comment, afterEmptyLine } = parsePrelude(this.prelude);
    if (comment) {
      const dc = doc.contents;
      if (afterDoc) {
        doc.comment = doc.comment ? `${doc.comment}
${comment}` : comment;
      } else if (afterEmptyLine || doc.directives.docStart || !dc) {
        doc.commentBefore = comment;
      } else if (isCollection$1(dc) && !dc.flow && dc.items.length > 0) {
        let it = dc.items[0];
        if (isPair(it))
          it = it.key;
        const cb = it.commentBefore;
        it.commentBefore = cb ? `${comment}
${cb}` : comment;
      } else {
        const cb = dc.commentBefore;
        dc.commentBefore = cb ? `${comment}
${cb}` : comment;
      }
    }
    if (afterDoc) {
      Array.prototype.push.apply(doc.errors, this.errors);
      Array.prototype.push.apply(doc.warnings, this.warnings);
    } else {
      doc.errors = this.errors;
      doc.warnings = this.warnings;
    }
    this.prelude = [];
    this.errors = [];
    this.warnings = [];
  }
  /**
   * Current stream status information.
   *
   * Mostly useful at the end of input for an empty stream.
   */
  streamInfo() {
    return {
      comment: parsePrelude(this.prelude).comment,
      directives: this.directives,
      errors: this.errors,
      warnings: this.warnings
    };
  }
  /**
   * Compose tokens into documents.
   *
   * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
   * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
   */
  *compose(tokens, forceDoc = false, endOffset = -1) {
    for (const token of tokens)
      yield* this.next(token);
    yield* this.end(forceDoc, endOffset);
  }
  /** Advance the composer by one CST token. */
  *next(token) {
    switch (token.type) {
      case "directive":
        this.directives.add(token.source, (offset, message, warning) => {
          const pos = getErrorPos(token);
          pos[0] += offset;
          this.onError(pos, "BAD_DIRECTIVE", message, warning);
        });
        this.prelude.push(token.source);
        this.atDirectives = true;
        break;
      case "document": {
        const doc = composeDoc(this.options, this.directives, token, this.onError);
        if (this.atDirectives && !doc.directives.docStart)
          this.onError(token, "MISSING_CHAR", "Missing directives-end/doc-start indicator line");
        this.decorate(doc, false);
        if (this.doc)
          yield this.doc;
        this.doc = doc;
        this.atDirectives = false;
        break;
      }
      case "byte-order-mark":
      case "space":
        break;
      case "comment":
      case "newline":
        this.prelude.push(token.source);
        break;
      case "error": {
        const msg = token.source ? `${token.message}: ${JSON.stringify(token.source)}` : token.message;
        const error = new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg);
        if (this.atDirectives || !this.doc)
          this.errors.push(error);
        else
          this.doc.errors.push(error);
        break;
      }
      case "doc-end": {
        if (!this.doc) {
          const msg = "Unexpected doc-end without preceding document";
          this.errors.push(new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg));
          break;
        }
        this.doc.directives.docEnd = true;
        const end = resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
        this.decorate(this.doc, true);
        if (end.comment) {
          const dc = this.doc.comment;
          this.doc.comment = dc ? `${dc}
${end.comment}` : end.comment;
        }
        this.doc.range[2] = end.offset;
        break;
      }
      default:
        this.errors.push(new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", `Unsupported token ${token.type}`));
    }
  }
  /**
   * Call at end of input to yield any remaining document.
   *
   * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
   * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
   */
  *end(forceDoc = false, endOffset = -1) {
    if (this.doc) {
      this.decorate(this.doc, true);
      yield this.doc;
      this.doc = null;
    } else if (forceDoc) {
      const opts = Object.assign({ _directives: this.directives }, this.options);
      const doc = new Document(void 0, opts);
      if (this.atDirectives)
        this.onError(endOffset, "MISSING_CHAR", "Missing directives-end indicator line");
      doc.range = [0, endOffset, endOffset];
      this.decorate(doc, false);
      yield doc;
    }
  }
}
function resolveAsScalar(token, strict = true, onError) {
  if (token) {
    const _onError = (pos, code, message) => {
      const offset = typeof pos === "number" ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
      if (onError)
        onError(offset, code, message);
      else
        throw new YAMLParseError([offset, offset + 1], code, message);
    };
    switch (token.type) {
      case "scalar":
      case "single-quoted-scalar":
      case "double-quoted-scalar":
        return resolveFlowScalar(token, strict, _onError);
      case "block-scalar":
        return resolveBlockScalar({ options: { strict } }, token, _onError);
    }
  }
  return null;
}
function createScalarToken(value, context) {
  const { implicitKey = false, indent, inFlow = false, offset = -1, type = "PLAIN" } = context;
  const source = stringifyString({ type, value }, {
    implicitKey,
    indent: indent > 0 ? " ".repeat(indent) : "",
    inFlow,
    options: { blockQuote: true, lineWidth: -1 }
  });
  const end = context.end ?? [
    { type: "newline", offset: -1, indent, source: "\n" }
  ];
  switch (source[0]) {
    case "|":
    case ">": {
      const he = source.indexOf("\n");
      const head = source.substring(0, he);
      const body = source.substring(he + 1) + "\n";
      const props = [
        { type: "block-scalar-header", offset, indent, source: head }
      ];
      if (!addEndtoBlockProps(props, end))
        props.push({ type: "newline", offset: -1, indent, source: "\n" });
      return { type: "block-scalar", offset, indent, props, source: body };
    }
    case '"':
      return { type: "double-quoted-scalar", offset, indent, source, end };
    case "'":
      return { type: "single-quoted-scalar", offset, indent, source, end };
    default:
      return { type: "scalar", offset, indent, source, end };
  }
}
function setScalarValue(token, value, context = {}) {
  let { afterKey = false, implicitKey = false, inFlow = false, type } = context;
  let indent = "indent" in token ? token.indent : null;
  if (afterKey && typeof indent === "number")
    indent += 2;
  if (!type)
    switch (token.type) {
      case "single-quoted-scalar":
        type = "QUOTE_SINGLE";
        break;
      case "double-quoted-scalar":
        type = "QUOTE_DOUBLE";
        break;
      case "block-scalar": {
        const header = token.props[0];
        if (header.type !== "block-scalar-header")
          throw new Error("Invalid block scalar header");
        type = header.source[0] === ">" ? "BLOCK_FOLDED" : "BLOCK_LITERAL";
        break;
      }
      default:
        type = "PLAIN";
    }
  const source = stringifyString({ type, value }, {
    implicitKey: implicitKey || indent === null,
    indent: indent !== null && indent > 0 ? " ".repeat(indent) : "",
    inFlow,
    options: { blockQuote: true, lineWidth: -1 }
  });
  switch (source[0]) {
    case "|":
    case ">":
      setBlockScalarValue(token, source);
      break;
    case '"':
      setFlowScalarValue(token, source, "double-quoted-scalar");
      break;
    case "'":
      setFlowScalarValue(token, source, "single-quoted-scalar");
      break;
    default:
      setFlowScalarValue(token, source, "scalar");
  }
}
function setBlockScalarValue(token, source) {
  const he = source.indexOf("\n");
  const head = source.substring(0, he);
  const body = source.substring(he + 1) + "\n";
  if (token.type === "block-scalar") {
    const header = token.props[0];
    if (header.type !== "block-scalar-header")
      throw new Error("Invalid block scalar header");
    header.source = head;
    token.source = body;
  } else {
    const { offset } = token;
    const indent = "indent" in token ? token.indent : -1;
    const props = [
      { type: "block-scalar-header", offset, indent, source: head }
    ];
    if (!addEndtoBlockProps(props, "end" in token ? token.end : void 0))
      props.push({ type: "newline", offset: -1, indent, source: "\n" });
    for (const key of Object.keys(token))
      if (key !== "type" && key !== "offset")
        delete token[key];
    Object.assign(token, { type: "block-scalar", indent, props, source: body });
  }
}
function addEndtoBlockProps(props, end) {
  if (end)
    for (const st of end)
      switch (st.type) {
        case "space":
        case "comment":
          props.push(st);
          break;
        case "newline":
          props.push(st);
          return true;
      }
  return false;
}
function setFlowScalarValue(token, source, type) {
  switch (token.type) {
    case "scalar":
    case "double-quoted-scalar":
    case "single-quoted-scalar":
      token.type = type;
      token.source = source;
      break;
    case "block-scalar": {
      const end = token.props.slice(1);
      let oa = source.length;
      if (token.props[0].type === "block-scalar-header")
        oa -= token.props[0].source.length;
      for (const tok of end)
        tok.offset += oa;
      delete token.props;
      Object.assign(token, { type, source, end });
      break;
    }
    case "block-map":
    case "block-seq": {
      const offset = token.offset + source.length;
      const nl = { type: "newline", offset, indent: token.indent, source: "\n" };
      delete token.items;
      Object.assign(token, { type, source, end: [nl] });
      break;
    }
    default: {
      const indent = "indent" in token ? token.indent : -1;
      const end = "end" in token && Array.isArray(token.end) ? token.end.filter((st) => st.type === "space" || st.type === "comment" || st.type === "newline") : [];
      for (const key of Object.keys(token))
        if (key !== "type" && key !== "offset")
          delete token[key];
      Object.assign(token, { type, indent, source, end });
    }
  }
}
const stringify$1 = (cst2) => "type" in cst2 ? stringifyToken(cst2) : stringifyItem(cst2);
function stringifyToken(token) {
  switch (token.type) {
    case "block-scalar": {
      let res = "";
      for (const tok of token.props)
        res += stringifyToken(tok);
      return res + token.source;
    }
    case "block-map":
    case "block-seq": {
      let res = "";
      for (const item of token.items)
        res += stringifyItem(item);
      return res;
    }
    case "flow-collection": {
      let res = token.start.source;
      for (const item of token.items)
        res += stringifyItem(item);
      for (const st of token.end)
        res += st.source;
      return res;
    }
    case "document": {
      let res = stringifyItem(token);
      if (token.end)
        for (const st of token.end)
          res += st.source;
      return res;
    }
    default: {
      let res = token.source;
      if ("end" in token && token.end)
        for (const st of token.end)
          res += st.source;
      return res;
    }
  }
}
function stringifyItem({ start, key, sep, value }) {
  let res = "";
  for (const st of start)
    res += st.source;
  if (key)
    res += stringifyToken(key);
  if (sep)
    for (const st of sep)
      res += st.source;
  if (value)
    res += stringifyToken(value);
  return res;
}
const BREAK = Symbol("break visit");
const SKIP = Symbol("skip children");
const REMOVE = Symbol("remove item");
function visit(cst2, visitor) {
  if ("type" in cst2 && cst2.type === "document")
    cst2 = { start: cst2.start, value: cst2.value };
  _visit(Object.freeze([]), cst2, visitor);
}
visit.BREAK = BREAK;
visit.SKIP = SKIP;
visit.REMOVE = REMOVE;
visit.itemAtPath = (cst2, path) => {
  let item = cst2;
  for (const [field, index] of path) {
    const tok = item == null ? void 0 : item[field];
    if (tok && "items" in tok) {
      item = tok.items[index];
    } else
      return void 0;
  }
  return item;
};
visit.parentCollection = (cst2, path) => {
  const parent = visit.itemAtPath(cst2, path.slice(0, -1));
  const field = path[path.length - 1][0];
  const coll = parent == null ? void 0 : parent[field];
  if (coll && "items" in coll)
    return coll;
  throw new Error("Parent collection not found");
};
function _visit(path, item, visitor) {
  let ctrl = visitor(item, path);
  if (typeof ctrl === "symbol")
    return ctrl;
  for (const field of ["key", "value"]) {
    const token = item[field];
    if (token && "items" in token) {
      for (let i = 0; i < token.items.length; ++i) {
        const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);
        if (typeof ci === "number")
          i = ci - 1;
        else if (ci === BREAK)
          return BREAK;
        else if (ci === REMOVE) {
          token.items.splice(i, 1);
          i -= 1;
        }
      }
      if (typeof ctrl === "function" && field === "key")
        ctrl = ctrl(item, path);
    }
  }
  return typeof ctrl === "function" ? ctrl(item, path) : ctrl;
}
const BOM = "\uFEFF";
const DOCUMENT = "";
const FLOW_END = "";
const SCALAR = "";
const isCollection = (token) => !!token && "items" in token;
const isScalar = (token) => !!token && (token.type === "scalar" || token.type === "single-quoted-scalar" || token.type === "double-quoted-scalar" || token.type === "block-scalar");
function prettyToken(token) {
  switch (token) {
    case BOM:
      return "<BOM>";
    case DOCUMENT:
      return "<DOC>";
    case FLOW_END:
      return "<FLOW_END>";
    case SCALAR:
      return "<SCALAR>";
    default:
      return JSON.stringify(token);
  }
}
function tokenType(source) {
  switch (source) {
    case BOM:
      return "byte-order-mark";
    case DOCUMENT:
      return "doc-mode";
    case FLOW_END:
      return "flow-error-end";
    case SCALAR:
      return "scalar";
    case "---":
      return "doc-start";
    case "...":
      return "doc-end";
    case "":
    case "\n":
    case "\r\n":
      return "newline";
    case "-":
      return "seq-item-ind";
    case "?":
      return "explicit-key-ind";
    case ":":
      return "map-value-ind";
    case "{":
      return "flow-map-start";
    case "}":
      return "flow-map-end";
    case "[":
      return "flow-seq-start";
    case "]":
      return "flow-seq-end";
    case ",":
      return "comma";
  }
  switch (source[0]) {
    case " ":
    case "	":
      return "space";
    case "#":
      return "comment";
    case "%":
      return "directive-line";
    case "*":
      return "alias";
    case "&":
      return "anchor";
    case "!":
      return "tag";
    case "'":
      return "single-quoted-scalar";
    case '"':
      return "double-quoted-scalar";
    case "|":
    case ">":
      return "block-scalar-header";
  }
  return null;
}
const cst = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  BOM,
  DOCUMENT,
  FLOW_END,
  SCALAR,
  createScalarToken,
  isCollection,
  isScalar,
  prettyToken,
  resolveAsScalar,
  setScalarValue,
  stringify: stringify$1,
  tokenType,
  visit
}, Symbol.toStringTag, { value: "Module" }));
function isEmpty(ch) {
  switch (ch) {
    case void 0:
    case " ":
    case "\n":
    case "\r":
    case "	":
      return true;
    default:
      return false;
  }
}
const hexDigits = new Set("0123456789ABCDEFabcdef");
const tagChars = new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()");
const flowIndicatorChars = new Set(",[]{}");
const invalidAnchorChars = new Set(" ,[]{}\n\r	");
const isNotAnchorChar = (ch) => !ch || invalidAnchorChars.has(ch);
class Lexer {
  constructor() {
    this.atEnd = false;
    this.blockScalarIndent = -1;
    this.blockScalarKeep = false;
    this.buffer = "";
    this.flowKey = false;
    this.flowLevel = 0;
    this.indentNext = 0;
    this.indentValue = 0;
    this.lineEndPos = null;
    this.next = null;
    this.pos = 0;
  }
  /**
   * Generate YAML tokens from the `source` string. If `incomplete`,
   * a part of the last line may be left as a buffer for the next call.
   *
   * @returns A generator of lexical tokens
   */
  *lex(source, incomplete = false) {
    if (source) {
      if (typeof source !== "string")
        throw TypeError("source is not a string");
      this.buffer = this.buffer ? this.buffer + source : source;
      this.lineEndPos = null;
    }
    this.atEnd = !incomplete;
    let next = this.next ?? "stream";
    while (next && (incomplete || this.hasChars(1)))
      next = yield* this.parseNext(next);
  }
  atLineEnd() {
    let i = this.pos;
    let ch = this.buffer[i];
    while (ch === " " || ch === "	")
      ch = this.buffer[++i];
    if (!ch || ch === "#" || ch === "\n")
      return true;
    if (ch === "\r")
      return this.buffer[i + 1] === "\n";
    return false;
  }
  charAt(n) {
    return this.buffer[this.pos + n];
  }
  continueScalar(offset) {
    let ch = this.buffer[offset];
    if (this.indentNext > 0) {
      let indent = 0;
      while (ch === " ")
        ch = this.buffer[++indent + offset];
      if (ch === "\r") {
        const next = this.buffer[indent + offset + 1];
        if (next === "\n" || !next && !this.atEnd)
          return offset + indent + 1;
      }
      return ch === "\n" || indent >= this.indentNext || !ch && !this.atEnd ? offset + indent : -1;
    }
    if (ch === "-" || ch === ".") {
      const dt = this.buffer.substr(offset, 3);
      if ((dt === "---" || dt === "...") && isEmpty(this.buffer[offset + 3]))
        return -1;
    }
    return offset;
  }
  getLine() {
    let end = this.lineEndPos;
    if (typeof end !== "number" || end !== -1 && end < this.pos) {
      end = this.buffer.indexOf("\n", this.pos);
      this.lineEndPos = end;
    }
    if (end === -1)
      return this.atEnd ? this.buffer.substring(this.pos) : null;
    if (this.buffer[end - 1] === "\r")
      end -= 1;
    return this.buffer.substring(this.pos, end);
  }
  hasChars(n) {
    return this.pos + n <= this.buffer.length;
  }
  setNext(state) {
    this.buffer = this.buffer.substring(this.pos);
    this.pos = 0;
    this.lineEndPos = null;
    this.next = state;
    return null;
  }
  peek(n) {
    return this.buffer.substr(this.pos, n);
  }
  *parseNext(next) {
    switch (next) {
      case "stream":
        return yield* this.parseStream();
      case "line-start":
        return yield* this.parseLineStart();
      case "block-start":
        return yield* this.parseBlockStart();
      case "doc":
        return yield* this.parseDocument();
      case "flow":
        return yield* this.parseFlowCollection();
      case "quoted-scalar":
        return yield* this.parseQuotedScalar();
      case "block-scalar":
        return yield* this.parseBlockScalar();
      case "plain-scalar":
        return yield* this.parsePlainScalar();
    }
  }
  *parseStream() {
    let line = this.getLine();
    if (line === null)
      return this.setNext("stream");
    if (line[0] === BOM) {
      yield* this.pushCount(1);
      line = line.substring(1);
    }
    if (line[0] === "%") {
      let dirEnd = line.length;
      let cs = line.indexOf("#");
      while (cs !== -1) {
        const ch = line[cs - 1];
        if (ch === " " || ch === "	") {
          dirEnd = cs - 1;
          break;
        } else {
          cs = line.indexOf("#", cs + 1);
        }
      }
      while (true) {
        const ch = line[dirEnd - 1];
        if (ch === " " || ch === "	")
          dirEnd -= 1;
        else
          break;
      }
      const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
      yield* this.pushCount(line.length - n);
      this.pushNewline();
      return "stream";
    }
    if (this.atLineEnd()) {
      const sp = yield* this.pushSpaces(true);
      yield* this.pushCount(line.length - sp);
      yield* this.pushNewline();
      return "stream";
    }
    yield DOCUMENT;
    return yield* this.parseLineStart();
  }
  *parseLineStart() {
    const ch = this.charAt(0);
    if (!ch && !this.atEnd)
      return this.setNext("line-start");
    if (ch === "-" || ch === ".") {
      if (!this.atEnd && !this.hasChars(4))
        return this.setNext("line-start");
      const s = this.peek(3);
      if ((s === "---" || s === "...") && isEmpty(this.charAt(3))) {
        yield* this.pushCount(3);
        this.indentValue = 0;
        this.indentNext = 0;
        return s === "---" ? "doc" : "stream";
      }
    }
    this.indentValue = yield* this.pushSpaces(false);
    if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))
      this.indentNext = this.indentValue;
    return yield* this.parseBlockStart();
  }
  *parseBlockStart() {
    const [ch0, ch1] = this.peek(2);
    if (!ch1 && !this.atEnd)
      return this.setNext("block-start");
    if ((ch0 === "-" || ch0 === "?" || ch0 === ":") && isEmpty(ch1)) {
      const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
      this.indentNext = this.indentValue + 1;
      this.indentValue += n;
      return yield* this.parseBlockStart();
    }
    return "doc";
  }
  *parseDocument() {
    yield* this.pushSpaces(true);
    const line = this.getLine();
    if (line === null)
      return this.setNext("doc");
    let n = yield* this.pushIndicators();
    switch (line[n]) {
      case "#":
        yield* this.pushCount(line.length - n);
      // fallthrough
      case void 0:
        yield* this.pushNewline();
        return yield* this.parseLineStart();
      case "{":
      case "[":
        yield* this.pushCount(1);
        this.flowKey = false;
        this.flowLevel = 1;
        return "flow";
      case "}":
      case "]":
        yield* this.pushCount(1);
        return "doc";
      case "*":
        yield* this.pushUntil(isNotAnchorChar);
        return "doc";
      case '"':
      case "'":
        return yield* this.parseQuotedScalar();
      case "|":
      case ">":
        n += yield* this.parseBlockScalarHeader();
        n += yield* this.pushSpaces(true);
        yield* this.pushCount(line.length - n);
        yield* this.pushNewline();
        return yield* this.parseBlockScalar();
      default:
        return yield* this.parsePlainScalar();
    }
  }
  *parseFlowCollection() {
    let nl, sp;
    let indent = -1;
    do {
      nl = yield* this.pushNewline();
      if (nl > 0) {
        sp = yield* this.pushSpaces(false);
        this.indentValue = indent = sp;
      } else {
        sp = 0;
      }
      sp += yield* this.pushSpaces(true);
    } while (nl + sp > 0);
    const line = this.getLine();
    if (line === null)
      return this.setNext("flow");
    if (indent !== -1 && indent < this.indentNext && line[0] !== "#" || indent === 0 && (line.startsWith("---") || line.startsWith("...")) && isEmpty(line[3])) {
      const atFlowEndMarker = indent === this.indentNext - 1 && this.flowLevel === 1 && (line[0] === "]" || line[0] === "}");
      if (!atFlowEndMarker) {
        this.flowLevel = 0;
        yield FLOW_END;
        return yield* this.parseLineStart();
      }
    }
    let n = 0;
    while (line[n] === ",") {
      n += yield* this.pushCount(1);
      n += yield* this.pushSpaces(true);
      this.flowKey = false;
    }
    n += yield* this.pushIndicators();
    switch (line[n]) {
      case void 0:
        return "flow";
      case "#":
        yield* this.pushCount(line.length - n);
        return "flow";
      case "{":
      case "[":
        yield* this.pushCount(1);
        this.flowKey = false;
        this.flowLevel += 1;
        return "flow";
      case "}":
      case "]":
        yield* this.pushCount(1);
        this.flowKey = true;
        this.flowLevel -= 1;
        return this.flowLevel ? "flow" : "doc";
      case "*":
        yield* this.pushUntil(isNotAnchorChar);
        return "flow";
      case '"':
      case "'":
        this.flowKey = true;
        return yield* this.parseQuotedScalar();
      case ":": {
        const next = this.charAt(1);
        if (this.flowKey || isEmpty(next) || next === ",") {
          this.flowKey = false;
          yield* this.pushCount(1);
          yield* this.pushSpaces(true);
          return "flow";
        }
      }
      // fallthrough
      default:
        this.flowKey = false;
        return yield* this.parsePlainScalar();
    }
  }
  *parseQuotedScalar() {
    const quote = this.charAt(0);
    let end = this.buffer.indexOf(quote, this.pos + 1);
    if (quote === "'") {
      while (end !== -1 && this.buffer[end + 1] === "'")
        end = this.buffer.indexOf("'", end + 2);
    } else {
      while (end !== -1) {
        let n = 0;
        while (this.buffer[end - 1 - n] === "\\")
          n += 1;
        if (n % 2 === 0)
          break;
        end = this.buffer.indexOf('"', end + 1);
      }
    }
    const qb = this.buffer.substring(0, end);
    let nl = qb.indexOf("\n", this.pos);
    if (nl !== -1) {
      while (nl !== -1) {
        const cs = this.continueScalar(nl + 1);
        if (cs === -1)
          break;
        nl = qb.indexOf("\n", cs);
      }
      if (nl !== -1) {
        end = nl - (qb[nl - 1] === "\r" ? 2 : 1);
      }
    }
    if (end === -1) {
      if (!this.atEnd)
        return this.setNext("quoted-scalar");
      end = this.buffer.length;
    }
    yield* this.pushToIndex(end + 1, false);
    return this.flowLevel ? "flow" : "doc";
  }
  *parseBlockScalarHeader() {
    this.blockScalarIndent = -1;
    this.blockScalarKeep = false;
    let i = this.pos;
    while (true) {
      const ch = this.buffer[++i];
      if (ch === "+")
        this.blockScalarKeep = true;
      else if (ch > "0" && ch <= "9")
        this.blockScalarIndent = Number(ch) - 1;
      else if (ch !== "-")
        break;
    }
    return yield* this.pushUntil((ch) => isEmpty(ch) || ch === "#");
  }
  *parseBlockScalar() {
    let nl = this.pos - 1;
    let indent = 0;
    let ch;
    loop: for (let i2 = this.pos; ch = this.buffer[i2]; ++i2) {
      switch (ch) {
        case " ":
          indent += 1;
          break;
        case "\n":
          nl = i2;
          indent = 0;
          break;
        case "\r": {
          const next = this.buffer[i2 + 1];
          if (!next && !this.atEnd)
            return this.setNext("block-scalar");
          if (next === "\n")
            break;
        }
        // fallthrough
        default:
          break loop;
      }
    }
    if (!ch && !this.atEnd)
      return this.setNext("block-scalar");
    if (indent >= this.indentNext) {
      if (this.blockScalarIndent === -1)
        this.indentNext = indent;
      else {
        this.indentNext = this.blockScalarIndent + (this.indentNext === 0 ? 1 : this.indentNext);
      }
      do {
        const cs = this.continueScalar(nl + 1);
        if (cs === -1)
          break;
        nl = this.buffer.indexOf("\n", cs);
      } while (nl !== -1);
      if (nl === -1) {
        if (!this.atEnd)
          return this.setNext("block-scalar");
        nl = this.buffer.length;
      }
    }
    let i = nl + 1;
    ch = this.buffer[i];
    while (ch === " ")
      ch = this.buffer[++i];
    if (ch === "	") {
      while (ch === "	" || ch === " " || ch === "\r" || ch === "\n")
        ch = this.buffer[++i];
      nl = i - 1;
    } else if (!this.blockScalarKeep) {
      do {
        let i2 = nl - 1;
        let ch2 = this.buffer[i2];
        if (ch2 === "\r")
          ch2 = this.buffer[--i2];
        const lastChar = i2;
        while (ch2 === " ")
          ch2 = this.buffer[--i2];
        if (ch2 === "\n" && i2 >= this.pos && i2 + 1 + indent > lastChar)
          nl = i2;
        else
          break;
      } while (true);
    }
    yield SCALAR;
    yield* this.pushToIndex(nl + 1, true);
    return yield* this.parseLineStart();
  }
  *parsePlainScalar() {
    const inFlow = this.flowLevel > 0;
    let end = this.pos - 1;
    let i = this.pos - 1;
    let ch;
    while (ch = this.buffer[++i]) {
      if (ch === ":") {
        const next = this.buffer[i + 1];
        if (isEmpty(next) || inFlow && flowIndicatorChars.has(next))
          break;
        end = i;
      } else if (isEmpty(ch)) {
        let next = this.buffer[i + 1];
        if (ch === "\r") {
          if (next === "\n") {
            i += 1;
            ch = "\n";
            next = this.buffer[i + 1];
          } else
            end = i;
        }
        if (next === "#" || inFlow && flowIndicatorChars.has(next))
          break;
        if (ch === "\n") {
          const cs = this.continueScalar(i + 1);
          if (cs === -1)
            break;
          i = Math.max(i, cs - 2);
        }
      } else {
        if (inFlow && flowIndicatorChars.has(ch))
          break;
        end = i;
      }
    }
    if (!ch && !this.atEnd)
      return this.setNext("plain-scalar");
    yield SCALAR;
    yield* this.pushToIndex(end + 1, true);
    return inFlow ? "flow" : "doc";
  }
  *pushCount(n) {
    if (n > 0) {
      yield this.buffer.substr(this.pos, n);
      this.pos += n;
      return n;
    }
    return 0;
  }
  *pushToIndex(i, allowEmpty) {
    const s = this.buffer.slice(this.pos, i);
    if (s) {
      yield s;
      this.pos += s.length;
      return s.length;
    } else if (allowEmpty)
      yield "";
    return 0;
  }
  *pushIndicators() {
    switch (this.charAt(0)) {
      case "!":
        return (yield* this.pushTag()) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
      case "&":
        return (yield* this.pushUntil(isNotAnchorChar)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
      case "-":
      // this is an error
      case "?":
      // this is an error outside flow collections
      case ":": {
        const inFlow = this.flowLevel > 0;
        const ch1 = this.charAt(1);
        if (isEmpty(ch1) || inFlow && flowIndicatorChars.has(ch1)) {
          if (!inFlow)
            this.indentNext = this.indentValue + 1;
          else if (this.flowKey)
            this.flowKey = false;
          return (yield* this.pushCount(1)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
        }
      }
    }
    return 0;
  }
  *pushTag() {
    if (this.charAt(1) === "<") {
      let i = this.pos + 2;
      let ch = this.buffer[i];
      while (!isEmpty(ch) && ch !== ">")
        ch = this.buffer[++i];
      return yield* this.pushToIndex(ch === ">" ? i + 1 : i, false);
    } else {
      let i = this.pos + 1;
      let ch = this.buffer[i];
      while (ch) {
        if (tagChars.has(ch))
          ch = this.buffer[++i];
        else if (ch === "%" && hexDigits.has(this.buffer[i + 1]) && hexDigits.has(this.buffer[i + 2])) {
          ch = this.buffer[i += 3];
        } else
          break;
      }
      return yield* this.pushToIndex(i, false);
    }
  }
  *pushNewline() {
    const ch = this.buffer[this.pos];
    if (ch === "\n")
      return yield* this.pushCount(1);
    else if (ch === "\r" && this.charAt(1) === "\n")
      return yield* this.pushCount(2);
    else
      return 0;
  }
  *pushSpaces(allowTabs) {
    let i = this.pos - 1;
    let ch;
    do {
      ch = this.buffer[++i];
    } while (ch === " " || allowTabs && ch === "	");
    const n = i - this.pos;
    if (n > 0) {
      yield this.buffer.substr(this.pos, n);
      this.pos = i;
    }
    return n;
  }
  *pushUntil(test) {
    let i = this.pos;
    let ch = this.buffer[i];
    while (!test(ch))
      ch = this.buffer[++i];
    return yield* this.pushToIndex(i, false);
  }
}
class LineCounter {
  constructor() {
    this.lineStarts = [];
    this.addNewLine = (offset) => this.lineStarts.push(offset);
    this.linePos = (offset) => {
      let low = 0;
      let high = this.lineStarts.length;
      while (low < high) {
        const mid = low + high >> 1;
        if (this.lineStarts[mid] < offset)
          low = mid + 1;
        else
          high = mid;
      }
      if (this.lineStarts[low] === offset)
        return { line: low + 1, col: 1 };
      if (low === 0)
        return { line: 0, col: offset };
      const start = this.lineStarts[low - 1];
      return { line: low, col: offset - start + 1 };
    };
  }
}
function includesToken(list, type) {
  for (let i = 0; i < list.length; ++i)
    if (list[i].type === type)
      return true;
  return false;
}
function findNonEmptyIndex(list) {
  for (let i = 0; i < list.length; ++i) {
    switch (list[i].type) {
      case "space":
      case "comment":
      case "newline":
        break;
      default:
        return i;
    }
  }
  return -1;
}
function isFlowToken(token) {
  switch (token == null ? void 0 : token.type) {
    case "alias":
    case "scalar":
    case "single-quoted-scalar":
    case "double-quoted-scalar":
    case "flow-collection":
      return true;
    default:
      return false;
  }
}
function getPrevProps(parent) {
  switch (parent.type) {
    case "document":
      return parent.start;
    case "block-map": {
      const it = parent.items[parent.items.length - 1];
      return it.sep ?? it.start;
    }
    case "block-seq":
      return parent.items[parent.items.length - 1].start;
    /* istanbul ignore next should not happen */
    default:
      return [];
  }
}
function getFirstKeyStartProps(prev) {
  var _a;
  if (prev.length === 0)
    return [];
  let i = prev.length;
  loop: while (--i >= 0) {
    switch (prev[i].type) {
      case "doc-start":
      case "explicit-key-ind":
      case "map-value-ind":
      case "seq-item-ind":
      case "newline":
        break loop;
    }
  }
  while (((_a = prev[++i]) == null ? void 0 : _a.type) === "space") {
  }
  return prev.splice(i, prev.length);
}
function fixFlowSeqItems(fc) {
  if (fc.start.type === "flow-seq-start") {
    for (const it of fc.items) {
      if (it.sep && !it.value && !includesToken(it.start, "explicit-key-ind") && !includesToken(it.sep, "map-value-ind")) {
        if (it.key)
          it.value = it.key;
        delete it.key;
        if (isFlowToken(it.value)) {
          if (it.value.end)
            Array.prototype.push.apply(it.value.end, it.sep);
          else
            it.value.end = it.sep;
        } else
          Array.prototype.push.apply(it.start, it.sep);
        delete it.sep;
      }
    }
  }
}
class Parser {
  /**
   * @param onNewLine - If defined, called separately with the start position of
   *   each new line (in `parse()`, including the start of input).
   */
  constructor(onNewLine) {
    this.atNewLine = true;
    this.atScalar = false;
    this.indent = 0;
    this.offset = 0;
    this.onKeyLine = false;
    this.stack = [];
    this.source = "";
    this.type = "";
    this.lexer = new Lexer();
    this.onNewLine = onNewLine;
  }
  /**
   * Parse `source` as a YAML stream.
   * If `incomplete`, a part of the last line may be left as a buffer for the next call.
   *
   * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.
   *
   * @returns A generator of tokens representing each directive, document, and other structure.
   */
  *parse(source, incomplete = false) {
    if (this.onNewLine && this.offset === 0)
      this.onNewLine(0);
    for (const lexeme of this.lexer.lex(source, incomplete))
      yield* this.next(lexeme);
    if (!incomplete)
      yield* this.end();
  }
  /**
   * Advance the parser by the `source` of one lexical token.
   */
  *next(source) {
    this.source = source;
    if (this.atScalar) {
      this.atScalar = false;
      yield* this.step();
      this.offset += source.length;
      return;
    }
    const type = tokenType(source);
    if (!type) {
      const message = `Not a YAML token: ${source}`;
      yield* this.pop({ type: "error", offset: this.offset, message, source });
      this.offset += source.length;
    } else if (type === "scalar") {
      this.atNewLine = false;
      this.atScalar = true;
      this.type = "scalar";
    } else {
      this.type = type;
      yield* this.step();
      switch (type) {
        case "newline":
          this.atNewLine = true;
          this.indent = 0;
          if (this.onNewLine)
            this.onNewLine(this.offset + source.length);
          break;
        case "space":
          if (this.atNewLine && source[0] === " ")
            this.indent += source.length;
          break;
        case "explicit-key-ind":
        case "map-value-ind":
        case "seq-item-ind":
          if (this.atNewLine)
            this.indent += source.length;
          break;
        case "doc-mode":
        case "flow-error-end":
          return;
        default:
          this.atNewLine = false;
      }
      this.offset += source.length;
    }
  }
  /** Call at end of input to push out any remaining constructions */
  *end() {
    while (this.stack.length > 0)
      yield* this.pop();
  }
  get sourceToken() {
    const st = {
      type: this.type,
      offset: this.offset,
      indent: this.indent,
      source: this.source
    };
    return st;
  }
  *step() {
    const top = this.peek(1);
    if (this.type === "doc-end" && (!top || top.type !== "doc-end")) {
      while (this.stack.length > 0)
        yield* this.pop();
      this.stack.push({
        type: "doc-end",
        offset: this.offset,
        source: this.source
      });
      return;
    }
    if (!top)
      return yield* this.stream();
    switch (top.type) {
      case "document":
        return yield* this.document(top);
      case "alias":
      case "scalar":
      case "single-quoted-scalar":
      case "double-quoted-scalar":
        return yield* this.scalar(top);
      case "block-scalar":
        return yield* this.blockScalar(top);
      case "block-map":
        return yield* this.blockMap(top);
      case "block-seq":
        return yield* this.blockSequence(top);
      case "flow-collection":
        return yield* this.flowCollection(top);
      case "doc-end":
        return yield* this.documentEnd(top);
    }
    yield* this.pop();
  }
  peek(n) {
    return this.stack[this.stack.length - n];
  }
  *pop(error) {
    const token = error ?? this.stack.pop();
    if (!token) {
      const message = "Tried to pop an empty stack";
      yield { type: "error", offset: this.offset, source: "", message };
    } else if (this.stack.length === 0) {
      yield token;
    } else {
      const top = this.peek(1);
      if (token.type === "block-scalar") {
        token.indent = "indent" in top ? top.indent : 0;
      } else if (token.type === "flow-collection" && top.type === "document") {
        token.indent = 0;
      }
      if (token.type === "flow-collection")
        fixFlowSeqItems(token);
      switch (top.type) {
        case "document":
          top.value = token;
          break;
        case "block-scalar":
          top.props.push(token);
          break;
        case "block-map": {
          const it = top.items[top.items.length - 1];
          if (it.value) {
            top.items.push({ start: [], key: token, sep: [] });
            this.onKeyLine = true;
            return;
          } else if (it.sep) {
            it.value = token;
          } else {
            Object.assign(it, { key: token, sep: [] });
            this.onKeyLine = !it.explicitKey;
            return;
          }
          break;
        }
        case "block-seq": {
          const it = top.items[top.items.length - 1];
          if (it.value)
            top.items.push({ start: [], value: token });
          else
            it.value = token;
          break;
        }
        case "flow-collection": {
          const it = top.items[top.items.length - 1];
          if (!it || it.value)
            top.items.push({ start: [], key: token, sep: [] });
          else if (it.sep)
            it.value = token;
          else
            Object.assign(it, { key: token, sep: [] });
          return;
        }
        /* istanbul ignore next should not happen */
        default:
          yield* this.pop();
          yield* this.pop(token);
      }
      if ((top.type === "document" || top.type === "block-map" || top.type === "block-seq") && (token.type === "block-map" || token.type === "block-seq")) {
        const last = token.items[token.items.length - 1];
        if (last && !last.sep && !last.value && last.start.length > 0 && findNonEmptyIndex(last.start) === -1 && (token.indent === 0 || last.start.every((st) => st.type !== "comment" || st.indent < token.indent))) {
          if (top.type === "document")
            top.end = last.start;
          else
            top.items.push({ start: last.start });
          token.items.splice(-1, 1);
        }
      }
    }
  }
  *stream() {
    switch (this.type) {
      case "directive-line":
        yield { type: "directive", offset: this.offset, source: this.source };
        return;
      case "byte-order-mark":
      case "space":
      case "comment":
      case "newline":
        yield this.sourceToken;
        return;
      case "doc-mode":
      case "doc-start": {
        const doc = {
          type: "document",
          offset: this.offset,
          start: []
        };
        if (this.type === "doc-start")
          doc.start.push(this.sourceToken);
        this.stack.push(doc);
        return;
      }
    }
    yield {
      type: "error",
      offset: this.offset,
      message: `Unexpected ${this.type} token in YAML stream`,
      source: this.source
    };
  }
  *document(doc) {
    if (doc.value)
      return yield* this.lineEnd(doc);
    switch (this.type) {
      case "doc-start": {
        if (findNonEmptyIndex(doc.start) !== -1) {
          yield* this.pop();
          yield* this.step();
        } else
          doc.start.push(this.sourceToken);
        return;
      }
      case "anchor":
      case "tag":
      case "space":
      case "comment":
      case "newline":
        doc.start.push(this.sourceToken);
        return;
    }
    const bv = this.startBlockValue(doc);
    if (bv)
      this.stack.push(bv);
    else {
      yield {
        type: "error",
        offset: this.offset,
        message: `Unexpected ${this.type} token in YAML document`,
        source: this.source
      };
    }
  }
  *scalar(scalar) {
    if (this.type === "map-value-ind") {
      const prev = getPrevProps(this.peek(2));
      const start = getFirstKeyStartProps(prev);
      let sep;
      if (scalar.end) {
        sep = scalar.end;
        sep.push(this.sourceToken);
        delete scalar.end;
      } else
        sep = [this.sourceToken];
      const map2 = {
        type: "block-map",
        offset: scalar.offset,
        indent: scalar.indent,
        items: [{ start, key: scalar, sep }]
      };
      this.onKeyLine = true;
      this.stack[this.stack.length - 1] = map2;
    } else
      yield* this.lineEnd(scalar);
  }
  *blockScalar(scalar) {
    switch (this.type) {
      case "space":
      case "comment":
      case "newline":
        scalar.props.push(this.sourceToken);
        return;
      case "scalar":
        scalar.source = this.source;
        this.atNewLine = true;
        this.indent = 0;
        if (this.onNewLine) {
          let nl = this.source.indexOf("\n") + 1;
          while (nl !== 0) {
            this.onNewLine(this.offset + nl);
            nl = this.source.indexOf("\n", nl) + 1;
          }
        }
        yield* this.pop();
        break;
      /* istanbul ignore next should not happen */
      default:
        yield* this.pop();
        yield* this.step();
    }
  }
  *blockMap(map2) {
    var _a;
    const it = map2.items[map2.items.length - 1];
    switch (this.type) {
      case "newline":
        this.onKeyLine = false;
        if (it.value) {
          const end = "end" in it.value ? it.value.end : void 0;
          const last = Array.isArray(end) ? end[end.length - 1] : void 0;
          if ((last == null ? void 0 : last.type) === "comment")
            end == null ? void 0 : end.push(this.sourceToken);
          else
            map2.items.push({ start: [this.sourceToken] });
        } else if (it.sep) {
          it.sep.push(this.sourceToken);
        } else {
          it.start.push(this.sourceToken);
        }
        return;
      case "space":
      case "comment":
        if (it.value) {
          map2.items.push({ start: [this.sourceToken] });
        } else if (it.sep) {
          it.sep.push(this.sourceToken);
        } else {
          if (this.atIndentedComment(it.start, map2.indent)) {
            const prev = map2.items[map2.items.length - 2];
            const end = (_a = prev == null ? void 0 : prev.value) == null ? void 0 : _a.end;
            if (Array.isArray(end)) {
              Array.prototype.push.apply(end, it.start);
              end.push(this.sourceToken);
              map2.items.pop();
              return;
            }
          }
          it.start.push(this.sourceToken);
        }
        return;
    }
    if (this.indent >= map2.indent) {
      const atMapIndent = !this.onKeyLine && this.indent === map2.indent;
      const atNextItem = atMapIndent && (it.sep || it.explicitKey) && this.type !== "seq-item-ind";
      let start = [];
      if (atNextItem && it.sep && !it.value) {
        const nl = [];
        for (let i = 0; i < it.sep.length; ++i) {
          const st = it.sep[i];
          switch (st.type) {
            case "newline":
              nl.push(i);
              break;
            case "space":
              break;
            case "comment":
              if (st.indent > map2.indent)
                nl.length = 0;
              break;
            default:
              nl.length = 0;
          }
        }
        if (nl.length >= 2)
          start = it.sep.splice(nl[1]);
      }
      switch (this.type) {
        case "anchor":
        case "tag":
          if (atNextItem || it.value) {
            start.push(this.sourceToken);
            map2.items.push({ start });
            this.onKeyLine = true;
          } else if (it.sep) {
            it.sep.push(this.sourceToken);
          } else {
            it.start.push(this.sourceToken);
          }
          return;
        case "explicit-key-ind":
          if (!it.sep && !it.explicitKey) {
            it.start.push(this.sourceToken);
            it.explicitKey = true;
          } else if (atNextItem || it.value) {
            start.push(this.sourceToken);
            map2.items.push({ start, explicitKey: true });
          } else {
            this.stack.push({
              type: "block-map",
              offset: this.offset,
              indent: this.indent,
              items: [{ start: [this.sourceToken], explicitKey: true }]
            });
          }
          this.onKeyLine = true;
          return;
        case "map-value-ind":
          if (it.explicitKey) {
            if (!it.sep) {
              if (includesToken(it.start, "newline")) {
                Object.assign(it, { key: null, sep: [this.sourceToken] });
              } else {
                const start2 = getFirstKeyStartProps(it.start);
                this.stack.push({
                  type: "block-map",
                  offset: this.offset,
                  indent: this.indent,
                  items: [{ start: start2, key: null, sep: [this.sourceToken] }]
                });
              }
            } else if (it.value) {
              map2.items.push({ start: [], key: null, sep: [this.sourceToken] });
            } else if (includesToken(it.sep, "map-value-ind")) {
              this.stack.push({
                type: "block-map",
                offset: this.offset,
                indent: this.indent,
                items: [{ start, key: null, sep: [this.sourceToken] }]
              });
            } else if (isFlowToken(it.key) && !includesToken(it.sep, "newline")) {
              const start2 = getFirstKeyStartProps(it.start);
              const key = it.key;
              const sep = it.sep;
              sep.push(this.sourceToken);
              delete it.key;
              delete it.sep;
              this.stack.push({
                type: "block-map",
                offset: this.offset,
                indent: this.indent,
                items: [{ start: start2, key, sep }]
              });
            } else if (start.length > 0) {
              it.sep = it.sep.concat(start, this.sourceToken);
            } else {
              it.sep.push(this.sourceToken);
            }
          } else {
            if (!it.sep) {
              Object.assign(it, { key: null, sep: [this.sourceToken] });
            } else if (it.value || atNextItem) {
              map2.items.push({ start, key: null, sep: [this.sourceToken] });
            } else if (includesToken(it.sep, "map-value-ind")) {
              this.stack.push({
                type: "block-map",
                offset: this.offset,
                indent: this.indent,
                items: [{ start: [], key: null, sep: [this.sourceToken] }]
              });
            } else {
              it.sep.push(this.sourceToken);
            }
          }
          this.onKeyLine = true;
          return;
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar": {
          const fs = this.flowScalar(this.type);
          if (atNextItem || it.value) {
            map2.items.push({ start, key: fs, sep: [] });
            this.onKeyLine = true;
          } else if (it.sep) {
            this.stack.push(fs);
          } else {
            Object.assign(it, { key: fs, sep: [] });
            this.onKeyLine = true;
          }
          return;
        }
        default: {
          const bv = this.startBlockValue(map2);
          if (bv) {
            if (atMapIndent && bv.type !== "block-seq") {
              map2.items.push({ start });
            }
            this.stack.push(bv);
            return;
          }
        }
      }
    }
    yield* this.pop();
    yield* this.step();
  }
  *blockSequence(seq2) {
    var _a;
    const it = seq2.items[seq2.items.length - 1];
    switch (this.type) {
      case "newline":
        if (it.value) {
          const end = "end" in it.value ? it.value.end : void 0;
          const last = Array.isArray(end) ? end[end.length - 1] : void 0;
          if ((last == null ? void 0 : last.type) === "comment")
            end == null ? void 0 : end.push(this.sourceToken);
          else
            seq2.items.push({ start: [this.sourceToken] });
        } else
          it.start.push(this.sourceToken);
        return;
      case "space":
      case "comment":
        if (it.value)
          seq2.items.push({ start: [this.sourceToken] });
        else {
          if (this.atIndentedComment(it.start, seq2.indent)) {
            const prev = seq2.items[seq2.items.length - 2];
            const end = (_a = prev == null ? void 0 : prev.value) == null ? void 0 : _a.end;
            if (Array.isArray(end)) {
              Array.prototype.push.apply(end, it.start);
              end.push(this.sourceToken);
              seq2.items.pop();
              return;
            }
          }
          it.start.push(this.sourceToken);
        }
        return;
      case "anchor":
      case "tag":
        if (it.value || this.indent <= seq2.indent)
          break;
        it.start.push(this.sourceToken);
        return;
      case "seq-item-ind":
        if (this.indent !== seq2.indent)
          break;
        if (it.value || includesToken(it.start, "seq-item-ind"))
          seq2.items.push({ start: [this.sourceToken] });
        else
          it.start.push(this.sourceToken);
        return;
    }
    if (this.indent > seq2.indent) {
      const bv = this.startBlockValue(seq2);
      if (bv) {
        this.stack.push(bv);
        return;
      }
    }
    yield* this.pop();
    yield* this.step();
  }
  *flowCollection(fc) {
    const it = fc.items[fc.items.length - 1];
    if (this.type === "flow-error-end") {
      let top;
      do {
        yield* this.pop();
        top = this.peek(1);
      } while (top && top.type === "flow-collection");
    } else if (fc.end.length === 0) {
      switch (this.type) {
        case "comma":
        case "explicit-key-ind":
          if (!it || it.sep)
            fc.items.push({ start: [this.sourceToken] });
          else
            it.start.push(this.sourceToken);
          return;
        case "map-value-ind":
          if (!it || it.value)
            fc.items.push({ start: [], key: null, sep: [this.sourceToken] });
          else if (it.sep)
            it.sep.push(this.sourceToken);
          else
            Object.assign(it, { key: null, sep: [this.sourceToken] });
          return;
        case "space":
        case "comment":
        case "newline":
        case "anchor":
        case "tag":
          if (!it || it.value)
            fc.items.push({ start: [this.sourceToken] });
          else if (it.sep)
            it.sep.push(this.sourceToken);
          else
            it.start.push(this.sourceToken);
          return;
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar": {
          const fs = this.flowScalar(this.type);
          if (!it || it.value)
            fc.items.push({ start: [], key: fs, sep: [] });
          else if (it.sep)
            this.stack.push(fs);
          else
            Object.assign(it, { key: fs, sep: [] });
          return;
        }
        case "flow-map-end":
        case "flow-seq-end":
          fc.end.push(this.sourceToken);
          return;
      }
      const bv = this.startBlockValue(fc);
      if (bv)
        this.stack.push(bv);
      else {
        yield* this.pop();
        yield* this.step();
      }
    } else {
      const parent = this.peek(2);
      if (parent.type === "block-map" && (this.type === "map-value-ind" && parent.indent === fc.indent || this.type === "newline" && !parent.items[parent.items.length - 1].sep)) {
        yield* this.pop();
        yield* this.step();
      } else if (this.type === "map-value-ind" && parent.type !== "flow-collection") {
        const prev = getPrevProps(parent);
        const start = getFirstKeyStartProps(prev);
        fixFlowSeqItems(fc);
        const sep = fc.end.splice(1, fc.end.length);
        sep.push(this.sourceToken);
        const map2 = {
          type: "block-map",
          offset: fc.offset,
          indent: fc.indent,
          items: [{ start, key: fc, sep }]
        };
        this.onKeyLine = true;
        this.stack[this.stack.length - 1] = map2;
      } else {
        yield* this.lineEnd(fc);
      }
    }
  }
  flowScalar(type) {
    if (this.onNewLine) {
      let nl = this.source.indexOf("\n") + 1;
      while (nl !== 0) {
        this.onNewLine(this.offset + nl);
        nl = this.source.indexOf("\n", nl) + 1;
      }
    }
    return {
      type,
      offset: this.offset,
      indent: this.indent,
      source: this.source
    };
  }
  startBlockValue(parent) {
    switch (this.type) {
      case "alias":
      case "scalar":
      case "single-quoted-scalar":
      case "double-quoted-scalar":
        return this.flowScalar(this.type);
      case "block-scalar-header":
        return {
          type: "block-scalar",
          offset: this.offset,
          indent: this.indent,
          props: [this.sourceToken],
          source: ""
        };
      case "flow-map-start":
      case "flow-seq-start":
        return {
          type: "flow-collection",
          offset: this.offset,
          indent: this.indent,
          start: this.sourceToken,
          items: [],
          end: []
        };
      case "seq-item-ind":
        return {
          type: "block-seq",
          offset: this.offset,
          indent: this.indent,
          items: [{ start: [this.sourceToken] }]
        };
      case "explicit-key-ind": {
        this.onKeyLine = true;
        const prev = getPrevProps(parent);
        const start = getFirstKeyStartProps(prev);
        start.push(this.sourceToken);
        return {
          type: "block-map",
          offset: this.offset,
          indent: this.indent,
          items: [{ start, explicitKey: true }]
        };
      }
      case "map-value-ind": {
        this.onKeyLine = true;
        const prev = getPrevProps(parent);
        const start = getFirstKeyStartProps(prev);
        return {
          type: "block-map",
          offset: this.offset,
          indent: this.indent,
          items: [{ start, key: null, sep: [this.sourceToken] }]
        };
      }
    }
    return null;
  }
  atIndentedComment(start, indent) {
    if (this.type !== "comment")
      return false;
    if (this.indent <= indent)
      return false;
    return start.every((st) => st.type === "newline" || st.type === "space");
  }
  *documentEnd(docEnd) {
    if (this.type !== "doc-mode") {
      if (docEnd.end)
        docEnd.end.push(this.sourceToken);
      else
        docEnd.end = [this.sourceToken];
      if (this.type === "newline")
        yield* this.pop();
    }
  }
  *lineEnd(token) {
    switch (this.type) {
      case "comma":
      case "doc-start":
      case "doc-end":
      case "flow-seq-end":
      case "flow-map-end":
      case "map-value-ind":
        yield* this.pop();
        yield* this.step();
        break;
      case "newline":
        this.onKeyLine = false;
      // fallthrough
      case "space":
      case "comment":
      default:
        if (token.end)
          token.end.push(this.sourceToken);
        else
          token.end = [this.sourceToken];
        if (this.type === "newline")
          yield* this.pop();
    }
  }
}
function parseOptions(options) {
  const prettyErrors = options.prettyErrors !== false;
  const lineCounter = options.lineCounter || prettyErrors && new LineCounter() || null;
  return { lineCounter, prettyErrors };
}
function parseAllDocuments(source, options = {}) {
  const { lineCounter, prettyErrors } = parseOptions(options);
  const parser = new Parser(lineCounter == null ? void 0 : lineCounter.addNewLine);
  const composer = new Composer(options);
  const docs = Array.from(composer.compose(parser.parse(source)));
  if (prettyErrors && lineCounter)
    for (const doc of docs) {
      doc.errors.forEach(prettifyError(source, lineCounter));
      doc.warnings.forEach(prettifyError(source, lineCounter));
    }
  if (docs.length > 0)
    return docs;
  return Object.assign([], { empty: true }, composer.streamInfo());
}
function parseDocument(source, options = {}) {
  const { lineCounter, prettyErrors } = parseOptions(options);
  const parser = new Parser(lineCounter == null ? void 0 : lineCounter.addNewLine);
  const composer = new Composer(options);
  let doc = null;
  for (const _doc of composer.compose(parser.parse(source), true, source.length)) {
    if (!doc)
      doc = _doc;
    else if (doc.options.logLevel !== "silent") {
      doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2), "MULTIPLE_DOCS", "Source contains multiple documents; please use YAML.parseAllDocuments()"));
      break;
    }
  }
  if (prettyErrors && lineCounter) {
    doc.errors.forEach(prettifyError(source, lineCounter));
    doc.warnings.forEach(prettifyError(source, lineCounter));
  }
  return doc;
}
function parse(src, reviver, options) {
  let _reviver = void 0;
  if (typeof reviver === "function") {
    _reviver = reviver;
  } else if (options === void 0 && reviver && typeof reviver === "object") {
    options = reviver;
  }
  const doc = parseDocument(src, options);
  if (!doc)
    return null;
  doc.warnings.forEach((warning) => warn(doc.options.logLevel, warning));
  if (doc.errors.length > 0) {
    if (doc.options.logLevel !== "silent")
      throw doc.errors[0];
    else
      doc.errors = [];
  }
  return doc.toJS(Object.assign({ reviver: _reviver }, options));
}
function stringify(value, replacer, options) {
  let _replacer = null;
  if (typeof replacer === "function" || Array.isArray(replacer)) {
    _replacer = replacer;
  } else if (options === void 0 && replacer) {
    options = replacer;
  }
  if (typeof options === "string")
    options = options.length;
  if (typeof options === "number") {
    const indent = Math.round(options);
    options = indent < 1 ? void 0 : indent > 8 ? { indent: 8 } : { indent };
  }
  if (value === void 0) {
    const { keepUndefined } = options ?? replacer ?? {};
    if (!keepUndefined)
      return void 0;
  }
  if (isDocument(value) && !_replacer)
    return value.toString(options);
  return new Document(value, _replacer, options).toString(options);
}
const YAML = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Alias,
  CST: cst,
  Composer,
  Document,
  Lexer,
  LineCounter,
  Pair,
  Parser,
  Scalar,
  Schema,
  YAMLError,
  YAMLMap,
  YAMLParseError,
  YAMLSeq,
  YAMLWarning,
  isAlias,
  isCollection: isCollection$1,
  isDocument,
  isMap,
  isNode,
  isPair,
  isScalar: isScalar$1,
  isSeq,
  parse,
  parseAllDocuments,
  parseDocument,
  stringify,
  visit: visit$1,
  visitAsync
}, Symbol.toStringTag, { value: "Module" }));
function parseAriaSnapshot(yaml, text, options = {}) {
  var _a;
  const lineCounter = new yaml.LineCounter();
  const parseOptions2 = {
    keepSourceTokens: true,
    lineCounter,
    ...options
  };
  const yamlDoc = yaml.parseDocument(text, parseOptions2);
  const errors = [];
  const convertRange = (range) => {
    return [lineCounter.linePos(range[0]), lineCounter.linePos(range[1])];
  };
  const addError = (error) => {
    errors.push({
      message: error.message,
      range: [lineCounter.linePos(error.pos[0]), lineCounter.linePos(error.pos[1])]
    });
  };
  const convertSeq = (container, seq2) => {
    for (const item of seq2.items) {
      const itemIsString = item instanceof yaml.Scalar && typeof item.value === "string";
      if (itemIsString) {
        const childNode = KeyParser.parse(item, parseOptions2, errors);
        if (childNode) {
          container.children = container.children || [];
          container.children.push(childNode);
        }
        continue;
      }
      const itemIsMap = item instanceof yaml.YAMLMap;
      if (itemIsMap) {
        convertMap(container, item);
        continue;
      }
      errors.push({
        message: "Sequence items should be strings or maps",
        range: convertRange(item.range || seq2.range)
      });
    }
  };
  const convertMap = (container, map2) => {
    for (const entry of map2.items) {
      container.children = container.children || [];
      const keyIsString = entry.key instanceof yaml.Scalar && typeof entry.key.value === "string";
      if (!keyIsString) {
        errors.push({
          message: "Only string keys are supported",
          range: convertRange(entry.key.range || map2.range)
        });
        continue;
      }
      const key = entry.key;
      const value = entry.value;
      if (key.value === "text") {
        const valueIsString = value instanceof yaml.Scalar && typeof value.value === "string";
        if (!valueIsString) {
          errors.push({
            message: "Text value should be a string",
            range: convertRange(entry.value.range || map2.range)
          });
          continue;
        }
        container.children.push({
          kind: "text",
          text: valueOrRegex(value.value)
        });
        continue;
      }
      if (key.value === "/children") {
        const valueIsString = value instanceof yaml.Scalar && typeof value.value === "string";
        if (!valueIsString || value.value !== "contain" && value.value !== "equal" && value.value !== "deep-equal") {
          errors.push({
            message: 'Strict value should be "contain", "equal" or "deep-equal"',
            range: convertRange(entry.value.range || map2.range)
          });
          continue;
        }
        container.containerMode = value.value;
        continue;
      }
      if (key.value.startsWith("/")) {
        const valueIsString = value instanceof yaml.Scalar && typeof value.value === "string";
        if (!valueIsString) {
          errors.push({
            message: "Property value should be a string",
            range: convertRange(entry.value.range || map2.range)
          });
          continue;
        }
        container.props = container.props ?? {};
        container.props[key.value.slice(1)] = valueOrRegex(value.value);
        continue;
      }
      const childNode = KeyParser.parse(key, parseOptions2, errors);
      if (!childNode)
        continue;
      const valueIsScalar = value instanceof yaml.Scalar;
      if (valueIsScalar) {
        const type = typeof value.value;
        if (type !== "string" && type !== "number" && type !== "boolean") {
          errors.push({
            message: "Node value should be a string or a sequence",
            range: convertRange(entry.value.range || map2.range)
          });
          continue;
        }
        container.children.push({
          ...childNode,
          children: [{
            kind: "text",
            text: valueOrRegex(String(value.value))
          }]
        });
        continue;
      }
      const valueIsSequence = value instanceof yaml.YAMLSeq;
      if (valueIsSequence) {
        container.children.push(childNode);
        convertSeq(childNode, value);
        continue;
      }
      errors.push({
        message: "Map values should be strings or sequences",
        range: convertRange(entry.value.range || map2.range)
      });
    }
  };
  const fragment = { kind: "role", role: "fragment" };
  yamlDoc.errors.forEach(addError);
  if (errors.length)
    return { errors, fragment };
  if (!(yamlDoc.contents instanceof yaml.YAMLSeq)) {
    errors.push({
      message: 'Aria snapshot must be a YAML sequence, elements starting with " -"',
      range: yamlDoc.contents ? convertRange(yamlDoc.contents.range) : [{ line: 0, col: 0 }, { line: 0, col: 0 }]
    });
  }
  if (errors.length)
    return { errors, fragment };
  convertSeq(fragment, yamlDoc.contents);
  if (errors.length)
    return { errors, fragment: emptyFragment };
  if (((_a = fragment.children) == null ? void 0 : _a.length) === 1 && (!fragment.containerMode || fragment.containerMode === "contain"))
    return { fragment: fragment.children[0], errors: [] };
  return { fragment, errors: [] };
}
const emptyFragment = { kind: "role", role: "fragment" };
function normalizeWhitespace(text) {
  return text.replace(/[\u200b\u00ad]/g, "").replace(/[\r\n\s\t]+/g, " ").trim();
}
function valueOrRegex(value) {
  return value.startsWith("/") && value.endsWith("/") && value.length > 1 ? { pattern: value.slice(1, -1) } : normalizeWhitespace(value);
}
class KeyParser {
  static parse(text, options, errors) {
    try {
      return new KeyParser(text.value, options)._parse();
    } catch (e) {
      if (e instanceof ParserError) {
        const message = options.prettyErrors === false ? e.message : e.message + ":\n\n" + text.value + "\n" + " ".repeat(e.pos) + "^\n";
        errors.push({
          message,
          range: [options.lineCounter.linePos(text.range[0]), options.lineCounter.linePos(text.range[0] + e.pos)]
        });
        return null;
      }
      throw e;
    }
  }
  constructor(input, options) {
    this._input = input;
    this._pos = 0;
    this._length = input.length;
    this._options = options;
  }
  _peek() {
    return this._input[this._pos] || "";
  }
  _next() {
    if (this._pos < this._length)
      return this._input[this._pos++];
    return null;
  }
  _eof() {
    return this._pos >= this._length;
  }
  _isWhitespace() {
    return !this._eof() && /\s/.test(this._peek());
  }
  _skipWhitespace() {
    while (this._isWhitespace())
      this._pos++;
  }
  _readIdentifier(type) {
    if (this._eof())
      this._throwError(`Unexpected end of input when expecting ${type}`);
    const start = this._pos;
    while (!this._eof() && /[a-zA-Z]/.test(this._peek()))
      this._pos++;
    return this._input.slice(start, this._pos);
  }
  _readString() {
    let result = "";
    let escaped = false;
    while (!this._eof()) {
      const ch = this._next();
      if (escaped) {
        result += ch;
        escaped = false;
      } else if (ch === "\\") {
        escaped = true;
      } else if (ch === '"') {
        return result;
      } else {
        result += ch;
      }
    }
    this._throwError("Unterminated string");
  }
  _throwError(message, offset = 0) {
    throw new ParserError(message, offset || this._pos);
  }
  _readRegex() {
    let result = "";
    let escaped = false;
    let insideClass = false;
    while (!this._eof()) {
      const ch = this._next();
      if (escaped) {
        result += ch;
        escaped = false;
      } else if (ch === "\\") {
        escaped = true;
        result += ch;
      } else if (ch === "/" && !insideClass) {
        return { pattern: result };
      } else if (ch === "[") {
        insideClass = true;
        result += ch;
      } else if (ch === "]" && insideClass) {
        result += ch;
        insideClass = false;
      } else {
        result += ch;
      }
    }
    this._throwError("Unterminated regex");
  }
  _readStringOrRegex() {
    const ch = this._peek();
    if (ch === '"') {
      this._next();
      return normalizeWhitespace(this._readString());
    }
    if (ch === "/") {
      this._next();
      return this._readRegex();
    }
    return null;
  }
  _readAttributes(result) {
    let errorPos = this._pos;
    while (true) {
      this._skipWhitespace();
      if (this._peek() === "[") {
        this._next();
        this._skipWhitespace();
        errorPos = this._pos;
        const flagName = this._readIdentifier("attribute");
        this._skipWhitespace();
        let flagValue = "";
        if (this._peek() === "=") {
          this._next();
          this._skipWhitespace();
          errorPos = this._pos;
          while (this._peek() !== "]" && !this._isWhitespace() && !this._eof())
            flagValue += this._next();
        }
        this._skipWhitespace();
        if (this._peek() !== "]")
          this._throwError("Expected ]");
        this._next();
        this._applyAttribute(result, flagName, flagValue || "true", errorPos);
      } else {
        break;
      }
    }
  }
  _parse() {
    this._skipWhitespace();
    const role = this._readIdentifier("role");
    this._skipWhitespace();
    const name = this._readStringOrRegex() || "";
    const result = { kind: "role", role, name };
    this._readAttributes(result);
    this._skipWhitespace();
    if (!this._eof())
      this._throwError("Unexpected input");
    return result;
  }
  _applyAttribute(node, key, value, errorPos) {
    if (key === "checked") {
      this._assert(value === "true" || value === "false" || value === "mixed", 'Value of "checked" attribute must be a boolean or "mixed"', errorPos);
      node.checked = value === "true" ? true : value === "false" ? false : "mixed";
      return;
    }
    if (key === "disabled") {
      this._assert(value === "true" || value === "false", 'Value of "disabled" attribute must be a boolean', errorPos);
      node.disabled = value === "true";
      return;
    }
    if (key === "expanded") {
      this._assert(value === "true" || value === "false", 'Value of "expanded" attribute must be a boolean', errorPos);
      node.expanded = value === "true";
      return;
    }
    if (key === "active") {
      this._assert(value === "true" || value === "false", 'Value of "active" attribute must be a boolean', errorPos);
      node.active = value === "true";
      return;
    }
    if (key === "level") {
      this._assert(!isNaN(Number(value)), 'Value of "level" attribute must be a number', errorPos);
      node.level = Number(value);
      return;
    }
    if (key === "pressed") {
      this._assert(value === "true" || value === "false" || value === "mixed", 'Value of "pressed" attribute must be a boolean or "mixed"', errorPos);
      node.pressed = value === "true" ? true : value === "false" ? false : "mixed";
      return;
    }
    if (key === "selected") {
      this._assert(value === "true" || value === "false", 'Value of "selected" attribute must be a boolean', errorPos);
      node.selected = value === "true";
      return;
    }
    this._assert(false, `Unsupported attribute [${key}]`, errorPos);
  }
  _assert(value, message, valuePos) {
    if (!value)
      this._throwError(message || "Assertion error", valuePos);
  }
}
class ParserError extends Error {
  constructor(message, pos) {
    super(message);
    this.pos = pos;
  }
}
const Dialog = ({
  className,
  style: externalStyle,
  open,
  isModal,
  width,
  verticalOffset,
  requestClose,
  anchor,
  dataTestId,
  children
}) => {
  const dialogRef = reactExports.useRef(null);
  const [_, setRecalculateDimensionsCount] = reactExports.useState(0);
  let style = externalStyle;
  if (anchor == null ? void 0 : anchor.current) {
    const bounds = anchor.current.getBoundingClientRect();
    style = {
      position: "fixed",
      margin: 0,
      top: bounds.bottom + (verticalOffset ?? 0),
      left: buildTopLeftCoord(bounds, width ?? 0),
      width,
      zIndex: 100,
      ...externalStyle
    };
  }
  reactExports.useEffect(() => {
    const onClick = (event) => {
      if (!dialogRef.current || !(event.target instanceof Node))
        return;
      if (!dialogRef.current.contains(event.target))
        requestClose == null ? void 0 : requestClose();
    };
    const onKeyDown = (event) => {
      if (event.key === "Escape")
        requestClose == null ? void 0 : requestClose();
    };
    if (open) {
      document.addEventListener("mousedown", onClick);
      document.addEventListener("keydown", onKeyDown);
      return () => {
        document.removeEventListener("mousedown", onClick);
        document.removeEventListener("keydown", onKeyDown);
      };
    }
    return () => {
    };
  }, [open, requestClose]);
  reactExports.useEffect(() => {
    const onResize = () => setRecalculateDimensionsCount((count) => count + 1);
    window.addEventListener("resize", onResize);
    return () => {
      window.removeEventListener("resize", onResize);
    };
  }, []);
  reactExports.useLayoutEffect(() => {
    if (!dialogRef.current)
      return;
    if (open) {
      if (isModal)
        dialogRef.current.showModal();
      else
        dialogRef.current.show();
    } else {
      dialogRef.current.close();
    }
  }, [open, isModal]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("dialog", { ref: dialogRef, style, className, "data-testid": dataTestId, children });
};
const buildTopLeftCoord = (bounds, width) => {
  const leftAlignCoord = buildTopLeftCoordWithAlignment(bounds, width, "left");
  if (leftAlignCoord.inBounds)
    return leftAlignCoord.value;
  const rightAlignCoord = buildTopLeftCoordWithAlignment(
    bounds,
    width,
    "right"
  );
  if (rightAlignCoord.inBounds)
    return rightAlignCoord.value;
  return leftAlignCoord.value;
};
const buildTopLeftCoordWithAlignment = (bounds, width, alignment) => {
  const maxLeft = document.documentElement.clientWidth;
  if (alignment === "left") {
    const value = bounds.left;
    return {
      value,
      inBounds: value + width <= maxLeft
    };
  } else {
    const value = bounds.right - width;
    return {
      value,
      inBounds: bounds.right - width >= 0
    };
  }
};
const Recorder = ({
  sources,
  paused,
  log,
  mode
}) => {
  const [selectedFileId, setSelectedFileId] = reactExports.useState();
  const [selectedTab, setSelectedTab] = useSetting("recorderPropertiesTab", "log");
  const [ariaSnapshot, setAriaSnapshot] = reactExports.useState();
  const [ariaSnapshotErrors, setAriaSnapshotErrors] = reactExports.useState();
  const [settingsOpen, setSettingsOpen] = reactExports.useState(false);
  const [darkMode, setDarkMode] = useDarkModeSetting();
  const [autoExpect, setAutoExpect] = useSetting("autoExpect", false);
  const settingsButtonRef = reactExports.useRef(null);
  window.playwrightSelectSource = (selectedSourceId) => setSelectedFileId(selectedSourceId);
  reactExports.useEffect(() => {
    window.dispatch({ event: "setAutoExpect", params: { autoExpect } });
  }, [autoExpect]);
  const source = reactExports.useMemo(() => {
    const source2 = sources.find((s) => s.id === selectedFileId);
    return source2 ?? emptySource();
  }, [sources, selectedFileId]);
  const [locator, setLocator] = reactExports.useState("");
  window.playwrightElementPicked = (elementInfo, userGesture) => {
    const language = source.language;
    setLocator(asLocator(language, elementInfo.selector));
    setAriaSnapshot(elementInfo.ariaSnapshot);
    setAriaSnapshotErrors([]);
    if (userGesture && selectedTab !== "locator" && selectedTab !== "aria")
      setSelectedTab("locator");
    if (mode === "inspecting" && selectedTab === "aria") ;
    else {
      window.dispatch({ event: "setMode", params: { mode: mode === "inspecting" ? "standby" : "recording" } }).catch(() => {
      });
    }
  };
  const messagesEndRef = reactExports.useRef(null);
  reactExports.useLayoutEffect(() => {
    var _a;
    (_a = messagesEndRef.current) == null ? void 0 : _a.scrollIntoView({ block: "center", inline: "nearest" });
  }, [messagesEndRef]);
  reactExports.useLayoutEffect(() => {
    const handleKeyDown = (event) => {
      switch (event.key) {
        case "F8":
          event.preventDefault();
          if (paused)
            window.dispatch({ event: "resume" });
          else
            window.dispatch({ event: "pause" });
          break;
        case "F10":
          event.preventDefault();
          if (paused)
            window.dispatch({ event: "step" });
          break;
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [paused]);
  const onEditorChange = reactExports.useCallback((selector) => {
    if (mode === "none" || mode === "inspecting")
      window.dispatch({ event: "setMode", params: { mode: "standby" } });
    setLocator(selector);
    window.dispatch({ event: "highlightRequested", params: { selector } });
  }, [mode]);
  const onAriaEditorChange = reactExports.useCallback((ariaSnapshot2) => {
    if (mode === "none" || mode === "inspecting")
      window.dispatch({ event: "setMode", params: { mode: "standby" } });
    const { fragment, errors } = parseAriaSnapshot(YAML, ariaSnapshot2, { prettyErrors: false });
    const highlights = errors.map((error) => {
      const highlight = {
        message: error.message,
        line: error.range[1].line,
        column: error.range[1].col,
        type: "subtle-error"
      };
      return highlight;
    });
    setAriaSnapshotErrors(highlights);
    setAriaSnapshot(ariaSnapshot2);
    if (!errors.length)
      window.dispatch({ event: "highlightRequested", params: { ariaTemplate: fragment } });
  }, [mode]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "recorder", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Toolbar, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "circle-large-filled", title: "Record", toggled: mode === "recording" || mode === "recording-inspecting" || mode === "assertingText" || mode === "assertingVisibility", onClick: () => {
        window.dispatch({ event: "setMode", params: { mode: mode === "none" || mode === "standby" || mode === "inspecting" ? "recording" : "standby" } });
      }, children: "Record" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarSeparator, {}),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "inspect", title: "Pick locator", toggled: mode === "inspecting" || mode === "recording-inspecting", onClick: () => {
        const newMode = {
          "inspecting": "standby",
          "none": "inspecting",
          "standby": "inspecting",
          "recording": "recording-inspecting",
          "recording-inspecting": "recording",
          "assertingText": "recording-inspecting",
          "assertingVisibility": "recording-inspecting",
          "assertingValue": "recording-inspecting",
          "assertingSnapshot": "recording-inspecting"
        }[mode];
        window.dispatch({ event: "setMode", params: { mode: newMode } }).catch(() => {
        });
      } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "eye", title: "Assert visibility", toggled: mode === "assertingVisibility", disabled: mode === "none" || mode === "standby" || mode === "inspecting", onClick: () => {
        window.dispatch({ event: "setMode", params: { mode: mode === "assertingVisibility" ? "recording" : "assertingVisibility" } });
      } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "whole-word", title: "Assert text", toggled: mode === "assertingText", disabled: mode === "none" || mode === "standby" || mode === "inspecting", onClick: () => {
        window.dispatch({ event: "setMode", params: { mode: mode === "assertingText" ? "recording" : "assertingText" } });
      } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "symbol-constant", title: "Assert value", toggled: mode === "assertingValue", disabled: mode === "none" || mode === "standby" || mode === "inspecting", onClick: () => {
        window.dispatch({ event: "setMode", params: { mode: mode === "assertingValue" ? "recording" : "assertingValue" } });
      } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "gist", title: "Assert snapshot", toggled: mode === "assertingSnapshot", disabled: mode === "none" || mode === "standby" || mode === "inspecting", onClick: () => {
        window.dispatch({ event: "setMode", params: { mode: mode === "assertingSnapshot" ? "recording" : "assertingSnapshot" } });
      } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarSeparator, {}),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "files", title: "Copy", disabled: !source || !source.text, onClick: () => {
        copy(source.text);
      } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "debug-continue", title: "Resume (F8)", ariaLabel: "Resume", disabled: !paused, onClick: () => {
        window.dispatch({ event: "resume" });
      } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "debug-pause", title: "Pause (F8)", ariaLabel: "Pause", disabled: paused, onClick: () => {
        window.dispatch({ event: "pause" });
      } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "debug-step-over", title: "Step over (F10)", ariaLabel: "Step over", disabled: !paused, onClick: () => {
        window.dispatch({ event: "step" });
      } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { flex: "auto" } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Target:" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(SourceChooser, { fileId: source.id, sources, setFileId: (fileId) => {
        setSelectedFileId(fileId);
        window.dispatch({ event: "fileChanged", params: { fileId } });
      } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "clear-all", title: "Clear", disabled: !source || !source.text, onClick: () => {
        window.dispatch({ event: "clear" });
      } }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        ToolbarButton,
        {
          ref: settingsButtonRef,
          icon: "settings-gear",
          title: "Settings",
          onClick: () => setSettingsOpen((current) => !current)
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        Dialog,
        {
          style: { padding: "4px 8px" },
          open: settingsOpen,
          width: 200,
          verticalOffset: 8,
          requestClose: () => setSettingsOpen(false),
          anchor: settingsButtonRef,
          dataTestId: "settings-dialog",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "setting", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("input", { type: "checkbox", id: "dark-mode-setting", checked: darkMode, onChange: () => setDarkMode(!darkMode) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "dark-mode-setting", children: "Dark mode" })
            ] }, "dark-mode-setting"),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "setting", title: "Automatically generate assertions while recording", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("input", { type: "checkbox", id: "auto-expect-setting", checked: autoExpect, onChange: () => {
                window.dispatch({ event: "setAutoExpect", params: { autoExpect: !autoExpect } });
                setAutoExpect(!autoExpect);
              } }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "auto-expect-setting", children: "Generate assertions" })
            ] }, "auto-expect-setting")
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      SplitView,
      {
        sidebarSize: 200,
        main: /* @__PURE__ */ jsxRuntimeExports.jsx(CodeMirrorWrapper, { text: source.text, highlighter: source.language, highlight: source.highlight, revealLine: source.revealLine, readOnly: true, lineNumbers: true }),
        sidebar: /* @__PURE__ */ jsxRuntimeExports.jsx(
          TabbedPane,
          {
            rightToolbar: selectedTab === "locator" || selectedTab === "aria" ? [/* @__PURE__ */ jsxRuntimeExports.jsx(ToolbarButton, { icon: "files", title: "Copy", onClick: () => copy((selectedTab === "locator" ? locator : ariaSnapshot) || "") }, 1)] : [],
            tabs: [
              {
                id: "locator",
                title: "Locator",
                render: () => /* @__PURE__ */ jsxRuntimeExports.jsx(CodeMirrorWrapper, { text: locator, placeholder: "Type locator to inspect", highlighter: source.language, focusOnChange: true, onChange: onEditorChange, wrapLines: true })
              },
              {
                id: "log",
                title: "Log",
                render: () => /* @__PURE__ */ jsxRuntimeExports.jsx(CallLogView, { language: source.language, log: Array.from(log.values()) })
              },
              {
                id: "aria",
                title: "Aria",
                render: () => /* @__PURE__ */ jsxRuntimeExports.jsx(CodeMirrorWrapper, { text: ariaSnapshot || "", placeholder: "Type aria template to match", highlighter: "yaml", onChange: onAriaEditorChange, highlight: ariaSnapshotErrors, wrapLines: true })
              }
            ],
            selectedTab,
            setSelectedTab
          }
        )
      }
    )
  ] });
};
const Main = ({}) => {
  const [sources, setSources] = reactExports.useState([]);
  const [paused, setPaused] = reactExports.useState(false);
  const [log, setLog] = reactExports.useState(/* @__PURE__ */ new Map());
  const [mode, setMode] = reactExports.useState("none");
  reactExports.useLayoutEffect(() => {
    window.playwrightSetMode = setMode;
    window.playwrightSetSources = (sources2) => {
      setSources(sources2);
      window.playwrightSourcesEchoForTest = sources2;
    };
    window.playwrightSetPageURL = (url) => {
      document.title = url ? `Playwright Inspector - ${url}` : `Playwright Inspector`;
    };
    window.playwrightSetPaused = setPaused;
    window.playwrightUpdateLogs = (callLogs) => {
      setLog((log2) => {
        const newLog = new Map(log2);
        for (const callLog of callLogs) {
          callLog.reveal = !log2.has(callLog.id);
          newLog.set(callLog.id, callLog);
        }
        return newLog;
      });
    };
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Recorder, { sources, paused, log, mode });
};
(async () => {
  applyTheme();
  clientExports.createRoot(document.querySelector("#root")).render(/* @__PURE__ */ jsxRuntimeExports.jsx(Main, {}));
})();
export {
  getDefaultExportFromCjs as g
};


//# sourceMappingURL=data:application/json;base64,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LENBQUM7QUFBRSxRQUFFLFdBQVM7QUFBQSxJQUFDO0FBQUMsUUFBRyxLQUFHLEVBQUUsYUFBYSxNQUFJLEtBQUssSUFBRSxFQUFFLGNBQWEsRUFBRSxZQUFTLEVBQUUsQ0FBQyxNQUFJLEVBQUUsQ0FBQyxJQUFFLEVBQUUsQ0FBQztBQUFHLFdBQU0sRUFBQyxVQUFTLEdBQUUsTUFBSyxHQUFFLEtBQUksR0FBRSxLQUFJLEdBQUUsT0FBTSxHQUFFLFFBQU8sRUFBRSxRQUFPO0FBQUEsRUFBQztBQUM3YSxXQUFTLEVBQUUsR0FBRSxHQUFFO0FBQUMsV0FBTSxFQUFDLFVBQVMsR0FBRSxNQUFLLEVBQUUsTUFBSyxLQUFJLEdBQUUsS0FBSSxFQUFFLEtBQUksT0FBTSxFQUFFLE9BQU0sUUFBTyxFQUFFLE9BQU07QUFBQSxFQUFDO0FBQUMsV0FBUyxFQUFFLEdBQUU7QUFBQyxXQUFNLGFBQVcsT0FBTyxLQUFHLFNBQU8sS0FBRyxFQUFFLGFBQVc7QUFBQSxFQUFDO0FBQUMsV0FBUyxPQUFPLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBQyxLQUFJLE1BQUssS0FBSSxLQUFJO0FBQUUsV0FBTSxNQUFJLEVBQUUsUUFBUSxTQUFRLFNBQVNBLElBQUU7QUFBQyxhQUFPLEVBQUVBLEVBQUM7QUFBQSxJQUFDLENBQUM7QUFBQSxFQUFDO0FBQUMsTUFBSSxJQUFFO0FBQU8sV0FBUyxFQUFFLEdBQUUsR0FBRTtBQUFDLFdBQU0sYUFBVyxPQUFPLEtBQUcsU0FBTyxLQUFHLFFBQU0sRUFBRSxNQUFJLE9BQU8sS0FBRyxFQUFFLEdBQUcsSUFBRSxFQUFFLFNBQVMsRUFBRTtBQUFBLEVBQUM7QUFDL1csV0FBUyxFQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxPQUFPO0FBQUUsUUFBRyxnQkFBYyxLQUFHLGNBQVksRUFBRSxLQUFFO0FBQUssUUFBSSxJQUFFO0FBQUcsUUFBRyxTQUFPLEVBQUUsS0FBRTtBQUFBLFFBQVEsU0FBTyxHQUFDO0FBQUEsTUFBRSxLQUFLO0FBQUEsTUFBUyxLQUFLO0FBQVMsWUFBRTtBQUFHO0FBQUEsTUFBTSxLQUFLO0FBQVMsZ0JBQU8sRUFBRSxVQUFRO0FBQUEsVUFBRSxLQUFLO0FBQUEsVUFBRSxLQUFLO0FBQUUsZ0JBQUU7QUFBQSxRQUFFO0FBQUEsSUFBQztBQUFDLFFBQUcsRUFBRSxRQUFPLElBQUUsR0FBRSxJQUFFLEVBQUUsQ0FBQyxHQUFFLElBQUUsT0FBSyxJQUFFLE1BQUksRUFBRSxHQUFFLENBQUMsSUFBRSxHQUFFLEVBQUUsQ0FBQyxLQUFHLElBQUUsSUFBRyxRQUFNLE1BQUksSUFBRSxFQUFFLFFBQVEsR0FBRSxLQUFLLElBQUUsTUFBSyxFQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsU0FBU0EsSUFBRTtBQUFDLGFBQU9BO0FBQUEsSUFBQyxDQUFDLEtBQUcsUUFBTSxNQUFJLEVBQUUsQ0FBQyxNQUFJLElBQUUsRUFBRSxHQUFFLEtBQUcsQ0FBQyxFQUFFLE9BQUssS0FBRyxFQUFFLFFBQU0sRUFBRSxNQUFJLE1BQUksS0FBRyxFQUFFLEtBQUssUUFBUSxHQUFFLEtBQUssSUFBRSxPQUFLLENBQUMsSUFBRyxFQUFFLEtBQUssQ0FBQyxJQUFHO0FBQUUsUUFBRTtBQUFFLFFBQUUsT0FBSyxJQUFFLE1BQUksSUFBRTtBQUFJLFFBQUcsRUFBRSxDQUFDLEVBQUUsVUFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLFVBQ3JmLEVBQUUsQ0FBQztBQUFFLFVBQUksSUFBRSxJQUFFLEVBQUUsR0FBRSxDQUFDO0FBQUUsV0FBRyxFQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFBLElBQUM7QUFBQSxhQUFTLElBQUUsRUFBRSxDQUFDLEdBQUUsZUFBYSxPQUFPLEVBQUUsTUFBSSxJQUFFLEVBQUUsS0FBSyxDQUFDLEdBQUUsSUFBRSxHQUFFLEVBQUUsSUFBRSxFQUFFLEtBQU0sR0FBRSxPQUFNLEtBQUUsRUFBRSxPQUFNLElBQUUsSUFBRSxFQUFFLEdBQUUsR0FBRyxHQUFFLEtBQUcsRUFBRSxHQUFFLEdBQUUsR0FBRSxHQUFF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SyxVQUFJLElBQUUsRUFBRSxDQUFDLEdBQUUsSUFBRSxFQUFFO0FBQU0sVUFBRyxNQUFJLEdBQUU7QUFBQyxVQUFFLENBQUMsSUFBRTtBQUFFLFVBQUUsVUFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sSUFBRSxNQUFJLEdBQUUsSUFBRSxLQUFHO0FBQUMsY0FBSSxJQUFFLEtBQUcsSUFBRSxLQUFHLEdBQUUsSUFBRSxFQUFFLENBQUMsR0FBRSxJQUFFLElBQUUsR0FBRSxJQUFFLEVBQUUsQ0FBQztBQUFFLGNBQUcsSUFBRSxFQUFFLEdBQUUsQ0FBQyxFQUFFLEtBQUUsS0FBRyxJQUFFLEVBQUUsR0FBRSxDQUFDLEtBQUcsRUFBRSxDQUFDLElBQUUsR0FBRSxFQUFFLENBQUMsSUFBRSxHQUFFLElBQUUsTUFBSSxFQUFFLENBQUMsSUFBRSxHQUFFLEVBQUUsQ0FBQyxJQUFFLEdBQUUsSUFBRTtBQUFBLG1CQUFXLElBQUUsS0FBRyxJQUFFLEVBQUUsR0FBRSxDQUFDLEVBQUUsR0FBRSxDQUFDLElBQUUsR0FBRSxFQUFFLENBQUMsSUFBRSxHQUFFLElBQUU7QUFBQSxjQUFPLE9BQU07QUFBQSxRQUFDO0FBQUEsTUFBQztBQUFDLGFBQU87QUFBQSxJQUFDO0FBQzNjLGFBQVMsRUFBRSxHQUFFLEdBQUU7QUFBQyxVQUFJLElBQUUsRUFBRSxZQUFVLEVBQUU7QUFBVSxhQUFPLE1BQUksSUFBRSxJQUFFLEVBQUUsS0FBRyxFQUFFO0FBQUEsSUFBRTtBQUFDLFFBQUcsYUFBVyxPQUFPLGVBQWEsZUFBYSxPQUFPLFlBQVksS0FBSTtBQUFDLFVBQUksSUFBRTtBQUFZLGNBQXFCLDBCQUFVO0FBQUMsZUFBTyxFQUFFLElBQUs7QUFBQTtBQUFBLElBQUMsT0FBSztBQUFDLFVBQUksSUFBRSxNQUFLLElBQUUsRUFBRSxJQUFHO0FBQUcsNkJBQXFCLFdBQVU7QUFBQyxlQUFPLEVBQUUsSUFBRyxJQUFHO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQyxRQUFJLElBQUUsSUFBRyxJQUFFLENBQUUsR0FBQyxJQUFFLEdB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QUEsTUFBcUIsS0FBSztBQUFHLGVBQU8sSUFBRSxFQUFFLFFBQU8sSUFBRSxFQUFFLGVBQWEsRUFBRSxRQUFNLElBQUcsRUFBRSxnQkFBYyxPQUFLLElBQUUsZ0JBQWMsSUFBRSxNQUFJO0FBQUEsTUFBYyxLQUFLO0FBQUUsZUFBTTtBQUFBLE1BQVcsS0FBSztBQUFFLGVBQU87QUFBQSxNQUFFLEtBQUs7QUFBRSxlQUFNO0FBQUEsTUFBUyxLQUFLO0FBQUUsZUFBTTtBQUFBLE1BQU8sS0FBSztBQUFFLGVBQU07QUFBQSxNQUFPLEtBQUs7QUFBRyxlQUFPLEdBQUcsQ0FBQztBQUFBLE1BQUUsS0FBSztBQUFFLGVBQU8sTUFBSSxLQUFHLGVBQWE7QUFBQSxNQUFPLEtBQUs7QUFBRyxlQUFNO0FBQUEsTUFDdGYsS0FBSztBQUFHLGVBQU07QUFBQSxNQUFXLEtBQUs7QUFBRyxlQUFNO0FBQUEsTUFBUSxLQUFLO0FBQUcsZUFBTTtBQUFBLE1BQVcsS0FBSztBQUFHLGVBQU07QUFBQSxNQUFlLEtBQUs7QUFBRyxlQUFNO0FBQUEsTUFBZ0IsS0FBSztBQUFBLE1BQUUsS0FBSztBQUFBLE1BQUUsS0FBSztBQUFBLE1BQUcsS0FBSztBQUFBLE1BQUUsS0FBSztBQUFBLE1BQUcsS0FBSztBQUFHLFlBQUcsZUFBYSxPQUFPLEVBQUUsUUFBTyxFQUFFLGVBQWEsRUFBRSxRQUFNO0FBQUssWUFBRyxhQUFXLE9BQU8sRUFBRSxRQUFPO0FBQUEsSUFBQztBQUFDLFdBQU87QUFBQSxFQUFJO0FBQUMsV0FBUyxHQUFHLEdBQUU7QUFBQyxZQUFPLE9BQU8sR0FBQztBQUFBLE1BQUUsS0FBSztBQUFBLE1BQVUsS0FBSztBQUFBLE1BQVMsS0FBSztBQUFBLE1BQVMsS0FBSztBQUFZLGVBQU87QUFBQSxNQUFFLEtBQUs7QUFBUyxlQUFPO0FBQUEsTUFBRTtBQUFRLGVBQU07QUFBQSxJQUFFO0FBQUEsRUFBQztBQUNyYSxXQUFTLEdBQUcsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQUssWUFBTyxJQUFFLEVBQUUsYUFBVyxZ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QUMsU0FBTyxHQUFFO0FBQUMsU0FBRztBQUFBLEVBQUU7QUFBQyxXQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsTUFBTSxVQUFVLE1BQU0sS0FBSyxXQUFVLENBQUM7QUFBRSxRQUFHO0FBQUMsUUFBRSxNQUFNLEdBQUUsQ0FBQztBQUFBLElBQUMsU0FBTyxHQUFFO0FBQUMsV0FBSyxRQUFRLENBQUM7QUFBQSxJQUFDO0FBQUEsRUFBQztBQUFDLE1BQUksS0FBRyxPQUFHLEtBQUcsTUFBSyxLQUFHLE9BQUcsS0FBRyxNQUFLLEtBQUcsRUFBQyxTQUFRLFNBQVMsR0FBRTtBQUFDLFNBQUc7QUFBRyxTQUFHO0FBQUEsRUFBQyxFQUFDO0FBQUUsV0FBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsU0FBRztBQUFHLFNBQUc7QUFBSyxPQUFHLE1BQU0sSUFBRyxTQUFTO0FBQUEsRUFBQztBQUN6ZSxXQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxPQUFHLE1BQU0sTUFBSyxTQUFTO0FBQUUsUUFBRyxJQUFHO0FBQUMsVUFBRyxJQUFHO0FBQUMsWUFBSSxJQUFFO0FBQUcsYUFBRztBQUFHLGFBQUc7QUFBQSxNQUFJLE1BQU0sT0FBTSxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUUsYUFBSyxLQUFHLE1BQUcsS0FBRztBQUFBLElBQUU7QUFBQSxFQUFDO0FBQUMsV0FBUyxHQUFHLEdBQUU7QUFBQyxRQUFJLElBQUUsR0FBRSxJQUFFO0FBQUUsUUFBRyxFQUFFLFVBQVUsUUFBSyxFQUFFLFNBQVEsS0FBRSxFQUFFO0FBQUEsU0FBVztBQUFDLFVBQUU7QUFBRTtBQUFHLFlBQUUsR0FBRSxPQUFLLEVBQUUsUUFBTSxVQUFRLElBQUUsRUFBRSxTQUFRLElBQUUsRUFBRTtBQUFBLGFBQWE7QUFBQSxJQUFFO0FBQUMsV0FBTyxN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S0FBSztBQUFBLE1BQU0sS0FBSztBQUFBLE1BQU0sS0FBSztBQUFBLE1BQU8sS0FBSztBQUFBLE1BQU8sS0FBSztBQUFBLE1BQU8sS0FBSztBQUFBLE1BQVEsS0FBSztBQUFRLGVBQU8sSUFBRTtBQUFBLE1BQVEsS0FBSztBQUFBLE1BQVEsS0FBSztBQUFBLE1BQVEsS0FBSztBQUFBLE1BQVMsS0FBSztBQUFBLE1BQVMsS0FBSztBQUFTLGVBQU8sSUFBRTtBQUFBLE1BQVUsS0FBSztBQUFVLGVBQU87QUFBQSxNQUFVLEtBQUs7QUFBVSxlQUFPO0FBQUEsTUFBVSxLQUFLO0FBQVUsZUFBTztBQUFBLE1BQVUsS0FBSztBQUFXLGVBQU87QUFBQSxNQUN6Z0I7QUFBUSxlQUFPO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBQyxXQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBYSxRQUFHLE1BQUksRUFBRSxRQUFPO0FBQUUsUUFBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLGdCQUFlLElBQUUsRUFBRSxhQUFZLElBQUUsSUFBRTtBQUFVLFFBQUcsTUFBSSxHQUFFO0FBQUMsVUFBSSxJQUFFLElBQUUsQ0FBQztBQUFFLFlBQUksSUFBRSxJQUFFLEdBQUcsQ0FBQyxLQUFHLEtBQUcsR0FBRSxNQUFJLE1BQUksSUFBRSxHQUFHLENBQUM7QUFBQSxJQUFHLE1BQU0sS0FBRSxJQUFFLENBQUMsR0FBRSxNQUFJLElBQUUsSUFBRSxHQUFHLENBQUMsSUFBRSxNQUFJLE1BQUksSUFBRSxHQUFHLENBQUM7QUFBRyxRQUFHLE1BQUksRUFBRSxRQUFPO0FBQUUsUUFBRyxNQUFJLEtBQUcsTUFBSSxLQUFHLE9BQUssSUFBRSxPQUFLLElBQUUsSUFBRSxDQUFDLEdBQUUsSUFBRSxJQUFFLENBQUMsR0FBRSxLQUFHLEtBQUcsT0FBSyxLQUFHLE9BQUssSUFBRSxVQUFVLFFBQU87QUFBRSxXQUFLLElBQUUsT0FBSyxLQUFHLElBQUU7QUFBSSxRQUFFLEVBQUU7QUFBZSxRQUFHLE1BQUksRUFBRSxNQUFJLElB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QUFLLFFBQUUsR0FBRyxDQUFDO0FBQUUsUUFBRSxHQUFHLENBQUM7QUFBRSxRQUFHLFNBQU8sRUFBRSxLQUFHLElBQUUsR0FBRyxDQUFDLEdBQUUsU0FBTyxFQUFFLEtBQUU7QUFBQSxhQUFhLElBQUUsRUFBRSxLQUFJLE9BQUssR0FBRTtBQUFDLFVBQUUsR0FBRyxDQUFDO0FBQUUsVUFBRyxTQUFPLEVBQUUsUUFBTztBQUFFLFVBQUU7QUFBQSxJQUFJLFdBQVMsTUFBSSxHQUFFO0FBQUMsVUFBRyxFQUFFLFVBQVUsUUFBUSxjQUFjLGFBQWEsUUFBTyxNQUFJLEVBQUUsTUFBSSxFQUFFLFVBQVUsZ0JBQWM7QUFBSyxVQUFFO0FBQUEsSUFBSSxNQUFNLE9BQUksTUFBSSxJQUFFO0FBQU0sU0FBRztBQUFFLFdBQU87QUFBQSxFQUFJO0FBQzdTLFdBQVMsR0FBRyxHQUFFO0FBQUMsWUFBTyxHQUFHO0FBQUEsV0FBSztBQUFBLE1BQVMsS0FBSztBQUFBLE1BQVEsS0FBSztBQUFBLE1BQVEsS0FBSztBQUFBLE1BQWMsS0FBSztBQUFBLE1BQU8sS0FBSztBQUFBLE1BQU0sS0FBSztBQUFBLE1BQVcsS0FBSztBQUFBLE1BQVcsS0FBSztBQUFBLE1BQVUsS0FBSztBQUFBLE1BQVksS0FBSztBQUFBLE1BQU8sS0FBSztBQUFBLE1BQVUsS0FBSztBQUFBLE1BQVcsS0FBSztBQUFBLE1BQVEsS0FBSztBQUFBLE1BQVUsS0FBSztBQUFBLE1BQVUsS0FBSztBQUFBLE1BQVcsS0FBSztBQUFBLE1BQVEsS0FBSztBQUFBLE1BQVksS0FBSztBQUFBLE1BQVUsS0FBSztBQUFBLE1BQVEsS0FBSztBQUFBLE1BQVEsS0FBSztBQUFBLE1BQU8sS0FBSztBQUFBLE1BQWdCLEtBQUs7QUFBQSxNQUFjLEtBQUs7QUFBQSxNQUFZLEtBQUs7QUFBQSxNQUFhLEtBQUs7QUFBQSxNQUFRLEtBQUs7QUFBQSxNQUFTLEtBQUs7QUFBQSxNQUFTLEtBQUs7QUFBQSxNQUFTLEtBQUs7QUFBQSxNQUFjLEtBQUs7QUFBQSxNQUFXLEtBQUs7QUFB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QUFDLEdBQUUsUUFBTSxLQUFHLEVBQUUsS0FBSyxHQUFHLEdBQUUsR0FBRSxDQUFDLENBQUM7QUFBRyxVQUFFLEVBQUU7QUFBQSxJQUFNO0FBQUMsV0FBTztBQUFBLEVBQUM7QUFBQyxXQUFTLEdBQUcsR0FBRTtBQUFDLFFBQUcsU0FBTyxFQUFFLFFBQU87QUFBSztBQUFHLFVBQUUsRUFBRTtBQUFBLFdBQWEsS0FBRyxNQUFJLEVBQUU7QUFBSyxXQUFPLElBQUUsSUFBRTtBQUFBLEVBQUk7QUFDbmQsV0FBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGFBQVEsSUFBRSxFQUFFLFlBQVcsSUFBRSxJQUFHLFNBQU8sS0FBRyxNQUFJLEtBQUc7QUFBQyxVQUFJLElBQUUsR0FBRSxJQUFFLEVBQUUsV0FBVSxJQUFFLEVBQUU7QUFBVSxVQUFHLFNBQU8sS0FBRyxNQUFJLEVBQUU7QUFBTSxZQUFJLEVBQUUsT0FBSyxTQUFPLE1BQUksSUFBRSxHQUFFLEtBQUcsSUFBRSxHQUFHLEdBQUUsQ0FBQyxHQUFFLFFBQU0sS0FBRyxFQUFFLFFBQVEsR0FBRyxHQUFFLEdBQUUsQ0FBQyxDQUFDLEtBQUcsTUFBSSxJQUFFLEdBQUcsR0FBRSxDQUFDLEdBQUUsUUFBTSxLQUFHLEVBQUUsS0FBSyxHQUFHLEdBQUUsR0FBRSxDQUFDLENBQUM7QUFBSSxVQUFFLEVBQUU7QUFBQSxJQUFNO0FBQUMsVUFBSSxFQUFFLFVBQVEsRUFBRSxLQUFLLEVBQUMsT0FBTSxHQUFFLFdBQVUsRUFBQyxDQUFDO0FBQUEsRUFBQztBQUFDLE1BQUksS0FBRyxVQUFTLEtBQUc7QUFBaUIsV0FBUyxHQUFHLEdBQUU7QUFBQyxZQUFPLGFBQVcsT0FBTyxJQUFFLElBQUUsS0FBRyxHQUFHLFFBQVEsSUFBRyxJQUFJLEVBQUUsUUFBUSxJQUFHLEVBQUU7QUFBQSxFQUFDO0FBQUMsV0FBUyxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBRSxHQUFHLENBQUM7QUFBRSxRQUFHLEdBQUcsQ0FBQyxNQUFJLEtBQUcsRUFBRSxPQUFN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QUUsY0FBRSxHQUFHLENBQUM7QUFBQSxRQUFDO0FBQUMsZUFBTztBQUFBLE1BQUM7QUFBQyxVQUFFO0FBQUUsVUFBRSxFQUFFO0FBQUEsSUFBVTtBQUFDLFdBQU87QUFBQSxFQUFJO0FBQUMsV0FBUyxHQUFHLEdBQUU7QUFBQyxRQUFFLEVBQUUsRUFBRSxLQUFHLEVBQUUsRUFBRTtBQUFFLFdBQU0sQ0FBQyxLQUFHLE1BQUksRUFBRSxPQUFLLE1BQUksRUFBRSxPQUFLLE9BQUssRUFBRSxPQUFLLE1BQUksRUFBRSxNQUFJLE9BQUs7QUFBQSxFQUFDO0FBQUMsV0FBUyxHQUFHLEdBQUU7QUFBQyxRQUFHLE1BQUksRUFBRSxPQUFLLE1BQUksRUFBRSxJQUFJLFFBQU8sRUFBRTtBQUFVLFVBQU0sTUFBTSxFQUFFLEVBQUUsQ0FBQztBQUFBLEVBQUU7QUFBQyxXQUFTLEdBQUcsR0FBRTtBQUFDLFdBQU8sRUFBRSxFQUFFLEtBQUc7QUFBQSxFQUFJO0FBQUMsTUFBSSxLQUFHLENBQUUsR0FBQyxLQUFHO0FBQUcsV0FBUyxHQUFHLEdBQUU7QUFBQyxXQUFNLEVBQUMsU0FBUSxFQUFDO0FBQUEsRUFBQztBQUN2ZSxXQUFTLEVBQUUsR0FBRTtBQUFDLFFBQUUsT0FBSyxFQUFFLFVBQVEsR0FBRyxFQUFFLEdBQUUsR0FBRyxFQUFFLElBQUUsTUFBSztBQUFBLEVBQUs7QUFBQyxXQUFTLEVBQUUsR0FBRSxHQUFFO0FBQUM7QUFBSyxPQUFHLEVBQUUsSUFBRSxFQUFFO0FBQVEsTUFBRSxVQUFRO0FBQUEsRUFBQztBQUFDLE1BQUksS0FBRyxJQUFHLElBQUUsR0FBRyxFQUFFLEdBQUUsS0FBRyxHQUFHLEtBQUUsR0FBRSxLQUFHO0FBQUcsV0FBUyxHQUFHLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFLEtBQUs7QUFBYSxRQUFHLENBQUMsRUFBRSxRQUFPO0FBQUcsUUFBSSxJQUFFLEVBQUU7QUFBVSxRQUFHLEtBQUcsRUFBRSxnREFBOEMsRUFBRSxRQUFPLEVBQUU7QUFBMEMsUUFBSSxJQUFFLENBQUUsR0FBQztBQUFFLFNBQUksS0FBSyxFQUFFLEdBQUUsQ0FBQyxJQUFFLEVBQUUsQ0FBQztBQUFFLFVBQUksSUFBRSxFQUFFLFdBQVUsRUFBRSw4Q0FBNEMsR0FBRSxFQUFFLDRDQUEwQztBQUFHLFdBQU87QUFBQSxFQUFDO0FBQzlkLFdBQVMsR0FBRyxHQUFFO0FBQUMsUUFBRSxFQUFFO0FBQWtCLFdBQU8sU0FBTyxLQUFHLFdBQVM7QUFBQSxFQUFDO0FBQUMsV0FBUyxLQUFJO0FBQUMsTUFBRSxFQUFFO0FBQUUsTUFBRSxDQUFDO0FBQUEsRUFBQztBQUFDLFdBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUcsRUFBRSxZQUFVLEdBQUcsT0FBTSxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUUsTUFBRSxHQUFFLENBQUM7QUFBRSxNQUFFLElBQUcsQ0FBQztBQUFBLEVBQUM7QUFBQyxXQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFVLFFBQUUsRUFBRTtBQUFrQixRQUFHLGVBQWEsT0FBTyxFQUFFLGdCQUFnQixRQUFPO0FBQUUsUUFBRSxFQUFFO0FBQWtCLGFBQVEsS0FBSyxFQUFFLEtBQUcsRUFBRSxLQUFLLEdBQUcsT0FBTSxNQUFNLEVBQUUsS0FBSSxHQUFHLENBQUMsS0FBRyxXQUFVLENBQUMsQ0FBQztBQUFFLFdBQU8sRUFBRSxDQUFFLEdBQUMsR0FBRSxDQUFDO0FBQUEsRUFBQztBQUN4WCxXQUFTLEdBQUcsR0FBRTtBQUFDLFNBQUcsSUFBRSxFQUFFLGNBQVksRUFBRSw2Q0FBMkM7QUFBRyxTQUFHLEVBQUU7QUFBUSxNQUFFLEdBQUUsQ0FBQztBQUFFLE1BQUUsSUFBRyxHQUFHLE9BQU87QUFBRTtFQUFRO0FBQUMsV0FBUyxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBVSxRQUFHLENBQUMsRUFBRSxPQUFNLE1BQU0sRUFBRSxHQUFHLENBQUM7QUFBRSxTQUFHLElBQUUsR0FBRyxHQUFFLEdBQUUsRUFBRSxHQUFFLEVBQUUsNENBQTBDLEdBQUUsRUFBRSxFQUFFLEdBQUUsRUFBRSxDQUFDLEdBQUUsRUFBRSxHQUFFLENBQUMsS0FBRyxFQUFFLEVBQUU7QUFBRSxNQUFFLElBQUcsQ0FBQztBQUFBLEVBQUM7QUFBQyxNQUFJLEtBQUcsTUFBSyxLQUFHLE9BQUcsS0FBRztBQUFHLFdBQVMsR0FBRyxHQUFFO0FBQUMsYUFBTyxLQUFHLEtBQUcsQ0FBQyxDQUFDLElBQUUsR0FBRyxLQUFLLENBQUM7QUFBQSxFQUFDO0FBQUMsV0FBUyxHQUFHLEdBQUU7QUFBQyxTQUFHO0FBQUcsT0FBRyxDQUFDO0FBQUEsRUFBQztBQUMzWCxXQUFTLEtBQUk7QUFBQyxRQUFHLENBQUMsTUFBSSxTQUFPLElBQUc7QUFBQyxXQUFHO0FBQUcsVUFBSSxJQUFFLEdBQUUsSUFBRTtBQUFFLFVBQUc7QUFBQyxZQUFJLElBQUU7QUFBRyxhQUFJLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxLQUFJO0FBQUMsY0FBSSxJQUFFLEVBQUUsQ0FBQztBQUFFO0FBQUcsZ0JBQUUsRUFBRSxJQUFFO0FBQUEsaUJBQVEsU0FBTztBQUFBLFFBQUU7QUFBQyxhQUFHO0FBQUssYUFBRztBQUFBLE1BQUUsU0FBTyxHQUFFO0FBQUMsY0FBTSxTQUFPLE9BQUssS0FBRyxHQUFHLE1BQU0sSUFBRSxDQUFDLElBQUcsR0FBRyxJQUFHLEVBQUUsR0FBRTtBQUFBLE1BQUUsVUFBQztBQUFRLFlBQUUsR0FBRSxLQUFHO0FBQUEsTUFBRTtBQUFBLElBQUM7QUFBQyxXQUFPO0FBQUEsRUFBSTtBQUFDLE1BQUksS0FBRyxJQUFHLEtBQUcsR0FBRSxLQUFHLE1BQUssS0FBRyxHQUFFLEtBQUcsSUFBRyxLQUFHLEdBQUUsS0FBRyxNQUFLLEtBQUcsR0FBRSxLQUFHO0FBQUcsV0FBUyxHQUFHLEdBQUUsR0FBRTtBQUFDLE9BQUcsSUFBSSxJQUFFO0FBQUcsT0FBRyxJQUFJLElBQUU7QUFBRyxTQUFHO0FBQUUsU0FBRztBQUFBLEVBQUM7QUFDalYsV0FBUyxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUMsT0FBRyxJQUFJLElBQUU7QUFBRyxPQUFHLElBQUksSUFBRTtBQUFHLE9BQUcsSUFBSSxJQUFFO0FBQUcsU0FBRztBQUFFLFFBQUksSUFBRTtBQUFHLFFBQUU7QUFBRyxRQUFJLElBQUUsS0FBRyxHQUFHLENBQUMsSUFBRTtBQUFFLFNBQUcsRUFBRSxLQUFHO0FBQUcsU0FBRztBQUFFLFFBQUksSUFBRSxLQUFHLEdBQUcsQ0FBQyxJQUFFO0FBQUUsUUFBRyxLQUFHLEdBQUU7QUFBQyxVQUFJLElBQUUsSUFBRSxJQUFFO0FBQUUsV0FBRyxLQUFHLEtBQUcsS0FBRyxHQUFHLFNBQVMsRUFBRTtBQUFFLFlBQUk7QUFBRSxXQUFHO0FBQUUsV0FBRyxLQUFHLEtBQUcsR0FBRyxDQUFDLElBQUUsSUFBRSxLQUFHLElBQUU7QUFBRSxXQUFHLElBQUU7QUFBQSxJQUFDLE1BQU0sTUFBRyxLQUFHLElBQUUsS0FBRyxJQUFFLEdBQUUsS0FBRztBQUFBLEVBQUM7QUFBQyxXQUFTLEdBQUcsR0FBRTtBQUFDLGFBQU8sRUFBRSxXQUFTLEdBQUcsR0FBRSxDQUFDLEdBQUUsR0FBRyxHQUFFLEdBQUUsQ0FBQztBQUFBLEVBQUU7QUFBQyxXQUFTLEdBQUcsR0FBRTtBQUFDLFdBQUssTUFBSSxLQUFJLE1BQUcsR0FBRyxFQUFFLEVBQUUsR0FBRSxHQUFHLEVBQUUsSUFBRSxNQUFLLEtBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRSxHQUFHLEVBQUUsSUFBRTtBQUFLLFdBQUssTUFBSSxLQUFJLE1BQUcsR0FBRyxFQUFFLEVBQUUsR0FBRSxHQUFHLEVBQUUsSUFBRSxNQUFLLEtBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRSxHQUFHLEVBQUUsSUFBRSxNQUFLLEtBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRSxHQUFHLEVBQUUsSUFBRTtBQUFBLEVBQUk7QUFBQyxNQUFJLEtBQUcsTUFBSyxLQUFHLE1BQUssSUFBRSxPQUFHLEtBQUc7QUFDamUsV0FBUyxHQUFHLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxHQUFHLEdBQUUsTUFBSyxNQUFLLENBQUM7QUFBRSxNQUFFLGNBQVk7QUFBVSxNQUFFLFlBQVU7QUFBRSxNQUFFLFNBQU87QUFBRSxRQUFFLEVBQUU7QUFBVSxhQUFPLEtBQUcsRUFBRSxZQUFVLENBQUMsQ0FBQyxHQUFFLEVBQUUsU0FBTyxNQUFJLEVBQUUsS0FBSyxDQUFDO0FBQUEsRUFBQztBQUN4SixXQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsWUFBTyxFQUFFLEtBQUs7QUFBQSxXQUFLO0FBQUUsWUFBSSxJQUFFLEVBQUU7QUFBSyxZQUFFLE1BQUksRUFBRSxZQUFVLEVBQUUsWUFBVyxNQUFLLEVBQUUsU0FBUyxZQUFXLElBQUcsT0FBSztBQUFFLGVBQU8sU0FBTyxLQUFHLEVBQUUsWUFBVSxHQUFFLEtBQUcsR0FBRSxLQUFHLEdBQUcsRUFBRSxVQUFVLEdBQUUsUUFBSTtBQUFBLE1BQUcsS0FBSztBQUFFLGVBQU8sSUFBRSxPQUFLLEVBQUUsZ0JBQWMsTUFBSSxFQUFFLFdBQVMsT0FBSyxHQUFFLFNBQU8sS0FBRyxFQUFFLFlBQVUsR0FBRSxLQUFHLEdBQUUsS0FBRyxNQUFLLFFBQUk7QUFBQSxNQUFHLEtBQUs7QUFBRyxlQUFPLElBQUUsTUFBSSxFQUFFLFdBQVMsT0FBSyxHQUFFLFNBQU8sS0FBRyxJQUFFLFNBQU8sS0FBRyxFQUFDLElBQUcsSUFBRyxVQUFTLEdBQUUsSUFBRSxNQUFLLEVBQUUsZ0JBQWMsRUFBQyxZQUFXLEdBQUUsYUFBWSxHQUFFLFdBQVUsV0FBVSxHQUFFLElBQUUsR0FBRyxJQUFHLE1BQUssTUFBSyxDQUFDLEdBQUUsRUFBRSxZQUFVLEdBQUUsRUFBRSxTQUFPLEdBQUUsRUFBRSxRQUFNLEdBQUUsS0FBRyxHQUFFLEtBQ2xmLE1BQUssUUFBSTtBQUFBLE1BQUc7QUFBUSxlQUFNO0FBQUEsSUFBRTtBQUFBLEVBQUM7QUFBQyxXQUFTLEdBQUcsR0FBRTtBQUFDLFdBQU8sT0FBSyxFQUFFLE9BQUssTUFBSSxPQUFLLEVBQUUsUUFBTTtBQUFBLEVBQUk7QUFBQyxXQUFTLEdBQUcsR0FBRTtBQUFDLFFBQUcsR0FBRTtBQUFDLFVBQUksSUFBRTtBQUFHLFVBQUcsR0FBRTtBQUFDLFlBQUksSUFBRTtBQUFFLFlBQUcsQ0FBQyxHQUFHLEdBQUUsQ0FBQyxHQUFFO0FBQUMsY0FBRyxHQUFHLENBQUMsRUFBRSxPQUFNLE1BQU0sRUFBRSxHQUFHLENBQUM7QUFBRSxjQUFFLEdBQUcsRUFBRSxXQUFXO0FBQUUsY0FBSSxJQUFFO0FBQUcsZUFBRyxHQUFHLEdBQUUsQ0FBQyxJQUFFLEdBQUcsR0FBRSxDQUFDLEtBQUcsRUFBRSxRQUFNLEVBQUUsUUFBTSxRQUFNLEdBQUUsSUFBRSxPQUFHLEtBQUc7QUFBQSxRQUFFO0FBQUEsTUFBQyxPQUFLO0FBQUMsWUFBRyxHQUFHLENBQUMsRUFBRSxPQUFNLE1BQU0sRUFBRSxHQUFHLENBQUM7QUFBRSxVQUFFLFFBQU0sRUFBRSxRQUFNLFFBQU07QUFBRSxZQUFFO0FBQUcsYUFBRztBQUFBLE1BQUM7QUFBQSxJQUFDO0FBQUEsRUFBQztBQUFDLFdBQVMsR0FBRyxHQUFFO0FBQUMsU0FBSSxJQUFFLEVBQUUsUUFBTyxTQUFPLEtBQUcsTUFBSSxFQUFFLE9BQUssTUFBSSxFQUFFLE9BQUssT0FBSyxFQUFFLE1BQUssS0FBRSxFQUFFO0FBQU8sU0FBRztBQUFBLEVBQUM7QUFDaGEsV0FBUyxHQUFHLEdBQUU7QUFBQyxRQUFHLE1BQUksR0FBRyxRQUFRO0FBQUMsUUFBRyxDQUFDLEVBQUUsUUFBTyxHQUFHLENBQUMsR0FBRSxJQUFFLE1BQUc7QUFBRyxRQUFJO0FBQUUsS0FBQyxJQUFFLE1BQUksRUFBRSxRQUFNLEVBQUUsSUFBRSxNQUFJLEVBQUUsU0FBTyxJQUFFLEVBQUUsTUFBSyxJQUFFLFdBQVMsS0FBRyxXQUFTLEtBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBSyxFQUFFLGFBQWE7QUFBRyxRQUFHLE1BQUksSUFBRSxLQUFJO0FBQUMsVUFBRyxHQUFHLENBQUMsRUFBRSxPQUFNLEdBQUksR0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUUsYUFBSyxJQUFHLElBQUcsR0FB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O0FBQUEsRUFBQztBQUFDLFdBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFDLFdBQU8sRUFBRSxXQUFVO0FBQUMsU0FBRyxDQUFDLEtBQUcsR0FBRyxDQUFDO0FBQUEsSUFBQyxDQUFDO0FBQUEsRUFBQztBQUFDLFdBQVMsR0FBRyxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBWSxRQUFFLEVBQUU7QUFBTSxRQUFHO0FBQUMsVUFBSSxJQUFFLEVBQUc7QUFBQyxhQUFNLENBQUMsR0FBRyxHQUFFLENBQUM7QUFBQSxJQUFDLFNBQU8sR0FBRTtBQUFDLGFBQU07QUFBQSxJQUFFO0FBQUEsRUFBQztBQUFDLFdBQVMsR0FBRyxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUcsR0FBRSxDQUFDO0FBQUUsYUFBTyxLQUFHLEdBQUcsR0FBRSxHQUFFLEdBQUUsRUFBRTtBQUFBLEVBQUM7QUFDbFEsV0FBUyxHQUFHLEdBQUU7QUFBQyxRQUFJLElBQUUsR0FBSTtBQUFDLG1CQUFhLE9BQU8sTUFBSSxJQUFFLEVBQUM7QUFBSSxNQUFFLGdCQUFjLEVBQUUsWUFBVTtBQUFFLFFBQUUsRUFBQyxTQUFRLE1BQUssYUFBWSxNQUFLLE9BQU0sR0FBRSxVQUFTLE1BQUsscUJBQW9CLElBQUcsbUJBQWtCLEVBQUM7QUFBRSxNQUFFLFFBQU07QUFBRSxRQUFFLEVBQUUsV0FBUyxHQUFHLEtBQUssTUFBSyxHQUFFLENBQUM7QUFBRSxXQUFNLENBQUMsRUFBRSxlQUFjLENBQUM7QUFBQSxFQUFDO0FBQzVQLFdBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBRSxFQUFDLEtBQUksR0FBRSxRQUFPLEdBQUUsU0FBUSxHQUFFLE1BQUssR0FBRSxNQUFLLEtBQUk7QUFBRSxRQUFFLEVBQUU7QUFBWSxhQUFPLEtBQUcsSUFBRSxFQUFDLFlBQVcsTUFBSyxRQUFPLEtBQUksR0FBRSxFQUFFLGNBQVksR0FBRSxFQUFFLGFBQVcsRUFBRSxPQUFLLE1BQUksSUFBRSxFQUFFLFlBQVcsU0FBTyxJQUFFLEVBQUUsYUFBVyxFQUFFLE9BQUssS0FBRyxJQUFFLEVBQUUsTUFBSyxFQUFFLE9BQUssR0FBRSxFQUFFLE9BQUssR0FBRSxFQUFFLGFBQVc7QUFBSSxXQUFPO0FBQUEsRUFBQztBQUFDLFdBQVMsS0FBSTtBQUFDLFdBQU8sR0FBSSxFQUFDO0FBQUEsRUFBYTtBQUFDLFdBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUk7QUFBQyxNQUFFLFNBQU87QUFBRSxNQUFFLGdCQUFjLEdBQUcsSUFBRSxHQUFFLEdBQUUsUUFBTyxXQUFTLElBQUUsT0FBSyxDQUFDO0FBQUEsRUFBQztBQUM5WSxXQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxHQUFJO0FBQUMsUUFBRSxXQUFTLElBQUUsT0FBSztBQUFFLFFBQUksSUFBRTtBQUFPLFFBQUcsU0FBTyxHQUFFO0FBQUMsVUFBSSxJQUFFLEVBQUU7QUFBYyxVQUFFLEVBQUU7QUFBUSxVQUFHLFNBQU8sS0FBRyxHQUFHLEdBQUUsRUFBRSxJQUFJLEdBQUU7QUFBQyxVQUFFLGdCQUFjLEdBQUcsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFFO0FBQUEsTUFBTTtBQUFBLElBQUM7QUFBQyxNQUFFLFNBQU87QUFBRSxNQUFFLGdCQUFjLEdBQUcsSUFBRSxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUEsRUFBQztBQUFDLFdBQVMsR0FBRyxHQUFFLEdBQUU7QUFBQyxXQUFPLEdBQUcsU0FBUSxHQUFFLEdBQUUsQ0FBQztBQUFBLEVBQUM7QUFBQyxXQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsV0FBTyxHQUFHLE1BQUssR0FBRSxHQUFFLENBQUM7QUFBQSxFQUFDO0FBQUMsV0FBUyxHQUFHLEdBQUUsR0FBRTtBQUFDLFdBQU8sR0FBRyxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUEsRUFBQztBQUFDLFdBQVMsR0FBRyxHQUFFLEdBQUU7QUFBQyxXQUFPLEdBQUcsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFBLEVBQUM7QUFDaFgsV0FBUyxHQUFHLEdBQUUsR0FBRTtBQUFDLFFBQUcsZUFBYSxPQUFPLEVBQUUsUUFBTyxJQUFFLEtBQUksRUFBRSxDQUFDLEdBQUUsV0FBVTtBQUFDLFFBQUUsSUFBSTtBQUFBLElBQUM7QUFBRSxRQUFHLFNBQU8sS0FBRyxXQUFTLEVBQUUsUUFBTyxJQUFFLEVBQUcsR0FBQyxFQUFFLFVBQVEsR0FBRSxXQUFVO0FBQUMsUUFBRSxVQUFRO0FBQUEsSUFBSTtBQUFBLEVBQUM7QUFBQyxXQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFFLFNBQU8sS0FBRyxXQUFTLElBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUU7QUFBSyxXQUFPLEdBQUcsR0FBRSxHQUFFLEdBQUcsS0FBSyxNQUFLLEdBQUUsQ0FBQyxHQUFFLENBQUM7QUFBQSxFQUFDO0FBQUMsV0FBUyxLQUFJO0FBQUE7QUFBRSxXQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUssUUFBRSxXQUFTLElBQUUsT0FBSztBQUFFLFFBQUksSUFBRSxFQUFFO0FBQWMsUUFBRyxTQUFPLEtBQUcsU0FBTyxLQUFHLEdBQUcsR0FBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQU8sRUFBRSxDQUFDO0FBQUUsTUFBRSxnQkFBYyxDQUFDLEdBQUUsQ0FBQztBQUFFLFdBQU87QUFBQSxFQUFDO0FBQzdaLFdBQVMsR0FBRyxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUU7QUFBSyxRQUFFLFdBQVMsSUFBRSxPQUFLO0FBQUUsUUFBSSxJQUFFLEVBQUU7QUFBYyxRQUFHLFNBQU8sS0FBRyxTQUFPLEtBQUcsR0FBRyxHQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsUUFBTyxFQUFFLENBQUM7QUFBRSxRQUFFLEVBQUc7QUFBQyxNQUFFLGdCQUFjLENBQUMsR0FBRSxDQUFDO0FBQUUsV0FBTztBQUFBLEVBQUM7QUFBQyxXQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLE9BQUssS0FBRyxJQUFJLFFBQU8sRUFBRSxjQUFZLEVBQUUsWUFBVSxPQUFHLEtBQUcsT0FBSSxFQUFFLGdCQUFjO0FBQUUsT0FBRyxHQUFFLENBQUMsTUFBSSxJQUFFLEdBQUUsR0FBRyxFQUFFLFNBQU8sR0FBRSxNQUFJLEdBQUUsRUFBRSxZQUFVO0FBQUksV0FBTztBQUFBLEVBQUM7QUFBQyxXQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUUsUUFBRSxNQUFJLEtBQUcsSUFBRSxJQUFFLElBQUU7QUFBRSxNQUFFLElBQUU7QUFBRSxRQUFJLElBQUUsR0FBRztBQUFXLE9BQUcsYUFBVztBQUFHLFFBQUc7QUFBQyxRQUFFLEtBQUUsR0FBRSxFQUFDO0FBQUEsSUFBRSxVQUFDO0FBQVEsVUFBRSxHQUFFLEdBQUcsYUFBVztBQUFBLElBQUM7QUFBQSxFQUFDO0FBQUMsV0FBUyxLQUFJO0FBQUMsV0FBTyxHQUFJLEVBQUM7QUFBQSxFQUFhO0FBQzFkLFdBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxHQUFHLENBQUM7QUFBRSxRQUFFLEVBQUMsTUFBSyxHQUFFLFFBQU8sR0FBRSxlQUFjLE9BQUcsWUFBVyxNQUFLLE1BQUssS0FBSTtBQUFFLFFBQUcsR0FBRyxDQUFDLEVBQUUsSUFBRyxHQUFFLENBQUM7QUFBQSxhQUFVLElBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxDQUFDLEdBQUUsU0FBTyxHQUFFO0FBQUMsVUFBSSxJQUFFO0FBQUksU0FBRyxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUUsU0FBRyxHQUFFLEdBQUUsQ0FBQztBQUFBLElBQUM7QUFBQSxFQUFDO0FBQy9LLFdBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxHQUFHLENBQUMsR0FBRSxJQUFFLEVBQUMsTUFBSyxHQUFFLFFBQU8sR0FBRSxlQUFjLE9BQUcsWUFBVyxNQUFLLE1BQUssS0FBSTtBQUFFLFFBQUcsR0FBRyxDQUFDLEVBQUUsSUFBRyxHQUFFLENBQUM7QUFBQSxTQUFNO0FBQUMsVUFBSSxJQUFFLEVBQUU7QUFBVSxVQUFHLE1BQUks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QUFFLEVBQUUsT0FBTSxNQUFLLENBQUM7QUFBRSxRQUFFLE1BQU0sZ0JBQWMsR0FBRyxDQUFDO0FBQUUsUUFBRSxnQkFBYztBQUFHLGFBQU87QUFBQSxJQUFDO0FBQUMsUUFBRyxPQUFLLEVBQUUsT0FBSyxHQUFHLFFBQU8sR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFJO0FBQUUsUUFBRyxTQUFPLEVBQUUsTUFBSztBQUFDLFVBQUUsRUFBRSxlQUFhLEVBQUUsWUFBWTtBQUNoZixVQUFHLEVBQUUsS0FBSSxJQUFFLEVBQUU7QUFBSyxVQUFFO0FBQUUsVUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUUsVUFBRSxHQUFHLEdBQUUsR0FBRSxNQUFNO0FBQUUsYUFBTyxHQUFHLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBQSxJQUFDO0FBQUMsUUFBRSxPQUFLLElBQUUsRUFBRTtBQUFZLFFBQUcsTUFBSSxHQUFFO0FBQUMsVUFBRTtBQUFFLFVBQUcsU0FBTyxHQUFFO0FBQUMsZ0JBQU8sSUFBRSxDQUFDLEdBQUM7QUFBQSxVQUFFLEtBQUs7QUFBRSxnQkFBRTtBQUFFO0FBQUEsVUFBTSxLQUFLO0FBQUcsZ0JBQUU7QUFBRTtBQUFBLFVBQU0sS0FBSztBQUFBLFVBQUcsS0FBSztBQUFBLFVBQUksS0FBSztBQUFBLFVBQUksS0FBSztBQUFBLFVBQUksS0FBSztBQUFBLFVBQUssS0FBSztBQUFBLFVBQUssS0FBSztBQUFBLFVBQUssS0FBSztBQUFBLFVBQUssS0FBSztBQUFBLFVBQU0sS0FBSztBQUFBLFVBQU0sS0FBSztBQUFBLFVBQU0sS0FBSztBQUFBLFVBQU8sS0FBSztBQUFBLFVBQU8sS0FBSztBQUFBLFVBQU8sS0FBSztBQUFBLFVBQVEsS0FBSztBQUFBLFVBQVEsS0FBSztBQUFBLFVBQVEsS0FBSztBQUFBLFVBQVEsS0FBSztBQUFBLFVBQVMsS0FBSztBQUFBLFVBQVMsS0FBSztBQUFTLGdCQUFFO0FBQUc7QUFBQSxVQUFNLEtBQUs7QUFBVSxnQkFBRTtBQUFVO0FBQUEsVUFBTTtBQUFRLGdCQUFFO0FB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RyxDQUFDLE1BQUksSUFBRSxJQUFHLElBQUUsRUFBRTtBQUFRLFlBQUU7QUFBRSxpQkFBTyxLQUFHLElBQUUsRUFBRSxPQUFNLEVBQUUsUUFBTSxTQUFPLElBQUUsRUFBRSxTQUFRLEVBQUUsVUFBUTtBQUFNLFdBQUcsR0FBRSxPQUFHLEdBQUUsR0FBRSxDQUFDO0FBQUU7QUFBQSxNQUFNLEtBQUs7QUFBWSxZQUFFO0FBQUssWUFBRSxFQUFFO0FBQU0sYUFBSSxFQUFFLFFBQU0sTUFBSyxTQUFPLEtBQUc7QUFBQyxjQUFFLEVBQUU7QUFBVSxjQUFHLFNBQU8sS0FBRyxTQUFPLEdBQUcsQ0FBQyxHQUFFO0FBQUMsY0FBRSxRQUFNO0FBQUU7QUFBQSxVQUFLO0FBQUMsY0FBRSxFQUFFO0FBQVEsWUFBRSxVQUFRO0FBQUUsY0FBRTtBQUFFLGNBQUU7QUFBQSxRQUFDO0FBQUMsV0FBRyxHQUFFLE1BQUcsR0FBRSxNQUFLLENBQUM7QUFBRTtBQUFBLE1BQU0sS0FBSztBQUFXLFdBQUcsR0FBRSxPQUFHLE1BQUssTUFBSyxNQUFNO0FBQUU7QUFBQSxNQUFNO0FBQVEsVUFBRSxnQkFBYztBQUFBLElBQUk7QUFBQyxXQUFPLEVBQUU7QUFBQSxFQUFLO0FBQzdkLFdBQVMsR0FBRyxHQUFFLEdBQUU7QUFBQyxXQUFLLEVBQUUsT0FBSyxNQUFJLFNBQU8sTUFBSSxFQUFFLFlBQVUsTUFBSyxFQUFFLFlBQVUsTUFBSyxFQUFFLFNBQU87QUFBQSxFQUFFO0FBQUMsV0FBUyxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUMsYUFBTyxNQUFJLEVBQUUsZUFBYSxFQUFFO0FBQWMsVUFBSSxFQUFFO0FBQU0sUUFBRyxPQUFLLElBQUUsRUFBRSxZQUFZLFFBQU87QUFBSyxRQUFHLFNBQU8sS0FBRyxFQUFFLFVBQVEsRUFBRSxNQUFNLE9BQU0sTUFBTSxFQUFFLEdBQUcsQ0FBQztBQUFFLFFBQUcsU0FBTyxFQUFFLE9BQU07QUFBQyxVQUFFLEVBQUU7QUFBTSxVQUFFLEdBQUcsR0FBRSxFQUFFLFlBQVk7QUFBRSxRQUFFLFFBQU07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LGVBQWUsQ0FBQyxLQUFHLEtBQUcsRUFBRSxlQUFlLENBQUMsTUFBSSxNQUFJLElBQUUsS0FBSSxFQUFFLENBQUMsSUFBRTtBQUFJLGVBQUksS0FBSyxFQUFFLEdBQUUsZUFBZSxDQUFDLEtBQUcsRUFBRSxDQUFDLE1BQUksRUFBRSxDQUFDLE1BQUksTUFBSSxJQUFFLENBQUUsSUFBRSxFQUFFLENBQUMsSUFBRSxFQUFFLENBQUM7QUFBQSxRQUFFLE1BQU0sT0FBSSxNQUFJLElBQUUsQ0FBRSxJQUFFLEVBQUU7QUFBQSxVQUFLO0FBQUEsVUFDcGY7QUFBQSxRQUFDLElBQUcsSUFBRTtBQUFBLFlBQU0sK0JBQTRCLEtBQUcsSUFBRSxJQUFFLEVBQUUsU0FBTyxRQUFPLElBQUUsSUFBRSxFQUFFLFNBQU8sUUFBTyxRQUFNLEtBQUcsTUFBSSxNQUFJLElBQUUsS0FBRyxDQUFFLEdBQUUsS0FBSyxHQUFFLENBQUMsS0FBRyxlQUFhLElBQUUsYUFBVyxPQUFPLEtBQUcsYUFBVyxPQUFPLE1BQUksSUFBRSxLQUFHLENBQUUsR0FBRSxLQUFLLEdBQUUsS0FBRyxDQUFDLElBQUUscUNBQW1DLEtBQUcsK0JBQTZCLE1BQUksR0FBRyxlQUFlLENBQUMsS0FBRyxRQUFNLEtBQUcsZUFBYSxLQUFHLEVBQUUsVUFBUyxDQUFDLEdBQUUsS0FBRyxNQUFJLE1BQUksSUFBRSxRQUFNLElBQUUsS0FBRyxDQUFFLEdBQUUsS0FBSyxHQUFFLENBQUM7QUFBQSxNQUFFO0FBQUMsWUFBSSxJQUFFLEtBQUcsQ0FBRSxHQUFFLEtBQUssU0FBUSxDQUFDO0FBQUUsVUFBSSxJQUFFO0FBQUUsVUFBRyxFQUFFLGNBQVksRUFBRSxHQUFFLFNBQU87QUFBQSxJQUFDO0FBQUEsRUFBQztBQUFFLE9BQUcsU0FBUyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsVUFBSSxNQUFJLEVBQUUsU0FBTztBQUFBLEVBQUU7QUFDaGUsV0FBUyxHQUFHLEdBQUUsR0FBRTtBQUFDLFFBQUcsQ0FBQyxFQUFFLFNBQU8sRUFBRSxVQUFRO0FBQUEsTUFBRSxL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QUFPLEVBQUUsUUFBTSxJQUFFLFNBQU8sS0FBSSxLQUFHO0FBQUEsTUFBSyxLQUFLO0FBQUUsZUFBTyxHQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUUsRUFBRSxDQUFDLEdBQUUsR0FBRSxHQUFHLElBQUUsRUFBRSxPQUFNLE9BQUssSUFBRSxVQUFRLE9BQUssSUFBRSxRQUFNLEVBQUUsUUFBTSxJQUFFLFNBQU8sS0FBSSxLQUFHO0FBQUEsTUFBSyxLQUFLO0FBQUUsZUFBTyxHQUFHLENBQUMsR0FBRTtBQUFBLE1BQUssS0FBSztBQUFHLFVBQUUsQ0FBQztBQUFFLFlBQUUsRUFBRTtBQUFjLFlBQUcsU0FBTyxLQUFHLFNBQU8sRUFBRSxZQUFXO0FBQUMsY0FBRyxTQUFPLEVBQUUsVUFBVSxPQUFNLE1BQU0sRUFBRSxHQUFHLENBQUM7QUFBRSxhQUFJO0FBQUE7QUFBQyxZQUFFLEVBQUU7QUFBTSxlQUFPLElBQUUsU0FBTyxFQUFFLFFBQU0sSUFBRSxTQUFPLEtBQUksS0FBRztBQUFBLE1BQUssS0FBSztBQUFHLGVBQU8sRUFBRSxDQUFDLEdBQUU7QUFBQSxNQUFLLEtBQUs7QUFBRSxlQUFPLEdBQUksR0FBQztBQUFBLE1BQUssS0FBSztBQUFHLGVBQU8sR0FBRyxFQUFFLEtBQUssUUFBUSxHQUFFO0FBQUEsTUFBSyxLQUFLO0FBQUEsTUFBRyxLQUFLO0FBQUcsZUFBTyxHQUFJLEdBQzlnQjtBQUFBLE1BQUssS0FBSztBQUFHLGVBQU87QUFBQSxNQUFLO0FBQVEsZUFBTztBQUFBLElBQUk7QUFBQSxFQUFDO0FBQUMsTUFBSSxLQUFHLE9BQUcsSUFBRSxPQUFHLEtBQUcsZUFBYSxPQUFPLFVBQVEsVUFBUSxLQUFJLElBQUU7QUFBSyxXQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBSSxRQUFHLFNBQU8sRUFBRSxLQUFHLGVBQWEsT0FBTyxFQUFFLEtBQUc7QUFBQyxRQUFFLElBQUk7QUFBQSxJQUFDLFNBQU8sR0FBRTtBQUFDLFFBQUUsR0FBRSxHQUFFLENBQUM7QUFBQSxJQUFD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QUUsUUFBUSxTQUFPLEVBQUU7QUFBTyxXQUFJLElBQUUsRUFBRSxTQUFRLE1BQUksRUFBRSxPQUFLLE1BQUksRUFBRSxPQUFLLE9BQUssRUFBRSxPQUFLO0FBQUMsWUFBRyxFQUFFLFFBQU0sRUFBRSxVQUFTO0FBQUUsWUFBRyxTQUFPLEVBQUUsU0FBTyxNQUFJLEVBQUUsSUFBSSxVQUFTO0FBQUEsWUFBTyxHQUFFLE1BQU0sU0FBTyxHQUFFLElBQUUsRUFBRTtBQUFBLE1BQUs7QUFBQyxVQUFHLEVBQUUsRUFBRSxRQUFNLEdBQUcsUUFBTyxFQUFFO0FBQUEsSUFBUztBQUFBLEVBQUM7QUFDelQsV0FBUyxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBSSxRQUFHLE1BQUksS0FBRyxNQUFJLEVBQUUsS0FBRSxFQUFFLFdBQVUsSUFBRSxNQUFJLEVBQUUsV0FBUyxFQUFFLFdBQVcsYUFBYSxHQUFFLENBQUMsSUFBRSxFQUFFLGFBQWEsR0FBRSxDQUFDLEtBQUcsTUFBSSxFQUFFLFlBQVUsSUFBRSxFQUFFLFlBQVcsRUFBRSxhQUFhLEdBQUUsQ0FBQyxNQUFJLElBQUUsR0FBRSxFQUFFLFlBQVksQ0FBQyxJQUFHLElBQUUsRUFBRSxxQkFBb0IsU0FBTyxLQUFHLFdBQVMsS0FBRyxTQUFPLEVBQUUsWUFBVSxFQUFFLFVBQVE7QUFBQSxhQUFhLE1BQUksTUFBSSxJQUFFLEVBQUUsT0FBTSxTQUFPLEdBQUcsTUFBSSxHQUFHLEdBQUUsR0FBRSxDQUFDLEdBQUUsSUFBRSxFQUFFLFNBQVEsU0FBTyxJQUFHLElBQUcsR0FBRSxHQUFFLENBQUMsR0FBRSxJQUFFLEVBQUU7QUFBQSxFQUFPO0FBQzFYLFdBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQUksUUFBRyxNQUFJLEtBQUcsTUFBSSxFQUFFLEtBQUUsRUFBRSxXQUFVLElBQUUsRUFBRSxhQUFhLEdBQUUsQ0FBQyxJQUFFLEVBQUUsWUFBWSxDQUFDO0FBQUEsYUFBVSxNQUFJLE1BQUksSUFB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QztBQUFBLElBQUM7QUFBQyxRQUFHLEVBQUUsZUFBYSxNQUFNLE1BQUksSUFBRSxFQUFFLE9BQU0sU0FBTyxJQUFHLElBQUcsR0FBRSxDQUFDLEdBQUUsSUFBRSxFQUFFO0FBQUEsRUFBTztBQUNqZSxXQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsV0FBVSxJQUFFLEVBQUU7QUFBTSxZQUFPLEVBQUUsS0FBSztBQUFBLFdBQUs7QUFBQSxNQUFFLEtBQUs7QUFBQSxNQUFHLEtBQUs7QUFBQSxNQUFHLEtBQUs7QUFBRyxXQUFHLEdBQUUsQ0FBQztBQUFFLFdBQUcsQ0FBQztBQUFFLFlBQUcsSUFBRSxHQUFFO0FBQUMsY0FBRztBQUFDLGVBQUcsR0FBRSxHQUFFLEVBQUUsTUFBTSxHQUFFLEdBQUcsR0FBRSxDQUFDO0FBQUEsVUFBQyxTQUFPLEdBQUU7QUFBQyxjQUFFLEdBQUUsRUFBRSxRQUFPLENBQUM7QUFBQSxVQUFDO0FBQUMsY0FBRztBQUFDLGVBQUcsR0FBRSxHQUFFLEVBQUUsTUFBTTtBQUFBLFVBQUMsU0FBTyxHQUFFO0FBQUMsY0FBRSxHQUFFLEVBQUUsUUFBTyxDQUFDO0FBQUEsVUFBQztBQUFBLFFBQUM7QUFBQztBQUFBLE1BQU0sS0FBSztBQUFFLFdBQUcsR0FBRSxDQUFDO0FBQUUsV0FBRyxDQUFDO0FBQUUsWUFBRSxPQUFLLFNBQU8sS0FBRyxHQUFHLEdBQUUsRUFBRSxNQUFNO0FBQUU7QUFBQSxNQUFNLEtBQUs7QUFBRSxXQUFHLEdBQUUsQ0FBQztBQUFFLFdBQUcsQ0FBQztBQUFFLFlBQUUsT0FBSyxTQUFPLEtBQUcsR0FBRyxHQUFFLEVBQUUsTUFBTTtBQUFFLFlBQUcsRUFBRSxRQUFNLElBQUc7QUFBQyxjQUFJLElBQUUsRUFBRTtBQUFVLGNBQUc7QUFBQyxlQUFHLEdBQUUsRUFBRTtBQUFBLFVBQUMsU0FBTyxHQUFFO0FBQUMsY0FBRSxHQUFFLEVBQUUsUUFBTyxDQUFDO0FBQUEsVUFBQztBQUFBLFFBQUM7QUFBQyxZQUFHLElBQUUsTUFBSSxJQUFFLEVB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O0FBQWEsUUFBRyxHQUFFLEtBQUksRUFBRSxpQkFBZSxFQUFFLFFBQU87QUFBSyxRQUFJLElBQUUsR0FBRyxHQUFFLE1BQUksSUFBRSxJQUFFLENBQUM7QUFBRSxRQUFHLE1BQUksRUFBRSxRQUFPO0FBQUssUUFBRyxPQUFLLElBQUUsT0FBSyxPQUFLLElBQUUsRUFBRSxpQkFBZSxFQUFFLEtBQUUsR0FBRyxHQUFFLENBQUM7QUFBQSxTQUFNO0FBQUMsVUFBRTtBQUFFLFVBQUksSUFBRTtBQUFFLFdBQUc7QUFBRSxVQUFJLElBQUUsR0FBRTtBQUFHLFVBQUcsTUFBSSxLQUFHLE1BQUksRUFBRSxNQUFHLE1BQUssS0FBRyxFQUFHLElBQUMsS0FBSSxHQUFHLEdBQUUsQ0FBQztBQUFFO0FBQUcsWUFBRztBQUFDLGFBQUk7QUFBQztBQUFBLFFBQUssU0FBTyxHQUFFO0FBQUMsYUFBRyxHQUFFLENBQUM7QUFBQSxRQUFDO0FBQUEsYUFBTztBQUFHLFNBQUU7QUFBRyxTQUFHLFVBQVE7QUFBRSxVQUFFO0FBQUUsZUFBTyxJQUFFLElBQUUsS0FBRyxJQUFFLE1BQUssSUFBRSxHQUFFLElBQUU7QUFBQSxJQUFFO0FBQUMsUUFBRyxNQUFJLEdBQUU7QUFBQyxZQUFJLE1BQUksSUFBRSxHQUFHLENBQUMsR0FBRSxNQUFJLE1BQUksSUFBRSxHQUFFLElBQUUsR0FBRyxHQUFFLENBQUM7QUFBSSxVQUFHLE1BQUksRUFBRSxPQUFNLElBQUUsSUFBRyxHQUFHLEdBQUUsQ0FBQyxHQUFFLEdBQUcsR0FBRSxDQUFDLEdBQUUsR0FBRyxHQUFFLEVBQUcsSUFBRTtBQUFFLFVBQUcsTUFBSSxFQUFFLElBQUcsR0FBRSxDQUFDO0FBQUEsV0FDamY7QUFBQyxZQUFFLEVBQUUsUUFBUTtBQUFVLFlBQUcsT0FBSyxJQUFFLE9BQUssQ0FBQyxHQUFHLENBQUMsTUFBSSxJQUFFLEdBQUcsR0FBRSxDQUFDLEdBQUUsTUFBSSxNQUFJLElBQUUsR0FBRyxDQUFDLEdBQUUsTUFBSSxNQUFJLElBQUUsR0FBRSxJQUFFLEdBQUcsR0FBRSxD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QUUsRUFBRSxRQUFPLFNBQU8sS0FBRztBQUFDLFVBQUksSUFBRTtBQUFFLFNBQUcsQ0FBQztBQUFFLGNBQU8sRUFBRSxLQUFLO0FBQUEsYUFBSztBQUFFLGNBQUUsRUFBRSxLQUFLO0FBQWtCLG1CQUFPLEtBQUcsV0FBUyxLQUFHLEdBQUk7QUFBQztBQUFBLFFBQU0sS0FBSztBQUFFLGFBQUk7QUFBQyxZQUFFLEVBQUU7QUFBRSxZQUFFLENBQUM7QUFBRSxhQUFFO0FBQUc7QUFBQSxRQUFNLEtBQUs7QUFBRSxhQUFHLENBQUM7QUFBRTtBQUFBLFFBQU0sS0FBSztBQUFFLGFBQUk7QUFBQztBQUFBLFFBQU0sS0FBSztBQUFHLFlBQUUsQ0FBQztBQUFFO0FBQUEsUUFBTSxLQUFLO0FBQUcsWUFBRSxDQUFDO0FBQUU7QUFBQSxRQUFNLEtBQUs7QUFBRyxhQUFHLEVBQUUsS0FBSyxRQUFRO0FBQUU7QUFBQSxRQUFNLEtBQUs7QUFBQSxRQUFHLEtBQUs7QUFBRyxhQUFFO0FBQUEsTUFBRTtBQUFDLFVBQUUsRUFBRTtBQUFBLElBQU07QUFBQyxRQUFFO0FBQUUsUUFBRSxJQUFFLEdBQUcsRUFBRSxTQUFRLElBQUk7QUFBRSxRQUFFLEtBQUc7QUFBRSxRQUFFO0FBQUUsU0FBRztBQUFLLFNBQUcsS0FBRyxLQUFHO0FBQUUsU0FBRyxLQUFHO0FBQUssUUFBRyxTQUFPLElBQUc7QUFBQyxXQUFJLElBQzFmLEdBQUUsSUFBRSxHQUFHLFFBQU8sSUFBSSxLQUFHLElBQUUsR0FBRyxDQUFDLEdBQUUsSUFBRSxFQUFFLGFBQVksU0FBTyxHQUFFO0FBQUMsVUFBRSxjQUFZO0FBQUssWUFBSSxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUU7QUFBUSxZQUFHLFNBQU8sR0FBRTtBQUFDLGNBQUksSUFBRSxFQUFFO0FBQUssWUFBRSxPQUFLO0FBQUUsWUFBRSxPQUFLO0FBQUEsUUFBQztBQUFDLFVBQUUsVUFBUTtBQUFBLE1BQUM7QUFBQyxXQUFHO0FBQUEsSUFBSTtBQUFDLFdBQU87QUFBQSxFQUFDO0FBQzNLLFdBQVMsR0FBRyxHQUFFLEdBQUU7QUFBQyxPQUFFO0FBQUMsVUFBSSxJQUFFO0FBQUUsVUFBRztBQUFDLFdBQUk7QUFBQyxXQUFHLFVBQVE7QUFBRyxZQUFHLElBQUc7QUFBQyxtQkFBUSxJQUFFLEVBQUUsZUFBYyxTQUFPLEtBQUc7QUFBQyxnQkFBSSxJQUFFLEVBQUU7QUFBTSxxQkFBTyxNQUFJLEVBQUUsVUFBUTtBQUFNLGdCQUFFLEVBQUU7QUFBQSxVQUFJO0FBQUMsZUFBRztBQUFBLFFBQUU7QUFBQyxhQUFHO0FBQUUsWUFBRSxJQUFFLElBQUU7QUFBSyxhQUFHO0FBQUcsYUFBRztBQUFFLFdBQUcsVUFBUTtBQUFLLFlBQUcsU0FBTyxLQUFHLFNBQU8sRUFBRSxRQUFPO0FBQUMsY0FBRTtBQUFFLGVBQUc7QUFBRSxjQUFFO0FBQUs7QUFBQSxRQUFLO0FBQUMsV0FBRTtBQUFDLGNBQUksSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPLElBQUUsR0FBRSxJQUFFO0FBQUUsY0FBRTtBQUFFLFlBQUUsU0FBTztBQUFNLGNBQUcsU0FBTyxLQUFHLGFBQVcsT0FBTyxLQUFHLGVBQWEsT0FBTyxFQUFFLE1BQUs7QUFBQyxnQkFBSSxJQUFFLEdBQUUsSUFBRSxHQUFFLElBQUUsRUFBRTtBQUFJLGdCQUFHLE9BQUssRUFBRSxPQUFLLE9BQUssTUFBSSxLQUFHLE9BQUssS0FBRyxPQUFLLElBQUc7QUFBQyxrQkFBSSxJQUFFLEVBQUU7QUFBVSxtQkFBRyxFQUFFLGNBQVksRUFBRSxhQUFZLEVBQUUsZ0JBQWMsRUFBRSxlQUN4ZSxFQUFFLFFBQU0sRUFBRSxVQUFRLEVBQUUsY0FBWSxNQUFLLEVBQUUsZ0JBQWM7QUFBQSxZQUFLO0FBQUMsZ0JBQUksSUFBRSxHQUFHLENBQUM7QUFBRSxnQkFBRyxTQUFPLEdBQUU7QUFBQyxnQkFBRSxTQUFPO0FBQUssaUJBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUUsZ0JBQUUsT0FBSyxLQUFHLEdBQUcsR0FBRSxHQUFFLENBQUM7QUFBRSxrQkFBRTtBQUFFLGtCQUFFO0FBQUUsa0JBQUksSUFBRSxFQUFFO0FBQVksa0JBQUcsU0FBTyxHQUFFO0FBQUMsb0JBQUksSUFBRSxvQkFBSTtBQUFJLGtCQUFFLElBQUksQ0FBQztBQUFFLGtCQUFFLGNBQVk7QUFBQSxjQUFDLE1BQU0sR0FBRSxJQUFJLENBQUM7QUFBRSxvQkFBTTtBQUFBLFlBQUMsT0FBSztBQUFDLGtCQUFHLE9BQUssSUFBRSxJQUFHO0FBQUMsbUJBQUcsR0FBRSxHQUFFLENBQUM7QUFBRSxtQkFBSTtBQUFDLHNCQUFNO0FBQUEsY0FBQztBQUFDLGtCQUFFLE1BQU0sRUFBRSxHQUFHLENBQUM7QUFBQSxZQUFDO0FBQUEsVUFBQyxXQUFTLEtBQUcsRUFBRSxPQUFLLEdBQUU7QUFBQyxnQkFBSSxJQUFFLEdBQUcsQ0FBQztBQUFFLGdCQUFHLFNBQU8sR0FBRTtBQUFDLHFCQUFLLEVBQUUsUUFBTSxXQUFTLEVBQUUsU0FBTztBQUFLLGlCQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFFLGlCQUFHLEdBQUcsR0FBRSxDQUFDLENBQUM7QUFBRSxvQkFBTTtBQUFBLFlBQUM7QUFBQSxVQUFDO0FBQUMsY0FBRSxJQUFFLEdBQUcsR0FBRSxDQUFDO0FBQUUsZ0JBQUksTUFBSSxJQUFFO0FBQUcsbUJBQU8sS0FBRyxLQUFHLENBQUMsQ0FBQyxJQUFFLEdBQUcsS0FBSyxDQUFDO0FBQUUsY0FBRTtBQUFFLGFBQUU7QUFBQyxvQkFBTyxFQUFFLEtBQUc7QUFBQSxjQUFFLEtBQUs7QUFBRSxrQkFBRSxTQUFPO0FBQ3BmLHFCQUFHLENBQUM7QUFBRSxrQkFBRSxTQUFPO0FBQUUsb0JBQUksSUFBRSxHQUFHLEdBQUUsR0FBRSxDQUFDO0FBQUUsbUJBQUcsR0FBRSxDQUFDO0FBQUUsc0JBQU07QUFBQSxjQUFFLEtBQUs7QUFBRSxvQkFBRTtBQUFFLG9CQUFJLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRTtBQUFVLG9CQUFHLE9BQUssRUFBRSxRQUFNLFNBQU8sZUFBYSxPQUFPLEVBQUUsNEJBQTBCLFNBQU8sS0FBRyxlQUFhLE9BQU8sRUFBRSxzQkFBb0IsU0FBTyxNQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSTtBQUFDLG9CQUFFLFNBQU87QUFBTSx1QkFBRyxDQUFDO0FBQUUsb0JBQUUsU0FBTztBQUFFLHNCQUFJLElBQUUsR0FBRyxHQUFFLEdBQUUsQ0FBQztBQUFFLHFCQUFHLEdBQUUsQ0FBQztBQUFFLHdCQUFNO0FBQUEsZ0JBQUM7QUFBQSxZQUFDO0FBQUMsZ0JBQUUsRUFBRTtBQUFBLFVBQU0sU0FBTyxTQUFPO0FBQUEsUUFBRTtBQUFDLFdBQUcsQ0FBQztBQUFBLE1BQUMsU0FBTyxJQUFHO0FBQUMsWUFBRTtBQUFHLGNBQUksS0FBRyxTQUFPLE1BQUksSUFBRSxJQUFFLEVBQUU7QUFBUTtBQUFBLE1BQVE7QUFBQztBQUFBLElBQUssU0FBTztBQUFBLEVBQUU7QUFBQyxXQUFTLEtBQUk7QUFBQyxRQUFJLElBQUUsR0FBRztBQUFRLE9BQUcsVUFBUTtBQUFHLFdBQU8sU0FBTyxJQUFFLEtBQUc7QUFBQSxFQUFDO0FBQ3JkLFdBQVMsS0FBSTtBQUFDLFFBQUcsTUFBSSxLQUFHLE1BQUksS0FBRyxNQUFJLEVBQUUsS0FBRTtBQUFFLGFBQU8sS0FBRyxPQUFLLEtBQUcsY0FBWSxPQUFLLEtBQUcsY0FBWSxHQUFHLEdBQUUsQ0FBQztBQUFBLEVBQUM7QUFBQyxXQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUUsU0FBRztBQUFFLFFBQUksSUFBRSxHQUFJO0FBQUMsUUFBRyxNQUFJLEtBQUcsTUFBSSxFQUFFLE1BQUcsTUFBSyxHQUFHLEdBQUUsQ0FBQztBQUFFO0FBQUcsVUFBRztBQUFDLFdBQUU7QUFBRztBQUFBLE1BQUssU0FBTyxHQUFFO0FBQUMsV0FBRyxHQUFFLENBQUM7QUFBQSxNQUFDO0FBQUEsV0FBTztBQUFHLE9BQUU7QUFBRyxRQUFFO0FBQUUsT0FBRyxVQUFRO0FBQUUsUUFBRyxTQUFPLEVBQUUsT0FBTSxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUUsUUFBRTtBQUFLLFFBQUU7QUFBRSxXQUFPO0FBQUEsRUFBQztBQUFDLFdBQVMsS0FBSTtBQUFDLFdBQUssU0FBTyxJQUFHLElBQUcsQ0FBQztBQUFBLEVBQUM7QUFBQyxXQUFTLEtBQUk7QUFBQyxXQUFLLFNBQU8sS0FBRyxDQUFDLEdBQUUsSUFBSSxJQUFHLENBQUM7QUFBQSxFQUFDO0FBQUMsV0FBUyxHQUFHLEdBQUU7QUFBQyxRQUFJLElBQUUsR0FBRyxFQUFFLFdBQVUsR0FBRSxFQUFFO0FBQUUsTUFBRSxnQkFBYyxFQUFFO0FBQWEsYUFBTyxJQUFFLEdBQUcsQ0FBQyxJQUFFLElBQUU7QUFBRSxPQUFHLFVBQVE7QUFBQSxFQUFJO0FBQzFkLFdBQVMsR0FBRyxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUUsT0FBRTtBQUFDLFVBQUksSUFBRSxFQUFFO0FBQVUsVUFBRSxFQUFFO0FBQU8sVUFBRyxPQUFLLEVBQUUsUUFBTSxRQUFPO0FBQUMsWUFBRyxJQUFFLEdBQUcsR0FBRSxHQUFFLEVBQUUsR0FBRSxTQUFPLEdBQUU7QUFBQyxjQUFFO0FBQUU7QUFBQSxRQUFNO0FBQUEsTUFBQyxPQUFLO0FBQUMsWUFBRSxHQUFHLEdBQUUsQ0FBQztBQUFFLFlBQUcsU0FBTyxHQUFFO0FBQUMsWUFBRSxTQUFPO0FBQU0sY0FBRTtBQUFFO0FBQUEsUUFBTTtBQUFDLFlBQUcsU0FBTyxFQUFFLEdBQUUsU0FBTyxPQUFNLEVBQUUsZUFBYSxHQUFFLEVBQUUsWUFBVTtBQUFBLGFBQVM7QUFBQyxjQUFFO0FBQUUsY0FBRTtBQUFLO0FBQUEsUUFBTTtBQUFBLE1BQUM7QUFBQyxVQUFFLEVBQUU7QUFBUSxVQUFHLFNBQU8sR0FBRTtBQUFDLFlBQUU7QUFBRTtBQUFBLE1BQU07QUFBQyxVQUFFLElBQUU7QUFBQSxJQUFDLFNBQU8sU0FBTztBQUFHLFVBQUksTUFBSSxJQUFFO0FBQUEsRUFBRTtBQUFDLFdBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxHQUFFLElBQUUsR0FBRztBQUFXLFFBQUc7QUFBQyxTQUFHLGFBQVcsTUFBSyxJQUFF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O0FBQUUsZUFBTyxHQUFHLENBQUMsR0FBRSxTQUFPLEtBQUcsR0FBRyxDQUFDLEdBQUUsSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFLGNBQWEsSUFBRSxTQUFPLElBQUUsRUFBRSxnQkFBYyxNQUFLLElBQUUsRUFBRSxVQUFTLEdBQUcsR0FBRSxDQUFDLElBQUUsSUFBRSxPQUFLLFNBQU8sS0FBRyxHQUFHLEdBQUUsQ0FBQyxNQUFJLEVBQUUsU0FBTyxLQUNuZixHQUFHLEdBQUUsQ0FBQyxHQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsQ0FBQyxHQUFFLEVBQUU7QUFBQSxNQUFNLEtBQUs7QUFBRSxlQUFPLFNBQU8sS0FBRyxHQUFHLENBQUMsR0FBRTtBQUFBLE1BQUssS0FBSztBQUFHLGVBQU8sR0FBRyxHQUFFLEdBQUUsQ0FBQztBQUFBLE1BQUUsS0FBSztBQUFFLGVBQU8sR0FBRyxHQUFFLEVBQUUsVUFBVSxhQUFhLEdBQUUsSUFBRSxFQUFFLGNBQWEsU0FBTyxJQUFFLEVBQUUsUUFBTSxHQUFHLEdBQUUsTUFBSyxHQUFFLENBQUMsSUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLENBQUMsR0FBRSxFQUFFO0FBQUEsTUFBTSxLQUFLO0FBQUcsZUFBTyxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUUsY0FBYSxJQUFFLEVBQUUsZ0JBQWMsSUFBRSxJQUFFLEdBQUcsR0FBRSxDQUFDLEdBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBQSxNQUFFLEtBQUs7QUFBRSxlQUFPLEdBQUcsR0FBRSxHQUFFLEVBQUUsY0FBYSxDQUFDLEdBQUUsRUFBRTtBQUFBLE1BQU0sS0FBSztBQUFFLGVBQU8sR0FBRyxHQUFFLEdBQUUsRUFBRSxhQUFhLFVBQVMsQ0FBQyxHQUFFLEVBQUU7QUFBQSxNQUFNLEtBQUs7QUFBRyxlQUFPLEdBQUcsR0FBRSxHQUFFLEVBQUUsYUFBYSxVQUFTLENBQUMsR0FBRSxFQUFFO0FBQUEsTUFBTSxLQUFLO0FBQUcsV0FBRTtBQUFDLGNBQUUsRUFBRSxLQUFLO0FBQVMsY0FBRSxF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LEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRTtBQUFFLFFBQUU7QUFBRSxRQUFHLGVBQWEsT0FBTyxFQUFFLElBQUcsQ0FBQyxNQUFJLElBQUU7QUFBQSxhQUFXLGFBQVcsT0FBTyxFQUFFLEtBQUU7QUFBQSxRQUFPLEdBQUUsU0FBTyxHQUFDO0FBQUEsTUFBRSxLQUFLO0FBQUcsZUFBTyxHQUFHLEVBQUUsVUFBUyxHQUFFLEdBQUUsQ0FBQztBQUFBLE1BQUUsS0FBSztBQUFHLFlBQUU7QUFBRSxhQUFHO0FBQUU7QUFBQSxNQUFNLEtBQUs7QUFBRyxlQUFPLElBQUUsR0FBRyxJQUFHLEdBQUUsR0FBRSxJQUFFLENBQUMsR0FBRSxFQUFFLGNBQVksSUFBRyxFQUFFLFFBQU0sR0FBRTtBQUFBLE1BQUUsS0FBSztBQUFHLGVBQU8sSUFBRSxHQUFHLElBQUcsR0FBRSxHQUFFLENBQUMsR0FBRSxFQUFFLGNBQVksSUFBRyxFQUFFLFFBQU0sR0FBRTtBQUFBLE1BQUUsS0FBSztBQUFHLGVBQU8sSUFBRSxHQUFHLElBQUcsR0FBRSxHQUFFLENBQUMsR0FBRSxFQUFFLGNBQVksSUFBRyxFQUFFLFFBQU0sR0FBRTtBQUFBLE1BQUUsS0FBSztBQUFHLGVBQU8sR0FBRyxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUEsTUFBRTtBQUFRLFlBQUcsYUFBVyxPQUFPLEtBQUcsU0FBTyxFQUFFLFNBQU8sRUFBRSxVQUFVO0FBQUEsZUFBSztBQUFHLGdCQUFFO0FBQUcsa0JBQU07QUFBQSxVQUFFLEtBQUs7QUFBRyxnQkFBRTtBQUFFLGtCQUFNO0FBQUEsVUFBRSxLQUFLO0FBQUcsZ0JBQUU7QUFDcGYsa0JBQU07QUFBQSxVQUFFLEtBQUs7QUFBRyxnQkFBRTtBQUFHLGtCQUFNO0FBQUEsVUFBRSxLQUFLO0FBQUcsZ0JBQUU7QUFBRyxnQkFBRTtBQUFLLGtCQUFNO0FBQUEsUUFBQztBQUFDLGNBQU0sTUFBTSxFQUFFLEtBQUksUUFBTSxJQUFFLElBQUUsT0FBTyxHQUFFLEVBQUUsQ0FBQztBQUFBLElB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VTtBQUFRLGtCQUFNO0FBQUEsVUFBRSxLQUFLO0FBQUUsZ0JBQUcsR0FBRyxFQUFFLElBQUksR0FBRTtBQUFDLGtCQUFFLEVBQUUsVUFBVTtBQUEwQyxvQkFBTTtBQUFBLFlBQUM7QUFBQSxRQUFDO0FBQUMsWUFBRSxFQUFFO0FBQUEsTUFBTSxTQUFPLFNBQU87QUFBRyxZQUFNLE1BQU0sRUFBRSxHQUFHLENBQUM7QUFBQSxJQUFFO0FBQUMsUUFBRyxNQUFJLEVBQUUsS0FBSTtBQUFDLFVBQUksSUFBRSxFQUFFO0FBQUssVUFBRyxHQUFHLENBQUMsRUFBRSxRQUFPLEdBQUcsR0FBRSxHQUFFLENBQUM7QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQUM7QUFDcFcsV0FBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBRSxHQUFHLEdBQUUsR0FBRSxNQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUUsTUFBRSxVQUFRLEdBQUcsSUFBSTtBQUFFLFFBQUUsRUFBRTtBQUFRLFFBQUUsRUFBRztBQUFDLFFBQUUsR0FBRyxDQUFDO0FBQUUsUUFBRSxHQUFHLEdBQUUsQ0FBQztBQUFFLE1BQUUsV0FBUyxXQUFTLEtBQUcsU0FBTyxJQUFFLElBQUU7QUFBSyxPQUFHLEdBQUUsR0FBRSxDQUFDO0FBQUUsTUFBRSxRQUFRLFFBQU07QUFBRSxPQUFHLEdBQUUsR0FBRSxDQUFDO0FBQUUsT0FBRyxHQUFFLENBQUM7QUFBRSxXQUFPO0FBQUEsRUFBQztBQUFDLFdBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsU0FBUSxJQUFFLEVBQUcsR0FBQyxJQUFFLEdBQUcsQ0FBQztBQUFFLFFBQUUsR0FBRyxDQUFDO0FBQUUsYUFBTyxFQUFFLFVBQVEsRUFBRSxVQUFRLElBQUUsRUFBRSxpQkFBZTtBQUFFLFFBQUUsR0FBRyxHQUFFLENBQUM7QUFBRSxNQUFFLFVBQVEsRUFBQyxTQUFRLEVBQUM7QUFBRSxRQUFFLFdBQVMsSUFBRSxPQUFLO0FBQUUsYUFBTyxNQUFJLEVBQUUsV0FBUztBQUFHLFFBQUUsR0FBRyxHQUFFLEdBQUUsQ0FBQztBQUFFLGFBQU8sTUFBSSxHQUFHLEdBQUUsR0FBRSxHQUFFLENBQUMsR0FBRSxHQUFHLEdBQUUsR0FBRSxDQUFDO0FBQUcsV0FBTztBQUFBLEVBQUM7QUFDM2IsV0FBUyxHQUFHLEdBQUU7QUFBQyxRQUFFLEVBQUU7QUFBUSxRQUFHLENBQUMsRUFBRSxNQUFNLFFBQU87QUFBSyxZQUFPLEVBQUUsTUFBTSxLQUFLO0FBQUEsV0FBSztBQUFFLGVBQU8sRUFBRSxNQUFNO0FBQUEsTUFBVTtBQUFRLGVBQU8sRUFBRSxNQUFNO0FBQUEsSUFBUztBQUFBLEVBQUM7QUFBQyxXQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsUUFBRSxFQUFFO0FBQWMsUUFBRyxTQUFPLEtBQUcsU0FBTyxFQUFFLFlBQVc7QUFBQyxVQUFJLElBQUUsRUFBRTtBQUFVLFFBQUUsWUFBVSxNQUFJLEtBQUcsSUFBRSxJQUFFLElBQUU7QUFBQSxJQUFDO0FBQUEsRUFBQztBQUFDLFdBQVMsR0FBRyxHQUFFLEdBQUU7QUFBQyxPQUFHLEdBQUUsQ0FBQztBQUFFLEtBQUMsSUFBRSxFQUFFLGNBQVksR0FBRyxHQUFFLENBQUM7QUFBQSxFQUFDO0FBQUMsV0FBUyxLQUFJO0FBQUMsV0FBTztBQUFBLEVBQUk7QUFBQyxNQUFJLEtBQUcsZUFBYSxPQUFPLGNBQVksY0FBWSxTQUFTLEdBQUU7QUFBQyxZQUFRLE1BQU0sQ0FBQztBQUFBLEVBQUM7QUFBRSxXQUFTLEdBQUcsR0FBRTtBQUFDLFNBQUssZ0JBQWM7QUFBQSxFQUFDO0FBQzViLEtBQUcsVUFBVSxTQUFPLEdBQUcsVUFBVSxTQUFPLFNBQVMsR0FBRTtBQUFDLFFBQUksSUFBRSxLQUFLO0FBQWMsUUFBRyxTQUFPLEVBQUUsT0FBTSxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUUsT0FBRyxHQUFFLEdBQUUsTUFBSyxJQUFJO0FBQUEsRUFBQztBQUFFLEtBQUcsVUFB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TyxHQUFHLENBQUM7QUFBQSxFQUFDO0FBQUMsT0FBRyxTQUFTLEdBQUU7QUFBQyxZQUFPLEVBQUUsS0FBSztBQUFBLFdBQUs7QUFBRSxZQUFJLElBQUUsRUFBRTtBQUFVLFlBQUcsRUFBRSxRQUFRLGNBQWMsY0FBYTtBQUFDLGNBQUksSUFBRSxHQUFHLEVBQUUsWUFBWTtBQUFFLGdCQUFJLE1BQUksR0FBRyxHQUFFLElBQUUsQ0FBQyxHQUFFLEdBQUcsR0FBRSxFQUFHLElBQUUsT0FBSyxJQUFFLE9BQUssS0FBRyxFQUFHLElBQUMsS0FBSSxHQUFJO0FBQUEsUUFBRTtBQUFDO0FBQUEsTUFBTSxLQUFLO0FBQUcsV0FBRyxXQUFVO0FBQUMsY0FBSUMsS0FBRSxHQUFHLEdBQUUsQ0FBQztBQUFFLGNBQUcsU0FBT0EsSUFBRTtBQUFDLGdCQUFJYSxLQUFFLEVBQUM7QUFBRyxlQUFHYixJQUFFLEdBQUUsR0FBRWEsRUFBQztBQUFBLFVBQUM7QUFBQSxRQUFDLENBQUMsR0FBRSxHQUFHLEdBQUUsQ0FBQztBQUFBLElBQUM7QUFBQSxFQUFDO0FBQy9iLE9BQUcsU0FBUyxHQUFFO0FBQUMsUUFBRyxPQUFLLEVBQUUsS0FBSTtBQUFDLFVBQUksSUFBRSxHQUFHLEdBQUUsU0FBUztBQUFFLFVBQUcsU0FBTyxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUM7QUFBRyxXQUFHLEdBQUUsR0FBRSxXQUFVLENBQUM7QUFBQSxNQUFDO0FBQUMsU0FBRyxHQUFFLFNBQVM7QUFBQSxJQUFDO0FBQUEsRUFBQztBQUFFLE9BQUcsU0FBUyxHQUFFO0FBQUMsUUFBRyxPQUFLLEVBQUUsS0FBSTtBQUFDLFVBQUksSUFBRSxHQUFHLENBQUMsR0FBRSxJQUFFLEdBQUcsR0FBRSxDQUFDO0FBQUUsVUFBRyxTQUFPLEdBQUU7QUFBQyxZQUFJLElBQUUsRUFBQztBQUFHLFdBQUcsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFBLE1BQUM7QUFBQyxTQUFHLEdBQUUsQ0FBQztBQUFBLElBQUM7QUFBQSxFQUFDO0FBQUUsT0FBRyxXQUFVO0FBQUMsV0FBTztBQUFBLEVBQUM7QUFBRSxPQUFHLFNBQVMsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUUsUUFBRztBQUFDLGFBQU8sSUFBRSxHQUFFLEVBQUc7QUFBQSxjQUFDO0FBQVEsVUFBRTtBQUFBLElBQUM7QUFBQSxFQUFDO0FBQ2xTLE9BQUcsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLFlBQU8sR0FBQztBQUFBLE1BQUUsS0FBSztBQUFRLFdBQUcsR0FBRSxDQUFDO0FBQUUsWUFBRSxFQUFFO0FBQUssWUFBRyxZQUFVLEVBQUUsUUFBTSxRQUFNLEdBQUU7QUFBQyxlQUFJLElBQUUsR0FBRSxFQUFFLGFBQVksS0FBRSxFQUFFO0FBQVcsY0FBRSxFQUFFLGlCQUFpQixnQkFBYyxLQUFLLFVBQVUsS0FBRyxDQUFDLElBQUUsaUJBQWlCO0FBQUUsZUFBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLGdCQUFJLElBQUUsRUFBRSxDQUFDO0FBQUUsZ0JBQUcsTUFBSSxLQUFHLEVBQUUsU0FBTyxFQUFFLE1BQUs7QUFBQyxrQkFBSSxJQUFFLEdBQUcsQ0FBQztBQUFFLGtCQUFHLENBQUMsRUFBRSxPQUFNLE1BQU0sRUFBRSxFQUFFLENBQUM7QUFBRSxpQkFBRyxDQUFDO0FBQUUsaUJBQUcsR0FBRSxDQUFDO0FBQUEsWUFBQztBQUFBLFVBQUM7QUFBQSxRQUFDO0FBQUM7QUFBQSxNQUFNLEtBQUs7QUFBVyxXQUFHLEdBQUUsQ0FBQztBQUFFO0FBQUEsTUFBTSxLQUFLO0FBQVMsWUFBRSxFQUFFLE9BQU0sUUFBTSxLQUFHLEdBQUcsR0FBRSxDQUFDLENBQUMsRUFBRSxVQUFTLEdBQUUsS0FBRTtBQUFBLElBQUM7QUFBQSxFQUFDO0FBQUUsT0FBRztBQUFHLE9BQUc7QUFDcGEsTUFBSSxLQUFHLEVBQUMsdUJBQXNCLE9BQUcsUUFBTyxDQUFDLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxFQUFFLEVBQUMsR0FBRSxLQUFHLEVBQUMseUJBQXdCLElBQUcsWUFBVyxHQUFFLFNBQVEsVUFBUyxxQkFBb0IsWUFBVztBQUN6SixNQUFJLEtBQUcsRUFBQyxZQUFXLEdBQUcsWUFBVyxTQUFRLEdBQUcsU0FBUSxxQkFBb0IsR0FBRyxxQkFBb0IsZ0JBQWUsR0FBRyxnQkFBZSxtQkFBa0IsTUFBSyw2QkFBNEIsTUFBSyw2QkFBNEIsTUFBSyxlQUFjLE1BQUsseUJBQXdCLE1BQUsseUJBQXdCLE1BQUssaUJBQWdCLE1BQUssb0JBQW1CLE1BQUssZ0JBQWUsTUFBSyxzQkFBcUIsR0FBRyx3QkFBdUIseUJBQXdCLFNBQVMsR0FBRTtBQUFDLFFBQUUsR0FBRyxDQUFDO0FBQUUsV0FBTyxTQUFPLElBQUUsT0FBSyxFQUFFO0FBQUEsRUFBUyxHQUFFLHlCQUF3QixHQUFHLDJCQUMvZixJQUFHLDZCQUE0QixNQUFLLGlCQUFnQixNQUFLLGNBQWEsTUFBSyxtQkFBa0IsTUFBSyxpQkFBZ0IsTUFBSyxtQkFBa0Isa0NBQWlDO0FBQUUsTUFBRyxnQkFBYyxPQUFPLGdDQUErQjtBQUFDLFFBQUksS0FBRztBQUErQixRQUFHLENBQUMsR0FBRyxjQUFZLEdBQUcsY0FBYyxLQUFHO0FBQUMsV0FBRyxHQUFHLE9BQU8sRUFBRSxHQUFFLEtBQUc7QUFBQSxJQUFFLFNBQU8sR0FBRTtBQUFBO0VBQUU7QUFBQywrRUFBMkQ7QUFDM1gseUNBQUMsU0FBUyxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsSUFBRSxVQUFVLFVBQVEsV0FBUyxVQUFVLENBQUMsSUFBRSxVQUFVLENBQUMsSUFBRTtBQUFLLFFBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFNLE1BQU0sRUFBRSxHQUFHLENBQUM7QUFBRSxXQUFPLEdBQUcsR0FBRSxHQUFFLE1BQUssQ0FBQztBQUFBLEVBQUM7QUFBRSx1Q0FBbUIsU0FBUyxHQUFFLEdBQUU7QUFBQyxRQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTSxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUUsUUFBSSxJQUFFLE9BQUcsSUFBRSxJQUFHLElBQUU7QUFBRyxhQUFPLEtBQUcsV0FBUyxNQUFJLFNBQUssRUFBRSx3QkFBc0IsSUFBRSxPQUFJLFdBQVMsRUFBRSxxQkFBbUIsSUFBRSxFQUFFLG1CQUFrQixXQUFTLEVBQUUsdUJBQXFCLElBQUUsRUFBRTtBQUFxQixRQUFFLEdBQUcsR0FBRSxHQUFFLE9BQUcsTUFBSyxNQUFLLEdBQUUsT0FBRyxHQUFFLENBQUM7QUFBRSxNQUFFLEVBQUUsSUFBRSxFQUFFO0FBQVEsT0FBRyxNQUFJLEVBQUUsV0FBUyxFQUFFLGFBQVcsQ0FBQztBQUFFLFdBQU8sSUFBSSxHQUFHLENBQUM7QUFBQSxFQUFDO0FBQ3JmLHdDQUFvQixTQUFTLEdBQUU7QUFBQyxRQUFHLFFBQU0sRUFBRSxRQUFPO0FBQUssUUFBRyxNQUFJLEVBQUUsU0FBUyxRQUFPO0FBQUUsUUFBSSxJQUFFLEVBQUU7QUFBZ0IsUUFBRyxXQUFTLEdBQUU7QUFBQyxVQUFHLGVBQWEsT0FBTyxFQUFFLE9BQU8sT0FBTSxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUUsVUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFLEtBQUssR0FBRztBQUFFLFlBQU0sTUFBTSxFQUFFLEtBQUksQ0FBQyxDQUFDO0FBQUEsSUFBRTtBQUFDLFFBQUUsR0FBRyxDQUFDO0FBQUUsUUFBRSxTQUFPLElBQUUsT0FBSyxFQUFFO0FBQVUsV0FBTztBQUFBLEVBQUM7QUFBRSwwQkFBaUIsWUFBQyxTQUFTLEdBQUU7QUFBQyxXQUFPLEdBQUcsQ0FBQztBQUFBLEVBQUM7QUFBRSwwQkFBZSxVQUFDLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTSxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUUsV0FBTyxHQUFHLE1BQUssR0FBRSxHQUFFLE1BQUcsQ0FBQztBQUFBLEVBQUM7QUFDNVgsd0NBQUMsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFNLE1BQU0sRUFBRSxHQUFHLENBQUM7QUFBRSxRQUFJLElBQUUsUUFBTSxLQUFHLEVBQUUsbUJBQWlCLE1BQUssSUFBRSxPQUFHLElBQUUsSUFBRyxJQUFFO0FBQUcsYUFBTyxLQUFHLFdBQVMsTUFBSSxTQUFLLEVBQUUsd0JBQXNCLElBQUUsT0FBSSxXQUFTLEVBQUUscUJBQW1CLElBQUUsRUFBRSxtQkFBa0IsV0FBUyxFQUFFLHVCQUFxQixJQUFFLEVBQUU7QUFBcUIsUUFBRSxHQUFHLEdBQUUsTUFBSyxHQUFFLEdBQUUsUUFBTSxJQUFFLElBQUUsTUFBSyxHQUFFLE9BQUcsR0FBRSxDQUFDO0FBQUUsTUFBRSxFQUFFLElBQUUsRUFBRTtBQUFRLE9BQUcsQ0FBQztBQUFFLFFBQUcsRUFBRSxNQUFJLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxJQUFJLEtBQUUsRUFBRSxDQUFDLEdBQUUsSUFBRSxFQUFFLGFBQVksSUFBRSxFQUFFLEVBQUUsT0FBTyxHQUFFLFFBQU0sRUFBRSxrQ0FBZ0MsRUFBRSxrQ0FBZ0MsQ0FBQyxHQUFFLENBQUMsSUFBRSxFQUFFLGdDQUFnQztBQUFBLE1BQUs7QUFBQSxNQUN2aEI7QUFBQSxJQUFDO0FBQUUsV0FBTyxJQUFJLEdBQUcsQ0FBQztBQUFBLEVBQUM7QUFBRSxtQ0FBZSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU0sTUFBTSxFQUFFLEdBQUcsQ0FBQztBQUFFLFdBQU8sR0FBRyxNQUFLLEdBQUUsR0FBRSxPQUFHLENBQUM7QUFBQSxFQUFDO0FBQUUsbURBQStCLFNBQVMsR0FBRTtBQUFDLFFBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFNLE1BQU0sRUFBRSxFQUFFLENBQUM7QUFBRSxXQUFPLEVBQUUsdUJBQXFCLEdBQUcsV0FBVTtBQUFDLFNBQUcsTUFBSyxNQUFLLEdBQUUsT0FBRyxXQUFVO0FBQUMsVUFBRSxzQkFBb0I7QUFBSyxVQUFFLEVBQUUsSUFBRTtBQUFBLE1BQUksQ0FBQztBQUFBLElBQUMsQ0FBQyxHQUFFLFFBQUk7QUFBQSxFQUFFO0FBQUUsMEJBQStCLDBCQUFDO0FBQy9VLGdFQUE0QyxTQUFTLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTSxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQUUsUUFBRyxRQUFNLEtBQUcsV0FBUyxFQUFFLGdCQUFnQixPQUFNLE1BQU0sRUFBRSxFQUFFLENBQUM7QUFBRSxXQUFPLEdBQUcsR0FBRSxHQUFFLEdBQUUsT0FBRyxDQUFDO0FBQUEsRUFBQztBQUFFLG9DQUFnQjs7Ozs7OztBQy9UN0wsV0FBUyxXQUFXO0FBRWxCLFFBQ0UsT0FBTyxtQ0FBbUMsZUFDMUMsT0FBTywrQkFBK0IsYUFBYSxZQUNuRDtBQUNBO0FBQUE7QUFZRTtBQUVGLHFDQUErQixTQUFTLFFBQVE7QUFBQSxhQUN6QyxLQUFLO0FBR1osY0FBUSxNQUFNLEdBQUc7QUFBQTtBQUFBLEVBRXJCO0FBRTJDO0FBR2hDO0FBQ0ZNLGFBQUEsVUFBVWpCLCtCQUEyQztBQUFBOzs7Ozs7O0FDaEM5RCxNQUFJLElBQUlBLGdCQUFtQjtBQUNnQjtBQUN6Qyx3QkFBcUIsRUFBRTtBQUN2Qix5QkFBc0IsRUFBRTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNXVixtQkFBVSxNQUFjLGVBQW9EO0FBQzFGLFFBQU0sUUFBUTtBQUNkLFFBQU0sU0FBbUIsQ0FBQztBQUN0QjtBQUNKLE1BQUksUUFBYSxDQUFDO0FBRWxCLE1BQUksVUFBVTtBQUNkLE1BQUksS0FBeUIsK0NBQWU7QUFDNUMsTUFBSSxLQUF5QiwrQ0FBZTtBQUU1QyxVQUFRLFFBQVEsTUFBTSxLQUFLLElBQUksT0FBTyxNQUFNO0FBQzFDLFVBQU0sQ0FBSyxlQUFXa0IsS0FBSSxJQUFJO0FBQzlCLFFBQUksU0FBUztBQUNYLFlBQU0sT0FBTyxDQUFDO0FBQ2QsY0FBUSxNQUFNO0FBQUEsUUFDWixLQUFLO0FBQUcsa0JBQVEsQ0FBQztBQUFHO0FBQUEsUUFDcEIsS0FBSztBQUFHLGdCQUFNLGFBQWEsSUFBSTtBQUFRO0FBQUEsUUFDdkMsS0FBSztBQUFHLGdCQUFNLFNBQVMsSUFBSTtBQUFPO0FBQUEsUUFDbEMsS0FBSztBQUFHLGdCQUFNLFlBQVksSUFBSTtBQUFVO0FBQUEsUUFDeEMsS0FBSztBQUFHLGdCQUFNLGlCQUFpQixJQUFJO0FBQWE7QUFBQSxRQUNoRCxLQUFLO0FBQ087QUFDVjtBQUFBLFFBQ0YsS0FBSztBQUFHLGdCQUFNLFVBQVU7QUFBUTtBQUFBLFFBQ2hDLEtBQUs7QUFBRyxnQkFBTSxpQkFBaUIsSUFBSTtBQUFnQjtBQUFBLFFBQ25ELEtBQUs7QUFDSCxpQkFBTyxNQUFNLGFBQWE7QUFDMUIsaUJBQU8sTUFBTSxZQUFZO0FBQ3pCLGlCQUFPLE1BQU0sU0FBUztBQUN0QixpQkFBTyxNQUFNLGlCQUFpQjtBQUM5QjtBQUFBLFFBQ0YsS0FBSztBQUNILGlCQUFPLE1BQU0sYUFBYTtBQUMxQixpQkFBTyxNQUFNLFlBQVk7QUFDekIsaUJBQU8sTUFBTSxTQUFTO0FBQ3RCO0FBQUEsUUFDRixLQUFLO0FBQ0gsaUJBQU8sTUFBTSxpQkFBaUI7QUFDOUI7QUFBQSxRQUNGLEtBQUs7QUFDTztBQUNWO0FBQUEsUUFDRixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0UsMEJBQVcsT0FBTyxFQUFFO0FBQ3pCO0FBQUEsUUFDRixLQUFLO0FBQ0gsZUFBSywrQ0FBZTtBQUNwQjtBQUFBLFFBQ0YsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNFLDBCQUFXLE9BQU8sRUFBRTtBQUN6QjtBQUFBLFFBQ0YsS0FBSztBQUNILGVBQUssK0NBQWU7QUFDcEI7QUFBQSxRQUNGLEtBQUs7QUFBSSxnQkFBTSxpQkFBaUIsSUFBSTtBQUFZO0FBQUEsUUFDaEQsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNFLGdDQUFpQixPQUFPLEVBQUU7QUFDL0I7QUFBQSxRQUNGLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDRSxnQ0FBaUIsT0FBTyxHQUFHO0FBQ2hDO0FBQUE7QUFBQSxlQUVLQSxPQUFNO0FBQ1Qsd0JBQVksRUFBRSxHQUFHLE1BQU07QUFDdkIsb0JBQVEsVUFBVSxLQUFLO0FBQzdCLFVBQUksVUFBVTtBQUNaLGtCQUFVLE9BQU8sSUFBSTtBQUNqQiw4QkFBa0IsVUFBVSxLQUFLO0FBQ3ZDLFVBQUksb0JBQW9CO0FBQ3RCLGtCQUFVLGtCQUFrQixJQUFJO0FBQzNCLGtCQUFLLGdCQUFnQixVQUFVLFNBQVMsQ0FBQyxLQUFLLFdBQVdBLEtBQUksQ0FBQyxTQUFTO0FBQUE7QUFBQSxFQUNoRjtBQUVLLGdCQUFPLEtBQUssRUFBRTtBQUN2QjtBQUVBLE1BQU0sYUFBcUM7QUFBQSxFQUN6QyxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQ0w7QUFFQSxNQUFNLG1CQUEyQztBQUFBLEVBQy9DLEdBQUc7QUFBQSxFQUNILEdBQUc7QUFBQSxFQUNILEdBQUc7QUFBQSxFQUNILEdBQUc7QUFBQSxFQUNILEdBQUc7QUFBQSxFQUNILEdBQUc7QUFBQSxFQUNILEdBQUc7QUFBQSxFQUNILEdBQUc7QUFDTDtBQUVBLFNBQVMsV0FBVyxNQUFzQjtBQUN4QyxTQUFPLEtBQUssUUFBUSxXQUFXLFFBQU0sRUFBRSxLQUFLLFNBQVMsS0FBSyxVQUFVLEtBQUssUUFBUSxLQUFLLE9BQU8sR0FBRSxDQUFDLENBQUc7QUFDckc7QUFFQSxTQUFTLFVBQVUsT0FBb0I7QUFDckMsU0FBTyxPQUFPLFFBQVEsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLEdBQUcsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFLEtBQUssSUFBSTtBQUNwRjtBQ2pHTyxNQUFNLG9CQUEyQyxDQUFDO0FBQUEsRUFDdkQ7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0YsTUFBTTtBQUNKLFFBQU0sQ0FBQyxTQUFTLGlCQUFpQixJQUFJLFdBQTJCO0FBQ2hFLFFBQU0sQ0FBQyxhQUFhLElBQUlDLHNCQUFvQywyQkFBTyxnQ0FBb0IsMkNBQUUsS0FBSyxPQUFLLEVBQUUsT0FBTyxDQUFDO0FBQ3ZHLHdCQUFnQkMsYUFBTSxPQUtsQixJQUFJO0FBQ2QsUUFBTSxDQUFDLFlBQVksYUFBYSxJQUFJRCxzQkFBa0M7QUFFdEVFLHlCQUFnQixNQUFNO0FBQ3BCLEtBQUMsWUFBWTs7QUFFWCxZQUFNLGFBQWEsTUFBTTtBQUN6Qix1QkFBaUIsVUFBVTtBQUUzQixZQUFNLFVBQVUsa0JBQWtCO0FBQ2xDLFVBQUksQ0FBQztBQUNIO0FBRUksbUJBQU8sa0JBQWtCLFdBQVcsS0FBSyxlQUFlLFFBQVEsTUFBTSxVQUFVLG1CQUFtQjtBQUV6RyxVQUFJLGNBQWMsV0FDYixTQUFTLGNBQWMsUUFBUSxHQUFHLFVBQVUsTUFBTSxLQUNsRCxDQUFDLENBQUMsYUFBYSxjQUFjLFFBQVEsR0FBRyxVQUFVLFVBQVUsS0FDNUQsZ0JBQWdCLGNBQWMsUUFBUSxHQUFHLFVBQVUsYUFBYSxLQUNoRSxjQUFjLGNBQWMsUUFBUSxHQUFHLFVBQVUsY0FBYyxLQUMvRCxnQkFBZ0IsY0FBYyxRQUFRLEdBQUcsVUFBVSxhQUFhLEdBQUc7QUFFdEU7QUFBQTtBQUlGLGdDQUFjLFlBQWQsbUJBQXVCLE9BQXZCLG1CQUEyQixvQkFBb0I7QUFDekMsaUJBQUssV0FBVyxTQUFTO0FBQUEsUUFDN0IsT0FBTztBQUFBLFFBQ1A7QUFBQSxRQUNBLFVBQVUsQ0FBQyxDQUFDO0FBQUEsUUFDWjtBQUFBLFFBQ0EsY0FBYztBQUFBLFFBQ2Q7QUFBQSxPQUNEO0FBQ2EsOEJBQVUsRUFBRSxHQUFHO0FBQ3pCO0FBQ0YsV0FBRyxNQUFNO0FBQ1gsb0JBQWMsRUFBRTtBQUNUO0FBQUEsT0FDTjtBQUFBLEVBQ0YsSUFBQyxlQUFlLFlBQVksbUJBQW1CLGFBQWEsVUFBVSxTQUFTLGFBQWEsV0FBVyxVQUFVLFdBQVcsV0FBVyxDQUFDO0FBRTNJQSx5QkFBZ0IsTUFBTTtBQUNwQixRQUFJLGNBQWM7QUFDaEIsb0JBQWMsUUFBUSxHQUFHLFFBQVEsUUFBUSxPQUFPLFFBQVEsTUFBTTtBQUFBLEtBQy9ELENBQUMsT0FBTyxDQUFDO0FBRVpDLCtCQUFzQixNQUFNOztBQUMxQixRQUFJLENBQUM7QUFDSDtBQUVGLFFBQUksZUFBZTtBQUNmLG1CQUFXLFNBQVMsTUFBTSxNQUFNO0FBQ2xDLGlCQUFXLFNBQVMsSUFBSTtBQUNUO0FBQ2YsVUFBSSxlQUFlO0FBQ2pCLG1CQUFXLFlBQVksV0FBVztBQUNsQyxtQkFBVyxNQUFNO0FBQUE7QUFBQSxJQUNuQjtBQUdFLHdCQUFnQixLQUFLLFVBQVUsU0FBUyxNQUFNLEtBQUssVUFBVSxjQUFjLFFBQVMsU0FBUyxHQUFHO0FBRWxHLGlCQUFXLEtBQUssY0FBYyxRQUFTLGFBQWEsQ0FBQztBQUNuRCxtQkFBVyxnQkFBZ0IsRUFBRSxPQUFPLEdBQUcsTUFBTTtBQUNwQyxzQkFBSyxhQUFhLENBQUM7QUFDakIsZ0NBQWEsRUFBRSxPQUFPLEdBQUcsUUFBUSxlQUFlLEVBQUUsSUFBSSxFQUFFO0FBR3JFLGlCQUFXLEtBQUssY0FBYyxRQUFTLFdBQVcsQ0FBQztBQUNqRCxtQkFBVyxpQkFBaUIsQ0FBQztBQUMvQixpQkFBVyxLQUFLLGNBQWMsUUFBUyxXQUFXLENBQUM7QUFDakQsVUFBRSxNQUFNO0FBQ1YsWUFBTSxVQUFtQyxDQUFDO0FBQzFDLFlBQU0sVUFBbUMsQ0FBQztBQUMvQixzQkFBSyxhQUFhLElBQUk7QUFDL0IsWUFBSSxFQUFFLFNBQVMsa0JBQWtCLEVBQUUsU0FBUztBQUMxQztBQUVGLGNBQU0sUUFBTyxtQkFBYyxZQUFkLG1CQUF1QixHQUFHLFFBQVEsRUFBRSxPQUFPO0FBQ3hELFlBQUksTUFBTTtBQUNSLGdCQUFNLGFBQXFDLENBQUM7QUFDakMsNEJBQU8sSUFBSSxFQUFFLFdBQVc7QUFDbkMsa0JBQVEsS0FBSyxXQUFXO0FBQUEsWUFDcEIsRUFBRSxNQUFNLEVBQUUsT0FBTyxHQUFHLElBQUksRUFBRTtBQUFBLFlBQzFCLEVBQUUsTUFBTSxFQUFFLE9BQU8sR0FBRyxJQUFJLEVBQUUsVUFBVSxLQUFLLE9BQU87QUFBQSxZQUNoRCxFQUFFLFdBQVcsK0JBQStCLFdBQVc7QUFBQSxXQUFFO0FBQUE7QUFHM0QsY0FBRSxTQUFTLFNBQVM7QUFDaEIscUNBQXFCLFNBQVMsY0FBYyxLQUFLO0FBQ3ZELDZCQUFtQixZQUFZLFVBQVUsRUFBRSxXQUFXLEVBQUU7QUFDeEQsNkJBQW1CLFlBQVk7QUFDL0Isa0JBQVEsS0FBSyxXQUFXLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixFQUFFLE9BQU8sTUFBTSxhQUFhLE1BQU8sRUFBQztBQUFBO0FBQUEsTUFDeEc7QUFJRixvQkFBYyxRQUFTLFlBQVk7QUFDbkMsb0JBQWMsUUFBUyxVQUFVO0FBQ2pDLG9CQUFjLFFBQVMsVUFBVTtBQUFBO0FBSW5DLFFBQUksT0FBTyxlQUFlLFlBQVksY0FBYyxRQUFTLEdBQUcsZUFBZTtBQUM3RSxpQkFBVyxlQUFlLEVBQUUsTUFBTSxLQUFLLElBQUksR0FBRyxhQUFhLENBQUMsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFO0FBRXhFO0FBQ0osUUFBSSxVQUFVO0FBQ1osdUJBQWlCLE1BQU0sU0FBUyxXQUFXLFVBQVU7QUFDMUMsb0JBQUcsVUFBVSxjQUFjO0FBQUE7QUFHeEMsV0FBTyxNQUFNO0FBQ1A7QUFDUyx1QkFBSSxVQUFVLGNBQWM7QUFBQSxJQUMzQztBQUFBLEtBQ0MsQ0FBQyxZQUFZLE1BQU0sV0FBVyxZQUFZLGVBQWUsUUFBUSxDQUFDO0FBRTlELFNBQUFDLHNDQUFDLFNBQUksZUFBYSxZQUFZLFdBQVUsY0FBYSxLQUFLLG1CQUFtQixTQUFTLGtCQUFtQjtBQUNsSDtBQUVBLFNBQVMsa0JBQWtCLE9BQXlCOztBQUM5QyxRQUFFLE1BQU0sa0JBQWtCO0FBQzVCO0FBQ0U7QUFDSixNQUFJLE1BQU0sT0FBTyxVQUFVLFNBQVMsY0FBYyxHQUFHO0FBRW5ELFVBQU0sTUFBTSxPQUFPO0FBQUEsRUFDVixpQkFBTSxPQUFPLFVBQVUsU0FBUyxTQUFTLE9BQUssV0FBTSxPQUFPLHVCQUFiLG1CQUFpQyxVQUFVLFNBQVMsWUFBVztBQUV0SCxVQUFNLE1BQU0sT0FBTyxtQkFBbUIsWUFBYSxNQUFNLEdBQUcsRUFBRTtBQUFBO0FBRWhFLE1BQUksS0FBSztBQUNQLFVBQU0sZUFBZTtBQUNyQixVQUFNLGdCQUFnQjtBQUNmLGdCQUFLLEtBQUssUUFBUTtBQUFBO0FBRTdCO0FBRUEsSUFBSSxvQkFBb0I7QUFDeEIsU0FBUyxpQkFBaUIsSUFBZ0I7QUFDcEM7QUFDRjtBQUNrQjtBQUNuQixLQUFXLGlCQUFpQixrQkFBa0I7QUFBQSxJQUM3QyxPQUFPO0FBQUEsTUFDTCxFQUFFLE9BQU8sWUFBWSxPQUFPLFlBQVk7QUFBQTtBQUFBLEVBQzFDLENBQ0Q7QUFDSDtBQUVBLFNBQVMsZUFBZSxVQUFrRDtBQUN4RSxNQUFJLENBQUM7QUFDSDtBQUNGLE1BQUksU0FBUyxTQUFTLFlBQVksS0FBSyxTQUFTLFNBQVMsTUFBTTtBQUN0RDtBQUNMLGVBQVMsU0FBUyxRQUFRO0FBQ3JCO0FBQ0wsZUFBUyxTQUFTLFFBQVE7QUFDckI7QUFDTCxlQUFTLFNBQVMsTUFBTTtBQUNuQjtBQUNMLGVBQVMsU0FBUyxVQUFVO0FBQ3ZCO0FBQ1QsTUFBSSxTQUFTLFNBQVMsTUFBTSxLQUFLLFNBQVMsU0FBUyxLQUFLO0FBQy9DO0FBQ0wsZUFBUyxTQUFTLEtBQUs7QUFDbEI7QUFDWDtBQUVBLFNBQVMsa0JBQWtCLGFBQW9FO0FBQzdGLE1BQUksQ0FBQztBQUNIO0FBQ0s7QUFBQSxJQUNMLFlBQVk7QUFBQSxJQUNaLE9BQU87QUFBQSxJQUNQLFFBQVE7QUFBQSxJQUNSLFFBQVE7QUFBQSxJQUNSLE1BQU07QUFBQSxJQUNOLFVBQVU7QUFBQSxJQUNWLE1BQU07QUFBQSxJQUNOLEtBQUs7QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLFdBQVc7QUFDZjtBQ3BPQSxNQUFNLFdBQVc7QUFFVixNQUFNLFlBQXNDLENBQUM7QUFBQSxFQUNsRDtBQUFBLEVBQ0EsZ0JBQWdCO0FBQUEsRUFDaEIsaUJBQWlCO0FBQUEsRUFDakIsY0FBYztBQUFBLEVBQ2QsaUJBQWlCO0FBQUEsRUFDakI7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNGLE1BQU07QUFDSixRQUFNLGNBQWMsS0FBSyxJQUFJLGdCQUFnQixXQUFXLElBQUksT0FBTztBQUM3RCxTQUFDLE9BQU8sUUFBUSxJQUFJLFdBQW1CLGNBQWMsY0FBYyxNQUFNLGNBQWMsVUFBVSxRQUFXLFdBQVc7QUFDdkgsU0FBQyxPQUFPLFFBQVEsSUFBSSxXQUFtQixjQUFjLGNBQWMsTUFBTSxjQUFjLFVBQVUsUUFBVyxXQUFXO0FBRTdILFFBQU0sQ0FBQyxVQUFVLFdBQVcsSUFBSUosc0JBQXdELElBQUk7QUFDNUYsUUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLFdBQTJCO0FBRTlDO0FBQ0osTUFBSSxnQkFBZ0IsWUFBWTtBQUM5QixXQUFPLFFBQVEsT0FBTztBQUNsQixtQkFBVyxRQUFRLFNBQVM7QUFDOUIsYUFBTyxRQUFRLFNBQVM7QUFBQSxTQUNyQjtBQUNMLFdBQU8sUUFBUSxPQUFPO0FBQ2xCLG1CQUFXLFFBQVEsUUFBUTtBQUM3QixhQUFPLFFBQVEsUUFBUTtBQUFBO0FBRzNCLFdBQVMsS0FBSyxNQUFNLGFBQWEsV0FBVyxTQUFTO0FBQ3JELE1BQUksZUFBb0IsQ0FBQztBQUN6QixNQUFJLGdCQUFnQixZQUFZO0FBQzFCO0FBQ0YscUJBQWUsRUFBRSxLQUFLLFdBQVcsSUFBSSxPQUFPLEdBQUcsUUFBUSxXQUFXLElBQUksUUFBVyxRQUFRLFdBQVcsWUFBWSxFQUFFO0FBQUE7QUFFbEgscUJBQWUsRUFBRSxRQUFRLFdBQVcsSUFBSSxPQUFPLEdBQUcsS0FBSyxXQUFXLElBQUksUUFBVyxRQUFRLFdBQVcsWUFBWSxFQUFFO0FBQUEsU0FDL0c7QUFDRDtBQUNGLHFCQUFlLEVBQUUsTUFBTSxXQUFXLElBQUksT0FBTyxHQUFHLE9BQU8sV0FBVyxJQUFJLFFBQVcsT0FBTyxXQUFXLFlBQVksRUFBRTtBQUFBO0FBRWpILHFCQUFlLEVBQUUsT0FBTyxXQUFXLElBQUksT0FBTyxHQUFHLE1BQU0sV0FBVyxJQUFJLFFBQVcsT0FBTyxXQUFXLFlBQVksRUFBRTtBQUFBO0FBRzlHLFNBQUFLLHVDQUFDLFNBQUksV0FBVyxLQUFLLGNBQWMsYUFBYSxrQkFBa0IsZUFBZSxHQUFHLEtBQ3pGO0FBQUEsSUFBQ0Qsa0NBQUEsYUFBSSxXQUFVLG1CQUFtQixVQUFLO0FBQUEsSUFDdEMsQ0FBQyxpQkFBaUJBLGtDQUFBLElBQUMsT0FBSSxTQUFPLEVBQUUsV0FBVyxLQUFLLEdBQUcsV0FBVSxzQkFBc0IsVUFBUTtBQUFBLElBQzNGLENBQUMsaUJBQWlCQSxrQ0FBQTtBQUFBLE1BQUM7QUFBQTtBQUFBLFFBQ2xCLE9BQU87QUFBQSxRQUNQLFdBQVU7QUFBQSxRQUNWLGFBQWEsV0FBUyxZQUFZLEVBQUUsUUFBUSxnQkFBZ0IsYUFBYSxNQUFNLFVBQVUsTUFBTSxTQUFTLE1BQU07QUFBQSxRQUM5RyxXQUFXLE1BQU0sWUFBWSxJQUFJO0FBQUEsUUFDakMsYUFBYSxDQUFTO0FBQ2hCLGVBQUMsTUFBTSxTQUFTO0FBQ2xCLHdCQUFZLElBQUk7QUFBQSxxQkFDUCxVQUFVO0FBQ25CLGtCQUFNLFNBQVMsZ0JBQWdCLGFBQWEsTUFBTSxVQUFVLE1BQU07QUFDNUQsMEJBQVEsU0FBUyxTQUFTO0FBQ2hDLGtCQUFNLFVBQVUsaUJBQWlCLFNBQVMsT0FBTyxRQUFRLFNBQVMsT0FBTztBQUVuRSw4QkFBYSxNQUFNLE9BQXVCO0FBQzFDLHlCQUFPLFVBQVUsc0JBQXNCO0FBQzdDLGtCQUFNRSxRQUFPLEtBQUssSUFBSSxLQUFLLElBQUksZ0JBQWdCLE9BQU8sSUFBSSxnQkFBZ0IsYUFBYSxLQUFLLFNBQVMsS0FBSyxTQUFTLGNBQWM7QUFDakksZ0JBQUksZ0JBQWdCO0FBQ1RBLCtCQUFPLE9BQU8sZ0JBQWdCO0FBQUE7QUFFOUJBLCtCQUFPLE9BQU8sZ0JBQWdCO0FBQUE7QUFBQSxRQUMzQztBQUFBLE1BQ0Y7QUFBQTtBQUFBLEVBQ0QsR0FDSDtBQUNGO0FDM0VPLE1BQU0sVUFBMkQsQ0FBQztBQUFBLEVBQ3ZFO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFDRixNQUFNO0FBQ0osU0FBUUYsc0NBQUEsU0FBSSxXQUFXLEtBQUssV0FBVyxZQUFZLGFBQWEsZUFBZSxpQkFBaUIsV0FBVyxxQkFBcUIsNEJBQTRCLEdBQUcsU0FBbUIsVUFBUztBQUM3TDtBQ1BhLG1CQVFSLENBQUMsRUFBRSxNQUFNLGFBQWEsZ0JBQWdCLGFBQWEsY0FBYyxZQUFZLFdBQVc7QUFDckYsYUFBS0csbUJBQVk7QUFDdkIsTUFBSSxDQUFDO0FBQ1csdUJBQUssQ0FBQyxFQUFFO0FBQ3hCLE1BQUksQ0FBQztBQUNJO0FBQ0YsU0FBQUgsa0NBQUEsSUFBQyxTQUFJLFdBQVUsZUFBYyxlQUFhLFlBQy9DLFVBQUFDLGtDQUFBLEtBQUMsT0FBSSxhQUFVLFFBQ2I7QUFBQSxJQUFBQSx1Q0FBQyxTQUNHO0FBQUEscUJBQWdCQSxrQ0FBQSxjQUFJLE9BQU8sRUFBRSxNQUFNLFFBQVEsU0FBUyxRQUFRLFFBQVEsU0FBUyxZQUFZLFlBQ3hGO0FBQUEsUUFBRztBQUFBLFNBQ047QUFBQSxNQUNDLFNBQVMsYUFBYUQsc0NBQUMsT0FBSSxTQUFPLEVBQUUsTUFBTSxRQUFRLFNBQVMsUUFBUSxRQUFRLFFBQVEsVUFBVSxTQUFTLEdBQUcsTUFBSyxXQUM1RztBQUFBLFFBQUMsR0FBRyxLQUFLLElBQUksQ0FDWixRQUFBQSxrQ0FBQTtBQUFBLFVBQUM7QUFBQTtBQUFBLFlBRUMsSUFBSSxJQUFJO0FBQUEsWUFDUixjQUFjLEdBQUcsRUFBRSxJQUFJLElBQUksRUFBRTtBQUFBLFlBQzdCLE9BQU8sSUFBSTtBQUFBLFlBQ1gsT0FBTyxJQUFJO0FBQUEsWUFDWCxZQUFZLElBQUk7QUFBQSxZQUNoQixVQUFVLGdCQUFnQixJQUFJO0FBQUEsWUFDOUIsVUFBVTtBQUFBO0FBQUEsVUFQTCxJQUFJO0FBQUEsUUFRUjtBQUFBLFNBRVA7QUFBQSxNQUNDLFNBQVMsWUFBYUEsa0NBQUEsYUFBSSxPQUFPLEVBQUUsTUFBTSxRQUFRLFNBQVMsUUFBUSxRQUFRLFFBQVEsVUFBVSxTQUFTLEdBQUcsTUFBSyxXQUM1RyxVQUFDQSxzQ0FBQSxZQUFPLE9BQU8sRUFBRSxPQUFPLFFBQVEsWUFBWSxRQUFRLFFBQVEsVUFBVSxHQUFHLE9BQU8sYUFBYSxVQUFVLENBQUs7QUFDMUcseURBQWlCLEtBQUssRUFBRSxjQUFjLGFBQWEsRUFBRTtBQUFBLE1BQ3ZELEdBQ0csVUFBSyxTQUFJLENBQU87QUFDZixZQUFJLFNBQVM7QUFDYixZQUFJLElBQUk7QUFDRyx3QkFBSyxJQUFJLEtBQUs7QUFDekIsWUFBSSxJQUFJO0FBQ0csd0JBQUssSUFBSSxVQUFVO0FBQzlCLGVBQVFDLHVDQUFBLFlBQW9CLE9BQU8sSUFBSSxJQUFJLE1BQUssT0FBTSxpQkFBZSxHQUFHLEVBQUUsSUFBSSxJQUFJLEVBQUUsSUFBSztBQUFBLFVBQUk7QUFBQSxVQUFPO0FBQUEsYUFBaEYsSUFBSSxFQUFtRjtBQUFBLE9BQzVHLEdBQ0gsRUFDRjtBQUFBLE1BQ0MsZ0JBQWlCQSx1Q0FBQSxTQUFJLE9BQU8sRUFBRSxNQUFNLFFBQVEsU0FBUyxRQUFRLFlBQVksWUFDdkU7QUFBQSxRQUFHO0FBQUEsUUFDTjtBQUFBLE9BQ0Y7QUFBQSxJQUVFLEtBQUssSUFBSSxDQUFPO0FBQ1Isd0JBQVkscUJBQXFCLElBQUk7QUFDM0MsVUFBSSxJQUFJO0FBQ0MsZUFBQUQsa0NBQUEsSUFBQyxPQUFpQixNQUFJLEdBQUcsRUFBRSxJQUFJLElBQUksRUFBRSxJQUFJLE1BQUssWUFBVyxjQUFZLElBQUksT0FBTyxXQUFzQixPQUFPLEVBQUUsU0FBUyxnQkFBZ0IsSUFBSSxLQUFLLFlBQVksT0FBVyxpQkFBSSxVQUFsSyxPQUFJLEVBQXdLO0FBQy9MLFVBQUksZ0JBQWdCLElBQUk7QUFDdEIscURBQVEsT0FBaUIsTUFBSSxHQUFHLEVBQUUsSUFBSSxJQUFJLEVBQUUsSUFBSSxNQUFLLFlBQVcsY0FBWSxJQUFJLE9BQU8sV0FBdUIsY0FBSSxPQUFRLEtBQXpHLElBQUksRUFBdUc7QUFBQSxJQUMvSDtBQUFBLEtBRUwsRUFDRjtBQUNGO0FBRWEsc0JBUVIsQ0FBQyxFQUFFLElBQUksT0FBTyxPQUFPLFlBQVksVUFBVSxVQUFVLG1CQUFtQjtBQUNwRSxTQUFBQyxrQ0FBQTtBQUFBLElBQUM7QUFBQTtBQUFBLE1BQUksV0FBVyxLQUFLLG1CQUFtQixZQUFZLFVBQVU7QUFBQSxNQUNuRSxTQUFTLE1BQU0scUNBQVc7QUFBQSxNQUMxQixNQUFLO0FBQUEsTUFDTDtBQUFBLE1BQ0EsaUJBQWU7QUFBQSxNQUNmO0FBQUEsUUFBQ0Qsa0NBQUEsYUFBSSxXQUFVLHlCQUF5QixVQUFNO0FBQUEsUUFDN0MsQ0FBQyxDQUFDLCtDQUFVLE9BQUksYUFBVSwyQkFBMkIsVUFBTTtBQUFBLFFBQzNELENBQUMsQ0FBQyxvREFBZSxPQUFJLGFBQVUsaUNBQWlDLFVBQVc7QUFBQTtBQUFBO0FBQUEsRUFDOUU7QUFDRjtBQzlGTyxNQUFNLGdCQUlSLENBQUMsRUFBRSxTQUFTLFFBQVEsZ0JBQWdCO0FBQ3ZDLFNBQVFBLHNDQUFBLFlBQU8sV0FBVSxrQkFBaUIsUUFBUSxDQUFDLFFBQVEsUUFBUSxPQUFNLGtCQUFpQixPQUFPLFFBQVEsVUFBVSxDQUFTO0FBQzFILGNBQVUsTUFBTSxPQUFPLGdCQUFnQixDQUFDLEVBQUUsS0FBSztBQUFBLEVBQ2pELEdBQUksVUFBb0IsMkJBQU8sR0FBRTtBQUNuQztBQUVBLFNBQVMsb0JBQW9CLFNBQW9DO0FBQy9ELFFBQU0saUJBQWlCLENBQUMsVUFBMEIsTUFBTSxRQUFRLG9CQUFvQixJQUFJO0FBQ3hGLFFBQU0sZUFBZSxDQUFDLFdBQ3BCQSxrQ0FBQSxJQUFDLFVBQXVCLFNBQU8sT0FBTyxJQUFLLFVBQWUsc0JBQU8sS0FBSyxLQUF6RCxPQUFPLEVBQW9EO0FBR3BFLDhDQUFzQixJQUFzQjtBQUNsRCxhQUFXLFVBQVUsU0FBUztBQUM1QixRQUFJLE9BQU8sZ0JBQWdCLElBQUksT0FBTyxTQUFTLFVBQVU7QUFDekQsUUFBSSxDQUFDLE1BQU07QUFDVCxhQUFPLENBQUM7QUFDUixzQkFBZ0IsSUFBSSxPQUFPLFNBQVMsWUFBWSxJQUFJO0FBQUE7QUFFdEQsU0FBSyxLQUFLLE1BQU07QUFBQTtBQUdsQixTQUFPLENBQUMsR0FBRyxnQkFBZ0IsUUFBUyxHQUFFLElBQUksQ0FBQyxDQUFDLE9BQU9JLFFBQU8sTUFDeERKLGtDQUFBLElBQUMsY0FBUyxPQUFPLE9BQ2QsVUFBQUksU0FBUSxPQUFPLFFBQU0sRUFBRSxTQUFTLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxZQUFVLGFBQWEsTUFBTSxDQUFDLEtBRC9ELEtBRTdCLENBQ0Q7QUFDSDtBQUVPLFNBQVMsY0FBc0I7QUFDN0I7QUFBQSxJQUNMLElBQUk7QUFBQSxJQUNKLFlBQVk7QUFBQSxJQUNaLE1BQU07QUFBQSxJQUNOLFVBQVU7QUFBQSxJQUNWLE9BQU87QUFBQSxJQUNQLFdBQVc7QUFBQSxFQUNiO0FBQ0Y7QUM1Qk8sTUFBTSxnQkFBZ0JDLHdCQUFpRixTQUFTQyxlQUFjO0FBQUEsRUFDbkk7QUFBQSxFQUNBLFFBQVE7QUFBQSxFQUNSO0FBQUEsRUFDQSxXQUFXO0FBQUEsRUFDWCxVQUFVO0FBQUEsRUFDVixVQUFVLE1BQU07QUFBQSxFQUFDO0FBQUEsRUFDakI7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFDRixHQUFHLEtBQUs7QUFDQyxTQUFBTCxrQ0FBQTtBQUFBLElBQUM7QUFBQTtBQUFBLE1BQ047QUFBQSxNQUNBLFdBQVcsS0FBSyxXQUFXLGtCQUFrQixNQUFNLFdBQVcsU0FBUztBQUFBLE1BQ3ZFLGFBQWE7QUFBQSxNQUNiO0FBQUEsTUFDQSxlQUFlO0FBQUEsTUFDZjtBQUFBLE1BQ0EsVUFBVSxDQUFDLENBQUM7QUFBQSxNQUNaO0FBQUEsTUFDQSxlQUFhO0FBQUEsTUFDYixjQUFZLGFBQWE7QUFBQSxNQUV4QjtBQUFBLGdCQUFTRCxrQ0FBQSxjQUFLLFdBQVcsbUJBQW1CLElBQUksSUFBSSxPQUFPLFdBQVcsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFJO0FBQUEsUUFDL0Y7QUFBQTtBQUFBO0FBQUEsRUFDSDtBQUNGLENBQUM7QUFFTSxNQUFNLG1CQUE4RCxDQUFDO0FBQUEsRUFDMUU7QUFDRixNQUFNO0FBQ0osU0FBUUEsc0NBQUEsU0FBSSxXQUFVLHFCQUFvQixNQUFjO0FBQzFEO0FBRUEsTUFBTSxpQkFBaUIsQ0FBQyxNQUFXO0FBQ2pDLElBQUUsZ0JBQWdCO0FBQ2xCLElBQUUsZUFBZTtBQUNuQjtBQ3BEQSxNQUFNLFVBQVUsU0FBUyxLQUFhLE9BQWUsTUFBYztBQUFTLGdCQUFPLFNBQVMsT0FBTztBQUFNO0FBQ3pHLFNBQVMsTUFBTSxNQUFjO0FBQVMsaUJBQVEsTUFBTSxJQUFNLEVBQUk7QUFBRztBQUNqRSxTQUFTLFNBQVMsTUFBYztBQUFTLGVBQU0sSUFBSSxLQUFLLFFBQVEsTUFBTSxJQUFNLEVBQUksS0FBSyxRQUFRLE1BQU0sSUFBTSxHQUFJO0FBQUc7QUFDaEgsU0FBUyxnQkFBZ0IsTUFBYztBQUFTLGlCQUFRLE1BQU0sSUFBTSxFQUFJO0FBQUc7QUFDM0UsU0FBUyxnQkFBZ0IsTUFBYztBQUFTLGlCQUFRLE1BQU0sSUFBTSxHQUFJO0FBQUc7QUFDM0UsU0FBUyxPQUFPLE1BQWM7QUFBRSxTQUFPLGdCQUFnQixJQUFJLEtBQUssZ0JBQWdCLElBQUk7QUFBRztBQUN2RixTQUFTLFNBQVMsTUFBYztBQUFFLFNBQU8sUUFBUTtBQUFNO0FBQ3ZELFNBQVMsY0FBYyxNQUFjO0FBQUUsU0FBTyxPQUFPLElBQUksS0FBSyxTQUFTLElBQUksS0FBSyxTQUFTO0FBQU07QUFDL0YsU0FBUyxTQUFTLE1BQWM7QUFBRSxTQUFPLGNBQWMsSUFBSSxLQUFLLE1BQU0sSUFBSSxLQUFLLFNBQVM7QUFBTTtBQUM5RixTQUFTLGFBQWEsTUFBYztBQUFFLFNBQU8sUUFBUSxNQUFNLEdBQUcsQ0FBQyxLQUFLLFNBQVMsTUFBTyxRQUFRLE1BQU0sSUFBSyxFQUFJLEtBQUssU0FBUztBQUFNO0FBQy9ILFNBQVMsUUFBUSxNQUFjO0FBQUUsU0FBTyxTQUFTO0FBQUs7QUFDdEQsU0FBUyxXQUFXLE1BQWM7QUFBRSxTQUFPLFFBQVEsSUFBSSxLQUFLLFNBQVMsS0FBSyxTQUFTO0FBQU07QUFFekYsTUFBTSwwQkFBMEI7QUFFekIsTUFBTSw4QkFBOEIsTUFBTTtBQUFBLEVBQy9DLFlBQVksU0FBaUI7QUFDM0IsVUFBTSxPQUFPO0FBQ2IsU0FBSyxPQUFPO0FBQUE7QUFFaEI7QUFFQSxTQUFTLFdBQVcsS0FBdUI7QUFHekMsUUFBTSxhQUFhLENBQUM7QUFDcEIsV0FBUyxJQUFJLEdBQUcsSUFBSSxJQUFJLFFBQVEsS0FBSztBQUMvQixlQUFPLElBQUksV0FBVyxDQUFDO0FBQzNCLFFBQUksU0FBUyxNQUFPLElBQUksV0FBVyxJQUFJLENBQUMsTUFBTSxJQUFLO0FBQzFDO0FBQUs7QUFBQTtBQUVWLGlCQUFTLE1BQU8sU0FBUztBQUNwQjtBQUNULFFBQUksU0FBUztBQUNKO0FBQ1QsUUFBSSxRQUFRLE1BQU0sT0FBUSxLQUFNLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxDQUFDLEdBQUcsT0FBUSxLQUFNLEdBQUc7QUFFbkYsWUFBTSxPQUFPLE9BQU87QUFDcEIsWUFBTSxRQUFRLElBQUksV0FBVyxJQUFJLENBQUMsSUFBSTtBQUMvQixrQkFBSyxJQUFJLEdBQUcsRUFBRSxJQUFJLE9BQU8sS0FBSyxJQUFJLEdBQUcsRUFBRSxJQUFJO0FBQ2xEO0FBQUE7QUFFRixlQUFXLEtBQUssSUFBSTtBQUFBO0FBRWY7QUFDVDtBQUVBLFNBQVMsZUFBZSxNQUFjO0FBQ3BDLE1BQUksUUFBUTtBQUNILGtCQUFPLGFBQWEsSUFBSTtBQUV6QixlQUFLLElBQUksR0FBRyxFQUFFO0FBQ2hCLGVBQU8sS0FBSyxNQUFNLE9BQU8sS0FBSyxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUk7QUFDbEQsUUFBTSxRQUFRLE9BQU8sS0FBSyxJQUFJLEdBQUcsRUFBRSxJQUFJO0FBQ3ZDLFNBQU8sT0FBTyxhQUFhLElBQUksSUFBSSxPQUFPLGFBQWEsS0FBSztBQUM5RDtBQUVPLFNBQVMsU0FBUyxNQUFtQztBQUNwRCxjQUFNLFdBQVcsSUFBSTtBQUMzQixNQUFJLElBQUk7QUFDUixRQUFNLFNBQThCLENBQUM7QUFDakM7QUFjRSxvQkFBWSxTQUFTTyxJQUFtQjtBQUM1QyxRQUFJQSxNQUFLLElBQUk7QUFDSjtBQUVULFdBQU8sSUFBSUEsRUFBQztBQUFBLEVBQ2Q7QUFDTSxlQUFPLFNBQVMsS0FBYztBQUNsQyxRQUFJLFFBQVE7QUFDSjtBQUNSLFFBQUksTUFBTTtBQUNGO0FBQ0QscUJBQVUsSUFBSSxHQUFHO0FBQUEsRUFDMUI7QUFDTSxrQkFBVSxTQUFTLEtBQXVCO0FBQzlDLFFBQUksUUFBUTtBQUNKO0FBQ0g7QUFDTCxXQUFPLFVBQVUsQ0FBQztBQU1YO0FBQUEsRUFDVDtBQUNBLFFBQU0sWUFBWSxXQUFXO0FBQ3RCO0FBU0U7QUFBQSxFQUNUO0FBQ00sY0FBTSxTQUFTQyxZQUE2QjtBQUNoRCxRQUFJQSxlQUFjO0FBQ2hCQSxtQkFBWTtBQUNkLFdBQU9BLGVBQWM7QUFBQSxFQUN2QjtBQU9BLFFBQU0sZ0JBQWdCLFdBQThCO0FBQ2xDO0FBQ1I7QUFDSixtQkFBVyxJQUFJLEdBQUc7QUFDYix3QkFBVyxNQUFNO0FBQ2Q7QUFDVixhQUFPLElBQUksZ0JBQWdCO0FBQUEsZUFDbEIsU0FBUyxJQUFNO0FBQUMsYUFBTyxvQkFBb0I7QUFBQSxlQUFhLFNBQVMsSUFBTTtBQUM1RSxtQkFBUyxLQUFNLE1BQUssZ0JBQWdCLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUc7QUFDbkQsc0JBQVEsSUFBSSxVQUFVLEVBQUU7QUFDMUIsbUNBQXVCLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ2xELGdCQUFNLE9BQU87QUFDZixjQUFNLFFBQVEsYUFBYTtBQUNwQjtBQUFBLGFBQ0Y7QUFDRSxtQkFBSSxXQUFXLElBQUk7QUFBQTtBQUFBLElBQzVCLFdBQ1MsU0FBUyxJQUFNO0FBQ3BCLHFCQUFXLElBQU07QUFDWDtBQUNSLGVBQU8sSUFBSSxpQkFBaUI7QUFBQSxhQUN2QjtBQUNFLG1CQUFJLFdBQVcsSUFBSTtBQUFBO0FBQUEsSUFDNUIsV0FDUyxTQUFTLElBQU07QUFBQyxhQUFPLG9CQUFvQjtBQUFBLGVBQWEsU0FBUyxJQUFNO0FBQUMsYUFBTyxJQUFJLGVBQWU7QUFBQSxlQUFhLFNBQVMsSUFBTTtBQUFDLGFBQU8sSUFBSSxnQkFBZ0I7QUFBQSxlQUFhLFNBQVMsSUFBTTtBQUMzTCxxQkFBVyxJQUFNO0FBQ1g7QUFDUixlQUFPLElBQUksb0JBQW9CO0FBQUEsYUFDMUI7QUFDRSxtQkFBSSxXQUFXLElBQUk7QUFBQTtBQUFBLElBQzVCLFdBQ1MsU0FBUyxJQUFNO0FBQ3hCLFVBQUkscUJBQXFCO0FBQ2I7QUFDVixlQUFPLHFCQUFxQjtBQUFBLGFBQ3ZCO0FBQ0UsbUJBQUksV0FBVyxJQUFJO0FBQUE7QUFBQSxJQUM1QixXQUNTLFNBQVMsSUFBTTtBQUFDLGFBQU8sSUFBSSxXQUFXO0FBQUEsZUFBYSxTQUFTLElBQU07QUFDM0UsVUFBSSxxQkFBcUI7QUFDYjtBQUNWLGVBQU8scUJBQXFCO0FBQUEsaUJBQ25CLEtBQUssQ0FBQyxNQUFNLE1BQVEsS0FBSyxDQUFDLE1BQU0sSUFBTTtBQUMvQyxnQkFBUSxDQUFDO0FBQ1QsZUFBTyxJQUFJLFNBQVM7QUFBQSxpQkFDWCwwQkFBMEI7QUFDekI7QUFDVixlQUFPLHdCQUF3QjtBQUFBLGFBQzFCO0FBQ0UsbUJBQUksV0FBVyxJQUFJO0FBQUE7QUFBQSxJQUM1QixXQUNTLFNBQVMsSUFBTTtBQUN4QixVQUFJLHFCQUFxQjtBQUNiO0FBQ1YsZUFBTyxxQkFBcUI7QUFBQSxhQUN2QjtBQUNFLG1CQUFJLFdBQVcsSUFBSTtBQUFBO0FBQUEsSUFDNUIsV0FDUyxTQUFTLElBQU07QUFBQyxhQUFPLElBQUksV0FBVztBQUFBLGVBQWEsU0FBUyxJQUFNO0FBQUMsYUFBTyxJQUFJLGVBQWU7QUFBQSxlQUFhLFNBQVMsSUFBTTtBQUM5SCxlQUFLLENBQUMsTUFBTSxNQUFRLEtBQUssQ0FBQyxNQUFNLE1BQVEsS0FBSyxDQUFDLE1BQU0sSUFBTTtBQUM1RCxnQkFBUSxDQUFDO0FBQ1QsZUFBTyxJQUFJLFNBQVM7QUFBQSxhQUNmO0FBQ0UsbUJBQUksV0FBVyxJQUFJO0FBQUE7QUFBQSxJQUM1QixXQUNTLFNBQVMsSUFBTTtBQUNwQixpQ0FBdUIsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDM0MsbUJBQUksZUFBZSxjQUFjO0FBQUE7QUFFakMsbUJBQUksV0FBVyxJQUFJO0FBQUEsZUFFbkIsU0FBUyxJQUFNO0FBQUMsYUFBTyxJQUFJLGdCQUFnQjtBQUFBLGVBQWEsU0FBUyxJQUFNO0FBQ2hGLFVBQUksMEJBQTBCO0FBQ2xCO0FBQ1YsZUFBTyx3QkFBd0I7QUFBQSxhQUMxQjtBQUVFLG1CQUFJLFdBQVcsSUFBSTtBQUFBO0FBQUEsSUFDNUIsV0FDUyxTQUFTLElBQU07QUFBQyxhQUFPLElBQUksaUJBQWlCO0FBQUEsZUFBYSxTQUFTLElBQU07QUFDN0UscUJBQVcsSUFBTTtBQUNYO0FBQ1IsZUFBTyxJQUFJLGlCQUFpQjtBQUFBLGFBQ3ZCO0FBQ0UsbUJBQUksV0FBVyxJQUFJO0FBQUE7QUFBQSxJQUM1QixXQUNTLFNBQVMsS0FBTTtBQUFDLGFBQU8sSUFBSSxlQUFlO0FBQUEsZUFBYSxTQUFTLEtBQU07QUFDM0UscUJBQVcsSUFBTTtBQUNYO0FBQ1IsZUFBTyxJQUFJLGVBQWU7QUFBQSxpQkFDakIsS0FBSyxNQUFNLEtBQU07QUFDbEI7QUFDUixlQUFPLElBQUksWUFBWTtBQUFBLGFBQ2xCO0FBQ0UsbUJBQUksV0FBVyxJQUFJO0FBQUE7QUFBQSxJQUM1QixXQUNTLFNBQVMsS0FBTTtBQUFDLGFBQU8sSUFBSSxnQkFBZ0I7QUFBQSxlQUFhLFNBQVMsS0FBTTtBQUM1RSxxQkFBVyxJQUFNO0FBQ1g7QUFDUixlQUFPLElBQUksa0JBQWtCO0FBQUEsYUFDeEI7QUFDRSxtQkFBSSxXQUFXLElBQUk7QUFBQTtBQUFBLElBQzVCLFdBQ1MsTUFBTSxJQUFJLEdBQUc7QUFDWjtBQUNWLGFBQU8scUJBQXFCO0FBQUEsZUFDbkIsY0FBYyxJQUFJLEdBQUc7QUFDcEI7QUFDVixhQUFPLHdCQUF3QjtBQUFBLGVBQ3RCLE9BQU87QUFBQyxhQUFPLElBQUksU0FBUztBQUFBLFdBQVM7QUFBUSxpQkFBSSxXQUFXLElBQUk7QUFBQTtBQUFBLEVBQzdFO0FBRUEsUUFBTSxrQkFBa0IsV0FBVztBQUNqQyxXQUFPLEtBQUssQ0FBQyxNQUFNLE1BQVEsS0FBSyxDQUFDLE1BQU0sSUFBTTtBQUMzQyxjQUFRLENBQUM7QUFDVCxhQUFPLE1BQU07QUFDSDtBQUNSLFlBQUksU0FBUyxNQUFRLEtBQUssTUFBTSxJQUFNO0FBQzVCO0FBQ1I7QUFBQSxtQkFDUyxPQUFPO0FBRWhCO0FBQUE7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBRUo7QUFFQSxRQUFNLHVCQUF1QixXQUFXO0FBQ3RDLFVBQU0sTUFBTSxlQUFlO0FBQ3ZCLCtCQUF1QixLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHO0FBQy9DLG9CQUFRLElBQUksZUFBZTtBQUNqQyxZQUFNLFFBQVEsSUFBSTtBQUNsQixZQUFNLE9BQU8sSUFBSTtBQUNqQixZQUFNLE9BQU8sSUFBSTtBQUNqQixZQUFNLE9BQU8sYUFBYTtBQUNuQjtBQUFBLGVBQ0UsS0FBSyxNQUFNLElBQU07QUFDbEI7QUFDRixvQkFBUSxJQUFJLGdCQUFnQjtBQUNsQyxZQUFNLFFBQVEsSUFBSTtBQUNsQixZQUFNLE9BQU8sSUFBSTtBQUNWO0FBQUEsV0FDRjtBQUNDLG9CQUFRLElBQUksWUFBWTtBQUM5QixZQUFNLFFBQVEsSUFBSTtBQUNsQixZQUFNLE9BQU8sSUFBSTtBQUNqQixZQUFNLE9BQU8sSUFBSTtBQUNWO0FBQUE7QUFBQSxFQUVYO0FBRUEsUUFBTSwwQkFBMEIsV0FBOEI7QUFDNUQsVUFBTUMsT0FBTSxhQUFhO0FBQ3pCLFFBQUlBLEtBQUksWUFBWSxNQUFNLFNBQVMsV0FBVyxJQUFNO0FBQzFDO0FBQ0Qsd0JBQVcsS0FBSyxDQUFDLENBQUMsS0FBSyxXQUFXLEtBQUssQ0FBQyxDQUFDO0FBQ3RDO0FBQ1YsVUFBSSxLQUFLLE1BQU0sTUFBUSxLQUFXO0FBQ3pCLG1CQUFJLGNBQWNBLElBQUc7QUFBQSxlQUNyQixXQUFXLE1BQU0sTUFBTSxLQUFLLENBQUMsTUFBTSxNQUFRLEtBQUssQ0FBQyxNQUFNO0FBQ3ZELG1CQUFJLGNBQWNBLElBQUc7QUFBQTtBQUU1QixlQUFPLGlCQUFpQjtBQUFBLGVBRWpCLEtBQUssTUFBTSxJQUFNO0FBQ2xCO0FBQ0QsaUJBQUksY0FBY0EsSUFBRztBQUFBLFdBQ3ZCO0FBQ0UsaUJBQUksV0FBV0EsSUFBRztBQUFBO0FBQUEsRUFFN0I7QUFFTSw4QkFBc0IsU0FBUyxpQkFBMEM7QUFDN0UsUUFBSSxvQkFBb0I7QUFDSjtBQUNwQixRQUFJQyxVQUFTO0FBQ2IsV0FBTyxXQUFXO0FBQ1osbUJBQVMsbUJBQW1CLE9BQU87QUFDOUIsbUJBQUksWUFBWUEsT0FBTTtBQUFBLGlCQUNwQixRQUFRLElBQUksR0FBRztBQUVkO0FBQ1YsZUFBTyxJQUFJLGVBQWU7QUFBQSxpQkFDakIsU0FBUyxJQUFNO0FBQ3BCLGdCQUFJLE1BQU07QUFDRjtBQUFBLGlCQUNILFFBQVEsTUFBTTtBQUNiO0FBQUE7QUFFRSxVQUFBQSxXQUFBLGVBQWUsZUFBZTtBQUFBLGFBRXJDO0FBQ0wsUUFBQUEsV0FBVSxlQUFlLElBQUk7QUFBQTtBQUFBLElBQy9CO0FBRUksY0FBSSxNQUFNLGdCQUFnQjtBQUFBLEVBQ2xDO0FBRUEsUUFBTSxtQkFBbUIsV0FBOEI7QUFDL0Msa0JBQVEsSUFBSSxTQUFTLEVBQUU7QUFDdEIsc0JBQVcsTUFBTTtBQUNkO0FBQ04sWUFBSSxNQUFNO0FBQ0w7QUFDVCxXQUFPLFdBQVc7QUFDWixtQkFBUyxNQUFRLE9BQU87QUFDbkI7QUFBQSxpQkFDRSxXQUFXLElBQUksR0FBRztBQUNwQiwwQkFBVyxNQUFNO0FBQ2Q7QUFDVixZQUFJLFdBQVcsTUFBUSxJQUFJLEtBQU0sSUFBRztBQUMxQjtBQUNEO0FBQUEsZUFDRjtBQUN1QjtBQUM1QixpQkFBTyxJQUFJLFlBQVk7QUFBQTtBQUFBLE1BQ3pCLFdBQ1MsU0FBUyxNQUFRLFNBQVMsTUFBUSxTQUFTLE1BQVEsYUFBYSxJQUFJLEdBQUc7QUFFcEQ7QUFDNUIsZUFBTyxJQUFJLFlBQVk7QUFBQSxpQkFDZCxTQUFTLElBQU07QUFDeEIsWUFBSSwwQkFBMEI7QUFDdEIseUJBQVMsZUFBZSxlQUFlO0FBQUEsZUFDeEM7QUFFdUI7QUFDNUIsaUJBQU8sSUFBSSxZQUFZO0FBQUE7QUFBQSxNQUN6QixPQUNLO0FBQ0MsdUJBQVMsZUFBZSxJQUFJO0FBQUE7QUFBQSxJQUNwQztBQUVJLGNBQUksTUFBTSxnQkFBZ0I7QUFBQSxFQUNsQztBQUVBLFFBQU0sZ0JBQWdCLFdBQVc7QUFHdkI7QUFDSixpQkFBUyxJQUFJLEdBQUc7QUFFWixxQkFBUyxDQUFDLElBQUk7QUFDcEIsZUFBUyxRQUFRLEdBQUcsUUFBUSxHQUFHLFNBQVM7QUFDbEMscUJBQVMsS0FBSyxDQUFDLEdBQUc7QUFDWjtBQUNSLGlCQUFPLEtBQUssSUFBSTtBQUFBLGVBQ1g7QUFDTDtBQUFBO0FBQUEsTUFDRjtBQUVFLHFCQUFXLE1BQU07QUFDWDtBQUNWLFVBQUksUUFBUSxTQUFTLE9BQU8sSUFBSSxTQUFTLEdBQUc7QUFBUyxzQkFBTyxhQUFhLENBQUM7QUFBQSxNQUFJLEdBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUM1RixVQUFJLFFBQVE7QUFDRjtBQUNIO0FBQUEsZUFDRSxPQUFPO0FBQ1Q7QUFBQSxXQUNGO0FBQ0U7QUFBQTtBQUFBLEVBRVg7QUFFTSwwQkFBa0IsU0FBUyxJQUFZLElBQVk7QUFDdkQsUUFBSSxPQUFPO0FBQ0Y7QUFDVCxRQUFJLFFBQVEsRUFBRTtBQUNMO0FBQ0Y7QUFBQSxFQUNUO0FBQ0EsUUFBTSx5QkFBeUIsV0FBVztBQUNqQywyQkFBZ0IsTUFBTSxNQUFNO0FBQUEsRUFDckM7QUFFQSxRQUFNLHlCQUF5QixTQUFTLElBQVksSUFBWSxJQUFZO0FBQzFFLFFBQUksT0FBTztBQUNULGFBQU8sY0FBYyxFQUFFLEtBQUssT0FBTyxNQUFRLGdCQUFnQixJQUFJLEVBQUU7QUFBQSxhQUMxRCxjQUFjLEVBQUU7QUFDaEI7QUFBQSxhQUNBLE9BQU87QUFDUCw2QkFBZ0IsSUFBSSxFQUFFO0FBQUE7QUFFdEI7QUFBQSxFQUVYO0FBQ0EsUUFBTSx5QkFBeUIsV0FBVztBQUN4QyxXQUFPLHVCQUF1QixNQUFNLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQUEsRUFDdEQ7QUFFQSxRQUFNLG9CQUFvQixTQUFTLElBQVksSUFBWSxJQUFZO0FBQ2pFLGVBQU8sTUFBUSxPQUFPLElBQU07QUFDOUIsVUFBSSxNQUFNLEVBQUU7QUFDSDtBQUNMLGlCQUFPLE1BQVEsTUFBTSxFQUFFO0FBQ2xCO0FBQ0Y7QUFBQSxlQUNFLE9BQU8sSUFBTTtBQUN0QixVQUFJLE1BQU0sRUFBRTtBQUNIO0FBQ0Y7QUFBQSxlQUNFLE1BQU0sRUFBRSxHQUFHO0FBQ2I7QUFBQSxXQUNGO0FBQ0U7QUFBQTtBQUFBLEVBRVg7QUFDQSxRQUFNLG9CQUFvQixXQUFXO0FBQ25DLFdBQU8sa0JBQWtCLE1BQU0sS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFBQSxFQUNqRDtBQUVBLFFBQU0sZUFBZSxXQUFtQjtBQUN0QyxRQUFJLFNBQVM7QUFDYixXQUFPLFdBQVc7QUFDWixtQkFBUyxJQUFJLEdBQUc7QUFDbEIsa0JBQVUsZUFBZSxJQUFJO0FBQUEsaUJBQ3BCLDBCQUEwQjtBQUN6QixpQ0FBZSxlQUFlO0FBQUEsYUFDbkM7QUFDSztBQUNIO0FBQUE7QUFBQSxJQUNUO0FBRUksY0FBSSxNQUFNLHNCQUFzQjtBQUFBLEVBQ3hDO0FBRUEsUUFBTSxpQkFBaUIsV0FBVztBQUNoQyxRQUFJLE9BQU87QUFDWCxRQUFJLE9BQU87QUFDWCxRQUFJLEtBQUssTUFBTSxNQUFRLFdBQVcsSUFBTTtBQUM5QjtBQUNSLGNBQVEsZUFBZSxJQUFJO0FBQUE7QUFFdEIsaUJBQU0sS0FBSyxDQUFDLEdBQUc7QUFDWjtBQUNSLGNBQVEsZUFBZSxJQUFJO0FBQUE7QUFFekIsYUFBSyxDQUFDLE1BQU0sTUFBUSxNQUFNLEtBQUssQ0FBQyxDQUFDLEdBQUc7QUFDOUI7QUFDUixjQUFRLGVBQWUsSUFBSTtBQUNuQjtBQUNSLGNBQVEsZUFBZSxJQUFJO0FBQ3BCO0FBQ0EsbUJBQU0sS0FBSyxDQUFDLEdBQUc7QUFDWjtBQUNSLGdCQUFRLGVBQWUsSUFBSTtBQUFBO0FBQUEsSUFDN0I7QUFFSSxlQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUM7QUFDN0MsU0FBSyxPQUFPLE1BQVEsT0FBTyxRQUFTLE1BQU0sRUFBRSxHQUFHO0FBQ3JDO0FBQ1IsY0FBUSxlQUFlLElBQUk7QUFDbkI7QUFDUixjQUFRLGVBQWUsSUFBSTtBQUNwQjtBQUNBLG1CQUFNLEtBQUssQ0FBQyxHQUFHO0FBQ1o7QUFDUixnQkFBUSxlQUFlLElBQUk7QUFBQTtBQUFBLElBRS9CLFlBQVksT0FBTyxNQUFRLE9BQU8sU0FBVSxPQUFPLE1BQVEsT0FBTyxPQUFTLE1BQU0sRUFBRSxHQUFHO0FBQzVFO0FBQ1IsY0FBUSxlQUFlLElBQUk7QUFDbkI7QUFDUixjQUFRLGVBQWUsSUFBSTtBQUNuQjtBQUNSLGNBQVEsZUFBZSxJQUFJO0FBQ3BCO0FBQ0EsbUJBQU0sS0FBSyxDQUFDLEdBQUc7QUFDWjtBQUNSLGdCQUFRLGVBQWUsSUFBSTtBQUFBO0FBQUEsSUFDN0I7QUFFSSxrQkFBUSx3QkFBd0IsSUFBSTtBQUNuQyxhQUFFLE1BQVksT0FBYyxLQUFXO0FBQUEsRUFDaEQ7QUFFTSxrQ0FBMEIsU0FBU0EsU0FBd0I7QUFFL0QsV0FBTyxDQUFDQTtBQUFBLEVBQ1Y7QUFFQSxRQUFNLDhCQUE4QixXQUFXO0FBQzdDLFdBQU8sV0FBVztBQUNaLG1CQUFTLE1BQVEsT0FBTztBQUMxQjtBQUFBLGlCQUNTLDBCQUEwQjtBQUNyQjtBQUFBLE1BQ0osTUFDTDtBQUFBLElBRVA7QUFBQSxFQUVKO0FBRUEsTUFBSSxpQkFBaUI7QUFDckIsU0FBTyxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUc7QUFDWixnQkFBSyxlQUFlO0FBQzNCO0FBQ0kseUJBQWlCLElBQUksU0FBUztBQUMxQixnQkFBSSxNQUFNLHVCQUF1QjtBQUFBO0FBRXBDO0FBQ1Q7QUFFTyxNQUFNLGVBQTRDO0FBQUEsRUFBbEQ7QUFDTztBQUFBO0FBQUEsRUFFWixTQUFjO0FBQ0wsYUFBRSxPQUFPLEtBQUssVUFBVTtBQUFBO0FBQUEsRUFFakMsV0FBVztBQUFFLFdBQU8sS0FBSztBQUFBO0FBQUEsRUFDekIsV0FBVztBQUFFLFdBQU8sS0FBSztBQUFBO0FBQzNCO0FBRU8sTUFBTSx1QkFBdUIsZUFBZTtBQUFBLEVBQTVDO0FBQUE7QUFDTCxTQUFTLFlBQVk7QUFBQTtBQUN2QjtBQUVPLE1BQU0sb0JBQW9CLGVBQWU7QUFBQSxFQUF6QztBQUFBO0FBQ0wsU0FBUyxZQUFZO0FBQUE7QUFDdkI7QUFFTyxNQUFNLHdCQUF3QixlQUFlO0FBQUEsRUFBN0M7QUFBQTtBQUNMLFNBQVMsWUFBWTtBQUFBO0FBQUEsRUFDWixXQUFXO0FBQVM7QUFBQTtBQUFBLEVBQ3BCLFdBQVc7QUFBUztBQUFBO0FBQy9CO0FBRU8sTUFBTSxpQkFBaUIsZUFBZTtBQUFBLEVBQXRDO0FBQUE7QUFDTCxTQUFTLFlBQVk7QUFBQTtBQUFBLEVBQ1osV0FBVztBQUFTO0FBQUE7QUFDL0I7QUFFTyxNQUFNLGlCQUFpQixlQUFlO0FBQUEsRUFBdEM7QUFBQTtBQUNMLFNBQVMsWUFBWTtBQUFBO0FBQUEsRUFDWixXQUFXO0FBQVM7QUFBQTtBQUMvQjtBQUVPLE1BQU0sbUJBQW1CLGVBQWU7QUFBQSxFQUF4QztBQUFBO0FBQ0wsU0FBUyxZQUFZO0FBQUE7QUFDdkI7QUFFTyxNQUFNLHVCQUF1QixlQUFlO0FBQUEsRUFBNUM7QUFBQTtBQUNMLFNBQVMsWUFBWTtBQUFBO0FBQ3ZCO0FBRU8sTUFBTSxtQkFBbUIsZUFBZTtBQUFBLEVBQXhDO0FBQUE7QUFDTCxTQUFTLFlBQVk7QUFBQTtBQUN2QjtBQUVPLE1BQU0sc0JBQXNCLGVBQWU7QUFBQSxFQUEzQztBQUFBO0FBQ0wsU0FBUyxRQUFRO0FBQ1I7QUFBQTtBQUNYO0FBRU8sTUFBTSx1QkFBdUIsY0FBYztBQUFBLEVBRWhELGNBQWM7QUFDTjtBQUZSLFNBQVMsWUFBWTtBQUduQixTQUFLLFFBQVE7QUFDYixTQUFLLFNBQVM7QUFBQTtBQUVsQjtBQUVPLE1BQU0sd0JBQXdCLGNBQWM7QUFBQSxFQUVqRCxjQUFjO0FBQ047QUFGUixTQUFTLFlBQVk7QUFHbkIsU0FBSyxRQUFRO0FBQ2IsU0FBSyxTQUFTO0FBQUE7QUFFbEI7QUFFTyxNQUFNLHdCQUF3QixjQUFjO0FBQUEsRUFFakQsY0FBYztBQUNOO0FBRlIsU0FBUyxZQUFZO0FBR25CLFNBQUssUUFBUTtBQUNiLFNBQUssU0FBUztBQUFBO0FBRWxCO0FBRU8sTUFBTSx5QkFBeUIsY0FBYztBQUFBLEVBRWxELGNBQWM7QUFDTjtBQUZSLFNBQVMsWUFBWTtBQUduQixTQUFLLFFBQVE7QUFDYixTQUFLLFNBQVM7QUFBQTtBQUVsQjtBQUVPLE1BQU0sdUJBQXVCLGNBQWM7QUFBQSxFQUVoRCxjQUFjO0FBQ047QUFGUixTQUFTLFlBQVk7QUFHbkIsU0FBSyxRQUFRO0FBQ2IsU0FBSyxTQUFTO0FBQUE7QUFFbEI7QUFFTyxNQUFNLHdCQUF3QixjQUFjO0FBQUEsRUFFakQsY0FBYztBQUNOO0FBRlIsU0FBVyxZQUFZO0FBR3JCLFNBQUssUUFBUTtBQUNiLFNBQUssU0FBUztBQUFBO0FBRWxCO0FBRU8sTUFBTSwwQkFBMEIsZUFBZTtBQUFBLEVBQS9DO0FBQUE7QUFDTCxTQUFTLFlBQVk7QUFBQTtBQUN2QjtBQUVPLE1BQU0sdUJBQXVCLGVBQWU7QUFBQSxFQUE1QztBQUFBO0FBQ0wsU0FBUyxZQUFZO0FBQUE7QUFDdkI7QUFFTyxNQUFNLHlCQUF5QixlQUFlO0FBQUEsRUFBOUM7QUFBQTtBQUNMLFNBQVMsWUFBWTtBQUFBO0FBQ3ZCO0FBRU8sTUFBTSx5QkFBeUIsZUFBZTtBQUFBLEVBQTlDO0FBQUE7QUFDTCxTQUFTLFlBQVk7QUFBQTtBQUN2QjtBQUVPLE1BQU0sNEJBQTRCLGVBQWU7QUFBQSxFQUFqRDtBQUFBO0FBQ0wsU0FBUyxZQUFZO0FBQUE7QUFDdkI7QUFFTyxNQUFNLG9CQUFvQixlQUFlO0FBQUEsRUFBekM7QUFBQTtBQUNMLFNBQVMsWUFBWTtBQUFBO0FBQ3ZCO0FBRU8sTUFBTSxpQkFBaUIsZUFBZTtBQUFBLEVBQXRDO0FBQUE7QUFDTCxTQUFTLFlBQVk7QUFBQTtBQUFBLEVBQ1osV0FBVztBQUFTO0FBQUE7QUFDL0I7QUFFTyxNQUFNLG1CQUFtQixlQUFlO0FBQUEsRUFJN0MsWUFBWSxNQUFjO0FBQ2xCO0FBSlIsU0FBUyxZQUFZO0FBQ3JCLFNBQVMsUUFBZ0I7QUFJbEIsaUJBQVEsZUFBZSxJQUFJO0FBQUE7QUFBQSxFQUd6QixXQUFXO0FBQVMsc0JBQVcsS0FBSyxRQUFRO0FBQUE7QUFBQSxFQUU1QyxTQUFTO0FBQ1YsaUJBQU8sS0FBSyxZQUFZLFVBQVUsWUFBWSxVQUFVLE9BQU8sS0FBSyxJQUFJO0FBQzlFLFNBQUssUUFBUSxLQUFLO0FBQ1g7QUFBQTtBQUFBLEVBR0EsV0FBVztBQUNsQixRQUFJLEtBQUssVUFBVTtBQUNWO0FBQUE7QUFFUCxhQUFPLEtBQUs7QUFBQTtBQUVsQjtBQUVPLE1BQWUsMEJBQTBCLGVBQWU7QUFBQSxFQUF4RDtBQUFBO0FBQ0wsU0FBUyxRQUFnQjtBQUFBO0FBQUEsRUFDekIsV0FBVyxLQUFhO0FBQ3RCLFdBQU8sS0FBSyxNQUFNLFlBQVksTUFBTSxJQUFJLFlBQVk7QUFBQTtBQUFBLEVBRzdDLFNBQVM7QUFDVixpQkFBTyxLQUFLLFlBQVksVUFBVSxZQUFZLFVBQVUsT0FBTyxLQUFLLElBQUk7QUFDOUUsU0FBSyxRQUFRLEtBQUs7QUFDWDtBQUFBO0FBRVg7QUFFTyxNQUFNLG1CQUFtQixrQkFBa0I7QUFBQSxFQUNoRCxZQUFZLEtBQWE7QUFDakI7QUFJUixTQUFTLFlBQVk7QUFIbkIsU0FBSyxRQUFRO0FBQUE7QUFBQSxFQUlOLFdBQVc7QUFBUyxzQkFBVyxLQUFLLFFBQVE7QUFBQTtBQUFBLEVBQzVDLFdBQVc7QUFDWCx1QkFBWSxLQUFLLEtBQUs7QUFBQTtBQUVqQztBQUVPLE1BQU0sc0JBQXNCLGtCQUFrQjtBQUFBLEVBR25ELFlBQVksS0FBYTtBQUNqQjtBQUhSLFNBQVMsWUFBWTtBQUluQixTQUFLLFFBQVE7QUFDYixTQUFLLFNBQVM7QUFBQTtBQUFBLEVBR1AsV0FBVztBQUFTLHlCQUFjLEtBQUssUUFBUTtBQUFBO0FBQUEsRUFFL0MsV0FBVztBQUNYLHVCQUFZLEtBQUssS0FBSyxJQUFJO0FBQUE7QUFFckM7QUFFTyxNQUFNLHVCQUF1QixrQkFBa0I7QUFBQSxFQUVwRCxZQUFZLEtBQWE7QUFDakI7QUFGUixTQUFTLFlBQVk7QUFHbkIsU0FBSyxRQUFRO0FBQUE7QUFBQSxFQUVOLFdBQVc7QUFBUyxtQkFBUSxLQUFLLFFBQVE7QUFBQTtBQUFBLEVBQ3pDLFdBQVc7QUFDWCxpQkFBTSxZQUFZLEtBQUssS0FBSztBQUFBO0FBRXZDO0FBRU8sTUFBTSxrQkFBa0Isa0JBQWtCO0FBQUEsRUFHL0MsWUFBWSxLQUFhO0FBQ2pCO0FBSFIsU0FBUyxZQUFZO0FBSW5CLFNBQUssUUFBUTtBQUNiLFNBQUssT0FBTztBQUFBO0FBQUEsRUFHTCxXQUFXO0FBQVMscUJBQVUsS0FBSyxRQUFRO0FBQUE7QUFBQSxFQUUzQyxTQUFTO0FBQ1YsaUJBQU8sS0FBSyxZQUFZLFVBQVUsWUFBWSxVQUFVLE9BQU8sS0FBSyxJQUFJO0FBQzlFLFNBQUssUUFBUSxLQUFLO0FBQ2xCLFNBQUssT0FBTyxLQUFLO0FBQ1Y7QUFBQTtBQUFBLEVBR0EsV0FBVztBQUNsQixRQUFJLEtBQUssU0FBUztBQUNULG1CQUFNLFlBQVksS0FBSyxLQUFLO0FBQUE7QUFFNUIsbUJBQU0sV0FBVyxLQUFLLEtBQUs7QUFBQTtBQUd4QztBQUVPLE1BQU0sb0JBQW9CLGtCQUFrQjtBQUFBLEVBRWpELFlBQVksS0FBYTtBQUNqQjtBQUZSLFNBQVMsWUFBWTtBQUduQixTQUFLLFFBQVE7QUFBQTtBQUFBLEVBR04sV0FBVztBQUNsQixXQUFPLE1BQU0sYUFBYSxLQUFLLEtBQUssSUFBSTtBQUFBO0FBRTVDO0FBRU8sTUFBTSxpQkFBaUIsa0JBQWtCO0FBQUEsRUFFOUMsWUFBWSxLQUFhO0FBQ2pCO0FBRlIsU0FBUyxZQUFZO0FBR25CLFNBQUssUUFBUTtBQUFBO0FBQUEsRUFFTixXQUFXO0FBQVMsb0JBQVMsS0FBSyxRQUFRO0FBQUE7QUFBQSxFQUMxQyxXQUFXO0FBQ2xCLFdBQU8sVUFBVSxhQUFhLEtBQUssS0FBSyxJQUFJO0FBQUE7QUFFaEQ7QUFFTyxNQUFNLG9CQUFvQixlQUFlO0FBQUEsRUFLOUMsY0FBYztBQUNOO0FBTFIsU0FBUyxZQUFZO0FBTW5CLFNBQUssT0FBTztBQUNaLFNBQUssT0FBTztBQUFBO0FBQUEsRUFHTCxXQUFXO0FBQ2xCLFFBQUksS0FBSyxTQUFTO0FBQ1Qsc0JBQVMsS0FBSyxRQUFRO0FBQ3hCLHVCQUFZLEtBQUssUUFBUTtBQUFBO0FBQUEsRUFFekIsU0FBUztBQUNWLGlCQUFPLE1BQU0sT0FBTztBQUMxQixTQUFLLFFBQVEsS0FBSztBQUNsQixTQUFLLE9BQU8sS0FBSztBQUNqQixTQUFLLE9BQU8sS0FBSztBQUNWO0FBQUE7QUFBQSxFQUVBLFdBQVc7QUFBRSxXQUFPLEtBQUs7QUFBQTtBQUNwQztBQUdPLE1BQU0sd0JBQXdCLGVBQWU7QUFBQSxFQUdsRCxjQUFjO0FBQ047QUFIUixTQUFTLFlBQVk7QUFJbkIsU0FBSyxPQUFPO0FBQUE7QUFBQSxFQUVMLFdBQVc7QUFBUywyQkFBZ0IsS0FBSyxRQUFRO0FBQUE7QUFBQSxFQUNqRCxTQUFTO0FBQ1YsaUJBQU8sS0FBSyxZQUFZLFVBQVUsWUFBWSxVQUFVLE9BQU8sS0FBSyxJQUFJO0FBQzlFLFNBQUssUUFBUSxLQUFLO0FBQ2xCLFNBQUssT0FBTyxLQUFLO0FBQ1Y7QUFBQTtBQUFBLEVBRUEsV0FBVztBQUFFLFdBQU8sS0FBSyxPQUFPO0FBQUE7QUFDM0M7QUFFTyxNQUFNLHVCQUF1QixlQUFlO0FBQUEsRUFNakQsY0FBYztBQUNOO0FBTlIsU0FBUyxZQUFZO0FBT25CLFNBQUssT0FBTztBQUNaLFNBQUssT0FBTztBQUNaLFNBQUssT0FBTztBQUFBO0FBQUEsRUFHTCxXQUFXO0FBQUUsV0FBTyxTQUFTLEtBQUssUUFBUSxNQUFNLEtBQUssT0FBTztBQUFBO0FBQUEsRUFDNUQsU0FBUztBQUNWLGlCQUFPLEtBQUssWUFBWSxVQUFVLFlBQVksVUFBVSxPQUFPLEtBQUssSUFBSTtBQUM5RSxTQUFLLFFBQVEsS0FBSztBQUNsQixTQUFLLE9BQU8sS0FBSztBQUNqQixTQUFLLE9BQU8sS0FBSztBQUNqQixTQUFLLE9BQU8sS0FBSztBQUNWO0FBQUE7QUFBQSxFQUVBLFdBQVc7QUFDbEIsVUFBTSxTQUFTLEtBQUs7QUFDaEIsZUFBTyxZQUFZLEtBQUssSUFBSTtBQUNoQyxRQUFJLEtBQUssQ0FBQyxFQUFFLFlBQVksTUFBTSxRQUFRLEtBQUssQ0FBQyxNQUFNLE9BQU8sUUFBUSxLQUFLLFdBQVcsQ0FBQyxHQUFHLElBQU0sRUFBSSxJQUFJO0FBR2pHLGFBQU8sVUFBVSxLQUFLLE1BQU0sR0FBRyxLQUFLLE1BQU07QUFBQTtBQUU1QyxXQUFPLFNBQVM7QUFBQTtBQUVwQjtBQUVBLFNBQVMsWUFBWUEsU0FBZ0I7QUFDbkMsRUFBQUEsVUFBUyxLQUFLQTtBQUNkLE1BQUksU0FBUztBQUNQLG9CQUFZQSxRQUFPLFdBQVcsQ0FBQztBQUNyQyxXQUFTLElBQUksR0FBRyxJQUFJQSxRQUFPLFFBQVEsS0FBSztBQUNoQyxpQkFBT0EsUUFBTyxXQUFXLENBQUM7QUFDaEMsUUFBSSxTQUFTO0FBQ0wsZ0JBQUksc0JBQXNCLCtDQUErQztBQUcvRSxnQkFBUSxNQUFNLEdBQUssRUFBSSxLQUFLLFNBQVMsT0FDcEMsTUFBTSxLQUFLLFFBQVEsTUFBTSxJQUFNLEVBQUksS0FDbkMsTUFBTSxLQUFLLFFBQVEsTUFBTSxJQUFNLEVBQUksS0FBSyxjQUFjO0FBRXZELGdCQUFVLE9BQU8sS0FBSyxTQUFTLEVBQUUsSUFBSTtBQUFBLGFBRXJDLFFBQVEsT0FDUixTQUFTLE1BQ1QsU0FBUyxNQUNULFFBQVEsTUFBTSxJQUFNLEVBQUksS0FDeEIsUUFBUSxNQUFNLElBQU0sRUFBSSxLQUN4QixRQUFRLE1BQU0sSUFBTSxHQUFJO0FBRXhCLGdCQUFVQSxRQUFPLENBQUM7QUFBQTtBQUVSLHVCQUFPQSxRQUFPLENBQUM7QUFBQTtBQUd0QjtBQUNUO0FBRUEsU0FBUyxXQUFXQSxTQUFnQjtBQUlsQyxFQUFBQSxVQUFTLEtBQUtBO0FBQ2QsTUFBSSxTQUFTO0FBQ2IsV0FBUyxJQUFJLEdBQUcsSUFBSUEsUUFBTyxRQUFRLEtBQUs7QUFDaEMsaUJBQU9BLFFBQU8sV0FBVyxDQUFDO0FBQ2hDLFFBQUksU0FBUztBQUNMLGdCQUFJLHNCQUFzQiwrQ0FBK0M7QUFFakYsUUFDRSxRQUFRLE9BQ1IsU0FBUyxNQUNULFNBQVMsTUFDVCxRQUFRLE1BQU0sSUFBTSxFQUFJLEtBQ3hCLFFBQVEsTUFBTSxJQUFNLEVBQUksS0FDeEIsUUFBUSxNQUFNLElBQU0sR0FBSTtBQUV4QixnQkFBVUEsUUFBTyxDQUFDO0FBQUE7QUFFbEIsZ0JBQVUsT0FBTyxLQUFLLFNBQVMsRUFBRSxJQUFJO0FBQUE7QUFHbEM7QUFDVDtBQUVBLFNBQVMsYUFBYUEsU0FBZ0I7QUFDcEMsRUFBQUEsVUFBUyxLQUFLQTtBQUNkLE1BQUksU0FBUztBQUNiLFdBQVMsSUFBSSxHQUFHLElBQUlBLFFBQU8sUUFBUSxLQUFLO0FBQ2hDLGlCQUFPQSxRQUFPLFdBQVcsQ0FBQztBQUVoQyxRQUFJLFNBQVM7QUFDTCxnQkFBSSxzQkFBc0IsK0NBQStDO0FBRWpGLFFBQUksUUFBUSxNQUFNLEdBQUssRUFBSSxLQUFLLFNBQVM7QUFDdkMsZ0JBQVUsT0FBTyxLQUFLLFNBQVMsRUFBRSxJQUFJO0FBQUEsYUFDOUIsU0FBUyxNQUFRLFNBQVM7QUFDdkIsdUJBQU9BLFFBQU8sQ0FBQztBQUFBO0FBRXpCLGdCQUFVQSxRQUFPLENBQUM7QUFBQTtBQUdmO0FBQ1Q7QUNuN0JPLE1BQU0sNkJBQTZCLE1BQU07QUFDaEQ7QUFtQmdCLGtCQUFTLFVBQWtCLGFBQWlGO0FBQ3RIO0FBQ0E7QUFDTyxhQUFBQyxTQUFhLFFBQVE7QUFDOUIsUUFBSSxFQUFFLE9BQU8sT0FBTyxTQUFTLENBQUMsYUFBYUM7QUFDekMsYUFBTyxLQUFLLElBQUlBLFVBQWM7QUFBQSxXQUN6QixHQUFHO0FBQ1YsVUFBTSxhQUFhLEVBQUUsVUFBVSxnQ0FBZ0MsUUFBUTtBQUN2RSxVQUFNLFNBQVMsRUFBRSxTQUFTLElBQUksUUFBUSxFQUFFLE9BQU87QUFDL0MsUUFBSSxVQUFVO0FBQ1osUUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLEdBQUcsS0FBSyxJQUFJLGFBQWEsRUFBRSxNQUFNLFVBQVUsUUFBUSxFQUFFLFFBQVEsTUFBTTtBQUNqRyxNQUFFLFVBQVU7QUFDTjtBQUFBO0FBRUYsMkJBQW1CLE9BQU8sS0FBSyxDQUFTO0FBQzVDLFdBQVEsaUJBQWlCQyxrQkFDdEIsaUJBQWlCQyxrQkFDakIsaUJBQWlCQyxlQUNqQixpQkFBaUJDLGVBQ2pCLGlCQUFpQkMsWUFDakIsaUJBQWlCQyxZQUNqQixpQkFBaUJDO0FBQUFBO0FBQUFBO0FBQUFBLElBSWpCLGlCQUFpQkMsa0JBQ2pCLGlCQUFpQkM7QUFBQUEsSUFFakIsaUJBQWlCQyxZQUNqQixpQkFBaUJDO0FBQUFBLEVBQUksQ0FDekI7QUFDRztBQUNJLGNBQUkscUJBQXFCLHNCQUFzQixpQkFBaUIsVUFBVSxpQ0FBaUMsUUFBUSxtQ0FBbUM7QUFFOUosTUFBSSxNQUFNO0FBQ0osb0NBQVksSUFBWTtBQUU5QixXQUFTLGFBQWE7QUFDYixlQUFJLHFCQUFxQixxQkFBcUIsT0FBTyxHQUFHLEVBQUUsVUFBVSxpQ0FBaUMsUUFBUSxtQ0FBbUM7QUFBQTtBQUd6SixXQUFTLGlCQUFpQjtBQUNqQixrQkFBTyxHQUFHLGFBQWFDO0FBQzVCO0FBQUE7QUFHSyxtQkFBUSxJQUFJLEtBQUs7QUFDakIsa0JBQU8sQ0FBQyxhQUFhQztBQUFBQSxFQUFJO0FBR3pCLG9CQUFTLElBQUksS0FBSztBQUNsQixrQkFBTyxDQUFDLGFBQWFDO0FBQUFBLEVBQUk7QUFHekIsb0JBQVMsSUFBSSxLQUFLO0FBQ2xCLGtCQUFPLENBQUMsYUFBYUM7QUFBQUEsRUFBSTtBQUd6QixtQkFBUSxJQUFJLEtBQUs7QUFDakIsa0JBQU8sQ0FBQyxhQUFhQztBQUFBQSxFQUFJO0FBR3pCLHVCQUFZLElBQUksS0FBSztBQUNyQixrQkFBTyxDQUFDLGFBQWFDO0FBQUFBLEVBQUk7QUFHekIsd0JBQWEsSUFBSSxLQUFLO0FBQ3RCLGtCQUFPLENBQUMsYUFBYUM7QUFBQUEsRUFBSTtBQUd6QixzQkFBVyxJQUFJLEtBQUs7QUFDcEIsa0JBQU8sQ0FBQyxhQUFhQztBQUFBQSxFQUFJO0FBR3pCLGtCQUFPLElBQUksS0FBSztBQUNmLGtCQUFPLENBQUMsYUFBYUMsY0FBbUIsT0FBTyxDQUFDLEVBQUUsVUFBVTtBQUFBO0FBRzdELGlCQUFNLElBQUksS0FBSztBQUNmLGtCQUFPLENBQUMsYUFBYXBCO0FBQUFBLEVBQUk7QUFHekIsOEJBQW1CLElBQUksS0FBSztBQUNuQyxXQUFRLE9BQU8sQ0FBQyxhQUFhb0IsY0FBb0IsQ0FBQyxLQUFLLEtBQUssR0FBRyxFQUFFLFNBQVMsT0FBTyxDQUFDLEVBQUUsS0FBZTtBQUFBO0FBRzVGLCtCQUFvQixJQUFJLEtBQUs7QUFDcEMsV0FBTyxRQUFRLENBQUMsS0FBSyxhQUFhLENBQUMsS0FBSyxNQUFNLENBQUMsS0FBSyxtQkFBbUIsQ0FBQyxLQUFNLE9BQU8sQ0FBQyxhQUFhUjtBQUFBQSxFQUFJO0FBR3pHLFdBQVMsMkJBQWtEO0FBQ25EUyxvQkFBUyxDQUFDLGlCQUFpQjtBQUNqQyxXQUFPLE1BQU07QUFDSTtBQUNmLFVBQUksQ0FBQyxRQUFRO0FBQ1g7QUFDRjtBQUNBQSxjQUFPLEtBQUssaUJBQWlCO0FBQUE7QUFFeEJBO0FBQUFBLEVBQUE7QUFHVCxXQUFTLGtCQUF1QztBQUMvQjtBQUNmLFFBQUksU0FBUztBQUNKLG9CQUFPLEtBQUssRUFBRTtBQUN2QixRQUFJLFNBQVM7QUFDSixvQkFBTyxLQUFLLEVBQUU7QUFDdkIsV0FBTyx1QkFBdUI7QUFBQTtBQUdoQyxXQUFTLHlCQUE2QztBQUNwRCxVQUFNQSxVQUE2QixFQUFFLFNBQVMsR0FBRztBQUNsQztBQUNmLFFBQUksc0JBQXNCO0FBRXhCQSxjQUFPLFFBQVEsS0FBSyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsRUFBRSxNQUFNLFNBQVMsTUFBTSxDQUFHLEdBQUMsS0FBSyxZQUFZLElBQUk7QUFBQSxXQUN6RjtBQUNMQSxjQUFPLFFBQVEsS0FBSyxFQUFFLFVBQVUseUJBQXlCLFlBQVksSUFBSTtBQUFBO0FBRTNFLFdBQU8sTUFBTTtBQUNJO0FBQ2YsVUFBSSxzQkFBc0I7QUFDeEJBLGdCQUFPLFFBQVFBLFFBQU8sUUFBUSxTQUFTLENBQUMsRUFBRSxhQUFhLE9BQU8sS0FBSyxFQUFFO0FBQ3REO0FBQUEsaUJBQ04sdUJBQXVCO0FBQ2hDO0FBQUE7QUFFRkEsY0FBTyxRQUFRLEtBQUssRUFBRSxZQUFZLElBQUksVUFBVSxzQkFBc0IsR0FBRztBQUFBO0FBRXBFQTtBQUFBQSxFQUFBO0FBR1QsV0FBUyx3QkFBMkM7QUFDbEQsUUFBSSxlQUFlO0FBQ25CLFVBQU0sWUFBMkIsQ0FBQztBQUUzQixZQUFDLHVCQUF1QjtBQUN6Qix1QkFBYSxVQUFVO0FBQ1QsK0JBQU8sS0FBSyxFQUFFLFNBQVM7QUFBQSxNQUM5QixrQkFBTyxHQUFHLGFBQWFDLFdBQWU7QUFDL0IsK0JBQU8sS0FBSyxFQUFFLFNBQVM7QUFBQSxpQkFDN0IsT0FBTyxHQUFHLGFBQWFGLGNBQW1CLE9BQU8sR0FBRyxFQUFFLFVBQVUsS0FBSztBQUMvRTtBQUNBLFlBQUksUUFBUTtBQUNWLDBCQUFnQixNQUFNLE9BQU8sS0FBSyxFQUFFLFNBQVM7QUFBQTtBQUU3QyxnQkFBTSxXQUFXO0FBQUEsTUFDVixrQkFBTyxHQUFHLGFBQWFHLFlBQWdCO0FBQ2hEO0FBQ0EsWUFBSSxXQUFXO0FBQ1QsZUFBQyxZQUFZLElBQUssT0FBTyxHQUFHLEVBQUUsTUFBaUIsWUFBWSxDQUFDLEdBQUc7QUFDakUsNEJBQWdCLE1BQU0sT0FBTyxLQUFLLEVBQUUsU0FBUztBQUFBLGlCQUN4QztBQUNMLGtCQUFNLE9BQVEsT0FBTyxLQUFLLEVBQUUsTUFBaUIsWUFBWTtBQUN6RCxzQkFBVSxLQUFLLEVBQUUsTUFBTSxNQUFNLElBQUk7QUFDakMsa0JBQU0sSUFBSSxJQUFJO0FBQUE7QUFBQSxRQUNoQixXQUNTLGNBQWM7QUFDdkIsZ0JBQU0sT0FBUSxPQUFPLEtBQUssRUFBRSxNQUFpQixZQUFZO0FBQ3pELGNBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxHQUFHO0FBQzFCLDRCQUFnQixJQUFJLElBQUksSUFBSSxnQ0FBaUM7QUFBQSxpQkFDeEQ7QUFDTCxzQkFBVSxLQUFLLEVBQUUsTUFBTSxNQUFNLDRCQUE0QjtBQUN6RCxrQkFBTSxJQUFJLElBQUk7QUFBQTtBQUVEO0FBQ2YsY0FBSSxDQUFDLGFBQWE7QUFDaEIsa0JBQU0sV0FBVztBQUNuQjtBQUFBLGVBQ0s7QUFDTCxnQkFBTSxXQUFXO0FBQUE7QUFBQSxNQUVWLGtCQUFPLEdBQUcsYUFBYUMsaUJBQXFCO0FBQ3JDO0FBQ2hCO0FBQ0EsZUFBTyxFQUFFLE9BQU8sR0FBRyxhQUFhQyxxQkFBeUIsQ0FBQyxNQUFNO0FBQzlDLGlDQUFPLEtBQUssRUFBRSxTQUFTO0FBQ3pDLFlBQUksRUFBRSxPQUFPLEdBQUcsYUFBYUE7QUFDM0IsZ0JBQU0sV0FBVztBQUNIO0FBQ2hCO0FBQUEsYUFDSztBQUNMLGNBQU0sV0FBVztBQUFBO0FBQUEsSUFDbkI7QUFFRSxTQUFDLGdCQUFnQixDQUFDLFVBQVU7QUFDOUIsWUFBTSxXQUFXO0FBQ25CLFdBQU8sRUFBRSxLQUFLLGdCQUFnQixRQUFXLFVBQVU7QUFBQTtBQUdyRCxXQUFTLGtDQUEwQztBQUNqRCxRQUFJLElBQUk7QUFDUixRQUFJLFVBQVU7QUFDUCxZQUFDLFNBQVM7QUFDWCwyQkFBaUIsV0FBVztBQUM5QjtBQUNGLFVBQUksYUFBYTtBQUNmO0FBQ0YsVUFBSSxDQUFDO0FBQ0g7QUFDRyxrQkFBTyxLQUFLLEVBQUUsU0FBUztBQUFBO0FBRXZCO0FBQUE7QUFHVCxRQUFNLFNBQVMseUJBQXlCO0FBQ3hDLE1BQUksQ0FBQyxNQUFNO0FBQ1QsVUFBTSxXQUFXO0FBQ2YsYUFBTyxLQUFLLENBQU8sZUFBTyxRQUFRLFlBQVksRUFBRSxhQUFhLElBQUk7QUFDbkUsVUFBTSxJQUFJLHFCQUFxQixxQ0FBcUMsUUFBUSxtQ0FBbUM7QUFDakgsU0FBTyxFQUFFLFVBQVUsUUFBZ0MsT0FBTyxNQUFNLEtBQUssS0FBSyxFQUFFO0FBQzlFO0FDcE9BLE1BQU0sdUJBQXVCLG9CQUFJLElBQUksQ0FBQyxnQkFBZ0Isb0JBQW9CLGdCQUFnQixlQUFlLGtCQUFrQixXQUFXLFlBQVksU0FBUyxTQUFTLE1BQU0sQ0FBQztBQUMzSyxNQUFNLHVEQUF1QyxJQUFJLENBQUMsV0FBVyxZQUFZLFNBQVMsU0FBUyxNQUFNLENBQUM7QUFrQnJGLDJDQUFxQixJQUFJLENBQUMsT0FBTyxNQUFNLFNBQVMsT0FBTyxTQUFTLFNBQVMsV0FBVyxRQUFRLGdCQUFnQixXQUFXLFlBQVksU0FBUyxTQUFTLFlBQVksV0FBVyxRQUFRLFdBQVcsQ0FBQztBQUV0TSxTQUFTLGNBQWMsVUFBa0M7QUFDeEQsd0JBQWdCLG9CQUFvQixRQUFRO0FBQ2xELFFBQU0sUUFBOEIsQ0FBQztBQUMxQixxQkFBUSxjQUFjLE9BQU87QUFDdEMsUUFBSSxLQUFLLFNBQVMsU0FBUyxLQUFLLFNBQVMsYUFBYTtBQUNwRCxVQUFJLEtBQUssU0FBUztBQUNYLG9CQUFPLFlBQVksS0FBSyxPQUFPO0FBQ3RDLFlBQU0sWUFBWSxTQUFTLEtBQUssTUFBTSxjQUFjO0FBQ3BELFlBQU0sS0FBSztBQUFBLFFBQ1QsTUFBTTtBQUFBLFFBQ04sTUFBTSxVQUFVO0FBQUEsUUFDaEIsUUFBUSxLQUFLO0FBQUEsT0FDZDtBQUNEO0FBQUE7QUFFRixRQUFJLHFCQUFxQixJQUFJLEtBQUssSUFBSSxHQUFHO0FBQ25DO0FBQ0E7QUFDQTtBQUNGLGNBQU0sWUFBWSxLQUFLLE1BQU0sTUFBTSxLQUFLLE9BQU8sR0FBRztBQUNsRCxZQUFJLENBQUMsTUFBTSxRQUFRLFNBQVMsS0FBSyxVQUFVLFNBQVMsS0FBSyxVQUFVLFNBQVMsS0FBSyxPQUFPLFVBQVUsQ0FBQyxNQUFNO0FBQ3ZHLGdCQUFNLElBQUkscUJBQXFCLHVCQUF1QixLQUFLLElBQUksTUFBTSxLQUFLLElBQUk7QUFDaEYsd0JBQWdCLFVBQVUsQ0FBQztBQUN2QixzQkFBVSxXQUFXLEdBQUc7QUFDdEIscUJBQU8sVUFBVSxDQUFDLE1BQU0sWUFBWSxDQUFDLGlDQUFpQyxJQUFJLEtBQUssSUFBSTtBQUNyRixrQkFBTSxJQUFJLHFCQUFxQix1QkFBdUIsS0FBSyxJQUFJLE1BQU0sS0FBSyxJQUFJO0FBQ2hGLHFCQUFXLFVBQVUsQ0FBQztBQUFBO0FBQUEsZUFFakIsR0FBRztBQUNWLGNBQU0sSUFBSSxxQkFBcUIsdUJBQXVCLEtBQUssSUFBSSxNQUFNLEtBQUssSUFBSTtBQUFBO0FBRWhGLFlBQU0sU0FBUyxFQUFFLE1BQU0sS0FBSyxNQUFNLFFBQVEsS0FBSyxNQUFNLE1BQU0sRUFBRSxRQUFRLGNBQWMsYUFBYSxHQUFHLFdBQVc7QUFDOUcsWUFBTSxZQUFZLENBQUMsR0FBRyxPQUFPLEtBQUssT0FBTyxLQUFLLEVBQUUsVUFBVSxLQUFLLENBQUFDLFVBQVFBLE1BQUssU0FBUyxzQkFBc0JBLE1BQUssU0FBUyxhQUFhO0FBQ2hJLDZCQUFpQixZQUFZLE9BQU8sS0FBSyxPQUFPLE1BQU0sUUFBUSxTQUFTLElBQUk7QUFFakYsVUFBSSxtQkFBbUIsTUFBTSxtQkFBbUIsT0FBTyxLQUFLLE9BQU8sTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3ZJLGVBQU8sS0FBSyxPQUFPLE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDO0FBQ3ZELFlBQU0sS0FBSyxNQUFNO0FBQ2pCO0FBQUE7QUFFRixVQUFNLEtBQUssRUFBRSxHQUFHLE1BQU0sUUFBUSxLQUFLLE1BQU07QUFBQTtBQUUzQyxNQUFJLHFCQUFxQixJQUFJLE1BQU0sQ0FBQyxFQUFFLElBQUk7QUFDeEMsVUFBTSxJQUFJLHFCQUFxQixJQUFJLE1BQU0sQ0FBQyxFQUFFLElBQUksNEJBQTRCO0FBQ3ZFO0FBQUEsSUFDTCxTQUFTLGNBQWM7QUFBQSxJQUN2QjtBQUFBLEVBQ0Y7QUFDRjtBQStCQSxTQUFTLG1CQUFtQixPQUE2QixPQUE2QjtBQUM3RSwyQkFBa0IsRUFBRSxPQUFPLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixFQUFFLE9BQU8sT0FBTztBQUNuRjtBQUVnQiwyQkFBa0IsVUFBbUMsaUJBQW1DO0FBQ3RHLE1BQUksT0FBTyxhQUFhO0FBQ2Y7QUFDVCxTQUFPLFNBQVMsTUFBTSxJQUFJLENBQUMsR0FBRyxNQUFNO0FBQ2xDLFFBQUksZ0JBQWdCO0FBQ3BCLFFBQUksQ0FBQyxtQkFBbUIsTUFBTSxTQUFTLFNBQVM7QUFDOUMsVUFBSSxFQUFFLFNBQVM7QUFDRztBQUFBLGVBQ1QsRUFBRSxTQUFTLFdBQVcsRUFBRSxPQUFPLFdBQVcsSUFBSSxLQUFLLEVBQUUsT0FBTyxXQUFXLElBQUk7QUFDbEU7QUFBQTtBQUVwQixVQUFNLFNBQVMsZ0JBQWdCLEVBQUUsT0FBTyxNQUFNO0FBQ3ZDLGNBQUcsTUFBTSxTQUFTLFVBQVUsTUFBTSxFQUFFLEdBQUcsTUFBTSxHQUFHLEVBQUUsTUFBTTtBQUFBLEdBQ2hFLEVBQUUsS0FBSyxNQUFNO0FBQ2hCO0FBYUEsU0FBUyxvQkFBb0IsVUFBeUM7QUFDcEUsTUFBSSxRQUFRO0FBQ1I7QUFDSixNQUFJLFFBQVE7QUFDWixRQUFNLFNBQWdDLEVBQUUsT0FBTyxHQUFHO0FBQ2xELFFBQU0sU0FBUyxNQUFNO0FBQ25CLFVBQU0sT0FBTyxTQUFTLFVBQVUsT0FBTyxLQUFLLEVBQUUsS0FBSztBQUM3QyxvQkFBVSxLQUFLLFFBQVEsR0FBRztBQUM1QjtBQUNBO0FBQ0Esb0JBQVksTUFBTSxLQUFLLFVBQVUsR0FBRyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0scUJBQXFCLEdBQUc7QUFDcEYsYUFBTyxLQUFLLFVBQVUsR0FBRyxPQUFPLEVBQUUsS0FBSztBQUNoQyxrQkFBSyxVQUFVLFVBQVUsQ0FBQztBQUFBLElBQ3hCLGdCQUFLLFNBQVMsS0FBSyxLQUFLLENBQUMsTUFBTSxPQUFPLEtBQUssS0FBSyxTQUFTLENBQUMsTUFBTSxLQUFLO0FBQ3ZFO0FBQ0E7QUFBQSxJQUNFLGdCQUFLLFNBQVMsS0FBSyxLQUFLLENBQUMsTUFBTSxPQUFPLEtBQUssS0FBSyxTQUFTLENBQUMsTUFBTSxLQUFLO0FBQ3ZFO0FBQ0E7QUFBQSxlQUNFLFdBQVcsS0FBSyxJQUFJLEtBQUssS0FBSyxXQUFXLElBQUksR0FBRztBQUlsRDtBQUNBO0FBQUEsV0FDRjtBQUNFO0FBQ0E7QUFBQTtBQUVULFFBQUksVUFBVTtBQUNWLGFBQUssQ0FBQyxNQUFNLEtBQUs7QUFDVDtBQUNILGtCQUFLLFVBQVUsQ0FBQztBQUFBO0FBRXpCLFdBQU8sTUFBTSxLQUFLLEVBQUUsTUFBTSxNQUFNO0FBQ2hDLFFBQUksU0FBUztBQUNYLFVBQUksT0FBTyxZQUFZO0FBQ2Ysa0JBQUkscUJBQXFCLHdEQUF3RDtBQUNsRix1QkFBVSxPQUFPLE1BQU0sU0FBUztBQUFBO0FBQUEsRUFFM0M7QUFFQSxNQUFJLENBQUMsU0FBUyxTQUFTLElBQUksR0FBRztBQUM1QixZQUFRLFNBQVM7QUFDVjtBQUNBO0FBQUE7QUFHVCxRQUFNLGdDQUFnQyxNQUFNO0FBQzFDLFVBQU0sU0FBUyxTQUFTLFVBQVUsT0FBTyxLQUFLO0FBQ3hDLGtCQUFRLE9BQU8sTUFBTSxtQkFBbUI7QUFFOUMsV0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQUEsRUFDN0I7QUFFTyxpQkFBUSxTQUFTLFFBQVE7QUFDeEIsY0FBSSxTQUFTLEtBQUs7QUFDeEIsUUFBSSxNQUFNLFFBQVEsUUFBUSxJQUFJLFNBQVMsUUFBUTtBQUNwQztBQUFBLGVBQ0EsTUFBTSxPQUFPO0FBQ2Q7QUFDUjtBQUFBLElBQ0YsV0FBVyxDQUFDLFVBQVUsTUFBTSxPQUFPLE1BQU0sT0FBUSxNQUFNLFFBQVEsQ0FBQyxpQ0FBaUM7QUFDdkY7QUFDUjtBQUFBLGVBQ1MsQ0FBQyxTQUFTLE1BQU0sT0FBTyxTQUFTLFFBQVEsQ0FBQyxNQUFNLEtBQUs7QUFDdEQ7QUFDRTtBQUNEO0FBQUEsV0FDSDtBQUNMO0FBQUE7QUFBQSxFQUNGO0FBRUs7QUFDQTtBQUNUO0FBaUJnQixnQ0FBdUIsVUFBa0Isc0JBQWtEO0FBQ3pHLE1BQUksS0FBSztBQUNMLFlBQU0sU0FBUyxXQUFXO0FBRTlCLFFBQU0sT0FBTyxNQUFNLFNBQVMsRUFBRSxLQUFLO0FBQ25DLFFBQU0sT0FBTyxNQUFNO0FBQ2pCLFVBQU1MLFVBQVMsS0FBSztBQUNsQjtBQUNGLFVBQU0sTUFBTSxTQUFTO0FBQ2RBO0FBQUFBLEVBQ1Q7QUFFTSxzQkFBYyxDQUFDLFVBQTRCO0FBQzNDO0FBQ0YsWUFBTSxJQUFJLHFCQUFxQix1REFBdUQsUUFBUSxJQUFJO0FBQ3BHLFVBQU0sSUFBSSxxQkFBcUIsa0NBQWtDLFFBQVEsMkJBQTJCLEtBQU0sa0JBQWlCLEVBQUUsTUFBTSxRQUFRLGFBQWEsUUFBUSxHQUFHO0FBQUEsRUFDcks7QUFFQSxXQUFTLGFBQWE7QUFDcEIsV0FBTyxDQUFDLE9BQU8sS0FBSyxLQUFLLE1BQU07QUFDeEI7QUFBQTtBQUdULFdBQVMsY0FBYyxNQUFjO0FBRTNCLG1CQUFRLE9BQ1IsUUFBUSxPQUFZLFFBQVEsT0FDNUIsUUFBUSxPQUFZLFFBQVEsT0FDNUIsUUFBUSxPQUFZLFFBQVEsT0FDNUIsUUFBUSxPQUFZLFFBQVEsT0FDN0IsU0FBUyxPQUNULFNBQVM7QUFBQTtBQUdsQixXQUFTLGlCQUFpQjtBQUN4QixRQUFJQSxVQUFTO0FBQ0Y7QUFDWCxXQUFPLENBQUMsT0FBTyxjQUFjLE1BQU07QUFDakNBLGlCQUFVLEtBQUs7QUFDVkE7QUFBQUEsRUFBQTtBQUdULFdBQVMsaUJBQWlCLE9BQWU7QUFDdkMsUUFBSUEsVUFBUyxLQUFLO0FBQ2xCLFFBQUlBLFlBQVc7QUFDYixrQkFBWSx1QkFBdUI7QUFDckMsV0FBTyxDQUFDLE9BQU8sS0FBSyxNQUFNLE9BQU87QUFDL0IsVUFBSSxLQUFXO0FBQ1I7QUFDUEEsaUJBQVUsS0FBSztBQUFBO0FBRWpCLFFBQUksS0FBVztBQUNiLGtCQUFZLHVCQUF1QjtBQUNyQ0EsZUFBVSxLQUFLO0FBQ1JBO0FBQUFBLEVBQUE7QUFHVCxXQUFTLHdCQUF3QjtBQUMvQixRQUFJLEtBQVc7QUFDYixrQkFBWSw0QkFBNEI7QUFDMUMsUUFBSSxTQUFTO0FBQ2IsUUFBSSxVQUFVO0FBRWQsV0FBTyxDQUFDLEtBQUs7QUFDUCxxQkFBVyxNQUFNO0FBQ25CLGtCQUFVLEtBQUs7QUFDWDtBQUNGLHNCQUFZLDRCQUE0QjtBQUFBLE1BQ2pDLHNCQUFXLEtBQUssTUFBTSxLQUFLO0FBQzFCO0FBQUEsTUFDRCxZQUFDLFdBQVcsV0FBVyxLQUFLO0FBQzNCO0FBQUEsTUFDRCxZQUFDLFdBQVcsV0FBVyxLQUFLO0FBQ3JDO0FBQUE7QUFFRixnQkFBVSxLQUFLO0FBQUE7QUFFakIsUUFBSSxLQUFXO0FBQ2Isa0JBQVksNEJBQTRCO0FBQzFDLFFBQUksUUFBUTtBQUVaLFdBQU8sQ0FBQyxPQUFPLE9BQU8sTUFBTSxXQUFXO0FBQ3JDLGVBQVMsS0FBSztBQUNaO0FBQ0ssaUJBQUksT0FBTyxRQUFRLEtBQUs7QUFBQSxhQUN4QixHQUFHO0FBQ1YsWUFBTSxJQUFJLHFCQUFxQixrQ0FBa0MsUUFBUSxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQUE7QUFBQSxFQUM3RjtBQUdGLFdBQVMscUJBQXFCO0FBQzVCLFFBQUksUUFBUTtBQUNEO0FBQ1gsUUFBSSxLQUFLLE1BQU0sT0FBTyxXQUFXO0FBQy9CLGNBQVEsaUJBQWlCLEtBQUssQ0FBQyxFQUFFLE1BQU0sR0FBRyxFQUFFO0FBQUE7QUFFNUMsY0FBUSxlQUFlO0FBQ3pCLFFBQUksQ0FBQztBQUNILGtCQUFZLHVCQUF1QjtBQUM5QjtBQUFBO0FBR1QsV0FBUyxlQUEwQztBQUN0QztBQUNYLFFBQUksS0FBSztBQUNULFFBQUksQ0FBQztBQUNILFlBQU0sS0FBSztBQUNULFNBQUMsT0FBUSxPQUFPO0FBQ2xCLFlBQU0sS0FBSztBQUNULFNBQUMsQ0FBQyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sSUFBSSxFQUFFLFNBQVMsRUFBRTtBQUNsRCxrQkFBWSxrQkFBa0I7QUFDeEI7QUFBQTtBQUdWLFdBQVMsZ0JBQXVDO0FBRXpDO0FBS0wsVUFBTSxXQUFXLENBQUM7QUFDVCxrQkFBSyxvQkFBb0I7QUFDdkI7QUFDSixzQkFBVyxLQUFLO0FBQ2hCO0FBQ0ksb0JBQUssb0JBQW9CO0FBQ3ZCO0FBQUE7QUFHVCxtQkFBVyxLQUFLO0FBQ2I7QUFDTCxhQUFPLEVBQUUsTUFBTSxTQUFTLEtBQUssR0FBRyxHQUFHLFVBQVUsSUFBSSxZQUFZLE9BQU8sTUFBTSxlQUFlLE1BQU07QUFBQTtBQUdqRyxVQUFNLFdBQVcsYUFBYTtBQUU5QixRQUFJLFFBQVE7QUFDWixRQUFJLGdCQUFnQjtBQUNUO0FBQ1AsbUJBQVcsS0FBSztBQUNsQixVQUFJLGFBQWE7QUFDZixjQUFNLElBQUkscUJBQXFCLGtDQUFrQyxRQUFRLG1CQUFtQixRQUFRLHVDQUF1QztBQUM3SSxjQUFRLHNCQUFzQjtBQUFBLGVBQ3JCLEtBQUssTUFBTSxPQUFPLFdBQVcsS0FBSztBQUMzQyxjQUFRLGlCQUFpQixLQUFLLENBQUMsRUFBRSxNQUFNLEdBQUcsRUFBRTtBQUNqQztBQUNYLFVBQUksS0FBSyxNQUFNLE9BQU8sV0FBVyxLQUFLO0FBQ3BCO0FBQ1g7QUFBQSxpQkFDSSxLQUFLLE1BQU0sT0FBTyxXQUFXLEtBQUs7QUFDM0I7QUFDWDtBQUFBO0FBQUEsSUFDUCxPQUNLO0FBQ0c7QUFDRCxjQUFDLFFBQVEsY0FBYyxLQUFNLE1BQUssS0FBSyxNQUFNLE9BQU8sS0FBVztBQUNwRSxpQkFBUyxLQUFLO0FBQ2hCLFVBQUksVUFBVSxRQUFRO0FBQ1o7QUFBQSxpQkFDQyxVQUFVLFNBQVM7QUFDcEI7QUFBQSxZQUNIO0FBQUEsSUFNUDtBQUVTO0FBQ1gsUUFBSSxLQUFXO0FBQ2Isa0JBQVkseUJBQXlCO0FBRWxDO0FBQ0QscUJBQWEsT0FBTyxPQUFPLFVBQVU7QUFDakMsZ0JBQUkscUJBQXFCLGtDQUFrQyxRQUFRLG1CQUFtQixRQUFRLGtEQUFrRCxLQUFLLEVBQUU7QUFDeEosYUFBRSxNQUFNLFNBQVMsS0FBSyxHQUFHLEdBQUcsVUFBVSxJQUFJLFVBQVUsT0FBTyxjQUFjO0FBQUE7QUFHbEYsUUFBTSxTQUE0QjtBQUFBLElBQ2hDLE1BQU07QUFBQSxJQUNOLFlBQVk7QUFBQSxFQUNkO0FBQ0EsU0FBTyxPQUFPLGVBQWU7QUFDbEI7QUFDSixvQkFBVyxLQUFLO0FBQ2Qsc0JBQVcsS0FBSyxlQUFlO0FBQzNCO0FBQUE7QUFFYixNQUFJLENBQUM7QUFDSCxnQkFBWSxNQUFTO0FBQ3ZCLE1BQUksQ0FBQyxPQUFPLFFBQVEsQ0FBQyxPQUFPLFdBQVc7QUFDckMsVUFBTSxJQUFJLHFCQUFxQixrQ0FBa0MsUUFBUSwrQkFBK0I7QUFDbkc7QUFDVDtBQ3ZhZ0IsMEJBQWlCLE1BQWMsT0FBZSxLQUFNO0FBQzVELHNCQUFjLEtBQUssVUFBVSxJQUFJO0FBQ2pDLHNCQUFjLFlBQVksVUFBVSxHQUFHLFlBQVksU0FBUyxDQUFDLEVBQUUsUUFBUSxRQUFRLEdBQUc7QUFDeEYsTUFBSSxTQUFTO0FBQ1gsV0FBTyxPQUFPLFlBQVksUUFBUSxRQUFRLEtBQU0sSUFBSTtBQUN0RCxNQUFJLFNBQVM7QUFDWCxXQUFPLE9BQU8sWUFBWSxRQUFRLFFBQVEsS0FBSyxJQUFJO0FBQ3JELE1BQUksU0FBUztBQUNYLFdBQU8sT0FBTyxZQUFZLFFBQVEsUUFBUSxLQUFLLElBQUk7QUFDL0MsWUFBSSxNQUFNLHFCQUFxQjtBQUN2QztBQWFPLFNBQVMsWUFBWSxNQUFjO0FBQ2pDLGNBQUssT0FBTyxDQUFDLEVBQUUsZ0JBQWdCLEtBQUssVUFBVSxDQUFDO0FBQ3hEO0FBRU8sU0FBUyxZQUFZLE1BQXNCO0FBRXpDLGNBQUssUUFBUSxzQkFBc0IsT0FBTyxFQUFFLFFBQVEsd0JBQXdCLE9BQU8sRUFBRSxZQUFZO0FBQzFHO0FBcUJPLFNBQVMsNEJBQTRCLFFBQWdCO0FBR25ELGdCQUFPLFFBQVEsOEJBQThCLFFBQVE7QUFDOUQ7QUNqQk8sU0FBUyxVQUFVLE1BQWdCLFVBQWtCLGlCQUEwQixPQUFlO0FBQ25HLFNBQU8sV0FBVyxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsRUFBRSxDQUFDO0FBQ3hEO0FBRU8sU0FBUyxXQUFXLE1BQWdCLFVBQWtCLGlCQUEwQixPQUFPLGdCQUFnQixJQUFJLGdCQUFrQztBQUM5STtBQUNLLDJCQUFnQixJQUFJLFdBQVcsSUFBSSxFQUFFLGNBQWMsR0FBRyxjQUFjLFFBQVEsR0FBRyxnQkFBZ0IsYUFBYTtBQUFBLFdBQzVHLEdBQUc7QUFFVixXQUFPLENBQUMsUUFBUTtBQUFBO0FBRXBCO0FBRUEsU0FBUyxnQkFBZ0IsU0FBeUIsUUFBd0IsaUJBQTBCLE9BQU8sZ0JBQWdCLElBQWM7QUFDdkksUUFBTSxRQUFRLENBQUMsR0FBRyxPQUFPLEtBQUs7QUFDOUIsUUFBTSxTQUFxQixDQUFDO0FBQ3hCLGlCQUF3QixpQkFBaUIsa0JBQWtCO0FBQy9ELFdBQVMsUUFBUSxHQUFHLFFBQVEsTUFBTSxRQUFRLFNBQVM7QUFDM0MsaUJBQU8sTUFBTSxLQUFLO0FBQ3hCLFVBQU0sT0FBTztBQUNGO0FBRVgsUUFBSSxLQUFLLFNBQVM7QUFDaEI7QUFDRSxhQUFLLFNBQVMsT0FBTztBQUN2QixVQUFJLEtBQUssU0FBUztBQUNoQixlQUFPLEtBQUssQ0FBQyxRQUFRLGdCQUFnQixNQUFNLFNBQVMsRUFBRSxHQUFHLFFBQVEsZ0JBQWdCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUFBLGVBQzVGLEtBQUssU0FBUztBQUNyQixlQUFPLEtBQUssQ0FBQyxRQUFRLGdCQUFnQixNQUFNLFFBQVEsRUFBRSxHQUFHLFFBQVEsZ0JBQWdCLE1BQU0sT0FBTyxJQUFJLENBQUMsQ0FBQztBQUFBO0FBRTVGLG9CQUFLLENBQUMsUUFBUSxnQkFBZ0IsTUFBTSxPQUFPLEtBQUssSUFBYyxDQUFDLENBQUM7QUFDekU7QUFBQTtBQUVFLGFBQUssU0FBUyxXQUFXO0FBQzNCLGFBQU8sS0FBSyxDQUFDLFFBQVEsZ0JBQWdCLE1BQU0sV0FBVyxLQUFLLElBQWMsR0FBRyxRQUFRLGdCQUFnQixNQUFNLFdBQVcsV0FBVyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUM7QUFDN0k7QUFBQTtBQUVFLGFBQUssU0FBUyxpQkFBaUI7QUFDakMsWUFBTSxFQUFFLE9BQU8sU0FBUyxZQUFZLEtBQUssSUFBYztBQUNoRCxrQkFBSyxDQUFDLFFBQVEsZ0JBQWdCLE1BQU0sUUFBUSxNQUFNLEVBQUUsTUFBTyxFQUFDLENBQUM7QUFDcEU7QUFBQTtBQUVFLGFBQUssU0FBUyxxQkFBcUI7QUFDckMsWUFBTSxFQUFFLE9BQU8sU0FBUyxZQUFZLEtBQUssSUFBYztBQUV2RCxVQUFJLENBQUMsT0FBTztBQUNILG9CQUFLLENBQUMsUUFBUSxnQkFBZ0IsTUFBTSxZQUFZLE1BQU0sRUFBRSxNQUFPLEVBQUMsQ0FBQztBQUN4RTtBQUFBO0FBQUEsSUFDRjtBQUVFLGFBQUssU0FBUyx5QkFBeUI7QUFDekMsWUFBTSxFQUFFLE9BQU8sU0FBUyxZQUFZLEtBQUssSUFBYztBQUV2RCxVQUFJLENBQUMsT0FBTztBQUNILG9CQUFLLENBQUMsUUFBUSxnQkFBZ0IsTUFBTSxnQkFBZ0IsTUFBTSxFQUFFLE1BQU8sRUFBQyxDQUFDO0FBQzVFO0FBQUE7QUFBQSxJQUNGO0FBRUUsYUFBSyxTQUFTLGdCQUFnQjtBQUNoQyxZQUFNLFNBQVMsZ0JBQWdCLFNBQVUsS0FBSyxLQUE0QixRQUFRLE9BQU8sYUFBYTtBQUMvRixrQkFBSyxPQUFPLElBQUksQ0FBUyxrQkFBUSxnQkFBZ0IsTUFBTSxPQUFPLEtBQUssQ0FBQyxDQUFDO0FBQzVFO0FBQUE7QUFFRSxhQUFLLFNBQVMsb0JBQW9CO0FBQ3BDLFlBQU0sU0FBUyxnQkFBZ0IsU0FBVSxLQUFLLEtBQTRCLFFBQVEsT0FBTyxhQUFhO0FBQy9GLGtCQUFLLE9BQU8sSUFBSSxDQUFTLGtCQUFRLGdCQUFnQixNQUFNLFVBQVUsS0FBSyxDQUFDLENBQUM7QUFDL0U7QUFBQTtBQUVFLGFBQUssU0FBUyxnQkFBZ0I7QUFDaEMsWUFBTSxTQUFTLGdCQUFnQixTQUFVLEtBQUssS0FBNEIsUUFBUSxPQUFPLGFBQWE7QUFDL0Ysa0JBQUssT0FBTyxJQUFJLENBQVMsa0JBQVEsZ0JBQWdCLE1BQU0sT0FBTyxLQUFLLENBQUMsQ0FBQztBQUM1RTtBQUFBO0FBRUUsYUFBSyxTQUFTLGVBQWU7QUFDL0IsWUFBTSxTQUFTLGdCQUFnQixTQUFVLEtBQUssS0FBNEIsUUFBUSxPQUFPLGFBQWE7QUFDL0Ysa0JBQUssT0FBTyxJQUFJLENBQVMsa0JBQVEsZ0JBQWdCLE1BQU0sTUFBTSxLQUFLLENBQUMsQ0FBQztBQUMzRTtBQUFBO0FBRUUsYUFBSyxTQUFTLGtCQUFrQjtBQUNsQyxZQUFNLFNBQVMsZ0JBQWdCLFNBQVUsS0FBSyxLQUE0QixRQUFRLE9BQU8sYUFBYTtBQUMvRixrQkFBSyxPQUFPLElBQUksQ0FBUyxrQkFBUSxnQkFBZ0IsTUFBTSxTQUFTLEtBQUssQ0FBQyxDQUFDO0FBQzlFO0FBQUE7QUFFRSxhQUFLLFNBQVMsa0JBQWtCO0FBQ2xDLFlBQU0sRUFBRSxPQUFPLFNBQVMsWUFBWSxLQUFLLElBQWM7QUFDaEQsa0JBQUssQ0FBQyxRQUFRLGdCQUFnQixNQUFNLFNBQVMsTUFBTSxFQUFFLE1BQU8sRUFBQyxDQUFDO0FBQ3JFO0FBQUE7QUFFRSxhQUFLLFNBQVMsaUJBQWlCO0FBQ2pDLFlBQU0sZUFBZSx1QkFBdUIsS0FBSyxJQUFvQjtBQUNyRSxZQUFNLFVBQTBCLEVBQUUsT0FBTyxHQUFHO0FBQ2pDLHlCQUFRLGFBQWEsWUFBWTtBQUN0QyxpQkFBSyxTQUFTLFFBQVE7QUFDeEIsa0JBQVEsUUFBUSxLQUFLO0FBQ3JCLGtCQUFRLE9BQU8sS0FBSztBQUFBLGVBQ2Y7QUFDTCxjQUFJLEtBQUssU0FBUyxXQUFXLE9BQU8sS0FBSyxVQUFVO0FBQzVDLHlCQUFRLENBQUMsS0FBSztBQUNyQixrQkFBUSxNQUFPLEtBQUssRUFBRSxNQUFNLEtBQUssU0FBUyxtQkFBbUIsa0JBQWtCLEtBQUssTUFBTSxPQUFPLEtBQUssT0FBTztBQUFBO0FBQUEsTUFDL0c7QUFFSyxrQkFBSyxDQUFDLFFBQVEsZ0JBQWdCLE1BQU0sUUFBUSxhQUFhLE1BQU0sT0FBTyxDQUFDLENBQUM7QUFDL0U7QUFBQTtBQUVFLGFBQUssU0FBUyxtQkFBbUI7QUFDbkMsWUFBTSxlQUFlLHVCQUF1QixLQUFLLElBQW9CO0FBQ3JFLFlBQU0sRUFBRSxNQUFVLGlCQUFhLFdBQVcsQ0FBQztBQUNwQyxrQkFBSyxDQUFDLFFBQVEsZ0JBQWdCLE1BQU0sV0FBVyxLQUFLLENBQUMsQ0FBQztBQUM3RDtBQUFBO0FBRUUsYUFBSyxTQUFTLGlCQUFpQjtBQUNqQyxZQUFNLGVBQWUsdUJBQXVCLEtBQUssSUFBb0I7QUFDckUsWUFBTSxFQUFFLE1BQU0sT0FBTyxjQUFrQixpQkFBYSxXQUFXLENBQUM7QUFDaEUsWUFBTSxPQUFPO0FBQ1Asb0JBQVEsQ0FBQyxDQUFDO0FBQ2hCLFVBQUksU0FBUyxlQUFlO0FBQ25CLG9CQUFLLENBQUMsUUFBUSxnQkFBZ0IsTUFBTSxlQUFlLE1BQU0sRUFBRSxNQUFPLEVBQUMsQ0FBQztBQUMzRTtBQUFBO0FBRUYsVUFBSSxTQUFTLE9BQU87QUFDWCxvQkFBSyxDQUFDLFFBQVEsZ0JBQWdCLE1BQU0sT0FBTyxNQUFNLEVBQUUsTUFBTyxFQUFDLENBQUM7QUFDbkU7QUFBQTtBQUVGLFVBQUksU0FBUyxTQUFTO0FBQ2Isb0JBQUssQ0FBQyxRQUFRLGdCQUFnQixNQUFNLFNBQVMsTUFBTSxFQUFFLE1BQU8sRUFBQyxDQUFDO0FBQ3JFO0FBQUE7QUFBQSxJQUNGO0FBRUYsUUFBSSxLQUFLLFNBQVMsc0JBQXVCLEtBQUssU0FBb0IsZUFBZTtBQUUvRSxZQUFNLGFBQWEsT0FBTyxPQUFPLFNBQVMsQ0FBQztBQUNyQyx1QkFBVyxNQUFNLFFBQVEsQ0FBQztBQUVoQyxZQUFNLGNBQWMsV0FBVyxJQUFJLFdBQVMsUUFBUSxjQUFjLENBQUMsT0FBTyxRQUFRLGdCQUFnQixNQUFNLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0SCxVQUFJLENBQUMsU0FBUyxLQUFLLEVBQUUsU0FBUyxTQUFTLElBQUksR0FBRztBQUNoQztBQUFBLFVBQ1IsUUFBUSxnQkFBZ0IsTUFBTSxpQkFBaUIsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFBQSxVQUN2RixRQUFRLGdCQUFnQixNQUFNLGlCQUFpQixrQkFBa0IsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFLLE9BQUksQ0FBQztBQUFBLFFBQ2pHO0FBQUE7QUFHRixpQkFBVyxPQUFPLEdBQUcsV0FBVyxRQUFRLEdBQUcsV0FBVztBQUMzQztBQUNYO0FBQUE7QUFHSSxxQkFBVyxNQUFNLFFBQVEsQ0FBQztBQUVoQyxVQUFNLGVBQWUsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLElBQUksR0FBRztBQUN4RCxVQUFNLGNBQWMsUUFBUSxnQkFBZ0IsTUFBTSxXQUFXLFlBQVk7QUFFckUsb0JBQVksQ0FBQyxxQkFBcUIsdUJBQXVCLEVBQUUsU0FBUyxTQUFTLElBQUksR0FBRztBQUN0RixZQUFNLEVBQUUsT0FBTyxTQUFTLFlBQVksU0FBUyxJQUFjO0FBRTNELFVBQUksQ0FBQyxPQUFPO0FBQ1YsY0FBTSxrQkFBa0IsUUFBUSxnQkFBZ0IsV0FBVyxTQUFTLFNBQVMsc0JBQXNCLGFBQWEsZ0JBQWdCLE1BQU0sRUFBRSxPQUFPO0FBQy9JLGNBQU0sVUFBMEIsQ0FBQztBQUNqQyxZQUFJLFNBQVMsU0FBUztBQUNwQixrQkFBUSxVQUFVO0FBQUE7QUFFbEIsa0JBQVEsYUFBYTtBQUN2QixjQUFNLGVBQWUsUUFBUSxnQkFBZ0IsTUFBTSxXQUFXLGNBQWMsT0FBTztBQUk1RSxvQkFBSyxDQUFDLFFBQVEsY0FBYyxDQUFDLGFBQWEsZUFBZSxDQUFDLEdBQUcsWUFBWSxDQUFDO0FBQ2pGO0FBQ0E7QUFBQTtBQUFBLElBQ0Y7QUFJRTtBQUNKLFFBQUksQ0FBQyxTQUFTLEtBQUssRUFBRSxTQUFTLEtBQUssSUFBSSxHQUFHO0FBQ3hDLFlBQU1NLGdCQUFlO0FBQUEsUUFBa0IsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQUE7QUFBQSxRQUF5QjtBQUFBLE1BQUk7QUFDcEYsOEJBQXdCLFFBQVEsZ0JBQWdCLE1BQU0sV0FBV0EsYUFBWTtBQUFBO0FBRy9FLFdBQU8sS0FBSyxDQUFDLGFBQWEscUJBQXFCLEVBQUUsT0FBTyxPQUFPLENBQWE7QUFBQTtBQUd2RSx1QkFBYyxTQUFTLFFBQVEsYUFBYTtBQUNyRDtBQUVBLFNBQVMsY0FBYyxTQUF5QixRQUFvQixlQUFpQztBQUNuRyxRQUFNLGdCQUFnQixPQUFPLElBQUksTUFBTSxFQUFFO0FBQ3pDLFFBQU0sU0FBbUIsQ0FBQztBQUVwQixRQUFBQyxTQUFRLENBQUMsVUFBa0I7QUFDM0Isa0JBQVUsT0FBTyxRQUFRO0FBQzNCLGFBQU8sS0FBSyxRQUFRLGNBQWMsYUFBYSxDQUFDO0FBQ2hELGFBQU8sT0FBTyxTQUFTO0FBQUE7QUFFZCx3QkFBUyxPQUFPLEtBQUssR0FBRztBQUNqQyxvQkFBYyxLQUFLLElBQUk7QUFDbkIsV0FBQ0EsT0FBTSxRQUFRLENBQUM7QUFDWDtBQUFBO0FBRUo7QUFBQSxFQUNUO0FBRUEsRUFBQUEsT0FBTSxDQUFDO0FBQ0E7QUFDVDtBQUVBLFNBQVMsWUFBWSxNQUEwRDtBQUM3RSxNQUFJLFFBQVE7QUFDTixnQkFBUSxLQUFLLE1BQU0sb0JBQW9CO0FBQ3pDO0FBQ0ssYUFBRSxNQUFNLElBQUksT0FBTyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxFQUFFO0FBQzVDLFdBQUssU0FBUyxHQUFHLEdBQUc7QUFDZixnQkFBSyxNQUFNLElBQUk7QUFDZDtBQUFBLEVBQ0MsZ0JBQUssU0FBUyxJQUFJLEdBQUc7QUFDdkIsZ0JBQUssTUFBTSxLQUFLLFVBQVUsR0FBRyxLQUFLLFNBQVMsQ0FBQyxDQUFDO0FBQzVDO0FBQUEsRUFDQyxnQkFBSyxTQUFTLElBQUksR0FBRztBQUN2QixnQkFBSyxNQUFNLEtBQUssVUFBVSxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUM7QUFDNUM7QUFBQTtBQUVILFdBQUUsT0FBTyxLQUFLO0FBQ3ZCO0FBRU8sTUFBTSx5QkFBbUQ7QUFBQSxFQUM5RCxZQUFvQixnQkFBd0I7QUFBeEI7QUFBQTtBQUFBLEVBRXBCLGdCQUFnQixNQUFtQixNQUFtQixNQUF1QixVQUEwQixJQUFZO0FBQ2pILFlBQVEsTUFBTTtBQUFBLE1BQ1osS0FBSztBQUNILFlBQUksUUFBUSxZQUFZO0FBQ2YsNEJBQVcsS0FBSyxNQUFNLElBQWMsQ0FBQyxnQkFBZ0IsS0FBSyxVQUFVLFFBQVEsT0FBTyxDQUFDO0FBQzdGLFlBQUksUUFBUSxlQUFlO0FBQ2xCLDRCQUFXLEtBQUssTUFBTSxJQUFjLENBQUMsbUJBQW1CLEtBQUssVUFBVSxRQUFRLFVBQVUsQ0FBQztBQUNuRyxlQUFPLFdBQVcsS0FBSyxNQUFNLElBQWMsQ0FBQztBQUFBLE1BQzlDLEtBQUs7QUFDSCxlQUFPLGdCQUFnQixLQUFLLE1BQU0sSUFBYyxDQUFDO0FBQUEsTUFDbkQsS0FBSztBQUNJO0FBQUEsTUFDVCxLQUFLO0FBQ0gsZUFBTyxPQUFPLElBQUk7QUFBQSxNQUNwQixLQUFLO0FBQ0k7QUFBQSxNQUNULEtBQUs7QUFDSTtBQUFBLE1BQ1QsS0FBSztBQUNILGVBQU8scUJBQXFCLFNBQVMsU0FBUyxTQUFTLE9BQU87QUFBQSxNQUNoRSxLQUFLO0FBQ0gsY0FBTSxRQUFrQixDQUFDO0FBQ3JCLHFCQUFTLFFBQVEsSUFBSSxHQUFHO0FBQzFCLGdCQUFNLEtBQUssU0FBUyxLQUFLLG9CQUFvQixRQUFRLElBQUksQ0FBQyxFQUFFO0FBQUEsUUFDbkQsa0JBQU8sUUFBUSxTQUFTLFVBQVU7QUFDM0MsZ0JBQU0sS0FBSyxTQUFTLEtBQUssTUFBTSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQzlDLGNBQUksUUFBUTtBQUNWLGtCQUFNLEtBQUssYUFBYTtBQUFBO0FBRTVCLG1CQUFXLEVBQUUsTUFBTSxNQUFNLEtBQUssUUFBUTtBQUNwQyxnQkFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLE9BQU8sVUFBVSxXQUFXLEtBQUssTUFBTSxLQUFLLElBQUksS0FBSyxFQUFFO0FBQzFFLDJCQUFhLE1BQU0sU0FBUyxPQUFPLE1BQU0sS0FBSyxJQUFJLENBQUMsT0FBTztBQUNoRSxlQUFPLGFBQWEsS0FBSyxNQUFNLElBQWMsQ0FBQyxHQUFHLFVBQVU7QUFBQSxNQUM3RCxLQUFLO0FBQ0gsZUFBTyxxQkFBcUIsS0FBSyxVQUFVLElBQUksQ0FBQztBQUFBLE1BQ2xELEtBQUs7QUFDSCxlQUFPLHdCQUF3QixLQUFLLFVBQVUsSUFBSSxDQUFDO0FBQUEsTUFDckQsS0FBSztBQUNILGVBQU8saUJBQWlCLElBQUk7QUFBQSxNQUM5QixLQUFLO0FBQ0gsZUFBTyxvQkFBb0IsSUFBSTtBQUFBLE1BQ2pDLEtBQUs7QUFDSCxlQUFPLE9BQU8sSUFBSTtBQUFBLE1BQ3BCLEtBQUs7QUFDSCxlQUFPLE1BQU0sSUFBSTtBQUFBLE1BQ25CLEtBQUs7QUFDSCxlQUFPLFdBQVcsSUFBSTtBQUFBLE1BQ3hCLEtBQUs7QUFDSCxlQUFPLGVBQWUsS0FBSyxjQUFjLElBQUksQ0FBQztBQUFBLE1BQ2hELEtBQUs7QUFDSCxlQUFPLEtBQUssZ0JBQWdCLGFBQWEsTUFBTSxDQUFDLENBQUMsUUFBUSxLQUFLO0FBQUEsTUFDaEUsS0FBSztBQUNILGVBQU8sS0FBSyxnQkFBZ0IsZ0JBQWdCLE1BQU0sQ0FBQyxDQUFDLFFBQVEsS0FBSztBQUFBLE1BQ25FLEtBQUs7QUFDSCxlQUFPLEtBQUssZ0JBQWdCLG9CQUFvQixNQUFNLENBQUMsQ0FBQyxRQUFRLEtBQUs7QUFBQSxNQUN2RSxLQUFLO0FBQ0gsZUFBTyxLQUFLLGdCQUFnQixjQUFjLE1BQU0sQ0FBQyxDQUFDLFFBQVEsS0FBSztBQUFBLE1BQ2pFLEtBQUs7QUFDSCxlQUFPLEtBQUssZ0JBQWdCLGNBQWMsTUFBTSxDQUFDLENBQUMsUUFBUSxLQUFLO0FBQUEsTUFDakU7QUFDUSxrQkFBSSxNQUFNLDJCQUEyQixJQUFJO0FBQUE7QUFBQSxFQUNuRDtBQUFBLEVBR0YsY0FBYyxVQUE0QjtBQUNqQyxvQkFBUyxLQUFLLEdBQUc7QUFBQTtBQUFBLEVBR2xCLG9CQUFvQixJQUFZO0FBQy9CLHVDQUE0QixPQUFPLEVBQUUsQ0FBQztBQUFBO0FBQUEsRUFHdkMsZ0JBQWdCLFFBQWdCLE1BQXVCLE9BQWlCO0FBQzlFLFFBQUksU0FBUyxJQUFJO0FBQ2YsYUFBTyxHQUFHLE1BQU0sSUFBSSxLQUFLLG9CQUFvQixJQUFJLENBQUM7QUFDcEQsV0FBTyxRQUFRLEdBQUcsTUFBTSxJQUFJLEtBQUssTUFBTSxJQUFJLENBQUMsdUJBQXVCLEdBQUcsTUFBTSxJQUFJLEtBQUssTUFBTSxJQUFJLENBQUM7QUFBQTtBQUFBLEVBRzFGLFVBQVUsTUFBdUI7QUFDdkMsUUFBSSxTQUFTLElBQUk7QUFDUixrQkFBSyxvQkFBb0IsSUFBSTtBQUMvQixnQkFBSyxNQUFNLElBQUk7QUFBQTtBQUFBLEVBR2hCLGNBQWMsT0FBZ0M7QUFDcEQsUUFBSSxTQUFTLEtBQUs7QUFDVCxrQkFBSyxvQkFBb0IsS0FBSztBQUNoQyxnQkFBSyxNQUFNLEtBQUs7QUFBQTtBQUFBLEVBR2pCLE1BQU0sTUFBYztBQUMxQixXQUFPLGlCQUFpQixNQUFNLEtBQUssa0JBQWtCLEdBQUk7QUFBQTtBQUU3RDtBQUVPLE1BQU0scUJBQStDO0FBQUEsRUFDMUQsZ0JBQWdCLE1BQW1CLE1BQW1CLE1BQXVCLFVBQTBCLElBQVk7QUFDakgsWUFBUSxNQUFNO0FBQUEsTUFDWixLQUFLO0FBQ0gsWUFBSSxRQUFRLFlBQVk7QUFDZiw0QkFBVyxLQUFLLE1BQU0sSUFBYyxDQUFDLGNBQWMsS0FBSyxVQUFVLFFBQVEsT0FBTyxDQUFDO0FBQzNGLFlBQUksUUFBUSxlQUFlO0FBQ2xCLDRCQUFXLEtBQUssTUFBTSxJQUFjLENBQUMsa0JBQWtCLEtBQUssVUFBVSxRQUFRLFVBQVUsQ0FBQztBQUNsRyxlQUFPLFdBQVcsS0FBSyxNQUFNLElBQWMsQ0FBQztBQUFBLE1BQzlDLEtBQUs7QUFDSCxlQUFPLGlCQUFpQixLQUFLLE1BQU0sSUFBYyxDQUFDO0FBQUEsTUFDcEQsS0FBSztBQUNJO0FBQUEsTUFDVCxLQUFLO0FBQ0gsZUFBTyxPQUFPLElBQUk7QUFBQSxNQUNwQixLQUFLO0FBQ0k7QUFBQSxNQUNULEtBQUs7QUFDSTtBQUFBLE1BQ1QsS0FBSztBQUNILGVBQU8sa0JBQWtCLFNBQVMsU0FBUyxTQUFTLE9BQU87QUFBQSxNQUM3RCxLQUFLO0FBQ0gsY0FBTSxRQUFrQixDQUFDO0FBQ3JCLHFCQUFTLFFBQVEsSUFBSSxHQUFHO0FBQzFCLGdCQUFNLEtBQUssUUFBUSxLQUFLLGNBQWMsUUFBUSxJQUFJLENBQUMsRUFBRTtBQUFBLFFBQzVDLGtCQUFPLFFBQVEsU0FBUyxVQUFVO0FBQzNDLGdCQUFNLEtBQUssUUFBUSxLQUFLLE1BQU0sUUFBUSxJQUFJLENBQUMsRUFBRTtBQUM3QyxjQUFJLFFBQVE7QUFDVixrQkFBTSxLQUFLLFlBQVk7QUFBQTtBQUUzQixtQkFBVyxFQUFFLE1BQU0sTUFBTSxLQUFLLFFBQVEsT0FBUTtBQUM1QyxjQUFJLGNBQWMsT0FBTyxVQUFVLFdBQVcsS0FBSyxNQUFNLEtBQUssSUFBSTtBQUNsRSxjQUFJLE9BQU8sVUFBVTtBQUNuQiwwQkFBYyxRQUFRLFNBQVM7QUFDakMsZ0JBQU0sS0FBSyxHQUFHLFlBQVksSUFBSSxDQUFDLElBQUksV0FBVyxFQUFFO0FBQUE7QUFFNUMsMkJBQWEsTUFBTSxTQUFTLEtBQUssTUFBTSxLQUFLLElBQUksQ0FBQyxLQUFLO0FBQzVELGVBQU8sZUFBZSxLQUFLLE1BQU0sSUFBYyxDQUFDLEdBQUcsVUFBVTtBQUFBLE1BQy9ELEtBQUs7QUFDSCxlQUFPLG1CQUFtQixLQUFLLFVBQVUsSUFBSSxDQUFDO0FBQUEsTUFDaEQsS0FBSztBQUNILGVBQU8sdUJBQXVCLEtBQUssVUFBVSxJQUFJLENBQUM7QUFBQSxNQUNwRCxLQUFLO0FBQ0gsZUFBTyxjQUFjLElBQUk7QUFBQSxNQUMzQixLQUFLO0FBQ0gsZUFBTyxrQkFBa0IsSUFBSTtBQUFBLE1BQy9CLEtBQUs7QUFDSCxlQUFPLFFBQVEsSUFBSTtBQUFBLE1BQ3JCLEtBQUs7QUFDSCxlQUFPLE9BQU8sSUFBSTtBQUFBLE1BQ3BCLEtBQUs7QUFDSCxlQUFPLFdBQVcsSUFBSTtBQUFBLE1BQ3hCLEtBQUs7QUFDSCxlQUFPLGtCQUFrQixLQUFLLGNBQWMsSUFBSSxDQUFDO0FBQUEsTUFDbkQsS0FBSztBQUNILGVBQU8sS0FBSyxnQkFBZ0IsZUFBZSxNQUFNLENBQUMsQ0FBQyxRQUFRLEtBQUs7QUFBQSxNQUNsRSxLQUFLO0FBQ0gsZUFBTyxLQUFLLGdCQUFnQixtQkFBbUIsTUFBTSxDQUFDLENBQUMsUUFBUSxLQUFLO0FBQUEsTUFDdEUsS0FBSztBQUNILGVBQU8sS0FBSyxnQkFBZ0Isc0JBQXNCLE1BQU0sQ0FBQyxDQUFDLFFBQVEsS0FBSztBQUFBLE1BQ3pFLEtBQUs7QUFDSCxlQUFPLEtBQUssZ0JBQWdCLGdCQUFnQixNQUFNLENBQUMsQ0FBQyxRQUFRLEtBQUs7QUFBQSxNQUNuRSxLQUFLO0FBQ0gsZUFBTyxLQUFLLGdCQUFnQixnQkFBZ0IsTUFBTSxDQUFDLENBQUMsUUFBUSxLQUFLO0FBQUEsTUFDbkU7QUFDUSxrQkFBSSxNQUFNLDJCQUEyQixJQUFJO0FBQUE7QUFBQSxFQUNuRDtBQUFBLEVBR0YsY0FBYyxVQUE0QjtBQUNqQyxvQkFBUyxLQUFLLEdBQUc7QUFBQTtBQUFBLEVBR2xCLGNBQWMsTUFBYztBQUNsQyxVQUFNLFNBQVMsS0FBSyxNQUFNLFNBQVMsR0FBRyxJQUFJLG9CQUFvQjtBQUM5RCxXQUFPLGdCQUFnQiw0QkFBNEIsS0FBSyxNQUFNLEVBQUUsUUFBUSxRQUFRLEdBQUcsRUFBRSxRQUFRLE1BQU0sS0FBSyxDQUFDLElBQUksTUFBTTtBQUFBO0FBQUEsRUFHN0csZ0JBQWdCLFFBQWdCLE1BQXVCLE9BQWdCO0FBQzdFLFFBQUksU0FBUyxJQUFJO0FBQ2YsYUFBTyxHQUFHLE1BQU0sSUFBSSxLQUFLLGNBQWMsSUFBSSxDQUFDO0FBQzFDO0FBQ0YsYUFBTyxHQUFHLE1BQU0sSUFBSSxLQUFLLE1BQU0sSUFBSSxDQUFDO0FBQ3RDLFdBQU8sR0FBRyxNQUFNLElBQUksS0FBSyxNQUFNLElBQUksQ0FBQztBQUFBO0FBQUEsRUFHOUIsVUFBVSxNQUF1QjtBQUN2QyxRQUFJLFNBQVMsSUFBSTtBQUNSLGtCQUFLLGNBQWMsSUFBSTtBQUNoQyxXQUFPLEdBQUcsS0FBSyxNQUFNLElBQUksQ0FBQztBQUFBO0FBQUEsRUFHcEIsY0FBYyxPQUF3QjtBQUM1QyxRQUFJLFNBQVMsS0FBSztBQUNULGtCQUFLLGNBQWMsS0FBSztBQUMxQixnQkFBSyxNQUFNLEtBQUs7QUFBQTtBQUFBLEVBR2pCLE1BQU0sTUFBYztBQUNuQiw0QkFBaUIsTUFBTSxHQUFJO0FBQUE7QUFFdEM7QUFFTyxNQUFNLG1CQUE2QztBQUFBLEVBQ3hELGdCQUFnQixNQUFtQixNQUFtQixNQUF1QixVQUEwQixJQUFZO0FBQzdHO0FBQ0osWUFBUSxNQUFNO0FBQUEsTUFDWixLQUFLO0FBQWdCO0FBQVE7QUFBQSxNQUM3QixLQUFLO0FBQXlCO0FBQWdCO0FBQUEsTUFDOUMsS0FBSztBQUFtQjtBQUFXO0FBQUE7QUFFckMsWUFBUSxNQUFNO0FBQUEsTUFDWixLQUFLO0FBQ0gsWUFBSSxRQUFRLFlBQVk7QUFDdEIsaUJBQU8sV0FBVyxLQUFLLE1BQU0sSUFBYyxDQUFDLFNBQVMsS0FBSyxnQ0FBZ0MsS0FBSyxVQUFVLFFBQVEsT0FBTyxDQUFDO0FBQzNILFlBQUksUUFBUSxlQUFlO0FBQ3pCLGlCQUFPLFdBQVcsS0FBSyxNQUFNLElBQWMsQ0FBQyxTQUFTLEtBQUssbUNBQW1DLEtBQUssVUFBVSxRQUFRLFVBQVUsQ0FBQztBQUNqSSxlQUFPLFdBQVcsS0FBSyxNQUFNLElBQWMsQ0FBQztBQUFBLE1BQzlDLEtBQUs7QUFDSCxlQUFPLGdCQUFnQixLQUFLLE1BQU0sSUFBYyxDQUFDO0FBQUEsTUFDbkQsS0FBSztBQUNJO0FBQUEsTUFDVCxLQUFLO0FBQ0gsZUFBTyxPQUFPLElBQUk7QUFBQSxNQUNwQixLQUFLO0FBQ0k7QUFBQSxNQUNULEtBQUs7QUFDSTtBQUFBLE1BQ1QsS0FBSztBQUNILGVBQU8sY0FBYyxLQUFLLCtCQUErQixTQUFTLFNBQVMsU0FBUyxPQUFPO0FBQUEsTUFDN0YsS0FBSztBQUNILGNBQU0sUUFBa0IsQ0FBQztBQUNyQixxQkFBUyxRQUFRLElBQUksR0FBRztBQUMxQixnQkFBTSxLQUFLLFlBQVksS0FBSyxjQUFjLFFBQVEsSUFBSSxDQUFDLEdBQUc7QUFBQSxRQUNqRCxrQkFBTyxRQUFRLFNBQVMsVUFBVTtBQUMzQyxnQkFBTSxLQUFLLFlBQVksS0FBSyxNQUFNLFFBQVEsSUFBSSxDQUFDLEdBQUc7QUFDbEQsY0FBSSxRQUFRO0FBQ1Ysa0JBQU0sS0FBSyxpQkFBaUI7QUFBQTtBQUVoQyxtQkFBVyxFQUFFLE1BQU0sTUFBTSxLQUFLLFFBQVE7QUFDcEMsZ0JBQU0sS0FBSyxPQUFPLFlBQVksSUFBSSxDQUFDLElBQUksT0FBTyxVQUFVLFdBQVcsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLEdBQUc7QUFDM0YsMkJBQWEsTUFBTSxTQUFTLFNBQVMsS0FBSyxzQkFBc0IsTUFBTSxLQUFLLEVBQUUsQ0FBQyxLQUFLO0FBQ3pGLGVBQU8sc0JBQXNCLFlBQVksSUFBYyxFQUFFLGFBQWEsR0FBRyxVQUFVO0FBQUEsTUFDckYsS0FBSztBQUNILGVBQU8sY0FBYyxLQUFLLCtCQUErQixLQUFLLFVBQVUsSUFBSSxDQUFDO0FBQUEsTUFDL0UsS0FBSztBQUNILGVBQU8sY0FBYyxLQUFLLGtDQUFrQyxLQUFLLFVBQVUsSUFBSSxDQUFDO0FBQUEsTUFDbEYsS0FBSztBQUNJLDZCQUFjLEtBQUssMkJBQTJCLElBQUk7QUFBQSxNQUMzRCxLQUFLO0FBQ0ksNkJBQWMsS0FBSyw4QkFBOEIsSUFBSTtBQUFBLE1BQzlELEtBQUs7QUFDSCxlQUFPLE9BQU8sSUFBSTtBQUFBLE1BQ3BCLEtBQUs7QUFDSCxlQUFPLE1BQU0sSUFBSTtBQUFBLE1BQ25CLEtBQUs7QUFDSCxlQUFPLFdBQVcsSUFBSTtBQUFBLE1BQ3hCLEtBQUs7QUFDSCxlQUFPLGVBQWUsS0FBSyxjQUFjLElBQUksQ0FBQztBQUFBLE1BQ2hELEtBQUs7QUFDSSxvQkFBSyxnQkFBZ0IsT0FBTyxhQUFhLE1BQU0sQ0FBQyxDQUFDLFFBQVEsS0FBSztBQUFBLE1BQ3ZFLEtBQUs7QUFDSSxvQkFBSyxnQkFBZ0IsT0FBTyxnQkFBZ0IsTUFBTSxDQUFDLENBQUMsUUFBUSxLQUFLO0FBQUEsTUFDMUUsS0FBSztBQUNJLG9CQUFLLGdCQUFnQixPQUFPLG9CQUFvQixNQUFNLENBQUMsQ0FBQyxRQUFRLEtBQUs7QUFBQSxNQUM5RSxLQUFLO0FBQ0ksb0JBQUssZ0JBQWdCLE9BQU8sY0FBYyxNQUFNLENBQUMsQ0FBQyxRQUFRLEtBQUs7QUFBQSxNQUN4RSxLQUFLO0FBQ0ksb0JBQUssZ0JBQWdCLE9BQU8sY0FBYyxNQUFNLENBQUMsQ0FBQyxRQUFRLEtBQUs7QUFBQSxNQUN4RTtBQUNRLGtCQUFJLE1BQU0sMkJBQTJCLElBQUk7QUFBQTtBQUFBLEVBQ25EO0FBQUEsRUFHRixjQUFjLFVBQTRCO0FBQ2pDLG9CQUFTLEtBQUssR0FBRztBQUFBO0FBQUEsRUFHbEIsY0FBYyxNQUFjO0FBQ2xDLFVBQU0sU0FBUyxLQUFLLE1BQU0sU0FBUyxHQUFHLElBQUksK0JBQStCO0FBQ2xFLDhCQUFtQixLQUFLLE1BQU0sNEJBQTRCLEtBQUssTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNO0FBQUE7QUFBQSxFQUdqRixnQkFBZ0IsT0FBZSxRQUFnQixNQUF1QixPQUFnQjtBQUM1RixRQUFJLFNBQVMsSUFBSTtBQUNmLGFBQU8sR0FBRyxNQUFNLElBQUksS0FBSyxjQUFjLElBQUksQ0FBQztBQUMxQztBQUNGLGFBQU8sR0FBRyxNQUFNLElBQUksS0FBSyxNQUFNLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxZQUFZLE1BQU0sQ0FBQztBQUMzRSxXQUFPLEdBQUcsTUFBTSxJQUFJLEtBQUssTUFBTSxJQUFJLENBQUM7QUFBQTtBQUFBLEVBRzlCLFVBQVUsTUFBdUI7QUFDdkMsUUFBSSxTQUFTLElBQUk7QUFDUixrQkFBSyxjQUFjLElBQUk7QUFDekIsZ0JBQUssTUFBTSxJQUFJO0FBQUE7QUFBQSxFQUdoQixjQUFjLE9BQXdCO0FBQzVDLFFBQUksU0FBUyxLQUFLO0FBQ1Qsa0JBQUssY0FBYyxLQUFLO0FBQzFCLGdCQUFLLE1BQU0sS0FBSztBQUFBO0FBQUEsRUFHakIsTUFBTSxNQUFjO0FBQ25CLDRCQUFpQixNQUFNLEdBQUk7QUFBQTtBQUV0QztBQUVPLE1BQU0scUJBQStDO0FBQUEsRUFDMUQsZ0JBQWdCLE1BQW1CLE1BQW1CLE1BQXVCLFVBQTBCLElBQVk7QUFDakgsWUFBUSxNQUFNO0FBQUEsTUFDWixLQUFLO0FBQ0gsWUFBSSxRQUFRLFlBQVk7QUFDZiw0QkFBVyxLQUFLLE1BQU0sSUFBYyxDQUFDLGFBQWEsS0FBSyxVQUFVLFFBQVEsT0FBTyxDQUFDO0FBQzFGLFlBQUksUUFBUSxlQUFlO0FBQ2xCLDRCQUFXLEtBQUssTUFBTSxJQUFjLENBQUMsYUFBYSxLQUFLLGFBQWEsUUFBUSxVQUFVLENBQUM7QUFDaEcsZUFBTyxXQUFXLEtBQUssTUFBTSxJQUFjLENBQUM7QUFBQSxNQUM5QyxLQUFLO0FBQ0gsZUFBTyxnQkFBZ0IsS0FBSyxNQUFNLElBQWMsQ0FBQztBQUFBLE1BQ25ELEtBQUs7QUFDSTtBQUFBLE1BQ1QsS0FBSztBQUNILGVBQU8sT0FBTyxJQUFJO0FBQUEsTUFDcEIsS0FBSztBQUNJO0FBQUEsTUFDVCxLQUFLO0FBQ0k7QUFBQSxNQUNULEtBQUs7QUFDSCxlQUFPLDRCQUE0QixTQUFTLFNBQVMsU0FBUyxPQUFPO0FBQUEsTUFDdkUsS0FBSztBQUNILGNBQU0sUUFBa0IsQ0FBQztBQUNyQixxQkFBUyxRQUFRLElBQUksR0FBRztBQUMxQixnQkFBTSxLQUFLLGVBQWUsS0FBSyxjQUFjLFFBQVEsSUFBSSxDQUFDLEVBQUU7QUFBQSxRQUNuRCxrQkFBTyxRQUFRLFNBQVMsVUFBVTtBQUMzQyxnQkFBTSxLQUFLLFVBQVUsS0FBSyxNQUFNLFFBQVEsSUFBSSxDQUFDLEVBQUU7QUFDL0MsY0FBSSxRQUFRO0FBQ1Ysa0JBQU0sS0FBSyxjQUFjO0FBQUE7QUFFN0IsbUJBQVcsRUFBRSxNQUFNLE1BQU0sS0FBSyxRQUFRO0FBQ3BDLGdCQUFNLEtBQUssR0FBRyxZQUFZLElBQUksQ0FBQyxNQUFNLE9BQU8sVUFBVSxXQUFXLEtBQUssTUFBTSxLQUFLLElBQUksS0FBSyxFQUFFO0FBQ3hGLDJCQUFhLE1BQU0sU0FBUyxhQUFhLE1BQU0sS0FBSyxJQUFJLENBQUMsT0FBTztBQUN0RSxlQUFPLHNCQUFzQixZQUFZLElBQWMsQ0FBQyxHQUFHLFVBQVU7QUFBQSxNQUN2RSxLQUFLO0FBQ0gsZUFBTyxrQkFBa0IsS0FBSyxVQUFVLElBQUksQ0FBQztBQUFBLE1BQy9DLEtBQUs7QUFDSCxlQUFPLGtCQUFrQixLQUFLLGFBQWEsSUFBSSxDQUFDO0FBQUEsTUFDbEQsS0FBSztBQUNILGVBQU8sd0JBQXdCLElBQUk7QUFBQSxNQUNyQyxLQUFLO0FBQ0gsZUFBTywyQkFBMkIsSUFBSTtBQUFBLE1BQ3hDLEtBQUs7QUFDSCxlQUFPLE9BQU8sSUFBSTtBQUFBLE1BQ3BCLEtBQUs7QUFDSCxlQUFPLE1BQU0sSUFBSTtBQUFBLE1BQ25CLEtBQUs7QUFDSCxlQUFPLFdBQVcsSUFBSTtBQUFBLE1BQ3hCLEtBQUs7QUFDSCxlQUFPLGVBQWUsS0FBSyxjQUFjLElBQUksQ0FBQztBQUFBLE1BQ2hELEtBQUs7QUFDSCxlQUFPLEtBQUssZ0JBQWdCLGFBQWEsTUFBTSxDQUFDLENBQUMsUUFBUSxLQUFLO0FBQUEsTUFDaEUsS0FBSztBQUNILGVBQU8sS0FBSyxnQkFBZ0IsZ0JBQWdCLE1BQU0sQ0FBQyxDQUFDLFFBQVEsS0FBSztBQUFBLE1BQ25FLEtBQUs7QUFDSCxlQUFPLEtBQUssZ0JBQWdCLG9CQUFvQixNQUFNLENBQUMsQ0FBQyxRQUFRLEtBQUs7QUFBQSxNQUN2RSxLQUFLO0FBQ0gsZUFBTyxLQUFLLGdCQUFnQixjQUFjLE1BQU0sQ0FBQyxDQUFDLFFBQVEsS0FBSztBQUFBLE1BQ2pFLEtBQUs7QUFDSCxlQUFPLEtBQUssZ0JBQWdCLGNBQWMsTUFBTSxDQUFDLENBQUMsUUFBUSxLQUFLO0FBQUEsTUFDakU7QUFDUSxrQkFBSSxNQUFNLDJCQUEyQixJQUFJO0FBQUE7QUFBQSxFQUNuRDtBQUFBLEVBR0YsY0FBYyxVQUE0QjtBQUNqQyxvQkFBUyxLQUFLLEdBQUc7QUFBQTtBQUFBLEVBR2xCLGNBQWMsTUFBc0I7QUFDMUMsVUFBTSxTQUFTLEtBQUssTUFBTSxTQUFTLEdBQUcsSUFBSSw4QkFBOEI7QUFDakUsd0JBQWEsS0FBSyxNQUFNLDRCQUE0QixLQUFLLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTTtBQUFBO0FBQUEsRUFHM0UsZ0JBQWdCLFFBQWdCLE1BQXVCLE9BQWdCO0FBQzdFLFFBQUksU0FBUyxJQUFJO0FBQ2YsYUFBTyxHQUFHLE1BQU0sSUFBSSxLQUFLLGNBQWMsSUFBSSxDQUFDO0FBQzFDO0FBQ0YsYUFBTyxHQUFHLE1BQU0sSUFBSSxLQUFLLE1BQU0sSUFBSSxDQUFDO0FBQ3RDLFdBQU8sR0FBRyxNQUFNLElBQUksS0FBSyxNQUFNLElBQUksQ0FBQztBQUFBO0FBQUEsRUFHOUIsVUFBVSxNQUF1QjtBQUN2QyxRQUFJLFNBQVMsSUFBSTtBQUNmLGFBQU8sa0JBQWtCLEtBQUssY0FBYyxJQUFJLENBQUM7QUFDbkQsV0FBTyxhQUFhLEtBQUssTUFBTSxJQUFJLENBQUM7QUFBQTtBQUFBLEVBRzlCLGNBQWMsT0FBd0I7QUFDNUMsUUFBSSxTQUFTLEtBQUs7QUFDVCxrQkFBSyxjQUFjLEtBQUs7QUFDMUIsZ0JBQUssTUFBTSxLQUFLO0FBQUE7QUFBQSxFQUdqQixhQUFhLE1BQXVCO0FBQzFDLFFBQUksU0FBUyxJQUFJO0FBQ2YsYUFBTyxxQkFBcUIsS0FBSyxjQUFjLElBQUksQ0FBQztBQUN0RCxXQUFPLGdCQUFnQixLQUFLLE1BQU0sSUFBSSxDQUFDO0FBQUE7QUFBQSxFQUdqQyxNQUFNLE1BQWM7QUFDbkIsNEJBQWlCLE1BQU0sR0FBSTtBQUFBO0FBRXRDO0FBRU8sTUFBTSxvQkFBOEM7QUFBQSxFQUN6RCxnQkFBZ0IsTUFBbUIsTUFBbUIsTUFBdUIsVUFBMEIsSUFBWTtBQUNqSCxXQUFPLEtBQUssVUFBVTtBQUFBLE1BQ3BCO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxLQUNEO0FBQUE7QUFBQSxFQUdILGNBQWMsVUFBNEI7QUFDeEMsVUFBTSxVQUFVLFNBQVMsSUFBSSxPQUFLLEtBQUssTUFBTSxDQUFDLENBQUM7QUFDL0MsYUFBUyxJQUFJLEdBQUcsSUFBSSxRQUFRLFNBQVMsR0FBRyxFQUFFO0FBQ3hDLGNBQVEsQ0FBQyxFQUFFLE9BQU8sUUFBUSxJQUFJLENBQUM7QUFDakMsV0FBTyxLQUFLLFVBQVUsUUFBUSxDQUFDLENBQUM7QUFBQTtBQUVwQztBQUVBLE1BQU0sYUFBK0U7QUFBQSxFQUNuRixZQUFZO0FBQUEsRUFDWixRQUFRO0FBQUEsRUFDUixNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixPQUFPO0FBQ1Q7QUFFQSxTQUFTLFNBQVMsS0FBeUI7QUFDekMsU0FBTyxlQUFlO0FBQ3hCO0FDaHJCTyxNQUFNLGNBQXNDLENBQUM7QUFBQSxFQUNsRDtBQUFBLEVBQ0E7QUFDRixNQUFNO0FBQ0UseUJBQWlCM0MsYUFBTSxPQUF1QixJQUFJO0FBQ2xELFNBQUMsaUJBQWlCLGtCQUFrQixJQUFJRCxzQkFBcUMsb0JBQUksS0FBSztBQUM1RkcsK0JBQXNCLE1BQU07O0FBQzFCLFFBQUksSUFBSSxLQUFLLENBQVcsb0JBQVEsTUFBTTtBQUNwQywyQkFBZSxZQUFmLG1CQUF3QixlQUFlLEVBQUUsT0FBTyxVQUFVLFFBQVE7RUFBVyxHQUM5RSxDQUFDLGdCQUFnQixHQUFHLENBQUM7QUFDakIsU0FBQUUsa0NBQUEsS0FBQyxTQUFJLFdBQVUsWUFBVyxPQUFPLEVBQUUsTUFBTSxPQUM3QztBQUFBLFFBQUksSUFBSSxDQUFXO0FBQ2xCLFlBQU0saUJBQWlCLGdCQUFnQixJQUFJLFFBQVEsRUFBRTtBQUNyRCxZQUFNLGFBQWEsT0FBTyxtQkFBbUIsWUFBWSxpQkFBaUIsUUFBUSxXQUFXO0FBQ3ZGLHNCQUFVLFFBQVEsT0FBTyxXQUFXLFVBQVUsVUFBVSxRQUFRLE9BQU8sUUFBUSxJQUFJO0FBQ3pGLFVBQUksY0FBYyxRQUFRO0FBQzFCLFVBQUksY0FBYztBQUNkLGtCQUFRLE1BQU0sV0FBVyxXQUFXLEtBQUssUUFBUSxNQUFNLFdBQVcsZUFBZSxHQUFHO0FBQ3hFO0FBQ2Qsc0JBQWMsS0FBSyxRQUFRLE1BQU0sVUFBVSxVQUFVLE1BQU0sQ0FBQztBQUFBLE1BQ25ELG1CQUFRLE1BQU0sV0FBVyxVQUFVLEdBQUc7QUFDakM7QUFDZCxzQkFBYyxJQUFJLFFBQVEsTUFBTSxVQUFVLFdBQVcsTUFBTSxDQUFDO0FBQUEsTUFDbkQsc0JBQVcsUUFBUSxPQUFPLEtBQUs7QUFDeEMsc0JBQWMsUUFBUSxRQUFRO0FBQ2hCO0FBQUE7QUFFaEIsb0RBQVEsT0FBSSxhQUFXLEtBQUssaUJBQWlCLFFBQVEsTUFBTSxHQUN6RDtBQUFBLFFBQUNBLHVDQUFBLFNBQUksV0FBVSx3QkFDYjtBQUFBLFVBQUFELGtDQUFBLElBQUMsVUFBSyxXQUFXLEtBQUssV0FBVyxtQkFBbUIsYUFBYSxTQUFTLE9BQU8sRUFBRSxHQUFHLE9BQU8sRUFBRSxRQUFRLFVBQVUsR0FBRSxTQUFTLE1BQU07QUFDMUgsaUNBQWUsSUFBSSxJQUFJLGVBQWU7QUFDNUMseUJBQWEsSUFBSSxRQUFRLElBQUksQ0FBQyxVQUFVO0FBQ3hDLCtCQUFtQixZQUFZO0FBQUEsYUFDOUI7QUFBQSxVQUNEO0FBQUEsVUFDQSxRQUFRLE9BQU8sNENBQU8sUUFBSyxhQUFVLG9CQUFtQixVQUFDQSxrQ0FBQSxjQUFLLFdBQVUsZ0JBQWUsT0FBTyxRQUFRLE9BQU8sS0FBTSxrQkFBUSxPQUFPLEtBQUksR0FBTyxJQUFVO0FBQUEsVUFDdkosVUFBV0Esa0NBQUEsY0FBSyxXQUFVLG9CQUFtQixnREFBQyxRQUFLLGFBQVUscUJBQW9CLE9BQU8sUUFBUSxPQUFPLElBQUssa0JBQVEsT0FBTyxJQUFHLEVBQU8sS0FBVTtBQUFBLFVBQy9JO0FBQUEsVUFDRkEsc0NBQUMsVUFBSyxXQUFXLEtBQUssV0FBVyxVQUFVLE9BQU8sQ0FBQyxHQUFHO0FBQUEsVUFDcEQsT0FBTyxRQUFRLGFBQWEsV0FBWUMsdUNBQUEsVUFBSyxXQUFVLGlCQUFnQjtBQUFBO0FBQUEsWUFBRyxXQUFXLFFBQVEsUUFBUTtBQUFBLGFBQUUsSUFBVTtBQUFBLFdBQ3JIO0FBQUEsU0FDRyxhQUFhLFFBQVEsV0FBVyxJQUFJLElBQUksQ0FBQyxTQUFTLE1BQU07QUFDekQsdURBQVEsT0FBSSxhQUFVLG9CQUNsQixVQUFRLGtCQURrQyxDQUU5QztBQUFBLFNBQ0Q7QUFBQSxRQUNDLENBQUMsQ0FBQyxRQUFRLFNBQVVELGtDQUFBLGFBQUksV0FBVSwwQkFBeUIsUUFBUSxDQUFDLFlBQWMsa0JBQVEsTUFBTztBQUFBLFdBbkJsQyxRQUFRLEVBb0IzRTtBQUFBLEtBQ0Q7QUFBQSxJQUNEQSxzQ0FBQyxPQUFJLE9BQUssZUFBZ0I7QUFBQSxLQUM1QjtBQUNGO0FBRUEsU0FBUyxVQUFVLFNBQTBCO0FBQzNDLFVBQVEsUUFBUSxRQUFRO0FBQUEsSUFDdEIsS0FBSztBQUFlO0FBQUEsSUFDcEIsS0FBSztBQUFzQjtBQUFBLElBQzNCLEtBQUs7QUFBaUI7QUFBQSxJQUN0QixLQUFLO0FBQWdCO0FBQUE7QUFFekI7QUN4RkEsTUFBTSxRQUFRLE9BQU8sSUFBSSxZQUFZO0FBQ3JDLE1BQU0sTUFBTSxPQUFPLElBQUksZUFBZTtBQUN0QyxNQUFNLE1BQU0sT0FBTyxJQUFJLFVBQVU7QUFDakMsTUFBTSxPQUFPLE9BQU8sSUFBSSxXQUFXO0FBQ25DLE1BQU15QyxXQUFTLE9BQU8sSUFBSSxhQUFhO0FBQ3ZDLE1BQU0sTUFBTSxPQUFPLElBQUksVUFBVTtBQUNqQyxNQUFNLFlBQVksT0FBTyxJQUFJLGdCQUFnQjtBQUM3QyxNQUFNLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLE9BQU8sU0FBUyxZQUFZLEtBQUssU0FBUyxNQUFNO0FBQ3BGLE1BQU0sYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsT0FBTyxTQUFTLFlBQVksS0FBSyxTQUFTLE1BQU07QUFDdkYsTUFBTSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxPQUFPLFNBQVMsWUFBWSxLQUFLLFNBQVMsTUFBTTtBQUNsRixNQUFNLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLE9BQU8sU0FBUyxZQUFZLEtBQUssU0FBUyxNQUFNO0FBQ25GLE1BQU1DLGFBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLE9BQU8sU0FBUyxZQUFZLEtBQUssU0FBUyxNQUFNRDtBQUNyRixNQUFNLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLE9BQU8sU0FBUyxZQUFZLEtBQUssU0FBUyxNQUFNO0FBQ2xGLFNBQVNFLGVBQWEsTUFBTTtBQUN4QixNQUFJLFFBQVEsT0FBTyxTQUFTO0FBQ3hCLFlBQVEsS0FBSyxTQUFTLEdBQUM7QUFBQSxNQUNuQixLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQ0QsZUFBTztBQUFBLElBQ3ZCO0FBQ0ksU0FBTztBQUNYO0FBQ0EsU0FBUyxPQUFPLE1BQU07QUFDbEIsTUFBSSxRQUFRLE9BQU8sU0FBUztBQUN4QixZQUFRLEtBQUssU0FBUyxHQUFDO0FBQUEsTUFDbkIsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBS0Y7QUFBQUEsTUFDTCxLQUFLO0FBQ0QsZUFBTztBQUFBLElBQ3ZCO0FBQ0ksU0FBTztBQUNYO0FBQ0EsTUFBTSxZQUFZLENBQUMsVUFBVUMsV0FBUyxJQUFJLEtBQUtDLGVBQWEsSUFBSSxNQUFNLENBQUMsQ0FBQyxLQUFLO0FDL0I3RSxNQUFNQyxVQUFRLE9BQU8sYUFBYTtBQUNsQyxNQUFNQyxTQUFPLE9BQU8sZUFBZTtBQUNuQyxNQUFNQyxXQUFTLE9BQU8sYUFBYTtBQStCbkMsU0FBU04sUUFBTSxNQUFNLFNBQVM7QUFDMUIsUUFBTSxXQUFXLFlBQVksT0FBTztBQUNwQyxNQUFJLFdBQVcsSUFBSSxHQUFHO0FBQ2xCLFVBQU0sS0FBSyxPQUFPLE1BQU0sS0FBSyxVQUFVLFVBQVUsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEUsUUFBSSxPQUFPTTtBQUNQLFdBQUssV0FBVztBQUFBLEVBQzVCO0FBRVEsV0FBTyxNQUFNLE1BQU0sVUFBVSxPQUFPLE9BQU8sRUFBRSxDQUFDO0FBQ3REO0FBS0FOLFFBQU0sUUFBUUk7QUFFZEosUUFBTSxPQUFPSztBQUViTCxRQUFNLFNBQVNNO0FBQ2YsU0FBUyxPQUFPLEtBQUssTUFBTSxTQUFTLE1BQU07QUFDdEMsUUFBTSxPQUFPLFlBQVksS0FBSyxNQUFNLFNBQVMsSUFBSTtBQUNqRCxNQUFJLE9BQU8sSUFBSSxLQUFLLE9BQU8sSUFBSSxHQUFHO0FBQzlCLGdCQUFZLEtBQUssTUFBTSxJQUFJO0FBQzNCLFdBQU8sT0FBTyxLQUFLLE1BQU0sU0FBUyxJQUFJO0FBQUEsRUFDOUM7QUFDSSxNQUFJLE9BQU8sU0FBUyxVQUFVO0FBQzFCLFFBQUlILGVBQWEsSUFBSSxHQUFHO0FBQ3BCLGFBQU8sT0FBTyxPQUFPLEtBQUssT0FBTyxJQUFJLENBQUM7QUFDdEMsZUFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLE1BQU0sUUFBUSxFQUFFLEdBQUc7QUFDeEMsY0FBTSxLQUFLLE9BQU8sR0FBRyxLQUFLLE1BQU0sQ0FBQyxHQUFHLFNBQVMsSUFBSTtBQUNqRCxZQUFJLE9BQU8sT0FBTztBQUNkLGNBQUksS0FBSztBQUFBLGlCQUNKLE9BQU9DO0FBQ1osaUJBQU9BO0FBQUFBLGlCQUNGLE9BQU9FLFVBQVE7QUFDcEIsZUFBSyxNQUFNLE9BQU8sR0FBRyxDQUFDO0FBQ3RCLGVBQUs7QUFBQSxRQUN6QjtBQUFBLE1BQ0E7QUFBQSxJQUNBLFdBQ2lCLE9BQU8sSUFBSSxHQUFHO0FBQ25CLGFBQU8sT0FBTyxPQUFPLEtBQUssT0FBTyxJQUFJLENBQUM7QUFDdEMsWUFBTSxLQUFLLE9BQU8sT0FBTyxLQUFLLEtBQUssU0FBUyxJQUFJO0FBQ2hELFVBQUksT0FBT0Y7QUFDUCxlQUFPQTtBQUFBQSxlQUNGLE9BQU9FO0FBQ1osYUFBSyxNQUFNO0FBQ2YsWUFBTSxLQUFLLE9BQU8sU0FBUyxLQUFLLE9BQU8sU0FBUyxJQUFJO0FBQ3BELFVBQUksT0FBT0Y7QUFDUCxlQUFPQTtBQUFBQSxlQUNGLE9BQU9FO0FBQ1osYUFBSyxRQUFRO0FBQUEsSUFDN0I7QUFBQSxFQUNBO0FBQ0ksU0FBTztBQUNYO0FBZ0NBLGVBQWUsV0FBVyxNQUFNLFNBQVM7QUFDckMsUUFBTSxXQUFXLFlBQVksT0FBTztBQUNwQyxNQUFJLFdBQVcsSUFBSSxHQUFHO0FBQ2xCLFVBQU0sS0FBSyxNQUFNLFlBQVksTUFBTSxLQUFLLFVBQVUsVUFBVSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqRixRQUFJLE9BQU9BO0FBQ1AsV0FBSyxXQUFXO0FBQUEsRUFDNUI7QUFFUSxVQUFNLFlBQVksTUFBTSxNQUFNLFVBQVUsT0FBTyxPQUFPLEVBQUUsQ0FBQztBQUNqRTtBQUtBLFdBQVcsUUFBUUY7QUFFbkIsV0FBVyxPQUFPQztBQUVsQixXQUFXLFNBQVNDO0FBQ3BCLGVBQWUsWUFBWSxLQUFLLE1BQU0sU0FBUyxNQUFNO0FBQ2pELFFBQU0sT0FBTyxNQUFNLFlBQVksS0FBSyxNQUFNLFNBQVMsSUFBSTtBQUN2RCxNQUFJLE9BQU8sSUFBSSxLQUFLLE9BQU8sSUFBSSxHQUFHO0FBQzlCLGdCQUFZLEtBQUssTUFBTSxJQUFJO0FBQzNCLFdBQU8sWUFBWSxLQUFLLE1BQU0sU0FBUyxJQUFJO0FBQUEsRUFDbkQ7QUFDSSxNQUFJLE9BQU8sU0FBUyxVQUFVO0FBQzFCLFFBQUlILGVBQWEsSUFBSSxHQUFHO0FBQ3BCLGFBQU8sT0FBTyxPQUFPLEtBQUssT0FBTyxJQUFJLENBQUM7QUFDdEMsZUFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLE1BQU0sUUFBUSxFQUFFLEdBQUc7QUFDeEMsY0FBTSxLQUFLLE1BQU0sWUFBWSxHQUFHLEtBQUssTUFBTSxDQUFDLEdBQUcsU0FBUyxJQUFJO0FBQzVELFlBQUksT0FBTyxPQUFPO0FBQ2QsY0FBSSxLQUFLO0FBQUEsaUJBQ0osT0FBT0M7QUFDWixpQkFBT0E7QUFBQUEsaUJBQ0YsT0FBT0UsVUFBUTtBQUNwQixlQUFLLE1BQU0sT0FBTyxHQUFHLENBQUM7QUFDdEIsZUFBSztBQUFBLFFBQ3pCO0FBQUEsTUFDQTtBQUFBLElBQ0EsV0FDaUIsT0FBTyxJQUFJLEdBQUc7QUFDbkIsYUFBTyxPQUFPLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQztBQUN0QyxZQUFNLEtBQUssTUFBTSxZQUFZLE9BQU8sS0FBSyxLQUFLLFNBQVMsSUFBSTtBQUMzRCxVQUFJLE9BQU9GO0FBQ1AsZUFBT0E7QUFBQUEsZUFDRixPQUFPRTtBQUNaLGFBQUssTUFBTTtBQUNmLFlBQU0sS0FBSyxNQUFNLFlBQVksU0FBUyxLQUFLLE9BQU8sU0FBUyxJQUFJO0FBQy9ELFVBQUksT0FBT0Y7QUFDUCxlQUFPQTtBQUFBQSxlQUNGLE9BQU9FO0FBQ1osYUFBSyxRQUFRO0FBQUEsSUFDN0I7QUFBQSxFQUNBO0FBQ0ksU0FBTztBQUNYO0FBQ0EsU0FBUyxZQUFZLFNBQVM7QUFDMUIsTUFBSSxPQUFPLFlBQVksYUFDbEIsUUFBUSxjQUFjLFFBQVEsUUFBUSxRQUFRLFFBQVE7QUFDdkQsV0FBTyxPQUFPLE9BQU87QUFBQSxNQUNqQixPQUFPLFFBQVE7QUFBQSxNQUNmLEtBQUssUUFBUTtBQUFBLE1BQ2IsUUFBUSxRQUFRO0FBQUEsTUFDaEIsS0FBSyxRQUFRO0FBQUEsSUFDekIsR0FBVyxRQUFRLFNBQVM7QUFBQSxNQUNoQixLQUFLLFFBQVE7QUFBQSxNQUNiLFFBQVEsUUFBUTtBQUFBLE1BQ2hCLEtBQUssUUFBUTtBQUFBLElBQ3pCLEdBQVcsUUFBUSxjQUFjO0FBQUEsTUFDckIsS0FBSyxRQUFRO0FBQUEsTUFDYixLQUFLLFFBQVE7QUFBQSxJQUNoQixHQUFFLE9BQU87QUFBQSxFQUNsQjtBQUNJLFNBQU87QUFDWDtBQUNBLFNBQVMsWUFBWSxLQUFLLE1BQU0sU0FBUyxNQUFNOztBQUMzQyxNQUFJLE9BQU8sWUFBWTtBQUNuQixXQUFPLFFBQVEsS0FBSyxNQUFNLElBQUk7QUFDbEMsTUFBSSxNQUFNLElBQUk7QUFDVixZQUFPLGFBQVEsUUFBUixpQ0FBYyxLQUFLLE1BQU07QUFDcEMsTUFBSSxNQUFNLElBQUk7QUFDVixZQUFPLGFBQVEsUUFBUixpQ0FBYyxLQUFLLE1BQU07QUFDcEMsTUFBSSxPQUFPLElBQUk7QUFDWCxZQUFPLGFBQVEsU0FBUixpQ0FBZSxLQUFLLE1BQU07QUFDckMsTUFBSUosV0FBUyxJQUFJO0FBQ2IsWUFBTyxhQUFRLFdBQVIsaUNBQWlCLEtBQUssTUFBTTtBQUN2QyxNQUFJLFFBQVEsSUFBSTtBQUNaLFlBQU8sYUFBUSxVQUFSLGlDQUFnQixLQUFLLE1BQU07QUFDdEMsU0FBTztBQUNYO0FBQ0EsU0FBUyxZQUFZLEtBQUssTUFBTSxNQUFNO0FBQ2xDLFFBQU0sU0FBUyxLQUFLLEtBQUssU0FBUyxDQUFDO0FBQ25DLE1BQUlDLGVBQWEsTUFBTSxHQUFHO0FBQ3RCLFdBQU8sTUFBTSxHQUFHLElBQUk7QUFBQSxFQUM1QixXQUNhLE9BQU8sTUFBTSxHQUFHO0FBQ3JCLFFBQUksUUFBUTtBQUNSLGFBQU8sTUFBTTtBQUFBO0FBRWIsYUFBTyxRQUFRO0FBQUEsRUFDM0IsV0FDYSxXQUFXLE1BQU0sR0FBRztBQUN6QixXQUFPLFdBQVc7QUFBQSxFQUMxQixPQUNTO0FBQ0QsVUFBTSxLQUFLLFFBQVEsTUFBTSxJQUFJLFVBQVU7QUFDdkMsVUFBTSxJQUFJLE1BQU0sNEJBQTRCLEVBQUUsU0FBUztBQUFBLEVBQy9EO0FBQ0E7QUNuT0EsTUFBTSxjQUFjO0FBQUEsRUFDaEIsS0FBSztBQUFBLEVBQ0wsS0FBSztBQUFBLEVBQ0wsS0FBSztBQUFBLEVBQ0wsS0FBSztBQUFBLEVBQ0wsS0FBSztBQUFBLEVBQ0wsS0FBSztBQUNUO0FBQ0EsTUFBTSxnQkFBZ0IsQ0FBQyxPQUFPLEdBQUcsUUFBUSxjQUFjLFFBQU0sWUFBWSxFQUFFLENBQUM7QUFDNUUsTUFBTSxXQUFXO0FBQUEsRUFDYixZQUFZLE1BQU0sTUFBTTtBQUtwQixTQUFLLFdBQVc7QUFFaEIsU0FBSyxTQUFTO0FBQ2QsU0FBSyxPQUFPLE9BQU8sT0FBTyxJQUFJLFdBQVcsYUFBYSxJQUFJO0FBQzFELFNBQUssT0FBTyxPQUFPLE9BQU8sSUFBSSxXQUFXLGFBQWEsSUFBSTtBQUFBLEVBQ2xFO0FBQUEsRUFDSSxRQUFRO0FBQ0osVUFBTUksUUFBTyxJQUFJLFdBQVcsS0FBSyxNQUFNLEtBQUssSUFBSTtBQUNoRCxJQUFBQSxNQUFLLFdBQVcsS0FBSztBQUNyQixXQUFPQTtBQUFBLEVBQ2Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0ksYUFBYTtBQUNULFVBQU0sTUFBTSxJQUFJLFdBQVcsS0FBSyxNQUFNLEtBQUssSUFBSTtBQUMvQyxZQUFRLEtBQUssS0FBSyxTQUFPO0FBQUEsTUFDckIsS0FBSztBQUNELGFBQUssaUJBQWlCO0FBQ3RCO0FBQUEsTUFDSixLQUFLO0FBQ0QsYUFBSyxpQkFBaUI7QUFDdEIsYUFBSyxPQUFPO0FBQUEsVUFDUixVQUFVLFdBQVcsWUFBWTtBQUFBLFVBQ2pDLFNBQVM7QUFBQSxRQUNaO0FBQ0QsYUFBSyxPQUFPLE9BQU8sT0FBTyxDQUFFLEdBQUUsV0FBVyxXQUFXO0FBQ3BEO0FBQUEsSUFDaEI7QUFDUSxXQUFPO0FBQUEsRUFDZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLSSxJQUFJLE1BQU0sU0FBUztBQUNmLFFBQUksS0FBSyxnQkFBZ0I7QUFDckIsV0FBSyxPQUFPLEVBQUUsVUFBVSxXQUFXLFlBQVksVUFBVSxTQUFTLE1BQU87QUFDekUsV0FBSyxPQUFPLE9BQU8sT0FBTyxDQUFFLEdBQUUsV0FBVyxXQUFXO0FBQ3BELFdBQUssaUJBQWlCO0FBQUEsSUFDbEM7QUFDUSxVQUFNLFFBQVEsS0FBSyxLQUFJLEVBQUcsTUFBTSxRQUFRO0FBQ3hDLFVBQU0sT0FBTyxNQUFNLE1BQU87QUFDMUIsWUFBUSxNQUFJO0FBQUEsTUFDUixLQUFLLFFBQVE7QUFDVCxZQUFJLE1BQU0sV0FBVyxHQUFHO0FBQ3BCLGtCQUFRLEdBQUcsaURBQWlEO0FBQzVELGNBQUksTUFBTSxTQUFTO0FBQ2YsbUJBQU87QUFBQSxRQUMvQjtBQUNnQixjQUFNLENBQUMsUUFBUSxNQUFNLElBQUk7QUFDekIsYUFBSyxLQUFLLE1BQU0sSUFBSTtBQUNwQixlQUFPO0FBQUEsTUFDdkI7QUFBQSxNQUNZLEtBQUssU0FBUztBQUNWLGFBQUssS0FBSyxXQUFXO0FBQ3JCLFlBQUksTUFBTSxXQUFXLEdBQUc7QUFDcEIsa0JBQVEsR0FBRyxpREFBaUQ7QUFDNUQsaUJBQU87QUFBQSxRQUMzQjtBQUNnQixjQUFNLENBQUMsT0FBTyxJQUFJO0FBQ2xCLFlBQUksWUFBWSxTQUFTLFlBQVksT0FBTztBQUN4QyxlQUFLLEtBQUssVUFBVTtBQUNwQixpQkFBTztBQUFBLFFBQzNCLE9BQ3FCO0FBQ0QsZ0JBQU0sVUFBVSxhQUFhLEtBQUssT0FBTztBQUN6QyxrQkFBUSxHQUFHLDRCQUE0QixPQUFPLElBQUksT0FBTztBQUN6RCxpQkFBTztBQUFBLFFBQzNCO0FBQUEsTUFDQTtBQUFBLE1BQ1k7QUFDSSxnQkFBUSxHQUFHLHFCQUFxQixJQUFJLElBQUksSUFBSTtBQUM1QyxlQUFPO0FBQUEsSUFDdkI7QUFBQSxFQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPSSxRQUFRLFFBQVEsU0FBUztBQUNyQixRQUFJLFdBQVc7QUFDWCxhQUFPO0FBQ1gsUUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLO0FBQ25CLGNBQVEsb0JBQW9CLE1BQU0sRUFBRTtBQUNwQyxhQUFPO0FBQUEsSUFDbkI7QUFDUSxRQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUs7QUFDbkIsWUFBTSxXQUFXLE9BQU8sTUFBTSxHQUFHLEVBQUU7QUFDbkMsVUFBSSxhQUFhLE9BQU8sYUFBYSxNQUFNO0FBQ3ZDLGdCQUFRLHFDQUFxQyxNQUFNLGNBQWM7QUFDakUsZUFBTztBQUFBLE1BQ3ZCO0FBQ1ksVUFBSSxPQUFPLE9BQU8sU0FBUyxDQUFDLE1BQU07QUFDOUIsZ0JBQVEsaUNBQWlDO0FBQzdDLGFBQU87QUFBQSxJQUNuQjtBQUNRLFVBQU0sR0FBRyxRQUFRLE1BQU0sSUFBSSxPQUFPLE1BQU0saUJBQWlCO0FBQ3pELFFBQUksQ0FBQztBQUNELGNBQVEsT0FBTyxNQUFNLG9CQUFvQjtBQUM3QyxVQUFNLFNBQVMsS0FBSyxLQUFLLE1BQU07QUFDL0IsUUFBSSxRQUFRO0FBQ1IsVUFBSTtBQUNBLGVBQU8sU0FBUyxtQkFBbUIsTUFBTTtBQUFBLE1BQ3pELFNBQ21CLE9BQU87QUFDVixnQkFBUSxPQUFPLEtBQUssQ0FBQztBQUNyQixlQUFPO0FBQUEsTUFDdkI7QUFBQSxJQUNBO0FBQ1EsUUFBSSxXQUFXO0FBQ1gsYUFBTztBQUNYLFlBQVEsMEJBQTBCLE1BQU0sRUFBRTtBQUMxQyxXQUFPO0FBQUEsRUFDZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLSSxVQUFVLEtBQUs7QUFDWCxlQUFXLENBQUMsUUFBUSxNQUFNLEtBQUssT0FBTyxRQUFRLEtBQUssSUFBSSxHQUFHO0FBQ3RELFVBQUksSUFBSSxXQUFXLE1BQU07QUFDckIsZUFBTyxTQUFTLGNBQWMsSUFBSSxVQUFVLE9BQU8sTUFBTSxDQUFDO0FBQUEsSUFDMUU7QUFDUSxXQUFPLElBQUksQ0FBQyxNQUFNLE1BQU0sTUFBTSxLQUFLLEdBQUc7QUFBQSxFQUM5QztBQUFBLEVBQ0ksU0FBUyxLQUFLO0FBQ1YsVUFBTSxRQUFRLEtBQUssS0FBSyxXQUNsQixDQUFDLFNBQVMsS0FBSyxLQUFLLFdBQVcsS0FBSyxFQUFFLElBQ3RDLENBQUU7QUFDUixVQUFNLGFBQWEsT0FBTyxRQUFRLEtBQUssSUFBSTtBQUMzQyxRQUFJO0FBQ0osUUFBSSxPQUFPLFdBQVcsU0FBUyxLQUFLLE9BQU8sSUFBSSxRQUFRLEdBQUc7QUFDdEQsWUFBTSxPQUFPLENBQUU7QUFDZlAsY0FBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLFNBQVM7QUFDaEMsWUFBSSxPQUFPLElBQUksS0FBSyxLQUFLO0FBQ3JCLGVBQUssS0FBSyxHQUFHLElBQUk7QUFBQSxNQUNyQyxDQUFhO0FBQ0QsaUJBQVcsT0FBTyxLQUFLLElBQUk7QUFBQSxJQUN2QztBQUVZLGlCQUFXLENBQUU7QUFDakIsZUFBVyxDQUFDLFFBQVEsTUFBTSxLQUFLLFlBQVk7QUFDdkMsVUFBSSxXQUFXLFFBQVEsV0FBVztBQUM5QjtBQUNKLFVBQUksQ0FBQyxPQUFPLFNBQVMsS0FBSyxRQUFNLEdBQUcsV0FBVyxNQUFNLENBQUM7QUFDakQsY0FBTSxLQUFLLFFBQVEsTUFBTSxJQUFJLE1BQU0sRUFBRTtBQUFBLElBQ3JEO0FBQ1EsV0FBTyxNQUFNLEtBQUssSUFBSTtBQUFBLEVBQzlCO0FBQ0E7QUFDQSxXQUFXLGNBQWMsRUFBRSxVQUFVLE9BQU8sU0FBUyxNQUFPO0FBQzVELFdBQVcsY0FBYyxFQUFFLE1BQU0scUJBQXNCO0FDckt2RCxTQUFTLGNBQWMsUUFBUTtBQUMzQixNQUFJLHNCQUFzQixLQUFLLE1BQU0sR0FBRztBQUNwQyxVQUFNLEtBQUssS0FBSyxVQUFVLE1BQU07QUFDaEMsVUFBTSxNQUFNLDZEQUE2RCxFQUFFO0FBQzNFLFVBQU0sSUFBSSxNQUFNLEdBQUc7QUFBQSxFQUMzQjtBQUNJLFNBQU87QUFDWDtBQUNBLFNBQVMsWUFBWSxNQUFNO0FBQ3ZCLFFBQU0sVUFBVSxvQkFBSSxJQUFLO0FBQ3pCQSxVQUFNLE1BQU07QUFBQSxJQUNSLE1BQU0sTUFBTSxNQUFNO0FBQ2QsVUFBSSxLQUFLO0FBQ0wsZ0JBQVEsSUFBSSxLQUFLLE1BQU07QUFBQSxJQUN2QztBQUFBLEVBQ0EsQ0FBSztBQUNELFNBQU87QUFDWDtBQUVBLFNBQVMsY0FBYyxRQUFRLFNBQVM7QUFDcEMsV0FBUyxJQUFJLEdBQUcsTUFBTSxFQUFFLEdBQUc7QUFDdkIsVUFBTSxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUM7QUFDMUIsUUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJO0FBQ2pCLGFBQU87QUFBQSxFQUNuQjtBQUNBO0FBQ0EsU0FBUyxrQkFBa0IsS0FBSyxRQUFRO0FBQ3BDLFFBQU0sZUFBZSxDQUFFO0FBQ3ZCLFFBQU0sZ0JBQWdCLG9CQUFJLElBQUs7QUFDL0IsTUFBSSxjQUFjO0FBQ2xCLFNBQU87QUFBQSxJQUNILFVBQVUsQ0FBQyxXQUFXO0FBQ2xCLG1CQUFhLEtBQUssTUFBTTtBQUN4QixVQUFJLENBQUM7QUFDRCxzQkFBYyxZQUFZLEdBQUc7QUFDakMsWUFBTSxTQUFTLGNBQWMsUUFBUSxXQUFXO0FBQ2hELGtCQUFZLElBQUksTUFBTTtBQUN0QixhQUFPO0FBQUEsSUFDVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1ELFlBQVksTUFBTTtBQUNkLGlCQUFXLFVBQVUsY0FBYztBQUMvQixjQUFNLE1BQU0sY0FBYyxJQUFJLE1BQU07QUFDcEMsWUFBSSxPQUFPLFFBQVEsWUFDZixJQUFJLFdBQ0hFLFdBQVMsSUFBSSxJQUFJLEtBQUtDLGVBQWEsSUFBSSxJQUFJLElBQUk7QUFDaEQsY0FBSSxLQUFLLFNBQVMsSUFBSTtBQUFBLFFBQzFDLE9BQ3FCO0FBQ0QsZ0JBQU0sUUFBUSxJQUFJLE1BQU0sNERBQTREO0FBQ3BGLGdCQUFNLFNBQVM7QUFDZixnQkFBTTtBQUFBLFFBQzFCO0FBQUEsTUFDQTtBQUFBLElBQ1M7QUFBQSxJQUNEO0FBQUEsRUFDSDtBQUNMO0FDOURBLFNBQVMsYUFBYSxTQUFTLEtBQUssS0FBSyxLQUFLO0FBQzFDLE1BQUksT0FBTyxPQUFPLFFBQVEsVUFBVTtBQUNoQyxRQUFJLE1BQU0sUUFBUSxHQUFHLEdBQUc7QUFDcEIsZUFBUyxJQUFJLEdBQUcsTUFBTSxJQUFJLFFBQVEsSUFBSSxLQUFLLEVBQUUsR0FBRztBQUM1QyxjQUFNLEtBQUssSUFBSSxDQUFDO0FBQ2hCLGNBQU0sS0FBSyxhQUFhLFNBQVMsS0FBSyxPQUFPLENBQUMsR0FBRyxFQUFFO0FBRW5ELFlBQUksT0FBTztBQUNQLGlCQUFPLElBQUksQ0FBQztBQUFBLGlCQUNQLE9BQU87QUFDWixjQUFJLENBQUMsSUFBSTtBQUFBLE1BQzdCO0FBQUEsSUFDQSxXQUNpQixlQUFlLEtBQUs7QUFDekIsaUJBQVcsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFJLENBQUUsR0FBRztBQUNwQyxjQUFNLEtBQUssSUFBSSxJQUFJLENBQUM7QUFDcEIsY0FBTSxLQUFLLGFBQWEsU0FBUyxLQUFLLEdBQUcsRUFBRTtBQUMzQyxZQUFJLE9BQU87QUFDUCxjQUFJLE9BQU8sQ0FBQztBQUFBLGlCQUNQLE9BQU87QUFDWixjQUFJLElBQUksR0FBRyxFQUFFO0FBQUEsTUFDakM7QUFBQSxJQUNBLFdBQ2lCLGVBQWUsS0FBSztBQUN6QixpQkFBVyxNQUFNLE1BQU0sS0FBSyxHQUFHLEdBQUc7QUFDOUIsY0FBTSxLQUFLLGFBQWEsU0FBUyxLQUFLLElBQUksRUFBRTtBQUM1QyxZQUFJLE9BQU87QUFDUCxjQUFJLE9BQU8sRUFBRTtBQUFBLGlCQUNSLE9BQU8sSUFBSTtBQUNoQixjQUFJLE9BQU8sRUFBRTtBQUNiLGNBQUksSUFBSSxFQUFFO0FBQUEsUUFDOUI7QUFBQSxNQUNBO0FBQUEsSUFDQSxPQUNhO0FBQ0QsaUJBQVcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxPQUFPLFFBQVEsR0FBRyxHQUFHO0FBQ3ZDLGNBQU0sS0FBSyxhQUFhLFNBQVMsS0FBSyxHQUFHLEVBQUU7QUFDM0MsWUFBSSxPQUFPO0FBQ1AsaUJBQU8sSUFBSSxDQUFDO0FBQUEsaUJBQ1AsT0FBTztBQUNaLGNBQUksQ0FBQyxJQUFJO0FBQUEsTUFDN0I7QUFBQSxJQUNBO0FBQUEsRUFDQTtBQUNJLFNBQU8sUUFBUSxLQUFLLEtBQUssS0FBSyxHQUFHO0FBQ3JDO0FDeENBLFNBQVMsS0FBSyxPQUFPLEtBQUssS0FBSztBQUUzQixNQUFJLE1BQU0sUUFBUSxLQUFLO0FBQ25CLFdBQU8sTUFBTSxJQUFJLENBQUMsR0FBRyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDdEQsTUFBSSxTQUFTLE9BQU8sTUFBTSxXQUFXLFlBQVk7QUFFN0MsUUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUs7QUFDeEIsYUFBTyxNQUFNLE9BQU8sS0FBSyxHQUFHO0FBQ2hDLFVBQU0sT0FBTyxFQUFFLFlBQVksR0FBRyxPQUFPLEdBQUcsS0FBSyxPQUFXO0FBQ3hELFFBQUksUUFBUSxJQUFJLE9BQU8sSUFBSTtBQUMzQixRQUFJLFdBQVcsQ0FBQUssU0FBTztBQUNsQixXQUFLLE1BQU1BO0FBQ1gsYUFBTyxJQUFJO0FBQUEsSUFDZDtBQUNELFVBQU0sTUFBTSxNQUFNLE9BQU8sS0FBSyxHQUFHO0FBQ2pDLFFBQUksSUFBSTtBQUNKLFVBQUksU0FBUyxHQUFHO0FBQ3BCLFdBQU87QUFBQSxFQUNmO0FBQ0ksTUFBSSxPQUFPLFVBQVUsWUFBWSxFQUFDLDJCQUFLO0FBQ25DLFdBQU8sT0FBTyxLQUFLO0FBQ3ZCLFNBQU87QUFDWDtBQzlCQSxNQUFNLFNBQVM7QUFBQSxFQUNYLFlBQVksTUFBTTtBQUNkLFdBQU8sZUFBZSxNQUFNLFdBQVcsRUFBRSxPQUFPLE1BQU07QUFBQSxFQUM5RDtBQUFBO0FBQUEsRUFFSSxRQUFRO0FBQ0osVUFBTUQsUUFBTyxPQUFPLE9BQU8sT0FBTyxlQUFlLElBQUksR0FBRyxPQUFPLDBCQUEwQixJQUFJLENBQUM7QUFDOUYsUUFBSSxLQUFLO0FBQ0wsTUFBQUEsTUFBSyxRQUFRLEtBQUssTUFBTSxNQUFPO0FBQ25DLFdBQU9BO0FBQUEsRUFDZjtBQUFBO0FBQUEsRUFFSSxLQUFLLEtBQUssRUFBRSxVQUFVLGVBQWUsVUFBVSxRQUFTLElBQUcsSUFBSTtBQUMzRCxRQUFJLENBQUMsV0FBVyxHQUFHO0FBQ2YsWUFBTSxJQUFJLFVBQVUsaUNBQWlDO0FBQ3pELFVBQU0sTUFBTTtBQUFBLE1BQ1IsU0FBUyxvQkFBSSxJQUFLO0FBQUEsTUFDbEI7QUFBQSxNQUNBLE1BQU07QUFBQSxNQUNOLFVBQVUsYUFBYTtBQUFBLE1BQ3ZCLGNBQWM7QUFBQSxNQUNkLGVBQWUsT0FBTyxrQkFBa0IsV0FBVyxnQkFBZ0I7QUFBQSxJQUN0RTtBQUNELFVBQU0sTUFBTSxLQUFLLE1BQU0sSUFBSSxHQUFHO0FBQzlCLFFBQUksT0FBTyxhQUFhO0FBQ3BCLGlCQUFXLEVBQUUsT0FBTyxLQUFBQyxLQUFLLEtBQUksSUFBSSxRQUFRLE9BQVE7QUFDN0MsaUJBQVNBLE1BQUssS0FBSztBQUMzQixXQUFPLE9BQU8sWUFBWSxhQUNwQixhQUFhLFNBQVMsRUFBRSxJQUFJLElBQUssR0FBRSxJQUFJLEdBQUcsSUFDMUM7QUFBQSxFQUNkO0FBQ0E7QUM3QkEsTUFBTSxjQUFjLFNBQVM7QUFBQSxFQUN6QixZQUFZLFFBQVE7QUFDaEIsVUFBTSxLQUFLO0FBQ1gsU0FBSyxTQUFTO0FBQ2QsV0FBTyxlQUFlLE1BQU0sT0FBTztBQUFBLE1BQy9CLE1BQU07QUFDRixjQUFNLElBQUksTUFBTSw4QkFBOEI7QUFBQSxNQUM5RDtBQUFBLElBQ0EsQ0FBUztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0ksUUFBUSxLQUFLO0FBQ1QsUUFBSSxRQUFRO0FBQ1pSLFlBQU0sS0FBSztBQUFBLE1BQ1AsTUFBTSxDQUFDLE1BQU0sU0FBUztBQUNsQixZQUFJLFNBQVM7QUFDVCxpQkFBT0EsUUFBTTtBQUNqQixZQUFJLEtBQUssV0FBVyxLQUFLO0FBQ3JCLGtCQUFRO0FBQUEsTUFDNUI7QUFBQSxJQUNBLENBQVM7QUFDRCxXQUFPO0FBQUEsRUFDZjtBQUFBLEVBQ0ksT0FBTyxNQUFNLEtBQUs7QUFDZCxRQUFJLENBQUM7QUFDRCxhQUFPLEVBQUUsUUFBUSxLQUFLLE9BQVE7QUFDbEMsVUFBTSxFQUFFLFNBQVMsS0FBSyxjQUFlLElBQUc7QUFDeEMsVUFBTSxTQUFTLEtBQUssUUFBUSxHQUFHO0FBQy9CLFFBQUksQ0FBQyxRQUFRO0FBQ1QsWUFBTSxNQUFNLCtEQUErRCxLQUFLLE1BQU07QUFDdEYsWUFBTSxJQUFJLGVBQWUsR0FBRztBQUFBLElBQ3hDO0FBQ1EsUUFBSSxPQUFPLFFBQVEsSUFBSSxNQUFNO0FBQzdCLFFBQUksQ0FBQyxNQUFNO0FBRVAsV0FBSyxRQUFRLE1BQU0sR0FBRztBQUN0QixhQUFPLFFBQVEsSUFBSSxNQUFNO0FBQUEsSUFDckM7QUFFUSxRQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsUUFBVztBQUNqQyxZQUFNLE1BQU07QUFDWixZQUFNLElBQUksZUFBZSxHQUFHO0FBQUEsSUFDeEM7QUFDUSxRQUFJLGlCQUFpQixHQUFHO0FBQ3BCLFdBQUssU0FBUztBQUNkLFVBQUksS0FBSyxlQUFlO0FBQ3BCLGFBQUssYUFBYSxjQUFjLEtBQUssUUFBUSxPQUFPO0FBQ3hELFVBQUksS0FBSyxRQUFRLEtBQUssYUFBYSxlQUFlO0FBQzlDLGNBQU0sTUFBTTtBQUNaLGNBQU0sSUFBSSxlQUFlLEdBQUc7QUFBQSxNQUM1QztBQUFBLElBQ0E7QUFDUSxXQUFPLEtBQUs7QUFBQSxFQUNwQjtBQUFBLEVBQ0ksU0FBUyxLQUFLLFlBQVksY0FBYztBQUNwQyxVQUFNLE1BQU0sSUFBSSxLQUFLLE1BQU07QUFDM0IsUUFBSSxLQUFLO0FBQ0wsb0JBQWMsS0FBSyxNQUFNO0FBQ3pCLFVBQUksSUFBSSxRQUFRLG9CQUFvQixDQUFDLElBQUksUUFBUSxJQUFJLEtBQUssTUFBTSxHQUFHO0FBQy9ELGNBQU0sTUFBTSwrREFBK0QsS0FBSyxNQUFNO0FBQ3RGLGNBQU0sSUFBSSxNQUFNLEdBQUc7QUFBQSxNQUNuQztBQUNZLFVBQUksSUFBSTtBQUNKLGVBQU8sR0FBRyxHQUFHO0FBQUEsSUFDN0I7QUFDUSxXQUFPO0FBQUEsRUFDZjtBQUNBO0FBQ0EsU0FBUyxjQUFjLEtBQUssTUFBTSxTQUFTO0FBQ3ZDLE1BQUksUUFBUSxJQUFJLEdBQUc7QUFDZixVQUFNLFNBQVMsS0FBSyxRQUFRLEdBQUc7QUFDL0IsVUFBTSxTQUFTLFdBQVcsVUFBVSxRQUFRLElBQUksTUFBTTtBQUN0RCxXQUFPLFNBQVMsT0FBTyxRQUFRLE9BQU8sYUFBYTtBQUFBLEVBQzNELFdBQ2FHLGVBQWEsSUFBSSxHQUFHO0FBQ3pCLFFBQUksUUFBUTtBQUNaLGVBQVcsUUFBUSxLQUFLLE9BQU87QUFDM0IsWUFBTSxJQUFJLGNBQWMsS0FBSyxNQUFNLE9BQU87QUFDMUMsVUFBSSxJQUFJO0FBQ0osZ0JBQVE7QUFBQSxJQUN4QjtBQUNRLFdBQU87QUFBQSxFQUNmLFdBQ2EsT0FBTyxJQUFJLEdBQUc7QUFDbkIsVUFBTSxLQUFLLGNBQWMsS0FBSyxLQUFLLEtBQUssT0FBTztBQUMvQyxVQUFNLEtBQUssY0FBYyxLQUFLLEtBQUssT0FBTyxPQUFPO0FBQ2pELFdBQU8sS0FBSyxJQUFJLElBQUksRUFBRTtBQUFBLEVBQzlCO0FBQ0ksU0FBTztBQUNYO0FDOUZBLE1BQU0sZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFNBQVUsT0FBTyxVQUFVLGNBQWMsT0FBTyxVQUFVO0FBQzVGLE1BQU0sZUFBZSxTQUFTO0FBQUEsRUFDMUIsWUFBWSxPQUFPO0FBQ2YsVUFBTUYsUUFBTTtBQUNaLFNBQUssUUFBUTtBQUFBLEVBQ3JCO0FBQUEsRUFDSSxPQUFPLEtBQUssS0FBSztBQUNiLFlBQU8sMkJBQUssUUFBTyxLQUFLLFFBQVEsS0FBSyxLQUFLLE9BQU8sS0FBSyxHQUFHO0FBQUEsRUFDakU7QUFBQSxFQUNJLFdBQVc7QUFDUCxXQUFPLE9BQU8sS0FBSyxLQUFLO0FBQUEsRUFDaEM7QUFDQTtBQUNBLE9BQU8sZUFBZTtBQUN0QixPQUFPLGdCQUFnQjtBQUN2QixPQUFPLFFBQVE7QUFDZixPQUFPLGVBQWU7QUFDdEIsT0FBTyxlQUFlO0FDakJ0QixNQUFNLG1CQUFtQjtBQUN6QixTQUFTLGNBQWMsT0FBTyxTQUFTLE1BQU07QUFDekMsTUFBSSxTQUFTO0FBQ1QsVUFBTSxRQUFRLEtBQUssT0FBTyxPQUFLLEVBQUUsUUFBUSxPQUFPO0FBQ2hELFVBQU0sU0FBUyxNQUFNLEtBQUssT0FBSyxDQUFDLEVBQUUsTUFBTSxLQUFLLE1BQU0sQ0FBQztBQUNwRCxRQUFJLENBQUM7QUFDRCxZQUFNLElBQUksTUFBTSxPQUFPLE9BQU8sWUFBWTtBQUM5QyxXQUFPO0FBQUEsRUFDZjtBQUNJLFNBQU8sS0FBSyxLQUFLOztBQUFLLG9CQUFFLGFBQUYsMkJBQWEsV0FBVSxDQUFDLEVBQUU7QUFBQSxHQUFNO0FBQzFEO0FBQ0EsU0FBUyxXQUFXLE9BQU8sU0FBUyxLQUFLOztBQUNyQyxNQUFJLFdBQVcsS0FBSztBQUNoQixZQUFRLE1BQU07QUFDbEIsTUFBSSxPQUFPLEtBQUs7QUFDWixXQUFPO0FBQ1gsTUFBSSxPQUFPLEtBQUssR0FBRztBQUNmLFVBQU1RLFFBQU0sZUFBSSxPQUFPLEdBQUcsR0FBRSxlQUFoQiw0QkFBNkIsSUFBSSxRQUFRLE1BQU07QUFDM0QsSUFBQUEsS0FBSSxNQUFNLEtBQUssS0FBSztBQUNwQixXQUFPQTtBQUFBLEVBQ2Y7QUFDSSxNQUFJLGlCQUFpQixVQUNqQixpQkFBaUIsVUFDakIsaUJBQWlCLFdBQ2hCLE9BQU8sV0FBVyxlQUFlLGlCQUFpQixRQUNyRDtBQUVFLFlBQVEsTUFBTSxRQUFTO0FBQUEsRUFDL0I7QUFDSSxRQUFNLEVBQUUsdUJBQXVCLFVBQVUsVUFBVSxRQUFBQyxTQUFRLGNBQWEsSUFBSztBQUc3RSxNQUFJLE1BQU07QUFDVixNQUFJLHlCQUF5QixTQUFTLE9BQU8sVUFBVSxVQUFVO0FBQzdELFVBQU0sY0FBYyxJQUFJLEtBQUs7QUFDN0IsUUFBSSxLQUFLO0FBQ0wsVUFBSSxDQUFDLElBQUk7QUFDTCxZQUFJLFNBQVMsU0FBUyxLQUFLO0FBQy9CLGFBQU8sSUFBSSxNQUFNLElBQUksTUFBTTtBQUFBLElBQ3ZDLE9BQ2E7QUFDRCxZQUFNLEVBQUUsUUFBUSxNQUFNLE1BQU0sS0FBTTtBQUNsQyxvQkFBYyxJQUFJLE9BQU8sR0FBRztBQUFBLElBQ3hDO0FBQUEsRUFDQTtBQUNJLE1BQUksbUNBQVMsV0FBVztBQUNwQixjQUFVLG1CQUFtQixRQUFRLE1BQU0sQ0FBQztBQUNoRCxNQUFJLFNBQVMsY0FBYyxPQUFPLFNBQVNBLFFBQU8sSUFBSTtBQUN0RCxNQUFJLENBQUMsUUFBUTtBQUNULFFBQUksU0FBUyxPQUFPLE1BQU0sV0FBVyxZQUFZO0FBRTdDLGNBQVEsTUFBTSxPQUFRO0FBQUEsSUFDbEM7QUFDUSxRQUFJLENBQUMsU0FBUyxPQUFPLFVBQVUsVUFBVTtBQUNyQyxZQUFNQyxRQUFPLElBQUksT0FBTyxLQUFLO0FBQzdCLFVBQUk7QUFDQSxZQUFJLE9BQU9BO0FBQ2YsYUFBT0E7QUFBQSxJQUNuQjtBQUNRLGFBQ0ksaUJBQWlCLE1BQ1hELFFBQU8sR0FBRyxJQUNWLE9BQU8sWUFBWSxPQUFPLEtBQUssSUFDM0JBLFFBQU8sR0FBRyxJQUNWQSxRQUFPLEdBQUc7QUFBQSxFQUNoQztBQUNJLE1BQUksVUFBVTtBQUNWLGFBQVMsTUFBTTtBQUNmLFdBQU8sSUFBSTtBQUFBLEVBQ25CO0FBQ0ksUUFBTSxRQUFPLGlDQUFRLGNBQ2YsT0FBTyxXQUFXLElBQUksUUFBUSxPQUFPLEdBQUcsSUFDeEMsU0FBTyxzQ0FBUSxjQUFSLG1CQUFtQixVQUFTLGFBQy9CLE9BQU8sVUFBVSxLQUFLLElBQUksUUFBUSxPQUFPLEdBQUcsSUFDNUMsSUFBSSxPQUFPLEtBQUs7QUFDMUIsTUFBSTtBQUNBLFNBQUssTUFBTTtBQUFBLFdBQ04sQ0FBQyxPQUFPO0FBQ2IsU0FBSyxNQUFNLE9BQU87QUFDdEIsTUFBSTtBQUNBLFFBQUksT0FBTztBQUNmLFNBQU87QUFDWDtBQ2xGQSxTQUFTLG1CQUFtQkEsU0FBUSxNQUFNLE9BQU87QUFDN0MsTUFBSSxJQUFJO0FBQ1IsV0FBUyxJQUFJLEtBQUssU0FBUyxHQUFHLEtBQUssR0FBRyxFQUFFLEdBQUc7QUFDdkMsVUFBTSxJQUFJLEtBQUssQ0FBQztBQUNoQixRQUFJLE9BQU8sTUFBTSxZQUFZLE9BQU8sVUFBVSxDQUFDLEtBQUssS0FBSyxHQUFHO0FBQ3hELFlBQU0sSUFBSSxDQUFFO0FBQ1osUUFBRSxDQUFDLElBQUk7QUFDUCxVQUFJO0FBQUEsSUFDaEIsT0FDYTtBQUNELFVBQUksb0JBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUFBLElBQ2hDO0FBQUEsRUFDQTtBQUNJLFNBQU8sV0FBVyxHQUFHLFFBQVc7QUFBQSxJQUM1Qix1QkFBdUI7QUFBQSxJQUN2QixlQUFlO0FBQUEsSUFDZixVQUFVLE1BQU07QUFDWixZQUFNLElBQUksTUFBTSw4Q0FBOEM7QUFBQSxJQUNqRTtBQUFBLElBQ0QsUUFBQUE7QUFBQSxJQUNBLGVBQWUsb0JBQUksSUFBRztBQUFBLEVBQzlCLENBQUs7QUFDTDtBQUdBLE1BQU0sY0FBYyxDQUFDLFNBQVMsUUFBUSxRQUNqQyxPQUFPLFNBQVMsWUFBWSxDQUFDLENBQUMsS0FBSyxPQUFPLFFBQVEsRUFBRyxFQUFDLEtBQU0sRUFBQztBQUNsRSxNQUFNLG1CQUFtQixTQUFTO0FBQUEsRUFDOUIsWUFBWSxNQUFNQSxTQUFRO0FBQ3RCLFVBQU0sSUFBSTtBQUNWLFdBQU8sZUFBZSxNQUFNLFVBQVU7QUFBQSxNQUNsQyxPQUFPQTtBQUFBLE1BQ1AsY0FBYztBQUFBLE1BQ2QsWUFBWTtBQUFBLE1BQ1osVUFBVTtBQUFBLElBQ3RCLENBQVM7QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUksTUFBTUEsU0FBUTtBQUNWLFVBQU1ILFFBQU8sT0FBTyxPQUFPLE9BQU8sZUFBZSxJQUFJLEdBQUcsT0FBTywwQkFBMEIsSUFBSSxDQUFDO0FBQzlGLFFBQUlHO0FBQ0EsTUFBQUgsTUFBSyxTQUFTRztBQUNsQixJQUFBSCxNQUFLLFFBQVFBLE1BQUssTUFBTSxJQUFJLFFBQU0sT0FBTyxFQUFFLEtBQUssT0FBTyxFQUFFLElBQUksR0FBRyxNQUFNRyxPQUFNLElBQUksRUFBRTtBQUNsRixRQUFJLEtBQUs7QUFDTCxNQUFBSCxNQUFLLFFBQVEsS0FBSyxNQUFNLE1BQU87QUFDbkMsV0FBT0E7QUFBQSxFQUNmO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUksTUFBTSxNQUFNLE9BQU87QUFDZixRQUFJLFlBQVksSUFBSTtBQUNoQixXQUFLLElBQUksS0FBSztBQUFBLFNBQ2I7QUFDRCxZQUFNLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSTtBQUN2QixZQUFNLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSTtBQUMvQixVQUFJSixlQUFhLElBQUk7QUFDakIsYUFBSyxNQUFNLE1BQU0sS0FBSztBQUFBLGVBQ2pCLFNBQVMsVUFBYSxLQUFLO0FBQ2hDLGFBQUssSUFBSSxLQUFLLG1CQUFtQixLQUFLLFFBQVEsTUFBTSxLQUFLLENBQUM7QUFBQTtBQUUxRCxjQUFNLElBQUksTUFBTSwrQkFBK0IsR0FBRyxxQkFBcUIsSUFBSSxFQUFFO0FBQUEsSUFDN0Y7QUFBQSxFQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtJLFNBQVMsTUFBTTtBQUNYLFVBQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJO0FBQ3ZCLFFBQUksS0FBSyxXQUFXO0FBQ2hCLGFBQU8sS0FBSyxPQUFPLEdBQUc7QUFDMUIsVUFBTSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUk7QUFDL0IsUUFBSUEsZUFBYSxJQUFJO0FBQ2pCLGFBQU8sS0FBSyxTQUFTLElBQUk7QUFBQTtBQUV6QixZQUFNLElBQUksTUFBTSwrQkFBK0IsR0FBRyxxQkFBcUIsSUFBSSxFQUFFO0FBQUEsRUFDekY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNSSxNQUFNLE1BQU0sWUFBWTtBQUNwQixVQUFNLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSTtBQUN2QixVQUFNLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSTtBQUMvQixRQUFJLEtBQUssV0FBVztBQUNoQixhQUFPLENBQUMsY0FBY0QsV0FBUyxJQUFJLElBQUksS0FBSyxRQUFRO0FBQUE7QUFFcEQsYUFBT0MsZUFBYSxJQUFJLElBQUksS0FBSyxNQUFNLE1BQU0sVUFBVSxJQUFJO0FBQUEsRUFDdkU7QUFBQSxFQUNJLGlCQUFpQixhQUFhO0FBQzFCLFdBQU8sS0FBSyxNQUFNLE1BQU0sVUFBUTtBQUM1QixVQUFJLENBQUMsT0FBTyxJQUFJO0FBQ1osZUFBTztBQUNYLFlBQU0sSUFBSSxLQUFLO0FBQ2YsYUFBUSxLQUFLLFFBQ1IsZUFDR0QsV0FBUyxDQUFDLEtBQ1YsRUFBRSxTQUFTLFFBQ1gsQ0FBQyxFQUFFLGlCQUNILENBQUMsRUFBRSxXQUNILENBQUMsRUFBRTtBQUFBLElBQ3ZCLENBQVM7QUFBQSxFQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJSSxNQUFNLE1BQU07QUFDUixVQUFNLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSTtBQUN2QixRQUFJLEtBQUssV0FBVztBQUNoQixhQUFPLEtBQUssSUFBSSxHQUFHO0FBQ3ZCLFVBQU0sT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJO0FBQy9CLFdBQU9DLGVBQWEsSUFBSSxJQUFJLEtBQUssTUFBTSxJQUFJLElBQUk7QUFBQSxFQUN2RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLSSxNQUFNLE1BQU0sT0FBTztBQUNmLFVBQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJO0FBQ3ZCLFFBQUksS0FBSyxXQUFXLEdBQUc7QUFDbkIsV0FBSyxJQUFJLEtBQUssS0FBSztBQUFBLElBQy9CLE9BQ2E7QUFDRCxZQUFNLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSTtBQUMvQixVQUFJQSxlQUFhLElBQUk7QUFDakIsYUFBSyxNQUFNLE1BQU0sS0FBSztBQUFBLGVBQ2pCLFNBQVMsVUFBYSxLQUFLO0FBQ2hDLGFBQUssSUFBSSxLQUFLLG1CQUFtQixLQUFLLFFBQVEsTUFBTSxLQUFLLENBQUM7QUFBQTtBQUUxRCxjQUFNLElBQUksTUFBTSwrQkFBK0IsR0FBRyxxQkFBcUIsSUFBSSxFQUFFO0FBQUEsSUFDN0Y7QUFBQSxFQUNBO0FBQ0E7QUN6SUEsTUFBTSxtQkFBbUIsQ0FBQyxRQUFRLElBQUksUUFBUSxtQkFBbUIsR0FBRztBQUNwRSxTQUFTLGNBQWMsU0FBUyxRQUFRO0FBQ3BDLE1BQUksUUFBUSxLQUFLLE9BQU87QUFDcEIsV0FBTyxRQUFRLFVBQVUsQ0FBQztBQUM5QixTQUFPLFNBQVMsUUFBUSxRQUFRLGNBQWMsTUFBTSxJQUFJO0FBQzVEO0FBQ0EsTUFBTSxjQUFjLENBQUMsS0FBSyxRQUFRLFlBQVksSUFBSSxTQUFTLElBQUksSUFDekQsY0FBYyxTQUFTLE1BQU0sSUFDN0IsUUFBUSxTQUFTLElBQUksSUFDakIsT0FBTyxjQUFjLFNBQVMsTUFBTSxLQUNuQyxJQUFJLFNBQVMsR0FBRyxJQUFJLEtBQUssT0FBTztBQ2pCM0MsTUFBTSxZQUFZO0FBQ2xCLE1BQU0sYUFBYTtBQUNuQixNQUFNLGNBQWM7QUFNcEIsU0FBUyxjQUFjLE1BQU0sUUFBUSxPQUFPLFFBQVEsRUFBRSxlQUFlLFlBQVksSUFBSSxrQkFBa0IsSUFBSSxRQUFRLFdBQVUsSUFBSyxJQUFJO0FBQ2xJLE1BQUksQ0FBQyxhQUFhLFlBQVk7QUFDMUIsV0FBTztBQUNYLE1BQUksWUFBWTtBQUNaLHNCQUFrQjtBQUN0QixRQUFNLFVBQVUsS0FBSyxJQUFJLElBQUksaUJBQWlCLElBQUksWUFBWSxPQUFPLE1BQU07QUFDM0UsTUFBSSxLQUFLLFVBQVU7QUFDZixXQUFPO0FBQ1gsUUFBTSxRQUFRLENBQUU7QUFDaEIsUUFBTSxlQUFlLENBQUU7QUFDdkIsTUFBSSxNQUFNLFlBQVksT0FBTztBQUM3QixNQUFJLE9BQU8sa0JBQWtCLFVBQVU7QUFDbkMsUUFBSSxnQkFBZ0IsWUFBWSxLQUFLLElBQUksR0FBRyxlQUFlO0FBQ3ZELFlBQU0sS0FBSyxDQUFDO0FBQUE7QUFFWixZQUFNLFlBQVk7QUFBQSxFQUM5QjtBQUNJLE1BQUksUUFBUTtBQUNaLE1BQUksT0FBTztBQUNYLE1BQUksV0FBVztBQUNmLE1BQUksSUFBSTtBQUNSLE1BQUksV0FBVztBQUNmLE1BQUksU0FBUztBQUNiLE1BQUksU0FBUyxZQUFZO0FBQ3JCLFFBQUkseUJBQXlCLE1BQU0sR0FBRyxPQUFPLE1BQU07QUFDbkQsUUFBSSxNQUFNO0FBQ04sWUFBTSxJQUFJO0FBQUEsRUFDdEI7QUFDSSxXQUFTLElBQUssS0FBSyxLQUFNLEtBQUssQ0FBQyxLQUFNO0FBQ2pDLFFBQUksU0FBUyxlQUFlLE9BQU8sTUFBTTtBQUNyQyxpQkFBVztBQUNYLGNBQVEsS0FBSyxJQUFJLENBQUMsR0FBQztBQUFBLFFBQ2YsS0FBSztBQUNELGVBQUs7QUFDTDtBQUFBLFFBQ0osS0FBSztBQUNELGVBQUs7QUFDTDtBQUFBLFFBQ0osS0FBSztBQUNELGVBQUs7QUFDTDtBQUFBLFFBQ0o7QUFDSSxlQUFLO0FBQUEsTUFDekI7QUFDWSxlQUFTO0FBQUEsSUFDckI7QUFDUSxRQUFJLE9BQU8sTUFBTTtBQUNiLFVBQUksU0FBUztBQUNULFlBQUkseUJBQXlCLE1BQU0sR0FBRyxPQUFPLE1BQU07QUFDdkQsWUFBTSxJQUFJLE9BQU8sU0FBUztBQUMxQixjQUFRO0FBQUEsSUFDcEIsT0FDYTtBQUNELFVBQUksT0FBTyxPQUNQLFFBQ0EsU0FBUyxPQUNULFNBQVMsUUFDVCxTQUFTLEtBQU07QUFFZixjQUFNLE9BQU8sS0FBSyxJQUFJLENBQUM7QUFDdkIsWUFBSSxRQUFRLFNBQVMsT0FBTyxTQUFTLFFBQVEsU0FBUztBQUNsRCxrQkFBUTtBQUFBLE1BQzVCO0FBQ1ksVUFBSSxLQUFLLEtBQUs7QUFDVixZQUFJLE9BQU87QUFDUCxnQkFBTSxLQUFLLEtBQUs7QUFDaEIsZ0JBQU0sUUFBUTtBQUNkLGtCQUFRO0FBQUEsUUFDNUIsV0FDeUIsU0FBUyxhQUFhO0FBRTNCLGlCQUFPLFNBQVMsT0FBTyxTQUFTLEtBQU07QUFDbEMsbUJBQU87QUFDUCxpQkFBSyxLQUFNLEtBQUssQ0FBRztBQUNuQix1QkFBVztBQUFBLFVBQ25DO0FBRW9CLGdCQUFNLElBQUksSUFBSSxTQUFTLElBQUksSUFBSSxJQUFJLFdBQVc7QUFFOUMsY0FBSSxhQUFhLENBQUM7QUFDZCxtQkFBTztBQUNYLGdCQUFNLEtBQUssQ0FBQztBQUNaLHVCQUFhLENBQUMsSUFBSTtBQUNsQixnQkFBTSxJQUFJO0FBQ1Ysa0JBQVE7QUFBQSxRQUM1QixPQUNxQjtBQUNELHFCQUFXO0FBQUEsUUFDL0I7QUFBQSxNQUNBO0FBQUEsSUFDQTtBQUNRLFdBQU87QUFBQSxFQUNmO0FBQ0ksTUFBSSxZQUFZO0FBQ1osZUFBWTtBQUNoQixNQUFJLE1BQU0sV0FBVztBQUNqQixXQUFPO0FBQ1gsTUFBSTtBQUNBLFdBQVE7QUFDWixNQUFJLE1BQU0sS0FBSyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUM7QUFDaEMsV0FBU3BDLEtBQUksR0FBR0EsS0FBSSxNQUFNLFFBQVEsRUFBRUEsSUFBRztBQUNuQyxVQUFNLE9BQU8sTUFBTUEsRUFBQztBQUNwQixVQUFNNkMsT0FBTSxNQUFNN0MsS0FBSSxDQUFDLEtBQUssS0FBSztBQUNqQyxRQUFJLFNBQVM7QUFDVCxZQUFNO0FBQUEsRUFBSyxNQUFNLEdBQUcsS0FBSyxNQUFNLEdBQUc2QyxJQUFHLENBQUM7QUFBQSxTQUNyQztBQUNELFVBQUksU0FBUyxlQUFlLGFBQWEsSUFBSTtBQUN6QyxlQUFPLEdBQUcsS0FBSyxJQUFJLENBQUM7QUFDeEIsYUFBTztBQUFBLEVBQUssTUFBTSxHQUFHLEtBQUssTUFBTSxPQUFPLEdBQUdBLElBQUcsQ0FBQztBQUFBLElBQzFEO0FBQUEsRUFDQTtBQUNJLFNBQU87QUFDWDtBQUtBLFNBQVMseUJBQXlCLE1BQU0sR0FBRyxRQUFRO0FBQy9DLE1BQUksTUFBTTtBQUNWLE1BQUksUUFBUSxJQUFJO0FBQ2hCLE1BQUksS0FBSyxLQUFLLEtBQUs7QUFDbkIsU0FBTyxPQUFPLE9BQU8sT0FBTyxLQUFNO0FBQzlCLFFBQUksSUFBSSxRQUFRLFFBQVE7QUFDcEIsV0FBSyxLQUFLLEVBQUUsQ0FBQztBQUFBLElBQ3pCLE9BQ2E7QUFDRCxTQUFHO0FBQ0MsYUFBSyxLQUFLLEVBQUUsQ0FBQztBQUFBLE1BQzdCLFNBQXFCLE1BQU0sT0FBTztBQUN0QixZQUFNO0FBQ04sY0FBUSxJQUFJO0FBQ1osV0FBSyxLQUFLLEtBQUs7QUFBQSxJQUMzQjtBQUFBLEVBQ0E7QUFDSSxTQUFPO0FBQ1g7QUM1SUEsTUFBTSxpQkFBaUIsQ0FBQyxLQUFLQyxjQUFhO0FBQUEsRUFDdEMsZUFBZUEsV0FBVSxJQUFJLE9BQU8sU0FBUyxJQUFJO0FBQUEsRUFDakQsV0FBVyxJQUFJLFFBQVE7QUFBQSxFQUN2QixpQkFBaUIsSUFBSSxRQUFRO0FBQ2pDO0FBR0EsTUFBTSx5QkFBeUIsQ0FBQyxRQUFRLG1CQUFtQixLQUFLLEdBQUc7QUFDbkUsU0FBUyxvQkFBb0IsS0FBSyxXQUFXLGNBQWM7QUFDdkQsTUFBSSxDQUFDLGFBQWEsWUFBWTtBQUMxQixXQUFPO0FBQ1gsUUFBTSxRQUFRLFlBQVk7QUFDMUIsUUFBTSxTQUFTLElBQUk7QUFDbkIsTUFBSSxVQUFVO0FBQ1YsV0FBTztBQUNYLFdBQVMsSUFBSSxHQUFHLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxHQUFHO0FBQ3hDLFFBQUksSUFBSSxDQUFDLE1BQU0sTUFBTTtBQUNqQixVQUFJLElBQUksUUFBUTtBQUNaLGVBQU87QUFDWCxjQUFRLElBQUk7QUFDWixVQUFJLFNBQVMsU0FBUztBQUNsQixlQUFPO0FBQUEsSUFDdkI7QUFBQSxFQUNBO0FBQ0ksU0FBTztBQUNYO0FBQ0EsU0FBUyxtQkFBbUIsT0FBTyxLQUFLO0FBQ3BDLFFBQU0sT0FBTyxLQUFLLFVBQVUsS0FBSztBQUNqQyxNQUFJLElBQUksUUFBUTtBQUNaLFdBQU87QUFDWCxRQUFNLEVBQUUsWUFBVyxJQUFLO0FBQ3hCLFFBQU0scUJBQXFCLElBQUksUUFBUTtBQUN2QyxRQUFNLFNBQVMsSUFBSSxXQUFXLHVCQUF1QixLQUFLLElBQUksT0FBTztBQUNyRSxNQUFJLE1BQU07QUFDVixNQUFJLFFBQVE7QUFDWixXQUFTLElBQUksR0FBRyxLQUFLLEtBQUssQ0FBQyxHQUFHLElBQUksS0FBSyxLQUFLLEVBQUUsQ0FBQyxHQUFHO0FBQzlDLFFBQUksT0FBTyxPQUFPLEtBQUssSUFBSSxDQUFDLE1BQU0sUUFBUSxLQUFLLElBQUksQ0FBQyxNQUFNLEtBQUs7QUFFM0QsYUFBTyxLQUFLLE1BQU0sT0FBTyxDQUFDLElBQUk7QUFDOUIsV0FBSztBQUNMLGNBQVE7QUFDUixXQUFLO0FBQUEsSUFDakI7QUFDUSxRQUFJLE9BQU87QUFDUCxjQUFRLEtBQUssSUFBSSxDQUFDLEdBQUM7QUFBQSxRQUNmLEtBQUs7QUFDRDtBQUNJLG1CQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsa0JBQU0sT0FBTyxLQUFLLE9BQU8sSUFBSSxHQUFHLENBQUM7QUFDakMsb0JBQVEsTUFBSTtBQUFBLGNBQ1IsS0FBSztBQUNELHVCQUFPO0FBQ1A7QUFBQSxjQUNKLEtBQUs7QUFDRCx1QkFBTztBQUNQO0FBQUEsY0FDSixLQUFLO0FBQ0QsdUJBQU87QUFDUDtBQUFBLGNBQ0osS0FBSztBQUNELHVCQUFPO0FBQ1A7QUFBQSxjQUNKLEtBQUs7QUFDRCx1QkFBTztBQUNQO0FBQUEsY0FDSixLQUFLO0FBQ0QsdUJBQU87QUFDUDtBQUFBLGNBQ0osS0FBSztBQUNELHVCQUFPO0FBQ1A7QUFBQSxjQUNKLEtBQUs7QUFDRCx1QkFBTztBQUNQO0FBQUEsY0FDSjtBQUNJLG9CQUFJLEtBQUssT0FBTyxHQUFHLENBQUMsTUFBTTtBQUN0Qix5QkFBTyxRQUFRLEtBQUssT0FBTyxDQUFDO0FBQUE7QUFFNUIseUJBQU8sS0FBSyxPQUFPLEdBQUcsQ0FBQztBQUFBLFlBQzNEO0FBQ3dCLGlCQUFLO0FBQ0wsb0JBQVEsSUFBSTtBQUFBLFVBQ3BDO0FBQ29CO0FBQUEsUUFDSixLQUFLO0FBQ0QsY0FBSSxlQUNBLEtBQUssSUFBSSxDQUFDLE1BQU0sT0FDaEIsS0FBSyxTQUFTLG9CQUFvQjtBQUNsQyxpQkFBSztBQUFBLFVBQzdCLE9BQ3lCO0FBRUQsbUJBQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQyxJQUFJO0FBQzlCLG1CQUFPLEtBQUssSUFBSSxDQUFDLE1BQU0sUUFDbkIsS0FBSyxJQUFJLENBQUMsTUFBTSxPQUNoQixLQUFLLElBQUksQ0FBQyxNQUFNLEtBQUs7QUFDckIscUJBQU87QUFDUCxtQkFBSztBQUFBLFlBQ2pDO0FBQ3dCLG1CQUFPO0FBRVAsZ0JBQUksS0FBSyxJQUFJLENBQUMsTUFBTTtBQUNoQixxQkFBTztBQUNYLGlCQUFLO0FBQ0wsb0JBQVEsSUFBSTtBQUFBLFVBQ3BDO0FBQ29CO0FBQUEsUUFDSjtBQUNJLGVBQUs7QUFBQSxNQUN6QjtBQUFBLEVBQ0E7QUFDSSxRQUFNLFFBQVEsTUFBTSxLQUFLLE1BQU0sS0FBSyxJQUFJO0FBQ3hDLFNBQU8sY0FDRCxNQUNBLGNBQWMsS0FBSyxRQUFRLGFBQWEsZUFBZSxLQUFLLEtBQUssQ0FBQztBQUM1RTtBQUNBLFNBQVMsbUJBQW1CLE9BQU8sS0FBSztBQUNwQyxNQUFJLElBQUksUUFBUSxnQkFBZ0IsU0FDM0IsSUFBSSxlQUFlLE1BQU0sU0FBUyxJQUFJLEtBQ3ZDLGtCQUFrQixLQUFLLEtBQUs7QUFFNUIsV0FBTyxtQkFBbUIsT0FBTyxHQUFHO0FBQ3hDLFFBQU0sU0FBUyxJQUFJLFdBQVcsdUJBQXVCLEtBQUssSUFBSSxPQUFPO0FBQ3JFLFFBQU0sTUFBTSxNQUFNLE1BQU0sUUFBUSxNQUFNLElBQUksRUFBRSxRQUFRLFFBQVE7QUFBQSxFQUFPLE1BQU0sRUFBRSxJQUFJO0FBQy9FLFNBQU8sSUFBSSxjQUNMLE1BQ0EsY0FBYyxLQUFLLFFBQVEsV0FBVyxlQUFlLEtBQUssS0FBSyxDQUFDO0FBQzFFO0FBQ0EsU0FBUyxhQUFhLE9BQU8sS0FBSztBQUM5QixRQUFNLEVBQUUsZ0JBQWdCLElBQUk7QUFDNUIsTUFBSTtBQUNKLE1BQUksZ0JBQWdCO0FBQ2hCLFNBQUs7QUFBQSxPQUNKO0FBQ0QsVUFBTSxZQUFZLE1BQU0sU0FBUyxHQUFHO0FBQ3BDLFVBQU0sWUFBWSxNQUFNLFNBQVMsR0FBRztBQUNwQyxRQUFJLGFBQWEsQ0FBQztBQUNkLFdBQUs7QUFBQSxhQUNBLGFBQWEsQ0FBQztBQUNuQixXQUFLO0FBQUE7QUFFTCxXQUFLLGNBQWMscUJBQXFCO0FBQUEsRUFDcEQ7QUFDSSxTQUFPLEdBQUcsT0FBTyxHQUFHO0FBQ3hCO0FBR0EsSUFBSTtBQUNKLElBQUk7QUFDQSxxQkFBbUIsSUFBSSxPQUFPLDBCQUEwQixHQUFHO0FBQy9ELFFBQ007QUFDRixxQkFBbUI7QUFDdkI7QUFDQSxTQUFTLFlBQVksRUFBRSxTQUFTLE1BQU0sTUFBSyxHQUFJLEtBQUssV0FBVyxhQUFhO0FBQ3hFLFFBQU0sRUFBRSxZQUFZLGVBQWUsVUFBVyxJQUFHLElBQUk7QUFHckQsTUFBSSxDQUFDLGNBQWMsWUFBWSxLQUFLLEtBQUssS0FBSyxRQUFRLEtBQUssS0FBSyxHQUFHO0FBQy9ELFdBQU8sYUFBYSxPQUFPLEdBQUc7QUFBQSxFQUN0QztBQUNJLFFBQU0sU0FBUyxJQUFJLFdBQ2QsSUFBSSxvQkFBb0IsdUJBQXVCLEtBQUssSUFBSSxPQUFPO0FBQ3BFLFFBQU0sVUFBVSxlQUFlLFlBQ3pCLE9BQ0EsZUFBZSxZQUFZLFNBQVMsT0FBTyxlQUN2QyxRQUNBLFNBQVMsT0FBTyxnQkFDWixPQUNBLENBQUMsb0JBQW9CLE9BQU8sV0FBVyxPQUFPLE1BQU07QUFDbEUsTUFBSSxDQUFDO0FBQ0QsV0FBTyxVQUFVLFFBQVE7QUFFN0IsTUFBSTtBQUNKLE1BQUk7QUFDSixPQUFLLFdBQVcsTUFBTSxRQUFRLFdBQVcsR0FBRyxFQUFFLFVBQVU7QUFDcEQsVUFBTSxLQUFLLE1BQU0sV0FBVyxDQUFDO0FBQzdCLFFBQUksT0FBTyxRQUFRLE9BQU8sT0FBUSxPQUFPO0FBQ3JDO0FBQUEsRUFDWjtBQUNJLE1BQUksTUFBTSxNQUFNLFVBQVUsUUFBUTtBQUNsQyxRQUFNLFdBQVcsSUFBSSxRQUFRLElBQUk7QUFDakMsTUFBSSxhQUFhLElBQUk7QUFDakIsWUFBUTtBQUFBLEVBQ2hCLFdBQ2EsVUFBVSxPQUFPLGFBQWEsSUFBSSxTQUFTLEdBQUc7QUFDbkQsWUFBUTtBQUNSLFFBQUk7QUFDQSxrQkFBYTtBQUFBLEVBQ3pCLE9BQ1M7QUFDRCxZQUFRO0FBQUEsRUFDaEI7QUFDSSxNQUFJLEtBQUs7QUFDTCxZQUFRLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxNQUFNO0FBQ2xDLFFBQUksSUFBSSxJQUFJLFNBQVMsQ0FBQyxNQUFNO0FBQ3hCLFlBQU0sSUFBSSxNQUFNLEdBQUcsRUFBRTtBQUN6QixVQUFNLElBQUksUUFBUSxrQkFBa0IsS0FBSyxNQUFNLEVBQUU7QUFBQSxFQUN6RDtBQUVJLE1BQUksaUJBQWlCO0FBQ3JCLE1BQUk7QUFDSixNQUFJLGFBQWE7QUFDakIsT0FBSyxXQUFXLEdBQUcsV0FBVyxNQUFNLFFBQVEsRUFBRSxVQUFVO0FBQ3BELFVBQU0sS0FBSyxNQUFNLFFBQVE7QUFDekIsUUFBSSxPQUFPO0FBQ1AsdUJBQWlCO0FBQUEsYUFDWixPQUFPO0FBQ1osbUJBQWE7QUFBQTtBQUViO0FBQUEsRUFDWjtBQUNJLE1BQUksUUFBUSxNQUFNLFVBQVUsR0FBRyxhQUFhLFdBQVcsYUFBYSxJQUFJLFFBQVE7QUFDaEYsTUFBSSxPQUFPO0FBQ1AsWUFBUSxNQUFNLFVBQVUsTUFBTSxNQUFNO0FBQ3BDLFlBQVEsTUFBTSxRQUFRLFFBQVEsS0FBSyxNQUFNLEVBQUU7QUFBQSxFQUNuRDtBQUNJLFFBQU0sYUFBYSxTQUFTLE1BQU07QUFDbEMsTUFBSSxVQUFVLFVBQVUsTUFBTSxRQUFRLGlCQUFpQixhQUFhLE1BQU07QUFDMUUsTUFBSSxTQUFTO0FBQ1QsY0FBVSxNQUFNLGNBQWMsUUFBUSxRQUFRLGNBQWMsR0FBRyxDQUFDO0FBQ2hFLFFBQUk7QUFDQSxnQkFBVztBQUFBLEVBQ3ZCO0FBQ0ksTUFBSSxTQUFTO0FBQ1QsWUFBUSxNQUFNLFFBQVEsUUFBUSxLQUFLLE1BQU0sRUFBRTtBQUMzQyxXQUFPLEdBQUcsTUFBTTtBQUFBLEVBQUssTUFBTSxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsR0FBRztBQUFBLEVBQ3pEO0FBQ0ksVUFBUSxNQUNILFFBQVEsUUFBUSxNQUFNLEVBQ3RCLFFBQVEsa0RBQWtELE1BQU0sRUFFaEUsUUFBUSxRQUFRLEtBQUssTUFBTSxFQUFFO0FBQ2xDLFFBQU0sT0FBTyxjQUFjLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxHQUFHLElBQUksUUFBUSxZQUFZLGVBQWUsS0FBSyxJQUFJLENBQUM7QUFDbEcsU0FBTyxHQUFHLE1BQU07QUFBQSxFQUFLLE1BQU0sR0FBRyxJQUFJO0FBQ3RDO0FBQ0EsU0FBUyxZQUFZLE1BQU0sS0FBSyxXQUFXLGFBQWE7QUFDcEQsUUFBTSxFQUFFLE1BQU0sTUFBSyxJQUFLO0FBQ3hCLFFBQU0sRUFBRSxjQUFjLGFBQWEsUUFBUSxZQUFZLE9BQU0sSUFBSztBQUNsRSxNQUFLLGVBQWUsTUFBTSxTQUFTLElBQUksS0FDbEMsVUFBVSxXQUFXLEtBQUssS0FBSyxHQUFJO0FBQ3BDLFdBQU8sYUFBYSxPQUFPLEdBQUc7QUFBQSxFQUN0QztBQUNJLE1BQUksQ0FBQyxTQUNELG9GQUFvRixLQUFLLEtBQUssR0FBRztBQU9qRyxXQUFPLGVBQWUsVUFBVSxDQUFDLE1BQU0sU0FBUyxJQUFJLElBQzlDLGFBQWEsT0FBTyxHQUFHLElBQ3ZCLFlBQVksTUFBTSxLQUFLLFdBQVcsV0FBVztBQUFBLEVBQzNEO0FBQ0ksTUFBSSxDQUFDLGVBQ0QsQ0FBQyxVQUNELFNBQVMsT0FBTyxTQUNoQixNQUFNLFNBQVMsSUFBSSxHQUFHO0FBRXRCLFdBQU8sWUFBWSxNQUFNLEtBQUssV0FBVyxXQUFXO0FBQUEsRUFDNUQ7QUFDSSxNQUFJLHVCQUF1QixLQUFLLEdBQUc7QUFDL0IsUUFBSSxXQUFXLElBQUk7QUFDZixVQUFJLG1CQUFtQjtBQUN2QixhQUFPLFlBQVksTUFBTSxLQUFLLFdBQVcsV0FBVztBQUFBLElBQ2hFLFdBQ2lCLGVBQWUsV0FBVyxZQUFZO0FBQzNDLGFBQU8sYUFBYSxPQUFPLEdBQUc7QUFBQSxJQUMxQztBQUFBLEVBQ0E7QUFDSSxRQUFNLE1BQU0sTUFBTSxRQUFRLFFBQVE7QUFBQSxFQUFPLE1BQU0sRUFBRTtBQUlqRCxNQUFJLGNBQWM7QUFDZCxVQUFNLE9BQU8sQ0FBQyxRQUFROztBQUFBLGlCQUFJLFdBQVcsSUFBSSxRQUFRLDZCQUEyQixTQUFJLFNBQUosbUJBQVUsS0FBSztBQUFBO0FBQzNGLFVBQU0sRUFBRSxRQUFRLEtBQU0sSUFBRyxJQUFJLElBQUk7QUFDakMsUUFBSSxLQUFLLEtBQUssSUFBSSxNQUFLLGlDQUFRLEtBQUs7QUFDaEMsYUFBTyxhQUFhLE9BQU8sR0FBRztBQUFBLEVBQzFDO0FBQ0ksU0FBTyxjQUNELE1BQ0EsY0FBYyxLQUFLLFFBQVEsV0FBVyxlQUFlLEtBQUssS0FBSyxDQUFDO0FBQzFFO0FBQ0EsU0FBUyxnQkFBZ0IsTUFBTSxLQUFLLFdBQVcsYUFBYTtBQUN4RCxRQUFNLEVBQUUsYUFBYSxPQUFNLElBQUs7QUFDaEMsUUFBTSxLQUFLLE9BQU8sS0FBSyxVQUFVLFdBQzNCLE9BQ0EsT0FBTyxPQUFPLENBQUUsR0FBRSxNQUFNLEVBQUUsT0FBTyxPQUFPLEtBQUssS0FBSyxHQUFHO0FBQzNELE1BQUksRUFBRSxLQUFJLElBQUs7QUFDZixNQUFJLFNBQVMsT0FBTyxjQUFjO0FBRTlCLFFBQUksa0RBQWtELEtBQUssR0FBRyxLQUFLO0FBQy9ELGFBQU8sT0FBTztBQUFBLEVBQzFCO0FBQ0ksUUFBTSxhQUFhLENBQUMsVUFBVTtBQUMxQixZQUFRLE9BQUs7QUFBQSxNQUNULEtBQUssT0FBTztBQUFBLE1BQ1osS0FBSyxPQUFPO0FBQ1IsZUFBTyxlQUFlLFNBQ2hCLGFBQWEsR0FBRyxPQUFPLEdBQUcsSUFDMUIsWUFBWSxJQUFJLEtBQUssV0FBVyxXQUFXO0FBQUEsTUFDckQsS0FBSyxPQUFPO0FBQ1IsZUFBTyxtQkFBbUIsR0FBRyxPQUFPLEdBQUc7QUFBQSxNQUMzQyxLQUFLLE9BQU87QUFDUixlQUFPLG1CQUFtQixHQUFHLE9BQU8sR0FBRztBQUFBLE1BQzNDLEtBQUssT0FBTztBQUNSLGVBQU8sWUFBWSxJQUFJLEtBQUssV0FBVyxXQUFXO0FBQUEsTUFDdEQ7QUFDSSxlQUFPO0FBQUEsSUFDdkI7QUFBQSxFQUNLO0FBQ0QsTUFBSSxNQUFNLFdBQVcsSUFBSTtBQUN6QixNQUFJLFFBQVEsTUFBTTtBQUNkLFVBQU0sRUFBRSxnQkFBZ0Isa0JBQW1CLElBQUcsSUFBSTtBQUNsRCxVQUFNLElBQUssZUFBZSxrQkFBbUI7QUFDN0MsVUFBTSxXQUFXLENBQUM7QUFDbEIsUUFBSSxRQUFRO0FBQ1IsWUFBTSxJQUFJLE1BQU0sbUNBQW1DLENBQUMsRUFBRTtBQUFBLEVBQ2xFO0FBQ0ksU0FBTztBQUNYO0FDaFVBLFNBQVMsdUJBQXVCLEtBQUssU0FBUztBQUMxQyxRQUFNLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFDdEIsWUFBWTtBQUFBLElBQ1osZUFBZTtBQUFBLElBQ2YsZ0JBQWdCO0FBQUEsSUFDaEIsbUJBQW1CO0FBQUEsSUFDbkIsWUFBWTtBQUFBLElBQ1osb0JBQW9CO0FBQUEsSUFDcEIsZ0NBQWdDO0FBQUEsSUFDaEMsVUFBVTtBQUFBLElBQ1YsdUJBQXVCO0FBQUEsSUFDdkIsV0FBVztBQUFBLElBQ1gsV0FBVztBQUFBLElBQ1gsaUJBQWlCO0FBQUEsSUFDakIsU0FBUztBQUFBLElBQ1QsWUFBWTtBQUFBLElBQ1osYUFBYTtBQUFBLElBQ2IsU0FBUztBQUFBLElBQ1Qsa0JBQWtCO0FBQUEsRUFDckIsR0FBRSxJQUFJLE9BQU8saUJBQWlCLE9BQU87QUFDdEMsTUFBSTtBQUNKLFVBQVEsSUFBSSxpQkFBZTtBQUFBLElBQ3ZCLEtBQUs7QUFDRCxlQUFTO0FBQ1Q7QUFBQSxJQUNKLEtBQUs7QUFDRCxlQUFTO0FBQ1Q7QUFBQSxJQUNKO0FBQ0ksZUFBUztBQUFBLEVBQ3JCO0FBQ0ksU0FBTztBQUFBLElBQ0gsU0FBUyxvQkFBSSxJQUFLO0FBQUEsSUFDbEI7QUFBQSxJQUNBLHVCQUF1QixJQUFJLHdCQUF3QixNQUFNO0FBQUEsSUFDekQsUUFBUTtBQUFBLElBQ1IsWUFBWSxPQUFPLElBQUksV0FBVyxXQUFXLElBQUksT0FBTyxJQUFJLE1BQU0sSUFBSTtBQUFBLElBQ3RFO0FBQUEsSUFDQSxTQUFTO0FBQUEsRUFDWjtBQUNMO0FBQ0EsU0FBUyxhQUFhLE1BQU0sTUFBTTs7QUFDOUIsTUFBSSxLQUFLLEtBQUs7QUFDVixVQUFNLFFBQVEsS0FBSyxPQUFPLE9BQUssRUFBRSxRQUFRLEtBQUssR0FBRztBQUNqRCxRQUFJLE1BQU0sU0FBUztBQUNmLGFBQU8sTUFBTSxLQUFLLE9BQUssRUFBRSxXQUFXLEtBQUssTUFBTSxLQUFLLE1BQU0sQ0FBQztBQUFBLEVBQ3ZFO0FBQ0ksTUFBSSxTQUFTO0FBQ2IsTUFBSTtBQUNKLE1BQUlYLFdBQVMsSUFBSSxHQUFHO0FBQ2hCLFVBQU0sS0FBSztBQUNYLFFBQUksUUFBUSxLQUFLLE9BQU8sT0FBQzs7QUFBSSxjQUFBWSxNQUFBLEVBQUUsYUFBRixnQkFBQUEsSUFBQSxRQUFhO0FBQUEsS0FBSTtBQUM5QyxRQUFJLE1BQU0sU0FBUyxHQUFHO0FBQ2xCLFlBQU0sWUFBWSxNQUFNLE9BQU8sT0FBSyxFQUFFLElBQUk7QUFDMUMsVUFBSSxVQUFVLFNBQVM7QUFDbkIsZ0JBQVE7QUFBQSxJQUN4QjtBQUNRLGFBQ0ksTUFBTSxLQUFLLE9BQUssRUFBRSxXQUFXLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxPQUFLLENBQUMsRUFBRSxNQUFNO0FBQUEsRUFDbEYsT0FDUztBQUNELFVBQU07QUFDTixhQUFTLEtBQUssS0FBSyxPQUFLLEVBQUUsYUFBYSxlQUFlLEVBQUUsU0FBUztBQUFBLEVBQ3pFO0FBQ0ksTUFBSSxDQUFDLFFBQVE7QUFDVCxVQUFNLFNBQU8sZ0NBQUssZ0JBQUwsbUJBQWtCLFNBQVEsT0FBTztBQUM5QyxVQUFNLElBQUksTUFBTSx3QkFBd0IsSUFBSSxRQUFRO0FBQUEsRUFDNUQ7QUFDSSxTQUFPO0FBQ1g7QUFFQSxTQUFTLGVBQWUsTUFBTSxRQUFRLEVBQUUsU0FBUyxJQUFHLEdBQUk7QUFDcEQsTUFBSSxDQUFDLElBQUk7QUFDTCxXQUFPO0FBQ1gsUUFBTSxRQUFRLENBQUU7QUFDaEIsUUFBTSxVQUFVWixXQUFTLElBQUksS0FBS0MsZUFBYSxJQUFJLE1BQU0sS0FBSztBQUM5RCxNQUFJLFVBQVUsY0FBYyxNQUFNLEdBQUc7QUFDakMsWUFBUSxJQUFJLE1BQU07QUFDbEIsVUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO0FBQUEsRUFDL0I7QUFDSSxRQUFNLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxPQUFPLFVBQVUsT0FBTyxPQUFPO0FBQ2pFLE1BQUk7QUFDQSxVQUFNLEtBQUssSUFBSSxXQUFXLFVBQVUsR0FBRyxDQUFDO0FBQzVDLFNBQU8sTUFBTSxLQUFLLEdBQUc7QUFDekI7QUFDQSxTQUFTWSxZQUFVLE1BQU0sS0FBSyxXQUFXLGFBQWE7O0FBQ2xELE1BQUksT0FBTyxJQUFJO0FBQ1gsV0FBTyxLQUFLLFNBQVMsS0FBSyxXQUFXLFdBQVc7QUFDcEQsTUFBSSxRQUFRLElBQUksR0FBRztBQUNmLFFBQUksSUFBSSxJQUFJO0FBQ1IsYUFBTyxLQUFLLFNBQVMsR0FBRztBQUM1QixTQUFJLFNBQUksb0JBQUosbUJBQXFCLElBQUksT0FBTztBQUNoQyxZQUFNLElBQUksVUFBVSx5REFBeUQ7QUFBQSxJQUN6RixPQUNhO0FBQ0QsVUFBSSxJQUFJO0FBQ0osWUFBSSxnQkFBZ0IsSUFBSSxJQUFJO0FBQUE7QUFFNUIsWUFBSSxrQkFBa0Isb0JBQUksSUFBSSxDQUFDLElBQUksQ0FBQztBQUN4QyxhQUFPLEtBQUssUUFBUSxJQUFJLEdBQUc7QUFBQSxJQUN2QztBQUFBLEVBQ0E7QUFDSSxNQUFJLFNBQVM7QUFDYixRQUFNLE9BQU8sT0FBTyxJQUFJLElBQ2xCLE9BQ0EsSUFBSSxJQUFJLFdBQVcsTUFBTSxFQUFFLFVBQVUsT0FBTSxTQUFTLEdBQUk7QUFDOUQsTUFBSSxDQUFDO0FBQ0QsYUFBUyxhQUFhLElBQUksSUFBSSxPQUFPLE1BQU0sSUFBSTtBQUNuRCxRQUFNLFFBQVEsZUFBZSxNQUFNLFFBQVEsR0FBRztBQUM5QyxNQUFJLE1BQU0sU0FBUztBQUNmLFFBQUksaUJBQWlCLElBQUksaUJBQWlCLEtBQUssTUFBTSxTQUFTO0FBQ2xFLFFBQU0sTUFBTSxPQUFPLE9BQU8sY0FBYyxhQUNsQyxPQUFPLFVBQVUsTUFBTSxLQUFLLFdBQVcsV0FBVyxJQUNsRGIsV0FBUyxJQUFJLElBQ1QsZ0JBQWdCLE1BQU0sS0FBSyxXQUFXLFdBQVcsSUFDakQsS0FBSyxTQUFTLEtBQUssV0FBVyxXQUFXO0FBQ25ELE1BQUksQ0FBQztBQUNELFdBQU87QUFDWCxTQUFPQSxXQUFTLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxPQUFPLElBQUksQ0FBQyxNQUFNLE1BQ2hELEdBQUcsS0FBSyxJQUFJLEdBQUcsS0FDZixHQUFHLEtBQUs7QUFBQSxFQUFLLElBQUksTUFBTSxHQUFHLEdBQUc7QUFDdkM7QUN6SEEsU0FBUyxjQUFjLEVBQUUsS0FBSyxNQUFPLEdBQUUsS0FBSyxXQUFXLGFBQWE7QUFDaEUsUUFBTSxFQUFFLGVBQWUsS0FBSyxRQUFRLFlBQVksU0FBUyxFQUFFLGVBQWUsV0FBVyxXQUFVLEVBQUksSUFBRztBQUN0RyxNQUFJLGFBQWMsT0FBTyxHQUFHLEtBQUssSUFBSSxXQUFZO0FBQ2pELE1BQUksWUFBWTtBQUNaLFFBQUksWUFBWTtBQUNaLFlBQU0sSUFBSSxNQUFNLGtEQUFrRDtBQUFBLElBQzlFO0FBQ1EsUUFBSUMsZUFBYSxHQUFHLEtBQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxPQUFPLFFBQVEsVUFBVztBQUNoRSxZQUFNLE1BQU07QUFDWixZQUFNLElBQUksTUFBTSxHQUFHO0FBQUEsSUFDL0I7QUFBQSxFQUNBO0FBQ0ksTUFBSSxjQUFjLENBQUMsZUFDZCxDQUFDLE9BQ0csY0FBYyxTQUFTLFFBQVEsQ0FBQyxJQUFJLFVBQ3JDQSxlQUFhLEdBQUcsTUFDZkQsV0FBUyxHQUFHLElBQ1AsSUFBSSxTQUFTLE9BQU8sZ0JBQWdCLElBQUksU0FBUyxPQUFPLGdCQUN4RCxPQUFPLFFBQVE7QUFDN0IsUUFBTSxPQUFPLE9BQU8sSUFBSSxLQUFLO0FBQUEsSUFDekIsZUFBZTtBQUFBLElBQ2YsYUFBYSxDQUFDLGdCQUFnQixjQUFjLENBQUM7QUFBQSxJQUM3QyxRQUFRLFNBQVM7QUFBQSxFQUN6QixDQUFLO0FBQ0QsTUFBSSxpQkFBaUI7QUFDckIsTUFBSSxZQUFZO0FBQ2hCLE1BQUksTUFBTWEsWUFBVSxLQUFLLEtBQUssTUFBTyxpQkFBaUIsTUFBTyxNQUFPLFlBQVksSUFBSztBQUNyRixNQUFJLENBQUMsZUFBZSxDQUFDLElBQUksVUFBVSxJQUFJLFNBQVMsTUFBTTtBQUNsRCxRQUFJO0FBQ0EsWUFBTSxJQUFJLE1BQU0sOEVBQThFO0FBQ2xHLGtCQUFjO0FBQUEsRUFDdEI7QUFDSSxNQUFJLElBQUksUUFBUTtBQUNaLFFBQUksaUJBQWlCLFNBQVMsTUFBTTtBQUNoQyxVQUFJLGtCQUFrQjtBQUNsQixrQkFBVztBQUNmLGFBQU8sUUFBUSxLQUFLLE1BQU0sY0FBYyxLQUFLLEdBQUcsS0FBSztBQUFBLElBQ2pFO0FBQUEsRUFDQSxXQUNjLGlCQUFpQixDQUFDLGNBQWdCLFNBQVMsUUFBUSxhQUFjO0FBQ3ZFLFVBQU0sS0FBSyxHQUFHO0FBQ2QsUUFBSSxjQUFjLENBQUMsZ0JBQWdCO0FBQy9CLGFBQU8sWUFBWSxLQUFLLElBQUksUUFBUSxjQUFjLFVBQVUsQ0FBQztBQUFBLElBQ3pFLFdBQ2lCLGFBQWE7QUFDbEIsa0JBQWE7QUFDakIsV0FBTztBQUFBLEVBQ2Y7QUFDSSxNQUFJO0FBQ0EsaUJBQWE7QUFDakIsTUFBSSxhQUFhO0FBQ2IsUUFBSTtBQUNBLGFBQU8sWUFBWSxLQUFLLElBQUksUUFBUSxjQUFjLFVBQVUsQ0FBQztBQUNqRSxVQUFNLEtBQUssR0FBRztBQUFBLEVBQUssTUFBTTtBQUFBLEVBQ2pDLE9BQ1M7QUFDRCxVQUFNLEdBQUcsR0FBRztBQUNaLFFBQUk7QUFDQSxhQUFPLFlBQVksS0FBSyxJQUFJLFFBQVEsY0FBYyxVQUFVLENBQUM7QUFBQSxFQUN6RTtBQUNJLE1BQUksS0FBSyxLQUFLO0FBQ2QsTUFBSSxPQUFPLEtBQUssR0FBRztBQUNmLFVBQU0sQ0FBQyxDQUFDLE1BQU07QUFDZCxVQUFNLE1BQU07QUFDWixtQkFBZSxNQUFNO0FBQUEsRUFDN0IsT0FDUztBQUNELFVBQU07QUFDTixVQUFNO0FBQ04sbUJBQWU7QUFDZixRQUFJLFNBQVMsT0FBTyxVQUFVO0FBQzFCLGNBQVEsSUFBSSxXQUFXLEtBQUs7QUFBQSxFQUN4QztBQUNJLE1BQUksY0FBYztBQUNsQixNQUFJLENBQUMsZUFBZSxDQUFDLGNBQWNiLFdBQVMsS0FBSztBQUM3QyxRQUFJLGdCQUFnQixJQUFJLFNBQVM7QUFDckMsY0FBWTtBQUNaLE1BQUksQ0FBQyxhQUNELFdBQVcsVUFBVSxLQUNyQixDQUFDLElBQUksVUFDTCxDQUFDLGVBQ0QsTUFBTSxLQUFLLEtBQ1gsQ0FBQyxNQUFNLFFBQ1AsQ0FBQyxNQUFNLE9BQ1AsQ0FBQyxNQUFNLFFBQVE7QUFFZixRQUFJLFNBQVMsSUFBSSxPQUFPLFVBQVUsQ0FBQztBQUFBLEVBQzNDO0FBQ0ksTUFBSSxtQkFBbUI7QUFDdkIsUUFBTSxXQUFXYSxZQUFVLE9BQU8sS0FBSyxNQUFPLG1CQUFtQixNQUFPLE1BQU8sWUFBWSxJQUFLO0FBQ2hHLE1BQUksS0FBSztBQUNULE1BQUksY0FBYyxPQUFPLEtBQUs7QUFDMUIsU0FBSyxNQUFNLE9BQU87QUFDbEIsUUFBSSxLQUFLO0FBQ0wsWUFBTSxLQUFLLGNBQWMsR0FBRztBQUM1QixZQUFNO0FBQUEsRUFBSyxjQUFjLElBQUksSUFBSSxNQUFNLENBQUM7QUFBQSxJQUNwRDtBQUNRLFFBQUksYUFBYSxNQUFNLENBQUMsSUFBSSxRQUFRO0FBQ2hDLFVBQUksT0FBTztBQUNQLGFBQUs7QUFBQSxJQUNyQixPQUNhO0FBQ0QsWUFBTTtBQUFBLEVBQUssSUFBSSxNQUFNO0FBQUEsSUFDakM7QUFBQSxFQUNBLFdBQ2EsQ0FBQyxlQUFlWixlQUFhLEtBQUssR0FBRztBQUMxQyxVQUFNLE1BQU0sU0FBUyxDQUFDO0FBQ3RCLFVBQU0sTUFBTSxTQUFTLFFBQVEsSUFBSTtBQUNqQyxVQUFNLGFBQWEsUUFBUTtBQUMzQixVQUFNLE9BQU8sSUFBSSxVQUFVLE1BQU0sUUFBUSxNQUFNLE1BQU0sV0FBVztBQUNoRSxRQUFJLGNBQWMsQ0FBQyxNQUFNO0FBQ3JCLFVBQUksZUFBZTtBQUNuQixVQUFJLGVBQWUsUUFBUSxPQUFPLFFBQVEsTUFBTTtBQUM1QyxZQUFJLE1BQU0sU0FBUyxRQUFRLEdBQUc7QUFDOUIsWUFBSSxRQUFRLE9BQ1IsUUFBUSxNQUNSLE1BQU0sT0FDTixTQUFTLE1BQU0sQ0FBQyxNQUFNLEtBQUs7QUFDM0IsZ0JBQU0sU0FBUyxRQUFRLEtBQUssTUFBTSxDQUFDO0FBQUEsUUFDdkQ7QUFDZ0IsWUFBSSxRQUFRLE1BQU0sTUFBTTtBQUNwQix5QkFBZTtBQUFBLE1BQ25DO0FBQ1ksVUFBSSxDQUFDO0FBQ0QsYUFBSztBQUFBLEVBQUssSUFBSSxNQUFNO0FBQUEsSUFDcEM7QUFBQSxFQUNBLFdBQ2EsYUFBYSxNQUFNLFNBQVMsQ0FBQyxNQUFNLE1BQU07QUFDOUMsU0FBSztBQUFBLEVBQ2I7QUFDSSxTQUFPLEtBQUs7QUFDWixNQUFJLElBQUksUUFBUTtBQUNaLFFBQUksb0JBQW9CO0FBQ3BCLGdCQUFXO0FBQUEsRUFDdkIsV0FDYSxnQkFBZ0IsQ0FBQyxrQkFBa0I7QUFDeEMsV0FBTyxZQUFZLEtBQUssSUFBSSxRQUFRLGNBQWMsWUFBWSxDQUFDO0FBQUEsRUFDdkUsV0FDYSxhQUFhLGFBQWE7QUFDL0IsZ0JBQWE7QUFBQSxFQUNyQjtBQUNJLFNBQU87QUFDWDtBQy9JQSxTQUFTLEtBQUssVUFBVSxTQUFTO0FBQzdCLE1BQUksYUFBYSxXQUFXLGFBQWEsUUFBUTtBQUM3QyxRQUFJLE9BQU8sWUFBWSxlQUFlLFFBQVE7QUFDMUMsY0FBUSxZQUFZLE9BQU87QUFBQTtBQUUzQixjQUFRLEtBQUssT0FBTztBQUFBLEVBQ2hDO0FBQ0E7QUNEQSxNQUFNLFlBQVk7QUFDbEIsTUFBTSxRQUFRO0FBQUEsRUFDVixVQUFVLFdBQVMsVUFBVSxhQUN4QixPQUFPLFVBQVUsWUFBWSxNQUFNLGdCQUFnQjtBQUFBLEVBQ3hELFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLFNBQVMsTUFBTSxPQUFPLE9BQU8sSUFBSSxPQUFPLE9BQU8sU0FBUyxDQUFDLEdBQUc7QUFBQSxJQUN4RCxZQUFZO0FBQUEsRUFDcEIsQ0FBSztBQUFBLEVBQ0QsV0FBVyxNQUFNO0FBQ3JCO0FBQ0EsTUFBTSxhQUFhLENBQUMsS0FBSyxTQUFTLE1BQU0sU0FBUyxHQUFHLEtBQy9DRCxXQUFTLEdBQUcsTUFDUixDQUFDLElBQUksUUFBUSxJQUFJLFNBQVMsT0FBTyxVQUNsQyxNQUFNLFNBQVMsSUFBSSxLQUFLLE9BQzVCLDJCQUFLLElBQUksT0FBTyxLQUFLLEtBQUssU0FBTyxJQUFJLFFBQVEsTUFBTSxPQUFPLElBQUk7QUFDbEUsU0FBUyxnQkFBZ0IsS0FBS08sTUFBSyxPQUFPO0FBQ3RDLFVBQVEsT0FBTyxRQUFRLEtBQUssSUFBSSxNQUFNLFFBQVEsSUFBSSxHQUFHLElBQUk7QUFDekQsTUFBSSxNQUFNLEtBQUs7QUFDWCxlQUFXLE1BQU0sTUFBTTtBQUNuQixpQkFBVyxLQUFLQSxNQUFLLEVBQUU7QUFBQSxXQUN0QixNQUFNLFFBQVEsS0FBSztBQUN4QixlQUFXLE1BQU07QUFDYixpQkFBVyxLQUFLQSxNQUFLLEVBQUU7QUFBQTtBQUUzQixlQUFXLEtBQUtBLE1BQUssS0FBSztBQUNsQztBQUNBLFNBQVMsV0FBVyxLQUFLQSxNQUFLLE9BQU87QUFDakMsUUFBTSxTQUFTLE9BQU8sUUFBUSxLQUFLLElBQUksTUFBTSxRQUFRLElBQUksR0FBRyxJQUFJO0FBQ2hFLE1BQUksQ0FBQyxNQUFNLE1BQU07QUFDYixVQUFNLElBQUksTUFBTSwyQ0FBMkM7QUFDL0QsUUFBTSxTQUFTLE9BQU8sT0FBTyxNQUFNLEtBQUssR0FBRztBQUMzQyxhQUFXLENBQUMsS0FBS3RFLE1BQUssS0FBSyxRQUFRO0FBQy9CLFFBQUlzRSxnQkFBZSxLQUFLO0FBQ3BCLFVBQUksQ0FBQ0EsS0FBSSxJQUFJLEdBQUc7QUFDWixRQUFBQSxLQUFJLElBQUksS0FBS3RFLE1BQUs7QUFBQSxJQUNsQyxXQUNpQnNFLGdCQUFlLEtBQUs7QUFDekIsTUFBQUEsS0FBSSxJQUFJLEdBQUc7QUFBQSxJQUN2QixXQUNpQixDQUFDLE9BQU8sVUFBVSxlQUFlLEtBQUtBLE1BQUssR0FBRyxHQUFHO0FBQ3RELGFBQU8sZUFBZUEsTUFBSyxLQUFLO0FBQUEsUUFDNUIsT0FBQXRFO0FBQUEsUUFDQSxVQUFVO0FBQUEsUUFDVixZQUFZO0FBQUEsUUFDWixjQUFjO0FBQUEsTUFDOUIsQ0FBYTtBQUFBLElBQ2I7QUFBQSxFQUNBO0FBQ0ksU0FBT3NFO0FBQ1g7QUN2REEsU0FBUyxlQUFlLEtBQUtBLE1BQUssRUFBRSxLQUFLLE1BQUssR0FBSTtBQUM5QyxNQUFJLE9BQU8sR0FBRyxLQUFLLElBQUk7QUFDbkIsUUFBSSxXQUFXLEtBQUtBLE1BQUssS0FBSztBQUFBLFdBRXpCLFdBQVcsS0FBSyxHQUFHO0FBQ3hCLG9CQUFnQixLQUFLQSxNQUFLLEtBQUs7QUFBQSxPQUM5QjtBQUNELFVBQU0sUUFBUSxLQUFLLEtBQUssSUFBSSxHQUFHO0FBQy9CLFFBQUlBLGdCQUFlLEtBQUs7QUFDcEIsTUFBQUEsS0FBSSxJQUFJLE9BQU8sS0FBSyxPQUFPLE9BQU8sR0FBRyxDQUFDO0FBQUEsSUFDbEQsV0FDaUJBLGdCQUFlLEtBQUs7QUFDekIsTUFBQUEsS0FBSSxJQUFJLEtBQUs7QUFBQSxJQUN6QixPQUNhO0FBQ0QsWUFBTSxZQUFZLGFBQWEsS0FBSyxPQUFPLEdBQUc7QUFDOUMsWUFBTSxVQUFVLEtBQUssT0FBTyxXQUFXLEdBQUc7QUFDMUMsVUFBSSxhQUFhQTtBQUNiLGVBQU8sZUFBZUEsTUFBSyxXQUFXO0FBQUEsVUFDbEMsT0FBTztBQUFBLFVBQ1AsVUFBVTtBQUFBLFVBQ1YsWUFBWTtBQUFBLFVBQ1osY0FBYztBQUFBLFFBQ2xDLENBQWlCO0FBQUE7QUFFRCxRQUFBQSxLQUFJLFNBQVMsSUFBSTtBQUFBLElBQ2pDO0FBQUEsRUFDQTtBQUNJLFNBQU9BO0FBQ1g7QUFDQSxTQUFTLGFBQWEsS0FBSyxPQUFPLEtBQUs7QUFDbkMsTUFBSSxVQUFVO0FBQ1YsV0FBTztBQUNYLE1BQUksT0FBTyxVQUFVO0FBQ2pCLFdBQU8sT0FBTyxLQUFLO0FBQ3ZCLE1BQUksT0FBTyxHQUFHLE1BQUssMkJBQUssTUFBSztBQUN6QixVQUFNLFNBQVMsdUJBQXVCLElBQUksS0FBSyxFQUFFO0FBQ2pELFdBQU8sVUFBVSxvQkFBSSxJQUFLO0FBQzFCLGVBQVcsUUFBUSxJQUFJLFFBQVEsS0FBTTtBQUNqQyxhQUFPLFFBQVEsSUFBSSxLQUFLLE1BQU07QUFDbEMsV0FBTyxTQUFTO0FBQ2hCLFdBQU8saUJBQWlCO0FBQ3hCLFVBQU0sU0FBUyxJQUFJLFNBQVMsTUFBTTtBQUNsQyxRQUFJLENBQUMsSUFBSSxjQUFjO0FBQ25CLFVBQUksVUFBVSxLQUFLLFVBQVUsTUFBTTtBQUNuQyxVQUFJLFFBQVEsU0FBUztBQUNqQixrQkFBVSxRQUFRLFVBQVUsR0FBRyxFQUFFLElBQUk7QUFDekMsV0FBSyxJQUFJLElBQUksUUFBUSxVQUFVLGtGQUFrRixPQUFPLDBDQUEwQztBQUNsSyxVQUFJLGVBQWU7QUFBQSxJQUMvQjtBQUNRLFdBQU87QUFBQSxFQUNmO0FBQ0ksU0FBTyxLQUFLLFVBQVUsS0FBSztBQUMvQjtBQ3REQSxTQUFTLFdBQVcsS0FBSyxPQUFPLEtBQUs7QUFDakMsUUFBTSxJQUFJLFdBQVcsS0FBSyxRQUFXLEdBQUc7QUFDeEMsUUFBTSxJQUFJLFdBQVcsT0FBTyxRQUFXLEdBQUc7QUFDMUMsU0FBTyxJQUFJLEtBQUssR0FBRyxDQUFDO0FBQ3hCO0FBQ0EsTUFBTSxLQUFLO0FBQUEsRUFDUCxZQUFZLEtBQUssUUFBUSxNQUFNO0FBQzNCLFdBQU8sZUFBZSxNQUFNLFdBQVcsRUFBRSxPQUFPLE1BQU07QUFDdEQsU0FBSyxNQUFNO0FBQ1gsU0FBSyxRQUFRO0FBQUEsRUFDckI7QUFBQSxFQUNJLE1BQU1DLFNBQVE7QUFDVixRQUFJLEVBQUUsS0FBSyxNQUFLLElBQUs7QUFDckIsUUFBSSxPQUFPLEdBQUc7QUFDVixZQUFNLElBQUksTUFBTUEsT0FBTTtBQUMxQixRQUFJLE9BQU8sS0FBSztBQUNaLGNBQVEsTUFBTSxNQUFNQSxPQUFNO0FBQzlCLFdBQU8sSUFBSSxLQUFLLEtBQUssS0FBSztBQUFBLEVBQ2xDO0FBQUEsRUFDSSxPQUFPLEdBQUcsS0FBSztBQUNYLFVBQU0sUUFBTywyQkFBSyxZQUFXLG9CQUFJLElBQUssSUFBRyxDQUFFO0FBQzNDLFdBQU8sZUFBZSxLQUFLLE1BQU0sSUFBSTtBQUFBLEVBQzdDO0FBQUEsRUFDSSxTQUFTLEtBQUssV0FBVyxhQUFhO0FBQ2xDLFlBQU8sMkJBQUssT0FDTixjQUFjLE1BQU0sS0FBSyxXQUFXLFdBQVcsSUFDL0MsS0FBSyxVQUFVLElBQUk7QUFBQSxFQUNqQztBQUNBO0FDN0JBLFNBQVMsb0JBQW9CLFlBQVksS0FBSyxTQUFTO0FBQ25ELFFBQU0sT0FBTyxJQUFJLFVBQVUsV0FBVztBQUN0QyxRQUFNSyxhQUFZLE9BQU8sMEJBQTBCO0FBQ25ELFNBQU9BLFdBQVUsWUFBWSxLQUFLLE9BQU87QUFDN0M7QUFDQSxTQUFTLHlCQUF5QixFQUFFLFNBQVMsTUFBSyxHQUFJLEtBQUssRUFBRSxpQkFBaUIsV0FBVyxZQUFZLGFBQWEsVUFBUyxHQUFJO0FBQzNILFFBQU0sRUFBRSxRQUFRLFNBQVMsRUFBRSxjQUFhLEVBQUksSUFBRztBQUMvQyxRQUFNLFVBQVUsT0FBTyxPQUFPLElBQUksS0FBSyxFQUFFLFFBQVEsWUFBWSxNQUFNLE1BQU07QUFDekUsTUFBSSxZQUFZO0FBQ2hCLFFBQU0sUUFBUSxDQUFFO0FBQ2hCLFdBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEVBQUUsR0FBRztBQUNuQyxVQUFNLE9BQU8sTUFBTSxDQUFDO0FBQ3BCLFFBQUlDLFdBQVU7QUFDZCxRQUFJLE9BQU8sSUFBSSxHQUFHO0FBQ2QsVUFBSSxDQUFDLGFBQWEsS0FBSztBQUNuQixjQUFNLEtBQUssRUFBRTtBQUNqQix1QkFBaUIsS0FBSyxPQUFPLEtBQUssZUFBZSxTQUFTO0FBQzFELFVBQUksS0FBSztBQUNMLFFBQUFBLFdBQVUsS0FBSztBQUFBLElBQy9CLFdBQ2lCLE9BQU8sSUFBSSxHQUFHO0FBQ25CLFlBQU0sS0FBSyxPQUFPLEtBQUssR0FBRyxJQUFJLEtBQUssTUFBTTtBQUN6QyxVQUFJLElBQUk7QUFDSixZQUFJLENBQUMsYUFBYSxHQUFHO0FBQ2pCLGdCQUFNLEtBQUssRUFBRTtBQUNqQix5QkFBaUIsS0FBSyxPQUFPLEdBQUcsZUFBZSxTQUFTO0FBQUEsTUFDeEU7QUFBQSxJQUNBO0FBQ1EsZ0JBQVk7QUFDWixRQUFJL0MsT0FBTThDLFlBQVUsTUFBTSxTQUFTLE1BQU9DLFdBQVUsTUFBTyxNQUFPLFlBQVksSUFBSztBQUNuRixRQUFJQTtBQUNBLE1BQUEvQyxRQUFPLFlBQVlBLE1BQUssWUFBWSxjQUFjK0MsUUFBTyxDQUFDO0FBQzlELFFBQUksYUFBYUE7QUFDYixrQkFBWTtBQUNoQixVQUFNLEtBQUssa0JBQWtCL0MsSUFBRztBQUFBLEVBQ3hDO0FBQ0ksTUFBSTtBQUNKLE1BQUksTUFBTSxXQUFXLEdBQUc7QUFDcEIsVUFBTSxVQUFVLFFBQVEsVUFBVTtBQUFBLEVBQzFDLE9BQ1M7QUFDRCxVQUFNLE1BQU0sQ0FBQztBQUNiLGFBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEVBQUUsR0FBRztBQUNuQyxZQUFNLE9BQU8sTUFBTSxDQUFDO0FBQ3BCLGFBQU8sT0FBTztBQUFBLEVBQUssTUFBTSxHQUFHLElBQUksS0FBSztBQUFBLElBQ2pEO0FBQUEsRUFDQTtBQUNJLE1BQUksU0FBUztBQUNULFdBQU8sT0FBTyxjQUFjLGNBQWMsT0FBTyxHQUFHLE1BQU07QUFDMUQsUUFBSTtBQUNBLGdCQUFXO0FBQUEsRUFDdkIsV0FDYSxhQUFhO0FBQ2xCLGdCQUFhO0FBQ2pCLFNBQU87QUFDWDtBQUNBLFNBQVMsd0JBQXdCLEVBQUUsTUFBTyxHQUFFLEtBQUssRUFBRSxXQUFXLGNBQWM7QUFDeEUsUUFBTSxFQUFFLFFBQVEsWUFBWSx1QkFBdUIsV0FBVyxTQUFTLEVBQUUsY0FBZSxNQUFLO0FBQzdGLGdCQUFjO0FBQ2QsUUFBTSxVQUFVLE9BQU8sT0FBTyxJQUFJLEtBQUs7QUFBQSxJQUNuQyxRQUFRO0FBQUEsSUFDUixRQUFRO0FBQUEsSUFDUixNQUFNO0FBQUEsRUFDZCxDQUFLO0FBQ0QsTUFBSSxhQUFhO0FBQ2pCLE1BQUksZUFBZTtBQUNuQixRQUFNLFFBQVEsQ0FBRTtBQUNoQixXQUFTLElBQUksR0FBRyxJQUFJLE1BQU0sUUFBUSxFQUFFLEdBQUc7QUFDbkMsVUFBTSxPQUFPLE1BQU0sQ0FBQztBQUNwQixRQUFJLFVBQVU7QUFDZCxRQUFJLE9BQU8sSUFBSSxHQUFHO0FBQ2QsVUFBSSxLQUFLO0FBQ0wsY0FBTSxLQUFLLEVBQUU7QUFDakIsdUJBQWlCLEtBQUssT0FBTyxLQUFLLGVBQWUsS0FBSztBQUN0RCxVQUFJLEtBQUs7QUFDTCxrQkFBVSxLQUFLO0FBQUEsSUFDL0IsV0FDaUIsT0FBTyxJQUFJLEdBQUc7QUFDbkIsWUFBTSxLQUFLLE9BQU8sS0FBSyxHQUFHLElBQUksS0FBSyxNQUFNO0FBQ3pDLFVBQUksSUFBSTtBQUNKLFlBQUksR0FBRztBQUNILGdCQUFNLEtBQUssRUFBRTtBQUNqQix5QkFBaUIsS0FBSyxPQUFPLEdBQUcsZUFBZSxLQUFLO0FBQ3BELFlBQUksR0FBRztBQUNILHVCQUFhO0FBQUEsTUFDakM7QUFDWSxZQUFNLEtBQUssT0FBTyxLQUFLLEtBQUssSUFBSSxLQUFLLFFBQVE7QUFDN0MsVUFBSSxJQUFJO0FBQ0osWUFBSSxHQUFHO0FBQ0gsb0JBQVUsR0FBRztBQUNqQixZQUFJLEdBQUc7QUFDSCx1QkFBYTtBQUFBLE1BQ2pDLFdBQ3FCLEtBQUssU0FBUyxTQUFRLHlCQUFJLFVBQVM7QUFDeEMsa0JBQVUsR0FBRztBQUFBLE1BQzdCO0FBQUEsSUFDQTtBQUNRLFFBQUk7QUFDQSxtQkFBYTtBQUNqQixRQUFJLE1BQU04QyxZQUFVLE1BQU0sU0FBUyxNQUFPLFVBQVUsSUFBSztBQUN6RCxRQUFJLElBQUksTUFBTSxTQUFTO0FBQ25CLGFBQU87QUFDWCxRQUFJO0FBQ0EsYUFBTyxZQUFZLEtBQUssWUFBWSxjQUFjLE9BQU8sQ0FBQztBQUM5RCxRQUFJLENBQUMsZUFBZSxNQUFNLFNBQVMsZ0JBQWdCLElBQUksU0FBUyxJQUFJO0FBQ2hFLG1CQUFhO0FBQ2pCLFVBQU0sS0FBSyxHQUFHO0FBQ2QsbUJBQWUsTUFBTTtBQUFBLEVBQzdCO0FBQ0ksUUFBTSxFQUFFLE9BQU8sSUFBRyxJQUFLO0FBQ3ZCLE1BQUksTUFBTSxXQUFXLEdBQUc7QUFDcEIsV0FBTyxRQUFRO0FBQUEsRUFDdkIsT0FDUztBQUNELFFBQUksQ0FBQyxZQUFZO0FBQ2IsWUFBTSxNQUFNLE1BQU0sT0FBTyxDQUFDLEtBQUssU0FBUyxNQUFNLEtBQUssU0FBUyxHQUFHLENBQUM7QUFDaEUsbUJBQWEsSUFBSSxRQUFRLFlBQVksS0FBSyxNQUFNLElBQUksUUFBUTtBQUFBLElBQ3hFO0FBQ1EsUUFBSSxZQUFZO0FBQ1osVUFBSSxNQUFNO0FBQ1YsaUJBQVcsUUFBUTtBQUNmLGVBQU8sT0FBTztBQUFBLEVBQUssVUFBVSxHQUFHLE1BQU0sR0FBRyxJQUFJLEtBQUs7QUFDdEQsYUFBTyxHQUFHLEdBQUc7QUFBQSxFQUFLLE1BQU0sR0FBRyxHQUFHO0FBQUEsSUFDMUMsT0FDYTtBQUNELGFBQU8sR0FBRyxLQUFLLEdBQUcsU0FBUyxHQUFHLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxTQUFTLEdBQUcsR0FBRztBQUFBLElBQzNFO0FBQUEsRUFDQTtBQUNBO0FBQ0EsU0FBUyxpQkFBaUIsRUFBRSxRQUFRLFNBQVMsRUFBRSxjQUFhLEtBQU0sT0FBTyxTQUFTLFdBQVc7QUFDekYsTUFBSSxXQUFXO0FBQ1gsY0FBVSxRQUFRLFFBQVEsUUFBUSxFQUFFO0FBQ3hDLE1BQUksU0FBUztBQUNULFVBQU0sS0FBSyxjQUFjLGNBQWMsT0FBTyxHQUFHLE1BQU07QUFDdkQsVUFBTSxLQUFLLEdBQUcsVUFBVztBQUFBLEVBQ2pDO0FBQ0E7QUNySUEsU0FBUyxTQUFTLE9BQU8sS0FBSztBQUMxQixRQUFNLElBQUliLFdBQVMsR0FBRyxJQUFJLElBQUksUUFBUTtBQUN0QyxhQUFXLE1BQU0sT0FBTztBQUNwQixRQUFJLE9BQU8sRUFBRSxHQUFHO0FBQ1osVUFBSSxHQUFHLFFBQVEsT0FBTyxHQUFHLFFBQVE7QUFDN0IsZUFBTztBQUNYLFVBQUlBLFdBQVMsR0FBRyxHQUFHLEtBQUssR0FBRyxJQUFJLFVBQVU7QUFDckMsZUFBTztBQUFBLElBQ3ZCO0FBQUEsRUFDQTtBQUNJLFNBQU87QUFDWDtBQUNBLE1BQU0sZ0JBQWdCLFdBQVc7QUFBQSxFQUM3QixXQUFXLFVBQVU7QUFDakIsV0FBTztBQUFBLEVBQ2Y7QUFBQSxFQUNJLFlBQVlRLFNBQVE7QUFDaEIsVUFBTSxLQUFLQSxPQUFNO0FBQ2pCLFNBQUssUUFBUSxDQUFFO0FBQUEsRUFDdkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0ksT0FBTyxLQUFLQSxTQUFRLEtBQUssS0FBSztBQUMxQixVQUFNLEVBQUUsZUFBZSxTQUFRLElBQUs7QUFDcEMsVUFBTUQsT0FBTSxJQUFJLEtBQUtDLE9BQU07QUFDM0IsVUFBTSxNQUFNLENBQUMsS0FBSyxVQUFVO0FBQ3hCLFVBQUksT0FBTyxhQUFhO0FBQ3BCLGdCQUFRLFNBQVMsS0FBSyxLQUFLLEtBQUssS0FBSztBQUFBLGVBQ2hDLE1BQU0sUUFBUSxRQUFRLEtBQUssQ0FBQyxTQUFTLFNBQVMsR0FBRztBQUN0RDtBQUNKLFVBQUksVUFBVSxVQUFhO0FBQ3ZCLFFBQUFELEtBQUksTUFBTSxLQUFLLFdBQVcsS0FBSyxPQUFPLEdBQUcsQ0FBQztBQUFBLElBQ2pEO0FBQ0QsUUFBSSxlQUFlLEtBQUs7QUFDcEIsaUJBQVcsQ0FBQyxLQUFLLEtBQUssS0FBSztBQUN2QixZQUFJLEtBQUssS0FBSztBQUFBLElBQzlCLFdBQ2lCLE9BQU8sT0FBTyxRQUFRLFVBQVU7QUFDckMsaUJBQVcsT0FBTyxPQUFPLEtBQUssR0FBRztBQUM3QixZQUFJLEtBQUssSUFBSSxHQUFHLENBQUM7QUFBQSxJQUNqQztBQUNRLFFBQUksT0FBT0MsUUFBTyxtQkFBbUIsWUFBWTtBQUM3QyxNQUFBRCxLQUFJLE1BQU0sS0FBS0MsUUFBTyxjQUFjO0FBQUEsSUFDaEQ7QUFDUSxXQUFPRDtBQUFBLEVBQ2Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9JLElBQUksTUFBTSxXQUFXOztBQUNqQixRQUFJO0FBQ0osUUFBSSxPQUFPLElBQUk7QUFDWCxjQUFRO0FBQUEsYUFDSCxDQUFDLFFBQVEsT0FBTyxTQUFTLFlBQVksRUFBRSxTQUFTLE9BQU87QUFFNUQsY0FBUSxJQUFJLEtBQUssTUFBTSw2QkFBTSxLQUFLO0FBQUEsSUFDOUM7QUFFWSxjQUFRLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQ3pDLFVBQU0sT0FBTyxTQUFTLEtBQUssT0FBTyxNQUFNLEdBQUc7QUFDM0MsVUFBTSxlQUFjLFVBQUssV0FBTCxtQkFBYTtBQUNqQyxRQUFJLE1BQU07QUFDTixVQUFJLENBQUM7QUFDRCxjQUFNLElBQUksTUFBTSxPQUFPLE1BQU0sR0FBRyxjQUFjO0FBRWxELFVBQUlQLFdBQVMsS0FBSyxLQUFLLEtBQUssY0FBYyxNQUFNLEtBQUs7QUFDakQsYUFBSyxNQUFNLFFBQVEsTUFBTTtBQUFBO0FBRXpCLGFBQUssUUFBUSxNQUFNO0FBQUEsSUFDbkMsV0FDaUIsYUFBYTtBQUNsQixZQUFNLElBQUksS0FBSyxNQUFNLFVBQVUsVUFBUSxZQUFZLE9BQU8sSUFBSSxJQUFJLENBQUM7QUFDbkUsVUFBSSxNQUFNO0FBQ04sYUFBSyxNQUFNLEtBQUssS0FBSztBQUFBO0FBRXJCLGFBQUssTUFBTSxPQUFPLEdBQUcsR0FBRyxLQUFLO0FBQUEsSUFDN0MsT0FDYTtBQUNELFdBQUssTUFBTSxLQUFLLEtBQUs7QUFBQSxJQUNqQztBQUFBLEVBQ0E7QUFBQSxFQUNJLE9BQU8sS0FBSztBQUNSLFVBQU0sS0FBSyxTQUFTLEtBQUssT0FBTyxHQUFHO0FBQ25DLFFBQUksQ0FBQztBQUNELGFBQU87QUFDWCxVQUFNLE1BQU0sS0FBSyxNQUFNLE9BQU8sS0FBSyxNQUFNLFFBQVEsRUFBRSxHQUFHLENBQUM7QUFDdkQsV0FBTyxJQUFJLFNBQVM7QUFBQSxFQUM1QjtBQUFBLEVBQ0ksSUFBSSxLQUFLLFlBQVk7QUFDakIsVUFBTSxLQUFLLFNBQVMsS0FBSyxPQUFPLEdBQUc7QUFDbkMsVUFBTSxPQUFPLHlCQUFJO0FBQ2pCLFlBQVEsQ0FBQyxjQUFjQSxXQUFTLElBQUksSUFBSSxLQUFLLFFBQVEsU0FBUztBQUFBLEVBQ3RFO0FBQUEsRUFDSSxJQUFJLEtBQUs7QUFDTCxXQUFPLENBQUMsQ0FBQyxTQUFTLEtBQUssT0FBTyxHQUFHO0FBQUEsRUFDekM7QUFBQSxFQUNJLElBQUksS0FBSyxPQUFPO0FBQ1osU0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssR0FBRyxJQUFJO0FBQUEsRUFDM0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNSSxPQUFPLEdBQUcsS0FBSyxNQUFNO0FBQ2pCLFVBQU1PLE9BQU0sT0FBTyxJQUFJLEtBQUksS0FBSywyQkFBSyxZQUFXLG9CQUFJLElBQUcsSUFBSyxDQUFFO0FBQzlELFFBQUksMkJBQUs7QUFDTCxVQUFJLFNBQVNBLElBQUc7QUFDcEIsZUFBVyxRQUFRLEtBQUs7QUFDcEIscUJBQWUsS0FBS0EsTUFBSyxJQUFJO0FBQ2pDLFdBQU9BO0FBQUEsRUFDZjtBQUFBLEVBQ0ksU0FBUyxLQUFLLFdBQVcsYUFBYTtBQUNsQyxRQUFJLENBQUM7QUFDRCxhQUFPLEtBQUssVUFBVSxJQUFJO0FBQzlCLGVBQVcsUUFBUSxLQUFLLE9BQU87QUFDM0IsVUFBSSxDQUFDLE9BQU8sSUFBSTtBQUNaLGNBQU0sSUFBSSxNQUFNLHNDQUFzQyxLQUFLLFVBQVUsSUFBSSxDQUFDLFVBQVU7QUFBQSxJQUNwRztBQUNRLFFBQUksQ0FBQyxJQUFJLGlCQUFpQixLQUFLLGlCQUFpQixLQUFLO0FBQ2pELFlBQU0sT0FBTyxPQUFPLElBQUksS0FBSyxFQUFFLGVBQWUsTUFBTTtBQUN4RCxXQUFPLG9CQUFvQixNQUFNLEtBQUs7QUFBQSxNQUNsQyxpQkFBaUI7QUFBQSxNQUNqQixXQUFXLEVBQUUsT0FBTyxLQUFLLEtBQUssSUFBSztBQUFBLE1BQ25DLFlBQVksSUFBSSxVQUFVO0FBQUEsTUFDMUI7QUFBQSxNQUNBO0FBQUEsSUFDWixDQUFTO0FBQUEsRUFDVDtBQUNBO0FDMUlBLE1BQU0sTUFBTTtBQUFBLEVBQ1IsWUFBWTtBQUFBLEVBQ1osU0FBUztBQUFBLEVBQ1QsV0FBVztBQUFBLEVBQ1gsS0FBSztBQUFBLEVBQ0wsUUFBUUEsTUFBSyxTQUFTO0FBQ2xCLFFBQUksQ0FBQyxNQUFNQSxJQUFHO0FBQ1YsY0FBUSxpQ0FBaUM7QUFDN0MsV0FBT0E7QUFBQSxFQUNWO0FBQUEsRUFDRCxZQUFZLENBQUNDLFNBQVEsS0FBSyxRQUFRLFFBQVEsS0FBS0EsU0FBUSxLQUFLLEdBQUc7QUFDbkU7QUNQQSxNQUFNLGdCQUFnQixXQUFXO0FBQUEsRUFDN0IsV0FBVyxVQUFVO0FBQ2pCLFdBQU87QUFBQSxFQUNmO0FBQUEsRUFDSSxZQUFZQSxTQUFRO0FBQ2hCLFVBQU0sS0FBS0EsT0FBTTtBQUNqQixTQUFLLFFBQVEsQ0FBRTtBQUFBLEVBQ3ZCO0FBQUEsRUFDSSxJQUFJLE9BQU87QUFDUCxTQUFLLE1BQU0sS0FBSyxLQUFLO0FBQUEsRUFDN0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFTSSxPQUFPLEtBQUs7QUFDUixVQUFNLE1BQU0sWUFBWSxHQUFHO0FBQzNCLFFBQUksT0FBTyxRQUFRO0FBQ2YsYUFBTztBQUNYLFVBQU0sTUFBTSxLQUFLLE1BQU0sT0FBTyxLQUFLLENBQUM7QUFDcEMsV0FBTyxJQUFJLFNBQVM7QUFBQSxFQUM1QjtBQUFBLEVBQ0ksSUFBSSxLQUFLLFlBQVk7QUFDakIsVUFBTSxNQUFNLFlBQVksR0FBRztBQUMzQixRQUFJLE9BQU8sUUFBUTtBQUNmLGFBQU87QUFDWCxVQUFNLEtBQUssS0FBSyxNQUFNLEdBQUc7QUFDekIsV0FBTyxDQUFDLGNBQWNSLFdBQVMsRUFBRSxJQUFJLEdBQUcsUUFBUTtBQUFBLEVBQ3hEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPSSxJQUFJLEtBQUs7QUFDTCxVQUFNLE1BQU0sWUFBWSxHQUFHO0FBQzNCLFdBQU8sT0FBTyxRQUFRLFlBQVksTUFBTSxLQUFLLE1BQU07QUFBQSxFQUMzRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRSSxJQUFJLEtBQUssT0FBTztBQUNaLFVBQU0sTUFBTSxZQUFZLEdBQUc7QUFDM0IsUUFBSSxPQUFPLFFBQVE7QUFDZixZQUFNLElBQUksTUFBTSwrQkFBK0IsR0FBRyxHQUFHO0FBQ3pELFVBQU0sT0FBTyxLQUFLLE1BQU0sR0FBRztBQUMzQixRQUFJQSxXQUFTLElBQUksS0FBSyxjQUFjLEtBQUs7QUFDckMsV0FBSyxRQUFRO0FBQUE7QUFFYixXQUFLLE1BQU0sR0FBRyxJQUFJO0FBQUEsRUFDOUI7QUFBQSxFQUNJLE9BQU8sR0FBRyxLQUFLO0FBQ1gsVUFBTWUsT0FBTSxDQUFFO0FBQ2QsUUFBSSwyQkFBSztBQUNMLFVBQUksU0FBU0EsSUFBRztBQUNwQixRQUFJLElBQUk7QUFDUixlQUFXLFFBQVEsS0FBSztBQUNwQixNQUFBQSxLQUFJLEtBQUssS0FBSyxNQUFNLE9BQU8sR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN6QyxXQUFPQTtBQUFBLEVBQ2Y7QUFBQSxFQUNJLFNBQVMsS0FBSyxXQUFXLGFBQWE7QUFDbEMsUUFBSSxDQUFDO0FBQ0QsYUFBTyxLQUFLLFVBQVUsSUFBSTtBQUM5QixXQUFPLG9CQUFvQixNQUFNLEtBQUs7QUFBQSxNQUNsQyxpQkFBaUI7QUFBQSxNQUNqQixXQUFXLEVBQUUsT0FBTyxLQUFLLEtBQUssSUFBSztBQUFBLE1BQ25DLGFBQWEsSUFBSSxVQUFVLE1BQU07QUFBQSxNQUNqQztBQUFBLE1BQ0E7QUFBQSxJQUNaLENBQVM7QUFBQSxFQUNUO0FBQUEsRUFDSSxPQUFPLEtBQUtQLFNBQVEsS0FBSyxLQUFLO0FBQzFCLFVBQU0sRUFBRSxTQUFRLElBQUs7QUFDckIsVUFBTU8sT0FBTSxJQUFJLEtBQUtQLE9BQU07QUFDM0IsUUFBSSxPQUFPLE9BQU8sWUFBWSxPQUFPLEdBQUcsR0FBRztBQUN2QyxVQUFJLElBQUk7QUFDUixlQUFTLE1BQU0sS0FBSztBQUNoQixZQUFJLE9BQU8sYUFBYSxZQUFZO0FBQ2hDLGdCQUFNLE1BQU0sZUFBZSxNQUFNLEtBQUssT0FBTyxHQUFHO0FBQ2hELGVBQUssU0FBUyxLQUFLLEtBQUssS0FBSyxFQUFFO0FBQUEsUUFDbkQ7QUFDZ0IsUUFBQU8sS0FBSSxNQUFNLEtBQUssV0FBVyxJQUFJLFFBQVcsR0FBRyxDQUFDO0FBQUEsTUFDN0Q7QUFBQSxJQUNBO0FBQ1EsV0FBT0E7QUFBQSxFQUNmO0FBQ0E7QUFDQSxTQUFTLFlBQVksS0FBSztBQUN0QixNQUFJLE1BQU1mLFdBQVMsR0FBRyxJQUFJLElBQUksUUFBUTtBQUN0QyxNQUFJLE9BQU8sT0FBTyxRQUFRO0FBQ3RCLFVBQU0sT0FBTyxHQUFHO0FBQ3BCLFNBQU8sT0FBTyxRQUFRLFlBQVksT0FBTyxVQUFVLEdBQUcsS0FBSyxPQUFPLElBQzVELE1BQ0E7QUFDVjtBQzNHQSxNQUFNLE1BQU07QUFBQSxFQUNSLFlBQVk7QUFBQSxFQUNaLFNBQVM7QUFBQSxFQUNULFdBQVc7QUFBQSxFQUNYLEtBQUs7QUFBQSxFQUNMLFFBQVFlLE1BQUssU0FBUztBQUNsQixRQUFJLENBQUMsTUFBTUEsSUFBRztBQUNWLGNBQVEsa0NBQWtDO0FBQzlDLFdBQU9BO0FBQUEsRUFDVjtBQUFBLEVBQ0QsWUFBWSxDQUFDUCxTQUFRLEtBQUssUUFBUSxRQUFRLEtBQUtBLFNBQVEsS0FBSyxHQUFHO0FBQ25FO0FDWkEsTUFBTSxTQUFTO0FBQUEsRUFDWCxVQUFVLFdBQVMsT0FBTyxVQUFVO0FBQUEsRUFDcEMsU0FBUztBQUFBLEVBQ1QsS0FBSztBQUFBLEVBQ0wsU0FBUyxTQUFPO0FBQUEsRUFDaEIsVUFBVSxNQUFNLEtBQUssV0FBVyxhQUFhO0FBQ3pDLFVBQU0sT0FBTyxPQUFPLEVBQUUsY0FBYyxLQUFNLEdBQUUsR0FBRztBQUMvQyxXQUFPLGdCQUFnQixNQUFNLEtBQUssV0FBVyxXQUFXO0FBQUEsRUFDaEU7QUFDQTtBQ1RBLE1BQU0sVUFBVTtBQUFBLEVBQ1osVUFBVSxXQUFTLFNBQVM7QUFBQSxFQUM1QixZQUFZLE1BQU0sSUFBSSxPQUFPLElBQUk7QUFBQSxFQUNqQyxTQUFTO0FBQUEsRUFDVCxLQUFLO0FBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixTQUFTLE1BQU0sSUFBSSxPQUFPLElBQUk7QUFBQSxFQUM5QixXQUFXLENBQUMsRUFBRSxPQUFRLEdBQUUsUUFBUSxPQUFPLFdBQVcsWUFBWSxRQUFRLEtBQUssS0FBSyxNQUFNLElBQ2hGLFNBQ0EsSUFBSSxRQUFRO0FBQ3RCO0FDVkEsTUFBTSxVQUFVO0FBQUEsRUFDWixVQUFVLFdBQVMsT0FBTyxVQUFVO0FBQUEsRUFDcEMsU0FBUztBQUFBLEVBQ1QsS0FBSztBQUFBLEVBQ0wsTUFBTTtBQUFBLEVBQ04sU0FBUyxTQUFPLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUc7QUFBQSxFQUMzRCxVQUFVLEVBQUUsUUFBUSxNQUFLLEdBQUksS0FBSztBQUM5QixRQUFJLFVBQVUsUUFBUSxLQUFLLEtBQUssTUFBTSxHQUFHO0FBQ3JDLFlBQU0sS0FBSyxPQUFPLENBQUMsTUFBTSxPQUFPLE9BQU8sQ0FBQyxNQUFNO0FBQzlDLFVBQUksVUFBVTtBQUNWLGVBQU87QUFBQSxJQUN2QjtBQUNRLFdBQU8sUUFBUSxJQUFJLFFBQVEsVUFBVSxJQUFJLFFBQVE7QUFBQSxFQUN6RDtBQUNBO0FDaEJBLFNBQVMsZ0JBQWdCLEVBQUUsUUFBUSxtQkFBbUIsS0FBSyxNQUFLLEdBQUk7QUFDaEUsTUFBSSxPQUFPLFVBQVU7QUFDakIsV0FBTyxPQUFPLEtBQUs7QUFDdkIsUUFBTSxNQUFNLE9BQU8sVUFBVSxXQUFXLFFBQVEsT0FBTyxLQUFLO0FBQzVELE1BQUksQ0FBQyxTQUFTLEdBQUc7QUFDYixXQUFPLE1BQU0sR0FBRyxJQUFJLFNBQVMsTUFBTSxJQUFJLFVBQVU7QUFDckQsTUFBSSxJQUFJLEtBQUssVUFBVSxLQUFLO0FBQzVCLE1BQUksQ0FBQyxVQUNELHNCQUNDLENBQUMsT0FBTyxRQUFRLDhCQUNqQixNQUFNLEtBQUssQ0FBQyxHQUFHO0FBQ2YsUUFBSSxJQUFJLEVBQUUsUUFBUSxHQUFHO0FBQ3JCLFFBQUksSUFBSSxHQUFHO0FBQ1AsVUFBSSxFQUFFO0FBQ04sV0FBSztBQUFBLElBQ2pCO0FBQ1EsUUFBSSxJQUFJLHFCQUFxQixFQUFFLFNBQVMsSUFBSTtBQUM1QyxXQUFPLE1BQU07QUFDVCxXQUFLO0FBQUEsRUFDakI7QUFDSSxTQUFPO0FBQ1g7QUNsQkEsTUFBTVEsYUFBVztBQUFBLEVBQ2IsVUFBVSxXQUFTLE9BQU8sVUFBVTtBQUFBLEVBQ3BDLFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLFNBQVMsU0FBTyxJQUFJLE1BQU0sRUFBRSxFQUFFLGtCQUFrQixRQUMxQyxNQUNBLElBQUksQ0FBQyxNQUFNLE1BQ1AsT0FBTyxvQkFDUCxPQUFPO0FBQUEsRUFDakIsV0FBVztBQUNmO0FBQ0EsTUFBTUMsYUFBVztBQUFBLEVBQ2IsVUFBVSxXQUFTLE9BQU8sVUFBVTtBQUFBLEVBQ3BDLFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLFFBQVE7QUFBQSxFQUNSLE1BQU07QUFBQSxFQUNOLFNBQVMsU0FBTyxXQUFXLEdBQUc7QUFBQSxFQUM5QixVQUFVLE1BQU07QUFDWixVQUFNLE1BQU0sT0FBTyxLQUFLLEtBQUs7QUFDN0IsV0FBTyxTQUFTLEdBQUcsSUFBSSxJQUFJLGNBQWUsSUFBRyxnQkFBZ0IsSUFBSTtBQUFBLEVBQ3pFO0FBQ0E7QUFDQSxNQUFNQyxVQUFRO0FBQUEsRUFDVixVQUFVLFdBQVMsT0FBTyxVQUFVO0FBQUEsRUFDcEMsU0FBUztBQUFBLEVBQ1QsS0FBSztBQUFBLEVBQ0wsTUFBTTtBQUFBLEVBQ04sUUFBUSxLQUFLO0FBQ1QsVUFBTSxPQUFPLElBQUksT0FBTyxXQUFXLEdBQUcsQ0FBQztBQUN2QyxVQUFNLE1BQU0sSUFBSSxRQUFRLEdBQUc7QUFDM0IsUUFBSSxRQUFRLE1BQU0sSUFBSSxJQUFJLFNBQVMsQ0FBQyxNQUFNO0FBQ3RDLFdBQUssb0JBQW9CLElBQUksU0FBUyxNQUFNO0FBQ2hELFdBQU87QUFBQSxFQUNWO0FBQUEsRUFDRCxXQUFXO0FBQ2Y7QUN0Q0EsTUFBTUMsZ0JBQWMsQ0FBQyxVQUFVLE9BQU8sVUFBVSxZQUFZLE9BQU8sVUFBVSxLQUFLO0FBQ2xGLE1BQU1DLGVBQWEsQ0FBQyxLQUFLLFFBQVEsT0FBTyxFQUFFLFlBQVcsTUFBUSxjQUFjLE9BQU8sR0FBRyxJQUFJLFNBQVMsSUFBSSxVQUFVLE1BQU0sR0FBRyxLQUFLO0FBQzlILFNBQVNDLGVBQWEsTUFBTSxPQUFPLFFBQVE7QUFDdkMsUUFBTSxFQUFFLE1BQUssSUFBSztBQUNsQixNQUFJRixjQUFZLEtBQUssS0FBSyxTQUFTO0FBQy9CLFdBQU8sU0FBUyxNQUFNLFNBQVMsS0FBSztBQUN4QyxTQUFPLGdCQUFnQixJQUFJO0FBQy9CO0FBQ0EsTUFBTUcsV0FBUztBQUFBLEVBQ1gsVUFBVSxXQUFTSCxjQUFZLEtBQUssS0FBSyxTQUFTO0FBQUEsRUFDbEQsU0FBUztBQUFBLEVBQ1QsS0FBSztBQUFBLEVBQ0wsUUFBUTtBQUFBLEVBQ1IsTUFBTTtBQUFBLEVBQ04sU0FBUyxDQUFDLEtBQUssVUFBVSxRQUFRQyxhQUFXLEtBQUssR0FBRyxHQUFHLEdBQUc7QUFBQSxFQUMxRCxXQUFXLFVBQVFDLGVBQWEsTUFBTSxHQUFHLElBQUk7QUFDakQ7QUFDQSxNQUFNRSxRQUFNO0FBQUEsRUFDUixVQUFVSjtBQUFBQSxFQUNWLFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLFNBQVMsQ0FBQyxLQUFLLFVBQVUsUUFBUUMsYUFBVyxLQUFLLEdBQUcsSUFBSSxHQUFHO0FBQUEsRUFDM0QsV0FBVztBQUNmO0FBQ0EsTUFBTUksV0FBUztBQUFBLEVBQ1gsVUFBVSxXQUFTTCxjQUFZLEtBQUssS0FBSyxTQUFTO0FBQUEsRUFDbEQsU0FBUztBQUFBLEVBQ1QsS0FBSztBQUFBLEVBQ0wsUUFBUTtBQUFBLEVBQ1IsTUFBTTtBQUFBLEVBQ04sU0FBUyxDQUFDLEtBQUssVUFBVSxRQUFRQyxhQUFXLEtBQUssR0FBRyxJQUFJLEdBQUc7QUFBQSxFQUMzRCxXQUFXLFVBQVFDLGVBQWEsTUFBTSxJQUFJLElBQUk7QUFDbEQ7QUMzQkEsTUFBTWIsV0FBUztBQUFBLEVBQ1g7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQWM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQVI7QUFBQUEsRUFDQUM7QUFBQUEsRUFDQUM7QUFDSjtBQ2hCQSxTQUFTQyxjQUFZLE9BQU87QUFDeEIsU0FBTyxPQUFPLFVBQVUsWUFBWSxPQUFPLFVBQVUsS0FBSztBQUM5RDtBQUNBLE1BQU0sZ0JBQWdCLENBQUMsRUFBRSxNQUFLLE1BQU8sS0FBSyxVQUFVLEtBQUs7QUFDekQsTUFBTSxjQUFjO0FBQUEsRUFDaEI7QUFBQSxJQUNJLFVBQVUsV0FBUyxPQUFPLFVBQVU7QUFBQSxJQUNwQyxTQUFTO0FBQUEsSUFDVCxLQUFLO0FBQUEsSUFDTCxTQUFTLFNBQU87QUFBQSxJQUNoQixXQUFXO0FBQUEsRUFDZDtBQUFBLEVBQ0Q7QUFBQSxJQUNJLFVBQVUsV0FBUyxTQUFTO0FBQUEsSUFDNUIsWUFBWSxNQUFNLElBQUksT0FBTyxJQUFJO0FBQUEsSUFDakMsU0FBUztBQUFBLElBQ1QsS0FBSztBQUFBLElBQ0wsTUFBTTtBQUFBLElBQ04sU0FBUyxNQUFNO0FBQUEsSUFDZixXQUFXO0FBQUEsRUFDZDtBQUFBLEVBQ0Q7QUFBQSxJQUNJLFVBQVUsV0FBUyxPQUFPLFVBQVU7QUFBQSxJQUNwQyxTQUFTO0FBQUEsSUFDVCxLQUFLO0FBQUEsSUFDTCxNQUFNO0FBQUEsSUFDTixTQUFTLFNBQU8sUUFBUTtBQUFBLElBQ3hCLFdBQVc7QUFBQSxFQUNkO0FBQUEsRUFDRDtBQUFBLElBQ0ksVUFBVUE7QUFBQUEsSUFDVixTQUFTO0FBQUEsSUFDVCxLQUFLO0FBQUEsSUFDTCxNQUFNO0FBQUEsSUFDTixTQUFTLENBQUMsS0FBSyxVQUFVLEVBQUUsWUFBYSxNQUFLLGNBQWMsT0FBTyxHQUFHLElBQUksU0FBUyxLQUFLLEVBQUU7QUFBQSxJQUN6RixXQUFXLENBQUMsRUFBRSxNQUFPLE1BQUtBLGNBQVksS0FBSyxJQUFJLE1BQU0sU0FBUSxJQUFLLEtBQUssVUFBVSxLQUFLO0FBQUEsRUFDekY7QUFBQSxFQUNEO0FBQUEsSUFDSSxVQUFVLFdBQVMsT0FBTyxVQUFVO0FBQUEsSUFDcEMsU0FBUztBQUFBLElBQ1QsS0FBSztBQUFBLElBQ0wsTUFBTTtBQUFBLElBQ04sU0FBUyxTQUFPLFdBQVcsR0FBRztBQUFBLElBQzlCLFdBQVc7QUFBQSxFQUNuQjtBQUNBO0FBQ0EsTUFBTSxZQUFZO0FBQUEsRUFDZCxTQUFTO0FBQUEsRUFDVCxLQUFLO0FBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixRQUFRLEtBQUssU0FBUztBQUNsQixZQUFRLDJCQUEyQixLQUFLLFVBQVUsR0FBRyxDQUFDLEVBQUU7QUFDeEQsV0FBTztBQUFBLEVBQ2Y7QUFDQTtBQUNBLE1BQU1YLFdBQVMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxPQUFPLGFBQWEsU0FBUztBQ3hEdkQsTUFBTSxTQUFTO0FBQUEsRUFDWCxVQUFVLFdBQVMsaUJBQWlCO0FBQUE7QUFBQSxFQUNwQyxTQUFTO0FBQUEsRUFDVCxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBU0wsUUFBUSxLQUFLLFNBQVM7QUFDbEIsUUFBSSxPQUFPLFdBQVcsWUFBWTtBQUM5QixhQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVE7QUFBQSxJQUM1QyxXQUNpQixPQUFPLFNBQVMsWUFBWTtBQUVqQyxZQUFNLE1BQU0sS0FBSyxJQUFJLFFBQVEsV0FBVyxFQUFFLENBQUM7QUFDM0MsWUFBTSxTQUFTLElBQUksV0FBVyxJQUFJLE1BQU07QUFDeEMsZUFBUyxJQUFJLEdBQUcsSUFBSSxJQUFJLFFBQVEsRUFBRTtBQUM5QixlQUFPLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQztBQUNoQyxhQUFPO0FBQUEsSUFDbkIsT0FDYTtBQUNELGNBQVEsMEZBQTBGO0FBQ2xHLGFBQU87QUFBQSxJQUNuQjtBQUFBLEVBQ0s7QUFBQSxFQUNELFVBQVUsRUFBRSxTQUFTLE1BQU0sTUFBSyxHQUFJLEtBQUssV0FBVyxhQUFhO0FBQzdELFVBQU0sTUFBTTtBQUNaLFFBQUk7QUFDSixRQUFJLE9BQU8sV0FBVyxZQUFZO0FBQzlCLFlBQ0ksZUFBZSxTQUNULElBQUksU0FBUyxRQUFRLElBQ3JCLE9BQU8sS0FBSyxJQUFJLE1BQU0sRUFBRSxTQUFTLFFBQVE7QUFBQSxJQUMvRCxXQUNpQixPQUFPLFNBQVMsWUFBWTtBQUNqQyxVQUFJLElBQUk7QUFDUixlQUFTLElBQUksR0FBRyxJQUFJLElBQUksUUFBUSxFQUFFO0FBQzlCLGFBQUssT0FBTyxhQUFhLElBQUksQ0FBQyxDQUFDO0FBQ25DLFlBQU0sS0FBSyxDQUFDO0FBQUEsSUFDeEIsT0FDYTtBQUNELFlBQU0sSUFBSSxNQUFNLDBGQUEwRjtBQUFBLElBQ3RIO0FBQ1EsUUFBSSxDQUFDO0FBQ0QsYUFBTyxPQUFPO0FBQ2xCLFFBQUksU0FBUyxPQUFPLGNBQWM7QUFDOUIsWUFBTSxZQUFZLEtBQUssSUFBSSxJQUFJLFFBQVEsWUFBWSxJQUFJLE9BQU8sUUFBUSxJQUFJLFFBQVEsZUFBZTtBQUNqRyxZQUFNLElBQUksS0FBSyxLQUFLLElBQUksU0FBUyxTQUFTO0FBQzFDLFlBQU0sUUFBUSxJQUFJLE1BQU0sQ0FBQztBQUN6QixlQUFTLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxLQUFLLFdBQVc7QUFDL0MsY0FBTSxDQUFDLElBQUksSUFBSSxPQUFPLEdBQUcsU0FBUztBQUFBLE1BQ2xEO0FBQ1ksWUFBTSxNQUFNLEtBQUssU0FBUyxPQUFPLGdCQUFnQixPQUFPLEdBQUc7QUFBQSxJQUN2RTtBQUNRLFdBQU8sZ0JBQWdCLEVBQUUsU0FBUyxNQUFNLE9BQU8sT0FBTyxLQUFLLFdBQVcsV0FBVztBQUFBLEVBQ3pGO0FBQ0E7QUMxREEsU0FBUyxhQUFhTyxNQUFLLFNBQVM7QUFDaEMsTUFBSSxNQUFNQSxJQUFHLEdBQUc7QUFDWixhQUFTLElBQUksR0FBRyxJQUFJQSxLQUFJLE1BQU0sUUFBUSxFQUFFLEdBQUc7QUFDdkMsVUFBSSxPQUFPQSxLQUFJLE1BQU0sQ0FBQztBQUN0QixVQUFJLE9BQU8sSUFBSTtBQUNYO0FBQUEsZUFDSyxNQUFNLElBQUksR0FBRztBQUNsQixZQUFJLEtBQUssTUFBTSxTQUFTO0FBQ3BCLGtCQUFRLGdEQUFnRDtBQUM1RCxjQUFNLE9BQU8sS0FBSyxNQUFNLENBQUMsS0FBSyxJQUFJLEtBQUssSUFBSSxPQUFPLElBQUksQ0FBQztBQUN2RCxZQUFJLEtBQUs7QUFDTCxlQUFLLElBQUksZ0JBQWdCLEtBQUssSUFBSSxnQkFDNUIsR0FBRyxLQUFLLGFBQWE7QUFBQSxFQUFLLEtBQUssSUFBSSxhQUFhLEtBQ2hELEtBQUs7QUFDZixZQUFJLEtBQUssU0FBUztBQUNkLGdCQUFNLEtBQUssS0FBSyxTQUFTLEtBQUs7QUFDOUIsYUFBRyxVQUFVLEdBQUcsVUFDVixHQUFHLEtBQUssT0FBTztBQUFBLEVBQUssR0FBRyxPQUFPLEtBQzlCLEtBQUs7QUFBQSxRQUMvQjtBQUNnQixlQUFPO0FBQUEsTUFDdkI7QUFDWSxNQUFBQSxLQUFJLE1BQU0sQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLElBQUk7QUFBQSxJQUM5RDtBQUFBLEVBQ0E7QUFFUSxZQUFRLGtDQUFrQztBQUM5QyxTQUFPQTtBQUNYO0FBQ0EsU0FBUyxZQUFZUCxTQUFRLFVBQVUsS0FBSztBQUN4QyxRQUFNLEVBQUUsU0FBUSxJQUFLO0FBQ3JCLFFBQU1pQixTQUFRLElBQUksUUFBUWpCLE9BQU07QUFDaEMsRUFBQWlCLE9BQU0sTUFBTTtBQUNaLE1BQUksSUFBSTtBQUNSLE1BQUksWUFBWSxPQUFPLFlBQVksT0FBTyxRQUFRO0FBQzlDLGFBQVMsTUFBTSxVQUFVO0FBQ3JCLFVBQUksT0FBTyxhQUFhO0FBQ3BCLGFBQUssU0FBUyxLQUFLLFVBQVUsT0FBTyxHQUFHLEdBQUcsRUFBRTtBQUNoRCxVQUFJLEtBQUs7QUFDVCxVQUFJLE1BQU0sUUFBUSxFQUFFLEdBQUc7QUFDbkIsWUFBSSxHQUFHLFdBQVcsR0FBRztBQUNqQixnQkFBTSxHQUFHLENBQUM7QUFDVixrQkFBUSxHQUFHLENBQUM7QUFBQSxRQUNoQztBQUVvQixnQkFBTSxJQUFJLFVBQVUsZ0NBQWdDLEVBQUUsRUFBRTtBQUFBLE1BQzVFLFdBQ3FCLE1BQU0sY0FBYyxRQUFRO0FBQ2pDLGNBQU0sT0FBTyxPQUFPLEtBQUssRUFBRTtBQUMzQixZQUFJLEtBQUssV0FBVyxHQUFHO0FBQ25CLGdCQUFNLEtBQUssQ0FBQztBQUNaLGtCQUFRLEdBQUcsR0FBRztBQUFBLFFBQ2xDLE9BQ3FCO0FBQ0QsZ0JBQU0sSUFBSSxVQUFVLG9DQUFvQyxLQUFLLE1BQU0sT0FBTztBQUFBLFFBQzlGO0FBQUEsTUFDQSxPQUNpQjtBQUNELGNBQU07QUFBQSxNQUN0QjtBQUNZLE1BQUFBLE9BQU0sTUFBTSxLQUFLLFdBQVcsS0FBSyxPQUFPLEdBQUcsQ0FBQztBQUFBLElBQ3hEO0FBQ0ksU0FBT0E7QUFDWDtBQUNBLE1BQU0sUUFBUTtBQUFBLEVBQ1YsWUFBWTtBQUFBLEVBQ1osU0FBUztBQUFBLEVBQ1QsS0FBSztBQUFBLEVBQ0wsU0FBUztBQUFBLEVBQ1QsWUFBWTtBQUNoQjtBQ3JFQSxNQUFNLGlCQUFpQixRQUFRO0FBQUEsRUFDM0IsY0FBYztBQUNWLFVBQU87QUFDUCxTQUFLLE1BQU0sUUFBUSxVQUFVLElBQUksS0FBSyxJQUFJO0FBQzFDLFNBQUssU0FBUyxRQUFRLFVBQVUsT0FBTyxLQUFLLElBQUk7QUFDaEQsU0FBSyxNQUFNLFFBQVEsVUFBVSxJQUFJLEtBQUssSUFBSTtBQUMxQyxTQUFLLE1BQU0sUUFBUSxVQUFVLElBQUksS0FBSyxJQUFJO0FBQzFDLFNBQUssTUFBTSxRQUFRLFVBQVUsSUFBSSxLQUFLLElBQUk7QUFDMUMsU0FBSyxNQUFNLFNBQVM7QUFBQSxFQUM1QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLSSxPQUFPLEdBQUcsS0FBSztBQUNYLFFBQUksQ0FBQztBQUNELGFBQU8sTUFBTSxPQUFPLENBQUM7QUFDekIsVUFBTWxCLE9BQU0sb0JBQUksSUFBSztBQUNyQixRQUFJLDJCQUFLO0FBQ0wsVUFBSSxTQUFTQSxJQUFHO0FBQ3BCLGVBQVcsUUFBUSxLQUFLLE9BQU87QUFDM0IsVUFBSSxLQUFLO0FBQ1QsVUFBSSxPQUFPLElBQUksR0FBRztBQUNkLGNBQU0sS0FBSyxLQUFLLEtBQUssSUFBSSxHQUFHO0FBQzVCLGdCQUFRLEtBQUssS0FBSyxPQUFPLEtBQUssR0FBRztBQUFBLE1BQ2pELE9BQ2lCO0FBQ0QsY0FBTSxLQUFLLE1BQU0sSUFBSSxHQUFHO0FBQUEsTUFDeEM7QUFDWSxVQUFJQSxLQUFJLElBQUksR0FBRztBQUNYLGNBQU0sSUFBSSxNQUFNLDhDQUE4QztBQUNsRSxNQUFBQSxLQUFJLElBQUksS0FBSyxLQUFLO0FBQUEsSUFDOUI7QUFDUSxXQUFPQTtBQUFBLEVBQ2Y7QUFBQSxFQUNJLE9BQU8sS0FBS0MsU0FBUSxVQUFVLEtBQUs7QUFDL0IsVUFBTWlCLFNBQVEsWUFBWWpCLFNBQVEsVUFBVSxHQUFHO0FBQy9DLFVBQU1rQixRQUFPLElBQUksS0FBTTtBQUN2QixJQUFBQSxNQUFLLFFBQVFELE9BQU07QUFDbkIsV0FBT0M7QUFBQSxFQUNmO0FBQ0E7QUFDQSxTQUFTLE1BQU07QUFDZixNQUFNLE9BQU87QUFBQSxFQUNULFlBQVk7QUFBQSxFQUNaLFVBQVUsV0FBUyxpQkFBaUI7QUFBQSxFQUNwQyxXQUFXO0FBQUEsRUFDWCxTQUFTO0FBQUEsRUFDVCxLQUFLO0FBQUEsRUFDTCxRQUFRWCxNQUFLLFNBQVM7QUFDbEIsVUFBTVUsU0FBUSxhQUFhVixNQUFLLE9BQU87QUFDdkMsVUFBTSxXQUFXLENBQUU7QUFDbkIsZUFBVyxFQUFFLFNBQVNVLE9BQU0sT0FBTztBQUMvQixVQUFJekIsV0FBUyxHQUFHLEdBQUc7QUFDZixZQUFJLFNBQVMsU0FBUyxJQUFJLEtBQUssR0FBRztBQUM5QixrQkFBUSxpREFBaUQsSUFBSSxLQUFLLEVBQUU7QUFBQSxRQUN4RixPQUNxQjtBQUNELG1CQUFTLEtBQUssSUFBSSxLQUFLO0FBQUEsUUFDM0M7QUFBQSxNQUNBO0FBQUEsSUFDQTtBQUNRLFdBQU8sT0FBTyxPQUFPLElBQUksU0FBUSxHQUFJeUIsTUFBSztBQUFBLEVBQzdDO0FBQUEsRUFDRCxZQUFZLENBQUNqQixTQUFRLFVBQVUsUUFBUSxTQUFTLEtBQUtBLFNBQVEsVUFBVSxHQUFHO0FBQzlFO0FDckVBLFNBQVMsY0FBYyxFQUFFLE9BQU8sT0FBTSxHQUFJLEtBQUs7QUFDM0MsUUFBTSxVQUFVLFFBQVEsVUFBVTtBQUNsQyxNQUFJLFVBQVUsUUFBUSxLQUFLLEtBQUssTUFBTTtBQUNsQyxXQUFPO0FBQ1gsU0FBTyxRQUFRLElBQUksUUFBUSxVQUFVLElBQUksUUFBUTtBQUNyRDtBQUNBLE1BQU0sVUFBVTtBQUFBLEVBQ1osVUFBVSxXQUFTLFVBQVU7QUFBQSxFQUM3QixTQUFTO0FBQUEsRUFDVCxLQUFLO0FBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixTQUFTLE1BQU0sSUFBSSxPQUFPLElBQUk7QUFBQSxFQUM5QixXQUFXO0FBQ2Y7QUFDQSxNQUFNLFdBQVc7QUFBQSxFQUNiLFVBQVUsV0FBUyxVQUFVO0FBQUEsRUFDN0IsU0FBUztBQUFBLEVBQ1QsS0FBSztBQUFBLEVBQ0wsTUFBTTtBQUFBLEVBQ04sU0FBUyxNQUFNLElBQUksT0FBTyxLQUFLO0FBQUEsRUFDL0IsV0FBVztBQUNmO0FDcEJBLE1BQU0sV0FBVztBQUFBLEVBQ2IsVUFBVSxXQUFTLE9BQU8sVUFBVTtBQUFBLEVBQ3BDLFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLFNBQVMsQ0FBQyxRQUFRLElBQUksTUFBTSxFQUFFLEVBQUUsa0JBQWtCLFFBQzVDLE1BQ0EsSUFBSSxDQUFDLE1BQU0sTUFDUCxPQUFPLG9CQUNQLE9BQU87QUFBQSxFQUNqQixXQUFXO0FBQ2Y7QUFDQSxNQUFNLFdBQVc7QUFBQSxFQUNiLFVBQVUsV0FBUyxPQUFPLFVBQVU7QUFBQSxFQUNwQyxTQUFTO0FBQUEsRUFDVCxLQUFLO0FBQUEsRUFDTCxRQUFRO0FBQUEsRUFDUixNQUFNO0FBQUEsRUFDTixTQUFTLENBQUMsUUFBUSxXQUFXLElBQUksUUFBUSxNQUFNLEVBQUUsQ0FBQztBQUFBLEVBQ2xELFVBQVUsTUFBTTtBQUNaLFVBQU0sTUFBTSxPQUFPLEtBQUssS0FBSztBQUM3QixXQUFPLFNBQVMsR0FBRyxJQUFJLElBQUksY0FBZSxJQUFHLGdCQUFnQixJQUFJO0FBQUEsRUFDekU7QUFDQTtBQUNBLE1BQU0sUUFBUTtBQUFBLEVBQ1YsVUFBVSxXQUFTLE9BQU8sVUFBVTtBQUFBLEVBQ3BDLFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLFFBQVEsS0FBSztBQUNULFVBQU0sT0FBTyxJQUFJLE9BQU8sV0FBVyxJQUFJLFFBQVEsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUN6RCxVQUFNLE1BQU0sSUFBSSxRQUFRLEdBQUc7QUFDM0IsUUFBSSxRQUFRLElBQUk7QUFDWixZQUFNLElBQUksSUFBSSxVQUFVLE1BQU0sQ0FBQyxFQUFFLFFBQVEsTUFBTSxFQUFFO0FBQ2pELFVBQUksRUFBRSxFQUFFLFNBQVMsQ0FBQyxNQUFNO0FBQ3BCLGFBQUssb0JBQW9CLEVBQUU7QUFBQSxJQUMzQztBQUNRLFdBQU87QUFBQSxFQUNWO0FBQUEsRUFDRCxXQUFXO0FBQ2Y7QUN6Q0EsTUFBTSxjQUFjLENBQUMsVUFBVSxPQUFPLFVBQVUsWUFBWSxPQUFPLFVBQVUsS0FBSztBQUNsRixTQUFTLFdBQVcsS0FBSyxRQUFRLE9BQU8sRUFBRSxZQUFXLEdBQUk7QUFDckQsUUFBTSxPQUFPLElBQUksQ0FBQztBQUNsQixNQUFJLFNBQVMsT0FBTyxTQUFTO0FBQ3pCLGNBQVU7QUFDZCxRQUFNLElBQUksVUFBVSxNQUFNLEVBQUUsUUFBUSxNQUFNLEVBQUU7QUFDNUMsTUFBSSxhQUFhO0FBQ2IsWUFBUSxPQUFLO0FBQUEsTUFDVCxLQUFLO0FBQ0QsY0FBTSxLQUFLLEdBQUc7QUFDZDtBQUFBLE1BQ0osS0FBSztBQUNELGNBQU0sS0FBSyxHQUFHO0FBQ2Q7QUFBQSxNQUNKLEtBQUs7QUFDRCxjQUFNLEtBQUssR0FBRztBQUNkO0FBQUEsSUFDaEI7QUFDUSxVQUFNMUQsS0FBSSxPQUFPLEdBQUc7QUFDcEIsV0FBTyxTQUFTLE1BQU0sT0FBTyxFQUFFLElBQUlBLEtBQUlBO0FBQUEsRUFDL0M7QUFDSSxRQUFNLElBQUksU0FBUyxLQUFLLEtBQUs7QUFDN0IsU0FBTyxTQUFTLE1BQU0sS0FBSyxJQUFJO0FBQ25DO0FBQ0EsU0FBUyxhQUFhLE1BQU0sT0FBTyxRQUFRO0FBQ3ZDLFFBQU0sRUFBRSxNQUFLLElBQUs7QUFDbEIsTUFBSSxZQUFZLEtBQUssR0FBRztBQUNwQixVQUFNLE1BQU0sTUFBTSxTQUFTLEtBQUs7QUFDaEMsV0FBTyxRQUFRLElBQUksTUFBTSxTQUFTLElBQUksT0FBTyxDQUFDLElBQUksU0FBUztBQUFBLEVBQ25FO0FBQ0ksU0FBTyxnQkFBZ0IsSUFBSTtBQUMvQjtBQUNBLE1BQU0sU0FBUztBQUFBLEVBQ1gsVUFBVTtBQUFBLEVBQ1YsU0FBUztBQUFBLEVBQ1QsS0FBSztBQUFBLEVBQ0wsUUFBUTtBQUFBLEVBQ1IsTUFBTTtBQUFBLEVBQ04sU0FBUyxDQUFDLEtBQUssVUFBVSxRQUFRLFdBQVcsS0FBSyxHQUFHLEdBQUcsR0FBRztBQUFBLEVBQzFELFdBQVcsVUFBUSxhQUFhLE1BQU0sR0FBRyxJQUFJO0FBQ2pEO0FBQ0EsTUFBTSxTQUFTO0FBQUEsRUFDWCxVQUFVO0FBQUEsRUFDVixTQUFTO0FBQUEsRUFDVCxLQUFLO0FBQUEsRUFDTCxRQUFRO0FBQUEsRUFDUixNQUFNO0FBQUEsRUFDTixTQUFTLENBQUMsS0FBSyxVQUFVLFFBQVEsV0FBVyxLQUFLLEdBQUcsR0FBRyxHQUFHO0FBQUEsRUFDMUQsV0FBVyxVQUFRLGFBQWEsTUFBTSxHQUFHLEdBQUc7QUFDaEQ7QUFDQSxNQUFNLE1BQU07QUFBQSxFQUNSLFVBQVU7QUFBQSxFQUNWLFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLFNBQVMsQ0FBQyxLQUFLLFVBQVUsUUFBUSxXQUFXLEtBQUssR0FBRyxJQUFJLEdBQUc7QUFBQSxFQUMzRCxXQUFXO0FBQ2Y7QUFDQSxNQUFNLFNBQVM7QUFBQSxFQUNYLFVBQVU7QUFBQSxFQUNWLFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLFFBQVE7QUFBQSxFQUNSLE1BQU07QUFBQSxFQUNOLFNBQVMsQ0FBQyxLQUFLLFVBQVUsUUFBUSxXQUFXLEtBQUssR0FBRyxJQUFJLEdBQUc7QUFBQSxFQUMzRCxXQUFXLFVBQVEsYUFBYSxNQUFNLElBQUksSUFBSTtBQUNsRDtBQ2hFQSxNQUFNLGdCQUFnQixRQUFRO0FBQUEsRUFDMUIsWUFBWTBELFNBQVE7QUFDaEIsVUFBTUEsT0FBTTtBQUNaLFNBQUssTUFBTSxRQUFRO0FBQUEsRUFDM0I7QUFBQSxFQUNJLElBQUksS0FBSztBQUNMLFFBQUk7QUFDSixRQUFJLE9BQU8sR0FBRztBQUNWLGFBQU87QUFBQSxhQUNGLE9BQ0wsT0FBTyxRQUFRLFlBQ2YsU0FBUyxPQUNULFdBQVcsT0FDWCxJQUFJLFVBQVU7QUFDZCxhQUFPLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSTtBQUFBO0FBRTdCLGFBQU8sSUFBSSxLQUFLLEtBQUssSUFBSTtBQUM3QixVQUFNLE9BQU8sU0FBUyxLQUFLLE9BQU8sS0FBSyxHQUFHO0FBQzFDLFFBQUksQ0FBQztBQUNELFdBQUssTUFBTSxLQUFLLElBQUk7QUFBQSxFQUNoQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLSSxJQUFJLEtBQUssVUFBVTtBQUNmLFVBQU0sT0FBTyxTQUFTLEtBQUssT0FBTyxHQUFHO0FBQ3JDLFdBQU8sQ0FBQyxZQUFZLE9BQU8sSUFBSSxJQUN6QlIsV0FBUyxLQUFLLEdBQUcsSUFDYixLQUFLLElBQUksUUFDVCxLQUFLLE1BQ1Q7QUFBQSxFQUNkO0FBQUEsRUFDSSxJQUFJLEtBQUssT0FBTztBQUNaLFFBQUksT0FBTyxVQUFVO0FBQ2pCLFlBQU0sSUFBSSxNQUFNLGlFQUFpRSxPQUFPLEtBQUssRUFBRTtBQUNuRyxVQUFNLE9BQU8sU0FBUyxLQUFLLE9BQU8sR0FBRztBQUNyQyxRQUFJLFFBQVEsQ0FBQyxPQUFPO0FBQ2hCLFdBQUssTUFBTSxPQUFPLEtBQUssTUFBTSxRQUFRLElBQUksR0FBRyxDQUFDO0FBQUEsSUFDekQsV0FDaUIsQ0FBQyxRQUFRLE9BQU87QUFDckIsV0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQztBQUFBLElBQ3pDO0FBQUEsRUFDQTtBQUFBLEVBQ0ksT0FBTyxHQUFHLEtBQUs7QUFDWCxXQUFPLE1BQU0sT0FBTyxHQUFHLEtBQUssR0FBRztBQUFBLEVBQ3ZDO0FBQUEsRUFDSSxTQUFTLEtBQUssV0FBVyxhQUFhO0FBQ2xDLFFBQUksQ0FBQztBQUNELGFBQU8sS0FBSyxVQUFVLElBQUk7QUFDOUIsUUFBSSxLQUFLLGlCQUFpQixJQUFJO0FBQzFCLGFBQU8sTUFBTSxTQUFTLE9BQU8sT0FBTyxDQUFFLEdBQUUsS0FBSyxFQUFFLGVBQWUsS0FBSSxDQUFFLEdBQUcsV0FBVyxXQUFXO0FBQUE7QUFFN0YsWUFBTSxJQUFJLE1BQU0scUNBQXFDO0FBQUEsRUFDakU7QUFBQSxFQUNJLE9BQU8sS0FBS1EsU0FBUSxVQUFVLEtBQUs7QUFDL0IsVUFBTSxFQUFFLFNBQVEsSUFBSztBQUNyQixVQUFNbUIsT0FBTSxJQUFJLEtBQUtuQixPQUFNO0FBQzNCLFFBQUksWUFBWSxPQUFPLFlBQVksT0FBTyxRQUFRO0FBQzlDLGVBQVMsU0FBUyxVQUFVO0FBQ3hCLFlBQUksT0FBTyxhQUFhO0FBQ3BCLGtCQUFRLFNBQVMsS0FBSyxVQUFVLE9BQU8sS0FBSztBQUNoRCxRQUFBbUIsS0FBSSxNQUFNLEtBQUssV0FBVyxPQUFPLE1BQU0sR0FBRyxDQUFDO0FBQUEsTUFDM0Q7QUFDUSxXQUFPQTtBQUFBLEVBQ2Y7QUFDQTtBQUNBLFFBQVEsTUFBTTtBQUNkLE1BQU0sTUFBTTtBQUFBLEVBQ1IsWUFBWTtBQUFBLEVBQ1osVUFBVSxXQUFTLGlCQUFpQjtBQUFBLEVBQ3BDLFdBQVc7QUFBQSxFQUNYLFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLFlBQVksQ0FBQ25CLFNBQVEsVUFBVSxRQUFRLFFBQVEsS0FBS0EsU0FBUSxVQUFVLEdBQUc7QUFBQSxFQUN6RSxRQUFRRCxNQUFLLFNBQVM7QUFDbEIsUUFBSSxNQUFNQSxJQUFHLEdBQUc7QUFDWixVQUFJQSxLQUFJLGlCQUFpQixJQUFJO0FBQ3pCLGVBQU8sT0FBTyxPQUFPLElBQUksUUFBTyxHQUFJQSxJQUFHO0FBQUE7QUFFdkMsZ0JBQVEscUNBQXFDO0FBQUEsSUFDN0Q7QUFFWSxjQUFRLGlDQUFpQztBQUM3QyxXQUFPQTtBQUFBLEVBQ2Y7QUFDQTtBQ3ZGQSxTQUFTLGlCQUFpQixLQUFLLFVBQVU7QUFDckMsUUFBTSxPQUFPLElBQUksQ0FBQztBQUNsQixRQUFNLFFBQVEsU0FBUyxPQUFPLFNBQVMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxJQUFJO0FBQ2hFLFFBQU0sTUFBTSxDQUFDLE1BQU0sV0FBVyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUM7QUFDbEQsUUFBTSxNQUFNLE1BQ1AsUUFBUSxNQUFNLEVBQUUsRUFDaEIsTUFBTSxHQUFHLEVBQ1QsT0FBTyxDQUFDRCxNQUFLLE1BQU1BLE9BQU0sSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDdEQsU0FBUSxTQUFTLE1BQU0sSUFBSSxFQUFFLElBQUksTUFBTTtBQUMzQztBQU1BLFNBQVMscUJBQXFCLE1BQU07QUFDaEMsTUFBSSxFQUFFLE1BQUssSUFBSztBQUNoQixNQUFJLE1BQU0sQ0FBQyxNQUFNO0FBQ2pCLE1BQUksT0FBTyxVQUFVO0FBQ2pCLFVBQU0sT0FBSyxPQUFPLENBQUM7QUFBQSxXQUNkLE1BQU0sS0FBSyxLQUFLLENBQUMsU0FBUyxLQUFLO0FBQ3BDLFdBQU8sZ0JBQWdCLElBQUk7QUFDL0IsTUFBSSxPQUFPO0FBQ1gsTUFBSSxRQUFRLEdBQUc7QUFDWCxXQUFPO0FBQ1AsYUFBUyxJQUFJLEVBQUU7QUFBQSxFQUN2QjtBQUNJLFFBQU0sTUFBTSxJQUFJLEVBQUU7QUFDbEIsUUFBTSxRQUFRLENBQUMsUUFBUSxHQUFHO0FBQzFCLE1BQUksUUFBUSxJQUFJO0FBQ1osVUFBTSxRQUFRLENBQUM7QUFBQSxFQUN2QixPQUNTO0FBQ0QsYUFBUyxRQUFRLE1BQU0sQ0FBQyxLQUFLO0FBQzdCLFVBQU0sUUFBUSxRQUFRLEdBQUc7QUFDekIsUUFBSSxTQUFTLElBQUk7QUFDYixlQUFTLFFBQVEsTUFBTSxDQUFDLEtBQUs7QUFDN0IsWUFBTSxRQUFRLEtBQUs7QUFBQSxJQUMvQjtBQUFBLEVBQ0E7QUFDSSxTQUFRLE9BQ0osTUFDSyxJQUFJLE9BQUssT0FBTyxDQUFDLEVBQUUsU0FBUyxHQUFHLEdBQUcsQ0FBQyxFQUNuQyxLQUFLLEdBQUcsRUFDUixRQUFRLGNBQWMsRUFBRTtBQUVyQztBQUNBLE1BQU0sVUFBVTtBQUFBLEVBQ1osVUFBVSxXQUFTLE9BQU8sVUFBVSxZQUFZLE9BQU8sVUFBVSxLQUFLO0FBQUEsRUFDdEUsU0FBUztBQUFBLEVBQ1QsS0FBSztBQUFBLEVBQ0wsUUFBUTtBQUFBLEVBQ1IsTUFBTTtBQUFBLEVBQ04sU0FBUyxDQUFDLEtBQUssVUFBVSxFQUFFLFlBQVcsTUFBTyxpQkFBaUIsS0FBSyxXQUFXO0FBQUEsRUFDOUUsV0FBVztBQUNmO0FBQ0EsTUFBTSxZQUFZO0FBQUEsRUFDZCxVQUFVLFdBQVMsT0FBTyxVQUFVO0FBQUEsRUFDcEMsU0FBUztBQUFBLEVBQ1QsS0FBSztBQUFBLEVBQ0wsUUFBUTtBQUFBLEVBQ1IsTUFBTTtBQUFBLEVBQ04sU0FBUyxTQUFPLGlCQUFpQixLQUFLLEtBQUs7QUFBQSxFQUMzQyxXQUFXO0FBQ2Y7QUFDQSxNQUFNLFlBQVk7QUFBQSxFQUNkLFVBQVUsV0FBUyxpQkFBaUI7QUFBQSxFQUNwQyxTQUFTO0FBQUEsRUFDVCxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJTCxNQUFNLE9BQU8sMkpBS0o7QUFBQSxFQUNULFFBQVEsS0FBSztBQUNULFVBQU0sUUFBUSxJQUFJLE1BQU0sVUFBVSxJQUFJO0FBQ3RDLFFBQUksQ0FBQztBQUNELFlBQU0sSUFBSSxNQUFNLHNEQUFzRDtBQUMxRSxVQUFNLEdBQUcsTUFBTSxPQUFPLEtBQUssTUFBTSxRQUFRLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTTtBQUNuRSxVQUFNLFdBQVcsTUFBTSxDQUFDLElBQUksUUFBUSxNQUFNLENBQUMsSUFBSSxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSTtBQUNyRSxRQUFJLE9BQU8sS0FBSyxJQUFJLE1BQU0sUUFBUSxHQUFHLEtBQUssUUFBUSxHQUFHLFVBQVUsR0FBRyxVQUFVLEdBQUcsUUFBUTtBQUN2RixVQUFNLEtBQUssTUFBTSxDQUFDO0FBQ2xCLFFBQUksTUFBTSxPQUFPLEtBQUs7QUFDbEIsVUFBSSxJQUFJLGlCQUFpQixJQUFJLEtBQUs7QUFDbEMsVUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJO0FBQ2QsYUFBSztBQUNULGNBQVEsTUFBUTtBQUFBLElBQzVCO0FBQ1EsV0FBTyxJQUFJLEtBQUssSUFBSTtBQUFBLEVBQ3ZCO0FBQUEsRUFDRCxXQUFXLENBQUMsRUFBRSxZQUFZLE1BQU0sY0FBYyxRQUFRLDBCQUEwQixFQUFFO0FBQ3RGO0FDcEZBLE1BQU0sU0FBUztBQUFBLEVBQ1g7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNKO0FDbkJBLE1BQU0sVUFBVSxvQkFBSSxJQUFJO0FBQUEsRUFDcEIsQ0FBQyxRQUFRRSxRQUFNO0FBQUEsRUFDZixDQUFDLFlBQVksQ0FBQyxLQUFLLEtBQUssTUFBTSxDQUFDO0FBQUEsRUFDL0IsQ0FBQyxRQUFRLFFBQVE7QUFBQSxFQUNqQixDQUFDLFVBQVVvQixNQUFRO0FBQUEsRUFDbkIsQ0FBQyxZQUFZQSxNQUFRO0FBQ3pCLENBQUM7QUFDRCxNQUFNLGFBQWE7QUFBQSxFQUNmO0FBQUEsRUFDQSxNQUFNO0FBQUEsRUFDVixPQUFJVjtBQUFBQSxFQUNKLFVBQUlEO0FBQUFBLEVBQ0osVUFBSUQ7QUFBQUEsRUFDQTtBQUFBLEVBQ0osS0FBSU87QUFBQUEsRUFDSixRQUFJQztBQUFBQSxFQUNKLFFBQUlGO0FBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0EsTUFBTTtBQUFBLEVBQ047QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0o7QUFDQSxNQUFNLGdCQUFnQjtBQUFBLEVBQ2xCLDRCQUE0QjtBQUFBLEVBQzVCLDJCQUEyQjtBQUFBLEVBQzNCLDBCQUEwQjtBQUFBLEVBQzFCLDJCQUEyQjtBQUFBLEVBQzNCLHlCQUF5QjtBQUFBLEVBQ3pCLCtCQUErQjtBQUNuQztBQUNBLFNBQVMsUUFBUSxZQUFZLFlBQVksYUFBYTtBQUNsRCxRQUFNLGFBQWEsUUFBUSxJQUFJLFVBQVU7QUFDekMsTUFBSSxjQUFjLENBQUMsWUFBWTtBQUMzQixXQUFPLGVBQWUsQ0FBQyxXQUFXLFNBQVMsS0FBSyxJQUMxQyxXQUFXLE9BQU8sS0FBSyxJQUN2QixXQUFXLE1BQU87QUFBQSxFQUNoQztBQUNJLE1BQUksT0FBTztBQUNYLE1BQUksQ0FBQyxNQUFNO0FBQ1AsUUFBSSxNQUFNLFFBQVEsVUFBVTtBQUN4QixhQUFPLENBQUU7QUFBQSxTQUNSO0FBQ0QsWUFBTSxPQUFPLE1BQU0sS0FBSyxRQUFRLEtBQU0sR0FDakMsT0FBTyxTQUFPLFFBQVEsUUFBUSxFQUM5QixJQUFJLFNBQU8sS0FBSyxVQUFVLEdBQUcsQ0FBQyxFQUM5QixLQUFLLElBQUk7QUFDZCxZQUFNLElBQUksTUFBTSxtQkFBbUIsVUFBVSxpQkFBaUIsSUFBSSw2QkFBNkI7QUFBQSxJQUMzRztBQUFBLEVBQ0E7QUFDSSxNQUFJLE1BQU0sUUFBUSxVQUFVLEdBQUc7QUFDM0IsZUFBVyxPQUFPO0FBQ2QsYUFBTyxLQUFLLE9BQU8sR0FBRztBQUFBLEVBQ2xDLFdBQ2EsT0FBTyxlQUFlLFlBQVk7QUFDdkMsV0FBTyxXQUFXLEtBQUssT0FBTztBQUFBLEVBQ3RDO0FBQ0ksTUFBSTtBQUNBLFdBQU8sS0FBSyxPQUFPLEtBQUs7QUFDNUIsU0FBTyxLQUFLLE9BQU8sQ0FBQ08sT0FBTSxRQUFRO0FBQzlCLFVBQU0sU0FBUyxPQUFPLFFBQVEsV0FBVyxXQUFXLEdBQUcsSUFBSTtBQUMzRCxRQUFJLENBQUMsUUFBUTtBQUNULFlBQU0sVUFBVSxLQUFLLFVBQVUsR0FBRztBQUNsQyxZQUFNLE9BQU8sT0FBTyxLQUFLLFVBQVUsRUFDOUIsSUFBSSxTQUFPLEtBQUssVUFBVSxHQUFHLENBQUMsRUFDOUIsS0FBSyxJQUFJO0FBQ2QsWUFBTSxJQUFJLE1BQU0sc0JBQXNCLE9BQU8sZ0JBQWdCLElBQUksRUFBRTtBQUFBLElBQy9FO0FBQ1EsUUFBSSxDQUFDQSxNQUFLLFNBQVMsTUFBTTtBQUNyQixNQUFBQSxNQUFLLEtBQUssTUFBTTtBQUNwQixXQUFPQTtBQUFBLEVBQ1YsR0FBRSxFQUFFO0FBQ1Q7QUN2RkEsTUFBTSxzQkFBc0IsQ0FBQyxHQUFHLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sSUFBSTtBQUMvRSxNQUFNLE9BQU87QUFBQSxFQUNULFlBQVksRUFBRSxRQUFRLFlBQVksT0FBQUMsUUFBTyxrQkFBa0IsUUFBQXRCLFNBQVEsZ0JBQWdCLG9CQUFvQjtBQUNuRyxTQUFLLFNBQVMsTUFBTSxRQUFRLE1BQU0sSUFDNUIsUUFBUSxRQUFRLFFBQVEsSUFDeEIsU0FDSSxRQUFRLE1BQU0sTUFBTSxJQUNwQjtBQUNWLFNBQUssT0FBUSxPQUFPQSxZQUFXLFlBQVlBLFdBQVc7QUFDdEQsU0FBSyxZQUFZLG1CQUFtQixnQkFBZ0IsQ0FBRTtBQUN0RCxTQUFLLE9BQU8sUUFBUSxZQUFZLEtBQUssTUFBTXNCLE1BQUs7QUFDaEQsU0FBSyxrQkFBa0Isb0JBQW9CO0FBQzNDLFdBQU8sZUFBZSxNQUFNLEtBQUssRUFBRSxPQUFPLEtBQUs7QUFDL0MsV0FBTyxlQUFlLE1BQU0vQixVQUFRLEVBQUUsT0FBTyxRQUFRO0FBQ3JELFdBQU8sZUFBZSxNQUFNLEtBQUssRUFBRSxPQUFPLEtBQUs7QUFFL0MsU0FBSyxpQkFDRCxPQUFPLG1CQUFtQixhQUNwQixpQkFDQSxtQkFBbUIsT0FDZixzQkFDQTtBQUFBLEVBQ3RCO0FBQUEsRUFDSSxRQUFRO0FBQ0osVUFBTU0sUUFBTyxPQUFPLE9BQU8sT0FBTyxXQUFXLE9BQU8sMEJBQTBCLElBQUksQ0FBQztBQUNuRixJQUFBQSxNQUFLLE9BQU8sS0FBSyxLQUFLLE1BQU87QUFDN0IsV0FBT0E7QUFBQSxFQUNmO0FBQ0E7QUM5QkEsU0FBUyxrQkFBa0IsS0FBSyxTQUFTOztBQUNyQyxRQUFNLFFBQVEsQ0FBRTtBQUNoQixNQUFJLGdCQUFnQixRQUFRLGVBQWU7QUFDM0MsTUFBSSxRQUFRLGVBQWUsU0FBUyxJQUFJLFlBQVk7QUFDaEQsVUFBTSxNQUFNLElBQUksV0FBVyxTQUFTLEdBQUc7QUFDdkMsUUFBSSxLQUFLO0FBQ0wsWUFBTSxLQUFLLEdBQUc7QUFDZCxzQkFBZ0I7QUFBQSxJQUM1QixXQUNpQixJQUFJLFdBQVc7QUFDcEIsc0JBQWdCO0FBQUEsRUFDNUI7QUFDSSxNQUFJO0FBQ0EsVUFBTSxLQUFLLEtBQUs7QUFDcEIsUUFBTSxNQUFNLHVCQUF1QixLQUFLLE9BQU87QUFDL0MsUUFBTSxFQUFFLGtCQUFrQixJQUFJO0FBQzlCLE1BQUksSUFBSSxlQUFlO0FBQ25CLFFBQUksTUFBTSxXQUFXO0FBQ2pCLFlBQU0sUUFBUSxFQUFFO0FBQ3BCLFVBQU0sS0FBSyxjQUFjLElBQUksYUFBYTtBQUMxQyxVQUFNLFFBQVEsY0FBYyxJQUFJLEVBQUUsQ0FBQztBQUFBLEVBQzNDO0FBQ0ksTUFBSSxZQUFZO0FBQ2hCLE1BQUksaUJBQWlCO0FBQ3JCLE1BQUksSUFBSSxVQUFVO0FBQ2QsUUFBSSxPQUFPLElBQUksUUFBUSxHQUFHO0FBQ3RCLFVBQUksSUFBSSxTQUFTLGVBQWU7QUFDNUIsY0FBTSxLQUFLLEVBQUU7QUFDakIsVUFBSSxJQUFJLFNBQVMsZUFBZTtBQUM1QixjQUFNLEtBQUssY0FBYyxJQUFJLFNBQVMsYUFBYTtBQUNuRCxjQUFNLEtBQUssY0FBYyxJQUFJLEVBQUUsQ0FBQztBQUFBLE1BQ2hEO0FBRVksVUFBSSxtQkFBbUIsQ0FBQyxDQUFDLElBQUk7QUFDN0IsdUJBQWlCLElBQUksU0FBUztBQUFBLElBQzFDO0FBQ1EsVUFBTSxjQUFjLGlCQUFpQixTQUFZLE1BQU8sWUFBWTtBQUNwRSxRQUFJLE9BQU9RLFlBQVUsSUFBSSxVQUFVLEtBQUssTUFBTyxpQkFBaUIsTUFBTyxXQUFXO0FBQ2xGLFFBQUk7QUFDQSxjQUFRLFlBQVksTUFBTSxJQUFJLGNBQWMsY0FBYyxDQUFDO0FBQy9ELFNBQUssS0FBSyxDQUFDLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxRQUNoQyxNQUFNLE1BQU0sU0FBUyxDQUFDLE1BQU0sT0FBTztBQUduQyxZQUFNLE1BQU0sU0FBUyxDQUFDLElBQUksT0FBTyxJQUFJO0FBQUEsSUFDakQ7QUFFWSxZQUFNLEtBQUssSUFBSTtBQUFBLEVBQzNCLE9BQ1M7QUFDRCxVQUFNLEtBQUtBLFlBQVUsSUFBSSxVQUFVLEdBQUcsQ0FBQztBQUFBLEVBQy9DO0FBQ0ksT0FBSSxTQUFJLGVBQUosbUJBQWdCLFFBQVE7QUFDeEIsUUFBSSxJQUFJLFNBQVM7QUFDYixZQUFNLEtBQUssY0FBYyxJQUFJLE9BQU87QUFDcEMsVUFBSSxHQUFHLFNBQVMsSUFBSSxHQUFHO0FBQ25CLGNBQU0sS0FBSyxLQUFLO0FBQ2hCLGNBQU0sS0FBSyxjQUFjLElBQUksRUFBRSxDQUFDO0FBQUEsTUFDaEQsT0FDaUI7QUFDRCxjQUFNLEtBQUssT0FBTyxFQUFFLEVBQUU7QUFBQSxNQUN0QztBQUFBLElBQ0EsT0FDYTtBQUNELFlBQU0sS0FBSyxLQUFLO0FBQUEsSUFDNUI7QUFBQSxFQUNBLE9BQ1M7QUFDRCxRQUFJLEtBQUssSUFBSTtBQUNiLFFBQUksTUFBTTtBQUNOLFdBQUssR0FBRyxRQUFRLFFBQVEsRUFBRTtBQUM5QixRQUFJLElBQUk7QUFDSixXQUFLLENBQUMsYUFBYSxtQkFBbUIsTUFBTSxNQUFNLFNBQVMsQ0FBQyxNQUFNO0FBQzlELGNBQU0sS0FBSyxFQUFFO0FBQ2pCLFlBQU0sS0FBSyxjQUFjLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUFBLElBQzNEO0FBQUEsRUFDQTtBQUNJLFNBQU8sTUFBTSxLQUFLLElBQUksSUFBSTtBQUM5QjtBQ3RFQSxNQUFNLFNBQVM7QUFBQSxFQUNYLFlBQVksT0FBTyxVQUFVLFNBQVM7QUFFbEMsU0FBSyxnQkFBZ0I7QUFFckIsU0FBSyxVQUFVO0FBRWYsU0FBSyxTQUFTLENBQUU7QUFFaEIsU0FBSyxXQUFXLENBQUU7QUFDbEIsV0FBTyxlQUFlLE1BQU0sV0FBVyxFQUFFLE9BQU8sS0FBSztBQUNyRCxRQUFJLFlBQVk7QUFDaEIsUUFBSSxPQUFPLGFBQWEsY0FBYyxNQUFNLFFBQVEsUUFBUSxHQUFHO0FBQzNELGtCQUFZO0FBQUEsSUFDeEIsV0FDaUIsWUFBWSxVQUFhLFVBQVU7QUFDeEMsZ0JBQVU7QUFDVixpQkFBVztBQUFBLElBQ3ZCO0FBQ1EsVUFBTSxNQUFNLE9BQU8sT0FBTztBQUFBLE1BQ3RCLGFBQWE7QUFBQSxNQUNiLGtCQUFrQjtBQUFBLE1BQ2xCLFVBQVU7QUFBQSxNQUNWLGNBQWM7QUFBQSxNQUNkLFFBQVE7QUFBQSxNQUNSLFlBQVk7QUFBQSxNQUNaLFlBQVk7QUFBQSxNQUNaLFNBQVM7QUFBQSxJQUNaLEdBQUUsT0FBTztBQUNWLFNBQUssVUFBVTtBQUNmLFFBQUksRUFBRSxRQUFPLElBQUs7QUFDbEIsUUFBSSxtQ0FBUyxhQUFhO0FBQ3RCLFdBQUssYUFBYSxRQUFRLFlBQVksV0FBWTtBQUNsRCxVQUFJLEtBQUssV0FBVyxLQUFLO0FBQ3JCLGtCQUFVLEtBQUssV0FBVyxLQUFLO0FBQUEsSUFDL0M7QUFFWSxXQUFLLGFBQWEsSUFBSSxXQUFXLEVBQUUsUUFBTyxDQUFFO0FBQ2hELFNBQUssVUFBVSxTQUFTLE9BQU87QUFFL0IsU0FBSyxXQUNELFVBQVUsU0FBWSxPQUFPLEtBQUssV0FBVyxPQUFPLFdBQVcsT0FBTztBQUFBLEVBQ2xGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUksUUFBUTtBQUNKLFVBQU1SLFFBQU8sT0FBTyxPQUFPLFNBQVMsV0FBVztBQUFBLE1BQzNDLENBQUMsU0FBUyxHQUFHLEVBQUUsT0FBTyxJQUFHO0FBQUEsSUFDckMsQ0FBUztBQUNELElBQUFBLE1BQUssZ0JBQWdCLEtBQUs7QUFDMUIsSUFBQUEsTUFBSyxVQUFVLEtBQUs7QUFDcEIsSUFBQUEsTUFBSyxTQUFTLEtBQUssT0FBTyxNQUFPO0FBQ2pDLElBQUFBLE1BQUssV0FBVyxLQUFLLFNBQVMsTUFBTztBQUNyQyxJQUFBQSxNQUFLLFVBQVUsT0FBTyxPQUFPLENBQUUsR0FBRSxLQUFLLE9BQU87QUFDN0MsUUFBSSxLQUFLO0FBQ0wsTUFBQUEsTUFBSyxhQUFhLEtBQUssV0FBVyxNQUFPO0FBQzdDLElBQUFBLE1BQUssU0FBUyxLQUFLLE9BQU8sTUFBTztBQUVqQyxJQUFBQSxNQUFLLFdBQVcsT0FBTyxLQUFLLFFBQVEsSUFDOUIsS0FBSyxTQUFTLE1BQU1BLE1BQUssTUFBTSxJQUMvQixLQUFLO0FBQ1gsUUFBSSxLQUFLO0FBQ0wsTUFBQUEsTUFBSyxRQUFRLEtBQUssTUFBTSxNQUFPO0FBQ25DLFdBQU9BO0FBQUEsRUFDZjtBQUFBO0FBQUEsRUFFSSxJQUFJLE9BQU87QUFDUCxRQUFJLGlCQUFpQixLQUFLLFFBQVE7QUFDOUIsV0FBSyxTQUFTLElBQUksS0FBSztBQUFBLEVBQ25DO0FBQUE7QUFBQSxFQUVJLE1BQU0sTUFBTSxPQUFPO0FBQ2YsUUFBSSxpQkFBaUIsS0FBSyxRQUFRO0FBQzlCLFdBQUssU0FBUyxNQUFNLE1BQU0sS0FBSztBQUFBLEVBQzNDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFVSSxZQUFZLE1BQU0sTUFBTTtBQUNwQixRQUFJLENBQUMsS0FBSyxRQUFRO0FBQ2QsWUFBTSxPQUFPLFlBQVksSUFBSTtBQUM3QixXQUFLO0FBQUEsTUFFRCxDQUFDLFFBQVEsS0FBSyxJQUFJLElBQUksSUFBSSxjQUFjLFFBQVEsS0FBSyxJQUFJLElBQUk7QUFBQSxJQUM3RTtBQUNRLFdBQU8sSUFBSSxNQUFNLEtBQUssTUFBTTtBQUFBLEVBQ3BDO0FBQUEsRUFDSSxXQUFXLE9BQU8sVUFBVSxTQUFTO0FBQ2pDLFFBQUksWUFBWTtBQUNoQixRQUFJLE9BQU8sYUFBYSxZQUFZO0FBQ2hDLGNBQVEsU0FBUyxLQUFLLEVBQUUsSUFBSSxNQUFPLEdBQUUsSUFBSSxLQUFLO0FBQzlDLGtCQUFZO0FBQUEsSUFDeEIsV0FDaUIsTUFBTSxRQUFRLFFBQVEsR0FBRztBQUM5QixZQUFNLFdBQVcsQ0FBQyxNQUFNLE9BQU8sTUFBTSxZQUFZLGFBQWEsVUFBVSxhQUFhO0FBQ3JGLFlBQU0sUUFBUSxTQUFTLE9BQU8sUUFBUSxFQUFFLElBQUksTUFBTTtBQUNsRCxVQUFJLE1BQU0sU0FBUztBQUNmLG1CQUFXLFNBQVMsT0FBTyxLQUFLO0FBQ3BDLGtCQUFZO0FBQUEsSUFDeEIsV0FDaUIsWUFBWSxVQUFhLFVBQVU7QUFDeEMsZ0JBQVU7QUFDVixpQkFBVztBQUFBLElBQ3ZCO0FBQ1EsVUFBTSxFQUFFLHVCQUF1QixjQUFjLE1BQU0sZUFBZSxVQUFVLFFBQVEsV0FBVyxDQUFFO0FBQ2pHLFVBQU0sRUFBRSxVQUFVLFlBQVksY0FBZSxJQUFHO0FBQUEsTUFBa0I7QUFBQTtBQUFBLE1BRWxFLGdCQUFnQjtBQUFBLElBQUc7QUFDbkIsVUFBTSxNQUFNO0FBQUEsTUFDUix1QkFBdUIseUJBQXlCO0FBQUEsTUFDaEQsZUFBZSxpQkFBaUI7QUFBQSxNQUNoQztBQUFBLE1BQ0E7QUFBQSxNQUNBLFVBQVU7QUFBQSxNQUNWLFFBQVEsS0FBSztBQUFBLE1BQ2I7QUFBQSxJQUNIO0FBQ0QsVUFBTSxPQUFPLFdBQVcsT0FBTyxLQUFLLEdBQUc7QUFDdkMsUUFBSSxRQUFRSixlQUFhLElBQUk7QUFDekIsV0FBSyxPQUFPO0FBQ2hCLGVBQVk7QUFDWixXQUFPO0FBQUEsRUFDZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLSSxXQUFXLEtBQUssT0FBTyxVQUFVLElBQUk7QUFDakMsVUFBTSxJQUFJLEtBQUssV0FBVyxLQUFLLE1BQU0sT0FBTztBQUM1QyxVQUFNLElBQUksS0FBSyxXQUFXLE9BQU8sTUFBTSxPQUFPO0FBQzlDLFdBQU8sSUFBSSxLQUFLLEdBQUcsQ0FBQztBQUFBLEVBQzVCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtJLE9BQU8sS0FBSztBQUNSLFdBQU8saUJBQWlCLEtBQUssUUFBUSxJQUFJLEtBQUssU0FBUyxPQUFPLEdBQUcsSUFBSTtBQUFBLEVBQzdFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtJLFNBQVMsTUFBTTtBQUNYLFFBQUksWUFBWSxJQUFJLEdBQUc7QUFDbkIsVUFBSSxLQUFLLFlBQVk7QUFDakIsZUFBTztBQUVYLFdBQUssV0FBVztBQUNoQixhQUFPO0FBQUEsSUFDbkI7QUFDUSxXQUFPLGlCQUFpQixLQUFLLFFBQVEsSUFDL0IsS0FBSyxTQUFTLFNBQVMsSUFBSSxJQUMzQjtBQUFBLEVBQ2Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNSSxJQUFJLEtBQUssWUFBWTtBQUNqQixXQUFPQSxlQUFhLEtBQUssUUFBUSxJQUMzQixLQUFLLFNBQVMsSUFBSSxLQUFLLFVBQVUsSUFDakM7QUFBQSxFQUNkO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUksTUFBTSxNQUFNLFlBQVk7QUFDcEIsUUFBSSxZQUFZLElBQUk7QUFDaEIsYUFBTyxDQUFDLGNBQWNELFdBQVMsS0FBSyxRQUFRLElBQ3RDLEtBQUssU0FBUyxRQUNkLEtBQUs7QUFDZixXQUFPQyxlQUFhLEtBQUssUUFBUSxJQUMzQixLQUFLLFNBQVMsTUFBTSxNQUFNLFVBQVUsSUFDcEM7QUFBQSxFQUNkO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJSSxJQUFJLEtBQUs7QUFDTCxXQUFPQSxlQUFhLEtBQUssUUFBUSxJQUFJLEtBQUssU0FBUyxJQUFJLEdBQUcsSUFBSTtBQUFBLEVBQ3RFO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJSSxNQUFNLE1BQU07QUFDUixRQUFJLFlBQVksSUFBSTtBQUNoQixhQUFPLEtBQUssYUFBYTtBQUM3QixXQUFPQSxlQUFhLEtBQUssUUFBUSxJQUFJLEtBQUssU0FBUyxNQUFNLElBQUksSUFBSTtBQUFBLEVBQ3pFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtJLElBQUksS0FBSyxPQUFPO0FBQ1osUUFBSSxLQUFLLFlBQVksTUFBTTtBQUV2QixXQUFLLFdBQVcsbUJBQW1CLEtBQUssUUFBUSxDQUFDLEdBQUcsR0FBRyxLQUFLO0FBQUEsSUFDeEUsV0FDaUIsaUJBQWlCLEtBQUssUUFBUSxHQUFHO0FBQ3RDLFdBQUssU0FBUyxJQUFJLEtBQUssS0FBSztBQUFBLElBQ3hDO0FBQUEsRUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLSSxNQUFNLE1BQU0sT0FBTztBQUNmLFFBQUksWUFBWSxJQUFJLEdBQUc7QUFFbkIsV0FBSyxXQUFXO0FBQUEsSUFDNUIsV0FDaUIsS0FBSyxZQUFZLE1BQU07QUFFNUIsV0FBSyxXQUFXLG1CQUFtQixLQUFLLFFBQVEsTUFBTSxLQUFLLElBQUksR0FBRyxLQUFLO0FBQUEsSUFDbkYsV0FDaUIsaUJBQWlCLEtBQUssUUFBUSxHQUFHO0FBQ3RDLFdBQUssU0FBUyxNQUFNLE1BQU0sS0FBSztBQUFBLElBQzNDO0FBQUEsRUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRSSxVQUFVLFNBQVMsVUFBVSxJQUFJO0FBQzdCLFFBQUksT0FBTyxZQUFZO0FBQ25CLGdCQUFVLE9BQU8sT0FBTztBQUM1QixRQUFJO0FBQ0osWUFBUSxTQUFPO0FBQUEsTUFDWCxLQUFLO0FBQ0QsWUFBSSxLQUFLO0FBQ0wsZUFBSyxXQUFXLEtBQUssVUFBVTtBQUFBO0FBRS9CLGVBQUssYUFBYSxJQUFJLFdBQVcsRUFBRSxTQUFTLE1BQUssQ0FBRTtBQUN2RCxjQUFNLEVBQUUsa0JBQWtCLE9BQU8sUUFBUSxXQUFZO0FBQ3JEO0FBQUEsTUFDSixLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQ0QsWUFBSSxLQUFLO0FBQ0wsZUFBSyxXQUFXLEtBQUssVUFBVTtBQUFBO0FBRS9CLGVBQUssYUFBYSxJQUFJLFdBQVcsRUFBRSxRQUFPLENBQUU7QUFDaEQsY0FBTSxFQUFFLGtCQUFrQixNQUFNLFFBQVEsT0FBUTtBQUNoRDtBQUFBLE1BQ0osS0FBSztBQUNELFlBQUksS0FBSztBQUNMLGlCQUFPLEtBQUs7QUFDaEIsY0FBTTtBQUNOO0FBQUEsTUFDSixTQUFTO0FBQ0wsY0FBTSxLQUFLLEtBQUssVUFBVSxPQUFPO0FBQ2pDLGNBQU0sSUFBSSxNQUFNLCtEQUErRCxFQUFFLEVBQUU7QUFBQSxNQUNuRztBQUFBLElBQ0E7QUFFUSxRQUFJLFFBQVEsa0JBQWtCO0FBQzFCLFdBQUssU0FBUyxRQUFRO0FBQUEsYUFDakI7QUFDTCxXQUFLLFNBQVMsSUFBSSxPQUFPLE9BQU8sT0FBTyxLQUFLLE9BQU8sQ0FBQztBQUFBO0FBRXBELFlBQU0sSUFBSSxNQUFNLHFFQUFxRTtBQUFBLEVBQ2pHO0FBQUE7QUFBQSxFQUVJLEtBQUssRUFBRSxNQUFNLFNBQVMsVUFBVSxlQUFlLFVBQVUsUUFBUyxJQUFHLElBQUk7QUFDckUsVUFBTSxNQUFNO0FBQUEsTUFDUixTQUFTLG9CQUFJLElBQUs7QUFBQSxNQUNsQixLQUFLO0FBQUEsTUFDTCxNQUFNLENBQUM7QUFBQSxNQUNQLFVBQVUsYUFBYTtBQUFBLE1BQ3ZCLGNBQWM7QUFBQSxNQUNkLGVBQWUsT0FBTyxrQkFBa0IsV0FBVyxnQkFBZ0I7QUFBQSxJQUN0RTtBQUNELFVBQU0sTUFBTSxLQUFLLEtBQUssVUFBVSxXQUFXLElBQUksR0FBRztBQUNsRCxRQUFJLE9BQU8sYUFBYTtBQUNwQixpQkFBVyxFQUFFLE9BQU8sS0FBQUssS0FBSyxLQUFJLElBQUksUUFBUSxPQUFRO0FBQzdDLGlCQUFTQSxNQUFLLEtBQUs7QUFDM0IsV0FBTyxPQUFPLFlBQVksYUFDcEIsYUFBYSxTQUFTLEVBQUUsSUFBSSxJQUFLLEdBQUUsSUFBSSxHQUFHLElBQzFDO0FBQUEsRUFDZDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0ksT0FBTyxTQUFTLFVBQVU7QUFDdEIsV0FBTyxLQUFLLEtBQUssRUFBRSxNQUFNLE1BQU0sU0FBUyxVQUFVLE9BQU8sVUFBVTtBQUFBLEVBQzNFO0FBQUE7QUFBQSxFQUVJLFNBQVMsVUFBVSxJQUFJO0FBQ25CLFFBQUksS0FBSyxPQUFPLFNBQVM7QUFDckIsWUFBTSxJQUFJLE1BQU0sNENBQTRDO0FBQ2hFLFFBQUksWUFBWSxZQUNYLENBQUMsT0FBTyxVQUFVLFFBQVEsTUFBTSxLQUFLLE9BQU8sUUFBUSxNQUFNLEtBQUssSUFBSTtBQUNwRSxZQUFNLElBQUksS0FBSyxVQUFVLFFBQVEsTUFBTTtBQUN2QyxZQUFNLElBQUksTUFBTSxtREFBbUQsQ0FBQyxFQUFFO0FBQUEsSUFDbEY7QUFDUSxXQUFPLGtCQUFrQixNQUFNLE9BQU87QUFBQSxFQUM5QztBQUNBO0FBQ0EsU0FBUyxpQkFBaUIsVUFBVTtBQUNoQyxNQUFJTCxlQUFhLFFBQVE7QUFDckIsV0FBTztBQUNYLFFBQU0sSUFBSSxNQUFNLGlEQUFpRDtBQUNyRTtBQzVVQSxNQUFNLGtCQUFrQixNQUFNO0FBQUEsRUFDMUIsWUFBWSxNQUFNLEtBQUssTUFBTSxTQUFTO0FBQ2xDLFVBQU87QUFDUCxTQUFLLE9BQU87QUFDWixTQUFLLE9BQU87QUFDWixTQUFLLFVBQVU7QUFDZixTQUFLLE1BQU07QUFBQSxFQUNuQjtBQUNBO0FBQ0EsTUFBTSx1QkFBdUIsVUFBVTtBQUFBLEVBQ25DLFlBQVksS0FBSyxNQUFNLFNBQVM7QUFDNUIsVUFBTSxrQkFBa0IsS0FBSyxNQUFNLE9BQU87QUFBQSxFQUNsRDtBQUNBO0FBQ0EsTUFBTSxvQkFBb0IsVUFBVTtBQUFBLEVBQ2hDLFlBQVksS0FBSyxNQUFNLFNBQVM7QUFDNUIsVUFBTSxlQUFlLEtBQUssTUFBTSxPQUFPO0FBQUEsRUFDL0M7QUFDQTtBQUNBLE1BQU0sZ0JBQWdCLENBQUMsS0FBSyxPQUFPLENBQUMsVUFBVTtBQUMxQyxNQUFJLE1BQU0sSUFBSSxDQUFDLE1BQU07QUFDakI7QUFDSixRQUFNLFVBQVUsTUFBTSxJQUFJLElBQUksU0FBTyxHQUFHLFFBQVEsR0FBRyxDQUFDO0FBQ3BELFFBQU0sRUFBRSxNQUFNLElBQUcsSUFBSyxNQUFNLFFBQVEsQ0FBQztBQUNyQyxRQUFNLFdBQVcsWUFBWSxJQUFJLFlBQVksR0FBRztBQUNoRCxNQUFJLEtBQUssTUFBTTtBQUNmLE1BQUksVUFBVSxJQUNULFVBQVUsR0FBRyxXQUFXLE9BQU8sQ0FBQyxHQUFHLEdBQUcsV0FBVyxJQUFJLENBQUMsRUFDdEQsUUFBUSxZQUFZLEVBQUU7QUFFM0IsTUFBSSxNQUFNLE1BQU0sUUFBUSxTQUFTLElBQUk7QUFDakMsVUFBTSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUksUUFBUSxTQUFTLEVBQUU7QUFDdkQsY0FBVSxNQUFNLFFBQVEsVUFBVSxTQUFTO0FBQzNDLFVBQU0sWUFBWTtBQUFBLEVBQzFCO0FBQ0ksTUFBSSxRQUFRLFNBQVM7QUFDakIsY0FBVSxRQUFRLFVBQVUsR0FBRyxFQUFFLElBQUk7QUFFekMsTUFBSSxPQUFPLEtBQUssT0FBTyxLQUFLLFFBQVEsVUFBVSxHQUFHLEVBQUUsQ0FBQyxHQUFHO0FBRW5ELFFBQUksT0FBTyxJQUFJLFVBQVUsR0FBRyxXQUFXLE9BQU8sQ0FBQyxHQUFHLEdBQUcsV0FBVyxPQUFPLENBQUMsQ0FBQztBQUN6RSxRQUFJLEtBQUssU0FBUztBQUNkLGFBQU8sS0FBSyxVQUFVLEdBQUcsRUFBRSxJQUFJO0FBQ25DLGNBQVUsT0FBTztBQUFBLEVBQ3pCO0FBQ0ksTUFBSSxPQUFPLEtBQUssT0FBTyxHQUFHO0FBQ3RCLFFBQUksUUFBUTtBQUNaLFVBQU0sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUMzQixRQUFJLE9BQU8sSUFBSSxTQUFTLFFBQVEsSUFBSSxNQUFNLEtBQUs7QUFDM0MsY0FBUSxLQUFLLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssS0FBSyxFQUFFLENBQUM7QUFBQSxJQUNoRTtBQUNRLFVBQU0sVUFBVSxJQUFJLE9BQU8sRUFBRSxJQUFJLElBQUksT0FBTyxLQUFLO0FBQ2pELFVBQU0sV0FBVzs7QUFBQSxFQUFRLE9BQU87QUFBQSxFQUFLLE9BQU87QUFBQTtBQUFBLEVBQ3BEO0FBQ0E7QUN0REEsU0FBUyxhQUFhLFFBQVEsRUFBRSxNQUFNLFdBQVcsTUFBTSxRQUFRLFNBQVMsY0FBYyxrQkFBa0I7QUFDcEcsTUFBSSxjQUFjO0FBQ2xCLE1BQUksWUFBWTtBQUNoQixNQUFJLFdBQVc7QUFDZixNQUFJLFVBQVU7QUFDZCxNQUFJLGFBQWE7QUFDakIsTUFBSSxhQUFhO0FBQ2pCLE1BQUksV0FBVztBQUNmLE1BQUksTUFBTTtBQUNWLE1BQUksU0FBUztBQUNiLE1BQUksTUFBTTtBQUNWLE1BQUksbUJBQW1CO0FBQ3ZCLE1BQUksUUFBUTtBQUNaLE1BQUksUUFBUTtBQUNaLE1BQUksUUFBUTtBQUNaLGFBQVcsU0FBUyxRQUFRO0FBQ3hCLFFBQUksVUFBVTtBQUNWLFVBQUksTUFBTSxTQUFTLFdBQ2YsTUFBTSxTQUFTLGFBQ2YsTUFBTSxTQUFTO0FBQ2YsZ0JBQVEsTUFBTSxRQUFRLGdCQUFnQix1RUFBdUU7QUFDakgsaUJBQVc7QUFBQSxJQUN2QjtBQUNRLFFBQUksS0FBSztBQUNMLFVBQUksYUFBYSxNQUFNLFNBQVMsYUFBYSxNQUFNLFNBQVMsV0FBVztBQUNuRSxnQkFBUSxLQUFLLGlCQUFpQixxQ0FBcUM7QUFBQSxNQUNuRjtBQUNZLFlBQU07QUFBQSxJQUNsQjtBQUNRLFlBQVEsTUFBTSxNQUFJO0FBQUEsTUFDZCxLQUFLO0FBSUQsWUFBSSxDQUFDLFNBQ0EsY0FBYyxnQkFBZSw2QkFBTSxVQUFTLHNCQUM3QyxNQUFNLE9BQU8sU0FBUyxHQUFJLEdBQUc7QUFDN0IsZ0JBQU07QUFBQSxRQUMxQjtBQUNnQixtQkFBVztBQUNYO0FBQUEsTUFDSixLQUFLLFdBQVc7QUFDWixZQUFJLENBQUM7QUFDRCxrQkFBUSxPQUFPLGdCQUFnQix3RUFBd0U7QUFDM0csY0FBTSxLQUFLLE1BQU0sT0FBTyxVQUFVLENBQUMsS0FBSztBQUN4QyxZQUFJLENBQUM7QUFDRCxvQkFBVTtBQUFBO0FBRVYscUJBQVcsYUFBYTtBQUM1QixxQkFBYTtBQUNiLG9CQUFZO0FBQ1o7QUFBQSxNQUNoQjtBQUFBLE1BQ1ksS0FBSztBQUNELFlBQUksV0FBVztBQUNYLGNBQUk7QUFDQSx1QkFBVyxNQUFNO0FBQUE7QUFFakIsMEJBQWM7QUFBQSxRQUN0QztBQUVvQix3QkFBYyxNQUFNO0FBQ3hCLG9CQUFZO0FBQ1oscUJBQWE7QUFDYixZQUFJLFVBQVU7QUFDViw2QkFBbUI7QUFDdkIsbUJBQVc7QUFDWDtBQUFBLE1BQ0osS0FBSztBQUNELFlBQUk7QUFDQSxrQkFBUSxPQUFPLG9CQUFvQixvQ0FBb0M7QUFDM0UsWUFBSSxNQUFNLE9BQU8sU0FBUyxHQUFHO0FBQ3pCLGtCQUFRLE1BQU0sU0FBUyxNQUFNLE9BQU8sU0FBUyxHQUFHLGFBQWEsbUNBQW1DLElBQUk7QUFDeEcsaUJBQVM7QUFDVCxZQUFJLFVBQVU7QUFDVixrQkFBUSxNQUFNO0FBQ2xCLG9CQUFZO0FBQ1osbUJBQVc7QUFDWCxtQkFBVztBQUNYO0FBQUEsTUFDSixLQUFLLE9BQU87QUFDUixZQUFJO0FBQ0Esa0JBQVEsT0FBTyxpQkFBaUIsaUNBQWlDO0FBQ3JFLGNBQU07QUFDTixZQUFJLFVBQVU7QUFDVixrQkFBUSxNQUFNO0FBQ2xCLG9CQUFZO0FBQ1osbUJBQVc7QUFDWCxtQkFBVztBQUNYO0FBQUEsTUFDaEI7QUFBQSxNQUNZLEtBQUs7QUFFRCxZQUFJLFVBQVU7QUFDVixrQkFBUSxPQUFPLGtCQUFrQixzQ0FBc0MsTUFBTSxNQUFNLFlBQVk7QUFDbkcsWUFBSTtBQUNBLGtCQUFRLE9BQU8sb0JBQW9CLGNBQWMsTUFBTSxNQUFNLE9BQU8sUUFBUSxZQUFZLEVBQUU7QUFDOUYsZ0JBQVE7QUFDUixvQkFDSSxjQUFjLGtCQUFrQixjQUFjO0FBQ2xELG1CQUFXO0FBQ1g7QUFBQSxNQUNKLEtBQUs7QUFDRCxZQUFJLE1BQU07QUFDTixjQUFJO0FBQ0Esb0JBQVEsT0FBTyxvQkFBb0IsbUJBQW1CLElBQUksRUFBRTtBQUNoRSxrQkFBUTtBQUNSLHNCQUFZO0FBQ1oscUJBQVc7QUFDWDtBQUFBLFFBQ3BCO0FBQUE7QUFBQSxNQUVZO0FBQ0ksZ0JBQVEsT0FBTyxvQkFBb0IsY0FBYyxNQUFNLElBQUksUUFBUTtBQUNuRSxvQkFBWTtBQUNaLG1CQUFXO0FBQUEsSUFDM0I7QUFBQSxFQUNBO0FBQ0ksUUFBTSxPQUFPLE9BQU8sT0FBTyxTQUFTLENBQUM7QUFDckMsUUFBTSxNQUFNLE9BQU8sS0FBSyxTQUFTLEtBQUssT0FBTyxTQUFTO0FBQ3RELE1BQUksWUFDQSxRQUNBLEtBQUssU0FBUyxXQUNkLEtBQUssU0FBUyxhQUNkLEtBQUssU0FBUyxZQUNiLEtBQUssU0FBUyxZQUFZLEtBQUssV0FBVyxLQUFLO0FBQ2hELFlBQVEsS0FBSyxRQUFRLGdCQUFnQix1RUFBdUU7QUFBQSxFQUNwSDtBQUNJLE1BQUksUUFDRSxhQUFhLElBQUksVUFBVSxpQkFDekIsNkJBQU0sVUFBUyxnQkFDZiw2QkFBTSxVQUFTO0FBQ25CLFlBQVEsS0FBSyxpQkFBaUIscUNBQXFDO0FBQ3ZFLFNBQU87QUFBQSxJQUNIO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBLE9BQU8sU0FBUztBQUFBLEVBQ25CO0FBQ0w7QUNqSkEsU0FBUyxnQkFBZ0IsS0FBSztBQUMxQixNQUFJLENBQUM7QUFDRCxXQUFPO0FBQ1gsVUFBUSxJQUFJLE1BQUk7QUFBQSxJQUNaLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFDRCxVQUFJLElBQUksT0FBTyxTQUFTLElBQUk7QUFDeEIsZUFBTztBQUNYLFVBQUksSUFBSTtBQUNKLG1CQUFXLE1BQU0sSUFBSTtBQUNqQixjQUFJLEdBQUcsU0FBUztBQUNaLG1CQUFPO0FBQUE7QUFDbkIsYUFBTztBQUFBLElBQ1gsS0FBSztBQUNELGlCQUFXLE1BQU0sSUFBSSxPQUFPO0FBQ3hCLG1CQUFXLE1BQU0sR0FBRztBQUNoQixjQUFJLEdBQUcsU0FBUztBQUNaLG1CQUFPO0FBQ2YsWUFBSSxHQUFHO0FBQ0gscUJBQVcsTUFBTSxHQUFHO0FBQ2hCLGdCQUFJLEdBQUcsU0FBUztBQUNaLHFCQUFPO0FBQUE7QUFDbkIsWUFBSSxnQkFBZ0IsR0FBRyxHQUFHLEtBQUssZ0JBQWdCLEdBQUcsS0FBSztBQUNuRCxpQkFBTztBQUFBLE1BQzNCO0FBQ1ksYUFBTztBQUFBLElBQ1g7QUFDSSxhQUFPO0FBQUEsRUFDbkI7QUFDQTtBQzdCQSxTQUFTLGdCQUFnQixRQUFRLElBQUksU0FBUztBQUMxQyxPQUFJLHlCQUFJLFVBQVMsbUJBQW1CO0FBQ2hDLFVBQU0sTUFBTSxHQUFHLElBQUksQ0FBQztBQUNwQixRQUFJLElBQUksV0FBVyxXQUNkLElBQUksV0FBVyxPQUFPLElBQUksV0FBVyxRQUN0QyxnQkFBZ0IsRUFBRSxHQUFHO0FBQ3JCLFlBQU0sTUFBTTtBQUNaLGNBQVEsS0FBSyxjQUFjLEtBQUssSUFBSTtBQUFBLElBQ2hEO0FBQUEsRUFDQTtBQUNBO0FDVkEsU0FBUyxZQUFZLEtBQUssT0FBTyxRQUFRO0FBQ3JDLFFBQU0sRUFBRSxlQUFlLElBQUk7QUFDM0IsTUFBSSxlQUFlO0FBQ2YsV0FBTztBQUNYLFFBQU0sVUFBVSxPQUFPLGVBQWUsYUFDaEMsYUFDQSxDQUFDLEdBQUcsTUFBTSxNQUFNLEtBQU1ELFdBQVMsQ0FBQyxLQUFLQSxXQUFTLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtBQUN4RSxTQUFPLE1BQU0sS0FBSyxVQUFRLFFBQVEsS0FBSyxLQUFLLE1BQU0sQ0FBQztBQUN2RDtBQ0hBLE1BQU0sY0FBYztBQUNwQixTQUFTLGdCQUFnQixFQUFFLGFBQUErQixjQUFhLGtCQUFBQyxrQkFBZ0IsR0FBSSxLQUFLLElBQUksU0FBUyxLQUFLOztBQUMvRSxRQUFNLGFBQVksMkJBQUssY0FBYTtBQUNwQyxRQUFNekIsT0FBTSxJQUFJLFVBQVUsSUFBSSxNQUFNO0FBQ3BDLE1BQUksSUFBSTtBQUNKLFFBQUksU0FBUztBQUNqQixNQUFJLFNBQVMsR0FBRztBQUNoQixNQUFJLGFBQWE7QUFDakIsYUFBVyxZQUFZLEdBQUcsT0FBTztBQUM3QixVQUFNLEVBQUUsT0FBTyxLQUFLLEtBQUssTUFBTyxJQUFHO0FBRW5DLFVBQU0sV0FBVyxhQUFhLE9BQU87QUFBQSxNQUNqQyxXQUFXO0FBQUEsTUFDWCxNQUFNLFFBQU8sMkJBQU07QUFBQSxNQUNuQjtBQUFBLE1BQ0E7QUFBQSxNQUNBLGNBQWMsR0FBRztBQUFBLE1BQ2pCLGdCQUFnQjtBQUFBLElBQzVCLENBQVM7QUFDRCxVQUFNLGNBQWMsQ0FBQyxTQUFTO0FBQzlCLFFBQUksYUFBYTtBQUNiLFVBQUksS0FBSztBQUNMLFlBQUksSUFBSSxTQUFTO0FBQ2Isa0JBQVEsUUFBUSx5QkFBeUIseURBQXlEO0FBQUEsaUJBQzdGLFlBQVksT0FBTyxJQUFJLFdBQVcsR0FBRztBQUMxQyxrQkFBUSxRQUFRLGNBQWMsV0FBVztBQUFBLE1BQzdEO0FBQ1ksVUFBSSxDQUFDLFNBQVMsVUFBVSxDQUFDLFNBQVMsT0FBTyxDQUFDLEtBQUs7QUFDM0MscUJBQWEsU0FBUztBQUN0QixZQUFJLFNBQVMsU0FBUztBQUNsQixjQUFJQSxLQUFJO0FBQ0osWUFBQUEsS0FBSSxXQUFXLE9BQU8sU0FBUztBQUFBO0FBRS9CLFlBQUFBLEtBQUksVUFBVSxTQUFTO0FBQUEsUUFDL0M7QUFDZ0I7QUFBQSxNQUNoQjtBQUNZLFVBQUksU0FBUyxvQkFBb0IsZ0JBQWdCLEdBQUcsR0FBRztBQUNuRCxnQkFBUSxPQUFPLE1BQU0sTUFBTSxTQUFTLENBQUMsR0FBRywwQkFBMEIsMkNBQTJDO0FBQUEsTUFDN0g7QUFBQSxJQUNBLGFBQ2lCLGNBQVMsVUFBVCxtQkFBZ0IsWUFBVyxHQUFHLFFBQVE7QUFDM0MsY0FBUSxRQUFRLGNBQWMsV0FBVztBQUFBLElBQ3JEO0FBRVEsUUFBSSxRQUFRO0FBQ1osVUFBTSxXQUFXLFNBQVM7QUFDMUIsVUFBTSxVQUFVLE1BQ1Z3QixhQUFZLEtBQUssS0FBSyxVQUFVLE9BQU8sSUFDdkNDLGtCQUFpQixLQUFLLFVBQVUsT0FBTyxNQUFNLFVBQVUsT0FBTztBQUNwRSxRQUFJLElBQUksT0FBTztBQUNYLHNCQUFnQixHQUFHLFFBQVEsS0FBSyxPQUFPO0FBQzNDLFFBQUksUUFBUTtBQUNaLFFBQUksWUFBWSxLQUFLekIsS0FBSSxPQUFPLE9BQU87QUFDbkMsY0FBUSxVQUFVLGlCQUFpQix5QkFBeUI7QUFFaEUsVUFBTSxhQUFhLGFBQWEsT0FBTyxJQUFJO0FBQUEsTUFDdkMsV0FBVztBQUFBLE1BQ1gsTUFBTTtBQUFBLE1BQ04sUUFBUSxRQUFRLE1BQU0sQ0FBQztBQUFBLE1BQ3ZCO0FBQUEsTUFDQSxjQUFjLEdBQUc7QUFBQSxNQUNqQixnQkFBZ0IsQ0FBQyxPQUFPLElBQUksU0FBUztBQUFBLElBQ2pELENBQVM7QUFDRCxhQUFTLFdBQVc7QUFDcEIsUUFBSSxXQUFXLE9BQU87QUFDbEIsVUFBSSxhQUFhO0FBQ2IsYUFBSSwrQkFBTyxVQUFTLGVBQWUsQ0FBQyxXQUFXO0FBQzNDLGtCQUFRLFFBQVEseUJBQXlCLHFEQUFxRDtBQUNsRyxZQUFJLElBQUksUUFBUSxVQUNaLFNBQVMsUUFBUSxXQUFXLE1BQU0sU0FBUztBQUMzQyxrQkFBUSxRQUFRLE9BQU8sdUJBQXVCLDZGQUE2RjtBQUFBLE1BQy9KO0FBRVksWUFBTSxZQUFZLFFBQ1p3QixhQUFZLEtBQUssT0FBTyxZQUFZLE9BQU8sSUFDM0NDLGtCQUFpQixLQUFLLFFBQVEsS0FBSyxNQUFNLFlBQVksT0FBTztBQUNsRSxVQUFJLElBQUksT0FBTztBQUNYLHdCQUFnQixHQUFHLFFBQVEsT0FBTyxPQUFPO0FBQzdDLGVBQVMsVUFBVSxNQUFNLENBQUM7QUFDMUIsWUFBTSxPQUFPLElBQUksS0FBSyxTQUFTLFNBQVM7QUFDeEMsVUFBSSxJQUFJLFFBQVE7QUFDWixhQUFLLFdBQVc7QUFDcEIsTUFBQXpCLEtBQUksTUFBTSxLQUFLLElBQUk7QUFBQSxJQUMvQixPQUNhO0FBRUQsVUFBSTtBQUNBLGdCQUFRLFFBQVEsT0FBTyxnQkFBZ0IscURBQXFEO0FBQ2hHLFVBQUksV0FBVyxTQUFTO0FBQ3BCLFlBQUksUUFBUTtBQUNSLGtCQUFRLFdBQVcsT0FBTyxXQUFXO0FBQUE7QUFFckMsa0JBQVEsVUFBVSxXQUFXO0FBQUEsTUFDakQ7QUFDWSxZQUFNLE9BQU8sSUFBSSxLQUFLLE9BQU87QUFDN0IsVUFBSSxJQUFJLFFBQVE7QUFDWixhQUFLLFdBQVc7QUFDcEIsTUFBQUEsS0FBSSxNQUFNLEtBQUssSUFBSTtBQUFBLElBQy9CO0FBQUEsRUFDQTtBQUNJLE1BQUksY0FBYyxhQUFhO0FBQzNCLFlBQVEsWUFBWSxjQUFjLG1DQUFtQztBQUN6RSxFQUFBQSxLQUFJLFFBQVEsQ0FBQyxHQUFHLFFBQVEsUUFBUSxjQUFjLE1BQU07QUFDcEQsU0FBT0E7QUFDWDtBQzVHQSxTQUFTLGdCQUFnQixFQUFFLGFBQUF3QixjQUFhLGtCQUFBQyxrQkFBZ0IsR0FBSSxLQUFLLElBQUksU0FBUyxLQUFLO0FBQy9FLFFBQU0sYUFBWSwyQkFBSyxjQUFhO0FBQ3BDLFFBQU1qQixPQUFNLElBQUksVUFBVSxJQUFJLE1BQU07QUFDcEMsTUFBSSxJQUFJO0FBQ0osUUFBSSxTQUFTO0FBQ2pCLE1BQUksSUFBSTtBQUNKLFFBQUksUUFBUTtBQUNoQixNQUFJLFNBQVMsR0FBRztBQUNoQixNQUFJLGFBQWE7QUFDakIsYUFBVyxFQUFFLE9BQU8sTUFBSyxLQUFNLEdBQUcsT0FBTztBQUNyQyxVQUFNLFFBQVEsYUFBYSxPQUFPO0FBQUEsTUFDOUIsV0FBVztBQUFBLE1BQ1gsTUFBTTtBQUFBLE1BQ047QUFBQSxNQUNBO0FBQUEsTUFDQSxjQUFjLEdBQUc7QUFBQSxNQUNqQixnQkFBZ0I7QUFBQSxJQUM1QixDQUFTO0FBQ0QsUUFBSSxDQUFDLE1BQU0sT0FBTztBQUNkLFVBQUksTUFBTSxVQUFVLE1BQU0sT0FBTyxPQUFPO0FBQ3BDLFlBQUksU0FBUyxNQUFNLFNBQVM7QUFDeEIsa0JBQVEsTUFBTSxLQUFLLGNBQWMsa0RBQWtEO0FBQUE7QUFFbkYsa0JBQVEsUUFBUSxnQkFBZ0IsbUNBQW1DO0FBQUEsTUFDdkYsT0FDaUI7QUFDRCxxQkFBYSxNQUFNO0FBQ25CLFlBQUksTUFBTTtBQUNOLFVBQUFBLEtBQUksVUFBVSxNQUFNO0FBQ3hCO0FBQUEsTUFDaEI7QUFBQSxJQUNBO0FBQ1EsVUFBTSxPQUFPLFFBQ1BnQixhQUFZLEtBQUssT0FBTyxPQUFPLE9BQU8sSUFDdENDLGtCQUFpQixLQUFLLE1BQU0sS0FBSyxPQUFPLE1BQU0sT0FBTyxPQUFPO0FBQ2xFLFFBQUksSUFBSSxPQUFPO0FBQ1gsc0JBQWdCLEdBQUcsUUFBUSxPQUFPLE9BQU87QUFDN0MsYUFBUyxLQUFLLE1BQU0sQ0FBQztBQUNyQixJQUFBakIsS0FBSSxNQUFNLEtBQUssSUFBSTtBQUFBLEVBQzNCO0FBQ0ksRUFBQUEsS0FBSSxRQUFRLENBQUMsR0FBRyxRQUFRLFFBQVEsY0FBYyxNQUFNO0FBQ3BELFNBQU9BO0FBQ1g7QUM5Q0EsU0FBUyxXQUFXLEtBQUssUUFBUSxVQUFVLFNBQVM7QUFDaEQsTUFBSSxVQUFVO0FBQ2QsTUFBSSxLQUFLO0FBQ0wsUUFBSSxXQUFXO0FBQ2YsUUFBSSxNQUFNO0FBQ1YsZUFBVyxTQUFTLEtBQUs7QUFDckIsWUFBTSxFQUFFLFFBQVEsS0FBSSxJQUFLO0FBQ3pCLGNBQVEsTUFBSTtBQUFBLFFBQ1IsS0FBSztBQUNELHFCQUFXO0FBQ1g7QUFBQSxRQUNKLEtBQUssV0FBVztBQUNaLGNBQUksWUFBWSxDQUFDO0FBQ2Isb0JBQVEsT0FBTyxnQkFBZ0Isd0VBQXdFO0FBQzNHLGdCQUFNLEtBQUssT0FBTyxVQUFVLENBQUMsS0FBSztBQUNsQyxjQUFJLENBQUM7QUFDRCxzQkFBVTtBQUFBO0FBRVYsdUJBQVcsTUFBTTtBQUNyQixnQkFBTTtBQUNOO0FBQUEsUUFDcEI7QUFBQSxRQUNnQixLQUFLO0FBQ0QsY0FBSTtBQUNBLG1CQUFPO0FBQ1gscUJBQVc7QUFDWDtBQUFBLFFBQ0o7QUFDSSxrQkFBUSxPQUFPLG9CQUFvQixjQUFjLElBQUksY0FBYztBQUFBLE1BQ3ZGO0FBQ1ksZ0JBQVUsT0FBTztBQUFBLElBQzdCO0FBQUEsRUFDQTtBQUNJLFNBQU8sRUFBRSxTQUFTLE9BQVE7QUFDOUI7QUN6QkEsTUFBTSxXQUFXO0FBQ2pCLE1BQU0sVUFBVSxDQUFDLFVBQVUsVUFBVSxNQUFNLFNBQVMsZUFBZSxNQUFNLFNBQVM7QUFDbEYsU0FBUyxzQkFBc0IsRUFBRSxhQUFBZ0IsY0FBYSxrQkFBQUMsa0JBQWdCLEdBQUksS0FBSyxJQUFJLFNBQVMsS0FBSztBQUNyRixRQUFNQyxTQUFRLEdBQUcsTUFBTSxXQUFXO0FBQ2xDLFFBQU0sU0FBU0EsU0FBUSxhQUFhO0FBQ3BDLFFBQU0sYUFBYSwyQkFBSyxlQUFjQSxTQUFRLFVBQVU7QUFDeEQsUUFBTSxPQUFPLElBQUksVUFBVSxJQUFJLE1BQU07QUFDckMsT0FBSyxPQUFPO0FBQ1osUUFBTSxTQUFTLElBQUk7QUFDbkIsTUFBSTtBQUNBLFFBQUksU0FBUztBQUNqQixNQUFJLElBQUk7QUFDSixRQUFJLFFBQVE7QUFDaEIsTUFBSSxTQUFTLEdBQUcsU0FBUyxHQUFHLE1BQU0sT0FBTztBQUN6QyxXQUFTLElBQUksR0FBRyxJQUFJLEdBQUcsTUFBTSxRQUFRLEVBQUUsR0FBRztBQUN0QyxVQUFNLFdBQVcsR0FBRyxNQUFNLENBQUM7QUFDM0IsVUFBTSxFQUFFLE9BQU8sS0FBSyxLQUFLLE1BQU8sSUFBRztBQUNuQyxVQUFNLFFBQVEsYUFBYSxPQUFPO0FBQUEsTUFDOUIsTUFBTTtBQUFBLE1BQ04sV0FBVztBQUFBLE1BQ1gsTUFBTSxRQUFPLDJCQUFNO0FBQUEsTUFDbkI7QUFBQSxNQUNBO0FBQUEsTUFDQSxjQUFjLEdBQUc7QUFBQSxNQUNqQixnQkFBZ0I7QUFBQSxJQUM1QixDQUFTO0FBQ0QsUUFBSSxDQUFDLE1BQU0sT0FBTztBQUNkLFVBQUksQ0FBQyxNQUFNLFVBQVUsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTztBQUMvQyxZQUFJLE1BQU0sS0FBSyxNQUFNO0FBQ2pCLGtCQUFRLE1BQU0sT0FBTyxvQkFBb0IsbUJBQW1CLE1BQU0sRUFBRTtBQUFBLGlCQUMvRCxJQUFJLEdBQUcsTUFBTSxTQUFTO0FBQzNCLGtCQUFRLE1BQU0sT0FBTyxvQkFBb0IsNEJBQTRCLE1BQU0sRUFBRTtBQUNqRixZQUFJLE1BQU0sU0FBUztBQUNmLGNBQUksS0FBSztBQUNMLGlCQUFLLFdBQVcsT0FBTyxNQUFNO0FBQUE7QUFFN0IsaUJBQUssVUFBVSxNQUFNO0FBQUEsUUFDN0M7QUFDZ0IsaUJBQVMsTUFBTTtBQUNmO0FBQUEsTUFDaEI7QUFDWSxVQUFJLENBQUNBLFVBQVMsSUFBSSxRQUFRLFVBQVUsZ0JBQWdCLEdBQUc7QUFDbkQ7QUFBQSxVQUFRO0FBQUE7QUFBQSxVQUNSO0FBQUEsVUFBMEI7QUFBQSxRQUFrRTtBQUFBLElBQzVHO0FBQ1EsUUFBSSxNQUFNLEdBQUc7QUFDVCxVQUFJLE1BQU07QUFDTixnQkFBUSxNQUFNLE9BQU8sb0JBQW9CLG1CQUFtQixNQUFNLEVBQUU7QUFBQSxJQUNwRixPQUNhO0FBQ0QsVUFBSSxDQUFDLE1BQU07QUFDUCxnQkFBUSxNQUFNLE9BQU8sZ0JBQWdCLHFCQUFxQixNQUFNLFFBQVE7QUFDNUUsVUFBSSxNQUFNLFNBQVM7QUFDZixZQUFJLGtCQUFrQjtBQUN0QixhQUFNLFlBQVcsTUFBTSxPQUFPO0FBQzFCLGtCQUFRLEdBQUcsTUFBSTtBQUFBLFlBQ1gsS0FBSztBQUFBLFlBQ0wsS0FBSztBQUNEO0FBQUEsWUFDSixLQUFLO0FBQ0QsZ0NBQWtCLEdBQUcsT0FBTyxVQUFVLENBQUM7QUFDdkMsb0JBQU07QUFBQSxZQUNWO0FBQ0ksb0JBQU07QUFBQSxVQUNsQztBQUFBLFFBQ0E7QUFDZ0IsWUFBSSxpQkFBaUI7QUFDakIsY0FBSSxPQUFPLEtBQUssTUFBTSxLQUFLLE1BQU0sU0FBUyxDQUFDO0FBQzNDLGNBQUksT0FBTyxJQUFJO0FBQ1gsbUJBQU8sS0FBSyxTQUFTLEtBQUs7QUFDOUIsY0FBSSxLQUFLO0FBQ0wsaUJBQUssV0FBVyxPQUFPO0FBQUE7QUFFdkIsaUJBQUssVUFBVTtBQUNuQixnQkFBTSxVQUFVLE1BQU0sUUFBUSxVQUFVLGdCQUFnQixTQUFTLENBQUM7QUFBQSxRQUN0RjtBQUFBLE1BQ0E7QUFBQSxJQUNBO0FBQ1EsUUFBSSxDQUFDQSxVQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sT0FBTztBQUdoQyxZQUFNLFlBQVksUUFDWkYsYUFBWSxLQUFLLE9BQU8sT0FBTyxPQUFPLElBQ3RDQyxrQkFBaUIsS0FBSyxNQUFNLEtBQUssS0FBSyxNQUFNLE9BQU8sT0FBTztBQUNoRSxXQUFLLE1BQU0sS0FBSyxTQUFTO0FBQ3pCLGVBQVMsVUFBVSxNQUFNLENBQUM7QUFDMUIsVUFBSSxRQUFRLEtBQUs7QUFDYixnQkFBUSxVQUFVLE9BQU8saUJBQWlCLFFBQVE7QUFBQSxJQUNsRSxPQUNhO0FBR0QsVUFBSSxRQUFRO0FBQ1osWUFBTSxXQUFXLE1BQU07QUFDdkIsWUFBTSxVQUFVLE1BQ1ZELGFBQVksS0FBSyxLQUFLLE9BQU8sT0FBTyxJQUNwQ0Msa0JBQWlCLEtBQUssVUFBVSxPQUFPLE1BQU0sT0FBTyxPQUFPO0FBQ2pFLFVBQUksUUFBUSxHQUFHO0FBQ1gsZ0JBQVEsUUFBUSxPQUFPLGlCQUFpQixRQUFRO0FBQ3BELFVBQUksUUFBUTtBQUVaLFlBQU0sYUFBYSxhQUFhLE9BQU8sSUFBSTtBQUFBLFFBQ3ZDLE1BQU07QUFBQSxRQUNOLFdBQVc7QUFBQSxRQUNYLE1BQU07QUFBQSxRQUNOLFFBQVEsUUFBUSxNQUFNLENBQUM7QUFBQSxRQUN2QjtBQUFBLFFBQ0EsY0FBYyxHQUFHO0FBQUEsUUFDakIsZ0JBQWdCO0FBQUEsTUFDaEMsQ0FBYTtBQUNELFVBQUksV0FBVyxPQUFPO0FBQ2xCLFlBQUksQ0FBQ0MsVUFBUyxDQUFDLE1BQU0sU0FBUyxJQUFJLFFBQVEsUUFBUTtBQUM5QyxjQUFJO0FBQ0EsdUJBQVcsTUFBTSxLQUFLO0FBQ2xCLGtCQUFJLE9BQU8sV0FBVztBQUNsQjtBQUNKLGtCQUFJLEdBQUcsU0FBUyxXQUFXO0FBQ3ZCLHdCQUFRLElBQUksMEJBQTBCLGtFQUFrRTtBQUN4RztBQUFBLGNBQ2hDO0FBQUEsWUFDQTtBQUNvQixjQUFJLE1BQU0sUUFBUSxXQUFXLE1BQU0sU0FBUztBQUN4QyxvQkFBUSxXQUFXLE9BQU8sdUJBQXVCLDZGQUE2RjtBQUFBLFFBQ3RLO0FBQUEsTUFDQSxXQUNxQixPQUFPO0FBQ1osWUFBSSxZQUFZLFNBQVMsTUFBTSxVQUFVLE1BQU0sT0FBTyxDQUFDLE1BQU07QUFDekQsa0JBQVEsT0FBTyxnQkFBZ0IsNEJBQTRCLE1BQU0sRUFBRTtBQUFBO0FBRW5FLGtCQUFRLFdBQVcsT0FBTyxnQkFBZ0IsMEJBQTBCLE1BQU0sUUFBUTtBQUFBLE1BQ3RHO0FBRVksWUFBTSxZQUFZLFFBQ1pGLGFBQVksS0FBSyxPQUFPLFlBQVksT0FBTyxJQUMzQyxXQUFXLFFBQ1BDLGtCQUFpQixLQUFLLFdBQVcsS0FBSyxLQUFLLE1BQU0sWUFBWSxPQUFPLElBQ3BFO0FBQ1YsVUFBSSxXQUFXO0FBQ1gsWUFBSSxRQUFRLEtBQUs7QUFDYixrQkFBUSxVQUFVLE9BQU8saUJBQWlCLFFBQVE7QUFBQSxNQUN0RSxXQUNxQixXQUFXLFNBQVM7QUFDekIsWUFBSSxRQUFRO0FBQ1Isa0JBQVEsV0FBVyxPQUFPLFdBQVc7QUFBQTtBQUVyQyxrQkFBUSxVQUFVLFdBQVc7QUFBQSxNQUNqRDtBQUNZLFlBQU0sT0FBTyxJQUFJLEtBQUssU0FBUyxTQUFTO0FBQ3hDLFVBQUksSUFBSSxRQUFRO0FBQ1osYUFBSyxXQUFXO0FBQ3BCLFVBQUlDLFFBQU87QUFDUCxjQUFNMUIsT0FBTTtBQUNaLFlBQUksWUFBWSxLQUFLQSxLQUFJLE9BQU8sT0FBTztBQUNuQyxrQkFBUSxVQUFVLGlCQUFpQix5QkFBeUI7QUFDaEUsUUFBQUEsS0FBSSxNQUFNLEtBQUssSUFBSTtBQUFBLE1BQ25DLE9BQ2lCO0FBQ0QsY0FBTUEsT0FBTSxJQUFJLFFBQVEsSUFBSSxNQUFNO0FBQ2xDLFFBQUFBLEtBQUksT0FBTztBQUNYLFFBQUFBLEtBQUksTUFBTSxLQUFLLElBQUk7QUFDbkIsY0FBTSxZQUFZLGFBQWEsU0FBUztBQUN4QyxRQUFBQSxLQUFJLFFBQVEsQ0FBQyxRQUFRLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZELGFBQUssTUFBTSxLQUFLQSxJQUFHO0FBQUEsTUFDbkM7QUFDWSxlQUFTLFlBQVksVUFBVSxNQUFNLENBQUMsSUFBSSxXQUFXO0FBQUEsSUFDakU7QUFBQSxFQUNBO0FBQ0ksUUFBTSxjQUFjMEIsU0FBUSxNQUFNO0FBQ2xDLFFBQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRSxJQUFJLEdBQUc7QUFDdkIsTUFBSSxRQUFRO0FBQ1osTUFBSSxNQUFNLEdBQUcsV0FBVztBQUNwQixZQUFRLEdBQUcsU0FBUyxHQUFHLE9BQU87QUFBQSxPQUM3QjtBQUNELFVBQU0sT0FBTyxPQUFPLENBQUMsRUFBRSxZQUFXLElBQUssT0FBTyxVQUFVLENBQUM7QUFDekQsVUFBTSxNQUFNLFNBQ04sR0FBRyxJQUFJLG9CQUFvQixXQUFXLEtBQ3RDLEdBQUcsSUFBSSxxRUFBcUUsV0FBVztBQUM3RixZQUFRLFFBQVEsU0FBUyxpQkFBaUIsY0FBYyxHQUFHO0FBQzNELFFBQUksTUFBTSxHQUFHLE9BQU8sV0FBVztBQUMzQixTQUFHLFFBQVEsRUFBRTtBQUFBLEVBQ3pCO0FBQ0ksTUFBSSxHQUFHLFNBQVMsR0FBRztBQUNmLFVBQU0sTUFBTSxXQUFXLElBQUksT0FBTyxJQUFJLFFBQVEsUUFBUSxPQUFPO0FBQzdELFFBQUksSUFBSSxTQUFTO0FBQ2IsVUFBSSxLQUFLO0FBQ0wsYUFBSyxXQUFXLE9BQU8sSUFBSTtBQUFBO0FBRTNCLGFBQUssVUFBVSxJQUFJO0FBQUEsSUFDbkM7QUFDUSxTQUFLLFFBQVEsQ0FBQyxHQUFHLFFBQVEsT0FBTyxJQUFJLE1BQU07QUFBQSxFQUNsRCxPQUNTO0FBQ0QsU0FBSyxRQUFRLENBQUMsR0FBRyxRQUFRLE9BQU8sS0FBSztBQUFBLEVBQzdDO0FBQ0ksU0FBTztBQUNYO0FDcE1BLFNBQVMsa0JBQWtCQyxLQUFJLEtBQUssT0FBTyxTQUFTLFNBQVMsS0FBSztBQUM5RCxRQUFNLE9BQU8sTUFBTSxTQUFTLGNBQ3RCLGdCQUFnQkEsS0FBSSxLQUFLLE9BQU8sU0FBUyxHQUFHLElBQzVDLE1BQU0sU0FBUyxjQUNYLGdCQUFnQkEsS0FBSSxLQUFLLE9BQU8sU0FBUyxHQUFHLElBQzVDLHNCQUFzQkEsS0FBSSxLQUFLLE9BQU8sU0FBUyxHQUFHO0FBQzVELFFBQU0sT0FBTyxLQUFLO0FBR2xCLE1BQUksWUFBWSxPQUFPLFlBQVksS0FBSyxTQUFTO0FBQzdDLFNBQUssTUFBTSxLQUFLO0FBQ2hCLFdBQU87QUFBQSxFQUNmO0FBQ0ksTUFBSTtBQUNBLFNBQUssTUFBTTtBQUNmLFNBQU87QUFDWDtBQUNBLFNBQVMsa0JBQWtCQSxLQUFJLEtBQUssT0FBTyxPQUFPLFNBQVM7O0FBQ3ZELFFBQU0sV0FBVyxNQUFNO0FBQ3ZCLFFBQU0sVUFBVSxDQUFDLFdBQ1gsT0FDQSxJQUFJLFdBQVcsUUFBUSxTQUFTLFFBQVEsU0FBTyxRQUFRLFVBQVUsc0JBQXNCLEdBQUcsQ0FBQztBQUNqRyxNQUFJLE1BQU0sU0FBUyxhQUFhO0FBQzVCLFVBQU0sRUFBRSxRQUFRLGtCQUFrQixHQUFJLElBQUc7QUFDekMsVUFBTSxXQUFXLFVBQVUsV0FDckIsT0FBTyxTQUFTLFNBQVMsU0FDckIsU0FDQSxXQUNILFVBQVU7QUFDakIsUUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLFNBQVMsU0FBUyxTQUFTO0FBQ2xELFlBQU0sVUFBVTtBQUNoQixjQUFRLFVBQVUsZ0JBQWdCLE9BQU87QUFBQSxJQUNyRDtBQUFBLEVBQ0E7QUFDSSxRQUFNLFVBQVUsTUFBTSxTQUFTLGNBQ3pCLFFBQ0EsTUFBTSxTQUFTLGNBQ1gsUUFDQSxNQUFNLE1BQU0sV0FBVyxNQUNuQixRQUNBO0FBR2QsTUFBSSxDQUFDLFlBQ0QsQ0FBQyxXQUNELFlBQVksT0FDWCxZQUFZLFFBQVEsV0FBVyxZQUFZLFNBQzNDLFlBQVksUUFBUSxXQUFXLFlBQVksT0FBUTtBQUNwRCxXQUFPLGtCQUFrQkEsS0FBSSxLQUFLLE9BQU8sU0FBUyxPQUFPO0FBQUEsRUFDakU7QUFDSSxNQUFJLE1BQU0sSUFBSSxPQUFPLEtBQUssS0FBSyxPQUFLLEVBQUUsUUFBUSxXQUFXLEVBQUUsZUFBZSxPQUFPO0FBQ2pGLE1BQUksQ0FBQyxLQUFLO0FBQ04sVUFBTSxLQUFLLElBQUksT0FBTyxVQUFVLE9BQU87QUFDdkMsUUFBSSxNQUFNLEdBQUcsZUFBZSxTQUFTO0FBQ2pDLFVBQUksT0FBTyxLQUFLLEtBQUssT0FBTyxPQUFPLENBQUUsR0FBRSxJQUFJLEVBQUUsU0FBUyxNQUFPLEVBQUM7QUFDOUQsWUFBTTtBQUFBLElBQ2xCLE9BQ2E7QUFDRCxVQUFJLHlCQUFJLFlBQVk7QUFDaEIsZ0JBQVEsVUFBVSx1QkFBdUIsR0FBRyxHQUFHLEdBQUcsYUFBYSxPQUFPLDRCQUE0QixHQUFHLFVBQVUsSUFBSSxJQUFJO0FBQUEsTUFDdkksT0FDaUI7QUFDRCxnQkFBUSxVQUFVLHNCQUFzQixtQkFBbUIsT0FBTyxJQUFJLElBQUk7QUFBQSxNQUMxRjtBQUNZLGFBQU8sa0JBQWtCQSxLQUFJLEtBQUssT0FBTyxTQUFTLE9BQU87QUFBQSxJQUNyRTtBQUFBLEVBQ0E7QUFDSSxRQUFNLE9BQU8sa0JBQWtCQSxLQUFJLEtBQUssT0FBTyxTQUFTLFNBQVMsR0FBRztBQUNwRSxRQUFNLFFBQU0sU0FBSSxZQUFKLDZCQUFjLE1BQU0sU0FBTyxRQUFRLFVBQVUsc0JBQXNCLEdBQUcsR0FBRyxJQUFJLGFBQVk7QUFDckcsUUFBTSxPQUFPLE9BQU8sR0FBRyxJQUNqQixNQUNBLElBQUksT0FBTyxHQUFHO0FBQ3BCLE9BQUssUUFBUSxLQUFLO0FBQ2xCLE9BQUssTUFBTTtBQUNYLE1BQUksMkJBQUs7QUFDTCxTQUFLLFNBQVMsSUFBSTtBQUN0QixTQUFPO0FBQ1g7QUNuRkEsU0FBUyxtQkFBbUIsS0FBSyxRQUFRLFNBQVM7QUFDOUMsUUFBTSxRQUFRLE9BQU87QUFDckIsUUFBTSxTQUFTLHVCQUF1QixRQUFRLElBQUksUUFBUSxRQUFRLE9BQU87QUFDekUsTUFBSSxDQUFDO0FBQ0QsV0FBTyxFQUFFLE9BQU8sSUFBSSxNQUFNLE1BQU0sU0FBUyxJQUFJLE9BQU8sQ0FBQyxPQUFPLE9BQU8sS0FBSyxFQUFHO0FBQy9FLFFBQU0sT0FBTyxPQUFPLFNBQVMsTUFBTSxPQUFPLGVBQWUsT0FBTztBQUNoRSxRQUFNLFFBQVEsT0FBTyxTQUFTLFdBQVcsT0FBTyxNQUFNLElBQUksQ0FBRTtBQUU1RCxNQUFJLGFBQWEsTUFBTTtBQUN2QixXQUFTLElBQUksTUFBTSxTQUFTLEdBQUcsS0FBSyxHQUFHLEVBQUUsR0FBRztBQUN4QyxVQUFNLFVBQVUsTUFBTSxDQUFDLEVBQUUsQ0FBQztBQUMxQixRQUFJLFlBQVksTUFBTSxZQUFZO0FBQzlCLG1CQUFhO0FBQUE7QUFFYjtBQUFBLEVBQ1o7QUFFSSxNQUFJLGVBQWUsR0FBRztBQUNsQixVQUFNakcsU0FBUSxPQUFPLFVBQVUsT0FBTyxNQUFNLFNBQVMsSUFDL0MsS0FBSyxPQUFPLEtBQUssSUFBSSxHQUFHLE1BQU0sU0FBUyxDQUFDLENBQUMsSUFDekM7QUFDTixRQUFJeUUsT0FBTSxRQUFRLE9BQU87QUFDekIsUUFBSSxPQUFPO0FBQ1AsTUFBQUEsUUFBTyxPQUFPLE9BQU87QUFDekIsV0FBTyxFQUFFLE9BQUF6RSxRQUFPLE1BQU0sU0FBUyxPQUFPLFNBQVMsT0FBTyxDQUFDLE9BQU95RSxNQUFLQSxJQUFHLEVBQUc7QUFBQSxFQUNqRjtBQUVJLE1BQUksYUFBYSxPQUFPLFNBQVMsT0FBTztBQUN4QyxNQUFJLFNBQVMsT0FBTyxTQUFTLE9BQU87QUFDcEMsTUFBSSxlQUFlO0FBQ25CLFdBQVMsSUFBSSxHQUFHLElBQUksWUFBWSxFQUFFLEdBQUc7QUFDakMsVUFBTSxDQUFDLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQztBQUNqQyxRQUFJLFlBQVksTUFBTSxZQUFZLE1BQU07QUFDcEMsVUFBSSxPQUFPLFdBQVcsS0FBSyxPQUFPLFNBQVM7QUFDdkMscUJBQWEsT0FBTztBQUFBLElBQ3BDLE9BQ2E7QUFDRCxVQUFJLE9BQU8sU0FBUyxZQUFZO0FBQzVCLGNBQU0sVUFBVTtBQUNoQixnQkFBUSxTQUFTLE9BQU8sUUFBUSxnQkFBZ0IsT0FBTztBQUFBLE1BQ3ZFO0FBQ1ksVUFBSSxPQUFPLFdBQVc7QUFDbEIscUJBQWEsT0FBTztBQUN4QixxQkFBZTtBQUNmLFVBQUksZUFBZSxLQUFLLENBQUMsSUFBSSxRQUFRO0FBQ2pDLGNBQU0sVUFBVTtBQUNoQixnQkFBUSxRQUFRLGNBQWMsT0FBTztBQUFBLE1BQ3JEO0FBQ1k7QUFBQSxJQUNaO0FBQ1EsY0FBVSxPQUFPLFNBQVMsUUFBUSxTQUFTO0FBQUEsRUFDbkQ7QUFFSSxXQUFTLElBQUksTUFBTSxTQUFTLEdBQUcsS0FBSyxZQUFZLEVBQUUsR0FBRztBQUNqRCxRQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTO0FBQ3JCLG1CQUFhLElBQUk7QUFBQSxFQUM3QjtBQUNJLE1BQUksUUFBUTtBQUNaLE1BQUksTUFBTTtBQUNWLE1BQUksbUJBQW1CO0FBRXZCLFdBQVMsSUFBSSxHQUFHLElBQUksY0FBYyxFQUFFO0FBQ2hDLGFBQVMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sVUFBVSxJQUFJO0FBQzdDLFdBQVMsSUFBSSxjQUFjLElBQUksWUFBWSxFQUFFLEdBQUc7QUFDNUMsUUFBSSxDQUFDLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQztBQUMvQixjQUFVLE9BQU8sU0FBUyxRQUFRLFNBQVM7QUFDM0MsVUFBTSxPQUFPLFFBQVEsUUFBUSxTQUFTLENBQUMsTUFBTTtBQUM3QyxRQUFJO0FBQ0EsZ0JBQVUsUUFBUSxNQUFNLEdBQUcsRUFBRTtBQUVqQyxRQUFJLFdBQVcsT0FBTyxTQUFTLFlBQVk7QUFDdkMsWUFBTSxNQUFNLE9BQU8sU0FDYixtQ0FDQTtBQUNOLFlBQU0sVUFBVSwyREFBMkQsR0FBRztBQUM5RSxjQUFRLFNBQVMsUUFBUSxVQUFVLE9BQU8sSUFBSSxJQUFJLGNBQWMsT0FBTztBQUN2RSxlQUFTO0FBQUEsSUFDckI7QUFDUSxRQUFJLFNBQVMsT0FBTyxlQUFlO0FBQy9CLGVBQVMsTUFBTSxPQUFPLE1BQU0sVUFBVSxJQUFJO0FBQzFDLFlBQU07QUFBQSxJQUNsQixXQUNpQixPQUFPLFNBQVMsY0FBYyxRQUFRLENBQUMsTUFBTSxLQUFNO0FBRXhELFVBQUksUUFBUTtBQUNSLGNBQU07QUFBQSxlQUNELENBQUMsb0JBQW9CLFFBQVE7QUFDbEMsY0FBTTtBQUNWLGVBQVMsTUFBTSxPQUFPLE1BQU0sVUFBVSxJQUFJO0FBQzFDLFlBQU07QUFDTix5QkFBbUI7QUFBQSxJQUMvQixXQUNpQixZQUFZLElBQUk7QUFFckIsVUFBSSxRQUFRO0FBQ1IsaUJBQVM7QUFBQTtBQUVULGNBQU07QUFBQSxJQUN0QixPQUNhO0FBQ0QsZUFBUyxNQUFNO0FBQ2YsWUFBTTtBQUNOLHlCQUFtQjtBQUFBLElBQy9CO0FBQUEsRUFDQTtBQUNJLFVBQVEsT0FBTyxPQUFLO0FBQUEsSUFDaEIsS0FBSztBQUNEO0FBQUEsSUFDSixLQUFLO0FBQ0QsZUFBUyxJQUFJLFlBQVksSUFBSSxNQUFNLFFBQVEsRUFBRTtBQUN6QyxpQkFBUyxPQUFPLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLFVBQVU7QUFDaEQsVUFBSSxNQUFNLE1BQU0sU0FBUyxDQUFDLE1BQU07QUFDNUIsaUJBQVM7QUFDYjtBQUFBLElBQ0o7QUFDSSxlQUFTO0FBQUEsRUFDckI7QUFDSSxRQUFNLE1BQU0sUUFBUSxPQUFPLFNBQVMsT0FBTyxPQUFPO0FBQ2xELFNBQU8sRUFBRSxPQUFPLE1BQU0sU0FBUyxPQUFPLFNBQVMsT0FBTyxDQUFDLE9BQU8sS0FBSyxHQUFHLEVBQUc7QUFDN0U7QUFDQSxTQUFTLHVCQUF1QixFQUFFLFFBQVEsTUFBSyxHQUFJLFFBQVEsU0FBUztBQUVoRSxNQUFJLE1BQU0sQ0FBQyxFQUFFLFNBQVMsdUJBQXVCO0FBQ3pDLFlBQVEsTUFBTSxDQUFDLEdBQUcsY0FBYywrQkFBK0I7QUFDL0QsV0FBTztBQUFBLEVBQ2Y7QUFDSSxRQUFNLEVBQUUsT0FBTSxJQUFLLE1BQU0sQ0FBQztBQUMxQixRQUFNLE9BQU8sT0FBTyxDQUFDO0FBQ3JCLE1BQUksU0FBUztBQUNiLE1BQUksUUFBUTtBQUNaLE1BQUksUUFBUTtBQUNaLFdBQVMsSUFBSSxHQUFHLElBQUksT0FBTyxRQUFRLEVBQUUsR0FBRztBQUNwQyxVQUFNLEtBQUssT0FBTyxDQUFDO0FBQ25CLFFBQUksQ0FBQyxVQUFVLE9BQU8sT0FBTyxPQUFPO0FBQ2hDLGNBQVE7QUFBQSxTQUNQO0FBQ0QsWUFBTSxJQUFJLE9BQU8sRUFBRTtBQUNuQixVQUFJLENBQUMsVUFBVTtBQUNYLGlCQUFTO0FBQUEsZUFDSixVQUFVO0FBQ2YsZ0JBQVEsU0FBUztBQUFBLElBQ2pDO0FBQUEsRUFDQTtBQUNJLE1BQUksVUFBVTtBQUNWLFlBQVEsT0FBTyxvQkFBb0Isa0RBQWtELE1BQU0sRUFBRTtBQUNqRyxNQUFJLFdBQVc7QUFDZixNQUFJLFVBQVU7QUFDZCxNQUFJLFNBQVMsT0FBTztBQUNwQixXQUFTLElBQUksR0FBRyxJQUFJLE1BQU0sUUFBUSxFQUFFLEdBQUc7QUFDbkMsVUFBTSxRQUFRLE1BQU0sQ0FBQztBQUNyQixZQUFRLE1BQU0sTUFBSTtBQUFBLE1BQ2QsS0FBSztBQUNELG1CQUFXO0FBQUE7QUFBQSxNQUVmLEtBQUs7QUFDRCxrQkFBVSxNQUFNLE9BQU87QUFDdkI7QUFBQSxNQUNKLEtBQUs7QUFDRCxZQUFJLFVBQVUsQ0FBQyxVQUFVO0FBQ3JCLGdCQUFNLFVBQVU7QUFDaEIsa0JBQVEsT0FBTyxnQkFBZ0IsT0FBTztBQUFBLFFBQzFEO0FBQ2dCLGtCQUFVLE1BQU0sT0FBTztBQUN2QixrQkFBVSxNQUFNLE9BQU8sVUFBVSxDQUFDO0FBQ2xDO0FBQUEsTUFDSixLQUFLO0FBQ0QsZ0JBQVEsT0FBTyxvQkFBb0IsTUFBTSxPQUFPO0FBQ2hELGtCQUFVLE1BQU0sT0FBTztBQUN2QjtBQUFBO0FBQUEsTUFFSixTQUFTO0FBQ0wsY0FBTSxVQUFVLDRDQUE0QyxNQUFNLElBQUk7QUFDdEUsZ0JBQVEsT0FBTyxvQkFBb0IsT0FBTztBQUMxQyxjQUFNLEtBQUssTUFBTTtBQUNqQixZQUFJLE1BQU0sT0FBTyxPQUFPO0FBQ3BCLG9CQUFVLEdBQUc7QUFBQSxNQUNqQztBQUFBLElBQ0E7QUFBQSxFQUNBO0FBQ0ksU0FBTyxFQUFFLE1BQU0sUUFBUSxPQUFPLFNBQVMsT0FBUTtBQUNuRDtBQUVBLFNBQVMsV0FBVyxRQUFRO0FBQ3hCLFFBQU0sUUFBUSxPQUFPLE1BQU0sUUFBUTtBQUNuQyxRQUFNLFFBQVEsTUFBTSxDQUFDO0FBQ3JCLFFBQU0sSUFBSSxNQUFNLE1BQU0sT0FBTztBQUM3QixRQUFNLFNBQVEsdUJBQUksTUFDWixDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsSUFDL0IsQ0FBQyxJQUFJLEtBQUs7QUFDaEIsUUFBTSxRQUFRLENBQUMsS0FBSztBQUNwQixXQUFTLElBQUksR0FBRyxJQUFJLE1BQU0sUUFBUSxLQUFLO0FBQ25DLFVBQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN2QyxTQUFPO0FBQ1g7QUNoTUEsU0FBUyxrQkFBa0IsUUFBUSxRQUFRLFNBQVM7QUFDaEQsUUFBTSxFQUFFLFFBQVEsTUFBTSxRQUFRLElBQUssSUFBRztBQUN0QyxNQUFJO0FBQ0osTUFBSTtBQUNKLFFBQU0sV0FBVyxDQUFDLEtBQUssTUFBTSxRQUFRLFFBQVEsU0FBUyxLQUFLLE1BQU0sR0FBRztBQUNwRSxVQUFRLE1BQUk7QUFBQSxJQUNSLEtBQUs7QUFDRCxjQUFRLE9BQU87QUFDZixjQUFRLFdBQVcsUUFBUSxRQUFRO0FBQ25DO0FBQUEsSUFDSixLQUFLO0FBQ0QsY0FBUSxPQUFPO0FBQ2YsY0FBUSxrQkFBa0IsUUFBUSxRQUFRO0FBQzFDO0FBQUEsSUFDSixLQUFLO0FBQ0QsY0FBUSxPQUFPO0FBQ2YsY0FBUSxrQkFBa0IsUUFBUSxRQUFRO0FBQzFDO0FBQUE7QUFBQSxJQUVKO0FBQ0ksY0FBUSxRQUFRLG9CQUFvQiw0Q0FBNEMsSUFBSSxFQUFFO0FBQ3RGLGFBQU87QUFBQSxRQUNILE9BQU87QUFBQSxRQUNQLE1BQU07QUFBQSxRQUNOLFNBQVM7QUFBQSxRQUNULE9BQU8sQ0FBQyxRQUFRLFNBQVMsT0FBTyxRQUFRLFNBQVMsT0FBTyxNQUFNO0FBQUEsTUFDakU7QUFBQSxFQUNiO0FBQ0ksUUFBTSxXQUFXLFNBQVMsT0FBTztBQUNqQyxRQUFNLEtBQUssV0FBVyxLQUFLLFVBQVUsUUFBUSxPQUFPO0FBQ3BELFNBQU87QUFBQSxJQUNIO0FBQUEsSUFDQSxNQUFNO0FBQUEsSUFDTixTQUFTLEdBQUc7QUFBQSxJQUNaLE9BQU8sQ0FBQyxRQUFRLFVBQVUsR0FBRyxNQUFNO0FBQUEsRUFDdEM7QUFDTDtBQUNBLFNBQVMsV0FBVyxRQUFRLFNBQVM7QUFDakMsTUFBSSxVQUFVO0FBQ2QsVUFBUSxPQUFPLENBQUMsR0FBQztBQUFBO0FBQUEsSUFFYixLQUFLO0FBQ0QsZ0JBQVU7QUFDVjtBQUFBLElBQ0osS0FBSztBQUNELGdCQUFVO0FBQ1Y7QUFBQSxJQUNKLEtBQUs7QUFDRCxnQkFBVTtBQUNWO0FBQUEsSUFDSixLQUFLO0FBQUEsSUFDTCxLQUFLLEtBQUs7QUFDTixnQkFBVSwwQkFBMEIsT0FBTyxDQUFDLENBQUM7QUFDN0M7QUFBQSxJQUNaO0FBQUEsSUFDUSxLQUFLO0FBQUEsSUFDTCxLQUFLLEtBQUs7QUFDTixnQkFBVSxzQkFBc0IsT0FBTyxDQUFDLENBQUM7QUFDekM7QUFBQSxJQUNaO0FBQUEsRUFDQTtBQUNJLE1BQUk7QUFDQSxZQUFRLEdBQUcsb0JBQW9CLGlDQUFpQyxPQUFPLEVBQUU7QUFDN0UsU0FBTyxVQUFVLE1BQU07QUFDM0I7QUFDQSxTQUFTLGtCQUFrQixRQUFRLFNBQVM7QUFDeEMsTUFBSSxPQUFPLE9BQU8sU0FBUyxDQUFDLE1BQU0sT0FBTyxPQUFPLFdBQVc7QUFDdkQsWUFBUSxPQUFPLFFBQVEsZ0JBQWdCLHdCQUF3QjtBQUNuRSxTQUFPLFVBQVUsT0FBTyxNQUFNLEdBQUcsRUFBRSxDQUFDLEVBQUUsUUFBUSxPQUFPLEdBQUc7QUFDNUQ7QUFDQSxTQUFTLFVBQVUsUUFBUTtBQVF2QixNQUFJLE9BQU87QUFDWCxNQUFJO0FBQ0EsWUFBUSxJQUFJLE9BQU8sNEJBQThCLElBQUk7QUFDckQsV0FBTyxJQUFJLE9BQU8sc0NBQXlDLElBQUk7QUFBQSxFQUN2RSxRQUNVO0FBQ0YsWUFBUTtBQUNSLFdBQU87QUFBQSxFQUNmO0FBQ0ksTUFBSSxRQUFRLE1BQU0sS0FBSyxNQUFNO0FBQzdCLE1BQUksQ0FBQztBQUNELFdBQU87QUFDWCxNQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ2pCLE1BQUksTUFBTTtBQUNWLE1BQUksTUFBTSxNQUFNO0FBQ2hCLE9BQUssWUFBWTtBQUNqQixTQUFRLFFBQVEsS0FBSyxLQUFLLE1BQU0sR0FBSTtBQUNoQyxRQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUk7QUFDakIsVUFBSSxRQUFRO0FBQ1IsZUFBTztBQUFBO0FBRVAsY0FBTTtBQUFBLElBQ3RCLE9BQ2E7QUFDRCxhQUFPLE1BQU0sTUFBTSxDQUFDO0FBQ3BCLFlBQU07QUFBQSxJQUNsQjtBQUNRLFVBQU0sS0FBSztBQUFBLEVBQ25CO0FBQ0ksUUFBTSxPQUFPO0FBQ2IsT0FBSyxZQUFZO0FBQ2pCLFVBQVEsS0FBSyxLQUFLLE1BQU07QUFDeEIsU0FBTyxNQUFNLFFBQU8sK0JBQVEsT0FBTTtBQUN0QztBQUNBLFNBQVMsa0JBQWtCLFFBQVEsU0FBUztBQUN4QyxNQUFJLE1BQU07QUFDVixXQUFTLElBQUksR0FBRyxJQUFJLE9BQU8sU0FBUyxHQUFHLEVBQUUsR0FBRztBQUN4QyxVQUFNLEtBQUssT0FBTyxDQUFDO0FBQ25CLFFBQUksT0FBTyxRQUFRLE9BQU8sSUFBSSxDQUFDLE1BQU07QUFDakM7QUFDSixRQUFJLE9BQU8sTUFBTTtBQUNiLFlBQU0sRUFBRSxNQUFNLE9BQU0sSUFBSyxZQUFZLFFBQVEsQ0FBQztBQUM5QyxhQUFPO0FBQ1AsVUFBSTtBQUFBLElBQ2hCLFdBQ2lCLE9BQU8sTUFBTTtBQUNsQixVQUFJLE9BQU8sT0FBTyxFQUFFLENBQUM7QUFDckIsWUFBTSxLQUFLLFlBQVksSUFBSTtBQUMzQixVQUFJO0FBQ0EsZUFBTztBQUFBLGVBQ0YsU0FBUyxNQUFNO0FBRXBCLGVBQU8sT0FBTyxJQUFJLENBQUM7QUFDbkIsZUFBTyxTQUFTLE9BQU8sU0FBUztBQUM1QixpQkFBTyxPQUFPLEVBQUUsSUFBSSxDQUFDO0FBQUEsTUFDekMsV0FDcUIsU0FBUyxRQUFRLE9BQU8sSUFBSSxDQUFDLE1BQU0sTUFBTTtBQUU5QyxlQUFPLE9BQU8sRUFBRSxJQUFJLENBQUM7QUFDckIsZUFBTyxTQUFTLE9BQU8sU0FBUztBQUM1QixpQkFBTyxPQUFPLEVBQUUsSUFBSSxDQUFDO0FBQUEsTUFDekMsV0FDcUIsU0FBUyxPQUFPLFNBQVMsT0FBTyxTQUFTLEtBQUs7QUFDbkQsY0FBTSxTQUFTLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUcsRUFBQyxJQUFJO0FBQ3hDLGVBQU8sY0FBYyxRQUFRLElBQUksR0FBRyxRQUFRLE9BQU87QUFDbkQsYUFBSztBQUFBLE1BQ3JCLE9BQ2lCO0FBQ0QsY0FBTSxNQUFNLE9BQU8sT0FBTyxJQUFJLEdBQUcsQ0FBQztBQUNsQyxnQkFBUSxJQUFJLEdBQUcsaUJBQWlCLDJCQUEyQixHQUFHLEVBQUU7QUFDaEUsZUFBTztBQUFBLE1BQ3ZCO0FBQUEsSUFDQSxXQUNpQixPQUFPLE9BQU8sT0FBTyxLQUFNO0FBRWhDLFlBQU0sVUFBVTtBQUNoQixVQUFJLE9BQU8sT0FBTyxJQUFJLENBQUM7QUFDdkIsYUFBTyxTQUFTLE9BQU8sU0FBUztBQUM1QixlQUFPLE9BQU8sRUFBRSxJQUFJLENBQUM7QUFDekIsVUFBSSxTQUFTLFFBQVEsRUFBRSxTQUFTLFFBQVEsT0FBTyxJQUFJLENBQUMsTUFBTTtBQUN0RCxlQUFPLElBQUksVUFBVSxPQUFPLE1BQU0sU0FBUyxJQUFJLENBQUMsSUFBSTtBQUFBLElBQ3BFLE9BQ2E7QUFDRCxhQUFPO0FBQUEsSUFDbkI7QUFBQSxFQUNBO0FBQ0ksTUFBSSxPQUFPLE9BQU8sU0FBUyxDQUFDLE1BQU0sT0FBTyxPQUFPLFdBQVc7QUFDdkQsWUFBUSxPQUFPLFFBQVEsZ0JBQWdCLHdCQUF3QjtBQUNuRSxTQUFPO0FBQ1g7QUFLQSxTQUFTLFlBQVksUUFBUSxRQUFRO0FBQ2pDLE1BQUksT0FBTztBQUNYLE1BQUksS0FBSyxPQUFPLFNBQVMsQ0FBQztBQUMxQixTQUFPLE9BQU8sT0FBTyxPQUFPLE9BQVEsT0FBTyxRQUFRLE9BQU8sTUFBTTtBQUM1RCxRQUFJLE9BQU8sUUFBUSxPQUFPLFNBQVMsQ0FBQyxNQUFNO0FBQ3RDO0FBQ0osUUFBSSxPQUFPO0FBQ1AsY0FBUTtBQUNaLGNBQVU7QUFDVixTQUFLLE9BQU8sU0FBUyxDQUFDO0FBQUEsRUFDOUI7QUFDSSxNQUFJLENBQUM7QUFDRCxXQUFPO0FBQ1gsU0FBTyxFQUFFLE1BQU0sT0FBUTtBQUMzQjtBQUNBLE1BQU0sY0FBYztBQUFBLEVBQ2hCLEtBQUs7QUFBQTtBQUFBLEVBQ0wsR0FBRztBQUFBO0FBQUEsRUFDSCxHQUFHO0FBQUE7QUFBQSxFQUNILEdBQUc7QUFBQTtBQUFBLEVBQ0gsR0FBRztBQUFBO0FBQUEsRUFDSCxHQUFHO0FBQUE7QUFBQSxFQUNILEdBQUc7QUFBQTtBQUFBLEVBQ0gsR0FBRztBQUFBO0FBQUEsRUFDSCxHQUFHO0FBQUE7QUFBQSxFQUNILEdBQUc7QUFBQTtBQUFBLEVBQ0gsR0FBRztBQUFBO0FBQUEsRUFDSCxHQUFHO0FBQUE7QUFBQSxFQUNILEdBQUc7QUFBQTtBQUFBLEVBQ0gsS0FBSztBQUFBLEVBQ0wsS0FBSztBQUFBLEVBQ0wsS0FBSztBQUFBLEVBQ0wsTUFBTTtBQUFBLEVBQ04sS0FBTTtBQUNWO0FBQ0EsU0FBUyxjQUFjLFFBQVEsUUFBUSxRQUFRLFNBQVM7QUFDcEQsUUFBTSxLQUFLLE9BQU8sT0FBTyxRQUFRLE1BQU07QUFDdkMsUUFBTSxLQUFLLEdBQUcsV0FBVyxVQUFVLGlCQUFpQixLQUFLLEVBQUU7QUFDM0QsUUFBTSxPQUFPLEtBQUssU0FBUyxJQUFJLEVBQUUsSUFBSTtBQUNyQyxNQUFJLE1BQU0sSUFBSSxHQUFHO0FBQ2IsVUFBTSxNQUFNLE9BQU8sT0FBTyxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBQ2hELFlBQVEsU0FBUyxHQUFHLGlCQUFpQiwyQkFBMkIsR0FBRyxFQUFFO0FBQ3JFLFdBQU87QUFBQSxFQUNmO0FBQ0ksU0FBTyxPQUFPLGNBQWMsSUFBSTtBQUNwQztBQ3ZOQSxTQUFTLGNBQWMsS0FBSyxPQUFPLFVBQVUsU0FBUztBQUNsRCxRQUFNLEVBQUUsT0FBTyxNQUFNLFNBQVMsTUFBTyxJQUFHLE1BQU0sU0FBUyxpQkFDakQsbUJBQW1CLEtBQUssT0FBTyxPQUFPLElBQ3RDLGtCQUFrQixPQUFPLElBQUksUUFBUSxRQUFRLE9BQU87QUFDMUQsUUFBTSxVQUFVLFdBQ1YsSUFBSSxXQUFXLFFBQVEsU0FBUyxRQUFRLFNBQU8sUUFBUSxVQUFVLHNCQUFzQixHQUFHLENBQUMsSUFDM0Y7QUFDTixNQUFJO0FBQ0osTUFBSSxJQUFJLFFBQVEsY0FBYyxJQUFJLE9BQU87QUFDckMsVUFBTSxJQUFJLE9BQU9YLFFBQU07QUFBQSxFQUMvQixXQUNhO0FBQ0wsVUFBTSxvQkFBb0IsSUFBSSxRQUFRLE9BQU8sU0FBUyxVQUFVLE9BQU87QUFBQSxXQUNsRSxNQUFNLFNBQVM7QUFDcEIsVUFBTSxvQkFBb0IsS0FBSyxPQUFPLE9BQU8sT0FBTztBQUFBO0FBRXBELFVBQU0sSUFBSSxPQUFPQSxRQUFNO0FBQzNCLE1BQUk7QUFDSixNQUFJO0FBQ0EsVUFBTSxNQUFNLElBQUksUUFBUSxPQUFPLFNBQU8sUUFBUSxZQUFZLE9BQU8sc0JBQXNCLEdBQUcsR0FBRyxJQUFJLE9BQU87QUFDeEcsYUFBU0MsV0FBUyxHQUFHLElBQUksTUFBTSxJQUFJLE9BQU8sR0FBRztBQUFBLEVBQ3JELFNBQ1csT0FBTztBQUNWLFVBQU0sTUFBTSxpQkFBaUIsUUFBUSxNQUFNLFVBQVUsT0FBTyxLQUFLO0FBQ2pFLFlBQVEsWUFBWSxPQUFPLHNCQUFzQixHQUFHO0FBQ3BELGFBQVMsSUFBSSxPQUFPLEtBQUs7QUFBQSxFQUNqQztBQUNJLFNBQU8sUUFBUTtBQUNmLFNBQU8sU0FBUztBQUNoQixNQUFJO0FBQ0EsV0FBTyxPQUFPO0FBQ2xCLE1BQUk7QUFDQSxXQUFPLE1BQU07QUFDakIsTUFBSSxJQUFJO0FBQ0osV0FBTyxTQUFTLElBQUk7QUFDeEIsTUFBSTtBQUNBLFdBQU8sVUFBVTtBQUNyQixTQUFPO0FBQ1g7QUFDQSxTQUFTLG9CQUFvQlEsU0FBUSxPQUFPLFNBQVMsVUFBVSxTQUFTOztBQUNwRSxNQUFJLFlBQVk7QUFDWixXQUFPQSxRQUFPVCxRQUFNO0FBQ3hCLFFBQU0sZ0JBQWdCLENBQUU7QUFDeEIsYUFBVyxPQUFPUyxRQUFPLE1BQU07QUFDM0IsUUFBSSxDQUFDLElBQUksY0FBYyxJQUFJLFFBQVEsU0FBUztBQUN4QyxVQUFJLElBQUksV0FBVyxJQUFJO0FBQ25CLHNCQUFjLEtBQUssR0FBRztBQUFBO0FBRXRCLGVBQU87QUFBQSxJQUN2QjtBQUFBLEVBQ0E7QUFDSSxhQUFXLE9BQU87QUFDZCxTQUFJLFNBQUksU0FBSixtQkFBVSxLQUFLO0FBQ2YsYUFBTztBQUNmLFFBQU0sS0FBS0EsUUFBTyxVQUFVLE9BQU87QUFDbkMsTUFBSSxNQUFNLENBQUMsR0FBRyxZQUFZO0FBR3RCLElBQUFBLFFBQU8sS0FBSyxLQUFLLE9BQU8sT0FBTyxDQUFFLEdBQUUsSUFBSSxFQUFFLFNBQVMsT0FBTyxNQUFNLE9BQVcsRUFBQztBQUMzRSxXQUFPO0FBQUEsRUFDZjtBQUNJLFVBQVEsVUFBVSxzQkFBc0IsbUJBQW1CLE9BQU8sSUFBSSxZQUFZLHVCQUF1QjtBQUN6RyxTQUFPQSxRQUFPVCxRQUFNO0FBQ3hCO0FBQ0EsU0FBUyxvQkFBb0IsRUFBRSxPQUFPLFlBQVksUUFBQVMsUUFBTSxHQUFJLE9BQU8sT0FBTyxTQUFTO0FBQy9FLFFBQU0sTUFBTUEsUUFBTyxLQUFLLEtBQUssQ0FBQTJCLFNBQU87O0FBQUMsWUFBQUEsS0FBSSxZQUFZLFFBQVMsU0FBU0EsS0FBSSxZQUFZLFlBQ25GLEtBQUFBLEtBQUksU0FBSixtQkFBVSxLQUFLO0FBQUEsR0FBTSxLQUFLM0IsUUFBT1QsUUFBTTtBQUMzQyxNQUFJUyxRQUFPLFFBQVE7QUFDZixVQUFNLFNBQVNBLFFBQU8sT0FBTyxLQUFLLENBQUEyQixTQUFHOztBQUFJLGFBQUFBLEtBQUksYUFBVyxLQUFBQSxLQUFJLFNBQUosbUJBQVUsS0FBSztBQUFBLEtBQU0sS0FDekUzQixRQUFPVCxRQUFNO0FBQ2pCLFFBQUksSUFBSSxRQUFRLE9BQU8sS0FBSztBQUN4QixZQUFNLEtBQUssV0FBVyxVQUFVLElBQUksR0FBRztBQUN2QyxZQUFNLEtBQUssV0FBVyxVQUFVLE9BQU8sR0FBRztBQUMxQyxZQUFNLE1BQU0saUNBQWlDLEVBQUUsT0FBTyxFQUFFO0FBQ3hELGNBQVEsT0FBTyxzQkFBc0IsS0FBSyxJQUFJO0FBQUEsSUFDMUQ7QUFBQSxFQUNBO0FBQ0ksU0FBTztBQUNYO0FDbkZBLFNBQVMsb0JBQW9CLFFBQVEsUUFBUSxLQUFLO0FBQzlDLE1BQUksUUFBUTtBQUNSLFFBQUksUUFBUTtBQUNSLFlBQU0sT0FBTztBQUNqQixhQUFTLElBQUksTUFBTSxHQUFHLEtBQUssR0FBRyxFQUFFLEdBQUc7QUFDL0IsVUFBSSxLQUFLLE9BQU8sQ0FBQztBQUNqQixjQUFRLEdBQUcsTUFBSTtBQUFBLFFBQ1gsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELG9CQUFVLEdBQUcsT0FBTztBQUNwQjtBQUFBLE1BQ3BCO0FBR1ksV0FBSyxPQUFPLEVBQUUsQ0FBQztBQUNmLGNBQU8seUJBQUksVUFBUyxTQUFTO0FBQ3pCLGtCQUFVLEdBQUcsT0FBTztBQUNwQixhQUFLLE9BQU8sRUFBRSxDQUFDO0FBQUEsTUFDL0I7QUFDWTtBQUFBLElBQ1o7QUFBQSxFQUNBO0FBQ0ksU0FBTztBQUNYO0FDakJBLE1BQU0sS0FBSyxFQUFFLGFBQWEsaUJBQWtCO0FBQzVDLFNBQVMsWUFBWSxLQUFLLE9BQU8sT0FBTyxTQUFTO0FBQzdDLFFBQU0sUUFBUSxJQUFJO0FBQ2xCLFFBQU0sRUFBRSxhQUFhLFNBQVMsUUFBUSxJQUFLLElBQUc7QUFDOUMsTUFBSTtBQUNKLE1BQUksYUFBYTtBQUNqQixVQUFRLE1BQU0sTUFBSTtBQUFBLElBQ2QsS0FBSztBQUNELGFBQU8sYUFBYSxLQUFLLE9BQU8sT0FBTztBQUN2QyxVQUFJLFVBQVU7QUFDVixnQkFBUSxPQUFPLGVBQWUsK0NBQStDO0FBQ2pGO0FBQUEsSUFDSixLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQ0QsYUFBTyxjQUFjLEtBQUssT0FBTyxLQUFLLE9BQU87QUFDN0MsVUFBSTtBQUNBLGFBQUssU0FBUyxPQUFPLE9BQU8sVUFBVSxDQUFDO0FBQzNDO0FBQUEsSUFDSixLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQ0QsYUFBTyxrQkFBa0IsSUFBSSxLQUFLLE9BQU8sT0FBTyxPQUFPO0FBQ3ZELFVBQUk7QUFDQSxhQUFLLFNBQVMsT0FBTyxPQUFPLFVBQVUsQ0FBQztBQUMzQztBQUFBLElBQ0osU0FBUztBQUNMLFlBQU0sVUFBVSxNQUFNLFNBQVMsVUFDekIsTUFBTSxVQUNOLDRCQUE0QixNQUFNLElBQUk7QUFDNUMsY0FBUSxPQUFPLG9CQUFvQixPQUFPO0FBQzFDLGFBQU8saUJBQWlCLEtBQUssTUFBTSxRQUFRLFFBQVcsTUFBTSxPQUFPLE9BQU87QUFDMUUsbUJBQWE7QUFBQSxJQUN6QjtBQUFBLEVBQ0E7QUFDSSxNQUFJLFVBQVUsS0FBSyxXQUFXO0FBQzFCLFlBQVEsUUFBUSxhQUFhLGtDQUFrQztBQUNuRSxNQUFJLFNBQ0EsSUFBSSxRQUFRLGVBQ1gsQ0FBQ0MsV0FBUyxJQUFJLEtBQ1gsT0FBTyxLQUFLLFVBQVUsWUFDckIsS0FBSyxPQUFPLEtBQUssUUFBUSwwQkFBMkI7QUFDekQsVUFBTSxNQUFNO0FBQ1osWUFBUSxPQUFPLE9BQU8sa0JBQWtCLEdBQUc7QUFBQSxFQUNuRDtBQUNJLE1BQUk7QUFDQSxTQUFLLGNBQWM7QUFDdkIsTUFBSSxTQUFTO0FBQ1QsUUFBSSxNQUFNLFNBQVMsWUFBWSxNQUFNLFdBQVc7QUFDNUMsV0FBSyxVQUFVO0FBQUE7QUFFZixXQUFLLGdCQUFnQjtBQUFBLEVBQ2pDO0FBRUksTUFBSSxJQUFJLFFBQVEsb0JBQW9CO0FBQ2hDLFNBQUssV0FBVztBQUNwQixTQUFPO0FBQ1g7QUFDQSxTQUFTLGlCQUFpQixLQUFLLFFBQVEsUUFBUSxLQUFLLEVBQUUsYUFBYSxTQUFTLFFBQVEsS0FBSyxJQUFHLEdBQUksU0FBUztBQUNyRyxRQUFNLFFBQVE7QUFBQSxJQUNWLE1BQU07QUFBQSxJQUNOLFFBQVEsb0JBQW9CLFFBQVEsUUFBUSxHQUFHO0FBQUEsSUFDL0MsUUFBUTtBQUFBLElBQ1IsUUFBUTtBQUFBLEVBQ1g7QUFDRCxRQUFNLE9BQU8sY0FBYyxLQUFLLE9BQU8sS0FBSyxPQUFPO0FBQ25ELE1BQUksUUFBUTtBQUNSLFNBQUssU0FBUyxPQUFPLE9BQU8sVUFBVSxDQUFDO0FBQ3ZDLFFBQUksS0FBSyxXQUFXO0FBQ2hCLGNBQVEsUUFBUSxhQUFhLGtDQUFrQztBQUFBLEVBQzNFO0FBQ0ksTUFBSTtBQUNBLFNBQUssY0FBYztBQUN2QixNQUFJLFNBQVM7QUFDVCxTQUFLLFVBQVU7QUFDZixTQUFLLE1BQU0sQ0FBQyxJQUFJO0FBQUEsRUFDeEI7QUFDSSxTQUFPO0FBQ1g7QUFDQSxTQUFTLGFBQWEsRUFBRSxXQUFXLEVBQUUsUUFBUSxRQUFRLElBQUssR0FBRSxTQUFTO0FBQ2pFLFFBQU0sUUFBUSxJQUFJLE1BQU0sT0FBTyxVQUFVLENBQUMsQ0FBQztBQUMzQyxNQUFJLE1BQU0sV0FBVztBQUNqQixZQUFRLFFBQVEsYUFBYSxpQ0FBaUM7QUFDbEUsTUFBSSxNQUFNLE9BQU8sU0FBUyxHQUFHO0FBQ3pCLFlBQVEsU0FBUyxPQUFPLFNBQVMsR0FBRyxhQUFhLGtDQUFrQyxJQUFJO0FBQzNGLFFBQU0sV0FBVyxTQUFTLE9BQU87QUFDakMsUUFBTSxLQUFLLFdBQVcsS0FBSyxVQUFVLFFBQVEsUUFBUSxPQUFPO0FBQzVELFFBQU0sUUFBUSxDQUFDLFFBQVEsVUFBVSxHQUFHLE1BQU07QUFDMUMsTUFBSSxHQUFHO0FBQ0gsVUFBTSxVQUFVLEdBQUc7QUFDdkIsU0FBTztBQUNYO0FDOUZBLFNBQVMsV0FBVyxTQUFTLFlBQVksRUFBRSxRQUFRLE9BQU8sT0FBTyxJQUFLLEdBQUUsU0FBUztBQUM3RSxRQUFNLE9BQU8sT0FBTyxPQUFPLEVBQUUsYUFBYSxXQUFZLEdBQUUsT0FBTztBQUMvRCxRQUFNLE1BQU0sSUFBSSxTQUFTLFFBQVcsSUFBSTtBQUN4QyxRQUFNLE1BQU07QUFBQSxJQUNSLE9BQU87QUFBQSxJQUNQLFFBQVE7QUFBQSxJQUNSLFlBQVksSUFBSTtBQUFBLElBQ2hCLFNBQVMsSUFBSTtBQUFBLElBQ2IsUUFBUSxJQUFJO0FBQUEsRUFDZjtBQUNELFFBQU0sUUFBUSxhQUFhLE9BQU87QUFBQSxJQUM5QixXQUFXO0FBQUEsSUFDWCxNQUFNLFVBQVMsMkJBQU07QUFBQSxJQUNyQjtBQUFBLElBQ0E7QUFBQSxJQUNBLGNBQWM7QUFBQSxJQUNkLGdCQUFnQjtBQUFBLEVBQ3hCLENBQUs7QUFDRCxNQUFJLE1BQU0sT0FBTztBQUNiLFFBQUksV0FBVyxXQUFXO0FBQzFCLFFBQUksVUFDQyxNQUFNLFNBQVMsZUFBZSxNQUFNLFNBQVMsZ0JBQzlDLENBQUMsTUFBTTtBQUNQLGNBQVEsTUFBTSxLQUFLLGdCQUFnQix1RUFBdUU7QUFBQSxFQUN0SDtBQUVJLE1BQUksV0FBVyxRQUNULFlBQVksS0FBSyxPQUFPLE9BQU8sT0FBTyxJQUN0QyxpQkFBaUIsS0FBSyxNQUFNLEtBQUssT0FBTyxNQUFNLE9BQU8sT0FBTztBQUNsRSxRQUFNLGFBQWEsSUFBSSxTQUFTLE1BQU0sQ0FBQztBQUN2QyxRQUFNLEtBQUssV0FBVyxLQUFLLFlBQVksT0FBTyxPQUFPO0FBQ3JELE1BQUksR0FBRztBQUNILFFBQUksVUFBVSxHQUFHO0FBQ3JCLE1BQUksUUFBUSxDQUFDLFFBQVEsWUFBWSxHQUFHLE1BQU07QUFDMUMsU0FBTztBQUNYO0FDakNBLFNBQVMsWUFBWSxLQUFLO0FBQ3RCLE1BQUksT0FBTyxRQUFRO0FBQ2YsV0FBTyxDQUFDLEtBQUssTUFBTSxDQUFDO0FBQ3hCLE1BQUksTUFBTSxRQUFRLEdBQUc7QUFDakIsV0FBTyxJQUFJLFdBQVcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDbkQsUUFBTSxFQUFFLFFBQVEsT0FBTSxJQUFLO0FBQzNCLFNBQU8sQ0FBQyxRQUFRLFVBQVUsT0FBTyxXQUFXLFdBQVcsT0FBTyxTQUFTLEVBQUU7QUFDN0U7QUFDQSxTQUFTLGFBQWEsU0FBUzs7QUFDM0IsTUFBSSxVQUFVO0FBQ2QsTUFBSSxZQUFZO0FBQ2hCLE1BQUksaUJBQWlCO0FBQ3JCLFdBQVMsSUFBSSxHQUFHLElBQUksUUFBUSxRQUFRLEVBQUUsR0FBRztBQUNyQyxVQUFNLFNBQVMsUUFBUSxDQUFDO0FBQ3hCLFlBQVEsT0FBTyxDQUFDLEdBQUM7QUFBQSxNQUNiLEtBQUs7QUFDRCxvQkFDSyxZQUFZLEtBQUssS0FBSyxpQkFBaUIsU0FBUyxTQUM1QyxPQUFPLFVBQVUsQ0FBQyxLQUFLO0FBQ2hDLG9CQUFZO0FBQ1oseUJBQWlCO0FBQ2pCO0FBQUEsTUFDSixLQUFLO0FBQ0QsY0FBSSxhQUFRLElBQUksQ0FBQyxNQUFiLG1CQUFpQixRQUFPO0FBQ3hCLGVBQUs7QUFDVCxvQkFBWTtBQUNaO0FBQUEsTUFDSjtBQUVJLFlBQUksQ0FBQztBQUNELDJCQUFpQjtBQUNyQixvQkFBWTtBQUFBLElBQzVCO0FBQUEsRUFDQTtBQUNJLFNBQU8sRUFBRSxTQUFTLGVBQWdCO0FBQ3RDO0FBWUEsTUFBTSxTQUFTO0FBQUEsRUFDWCxZQUFZLFVBQVUsSUFBSTtBQUN0QixTQUFLLE1BQU07QUFDWCxTQUFLLGVBQWU7QUFDcEIsU0FBSyxVQUFVLENBQUU7QUFDakIsU0FBSyxTQUFTLENBQUU7QUFDaEIsU0FBSyxXQUFXLENBQUU7QUFDbEIsU0FBSyxVQUFVLENBQUMsUUFBUSxNQUFNLFNBQVMsWUFBWTtBQUMvQyxZQUFNLE1BQU0sWUFBWSxNQUFNO0FBQzlCLFVBQUk7QUFDQSxhQUFLLFNBQVMsS0FBSyxJQUFJLFlBQVksS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUFBO0FBRXRELGFBQUssT0FBTyxLQUFLLElBQUksZUFBZSxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQUEsSUFDOUQ7QUFFRCxTQUFLLGFBQWEsSUFBSSxXQUFXLEVBQUUsU0FBUyxRQUFRLFdBQVcsT0FBTztBQUN0RSxTQUFLLFVBQVU7QUFBQSxFQUN2QjtBQUFBLEVBQ0ksU0FBUyxLQUFLLFVBQVU7QUFDcEIsVUFBTSxFQUFFLFNBQVMsZUFBYyxJQUFLLGFBQWEsS0FBSyxPQUFPO0FBRTdELFFBQUksU0FBUztBQUNULFlBQU0sS0FBSyxJQUFJO0FBQ2YsVUFBSSxVQUFVO0FBQ1YsWUFBSSxVQUFVLElBQUksVUFBVSxHQUFHLElBQUksT0FBTztBQUFBLEVBQUssT0FBTyxLQUFLO0FBQUEsTUFDM0UsV0FDcUIsa0JBQWtCLElBQUksV0FBVyxZQUFZLENBQUMsSUFBSTtBQUN2RCxZQUFJLGdCQUFnQjtBQUFBLE1BQ3BDLFdBQ3FCQyxlQUFhLEVBQUUsS0FBSyxDQUFDLEdBQUcsUUFBUSxHQUFHLE1BQU0sU0FBUyxHQUFHO0FBQzFELFlBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNuQixZQUFJLE9BQU8sRUFBRTtBQUNULGVBQUssR0FBRztBQUNaLGNBQU0sS0FBSyxHQUFHO0FBQ2QsV0FBRyxnQkFBZ0IsS0FBSyxHQUFHLE9BQU87QUFBQSxFQUFLLEVBQUUsS0FBSztBQUFBLE1BQzlELE9BQ2lCO0FBQ0QsY0FBTSxLQUFLLEdBQUc7QUFDZCxXQUFHLGdCQUFnQixLQUFLLEdBQUcsT0FBTztBQUFBLEVBQUssRUFBRSxLQUFLO0FBQUEsTUFDOUQ7QUFBQSxJQUNBO0FBQ1EsUUFBSSxVQUFVO0FBQ1YsWUFBTSxVQUFVLEtBQUssTUFBTSxJQUFJLFFBQVEsS0FBSyxNQUFNO0FBQ2xELFlBQU0sVUFBVSxLQUFLLE1BQU0sSUFBSSxVQUFVLEtBQUssUUFBUTtBQUFBLElBQ2xFLE9BQ2E7QUFDRCxVQUFJLFNBQVMsS0FBSztBQUNsQixVQUFJLFdBQVcsS0FBSztBQUFBLElBQ2hDO0FBQ1EsU0FBSyxVQUFVLENBQUU7QUFDakIsU0FBSyxTQUFTLENBQUU7QUFDaEIsU0FBSyxXQUFXLENBQUU7QUFBQSxFQUMxQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1JLGFBQWE7QUFDVCxXQUFPO0FBQUEsTUFDSCxTQUFTLGFBQWEsS0FBSyxPQUFPLEVBQUU7QUFBQSxNQUNwQyxZQUFZLEtBQUs7QUFBQSxNQUNqQixRQUFRLEtBQUs7QUFBQSxNQUNiLFVBQVUsS0FBSztBQUFBLElBQ2xCO0FBQUEsRUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0ksQ0FBQyxRQUFRLFFBQVEsV0FBVyxPQUFPLFlBQVksSUFBSTtBQUMvQyxlQUFXLFNBQVM7QUFDaEIsYUFBTyxLQUFLLEtBQUssS0FBSztBQUMxQixXQUFPLEtBQUssSUFBSSxVQUFVLFNBQVM7QUFBQSxFQUMzQztBQUFBO0FBQUEsRUFFSSxDQUFDLEtBQUssT0FBTztBQUNULFlBQVEsTUFBTSxNQUFJO0FBQUEsTUFDZCxLQUFLO0FBQ0QsYUFBSyxXQUFXLElBQUksTUFBTSxRQUFRLENBQUMsUUFBUSxTQUFTLFlBQVk7QUFDNUQsZ0JBQU0sTUFBTSxZQUFZLEtBQUs7QUFDN0IsY0FBSSxDQUFDLEtBQUs7QUFDVixlQUFLLFFBQVEsS0FBSyxpQkFBaUIsU0FBUyxPQUFPO0FBQUEsUUFDdkUsQ0FBaUI7QUFDRCxhQUFLLFFBQVEsS0FBSyxNQUFNLE1BQU07QUFDOUIsYUFBSyxlQUFlO0FBQ3BCO0FBQUEsTUFDSixLQUFLLFlBQVk7QUFDYixjQUFNLE1BQU0sV0FBVyxLQUFLLFNBQVMsS0FBSyxZQUFZLE9BQU8sS0FBSyxPQUFPO0FBQ3pFLFlBQUksS0FBSyxnQkFBZ0IsQ0FBQyxJQUFJLFdBQVc7QUFDckMsZUFBSyxRQUFRLE9BQU8sZ0JBQWdCLGlEQUFpRDtBQUN6RixhQUFLLFNBQVMsS0FBSyxLQUFLO0FBQ3hCLFlBQUksS0FBSztBQUNMLGdCQUFNLEtBQUs7QUFDZixhQUFLLE1BQU07QUFDWCxhQUFLLGVBQWU7QUFDcEI7QUFBQSxNQUNoQjtBQUFBLE1BQ1ksS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNEO0FBQUEsTUFDSixLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQ0QsYUFBSyxRQUFRLEtBQUssTUFBTSxNQUFNO0FBQzlCO0FBQUEsTUFDSixLQUFLLFNBQVM7QUFDVixjQUFNLE1BQU0sTUFBTSxTQUNaLEdBQUcsTUFBTSxPQUFPLEtBQUssS0FBSyxVQUFVLE1BQU0sTUFBTSxDQUFDLEtBQ2pELE1BQU07QUFDWixjQUFNLFFBQVEsSUFBSSxlQUFlLFlBQVksS0FBSyxHQUFHLG9CQUFvQixHQUFHO0FBQzVFLFlBQUksS0FBSyxnQkFBZ0IsQ0FBQyxLQUFLO0FBQzNCLGVBQUssT0FBTyxLQUFLLEtBQUs7QUFBQTtBQUV0QixlQUFLLElBQUksT0FBTyxLQUFLLEtBQUs7QUFDOUI7QUFBQSxNQUNoQjtBQUFBLE1BQ1ksS0FBSyxXQUFXO0FBQ1osWUFBSSxDQUFDLEtBQUssS0FBSztBQUNYLGdCQUFNLE1BQU07QUFDWixlQUFLLE9BQU8sS0FBSyxJQUFJLGVBQWUsWUFBWSxLQUFLLEdBQUcsb0JBQW9CLEdBQUcsQ0FBQztBQUNoRjtBQUFBLFFBQ3BCO0FBQ2dCLGFBQUssSUFBSSxXQUFXLFNBQVM7QUFDN0IsY0FBTSxNQUFNLFdBQVcsTUFBTSxLQUFLLE1BQU0sU0FBUyxNQUFNLE9BQU8sUUFBUSxLQUFLLElBQUksUUFBUSxRQUFRLEtBQUssT0FBTztBQUMzRyxhQUFLLFNBQVMsS0FBSyxLQUFLLElBQUk7QUFDNUIsWUFBSSxJQUFJLFNBQVM7QUFDYixnQkFBTSxLQUFLLEtBQUssSUFBSTtBQUNwQixlQUFLLElBQUksVUFBVSxLQUFLLEdBQUcsRUFBRTtBQUFBLEVBQUssSUFBSSxPQUFPLEtBQUssSUFBSTtBQUFBLFFBQzFFO0FBQ2dCLGFBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJO0FBQ3hCO0FBQUEsTUFDaEI7QUFBQSxNQUNZO0FBQ0ksYUFBSyxPQUFPLEtBQUssSUFBSSxlQUFlLFlBQVksS0FBSyxHQUFHLG9CQUFvQixxQkFBcUIsTUFBTSxJQUFJLEVBQUUsQ0FBQztBQUFBLElBQzlIO0FBQUEsRUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0ksQ0FBQyxJQUFJLFdBQVcsT0FBTyxZQUFZLElBQUk7QUFDbkMsUUFBSSxLQUFLLEtBQUs7QUFDVixXQUFLLFNBQVMsS0FBSyxLQUFLLElBQUk7QUFDNUIsWUFBTSxLQUFLO0FBQ1gsV0FBSyxNQUFNO0FBQUEsSUFDdkIsV0FDaUIsVUFBVTtBQUNmLFlBQU0sT0FBTyxPQUFPLE9BQU8sRUFBRSxhQUFhLEtBQUssV0FBVSxHQUFJLEtBQUssT0FBTztBQUN6RSxZQUFNLE1BQU0sSUFBSSxTQUFTLFFBQVcsSUFBSTtBQUN4QyxVQUFJLEtBQUs7QUFDTCxhQUFLLFFBQVEsV0FBVyxnQkFBZ0IsdUNBQXVDO0FBQ25GLFVBQUksUUFBUSxDQUFDLEdBQUcsV0FBVyxTQUFTO0FBQ3BDLFdBQUssU0FBUyxLQUFLLEtBQUs7QUFDeEIsWUFBTTtBQUFBLElBQ2xCO0FBQUEsRUFDQTtBQUNBO0FDak5BLFNBQVMsZ0JBQWdCLE9BQU8sU0FBUyxNQUFNLFNBQVM7QUFDcEQsTUFBSSxPQUFPO0FBQ1AsVUFBTSxXQUFXLENBQUMsS0FBSyxNQUFNLFlBQVk7QUFDckMsWUFBTSxTQUFTLE9BQU8sUUFBUSxXQUFXLE1BQU0sTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJO0FBQ2pGLFVBQUk7QUFDQSxnQkFBUSxRQUFRLE1BQU0sT0FBTztBQUFBO0FBRTdCLGNBQU0sSUFBSSxlQUFlLENBQUMsUUFBUSxTQUFTLENBQUMsR0FBRyxNQUFNLE9BQU87QUFBQSxJQUNuRTtBQUNELFlBQVEsTUFBTSxNQUFJO0FBQUEsTUFDZCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQ0QsZUFBTyxrQkFBa0IsT0FBTyxRQUFRLFFBQVE7QUFBQSxNQUNwRCxLQUFLO0FBQ0QsZUFBTyxtQkFBbUIsRUFBRSxTQUFTLEVBQUUsT0FBTSxFQUFJLEdBQUUsT0FBTyxRQUFRO0FBQUEsSUFDbEY7QUFBQSxFQUNBO0FBQ0ksU0FBTztBQUNYO0FBZUEsU0FBUyxrQkFBa0IsT0FBTyxTQUFTO0FBQ3ZDLFFBQU0sRUFBRSxjQUFjLE9BQU8sUUFBUSxTQUFTLE9BQU8sU0FBUyxJQUFJLE9BQU8sUUFBUyxJQUFHO0FBQ3JGLFFBQU0sU0FBUyxnQkFBZ0IsRUFBRSxNQUFNLE1BQUssR0FBSTtBQUFBLElBQzVDO0FBQUEsSUFDQSxRQUFRLFNBQVMsSUFBSSxJQUFJLE9BQU8sTUFBTSxJQUFJO0FBQUEsSUFDMUM7QUFBQSxJQUNBLFNBQVMsRUFBRSxZQUFZLE1BQU0sV0FBVyxHQUFFO0FBQUEsRUFDbEQsQ0FBSztBQUNELFFBQU0sTUFBTSxRQUFRLE9BQU87QUFBQSxJQUN2QixFQUFFLE1BQU0sV0FBVyxRQUFRLElBQUksUUFBUSxRQUFRLEtBQUk7QUFBQSxFQUN0RDtBQUNELFVBQVEsT0FBTyxDQUFDLEdBQUM7QUFBQSxJQUNiLEtBQUs7QUFBQSxJQUNMLEtBQUssS0FBSztBQUNOLFlBQU0sS0FBSyxPQUFPLFFBQVEsSUFBSTtBQUM5QixZQUFNLE9BQU8sT0FBTyxVQUFVLEdBQUcsRUFBRTtBQUNuQyxZQUFNLE9BQU8sT0FBTyxVQUFVLEtBQUssQ0FBQyxJQUFJO0FBQ3hDLFlBQU0sUUFBUTtBQUFBLFFBQ1YsRUFBRSxNQUFNLHVCQUF1QixRQUFRLFFBQVEsUUFBUSxLQUFJO0FBQUEsTUFDOUQ7QUFDRCxVQUFJLENBQUMsbUJBQW1CLE9BQU8sR0FBRztBQUM5QixjQUFNLEtBQUssRUFBRSxNQUFNLFdBQVcsUUFBUSxJQUFJLFFBQVEsUUFBUSxNQUFNO0FBQ3BFLGFBQU8sRUFBRSxNQUFNLGdCQUFnQixRQUFRLFFBQVEsT0FBTyxRQUFRLEtBQU07QUFBQSxJQUNoRjtBQUFBLElBQ1EsS0FBSztBQUNELGFBQU8sRUFBRSxNQUFNLHdCQUF3QixRQUFRLFFBQVEsUUFBUSxJQUFLO0FBQUEsSUFDeEUsS0FBSztBQUNELGFBQU8sRUFBRSxNQUFNLHdCQUF3QixRQUFRLFFBQVEsUUFBUSxJQUFLO0FBQUEsSUFDeEU7QUFDSSxhQUFPLEVBQUUsTUFBTSxVQUFVLFFBQVEsUUFBUSxRQUFRLElBQUs7QUFBQSxFQUNsRTtBQUNBO0FBaUJBLFNBQVMsZUFBZSxPQUFPLE9BQU8sVUFBVSxJQUFJO0FBQ2hELE1BQUksRUFBRSxXQUFXLE9BQU8sY0FBYyxPQUFPLFNBQVMsT0FBTyxLQUFJLElBQUs7QUFDdEUsTUFBSSxTQUFTLFlBQVksUUFBUSxNQUFNLFNBQVM7QUFDaEQsTUFBSSxZQUFZLE9BQU8sV0FBVztBQUM5QixjQUFVO0FBQ2QsTUFBSSxDQUFDO0FBQ0QsWUFBUSxNQUFNLE1BQUk7QUFBQSxNQUNkLEtBQUs7QUFDRCxlQUFPO0FBQ1A7QUFBQSxNQUNKLEtBQUs7QUFDRCxlQUFPO0FBQ1A7QUFBQSxNQUNKLEtBQUssZ0JBQWdCO0FBQ2pCLGNBQU0sU0FBUyxNQUFNLE1BQU0sQ0FBQztBQUM1QixZQUFJLE9BQU8sU0FBUztBQUNoQixnQkFBTSxJQUFJLE1BQU0sNkJBQTZCO0FBQ2pELGVBQU8sT0FBTyxPQUFPLENBQUMsTUFBTSxNQUFNLGlCQUFpQjtBQUNuRDtBQUFBLE1BQ2hCO0FBQUEsTUFDWTtBQUNJLGVBQU87QUFBQSxJQUN2QjtBQUNJLFFBQU0sU0FBUyxnQkFBZ0IsRUFBRSxNQUFNLE1BQUssR0FBSTtBQUFBLElBQzVDLGFBQWEsZUFBZSxXQUFXO0FBQUEsSUFDdkMsUUFBUSxXQUFXLFFBQVEsU0FBUyxJQUFJLElBQUksT0FBTyxNQUFNLElBQUk7QUFBQSxJQUM3RDtBQUFBLElBQ0EsU0FBUyxFQUFFLFlBQVksTUFBTSxXQUFXLEdBQUU7QUFBQSxFQUNsRCxDQUFLO0FBQ0QsVUFBUSxPQUFPLENBQUMsR0FBQztBQUFBLElBQ2IsS0FBSztBQUFBLElBQ0wsS0FBSztBQUNELDBCQUFvQixPQUFPLE1BQU07QUFDakM7QUFBQSxJQUNKLEtBQUs7QUFDRCx5QkFBbUIsT0FBTyxRQUFRLHNCQUFzQjtBQUN4RDtBQUFBLElBQ0osS0FBSztBQUNELHlCQUFtQixPQUFPLFFBQVEsc0JBQXNCO0FBQ3hEO0FBQUEsSUFDSjtBQUNJLHlCQUFtQixPQUFPLFFBQVEsUUFBUTtBQUFBLEVBQ3REO0FBQ0E7QUFDQSxTQUFTLG9CQUFvQixPQUFPLFFBQVE7QUFDeEMsUUFBTSxLQUFLLE9BQU8sUUFBUSxJQUFJO0FBQzlCLFFBQU0sT0FBTyxPQUFPLFVBQVUsR0FBRyxFQUFFO0FBQ25DLFFBQU0sT0FBTyxPQUFPLFVBQVUsS0FBSyxDQUFDLElBQUk7QUFDeEMsTUFBSSxNQUFNLFNBQVMsZ0JBQWdCO0FBQy9CLFVBQU0sU0FBUyxNQUFNLE1BQU0sQ0FBQztBQUM1QixRQUFJLE9BQU8sU0FBUztBQUNoQixZQUFNLElBQUksTUFBTSw2QkFBNkI7QUFDakQsV0FBTyxTQUFTO0FBQ2hCLFVBQU0sU0FBUztBQUFBLEVBQ3ZCLE9BQ1M7QUFDRCxVQUFNLEVBQUUsT0FBTSxJQUFLO0FBQ25CLFVBQU0sU0FBUyxZQUFZLFFBQVEsTUFBTSxTQUFTO0FBQ2xELFVBQU0sUUFBUTtBQUFBLE1BQ1YsRUFBRSxNQUFNLHVCQUF1QixRQUFRLFFBQVEsUUFBUSxLQUFJO0FBQUEsSUFDOUQ7QUFDRCxRQUFJLENBQUMsbUJBQW1CLE9BQU8sU0FBUyxRQUFRLE1BQU0sTUFBTSxNQUFTO0FBQ2pFLFlBQU0sS0FBSyxFQUFFLE1BQU0sV0FBVyxRQUFRLElBQUksUUFBUSxRQUFRLE1BQU07QUFDcEUsZUFBVyxPQUFPLE9BQU8sS0FBSyxLQUFLO0FBQy9CLFVBQUksUUFBUSxVQUFVLFFBQVE7QUFDMUIsZUFBTyxNQUFNLEdBQUc7QUFDeEIsV0FBTyxPQUFPLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixRQUFRLE9BQU8sUUFBUSxNQUFNO0FBQUEsRUFDbEY7QUFDQTtBQUVBLFNBQVMsbUJBQW1CLE9BQU8sS0FBSztBQUNwQyxNQUFJO0FBQ0EsZUFBVyxNQUFNO0FBQ2IsY0FBUSxHQUFHLE1BQUk7QUFBQSxRQUNYLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDRCxnQkFBTSxLQUFLLEVBQUU7QUFDYjtBQUFBLFFBQ0osS0FBSztBQUNELGdCQUFNLEtBQUssRUFBRTtBQUNiLGlCQUFPO0FBQUEsTUFDM0I7QUFDSSxTQUFPO0FBQ1g7QUFDQSxTQUFTLG1CQUFtQixPQUFPLFFBQVEsTUFBTTtBQUM3QyxVQUFRLE1BQU0sTUFBSTtBQUFBLElBQ2QsS0FBSztBQUFBLElBQ0wsS0FBSztBQUFBLElBQ0wsS0FBSztBQUNELFlBQU0sT0FBTztBQUNiLFlBQU0sU0FBUztBQUNmO0FBQUEsSUFDSixLQUFLLGdCQUFnQjtBQUNqQixZQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sQ0FBQztBQUMvQixVQUFJLEtBQUssT0FBTztBQUNoQixVQUFJLE1BQU0sTUFBTSxDQUFDLEVBQUUsU0FBUztBQUN4QixjQUFNLE1BQU0sTUFBTSxDQUFDLEVBQUUsT0FBTztBQUNoQyxpQkFBVyxPQUFPO0FBQ2QsWUFBSSxVQUFVO0FBQ2xCLGFBQU8sTUFBTTtBQUNiLGFBQU8sT0FBTyxPQUFPLEVBQUUsTUFBTSxRQUFRLEtBQUs7QUFDMUM7QUFBQSxJQUNaO0FBQUEsSUFDUSxLQUFLO0FBQUEsSUFDTCxLQUFLLGFBQWE7QUFDZCxZQUFNLFNBQVMsTUFBTSxTQUFTLE9BQU87QUFDckMsWUFBTSxLQUFLLEVBQUUsTUFBTSxXQUFXLFFBQVEsUUFBUSxNQUFNLFFBQVEsUUFBUSxLQUFNO0FBQzFFLGFBQU8sTUFBTTtBQUNiLGFBQU8sT0FBTyxPQUFPLEVBQUUsTUFBTSxRQUFRLEtBQUssQ0FBQyxFQUFFLEdBQUc7QUFDaEQ7QUFBQSxJQUNaO0FBQUEsSUFDUSxTQUFTO0FBQ0wsWUFBTSxTQUFTLFlBQVksUUFBUSxNQUFNLFNBQVM7QUFDbEQsWUFBTSxNQUFNLFNBQVMsU0FBUyxNQUFNLFFBQVEsTUFBTSxHQUFHLElBQy9DLE1BQU0sSUFBSSxPQUFPLFFBQU0sR0FBRyxTQUFTLFdBQ2pDLEdBQUcsU0FBUyxhQUNaLEdBQUcsU0FBUyxTQUFTLElBQ3ZCLENBQUU7QUFDUixpQkFBVyxPQUFPLE9BQU8sS0FBSyxLQUFLO0FBQy9CLFlBQUksUUFBUSxVQUFVLFFBQVE7QUFDMUIsaUJBQU8sTUFBTSxHQUFHO0FBQ3hCLGFBQU8sT0FBTyxPQUFPLEVBQUUsTUFBTSxRQUFRLFFBQVEsS0FBSztBQUFBLElBQzlEO0FBQUEsRUFDQTtBQUNBO0FDN01BLE1BQU1ZLGNBQVksQ0FBQ3VCLFNBQVEsVUFBVUEsT0FBTSxlQUFlQSxJQUFHLElBQUksY0FBY0EsSUFBRztBQUNsRixTQUFTLGVBQWUsT0FBTztBQUMzQixVQUFRLE1BQU0sTUFBSTtBQUFBLElBQ2QsS0FBSyxnQkFBZ0I7QUFDakIsVUFBSSxNQUFNO0FBQ1YsaUJBQVcsT0FBTyxNQUFNO0FBQ3BCLGVBQU8sZUFBZSxHQUFHO0FBQzdCLGFBQU8sTUFBTSxNQUFNO0FBQUEsSUFDL0I7QUFBQSxJQUNRLEtBQUs7QUFBQSxJQUNMLEtBQUssYUFBYTtBQUNkLFVBQUksTUFBTTtBQUNWLGlCQUFXLFFBQVEsTUFBTTtBQUNyQixlQUFPLGNBQWMsSUFBSTtBQUM3QixhQUFPO0FBQUEsSUFDbkI7QUFBQSxJQUNRLEtBQUssbUJBQW1CO0FBQ3BCLFVBQUksTUFBTSxNQUFNLE1BQU07QUFDdEIsaUJBQVcsUUFBUSxNQUFNO0FBQ3JCLGVBQU8sY0FBYyxJQUFJO0FBQzdCLGlCQUFXLE1BQU0sTUFBTTtBQUNuQixlQUFPLEdBQUc7QUFDZCxhQUFPO0FBQUEsSUFDbkI7QUFBQSxJQUNRLEtBQUssWUFBWTtBQUNiLFVBQUksTUFBTSxjQUFjLEtBQUs7QUFDN0IsVUFBSSxNQUFNO0FBQ04sbUJBQVcsTUFBTSxNQUFNO0FBQ25CLGlCQUFPLEdBQUc7QUFDbEIsYUFBTztBQUFBLElBQ25CO0FBQUEsSUFDUSxTQUFTO0FBQ0wsVUFBSSxNQUFNLE1BQU07QUFDaEIsVUFBSSxTQUFTLFNBQVMsTUFBTTtBQUN4QixtQkFBVyxNQUFNLE1BQU07QUFDbkIsaUJBQU8sR0FBRztBQUNsQixhQUFPO0FBQUEsSUFDbkI7QUFBQSxFQUNBO0FBQ0E7QUFDQSxTQUFTLGNBQWMsRUFBRSxPQUFPLEtBQUssS0FBSyxNQUFLLEdBQUk7QUFDL0MsTUFBSSxNQUFNO0FBQ1YsYUFBVyxNQUFNO0FBQ2IsV0FBTyxHQUFHO0FBQ2QsTUFBSTtBQUNBLFdBQU8sZUFBZSxHQUFHO0FBQzdCLE1BQUk7QUFDQSxlQUFXLE1BQU07QUFDYixhQUFPLEdBQUc7QUFDbEIsTUFBSTtBQUNBLFdBQU8sZUFBZSxLQUFLO0FBQy9CLFNBQU87QUFDWDtBQzFEQSxNQUFNLFFBQVEsT0FBTyxhQUFhO0FBQ2xDLE1BQU0sT0FBTyxPQUFPLGVBQWU7QUFDbkMsTUFBTSxTQUFTLE9BQU8sYUFBYTtBQTZCbkMsU0FBUyxNQUFNQSxNQUFLLFNBQVM7QUFDekIsTUFBSSxVQUFVQSxRQUFPQSxLQUFJLFNBQVM7QUFDOUIsSUFBQUEsT0FBTSxFQUFFLE9BQU9BLEtBQUksT0FBTyxPQUFPQSxLQUFJLE1BQU87QUFDaEQsU0FBTyxPQUFPLE9BQU8sQ0FBRSxJQUFHQSxNQUFLLE9BQU87QUFDMUM7QUFLQSxNQUFNLFFBQVE7QUFFZCxNQUFNLE9BQU87QUFFYixNQUFNLFNBQVM7QUFFZixNQUFNLGFBQWEsQ0FBQ0EsTUFBSyxTQUFTO0FBQzlCLE1BQUksT0FBT0E7QUFDWCxhQUFXLENBQUMsT0FBTyxLQUFLLEtBQUssTUFBTTtBQUMvQixVQUFNLE1BQU0sNkJBQU87QUFDbkIsUUFBSSxPQUFPLFdBQVcsS0FBSztBQUN2QixhQUFPLElBQUksTUFBTSxLQUFLO0FBQUEsSUFDbEM7QUFFWSxhQUFPO0FBQUEsRUFDbkI7QUFDSSxTQUFPO0FBQ1g7QUFNQSxNQUFNLG1CQUFtQixDQUFDQSxNQUFLLFNBQVM7QUFDcEMsUUFBTSxTQUFTLE1BQU0sV0FBV0EsTUFBSyxLQUFLLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDdEQsUUFBTSxRQUFRLEtBQUssS0FBSyxTQUFTLENBQUMsRUFBRSxDQUFDO0FBQ3JDLFFBQU0sT0FBTyxpQ0FBUztBQUN0QixNQUFJLFFBQVEsV0FBVztBQUNuQixXQUFPO0FBQ1gsUUFBTSxJQUFJLE1BQU0sNkJBQTZCO0FBQ2pEO0FBQ0EsU0FBUyxPQUFPLE1BQU0sTUFBTSxTQUFTO0FBQ2pDLE1BQUksT0FBTyxRQUFRLE1BQU0sSUFBSTtBQUM3QixNQUFJLE9BQU8sU0FBUztBQUNoQixXQUFPO0FBQ1gsYUFBVyxTQUFTLENBQUMsT0FBTyxPQUFPLEdBQUc7QUFDbEMsVUFBTSxRQUFRLEtBQUssS0FBSztBQUN4QixRQUFJLFNBQVMsV0FBVyxPQUFPO0FBQzNCLGVBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxNQUFNLFFBQVEsRUFBRSxHQUFHO0FBQ3pDLGNBQU0sS0FBSyxPQUFPLE9BQU8sT0FBTyxLQUFLLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsT0FBTztBQUNuRixZQUFJLE9BQU8sT0FBTztBQUNkLGNBQUksS0FBSztBQUFBLGlCQUNKLE9BQU87QUFDWixpQkFBTztBQUFBLGlCQUNGLE9BQU8sUUFBUTtBQUNwQixnQkFBTSxNQUFNLE9BQU8sR0FBRyxDQUFDO0FBQ3ZCLGVBQUs7QUFBQSxRQUN6QjtBQUFBLE1BQ0E7QUFDWSxVQUFJLE9BQU8sU0FBUyxjQUFjLFVBQVU7QUFDeEMsZUFBTyxLQUFLLE1BQU0sSUFBSTtBQUFBLElBQ3RDO0FBQUEsRUFDQTtBQUNJLFNBQU8sT0FBTyxTQUFTLGFBQWEsS0FBSyxNQUFNLElBQUksSUFBSTtBQUMzRDtBQ3pGQSxNQUFNLE1BQU07QUFFWixNQUFNLFdBQVc7QUFFakIsTUFBTSxXQUFXO0FBRWpCLE1BQU0sU0FBUztBQUVmLE1BQU0sZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsV0FBVztBQUV0RCxNQUFNLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxVQUN6QixNQUFNLFNBQVMsWUFDWixNQUFNLFNBQVMsMEJBQ2YsTUFBTSxTQUFTLDBCQUNmLE1BQU0sU0FBUztBQUd2QixTQUFTLFlBQVksT0FBTztBQUN4QixVQUFRLE9BQUs7QUFBQSxJQUNULEtBQUs7QUFDRCxhQUFPO0FBQUEsSUFDWCxLQUFLO0FBQ0QsYUFBTztBQUFBLElBQ1gsS0FBSztBQUNELGFBQU87QUFBQSxJQUNYLEtBQUs7QUFDRCxhQUFPO0FBQUEsSUFDWDtBQUNJLGFBQU8sS0FBSyxVQUFVLEtBQUs7QUFBQSxFQUN2QztBQUNBO0FBRUEsU0FBUyxVQUFVLFFBQVE7QUFDdkIsVUFBUSxRQUFNO0FBQUEsSUFDVixLQUFLO0FBQ0QsYUFBTztBQUFBLElBQ1gsS0FBSztBQUNELGFBQU87QUFBQSxJQUNYLEtBQUs7QUFDRCxhQUFPO0FBQUEsSUFDWCxLQUFLO0FBQ0QsYUFBTztBQUFBLElBQ1gsS0FBSztBQUNELGFBQU87QUFBQSxJQUNYLEtBQUs7QUFDRCxhQUFPO0FBQUEsSUFDWCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQ0QsYUFBTztBQUFBLElBQ1gsS0FBSztBQUNELGFBQU87QUFBQSxJQUNYLEtBQUs7QUFDRCxhQUFPO0FBQUEsSUFDWCxLQUFLO0FBQ0QsYUFBTztBQUFBLElBQ1gsS0FBSztBQUNELGFBQU87QUFBQSxJQUNYLEtBQUs7QUFDRCxhQUFPO0FBQUEsSUFDWCxLQUFLO0FBQ0QsYUFBTztBQUFBLElBQ1gsS0FBSztBQUNELGFBQU87QUFBQSxJQUNYLEtBQUs7QUFDRCxhQUFPO0FBQUEsRUFDbkI7QUFDSSxVQUFRLE9BQU8sQ0FBQyxHQUFDO0FBQUEsSUFDYixLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQ0QsYUFBTztBQUFBLElBQ1gsS0FBSztBQUNELGFBQU87QUFBQSxJQUNYLEtBQUs7QUFDRCxhQUFPO0FBQUEsSUFDWCxLQUFLO0FBQ0QsYUFBTztBQUFBLElBQ1gsS0FBSztBQUNELGFBQU87QUFBQSxJQUNYLEtBQUs7QUFDRCxhQUFPO0FBQUEsSUFDWCxLQUFLO0FBQ0QsYUFBTztBQUFBLElBQ1gsS0FBSztBQUNELGFBQU87QUFBQSxJQUNYLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFDRCxhQUFPO0FBQUEsRUFDbkI7QUFDSSxTQUFPO0FBQ1g7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDMUJBLFNBQVMsUUFBUSxJQUFJO0FBQ2pCLFVBQVEsSUFBRTtBQUFBLElBQ04sS0FBSztBQUFBLElBQ0wsS0FBSztBQUFBLElBQ0wsS0FBSztBQUFBLElBQ0wsS0FBSztBQUFBLElBQ0wsS0FBSztBQUNELGFBQU87QUFBQSxJQUNYO0FBQ0ksYUFBTztBQUFBLEVBQ25CO0FBQ0E7QUFDQSxNQUFNLFlBQVksSUFBSSxJQUFJLHdCQUF3QjtBQUNsRCxNQUFNLFdBQVcsSUFBSSxJQUFJLG1GQUFtRjtBQUM1RyxNQUFNLHFCQUFxQixJQUFJLElBQUksT0FBTztBQUMxQyxNQUFNLHFCQUFxQixJQUFJLElBQUksYUFBYztBQUNqRCxNQUFNLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxNQUFNLG1CQUFtQixJQUFJLEVBQUU7QUFnQmhFLE1BQU0sTUFBTTtBQUFBLEVBQ1IsY0FBYztBQUtWLFNBQUssUUFBUTtBQU1iLFNBQUssb0JBQW9CO0FBTXpCLFNBQUssa0JBQWtCO0FBRXZCLFNBQUssU0FBUztBQUtkLFNBQUssVUFBVTtBQUVmLFNBQUssWUFBWTtBQUtqQixTQUFLLGFBQWE7QUFFbEIsU0FBSyxjQUFjO0FBRW5CLFNBQUssYUFBYTtBQUVsQixTQUFLLE9BQU87QUFFWixTQUFLLE1BQU07QUFBQSxFQUNuQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0ksQ0FBQyxJQUFJLFFBQVEsYUFBYSxPQUFPO0FBQzdCLFFBQUksUUFBUTtBQUNSLFVBQUksT0FBTyxXQUFXO0FBQ2xCLGNBQU0sVUFBVSx3QkFBd0I7QUFDNUMsV0FBSyxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVMsU0FBUztBQUNuRCxXQUFLLGFBQWE7QUFBQSxJQUM5QjtBQUNRLFNBQUssUUFBUSxDQUFDO0FBQ2QsUUFBSSxPQUFPLEtBQUssUUFBUTtBQUN4QixXQUFPLFNBQVMsY0FBYyxLQUFLLFNBQVMsQ0FBQztBQUN6QyxhQUFPLE9BQU8sS0FBSyxVQUFVLElBQUk7QUFBQSxFQUM3QztBQUFBLEVBQ0ksWUFBWTtBQUNSLFFBQUksSUFBSSxLQUFLO0FBQ2IsUUFBSSxLQUFLLEtBQUssT0FBTyxDQUFDO0FBQ3RCLFdBQU8sT0FBTyxPQUFPLE9BQU87QUFDeEIsV0FBSyxLQUFLLE9BQU8sRUFBRSxDQUFDO0FBQ3hCLFFBQUksQ0FBQyxNQUFNLE9BQU8sT0FBTyxPQUFPO0FBQzVCLGFBQU87QUFDWCxRQUFJLE9BQU87QUFDUCxhQUFPLEtBQUssT0FBTyxJQUFJLENBQUMsTUFBTTtBQUNsQyxXQUFPO0FBQUEsRUFDZjtBQUFBLEVBQ0ksT0FBTyxHQUFHO0FBQ04sV0FBTyxLQUFLLE9BQU8sS0FBSyxNQUFNLENBQUM7QUFBQSxFQUN2QztBQUFBLEVBQ0ksZUFBZSxRQUFRO0FBQ25CLFFBQUksS0FBSyxLQUFLLE9BQU8sTUFBTTtBQUMzQixRQUFJLEtBQUssYUFBYSxHQUFHO0FBQ3JCLFVBQUksU0FBUztBQUNiLGFBQU8sT0FBTztBQUNWLGFBQUssS0FBSyxPQUFPLEVBQUUsU0FBUyxNQUFNO0FBQ3RDLFVBQUksT0FBTyxNQUFNO0FBQ2IsY0FBTSxPQUFPLEtBQUssT0FBTyxTQUFTLFNBQVMsQ0FBQztBQUM1QyxZQUFJLFNBQVMsUUFBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLO0FBQ2pDLGlCQUFPLFNBQVMsU0FBUztBQUFBLE1BQzdDO0FBQ1ksYUFBTyxPQUFPLFFBQVEsVUFBVSxLQUFLLGNBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxRQUMzRCxTQUFTLFNBQ1Q7QUFBQSxJQUNsQjtBQUNRLFFBQUksT0FBTyxPQUFPLE9BQU8sS0FBSztBQUMxQixZQUFNLEtBQUssS0FBSyxPQUFPLE9BQU8sUUFBUSxDQUFDO0FBQ3ZDLFdBQUssT0FBTyxTQUFTLE9BQU8sVUFBVSxRQUFRLEtBQUssT0FBTyxTQUFTLENBQUMsQ0FBQztBQUNqRSxlQUFPO0FBQUEsSUFDdkI7QUFDUSxXQUFPO0FBQUEsRUFDZjtBQUFBLEVBQ0ksVUFBVTtBQUNOLFFBQUksTUFBTSxLQUFLO0FBQ2YsUUFBSSxPQUFPLFFBQVEsWUFBYSxRQUFRLE1BQU0sTUFBTSxLQUFLLEtBQU07QUFDM0QsWUFBTSxLQUFLLE9BQU8sUUFBUSxNQUFNLEtBQUssR0FBRztBQUN4QyxXQUFLLGFBQWE7QUFBQSxJQUM5QjtBQUNRLFFBQUksUUFBUTtBQUNSLGFBQU8sS0FBSyxRQUFRLEtBQUssT0FBTyxVQUFVLEtBQUssR0FBRyxJQUFJO0FBQzFELFFBQUksS0FBSyxPQUFPLE1BQU0sQ0FBQyxNQUFNO0FBQ3pCLGFBQU87QUFDWCxXQUFPLEtBQUssT0FBTyxVQUFVLEtBQUssS0FBSyxHQUFHO0FBQUEsRUFDbEQ7QUFBQSxFQUNJLFNBQVMsR0FBRztBQUNSLFdBQU8sS0FBSyxNQUFNLEtBQUssS0FBSyxPQUFPO0FBQUEsRUFDM0M7QUFBQSxFQUNJLFFBQVEsT0FBTztBQUNYLFNBQUssU0FBUyxLQUFLLE9BQU8sVUFBVSxLQUFLLEdBQUc7QUFDNUMsU0FBSyxNQUFNO0FBQ1gsU0FBSyxhQUFhO0FBQ2xCLFNBQUssT0FBTztBQUNaLFdBQU87QUFBQSxFQUNmO0FBQUEsRUFDSSxLQUFLLEdBQUc7QUFDSixXQUFPLEtBQUssT0FBTyxPQUFPLEtBQUssS0FBSyxDQUFDO0FBQUEsRUFDN0M7QUFBQSxFQUNJLENBQUMsVUFBVSxNQUFNO0FBQ2IsWUFBUSxNQUFJO0FBQUEsTUFDUixLQUFLO0FBQ0QsZUFBTyxPQUFPLEtBQUssWUFBYTtBQUFBLE1BQ3BDLEtBQUs7QUFDRCxlQUFPLE9BQU8sS0FBSyxlQUFnQjtBQUFBLE1BQ3ZDLEtBQUs7QUFDRCxlQUFPLE9BQU8sS0FBSyxnQkFBaUI7QUFBQSxNQUN4QyxLQUFLO0FBQ0QsZUFBTyxPQUFPLEtBQUssY0FBZTtBQUFBLE1BQ3RDLEtBQUs7QUFDRCxlQUFPLE9BQU8sS0FBSyxvQkFBcUI7QUFBQSxNQUM1QyxLQUFLO0FBQ0QsZUFBTyxPQUFPLEtBQUssa0JBQW1CO0FBQUEsTUFDMUMsS0FBSztBQUNELGVBQU8sT0FBTyxLQUFLLGlCQUFrQjtBQUFBLE1BQ3pDLEtBQUs7QUFDRCxlQUFPLE9BQU8sS0FBSyxpQkFBa0I7QUFBQSxJQUNyRDtBQUFBLEVBQ0E7QUFBQSxFQUNJLENBQUMsY0FBYztBQUNYLFFBQUksT0FBTyxLQUFLLFFBQVM7QUFDekIsUUFBSSxTQUFTO0FBQ1QsYUFBTyxLQUFLLFFBQVEsUUFBUTtBQUNoQyxRQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUs7QUFDakIsYUFBTyxLQUFLLFVBQVUsQ0FBQztBQUN2QixhQUFPLEtBQUssVUFBVSxDQUFDO0FBQUEsSUFDbkM7QUFDUSxRQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUs7QUFDakIsVUFBSSxTQUFTLEtBQUs7QUFDbEIsVUFBSSxLQUFLLEtBQUssUUFBUSxHQUFHO0FBQ3pCLGFBQU8sT0FBTyxJQUFJO0FBQ2QsY0FBTSxLQUFLLEtBQUssS0FBSyxDQUFDO0FBQ3RCLFlBQUksT0FBTyxPQUFPLE9BQU8sS0FBTTtBQUMzQixtQkFBUyxLQUFLO0FBQ2Q7QUFBQSxRQUNwQixPQUNxQjtBQUNELGVBQUssS0FBSyxRQUFRLEtBQUssS0FBSyxDQUFDO0FBQUEsUUFDakQ7QUFBQSxNQUNBO0FBQ1ksYUFBTyxNQUFNO0FBQ1QsY0FBTSxLQUFLLEtBQUssU0FBUyxDQUFDO0FBQzFCLFlBQUksT0FBTyxPQUFPLE9BQU87QUFDckIsb0JBQVU7QUFBQTtBQUVWO0FBQUEsTUFDcEI7QUFDWSxZQUFNLEtBQUssT0FBTyxLQUFLLFVBQVUsTUFBTSxNQUFNLE9BQU8sS0FBSyxXQUFXLElBQUk7QUFDeEUsYUFBTyxLQUFLLFVBQVUsS0FBSyxTQUFTLENBQUM7QUFDckMsV0FBSyxZQUFhO0FBQ2xCLGFBQU87QUFBQSxJQUNuQjtBQUNRLFFBQUksS0FBSyxhQUFhO0FBQ2xCLFlBQU0sS0FBSyxPQUFPLEtBQUssV0FBVyxJQUFJO0FBQ3RDLGFBQU8sS0FBSyxVQUFVLEtBQUssU0FBUyxFQUFFO0FBQ3RDLGFBQU8sS0FBSyxZQUFhO0FBQ3pCLGFBQU87QUFBQSxJQUNuQjtBQUNRLFVBQU07QUFDTixXQUFPLE9BQU8sS0FBSyxlQUFnQjtBQUFBLEVBQzNDO0FBQUEsRUFDSSxDQUFDLGlCQUFpQjtBQUNkLFVBQU0sS0FBSyxLQUFLLE9BQU8sQ0FBQztBQUN4QixRQUFJLENBQUMsTUFBTSxDQUFDLEtBQUs7QUFDYixhQUFPLEtBQUssUUFBUSxZQUFZO0FBQ3BDLFFBQUksT0FBTyxPQUFPLE9BQU8sS0FBSztBQUMxQixVQUFJLENBQUMsS0FBSyxTQUFTLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDL0IsZUFBTyxLQUFLLFFBQVEsWUFBWTtBQUNwQyxZQUFNLElBQUksS0FBSyxLQUFLLENBQUM7QUFDckIsV0FBSyxNQUFNLFNBQVMsTUFBTSxVQUFVLFFBQVEsS0FBSyxPQUFPLENBQUMsQ0FBQyxHQUFHO0FBQ3pELGVBQU8sS0FBSyxVQUFVLENBQUM7QUFDdkIsYUFBSyxjQUFjO0FBQ25CLGFBQUssYUFBYTtBQUNsQixlQUFPLE1BQU0sUUFBUSxRQUFRO0FBQUEsTUFDN0M7QUFBQSxJQUNBO0FBQ1EsU0FBSyxjQUFjLE9BQU8sS0FBSyxXQUFXLEtBQUs7QUFDL0MsUUFBSSxLQUFLLGFBQWEsS0FBSyxlQUFlLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDO0FBQzdELFdBQUssYUFBYSxLQUFLO0FBQzNCLFdBQU8sT0FBTyxLQUFLLGdCQUFpQjtBQUFBLEVBQzVDO0FBQUEsRUFDSSxDQUFDLGtCQUFrQjtBQUNmLFVBQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxLQUFLLEtBQUssQ0FBQztBQUM5QixRQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7QUFDZCxhQUFPLEtBQUssUUFBUSxhQUFhO0FBQ3JDLFNBQUssUUFBUSxPQUFPLFFBQVEsT0FBTyxRQUFRLFFBQVEsUUFBUSxHQUFHLEdBQUc7QUFDN0QsWUFBTSxLQUFLLE9BQU8sS0FBSyxVQUFVLENBQUMsTUFBTSxPQUFPLEtBQUssV0FBVyxJQUFJO0FBQ25FLFdBQUssYUFBYSxLQUFLLGNBQWM7QUFDckMsV0FBSyxlQUFlO0FBQ3BCLGFBQU8sT0FBTyxLQUFLLGdCQUFpQjtBQUFBLElBQ2hEO0FBQ1EsV0FBTztBQUFBLEVBQ2Y7QUFBQSxFQUNJLENBQUMsZ0JBQWdCO0FBQ2IsV0FBTyxLQUFLLFdBQVcsSUFBSTtBQUMzQixVQUFNLE9BQU8sS0FBSyxRQUFTO0FBQzNCLFFBQUksU0FBUztBQUNULGFBQU8sS0FBSyxRQUFRLEtBQUs7QUFDN0IsUUFBSSxJQUFJLE9BQU8sS0FBSyxlQUFnQjtBQUNwQyxZQUFRLEtBQUssQ0FBQyxHQUFDO0FBQUEsTUFDWCxLQUFLO0FBQ0QsZUFBTyxLQUFLLFVBQVUsS0FBSyxTQUFTLENBQUM7QUFBQTtBQUFBLE1BRXpDLEtBQUs7QUFDRCxlQUFPLEtBQUssWUFBYTtBQUN6QixlQUFPLE9BQU8sS0FBSyxlQUFnQjtBQUFBLE1BQ3ZDLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFDRCxlQUFPLEtBQUssVUFBVSxDQUFDO0FBQ3ZCLGFBQUssVUFBVTtBQUNmLGFBQUssWUFBWTtBQUNqQixlQUFPO0FBQUEsTUFDWCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBRUQsZUFBTyxLQUFLLFVBQVUsQ0FBQztBQUN2QixlQUFPO0FBQUEsTUFDWCxLQUFLO0FBQ0QsZUFBTyxLQUFLLFVBQVUsZUFBZTtBQUNyQyxlQUFPO0FBQUEsTUFDWCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQ0QsZUFBTyxPQUFPLEtBQUssa0JBQW1CO0FBQUEsTUFDMUMsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNELGFBQUssT0FBTyxLQUFLLHVCQUF3QjtBQUN6QyxhQUFLLE9BQU8sS0FBSyxXQUFXLElBQUk7QUFDaEMsZUFBTyxLQUFLLFVBQVUsS0FBSyxTQUFTLENBQUM7QUFDckMsZUFBTyxLQUFLLFlBQWE7QUFDekIsZUFBTyxPQUFPLEtBQUssaUJBQWtCO0FBQUEsTUFDekM7QUFDSSxlQUFPLE9BQU8sS0FBSyxpQkFBa0I7QUFBQSxJQUNyRDtBQUFBLEVBQ0E7QUFBQSxFQUNJLENBQUMsc0JBQXNCO0FBQ25CLFFBQUksSUFBSTtBQUNSLFFBQUksU0FBUztBQUNiLE9BQUc7QUFDQyxXQUFLLE9BQU8sS0FBSyxZQUFhO0FBQzlCLFVBQUksS0FBSyxHQUFHO0FBQ1IsYUFBSyxPQUFPLEtBQUssV0FBVyxLQUFLO0FBQ2pDLGFBQUssY0FBYyxTQUFTO0FBQUEsTUFDNUMsT0FDaUI7QUFDRCxhQUFLO0FBQUEsTUFDckI7QUFDWSxZQUFNLE9BQU8sS0FBSyxXQUFXLElBQUk7QUFBQSxJQUM3QyxTQUFpQixLQUFLLEtBQUs7QUFDbkIsVUFBTSxPQUFPLEtBQUssUUFBUztBQUMzQixRQUFJLFNBQVM7QUFDVCxhQUFPLEtBQUssUUFBUSxNQUFNO0FBQzlCLFFBQUssV0FBVyxNQUFNLFNBQVMsS0FBSyxjQUFjLEtBQUssQ0FBQyxNQUFNLE9BQ3pELFdBQVcsTUFDUCxLQUFLLFdBQVcsS0FBSyxLQUFLLEtBQUssV0FBVyxLQUFLLE1BQ2hELFFBQVEsS0FBSyxDQUFDLENBQUMsR0FBSTtBQUl2QixZQUFNLGtCQUFrQixXQUFXLEtBQUssYUFBYSxLQUNqRCxLQUFLLGNBQWMsTUFDbEIsS0FBSyxDQUFDLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTTtBQUNwQyxVQUFJLENBQUMsaUJBQWlCO0FBRWxCLGFBQUssWUFBWTtBQUNqQixjQUFNO0FBQ04sZUFBTyxPQUFPLEtBQUssZUFBZ0I7QUFBQSxNQUNuRDtBQUFBLElBQ0E7QUFDUSxRQUFJLElBQUk7QUFDUixXQUFPLEtBQUssQ0FBQyxNQUFNLEtBQUs7QUFDcEIsV0FBSyxPQUFPLEtBQUssVUFBVSxDQUFDO0FBQzVCLFdBQUssT0FBTyxLQUFLLFdBQVcsSUFBSTtBQUNoQyxXQUFLLFVBQVU7QUFBQSxJQUMzQjtBQUNRLFNBQUssT0FBTyxLQUFLLGVBQWdCO0FBQ2pDLFlBQVEsS0FBSyxDQUFDLEdBQUM7QUFBQSxNQUNYLEtBQUs7QUFDRCxlQUFPO0FBQUEsTUFDWCxLQUFLO0FBQ0QsZUFBTyxLQUFLLFVBQVUsS0FBSyxTQUFTLENBQUM7QUFDckMsZUFBTztBQUFBLE1BQ1gsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNELGVBQU8sS0FBSyxVQUFVLENBQUM7QUFDdkIsYUFBSyxVQUFVO0FBQ2YsYUFBSyxhQUFhO0FBQ2xCLGVBQU87QUFBQSxNQUNYLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFDRCxlQUFPLEtBQUssVUFBVSxDQUFDO0FBQ3ZCLGFBQUssVUFBVTtBQUNmLGFBQUssYUFBYTtBQUNsQixlQUFPLEtBQUssWUFBWSxTQUFTO0FBQUEsTUFDckMsS0FBSztBQUNELGVBQU8sS0FBSyxVQUFVLGVBQWU7QUFDckMsZUFBTztBQUFBLE1BQ1gsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNELGFBQUssVUFBVTtBQUNmLGVBQU8sT0FBTyxLQUFLLGtCQUFtQjtBQUFBLE1BQzFDLEtBQUssS0FBSztBQUNOLGNBQU0sT0FBTyxLQUFLLE9BQU8sQ0FBQztBQUMxQixZQUFJLEtBQUssV0FBVyxRQUFRLElBQUksS0FBSyxTQUFTLEtBQUs7QUFDL0MsZUFBSyxVQUFVO0FBQ2YsaUJBQU8sS0FBSyxVQUFVLENBQUM7QUFDdkIsaUJBQU8sS0FBSyxXQUFXLElBQUk7QUFDM0IsaUJBQU87QUFBQSxRQUMzQjtBQUFBLE1BQ0E7QUFBQTtBQUFBLE1BRVk7QUFDSSxhQUFLLFVBQVU7QUFDZixlQUFPLE9BQU8sS0FBSyxpQkFBa0I7QUFBQSxJQUNyRDtBQUFBLEVBQ0E7QUFBQSxFQUNJLENBQUMsb0JBQW9CO0FBQ2pCLFVBQU0sUUFBUSxLQUFLLE9BQU8sQ0FBQztBQUMzQixRQUFJLE1BQU0sS0FBSyxPQUFPLFFBQVEsT0FBTyxLQUFLLE1BQU0sQ0FBQztBQUNqRCxRQUFJLFVBQVUsS0FBSztBQUNmLGFBQU8sUUFBUSxNQUFNLEtBQUssT0FBTyxNQUFNLENBQUMsTUFBTTtBQUMxQyxjQUFNLEtBQUssT0FBTyxRQUFRLEtBQUssTUFBTSxDQUFDO0FBQUEsSUFDdEQsT0FDYTtBQUVELGFBQU8sUUFBUSxJQUFJO0FBQ2YsWUFBSSxJQUFJO0FBQ1IsZUFBTyxLQUFLLE9BQU8sTUFBTSxJQUFJLENBQUMsTUFBTTtBQUNoQyxlQUFLO0FBQ1QsWUFBSSxJQUFJLE1BQU07QUFDVjtBQUNKLGNBQU0sS0FBSyxPQUFPLFFBQVEsS0FBSyxNQUFNLENBQUM7QUFBQSxNQUN0RDtBQUFBLElBQ0E7QUFFUSxVQUFNLEtBQUssS0FBSyxPQUFPLFVBQVUsR0FBRyxHQUFHO0FBQ3ZDLFFBQUksS0FBSyxHQUFHLFFBQVEsTUFBTSxLQUFLLEdBQUc7QUFDbEMsUUFBSSxPQUFPLElBQUk7QUFDWCxhQUFPLE9BQU8sSUFBSTtBQUNkLGNBQU0sS0FBSyxLQUFLLGVBQWUsS0FBSyxDQUFDO0FBQ3JDLFlBQUksT0FBTztBQUNQO0FBQ0osYUFBSyxHQUFHLFFBQVEsTUFBTSxFQUFFO0FBQUEsTUFDeEM7QUFDWSxVQUFJLE9BQU8sSUFBSTtBQUVYLGNBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLE9BQU8sSUFBSTtBQUFBLE1BQ3REO0FBQUEsSUFDQTtBQUNRLFFBQUksUUFBUSxJQUFJO0FBQ1osVUFBSSxDQUFDLEtBQUs7QUFDTixlQUFPLEtBQUssUUFBUSxlQUFlO0FBQ3ZDLFlBQU0sS0FBSyxPQUFPO0FBQUEsSUFDOUI7QUFDUSxXQUFPLEtBQUssWUFBWSxNQUFNLEdBQUcsS0FBSztBQUN0QyxXQUFPLEtBQUssWUFBWSxTQUFTO0FBQUEsRUFDekM7QUFBQSxFQUNJLENBQUMseUJBQXlCO0FBQ3RCLFNBQUssb0JBQW9CO0FBQ3pCLFNBQUssa0JBQWtCO0FBQ3ZCLFFBQUksSUFBSSxLQUFLO0FBQ2IsV0FBTyxNQUFNO0FBQ1QsWUFBTSxLQUFLLEtBQUssT0FBTyxFQUFFLENBQUM7QUFDMUIsVUFBSSxPQUFPO0FBQ1AsYUFBSyxrQkFBa0I7QUFBQSxlQUNsQixLQUFLLE9BQU8sTUFBTTtBQUN2QixhQUFLLG9CQUFvQixPQUFPLEVBQUUsSUFBSTtBQUFBLGVBQ2pDLE9BQU87QUFDWjtBQUFBLElBQ2hCO0FBQ1EsV0FBTyxPQUFPLEtBQUssVUFBVSxRQUFNLFFBQVEsRUFBRSxLQUFLLE9BQU8sR0FBRztBQUFBLEVBQ3BFO0FBQUEsRUFDSSxDQUFDLG1CQUFtQjtBQUNoQixRQUFJLEtBQUssS0FBSyxNQUFNO0FBQ3BCLFFBQUksU0FBUztBQUNiLFFBQUk7QUFDSixTQUFNLFVBQVN2RSxLQUFJLEtBQUssS0FBTSxLQUFLLEtBQUssT0FBT0EsRUFBQyxHQUFJLEVBQUVBLElBQUc7QUFDckQsY0FBUSxJQUFFO0FBQUEsUUFDTixLQUFLO0FBQ0Qsb0JBQVU7QUFDVjtBQUFBLFFBQ0osS0FBSztBQUNELGVBQUtBO0FBQ0wsbUJBQVM7QUFDVDtBQUFBLFFBQ0osS0FBSyxNQUFNO0FBQ1AsZ0JBQU0sT0FBTyxLQUFLLE9BQU9BLEtBQUksQ0FBQztBQUM5QixjQUFJLENBQUMsUUFBUSxDQUFDLEtBQUs7QUFDZixtQkFBTyxLQUFLLFFBQVEsY0FBYztBQUN0QyxjQUFJLFNBQVM7QUFDVDtBQUFBLFFBQ1A7QUFBQTtBQUFBLFFBQ0Q7QUFDSSxnQkFBTTtBQUFBLE1BQzFCO0FBQUEsSUFDQTtBQUNRLFFBQUksQ0FBQyxNQUFNLENBQUMsS0FBSztBQUNiLGFBQU8sS0FBSyxRQUFRLGNBQWM7QUFDdEMsUUFBSSxVQUFVLEtBQUssWUFBWTtBQUMzQixVQUFJLEtBQUssc0JBQXNCO0FBQzNCLGFBQUssYUFBYTtBQUFBLFdBQ2pCO0FBQ0QsYUFBSyxhQUNELEtBQUsscUJBQXFCLEtBQUssZUFBZSxJQUFJLElBQUksS0FBSztBQUFBLE1BQy9FO0FBQ1ksU0FBRztBQUNDLGNBQU0sS0FBSyxLQUFLLGVBQWUsS0FBSyxDQUFDO0FBQ3JDLFlBQUksT0FBTztBQUNQO0FBQ0osYUFBSyxLQUFLLE9BQU8sUUFBUSxNQUFNLEVBQUU7QUFBQSxNQUNwQyxTQUFRLE9BQU87QUFDaEIsVUFBSSxPQUFPLElBQUk7QUFDWCxZQUFJLENBQUMsS0FBSztBQUNOLGlCQUFPLEtBQUssUUFBUSxjQUFjO0FBQ3RDLGFBQUssS0FBSyxPQUFPO0FBQUEsTUFDakM7QUFBQSxJQUNBO0FBR1EsUUFBSSxJQUFJLEtBQUs7QUFDYixTQUFLLEtBQUssT0FBTyxDQUFDO0FBQ2xCLFdBQU8sT0FBTztBQUNWLFdBQUssS0FBSyxPQUFPLEVBQUUsQ0FBQztBQUN4QixRQUFJLE9BQU8sS0FBTTtBQUNiLGFBQU8sT0FBTyxPQUFRLE9BQU8sT0FBTyxPQUFPLFFBQVEsT0FBTztBQUN0RCxhQUFLLEtBQUssT0FBTyxFQUFFLENBQUM7QUFDeEIsV0FBSyxJQUFJO0FBQUEsSUFDckIsV0FDaUIsQ0FBQyxLQUFLLGlCQUFpQjtBQUM1QixTQUFHO0FBQ0MsWUFBSUEsS0FBSSxLQUFLO0FBQ2IsWUFBSXdFLE1BQUssS0FBSyxPQUFPeEUsRUFBQztBQUN0QixZQUFJd0UsUUFBTztBQUNQLFVBQUFBLE1BQUssS0FBSyxPQUFPLEVBQUV4RSxFQUFDO0FBQ3hCLGNBQU0sV0FBV0E7QUFDakIsZUFBT3dFLFFBQU87QUFDVixVQUFBQSxNQUFLLEtBQUssT0FBTyxFQUFFeEUsRUFBQztBQUN4QixZQUFJd0UsUUFBTyxRQUFReEUsTUFBSyxLQUFLLE9BQU9BLEtBQUksSUFBSSxTQUFTO0FBQ2pELGVBQUtBO0FBQUE7QUFFTDtBQUFBLE1BQ3BCLFNBQXFCO0FBQUEsSUFDckI7QUFDUSxVQUFNO0FBQ04sV0FBTyxLQUFLLFlBQVksS0FBSyxHQUFHLElBQUk7QUFDcEMsV0FBTyxPQUFPLEtBQUssZUFBZ0I7QUFBQSxFQUMzQztBQUFBLEVBQ0ksQ0FBQyxtQkFBbUI7QUFDaEIsVUFBTSxTQUFTLEtBQUssWUFBWTtBQUNoQyxRQUFJLE1BQU0sS0FBSyxNQUFNO0FBQ3JCLFFBQUksSUFBSSxLQUFLLE1BQU07QUFDbkIsUUFBSTtBQUNKLFdBQVEsS0FBSyxLQUFLLE9BQU8sRUFBRSxDQUFDLEdBQUk7QUFDNUIsVUFBSSxPQUFPLEtBQUs7QUFDWixjQUFNLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQztBQUM5QixZQUFJLFFBQVEsSUFBSSxLQUFNLFVBQVUsbUJBQW1CLElBQUksSUFBSTtBQUN2RDtBQUNKLGNBQU07QUFBQSxNQUN0QixXQUNxQixRQUFRLEVBQUUsR0FBRztBQUNsQixZQUFJLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQztBQUM1QixZQUFJLE9BQU8sTUFBTTtBQUNiLGNBQUksU0FBUyxNQUFNO0FBQ2YsaUJBQUs7QUFDTCxpQkFBSztBQUNMLG1CQUFPLEtBQUssT0FBTyxJQUFJLENBQUM7QUFBQSxVQUNoRDtBQUV3QixrQkFBTTtBQUFBLFFBQzlCO0FBQ2dCLFlBQUksU0FBUyxPQUFRLFVBQVUsbUJBQW1CLElBQUksSUFBSTtBQUN0RDtBQUNKLFlBQUksT0FBTyxNQUFNO0FBQ2IsZ0JBQU0sS0FBSyxLQUFLLGVBQWUsSUFBSSxDQUFDO0FBQ3BDLGNBQUksT0FBTztBQUNQO0FBQ0osY0FBSSxLQUFLLElBQUksR0FBRyxLQUFLLENBQUM7QUFBQSxRQUMxQztBQUFBLE1BQ0EsT0FDaUI7QUFDRCxZQUFJLFVBQVUsbUJBQW1CLElBQUksRUFBRTtBQUNuQztBQUNKLGNBQU07QUFBQSxNQUN0QjtBQUFBLElBQ0E7QUFDUSxRQUFJLENBQUMsTUFBTSxDQUFDLEtBQUs7QUFDYixhQUFPLEtBQUssUUFBUSxjQUFjO0FBQ3RDLFVBQU07QUFDTixXQUFPLEtBQUssWUFBWSxNQUFNLEdBQUcsSUFBSTtBQUNyQyxXQUFPLFNBQVMsU0FBUztBQUFBLEVBQ2pDO0FBQUEsRUFDSSxDQUFDLFVBQVUsR0FBRztBQUNWLFFBQUksSUFBSSxHQUFHO0FBQ1AsWUFBTSxLQUFLLE9BQU8sT0FBTyxLQUFLLEtBQUssQ0FBQztBQUNwQyxXQUFLLE9BQU87QUFDWixhQUFPO0FBQUEsSUFDbkI7QUFDUSxXQUFPO0FBQUEsRUFDZjtBQUFBLEVBQ0ksQ0FBQyxZQUFZLEdBQUcsWUFBWTtBQUN4QixVQUFNLElBQUksS0FBSyxPQUFPLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDdkMsUUFBSSxHQUFHO0FBQ0gsWUFBTTtBQUNOLFdBQUssT0FBTyxFQUFFO0FBQ2QsYUFBTyxFQUFFO0FBQUEsSUFDckIsV0FDaUI7QUFDTCxZQUFNO0FBQ1YsV0FBTztBQUFBLEVBQ2Y7QUFBQSxFQUNJLENBQUMsaUJBQWlCO0FBQ2QsWUFBUSxLQUFLLE9BQU8sQ0FBQyxHQUFDO0FBQUEsTUFDbEIsS0FBSztBQUNELGdCQUFTLE9BQU8sS0FBSyxRQUFTLE1BQ3pCLE9BQU8sS0FBSyxXQUFXLElBQUksTUFDM0IsT0FBTyxLQUFLO01BQ3JCLEtBQUs7QUFDRCxnQkFBUyxPQUFPLEtBQUssVUFBVSxlQUFlLE1BQ3pDLE9BQU8sS0FBSyxXQUFXLElBQUksTUFDM0IsT0FBTyxLQUFLO01BQ3JCLEtBQUs7QUFBQTtBQUFBLE1BQ0wsS0FBSztBQUFBO0FBQUEsTUFDTCxLQUFLLEtBQUs7QUFDTixjQUFNLFNBQVMsS0FBSyxZQUFZO0FBQ2hDLGNBQU0sTUFBTSxLQUFLLE9BQU8sQ0FBQztBQUN6QixZQUFJLFFBQVEsR0FBRyxLQUFNLFVBQVUsbUJBQW1CLElBQUksR0FBRyxHQUFJO0FBQ3pELGNBQUksQ0FBQztBQUNELGlCQUFLLGFBQWEsS0FBSyxjQUFjO0FBQUEsbUJBQ2hDLEtBQUs7QUFDVixpQkFBSyxVQUFVO0FBQ25CLGtCQUFTLE9BQU8sS0FBSyxVQUFVLENBQUMsTUFDM0IsT0FBTyxLQUFLLFdBQVcsSUFBSSxNQUMzQixPQUFPLEtBQUs7UUFDckM7QUFBQSxNQUNBO0FBQUEsSUFDQTtBQUNRLFdBQU87QUFBQSxFQUNmO0FBQUEsRUFDSSxDQUFDLFVBQVU7QUFDUCxRQUFJLEtBQUssT0FBTyxDQUFDLE1BQU0sS0FBSztBQUN4QixVQUFJLElBQUksS0FBSyxNQUFNO0FBQ25CLFVBQUksS0FBSyxLQUFLLE9BQU8sQ0FBQztBQUN0QixhQUFPLENBQUMsUUFBUSxFQUFFLEtBQUssT0FBTztBQUMxQixhQUFLLEtBQUssT0FBTyxFQUFFLENBQUM7QUFDeEIsYUFBTyxPQUFPLEtBQUssWUFBWSxPQUFPLE1BQU0sSUFBSSxJQUFJLEdBQUcsS0FBSztBQUFBLElBQ3hFLE9BQ2E7QUFDRCxVQUFJLElBQUksS0FBSyxNQUFNO0FBQ25CLFVBQUksS0FBSyxLQUFLLE9BQU8sQ0FBQztBQUN0QixhQUFPLElBQUk7QUFDUCxZQUFJLFNBQVMsSUFBSSxFQUFFO0FBQ2YsZUFBSyxLQUFLLE9BQU8sRUFBRSxDQUFDO0FBQUEsaUJBQ2YsT0FBTyxPQUNaLFVBQVUsSUFBSSxLQUFLLE9BQU8sSUFBSSxDQUFDLENBQUMsS0FDaEMsVUFBVSxJQUFJLEtBQUssT0FBTyxJQUFJLENBQUMsQ0FBQyxHQUFHO0FBQ25DLGVBQUssS0FBSyxPQUFRLEtBQUssQ0FBRztBQUFBLFFBQzlDO0FBRW9CO0FBQUEsTUFDcEI7QUFDWSxhQUFPLE9BQU8sS0FBSyxZQUFZLEdBQUcsS0FBSztBQUFBLElBQ25EO0FBQUEsRUFDQTtBQUFBLEVBQ0ksQ0FBQyxjQUFjO0FBQ1gsVUFBTSxLQUFLLEtBQUssT0FBTyxLQUFLLEdBQUc7QUFDL0IsUUFBSSxPQUFPO0FBQ1AsYUFBTyxPQUFPLEtBQUssVUFBVSxDQUFDO0FBQUEsYUFDekIsT0FBTyxRQUFRLEtBQUssT0FBTyxDQUFDLE1BQU07QUFDdkMsYUFBTyxPQUFPLEtBQUssVUFBVSxDQUFDO0FBQUE7QUFFOUIsYUFBTztBQUFBLEVBQ25CO0FBQUEsRUFDSSxDQUFDLFdBQVcsV0FBVztBQUNuQixRQUFJLElBQUksS0FBSyxNQUFNO0FBQ25CLFFBQUk7QUFDSixPQUFHO0FBQ0MsV0FBSyxLQUFLLE9BQU8sRUFBRSxDQUFDO0FBQUEsSUFDdkIsU0FBUSxPQUFPLE9BQVEsYUFBYSxPQUFPO0FBQzVDLFVBQU0sSUFBSSxJQUFJLEtBQUs7QUFDbkIsUUFBSSxJQUFJLEdBQUc7QUFDUCxZQUFNLEtBQUssT0FBTyxPQUFPLEtBQUssS0FBSyxDQUFDO0FBQ3BDLFdBQUssTUFBTTtBQUFBLElBQ3ZCO0FBQ1EsV0FBTztBQUFBLEVBQ2Y7QUFBQSxFQUNJLENBQUMsVUFBVSxNQUFNO0FBQ2IsUUFBSSxJQUFJLEtBQUs7QUFDYixRQUFJLEtBQUssS0FBSyxPQUFPLENBQUM7QUFDdEIsV0FBTyxDQUFDLEtBQUssRUFBRTtBQUNYLFdBQUssS0FBSyxPQUFPLEVBQUUsQ0FBQztBQUN4QixXQUFPLE9BQU8sS0FBSyxZQUFZLEdBQUcsS0FBSztBQUFBLEVBQy9DO0FBQ0E7QUNyc0JBLE1BQU0sWUFBWTtBQUFBLEVBQ2QsY0FBYztBQUNWLFNBQUssYUFBYSxDQUFFO0FBS3BCLFNBQUssYUFBYSxDQUFDLFdBQVcsS0FBSyxXQUFXLEtBQUssTUFBTTtBQU16RCxTQUFLLFVBQVUsQ0FBQyxXQUFXO0FBQ3ZCLFVBQUksTUFBTTtBQUNWLFVBQUksT0FBTyxLQUFLLFdBQVc7QUFDM0IsYUFBTyxNQUFNLE1BQU07QUFDZixjQUFNLE1BQU8sTUFBTSxRQUFTO0FBQzVCLFlBQUksS0FBSyxXQUFXLEdBQUcsSUFBSTtBQUN2QixnQkFBTSxNQUFNO0FBQUE7QUFFWixpQkFBTztBQUFBLE1BQzNCO0FBQ1ksVUFBSSxLQUFLLFdBQVcsR0FBRyxNQUFNO0FBQ3pCLGVBQU8sRUFBRSxNQUFNLE1BQU0sR0FBRyxLQUFLLEVBQUc7QUFDcEMsVUFBSSxRQUFRO0FBQ1IsZUFBTyxFQUFFLE1BQU0sR0FBRyxLQUFLLE9BQVE7QUFDbkMsWUFBTSxRQUFRLEtBQUssV0FBVyxNQUFNLENBQUM7QUFDckMsYUFBTyxFQUFFLE1BQU0sS0FBSyxLQUFLLFNBQVMsUUFBUSxFQUFHO0FBQUEsSUFDaEQ7QUFBQSxFQUNUO0FBQ0E7QUNqQ0EsU0FBUyxjQUFjLE1BQU0sTUFBTTtBQUMvQixXQUFTLElBQUksR0FBRyxJQUFJLEtBQUssUUFBUSxFQUFFO0FBQy9CLFFBQUksS0FBSyxDQUFDLEVBQUUsU0FBUztBQUNqQixhQUFPO0FBQ2YsU0FBTztBQUNYO0FBQ0EsU0FBUyxrQkFBa0IsTUFBTTtBQUM3QixXQUFTLElBQUksR0FBRyxJQUFJLEtBQUssUUFBUSxFQUFFLEdBQUc7QUFDbEMsWUFBUSxLQUFLLENBQUMsRUFBRSxNQUFJO0FBQUEsTUFDaEIsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNEO0FBQUEsTUFDSjtBQUNJLGVBQU87QUFBQSxJQUN2QjtBQUFBLEVBQ0E7QUFDSSxTQUFPO0FBQ1g7QUFDQSxTQUFTLFlBQVksT0FBTztBQUN4QixVQUFRLCtCQUFPLE1BQUk7QUFBQSxJQUNmLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFDRCxhQUFPO0FBQUEsSUFDWDtBQUNJLGFBQU87QUFBQSxFQUNuQjtBQUNBO0FBQ0EsU0FBUyxhQUFhLFFBQVE7QUFDMUIsVUFBUSxPQUFPLE1BQUk7QUFBQSxJQUNmLEtBQUs7QUFDRCxhQUFPLE9BQU87QUFBQSxJQUNsQixLQUFLLGFBQWE7QUFDZCxZQUFNLEtBQUssT0FBTyxNQUFNLE9BQU8sTUFBTSxTQUFTLENBQUM7QUFDL0MsYUFBTyxHQUFHLE9BQU8sR0FBRztBQUFBLElBQ2hDO0FBQUEsSUFDUSxLQUFLO0FBQ0QsYUFBTyxPQUFPLE1BQU0sT0FBTyxNQUFNLFNBQVMsQ0FBQyxFQUFFO0FBQUE7QUFBQSxJQUVqRDtBQUNJLGFBQU8sQ0FBRTtBQUFBLEVBQ3JCO0FBQ0E7QUFFQSxTQUFTLHNCQUFzQixNQUFNOztBQUNqQyxNQUFJLEtBQUssV0FBVztBQUNoQixXQUFPLENBQUU7QUFDYixNQUFJLElBQUksS0FBSztBQUNiLE9BQU0sUUFBTyxFQUFFLEtBQUssR0FBRztBQUNuQixZQUFRLEtBQUssQ0FBQyxFQUFFLE1BQUk7QUFBQSxNQUNoQixLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQ0QsY0FBTTtBQUFBLElBQ3RCO0FBQUEsRUFDQTtBQUNJLFdBQU8sVUFBSyxFQUFFLENBQUMsTUFBUixtQkFBVyxVQUFTLFNBQVM7QUFBQSxFQUV4QztBQUNJLFNBQU8sS0FBSyxPQUFPLEdBQUcsS0FBSyxNQUFNO0FBQ3JDO0FBQ0EsU0FBUyxnQkFBZ0IsSUFBSTtBQUN6QixNQUFJLEdBQUcsTUFBTSxTQUFTLGtCQUFrQjtBQUNwQyxlQUFXLE1BQU0sR0FBRyxPQUFPO0FBQ3ZCLFVBQUksR0FBRyxPQUNILENBQUMsR0FBRyxTQUNKLENBQUMsY0FBYyxHQUFHLE9BQU8sa0JBQWtCLEtBQzNDLENBQUMsY0FBYyxHQUFHLEtBQUssZUFBZSxHQUFHO0FBQ3pDLFlBQUksR0FBRztBQUNILGFBQUcsUUFBUSxHQUFHO0FBQ2xCLGVBQU8sR0FBRztBQUNWLFlBQUksWUFBWSxHQUFHLEtBQUssR0FBRztBQUN2QixjQUFJLEdBQUcsTUFBTTtBQUNULGtCQUFNLFVBQVUsS0FBSyxNQUFNLEdBQUcsTUFBTSxLQUFLLEdBQUcsR0FBRztBQUFBO0FBRS9DLGVBQUcsTUFBTSxNQUFNLEdBQUc7QUFBQSxRQUMxQztBQUVvQixnQkFBTSxVQUFVLEtBQUssTUFBTSxHQUFHLE9BQU8sR0FBRyxHQUFHO0FBQy9DLGVBQU8sR0FBRztBQUFBLE1BQzFCO0FBQUEsSUFDQTtBQUFBLEVBQ0E7QUFDQTtBQTRCQSxNQUFNLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1QsWUFBWSxXQUFXO0FBRW5CLFNBQUssWUFBWTtBQUVqQixTQUFLLFdBQVc7QUFFaEIsU0FBSyxTQUFTO0FBRWQsU0FBSyxTQUFTO0FBRWQsU0FBSyxZQUFZO0FBRWpCLFNBQUssUUFBUSxDQUFFO0FBRWYsU0FBSyxTQUFTO0FBRWQsU0FBSyxPQUFPO0FBRVosU0FBSyxRQUFRLElBQUksTUFBTztBQUN4QixTQUFLLFlBQVk7QUFBQSxFQUN6QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNJLENBQUMsTUFBTSxRQUFRLGFBQWEsT0FBTztBQUMvQixRQUFJLEtBQUssYUFBYSxLQUFLLFdBQVc7QUFDbEMsV0FBSyxVQUFVLENBQUM7QUFDcEIsZUFBVyxVQUFVLEtBQUssTUFBTSxJQUFJLFFBQVEsVUFBVTtBQUNsRCxhQUFPLEtBQUssS0FBSyxNQUFNO0FBQzNCLFFBQUksQ0FBQztBQUNELGFBQU8sS0FBSyxJQUFLO0FBQUEsRUFDN0I7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUlJLENBQUMsS0FBSyxRQUFRO0FBQ1YsU0FBSyxTQUFTO0FBQ2QsUUFBSSxLQUFLLFVBQVU7QUFDZixXQUFLLFdBQVc7QUFDaEIsYUFBTyxLQUFLLEtBQU07QUFDbEIsV0FBSyxVQUFVLE9BQU87QUFDdEI7QUFBQSxJQUNaO0FBQ1EsVUFBTSxPQUFPLFVBQVUsTUFBTTtBQUM3QixRQUFJLENBQUMsTUFBTTtBQUNQLFlBQU0sVUFBVSxxQkFBcUIsTUFBTTtBQUMzQyxhQUFPLEtBQUssSUFBSSxFQUFFLE1BQU0sU0FBUyxRQUFRLEtBQUssUUFBUSxTQUFTLFFBQVE7QUFDdkUsV0FBSyxVQUFVLE9BQU87QUFBQSxJQUNsQyxXQUNpQixTQUFTLFVBQVU7QUFDeEIsV0FBSyxZQUFZO0FBQ2pCLFdBQUssV0FBVztBQUNoQixXQUFLLE9BQU87QUFBQSxJQUN4QixPQUNhO0FBQ0QsV0FBSyxPQUFPO0FBQ1osYUFBTyxLQUFLLEtBQU07QUFDbEIsY0FBUSxNQUFJO0FBQUEsUUFDUixLQUFLO0FBQ0QsZUFBSyxZQUFZO0FBQ2pCLGVBQUssU0FBUztBQUNkLGNBQUksS0FBSztBQUNMLGlCQUFLLFVBQVUsS0FBSyxTQUFTLE9BQU8sTUFBTTtBQUM5QztBQUFBLFFBQ0osS0FBSztBQUNELGNBQUksS0FBSyxhQUFhLE9BQU8sQ0FBQyxNQUFNO0FBQ2hDLGlCQUFLLFVBQVUsT0FBTztBQUMxQjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGNBQUksS0FBSztBQUNMLGlCQUFLLFVBQVUsT0FBTztBQUMxQjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNEO0FBQUEsUUFDSjtBQUNJLGVBQUssWUFBWTtBQUFBLE1BQ3JDO0FBQ1ksV0FBSyxVQUFVLE9BQU87QUFBQSxJQUNsQztBQUFBLEVBQ0E7QUFBQTtBQUFBLEVBRUksQ0FBQyxNQUFNO0FBQ0gsV0FBTyxLQUFLLE1BQU0sU0FBUztBQUN2QixhQUFPLEtBQUssSUFBSztBQUFBLEVBQzdCO0FBQUEsRUFDSSxJQUFJLGNBQWM7QUFDZCxVQUFNLEtBQUs7QUFBQSxNQUNQLE1BQU0sS0FBSztBQUFBLE1BQ1gsUUFBUSxLQUFLO0FBQUEsTUFDYixRQUFRLEtBQUs7QUFBQSxNQUNiLFFBQVEsS0FBSztBQUFBLElBQ2hCO0FBQ0QsV0FBTztBQUFBLEVBQ2Y7QUFBQSxFQUNJLENBQUMsT0FBTztBQUNKLFVBQU0sTUFBTSxLQUFLLEtBQUssQ0FBQztBQUN2QixRQUFJLEtBQUssU0FBUyxjQUFjLENBQUMsT0FBTyxJQUFJLFNBQVMsWUFBWTtBQUM3RCxhQUFPLEtBQUssTUFBTSxTQUFTO0FBQ3ZCLGVBQU8sS0FBSyxJQUFLO0FBQ3JCLFdBQUssTUFBTSxLQUFLO0FBQUEsUUFDWixNQUFNO0FBQUEsUUFDTixRQUFRLEtBQUs7QUFBQSxRQUNiLFFBQVEsS0FBSztBQUFBLE1BQzdCLENBQWE7QUFDRDtBQUFBLElBQ1o7QUFDUSxRQUFJLENBQUM7QUFDRCxhQUFPLE9BQU8sS0FBSyxPQUFRO0FBQy9CLFlBQVEsSUFBSSxNQUFJO0FBQUEsTUFDWixLQUFLO0FBQ0QsZUFBTyxPQUFPLEtBQUssU0FBUyxHQUFHO0FBQUEsTUFDbkMsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNELGVBQU8sT0FBTyxLQUFLLE9BQU8sR0FBRztBQUFBLE1BQ2pDLEtBQUs7QUFDRCxlQUFPLE9BQU8sS0FBSyxZQUFZLEdBQUc7QUFBQSxNQUN0QyxLQUFLO0FBQ0QsZUFBTyxPQUFPLEtBQUssU0FBUyxHQUFHO0FBQUEsTUFDbkMsS0FBSztBQUNELGVBQU8sT0FBTyxLQUFLLGNBQWMsR0FBRztBQUFBLE1BQ3hDLEtBQUs7QUFDRCxlQUFPLE9BQU8sS0FBSyxlQUFlLEdBQUc7QUFBQSxNQUN6QyxLQUFLO0FBQ0QsZUFBTyxPQUFPLEtBQUssWUFBWSxHQUFHO0FBQUEsSUFDbEQ7QUFFUSxXQUFPLEtBQUssSUFBSztBQUFBLEVBQ3pCO0FBQUEsRUFDSSxLQUFLLEdBQUc7QUFDSixXQUFPLEtBQUssTUFBTSxLQUFLLE1BQU0sU0FBUyxDQUFDO0FBQUEsRUFDL0M7QUFBQSxFQUNJLENBQUMsSUFBSSxPQUFPO0FBQ1IsVUFBTSxRQUFRLFNBQVMsS0FBSyxNQUFNLElBQUs7QUFFdkMsUUFBSSxDQUFDLE9BQU87QUFDUixZQUFNLFVBQVU7QUFDaEIsWUFBTSxFQUFFLE1BQU0sU0FBUyxRQUFRLEtBQUssUUFBUSxRQUFRLElBQUksUUFBUztBQUFBLElBQzdFLFdBQ2lCLEtBQUssTUFBTSxXQUFXLEdBQUc7QUFDOUIsWUFBTTtBQUFBLElBQ2xCLE9BQ2E7QUFDRCxZQUFNLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDdkIsVUFBSSxNQUFNLFNBQVMsZ0JBQWdCO0FBRS9CLGNBQU0sU0FBUyxZQUFZLE1BQU0sSUFBSSxTQUFTO0FBQUEsTUFDOUQsV0FDcUIsTUFBTSxTQUFTLHFCQUFxQixJQUFJLFNBQVMsWUFBWTtBQUVsRSxjQUFNLFNBQVM7QUFBQSxNQUMvQjtBQUNZLFVBQUksTUFBTSxTQUFTO0FBQ2Ysd0JBQWdCLEtBQUs7QUFDekIsY0FBUSxJQUFJLE1BQUk7QUFBQSxRQUNaLEtBQUs7QUFDRCxjQUFJLFFBQVE7QUFDWjtBQUFBLFFBQ0osS0FBSztBQUNELGNBQUksTUFBTSxLQUFLLEtBQUs7QUFDcEI7QUFBQSxRQUNKLEtBQUssYUFBYTtBQUNkLGdCQUFNLEtBQUssSUFBSSxNQUFNLElBQUksTUFBTSxTQUFTLENBQUM7QUFDekMsY0FBSSxHQUFHLE9BQU87QUFDVixnQkFBSSxNQUFNLEtBQUssRUFBRSxPQUFPLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSTtBQUNqRCxpQkFBSyxZQUFZO0FBQ2pCO0FBQUEsVUFDeEIsV0FDNkIsR0FBRyxLQUFLO0FBQ2IsZUFBRyxRQUFRO0FBQUEsVUFDbkMsT0FDeUI7QUFDRCxtQkFBTyxPQUFPLElBQUksRUFBRSxLQUFLLE9BQU8sS0FBSyxJQUFJO0FBQ3pDLGlCQUFLLFlBQVksQ0FBQyxHQUFHO0FBQ3JCO0FBQUEsVUFDeEI7QUFDb0I7QUFBQSxRQUNwQjtBQUFBLFFBQ2dCLEtBQUssYUFBYTtBQUNkLGdCQUFNLEtBQUssSUFBSSxNQUFNLElBQUksTUFBTSxTQUFTLENBQUM7QUFDekMsY0FBSSxHQUFHO0FBQ0gsZ0JBQUksTUFBTSxLQUFLLEVBQUUsT0FBTyxJQUFJLE9BQU8sT0FBTztBQUFBO0FBRTFDLGVBQUcsUUFBUTtBQUNmO0FBQUEsUUFDcEI7QUFBQSxRQUNnQixLQUFLLG1CQUFtQjtBQUNwQixnQkFBTSxLQUFLLElBQUksTUFBTSxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBQ3pDLGNBQUksQ0FBQyxNQUFNLEdBQUc7QUFDVixnQkFBSSxNQUFNLEtBQUssRUFBRSxPQUFPLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSTtBQUFBLG1CQUM1QyxHQUFHO0FBQ1IsZUFBRyxRQUFRO0FBQUE7QUFFWCxtQkFBTyxPQUFPLElBQUksRUFBRSxLQUFLLE9BQU8sS0FBSyxJQUFJO0FBQzdDO0FBQUEsUUFDcEI7QUFBQTtBQUFBLFFBRWdCO0FBQ0ksaUJBQU8sS0FBSyxJQUFLO0FBQ2pCLGlCQUFPLEtBQUssSUFBSSxLQUFLO0FBQUEsTUFDekM7QUFDWSxXQUFLLElBQUksU0FBUyxjQUNkLElBQUksU0FBUyxlQUNiLElBQUksU0FBUyxpQkFDWixNQUFNLFNBQVMsZUFBZSxNQUFNLFNBQVMsY0FBYztBQUM1RCxjQUFNLE9BQU8sTUFBTSxNQUFNLE1BQU0sTUFBTSxTQUFTLENBQUM7QUFDL0MsWUFBSSxRQUNBLENBQUMsS0FBSyxPQUNOLENBQUMsS0FBSyxTQUNOLEtBQUssTUFBTSxTQUFTLEtBQ3BCLGtCQUFrQixLQUFLLEtBQUssTUFBTSxPQUNqQyxNQUFNLFdBQVcsS0FDZCxLQUFLLE1BQU0sTUFBTSxRQUFNLEdBQUcsU0FBUyxhQUFhLEdBQUcsU0FBUyxNQUFNLE1BQU0sSUFBSTtBQUNoRixjQUFJLElBQUksU0FBUztBQUNiLGdCQUFJLE1BQU0sS0FBSztBQUFBO0FBRWYsZ0JBQUksTUFBTSxLQUFLLEVBQUUsT0FBTyxLQUFLLE9BQU87QUFDeEMsZ0JBQU0sTUFBTSxPQUFPLElBQUksQ0FBQztBQUFBLFFBQzVDO0FBQUEsTUFDQTtBQUFBLElBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDSSxDQUFDLFNBQVM7QUFDTixZQUFRLEtBQUssTUFBSTtBQUFBLE1BQ2IsS0FBSztBQUNELGNBQU0sRUFBRSxNQUFNLGFBQWEsUUFBUSxLQUFLLFFBQVEsUUFBUSxLQUFLLE9BQVE7QUFDckU7QUFBQSxNQUNKLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFDRCxjQUFNLEtBQUs7QUFDWDtBQUFBLE1BQ0osS0FBSztBQUFBLE1BQ0wsS0FBSyxhQUFhO0FBQ2QsY0FBTSxNQUFNO0FBQUEsVUFDUixNQUFNO0FBQUEsVUFDTixRQUFRLEtBQUs7QUFBQSxVQUNiLE9BQU87QUFBQSxRQUNWO0FBQ0QsWUFBSSxLQUFLLFNBQVM7QUFDZCxjQUFJLE1BQU0sS0FBSyxLQUFLLFdBQVc7QUFDbkMsYUFBSyxNQUFNLEtBQUssR0FBRztBQUNuQjtBQUFBLE1BQ2hCO0FBQUEsSUFDQTtBQUNRLFVBQU07QUFBQSxNQUNGLE1BQU07QUFBQSxNQUNOLFFBQVEsS0FBSztBQUFBLE1BQ2IsU0FBUyxjQUFjLEtBQUssSUFBSTtBQUFBLE1BQ2hDLFFBQVEsS0FBSztBQUFBLElBQ2hCO0FBQUEsRUFDVDtBQUFBLEVBQ0ksQ0FBQyxTQUFTLEtBQUs7QUFDWCxRQUFJLElBQUk7QUFDSixhQUFPLE9BQU8sS0FBSyxRQUFRLEdBQUc7QUFDbEMsWUFBUSxLQUFLLE1BQUk7QUFBQSxNQUNiLEtBQUssYUFBYTtBQUNkLFlBQUksa0JBQWtCLElBQUksS0FBSyxNQUFNLElBQUk7QUFDckMsaUJBQU8sS0FBSyxJQUFLO0FBQ2pCLGlCQUFPLEtBQUssS0FBTTtBQUFBLFFBQ3RDO0FBRW9CLGNBQUksTUFBTSxLQUFLLEtBQUssV0FBVztBQUNuQztBQUFBLE1BQ2hCO0FBQUEsTUFDWSxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQ0QsWUFBSSxNQUFNLEtBQUssS0FBSyxXQUFXO0FBQy9CO0FBQUEsSUFDaEI7QUFDUSxVQUFNLEtBQUssS0FBSyxnQkFBZ0IsR0FBRztBQUNuQyxRQUFJO0FBQ0EsV0FBSyxNQUFNLEtBQUssRUFBRTtBQUFBLFNBQ2pCO0FBQ0QsWUFBTTtBQUFBLFFBQ0YsTUFBTTtBQUFBLFFBQ04sUUFBUSxLQUFLO0FBQUEsUUFDYixTQUFTLGNBQWMsS0FBSyxJQUFJO0FBQUEsUUFDaEMsUUFBUSxLQUFLO0FBQUEsTUFDaEI7QUFBQSxJQUNiO0FBQUEsRUFDQTtBQUFBLEVBQ0ksQ0FBQyxPQUFPLFFBQVE7QUFDWixRQUFJLEtBQUssU0FBUyxpQkFBaUI7QUFDL0IsWUFBTSxPQUFPLGFBQWEsS0FBSyxLQUFLLENBQUMsQ0FBQztBQUN0QyxZQUFNLFFBQVEsc0JBQXNCLElBQUk7QUFDeEMsVUFBSTtBQUNKLFVBQUksT0FBTyxLQUFLO0FBQ1osY0FBTSxPQUFPO0FBQ2IsWUFBSSxLQUFLLEtBQUssV0FBVztBQUN6QixlQUFPLE9BQU87QUFBQSxNQUM5QjtBQUVnQixjQUFNLENBQUMsS0FBSyxXQUFXO0FBQzNCLFlBQU0wQyxPQUFNO0FBQUEsUUFDUixNQUFNO0FBQUEsUUFDTixRQUFRLE9BQU87QUFBQSxRQUNmLFFBQVEsT0FBTztBQUFBLFFBQ2YsT0FBTyxDQUFDLEVBQUUsT0FBTyxLQUFLLFFBQVEsSUFBSztBQUFBLE1BQ3RDO0FBQ0QsV0FBSyxZQUFZO0FBQ2pCLFdBQUssTUFBTSxLQUFLLE1BQU0sU0FBUyxDQUFDLElBQUlBO0FBQUEsSUFDaEQ7QUFFWSxhQUFPLEtBQUssUUFBUSxNQUFNO0FBQUEsRUFDdEM7QUFBQSxFQUNJLENBQUMsWUFBWSxRQUFRO0FBQ2pCLFlBQVEsS0FBSyxNQUFJO0FBQUEsTUFDYixLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQ0QsZUFBTyxNQUFNLEtBQUssS0FBSyxXQUFXO0FBQ2xDO0FBQUEsTUFDSixLQUFLO0FBQ0QsZUFBTyxTQUFTLEtBQUs7QUFFckIsYUFBSyxZQUFZO0FBQ2pCLGFBQUssU0FBUztBQUNkLFlBQUksS0FBSyxXQUFXO0FBQ2hCLGNBQUksS0FBSyxLQUFLLE9BQU8sUUFBUSxJQUFJLElBQUk7QUFDckMsaUJBQU8sT0FBTyxHQUFHO0FBQ2IsaUJBQUssVUFBVSxLQUFLLFNBQVMsRUFBRTtBQUMvQixpQkFBSyxLQUFLLE9BQU8sUUFBUSxNQUFNLEVBQUUsSUFBSTtBQUFBLFVBQzdEO0FBQUEsUUFDQTtBQUNnQixlQUFPLEtBQUssSUFBSztBQUNqQjtBQUFBO0FBQUEsTUFFSjtBQUNJLGVBQU8sS0FBSyxJQUFLO0FBQ2pCLGVBQU8sS0FBSyxLQUFNO0FBQUEsSUFDbEM7QUFBQSxFQUNBO0FBQUEsRUFDSSxDQUFDLFNBQVNBLE1BQUs7O0FBQ1gsVUFBTSxLQUFLQSxLQUFJLE1BQU1BLEtBQUksTUFBTSxTQUFTLENBQUM7QUFFekMsWUFBUSxLQUFLLE1BQUk7QUFBQSxNQUNiLEtBQUs7QUFDRCxhQUFLLFlBQVk7QUFDakIsWUFBSSxHQUFHLE9BQU87QUFDVixnQkFBTSxNQUFNLFNBQVMsR0FBRyxRQUFRLEdBQUcsTUFBTSxNQUFNO0FBQy9DLGdCQUFNLE9BQU8sTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLElBQUksU0FBUyxDQUFDLElBQUk7QUFDeEQsZUFBSSw2QkFBTSxVQUFTO0FBQ2YsdUNBQUssS0FBSyxLQUFLO0FBQUE7QUFFZixZQUFBQSxLQUFJLE1BQU0sS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLFdBQVcsR0FBRztBQUFBLFFBQ3BFLFdBQ3lCLEdBQUcsS0FBSztBQUNiLGFBQUcsSUFBSSxLQUFLLEtBQUssV0FBVztBQUFBLFFBQ2hELE9BQ3FCO0FBQ0QsYUFBRyxNQUFNLEtBQUssS0FBSyxXQUFXO0FBQUEsUUFDbEQ7QUFDZ0I7QUFBQSxNQUNKLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFDRCxZQUFJLEdBQUcsT0FBTztBQUNWLFVBQUFBLEtBQUksTUFBTSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssV0FBVyxHQUFHO0FBQUEsUUFDaEUsV0FDeUIsR0FBRyxLQUFLO0FBQ2IsYUFBRyxJQUFJLEtBQUssS0FBSyxXQUFXO0FBQUEsUUFDaEQsT0FDcUI7QUFDRCxjQUFJLEtBQUssa0JBQWtCLEdBQUcsT0FBT0EsS0FBSSxNQUFNLEdBQUc7QUFDOUMsa0JBQU0sT0FBT0EsS0FBSSxNQUFNQSxLQUFJLE1BQU0sU0FBUyxDQUFDO0FBQzNDLGtCQUFNLE9BQU0sa0NBQU0sVUFBTixtQkFBYTtBQUN6QixnQkFBSSxNQUFNLFFBQVEsR0FBRyxHQUFHO0FBQ3BCLG9CQUFNLFVBQVUsS0FBSyxNQUFNLEtBQUssR0FBRyxLQUFLO0FBQ3hDLGtCQUFJLEtBQUssS0FBSyxXQUFXO0FBQ3pCLGNBQUFBLEtBQUksTUFBTSxJQUFLO0FBQ2Y7QUFBQSxZQUM1QjtBQUFBLFVBQ0E7QUFDb0IsYUFBRyxNQUFNLEtBQUssS0FBSyxXQUFXO0FBQUEsUUFDbEQ7QUFDZ0I7QUFBQSxJQUNoQjtBQUNRLFFBQUksS0FBSyxVQUFVQSxLQUFJLFFBQVE7QUFDM0IsWUFBTSxjQUFjLENBQUMsS0FBSyxhQUFhLEtBQUssV0FBV0EsS0FBSTtBQUMzRCxZQUFNLGFBQWEsZ0JBQ2QsR0FBRyxPQUFPLEdBQUcsZ0JBQ2QsS0FBSyxTQUFTO0FBRWxCLFVBQUksUUFBUSxDQUFFO0FBQ2QsVUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsT0FBTztBQUNuQyxjQUFNLEtBQUssQ0FBRTtBQUNiLGlCQUFTLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxRQUFRLEVBQUUsR0FBRztBQUNwQyxnQkFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ25CLGtCQUFRLEdBQUcsTUFBSTtBQUFBLFlBQ1gsS0FBSztBQUNELGlCQUFHLEtBQUssQ0FBQztBQUNUO0FBQUEsWUFDSixLQUFLO0FBQ0Q7QUFBQSxZQUNKLEtBQUs7QUFDRCxrQkFBSSxHQUFHLFNBQVNBLEtBQUk7QUFDaEIsbUJBQUcsU0FBUztBQUNoQjtBQUFBLFlBQ0o7QUFDSSxpQkFBRyxTQUFTO0FBQUEsVUFDeEM7QUFBQSxRQUNBO0FBQ2dCLFlBQUksR0FBRyxVQUFVO0FBQ2Isa0JBQVEsR0FBRyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFBQSxNQUMvQztBQUNZLGNBQVEsS0FBSyxNQUFJO0FBQUEsUUFDYixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsY0FBSSxjQUFjLEdBQUcsT0FBTztBQUN4QixrQkFBTSxLQUFLLEtBQUssV0FBVztBQUMzQixZQUFBQSxLQUFJLE1BQU0sS0FBSyxFQUFFLE1BQUssQ0FBRTtBQUN4QixpQkFBSyxZQUFZO0FBQUEsVUFDekMsV0FDNkIsR0FBRyxLQUFLO0FBQ2IsZUFBRyxJQUFJLEtBQUssS0FBSyxXQUFXO0FBQUEsVUFDcEQsT0FDeUI7QUFDRCxlQUFHLE1BQU0sS0FBSyxLQUFLLFdBQVc7QUFBQSxVQUN0RDtBQUNvQjtBQUFBLFFBQ0osS0FBSztBQUNELGNBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLGFBQWE7QUFDNUIsZUFBRyxNQUFNLEtBQUssS0FBSyxXQUFXO0FBQzlCLGVBQUcsY0FBYztBQUFBLFVBQ3pDLFdBQzZCLGNBQWMsR0FBRyxPQUFPO0FBQzdCLGtCQUFNLEtBQUssS0FBSyxXQUFXO0FBQzNCLFlBQUFBLEtBQUksTUFBTSxLQUFLLEVBQUUsT0FBTyxhQUFhLE1BQU07QUFBQSxVQUNuRSxPQUN5QjtBQUNELGlCQUFLLE1BQU0sS0FBSztBQUFBLGNBQ1osTUFBTTtBQUFBLGNBQ04sUUFBUSxLQUFLO0FBQUEsY0FDYixRQUFRLEtBQUs7QUFBQSxjQUNiLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxLQUFLLFdBQVcsR0FBRyxhQUFhLEtBQU07QUFBQSxZQUNwRixDQUF5QjtBQUFBLFVBQ3pCO0FBQ29CLGVBQUssWUFBWTtBQUNqQjtBQUFBLFFBQ0osS0FBSztBQUNELGNBQUksR0FBRyxhQUFhO0FBQ2hCLGdCQUFJLENBQUMsR0FBRyxLQUFLO0FBQ1Qsa0JBQUksY0FBYyxHQUFHLE9BQU8sU0FBUyxHQUFHO0FBQ3BDLHVCQUFPLE9BQU8sSUFBSSxFQUFFLEtBQUssTUFBTSxLQUFLLENBQUMsS0FBSyxXQUFXLEdBQUc7QUFBQSxjQUN4RixPQUNpQztBQUNELHNCQUFNK0IsU0FBUSxzQkFBc0IsR0FBRyxLQUFLO0FBQzVDLHFCQUFLLE1BQU0sS0FBSztBQUFBLGtCQUNaLE1BQU07QUFBQSxrQkFDTixRQUFRLEtBQUs7QUFBQSxrQkFDYixRQUFRLEtBQUs7QUFBQSxrQkFDYixPQUFPLENBQUMsRUFBRSxPQUFBQSxRQUFPLEtBQUssTUFBTSxLQUFLLENBQUMsS0FBSyxXQUFXLEVBQUc7QUFBQSxnQkFDekYsQ0FBaUM7QUFBQSxjQUNqQztBQUFBLFlBQ0EsV0FDaUMsR0FBRyxPQUFPO0FBQ2YsY0FBQS9CLEtBQUksTUFBTSxLQUFLLEVBQUUsT0FBTyxDQUFFLEdBQUUsS0FBSyxNQUFNLEtBQUssQ0FBQyxLQUFLLFdBQVcsRUFBQyxDQUFFO0FBQUEsWUFDNUYsV0FDaUMsY0FBYyxHQUFHLEtBQUssZUFBZSxHQUFHO0FBQzdDLG1CQUFLLE1BQU0sS0FBSztBQUFBLGdCQUNaLE1BQU07QUFBQSxnQkFDTixRQUFRLEtBQUs7QUFBQSxnQkFDYixRQUFRLEtBQUs7QUFBQSxnQkFDYixPQUFPLENBQUMsRUFBRSxPQUFPLEtBQUssTUFBTSxLQUFLLENBQUMsS0FBSyxXQUFXLEVBQUc7QUFBQSxjQUNyRixDQUE2QjtBQUFBLFlBQzdCLFdBQ2lDLFlBQVksR0FBRyxHQUFHLEtBQ3ZCLENBQUMsY0FBYyxHQUFHLEtBQUssU0FBUyxHQUFHO0FBQ25DLG9CQUFNK0IsU0FBUSxzQkFBc0IsR0FBRyxLQUFLO0FBQzVDLG9CQUFNLE1BQU0sR0FBRztBQUNmLG9CQUFNLE1BQU0sR0FBRztBQUNmLGtCQUFJLEtBQUssS0FBSyxXQUFXO0FBRXpCLHFCQUFPLEdBQUc7QUFFVixxQkFBTyxHQUFHO0FBQ1YsbUJBQUssTUFBTSxLQUFLO0FBQUEsZ0JBQ1osTUFBTTtBQUFBLGdCQUNOLFFBQVEsS0FBSztBQUFBLGdCQUNiLFFBQVEsS0FBSztBQUFBLGdCQUNiLE9BQU8sQ0FBQyxFQUFFLE9BQUFBLFFBQU8sS0FBSyxJQUFLO0FBQUEsY0FDM0QsQ0FBNkI7QUFBQSxZQUM3QixXQUNpQyxNQUFNLFNBQVMsR0FBRztBQUV2QixpQkFBRyxNQUFNLEdBQUcsSUFBSSxPQUFPLE9BQU8sS0FBSyxXQUFXO0FBQUEsWUFDMUUsT0FDNkI7QUFDRCxpQkFBRyxJQUFJLEtBQUssS0FBSyxXQUFXO0FBQUEsWUFDeEQ7QUFBQSxVQUNBLE9BQ3lCO0FBQ0QsZ0JBQUksQ0FBQyxHQUFHLEtBQUs7QUFDVCxxQkFBTyxPQUFPLElBQUksRUFBRSxLQUFLLE1BQU0sS0FBSyxDQUFDLEtBQUssV0FBVyxHQUFHO0FBQUEsWUFDcEYsV0FDaUMsR0FBRyxTQUFTLFlBQVk7QUFDN0IsY0FBQS9CLEtBQUksTUFBTSxLQUFLLEVBQUUsT0FBTyxLQUFLLE1BQU0sS0FBSyxDQUFDLEtBQUssV0FBVyxFQUFDLENBQUU7QUFBQSxZQUN4RixXQUNpQyxjQUFjLEdBQUcsS0FBSyxlQUFlLEdBQUc7QUFDN0MsbUJBQUssTUFBTSxLQUFLO0FBQUEsZ0JBQ1osTUFBTTtBQUFBLGdCQUNOLFFBQVEsS0FBSztBQUFBLGdCQUNiLFFBQVEsS0FBSztBQUFBLGdCQUNiLE9BQU8sQ0FBQyxFQUFFLE9BQU8sSUFBSSxLQUFLLE1BQU0sS0FBSyxDQUFDLEtBQUssV0FBVyxFQUFHO0FBQUEsY0FDekYsQ0FBNkI7QUFBQSxZQUM3QixPQUM2QjtBQUNELGlCQUFHLElBQUksS0FBSyxLQUFLLFdBQVc7QUFBQSxZQUN4RDtBQUFBLFVBQ0E7QUFDb0IsZUFBSyxZQUFZO0FBQ2pCO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLLHdCQUF3QjtBQUN6QixnQkFBTSxLQUFLLEtBQUssV0FBVyxLQUFLLElBQUk7QUFDcEMsY0FBSSxjQUFjLEdBQUcsT0FBTztBQUN4QixZQUFBQSxLQUFJLE1BQU0sS0FBSyxFQUFFLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSTtBQUMxQyxpQkFBSyxZQUFZO0FBQUEsVUFDekMsV0FDNkIsR0FBRyxLQUFLO0FBQ2IsaUJBQUssTUFBTSxLQUFLLEVBQUU7QUFBQSxVQUMxQyxPQUN5QjtBQUNELG1CQUFPLE9BQU8sSUFBSSxFQUFFLEtBQUssSUFBSSxLQUFLLElBQUk7QUFDdEMsaUJBQUssWUFBWTtBQUFBLFVBQ3pDO0FBQ29CO0FBQUEsUUFDcEI7QUFBQSxRQUNnQixTQUFTO0FBQ0wsZ0JBQU0sS0FBSyxLQUFLLGdCQUFnQkEsSUFBRztBQUNuQyxjQUFJLElBQUk7QUFDSixnQkFBSSxlQUFlLEdBQUcsU0FBUyxhQUFhO0FBQ3hDLGNBQUFBLEtBQUksTUFBTSxLQUFLLEVBQUUsTUFBSyxDQUFFO0FBQUEsWUFDcEQ7QUFDd0IsaUJBQUssTUFBTSxLQUFLLEVBQUU7QUFDbEI7QUFBQSxVQUN4QjtBQUFBLFFBQ0E7QUFBQSxNQUNBO0FBQUEsSUFDQTtBQUNRLFdBQU8sS0FBSyxJQUFLO0FBQ2pCLFdBQU8sS0FBSyxLQUFNO0FBQUEsRUFDMUI7QUFBQSxFQUNJLENBQUMsY0FBY1EsTUFBSzs7QUFDaEIsVUFBTSxLQUFLQSxLQUFJLE1BQU1BLEtBQUksTUFBTSxTQUFTLENBQUM7QUFDekMsWUFBUSxLQUFLLE1BQUk7QUFBQSxNQUNiLEtBQUs7QUFDRCxZQUFJLEdBQUcsT0FBTztBQUNWLGdCQUFNLE1BQU0sU0FBUyxHQUFHLFFBQVEsR0FBRyxNQUFNLE1BQU07QUFDL0MsZ0JBQU0sT0FBTyxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSTtBQUN4RCxlQUFJLDZCQUFNLFVBQVM7QUFDZix1Q0FBSyxLQUFLLEtBQUs7QUFBQTtBQUVmLFlBQUFBLEtBQUksTUFBTSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssV0FBVyxHQUFHO0FBQUEsUUFDcEU7QUFFb0IsYUFBRyxNQUFNLEtBQUssS0FBSyxXQUFXO0FBQ2xDO0FBQUEsTUFDSixLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQ0QsWUFBSSxHQUFHO0FBQ0gsVUFBQUEsS0FBSSxNQUFNLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxXQUFXLEdBQUc7QUFBQSxhQUMzQztBQUNELGNBQUksS0FBSyxrQkFBa0IsR0FBRyxPQUFPQSxLQUFJLE1BQU0sR0FBRztBQUM5QyxrQkFBTSxPQUFPQSxLQUFJLE1BQU1BLEtBQUksTUFBTSxTQUFTLENBQUM7QUFDM0Msa0JBQU0sT0FBTSxrQ0FBTSxVQUFOLG1CQUFhO0FBQ3pCLGdCQUFJLE1BQU0sUUFBUSxHQUFHLEdBQUc7QUFDcEIsb0JBQU0sVUFBVSxLQUFLLE1BQU0sS0FBSyxHQUFHLEtBQUs7QUFDeEMsa0JBQUksS0FBSyxLQUFLLFdBQVc7QUFDekIsY0FBQUEsS0FBSSxNQUFNLElBQUs7QUFDZjtBQUFBLFlBQzVCO0FBQUEsVUFDQTtBQUNvQixhQUFHLE1BQU0sS0FBSyxLQUFLLFdBQVc7QUFBQSxRQUNsRDtBQUNnQjtBQUFBLE1BQ0osS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNELFlBQUksR0FBRyxTQUFTLEtBQUssVUFBVUEsS0FBSTtBQUMvQjtBQUNKLFdBQUcsTUFBTSxLQUFLLEtBQUssV0FBVztBQUM5QjtBQUFBLE1BQ0osS0FBSztBQUNELFlBQUksS0FBSyxXQUFXQSxLQUFJO0FBQ3BCO0FBQ0osWUFBSSxHQUFHLFNBQVMsY0FBYyxHQUFHLE9BQU8sY0FBYztBQUNsRCxVQUFBQSxLQUFJLE1BQU0sS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLFdBQVcsR0FBRztBQUFBO0FBRTVDLGFBQUcsTUFBTSxLQUFLLEtBQUssV0FBVztBQUNsQztBQUFBLElBQ2hCO0FBQ1EsUUFBSSxLQUFLLFNBQVNBLEtBQUksUUFBUTtBQUMxQixZQUFNLEtBQUssS0FBSyxnQkFBZ0JBLElBQUc7QUFDbkMsVUFBSSxJQUFJO0FBQ0osYUFBSyxNQUFNLEtBQUssRUFBRTtBQUNsQjtBQUFBLE1BQ2hCO0FBQUEsSUFDQTtBQUNRLFdBQU8sS0FBSyxJQUFLO0FBQ2pCLFdBQU8sS0FBSyxLQUFNO0FBQUEsRUFDMUI7QUFBQSxFQUNJLENBQUMsZUFBZSxJQUFJO0FBQ2hCLFVBQU0sS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQztBQUN2QyxRQUFJLEtBQUssU0FBUyxrQkFBa0I7QUFDaEMsVUFBSTtBQUNKLFNBQUc7QUFDQyxlQUFPLEtBQUssSUFBSztBQUNqQixjQUFNLEtBQUssS0FBSyxDQUFDO0FBQUEsTUFDakMsU0FBcUIsT0FBTyxJQUFJLFNBQVM7QUFBQSxJQUN6QyxXQUNpQixHQUFHLElBQUksV0FBVyxHQUFHO0FBQzFCLGNBQVEsS0FBSyxNQUFJO0FBQUEsUUFDYixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsY0FBSSxDQUFDLE1BQU0sR0FBRztBQUNWLGVBQUcsTUFBTSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssV0FBVyxHQUFHO0FBQUE7QUFFM0MsZUFBRyxNQUFNLEtBQUssS0FBSyxXQUFXO0FBQ2xDO0FBQUEsUUFDSixLQUFLO0FBQ0QsY0FBSSxDQUFDLE1BQU0sR0FBRztBQUNWLGVBQUcsTUFBTSxLQUFLLEVBQUUsT0FBTyxDQUFFLEdBQUUsS0FBSyxNQUFNLEtBQUssQ0FBQyxLQUFLLFdBQVcsRUFBQyxDQUFFO0FBQUEsbUJBQzFELEdBQUc7QUFDUixlQUFHLElBQUksS0FBSyxLQUFLLFdBQVc7QUFBQTtBQUU1QixtQkFBTyxPQUFPLElBQUksRUFBRSxLQUFLLE1BQU0sS0FBSyxDQUFDLEtBQUssV0FBVyxHQUFHO0FBQzVEO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsY0FBSSxDQUFDLE1BQU0sR0FBRztBQUNWLGVBQUcsTUFBTSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssV0FBVyxHQUFHO0FBQUEsbUJBQ3RDLEdBQUc7QUFDUixlQUFHLElBQUksS0FBSyxLQUFLLFdBQVc7QUFBQTtBQUU1QixlQUFHLE1BQU0sS0FBSyxLQUFLLFdBQVc7QUFDbEM7QUFBQSxRQUNKLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUssd0JBQXdCO0FBQ3pCLGdCQUFNLEtBQUssS0FBSyxXQUFXLEtBQUssSUFBSTtBQUNwQyxjQUFJLENBQUMsTUFBTSxHQUFHO0FBQ1YsZUFBRyxNQUFNLEtBQUssRUFBRSxPQUFPLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSTtBQUFBLG1CQUN4QyxHQUFHO0FBQ1IsaUJBQUssTUFBTSxLQUFLLEVBQUU7QUFBQTtBQUVsQixtQkFBTyxPQUFPLElBQUksRUFBRSxLQUFLLElBQUksS0FBSyxJQUFJO0FBQzFDO0FBQUEsUUFDcEI7QUFBQSxRQUNnQixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsYUFBRyxJQUFJLEtBQUssS0FBSyxXQUFXO0FBQzVCO0FBQUEsTUFDcEI7QUFDWSxZQUFNLEtBQUssS0FBSyxnQkFBZ0IsRUFBRTtBQUVsQyxVQUFJO0FBQ0EsYUFBSyxNQUFNLEtBQUssRUFBRTtBQUFBLFdBQ2pCO0FBQ0QsZUFBTyxLQUFLLElBQUs7QUFDakIsZUFBTyxLQUFLLEtBQU07QUFBQSxNQUNsQztBQUFBLElBQ0EsT0FDYTtBQUNELFlBQU0sU0FBUyxLQUFLLEtBQUssQ0FBQztBQUMxQixVQUFJLE9BQU8sU0FBUyxnQkFDZCxLQUFLLFNBQVMsbUJBQW1CLE9BQU8sV0FBVyxHQUFHLFVBQ25ELEtBQUssU0FBUyxhQUNYLENBQUMsT0FBTyxNQUFNLE9BQU8sTUFBTSxTQUFTLENBQUMsRUFBRSxNQUFPO0FBQ3RELGVBQU8sS0FBSyxJQUFLO0FBQ2pCLGVBQU8sS0FBSyxLQUFNO0FBQUEsTUFDbEMsV0FDcUIsS0FBSyxTQUFTLG1CQUNuQixPQUFPLFNBQVMsbUJBQW1CO0FBQ25DLGNBQU0sT0FBTyxhQUFhLE1BQU07QUFDaEMsY0FBTSxRQUFRLHNCQUFzQixJQUFJO0FBQ3hDLHdCQUFnQixFQUFFO0FBQ2xCLGNBQU0sTUFBTSxHQUFHLElBQUksT0FBTyxHQUFHLEdBQUcsSUFBSSxNQUFNO0FBQzFDLFlBQUksS0FBSyxLQUFLLFdBQVc7QUFDekIsY0FBTVIsT0FBTTtBQUFBLFVBQ1IsTUFBTTtBQUFBLFVBQ04sUUFBUSxHQUFHO0FBQUEsVUFDWCxRQUFRLEdBQUc7QUFBQSxVQUNYLE9BQU8sQ0FBQyxFQUFFLE9BQU8sS0FBSyxJQUFJLElBQUs7QUFBQSxRQUNsQztBQUNELGFBQUssWUFBWTtBQUNqQixhQUFLLE1BQU0sS0FBSyxNQUFNLFNBQVMsQ0FBQyxJQUFJQTtBQUFBLE1BQ3BELE9BQ2lCO0FBQ0QsZUFBTyxLQUFLLFFBQVEsRUFBRTtBQUFBLE1BQ3RDO0FBQUEsSUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNJLFdBQVcsTUFBTTtBQUNiLFFBQUksS0FBSyxXQUFXO0FBQ2hCLFVBQUksS0FBSyxLQUFLLE9BQU8sUUFBUSxJQUFJLElBQUk7QUFDckMsYUFBTyxPQUFPLEdBQUc7QUFDYixhQUFLLFVBQVUsS0FBSyxTQUFTLEVBQUU7QUFDL0IsYUFBSyxLQUFLLE9BQU8sUUFBUSxNQUFNLEVBQUUsSUFBSTtBQUFBLE1BQ3JEO0FBQUEsSUFDQTtBQUNRLFdBQU87QUFBQSxNQUNIO0FBQUEsTUFDQSxRQUFRLEtBQUs7QUFBQSxNQUNiLFFBQVEsS0FBSztBQUFBLE1BQ2IsUUFBUSxLQUFLO0FBQUEsSUFDaEI7QUFBQSxFQUNUO0FBQUEsRUFDSSxnQkFBZ0IsUUFBUTtBQUNwQixZQUFRLEtBQUssTUFBSTtBQUFBLE1BQ2IsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNELGVBQU8sS0FBSyxXQUFXLEtBQUssSUFBSTtBQUFBLE1BQ3BDLEtBQUs7QUFDRCxlQUFPO0FBQUEsVUFDSCxNQUFNO0FBQUEsVUFDTixRQUFRLEtBQUs7QUFBQSxVQUNiLFFBQVEsS0FBSztBQUFBLFVBQ2IsT0FBTyxDQUFDLEtBQUssV0FBVztBQUFBLFVBQ3hCLFFBQVE7QUFBQSxRQUNYO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQ0QsZUFBTztBQUFBLFVBQ0gsTUFBTTtBQUFBLFVBQ04sUUFBUSxLQUFLO0FBQUEsVUFDYixRQUFRLEtBQUs7QUFBQSxVQUNiLE9BQU8sS0FBSztBQUFBLFVBQ1osT0FBTyxDQUFFO0FBQUEsVUFDVCxLQUFLO0FBQUEsUUFDUjtBQUFBLE1BQ0wsS0FBSztBQUNELGVBQU87QUFBQSxVQUNILE1BQU07QUFBQSxVQUNOLFFBQVEsS0FBSztBQUFBLFVBQ2IsUUFBUSxLQUFLO0FBQUEsVUFDYixPQUFPLENBQUMsRUFBRSxPQUFPLENBQUMsS0FBSyxXQUFXLEVBQUc7QUFBQSxRQUN4QztBQUFBLE1BQ0wsS0FBSyxvQkFBb0I7QUFDckIsYUFBSyxZQUFZO0FBQ2pCLGNBQU0sT0FBTyxhQUFhLE1BQU07QUFDaEMsY0FBTSxRQUFRLHNCQUFzQixJQUFJO0FBQ3hDLGNBQU0sS0FBSyxLQUFLLFdBQVc7QUFDM0IsZUFBTztBQUFBLFVBQ0gsTUFBTTtBQUFBLFVBQ04sUUFBUSxLQUFLO0FBQUEsVUFDYixRQUFRLEtBQUs7QUFBQSxVQUNiLE9BQU8sQ0FBQyxFQUFFLE9BQU8sYUFBYSxLQUFNO0FBQUEsUUFDdkM7QUFBQSxNQUNqQjtBQUFBLE1BQ1ksS0FBSyxpQkFBaUI7QUFDbEIsYUFBSyxZQUFZO0FBQ2pCLGNBQU0sT0FBTyxhQUFhLE1BQU07QUFDaEMsY0FBTSxRQUFRLHNCQUFzQixJQUFJO0FBQ3hDLGVBQU87QUFBQSxVQUNILE1BQU07QUFBQSxVQUNOLFFBQVEsS0FBSztBQUFBLFVBQ2IsUUFBUSxLQUFLO0FBQUEsVUFDYixPQUFPLENBQUMsRUFBRSxPQUFPLEtBQUssTUFBTSxLQUFLLENBQUMsS0FBSyxXQUFXLEVBQUc7QUFBQSxRQUN4RDtBQUFBLE1BQ2pCO0FBQUEsSUFDQTtBQUNRLFdBQU87QUFBQSxFQUNmO0FBQUEsRUFDSSxrQkFBa0IsT0FBTyxRQUFRO0FBQzdCLFFBQUksS0FBSyxTQUFTO0FBQ2QsYUFBTztBQUNYLFFBQUksS0FBSyxVQUFVO0FBQ2YsYUFBTztBQUNYLFdBQU8sTUFBTSxNQUFNLFFBQU0sR0FBRyxTQUFTLGFBQWEsR0FBRyxTQUFTLE9BQU87QUFBQSxFQUM3RTtBQUFBLEVBQ0ksQ0FBQyxZQUFZLFFBQVE7QUFDakIsUUFBSSxLQUFLLFNBQVMsWUFBWTtBQUMxQixVQUFJLE9BQU87QUFDUCxlQUFPLElBQUksS0FBSyxLQUFLLFdBQVc7QUFBQTtBQUVoQyxlQUFPLE1BQU0sQ0FBQyxLQUFLLFdBQVc7QUFDbEMsVUFBSSxLQUFLLFNBQVM7QUFDZCxlQUFPLEtBQUssSUFBSztBQUFBLElBQ2pDO0FBQUEsRUFDQTtBQUFBLEVBQ0ksQ0FBQyxRQUFRLE9BQU87QUFDWixZQUFRLEtBQUssTUFBSTtBQUFBLE1BQ2IsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUNELGVBQU8sS0FBSyxJQUFLO0FBQ2pCLGVBQU8sS0FBSyxLQUFNO0FBQ2xCO0FBQUEsTUFDSixLQUFLO0FBQ0QsYUFBSyxZQUFZO0FBQUE7QUFBQSxNQUVyQixLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTDtBQUVJLFlBQUksTUFBTTtBQUNOLGdCQUFNLElBQUksS0FBSyxLQUFLLFdBQVc7QUFBQTtBQUUvQixnQkFBTSxNQUFNLENBQUMsS0FBSyxXQUFXO0FBQ2pDLFlBQUksS0FBSyxTQUFTO0FBQ2QsaUJBQU8sS0FBSyxJQUFLO0FBQUEsSUFDckM7QUFBQSxFQUNBO0FBQ0E7QUMvNkJBLFNBQVMsYUFBYSxTQUFTO0FBQzNCLFFBQU0sZUFBZSxRQUFRLGlCQUFpQjtBQUM5QyxRQUFNLGNBQWMsUUFBUSxlQUFnQixnQkFBZ0IsSUFBSSxZQUFhLEtBQUs7QUFDbEYsU0FBTyxFQUFFLGFBQWEsYUFBYztBQUN4QztBQVVBLFNBQVMsa0JBQWtCLFFBQVEsVUFBVSxJQUFJO0FBQzdDLFFBQU0sRUFBRSxhQUFhLGlCQUFpQixhQUFhLE9BQU87QUFDMUQsUUFBTSxTQUFTLElBQUksT0FBTywyQ0FBYSxVQUFVO0FBQ2pELFFBQU0sV0FBVyxJQUFJLFNBQVMsT0FBTztBQUNyQyxRQUFNLE9BQU8sTUFBTSxLQUFLLFNBQVMsUUFBUSxPQUFPLE1BQU0sTUFBTSxDQUFDLENBQUM7QUFDOUQsTUFBSSxnQkFBZ0I7QUFDaEIsZUFBVyxPQUFPLE1BQU07QUFDcEIsVUFBSSxPQUFPLFFBQVEsY0FBYyxRQUFRLFdBQVcsQ0FBQztBQUNyRCxVQUFJLFNBQVMsUUFBUSxjQUFjLFFBQVEsV0FBVyxDQUFDO0FBQUEsSUFDbkU7QUFDSSxNQUFJLEtBQUssU0FBUztBQUNkLFdBQU87QUFDWCxTQUFPLE9BQU8sT0FBTyxJQUFJLEVBQUUsT0FBTyxLQUFNLEdBQUUsU0FBUyxZQUFZO0FBQ25FO0FBRUEsU0FBUyxjQUFjLFFBQVEsVUFBVSxJQUFJO0FBQ3pDLFFBQU0sRUFBRSxhQUFhLGlCQUFpQixhQUFhLE9BQU87QUFDMUQsUUFBTSxTQUFTLElBQUksT0FBTywyQ0FBYSxVQUFVO0FBQ2pELFFBQU0sV0FBVyxJQUFJLFNBQVMsT0FBTztBQUVyQyxNQUFJLE1BQU07QUFDVixhQUFXLFFBQVEsU0FBUyxRQUFRLE9BQU8sTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLE1BQU0sR0FBRztBQUM1RSxRQUFJLENBQUM7QUFDRCxZQUFNO0FBQUEsYUFDRCxJQUFJLFFBQVEsYUFBYSxVQUFVO0FBQ3hDLFVBQUksT0FBTyxLQUFLLElBQUksZUFBZSxLQUFLLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxpQkFBaUIseUVBQXlFLENBQUM7QUFDdEo7QUFBQSxJQUNaO0FBQUEsRUFDQTtBQUNJLE1BQUksZ0JBQWdCLGFBQWE7QUFDN0IsUUFBSSxPQUFPLFFBQVEsY0FBYyxRQUFRLFdBQVcsQ0FBQztBQUNyRCxRQUFJLFNBQVMsUUFBUSxjQUFjLFFBQVEsV0FBVyxDQUFDO0FBQUEsRUFDL0Q7QUFDSSxTQUFPO0FBQ1g7QUFDQSxTQUFTLE1BQU0sS0FBSyxTQUFTLFNBQVM7QUFDbEMsTUFBSSxXQUFXO0FBQ2YsTUFBSSxPQUFPLFlBQVksWUFBWTtBQUMvQixlQUFXO0FBQUEsRUFDbkIsV0FDYSxZQUFZLFVBQWEsV0FBVyxPQUFPLFlBQVksVUFBVTtBQUN0RSxjQUFVO0FBQUEsRUFDbEI7QUFDSSxRQUFNLE1BQU0sY0FBYyxLQUFLLE9BQU87QUFDdEMsTUFBSSxDQUFDO0FBQ0QsV0FBTztBQUNYLE1BQUksU0FBUyxRQUFRLGFBQVcsS0FBSyxJQUFJLFFBQVEsVUFBVSxPQUFPLENBQUM7QUFDbkUsTUFBSSxJQUFJLE9BQU8sU0FBUyxHQUFHO0FBQ3ZCLFFBQUksSUFBSSxRQUFRLGFBQWE7QUFDekIsWUFBTSxJQUFJLE9BQU8sQ0FBQztBQUFBO0FBRWxCLFVBQUksU0FBUyxDQUFFO0FBQUEsRUFDM0I7QUFDSSxTQUFPLElBQUksS0FBSyxPQUFPLE9BQU8sRUFBRSxTQUFTLFlBQVksT0FBTyxDQUFDO0FBQ2pFO0FBQ0EsU0FBUyxVQUFVLE9BQU8sVUFBVSxTQUFTO0FBQ3pDLE1BQUksWUFBWTtBQUNoQixNQUFJLE9BQU8sYUFBYSxjQUFjLE1BQU0sUUFBUSxRQUFRLEdBQUc7QUFDM0QsZ0JBQVk7QUFBQSxFQUNwQixXQUNhLFlBQVksVUFBYSxVQUFVO0FBQ3hDLGNBQVU7QUFBQSxFQUNsQjtBQUNJLE1BQUksT0FBTyxZQUFZO0FBQ25CLGNBQVUsUUFBUTtBQUN0QixNQUFJLE9BQU8sWUFBWSxVQUFVO0FBQzdCLFVBQU0sU0FBUyxLQUFLLE1BQU0sT0FBTztBQUNqQyxjQUFVLFNBQVMsSUFBSSxTQUFZLFNBQVMsSUFBSSxFQUFFLFFBQVEsTUFBTSxFQUFFLE9BQVE7QUFBQSxFQUNsRjtBQUNJLE1BQUksVUFBVSxRQUFXO0FBQ3JCLFVBQU0sRUFBRSxjQUFhLElBQUssV0FBVyxZQUFZLENBQUU7QUFDbkQsUUFBSSxDQUFDO0FBQ0QsYUFBTztBQUFBLEVBQ25CO0FBQ0ksTUFBSSxXQUFXLEtBQUssS0FBSyxDQUFDO0FBQ3RCLFdBQU8sTUFBTSxTQUFTLE9BQU87QUFDakMsU0FBTyxJQUFJLFNBQVMsT0FBTyxXQUFXLE9BQU8sRUFBRSxTQUFTLE9BQU87QUFDbkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25CTyxTQUFTLGtCQUFrQixNQUFtQixNQUFjLFVBQTBCLElBQStEOztBQUNwSixzQkFBYyxJQUFJLEtBQUssWUFBWTtBQUN6QyxRQUFNZ0MsZ0JBQStCO0FBQUEsSUFDbkMsa0JBQWtCO0FBQUEsSUFDbEI7QUFBQSxJQUNBLEdBQUc7QUFBQSxFQUNMO0FBQ0EsUUFBTSxVQUFVLEtBQUssY0FBYyxNQUFNQSxhQUFZO0FBQ3JELFFBQU0sU0FBNEIsQ0FBQztBQUU3Qix1QkFBZSxDQUFDLFVBQXdGO0FBQzVHLFdBQU8sQ0FBQyxZQUFZLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxZQUFZLFFBQVEsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUFBLEVBQ3RFO0FBRU0sbUJBQVcsQ0FBQyxVQUErQjtBQUMvQyxXQUFPLEtBQUs7QUFBQSxNQUNWLFNBQVMsTUFBTTtBQUFBLE1BQ2YsT0FBTyxDQUFDLFlBQVksUUFBUSxNQUFNLElBQUksQ0FBQyxDQUFDLEdBQUcsWUFBWSxRQUFRLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQztBQUFBLEtBQzdFO0FBQUEsRUFDSDtBQUVNLHFCQUFhLENBQUMsV0FBaUN4QixTQUEyQjtBQUNuRSx1QkFBUUEsS0FBSSxPQUFPO0FBQzVCLFlBQU0sZUFBZSxnQkFBZ0IsS0FBSyxVQUFVLE9BQU8sS0FBSyxVQUFVO0FBQzFFLFVBQUksY0FBYztBQUNoQixjQUFNLFlBQVksVUFBVSxNQUFNLE1BQU13QixlQUFjLE1BQU07QUFDNUQsWUFBSSxXQUFXO0FBQ0gsK0JBQVcsVUFBVSxZQUFZLENBQUM7QUFDbEMsNkJBQVMsS0FBSyxTQUFTO0FBQUE7QUFFbkM7QUFBQTtBQUVJLHdCQUFZLGdCQUFnQixLQUFLO0FBQ3ZDLFVBQUksV0FBVztBQUNiLG1CQUFXLFdBQVcsSUFBSTtBQUMxQjtBQUFBO0FBRUYsYUFBTyxLQUFLO0FBQUEsUUFDVixTQUFTO0FBQUEsUUFDVCxPQUFPLGFBQWMsS0FBYSxTQUFTeEIsS0FBSSxLQUFLO0FBQUEsT0FDckQ7QUFBQTtBQUFBLEVBRUw7QUFFTSxxQkFBYSxDQUFDLFdBQWlDUixTQUEyQjtBQUNuRSx3QkFBU0EsS0FBSSxPQUFPO0FBQ25CLDJCQUFXLFVBQVUsWUFBWSxDQUFDO0FBRXRDLDBCQUFjLE1BQU0sZUFBZSxLQUFLLFVBQVUsT0FBTyxNQUFNLElBQUksVUFBVTtBQUNuRixVQUFJLENBQUMsYUFBYTtBQUNoQixlQUFPLEtBQUs7QUFBQSxVQUNWLFNBQVM7QUFBQSxVQUNULE9BQU8sYUFBYyxNQUFNLElBQVksU0FBU0EsS0FBSSxLQUFLO0FBQUEsU0FDMUQ7QUFDRDtBQUFBO0FBR0YsWUFBTSxNQUFnQyxNQUFNO0FBQzVDLFlBQU0sUUFBUSxNQUFNO0FBR2hCLGNBQUksVUFBVSxRQUFRO0FBQ3hCLGNBQU0sZ0JBQWdCLGlCQUFpQixLQUFLLFVBQVUsT0FBTyxNQUFNLFVBQVU7QUFDN0UsWUFBSSxDQUFDLGVBQWU7QUFDbEIsaUJBQU8sS0FBSztBQUFBLFlBQ1YsU0FBUztBQUFBLFlBQ1QsT0FBTyxhQUFlLE1BQU0sTUFBYyxTQUFTQSxLQUFJLEtBQU07QUFBQSxXQUM5RDtBQUNEO0FBQUE7QUFFRixrQkFBVSxTQUFTLEtBQUs7QUFBQSxVQUN0QixNQUFNO0FBQUEsVUFDTixNQUFNLGFBQWEsTUFBTSxLQUFLO0FBQUEsU0FDL0I7QUFDRDtBQUFBO0FBSUUsY0FBSSxVQUFVLGFBQWE7QUFDN0IsY0FBTSxnQkFBZ0IsaUJBQWlCLEtBQUssVUFBVSxPQUFPLE1BQU0sVUFBVTtBQUN6RSxhQUFDLGlCQUFrQixNQUFNLFVBQVUsYUFBYSxNQUFNLFVBQVUsV0FBVyxNQUFNLFVBQVUsY0FBZTtBQUM1RyxpQkFBTyxLQUFLO0FBQUEsWUFDVixTQUFTO0FBQUEsWUFDVCxPQUFPLGFBQWUsTUFBTSxNQUFjLFNBQVNBLEtBQUksS0FBTTtBQUFBLFdBQzlEO0FBQ0Q7QUFBQTtBQUVGLGtCQUFVLGdCQUFnQixNQUFNO0FBQ2hDO0FBQUE7QUFJRixVQUFJLElBQUksTUFBTSxXQUFXLEdBQUcsR0FBRztBQUM3QixjQUFNLGdCQUFnQixpQkFBaUIsS0FBSyxVQUFVLE9BQU8sTUFBTSxVQUFVO0FBQzdFLFlBQUksQ0FBQyxlQUFlO0FBQ2xCLGlCQUFPLEtBQUs7QUFBQSxZQUNWLFNBQVM7QUFBQSxZQUNULE9BQU8sYUFBZSxNQUFNLE1BQWMsU0FBU0EsS0FBSSxLQUFNO0FBQUEsV0FDOUQ7QUFDRDtBQUFBO0FBRVEsMEJBQVEsVUFBVSxTQUFTLENBQUM7QUFDNUIsd0JBQU0sSUFBSSxNQUFNLE1BQU0sQ0FBQyxDQUFDLElBQUksYUFBYSxNQUFNLEtBQUs7QUFDOUQ7QUFBQTtBQUlGLFlBQU0sWUFBWSxVQUFVLE1BQU0sS0FBS2dDLGVBQWMsTUFBTTtBQUMzRCxVQUFJLENBQUM7QUFDSDtBQUdJLDRCQUFnQixpQkFBaUIsS0FBSztBQUM1QyxVQUFJLGVBQWU7QUFDWCxxQkFBTyxPQUFPLE1BQU07QUFDMUIsWUFBSSxTQUFTLFlBQVksU0FBUyxZQUFZLFNBQVMsV0FBVztBQUNoRSxpQkFBTyxLQUFLO0FBQUEsWUFDVixTQUFTO0FBQUEsWUFDVCxPQUFPLGFBQWUsTUFBTSxNQUFjLFNBQVNoQyxLQUFJLEtBQU07QUFBQSxXQUM5RDtBQUNEO0FBQUE7QUFHRixrQkFBVSxTQUFTLEtBQUs7QUFBQSxVQUN0QixHQUFHO0FBQUEsVUFDSCxVQUFVLENBQUM7QUFBQSxZQUNULE1BQU07QUFBQSxZQUNOLE1BQU0sYUFBYSxPQUFPLE1BQU0sS0FBSyxDQUFDO0FBQUEsVUFDdkM7QUFBQSxTQUNGO0FBQ0Q7QUFBQTtBQUtJLDhCQUFrQixpQkFBaUIsS0FBSztBQUM5QyxVQUFJLGlCQUFpQjtBQUNULDJCQUFTLEtBQUssU0FBUztBQUNqQyxtQkFBVyxXQUFXLEtBQTBCO0FBQ2hEO0FBQUE7QUFHRixhQUFPLEtBQUs7QUFBQSxRQUNWLFNBQVM7QUFBQSxRQUNULE9BQU8sYUFBYyxNQUFNLE1BQWMsU0FBU0EsS0FBSSxLQUFLO0FBQUEsT0FDNUQ7QUFBQTtBQUFBLEVBRUw7QUFFQSxRQUFNLFdBQTZCLEVBQUUsTUFBTSxRQUFRLE1BQU0sV0FBVztBQUU1RCxpQkFBTyxRQUFRLFFBQVE7QUFDL0IsTUFBSSxPQUFPO0FBQ0YsYUFBRSxRQUFRLFNBQVM7QUFFNUIsTUFBSSxFQUFFLFFBQVEsb0JBQW9CLEtBQUssVUFBVTtBQUMvQyxXQUFPLEtBQUs7QUFBQSxNQUNWLFNBQVM7QUFBQSxNQUNULE9BQU8sUUFBUSxXQUFXLGFBQWEsUUFBUSxTQUFVLEtBQUssSUFBSSxDQUFDLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBSyxLQUFFLE1BQU0sR0FBRyxLQUFLLEVBQUc7QUFBQSxLQUM1RztBQUFBO0FBRUgsTUFBSSxPQUFPO0FBQ0YsYUFBRSxRQUFRLFNBQVM7QUFFakIsdUJBQVUsUUFBUSxRQUE2QjtBQUMxRCxNQUFJLE9BQU87QUFDRixhQUFFLFFBQVEsVUFBVSxjQUFjO0FBRXZDLHNCQUFTLGFBQVQsbUJBQW1CLFlBQVcsTUFBTSxDQUFDLFNBQVMsaUJBQWlCLFNBQVMsa0JBQWtCO0FBQ3JGLGFBQUUsVUFBVSxTQUFTLFNBQVMsQ0FBQyxHQUFHLFFBQVEsR0FBRztBQUN0RCxTQUFPLEVBQUUsVUFBVSxRQUFRLEdBQUc7QUFDaEM7QUFFQSxNQUFNLGdCQUFzQyxFQUFFLE1BQU0sUUFBUSxNQUFNLFdBQVc7QUFFN0UsU0FBUyxvQkFBb0IsTUFBYztBQUVsQyxjQUFLLFFBQVEsbUJBQW1CLEVBQUUsRUFBRSxRQUFRLGdCQUFnQixHQUFHLEVBQUUsS0FBSztBQUMvRTtBQUVPLFNBQVMsYUFBYSxPQUFtQztBQUN2RCxlQUFNLFdBQVcsR0FBRyxLQUFLLE1BQU0sU0FBUyxHQUFHLEtBQUssTUFBTSxTQUFTLElBQUksRUFBRSxTQUFTLE1BQU0sTUFBTSxHQUFHLEVBQUUsRUFBRSxJQUFJLG9CQUFvQixLQUFLO0FBQ3ZJO0FBRU8sTUFBTSxVQUFVO0FBQUEsRUFNckIsT0FBTyxNQUFNLE1BQWdDLFNBQXlCLFFBQXdEO0FBQ3hIO0FBQ0YsYUFBTyxJQUFJLFVBQVUsS0FBSyxPQUFPLE9BQU8sRUFBRSxPQUFPO0FBQUEsYUFDMUMsR0FBRztBQUNWLFVBQUksYUFBYSxhQUFhO0FBQzVCLGNBQU0sVUFBVSxRQUFRLGlCQUFpQixRQUFRLEVBQUUsVUFBVSxFQUFFLFVBQVUsVUFBVSxLQUFLLFFBQVEsT0FBTyxJQUFJLE9BQU8sRUFBRSxHQUFHLElBQUk7QUFDM0gsZUFBTyxLQUFLO0FBQUEsVUFDVjtBQUFBLFVBQ0EsT0FBTyxDQUFDLFFBQVEsWUFBYSxRQUFRLEtBQUssTUFBTyxDQUFDLENBQUMsR0FBRyxRQUFRLFlBQWEsUUFBUSxLQUFLLE1BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDO0FBQUEsU0FDM0c7QUFDTTtBQUFBO0FBRUg7QUFBQTtBQUFBLEVBQ1I7QUFBQSxFQUdGLFlBQVksT0FBZSxTQUF5QjtBQUNsRCxTQUFLLFNBQVM7QUFDZCxTQUFLLE9BQU87QUFDWixTQUFLLFVBQVUsTUFBTTtBQUNyQixTQUFLLFdBQVc7QUFBQTtBQUFBLEVBR1YsUUFBUTtBQUNkLFdBQU8sS0FBSyxPQUFPLEtBQUssSUFBSSxLQUFLO0FBQUE7QUFBQSxFQUczQixRQUFRO0FBQ1YsYUFBSyxPQUFPLEtBQUs7QUFDWixrQkFBSyxPQUFPLEtBQUssTUFBTTtBQUN6QjtBQUFBO0FBQUEsRUFHRCxPQUFPO0FBQ04sZ0JBQUssUUFBUSxLQUFLO0FBQUE7QUFBQSxFQUduQixnQkFBZ0I7QUFDZixZQUFDLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLE9BQU87QUFBQTtBQUFBLEVBR3ZDLGtCQUFrQjtBQUN4QixXQUFPLEtBQUssY0FBYztBQUNuQjtBQUFBO0FBQUEsRUFHRCxnQkFBZ0IsTUFBb0M7QUFDMUQsUUFBSSxLQUFLLEtBQUs7QUFDUCx1QkFBWSwwQ0FBMEMsSUFBSSxFQUFFO0FBQ25FLFVBQU0sUUFBUSxLQUFLO0FBQ1osWUFBQyxLQUFLLEtBQUssS0FBSyxXQUFXLEtBQUssS0FBSyxPQUFPO0FBQzVDO0FBQ1AsV0FBTyxLQUFLLE9BQU8sTUFBTSxPQUFPLEtBQUssSUFBSTtBQUFBO0FBQUEsRUFHbkMsY0FBc0I7QUFDNUIsUUFBSSxTQUFTO0FBQ2IsUUFBSSxVQUFVO0FBQ1AsWUFBQyxLQUFLLFFBQVE7QUFDYixpQkFBSyxLQUFLLE1BQU07QUFDdEIsVUFBSSxTQUFTO0FBQ0Q7QUFDQTtBQUFBLGlCQUNELE9BQU8sTUFBTTtBQUNaO0FBQUEsaUJBQ0QsT0FBTyxLQUFLO0FBQ2Q7QUFBQSxhQUNGO0FBQ0s7QUFBQTtBQUFBLElBQ1o7QUFFRixTQUFLLFlBQVkscUJBQXFCO0FBQUE7QUFBQSxFQUdoQyxZQUFZLFNBQWlCLFNBQWlCLEdBQVU7QUFDOUQsVUFBTSxJQUFJLFlBQVksU0FBUyxVQUFVLEtBQUssSUFBSTtBQUFBO0FBQUEsRUFHNUMsYUFBd0I7QUFDOUIsUUFBSSxTQUFTO0FBQ2IsUUFBSSxVQUFVO0FBQ2QsUUFBSSxjQUFjO0FBQ1gsWUFBQyxLQUFLLFFBQVE7QUFDYixpQkFBSyxLQUFLLE1BQU07QUFDdEIsVUFBSSxTQUFTO0FBQ0Q7QUFDQTtBQUFBLGlCQUNELE9BQU8sTUFBTTtBQUNaO0FBQ0E7QUFBQSxNQUNELGtCQUFPLE9BQU8sQ0FBQyxhQUFhO0FBQzlCLGlCQUFFLFNBQVMsT0FBTztBQUFBLGlCQUNoQixPQUFPLEtBQUs7QUFDUDtBQUNKO0FBQUEsaUJBQ0QsT0FBTyxPQUFPLGFBQWE7QUFDMUI7QUFDSTtBQUFBLGFBQ1Q7QUFDSztBQUFBO0FBQUEsSUFDWjtBQUVGLFNBQUssWUFBWSxvQkFBb0I7QUFBQTtBQUFBLEVBRy9CLHFCQUFnRDtBQUNoRCxlQUFLLEtBQUssTUFBTTtBQUN0QixRQUFJLE9BQU8sS0FBSztBQUNkLFdBQUssTUFBTTtBQUNKLGlDQUFvQixLQUFLLGFBQWE7QUFBQTtBQUcvQyxRQUFJLE9BQU8sS0FBSztBQUNkLFdBQUssTUFBTTtBQUNYLGFBQU8sS0FBSyxXQUFXO0FBQUE7QUFHbEI7QUFBQTtBQUFBLEVBR0QsZ0JBQWdCLFFBQThCO0FBQ3BELFFBQUksV0FBVyxLQUFLO0FBQ3BCLFdBQU8sTUFBTTtBQUNYLFdBQUssZ0JBQWdCO0FBQ2pCLGVBQUssTUFBTSxNQUFNLEtBQUs7QUFDeEIsYUFBSyxNQUFNO0FBQ1gsYUFBSyxnQkFBZ0I7QUFDckIsbUJBQVcsS0FBSztBQUNWLHlCQUFXLEtBQUssZ0JBQWdCLFdBQVc7QUFDakQsYUFBSyxnQkFBZ0I7QUFDckIsWUFBSSxZQUFZO0FBQ1osaUJBQUssTUFBTSxNQUFNLEtBQUs7QUFDeEIsZUFBSyxNQUFNO0FBQ1gsZUFBSyxnQkFBZ0I7QUFDckIscUJBQVcsS0FBSztBQUNULHNCQUFLLE1BQU0sTUFBTSxPQUFPLENBQUMsS0FBSyxjQUFjLEtBQUssQ0FBQyxLQUFLLEtBQUs7QUFDakUseUJBQWEsS0FBSyxNQUFNO0FBQUE7QUFFNUIsYUFBSyxnQkFBZ0I7QUFDakIsaUJBQUssWUFBWTtBQUNuQixlQUFLLFlBQVksWUFBWTtBQUUvQixhQUFLLE1BQU07QUFDWCxhQUFLLGdCQUFnQixRQUFRLFVBQVUsYUFBYSxRQUFRLFFBQVE7QUFBQSxhQUMvRDtBQUNMO0FBQUE7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBR0YsU0FBK0I7QUFDN0IsU0FBSyxnQkFBZ0I7QUFFZixpQkFBTyxLQUFLLGdCQUFnQixNQUFNO0FBQ3hDLFNBQUssZ0JBQWdCO0FBQ2YsaUJBQU8sS0FBSyx3QkFBd0I7QUFDMUMsVUFBTSxTQUErQixFQUFFLE1BQU0sUUFBUSxNQUFNLEtBQUs7QUFDaEUsU0FBSyxnQkFBZ0IsTUFBTTtBQUMzQixTQUFLLGdCQUFnQjtBQUNqQixTQUFDLEtBQUssS0FBSztBQUNiLFdBQUssWUFBWSxrQkFBa0I7QUFDOUI7QUFBQTtBQUFBLEVBR0QsZ0JBQWdCLE1BQTRCLEtBQWEsT0FBZSxVQUFrQjtBQUNoRyxRQUFJLFFBQVEsV0FBVztBQUNoQixtQkFBUSxVQUFVLFVBQVUsVUFBVSxXQUFXLFVBQVUsU0FBUyw2REFBOEQsUUFBUTtBQUMvSSxXQUFLLFVBQVUsVUFBVSxTQUFTLE9BQU8sVUFBVSxVQUFVLFFBQVE7QUFDckU7QUFBQTtBQUVGLFFBQUksUUFBUSxZQUFZO0FBQ3RCLFdBQUssUUFBUSxVQUFVLFVBQVUsVUFBVSxTQUFTLG1EQUFtRCxRQUFRO0FBQy9HLFdBQUssV0FBVyxVQUFVO0FBQzFCO0FBQUE7QUFFRixRQUFJLFFBQVEsWUFBWTtBQUN0QixXQUFLLFFBQVEsVUFBVSxVQUFVLFVBQVUsU0FBUyxtREFBbUQsUUFBUTtBQUMvRyxXQUFLLFdBQVcsVUFBVTtBQUMxQjtBQUFBO0FBRUYsUUFBSSxRQUFRLFVBQVU7QUFDcEIsV0FBSyxRQUFRLFVBQVUsVUFBVSxVQUFVLFNBQVMsaURBQWlELFFBQVE7QUFDN0csV0FBSyxTQUFTLFVBQVU7QUFDeEI7QUFBQTtBQUVGLFFBQUksUUFBUSxTQUFTO0FBQ2QsbUJBQVEsQ0FBQyxNQUFNLE9BQU8sS0FBSyxDQUFDLEdBQUcsK0NBQStDLFFBQVE7QUFDdEYsbUJBQVEsT0FBTyxLQUFLO0FBQ3pCO0FBQUE7QUFFRixRQUFJLFFBQVEsV0FBVztBQUNoQixtQkFBUSxVQUFVLFVBQVUsVUFBVSxXQUFXLFVBQVUsU0FBUyw2REFBNkQsUUFBUTtBQUM5SSxXQUFLLFVBQVUsVUFBVSxTQUFTLE9BQU8sVUFBVSxVQUFVLFFBQVE7QUFDckU7QUFBQTtBQUVGLFFBQUksUUFBUSxZQUFZO0FBQ3RCLFdBQUssUUFBUSxVQUFVLFVBQVUsVUFBVSxTQUFTLG1EQUFtRCxRQUFRO0FBQy9HLFdBQUssV0FBVyxVQUFVO0FBQzFCO0FBQUE7QUFFRixTQUFLLFFBQVEsT0FBTywwQkFBMEIsR0FBRyxLQUFLLFFBQVE7QUFBQTtBQUFBLEVBR3hELFFBQVEsT0FBWSxTQUFpQixVQUFpQztBQUM1RSxRQUFJLENBQUM7QUFDRSx1QkFBWSxXQUFXLG1CQUFtQixRQUFRO0FBQUE7QUFFN0Q7QUFFTyxNQUFNLG9CQUFvQixNQUFNO0FBQUEsRUFHckMsWUFBWSxTQUFpQixLQUFhO0FBQ3hDLFVBQU0sT0FBTztBQUNiLFNBQUssTUFBTTtBQUFBO0FBRWY7QUN2Y08sTUFBTSxTQUF5RCxDQUFDO0FBQUEsRUFDckU7QUFBQSxFQUNBLE9BQU87QUFBQSxFQUNQO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNGLE1BQU07QUFDRSxvQkFBWXBELGFBQU0sT0FBMEIsSUFBSTtBQUd0RCxRQUFNLENBQUMsR0FBRyw2QkFBNkIsSUFBSUQsc0JBQWUsQ0FBQztBQUUzRCxNQUFJLFFBQXlDO0FBRTdDLE1BQUksaUNBQVEsU0FBUztBQUNiLG1CQUFTLE9BQU8sUUFBUSxzQkFBc0I7QUFFNUM7QUFBQSxNQUNOLFVBQVU7QUFBQSxNQUNWLFFBQVE7QUFBQSxNQUNSLEtBQUssT0FBTyxVQUFVLGtCQUFrQjtBQUFBLE1BQ3hDLE1BQU0sa0JBQWtCLFFBQVEsU0FBUyxDQUFDO0FBQUEsTUFDMUM7QUFBQSxNQUNBLFFBQVE7QUFBQSxNQUNSLEdBQUc7QUFBQSxJQUNMO0FBQUE7QUFHRkUseUJBQWdCLE1BQU07QUFDZCxvQkFBVSxDQUFDLFVBQXNCO0FBQ3JDLFVBQUksQ0FBQyxVQUFVLFdBQVcsRUFBRSxNQUFNLGtCQUFrQjtBQUNsRDtBQUVGLFVBQUksQ0FBQyxVQUFVLFFBQVEsU0FBUyxNQUFNLE1BQU07QUFDM0I7QUFBQSxJQUNuQjtBQUVNLHNCQUFZLENBQUMsVUFBeUI7QUFDMUMsVUFBSSxNQUFNLFFBQVE7QUFDRDtBQUFBLElBQ25CO0FBRUEsUUFBSSxNQUFNO0FBQ0MsZ0NBQWlCLGFBQWEsT0FBTztBQUNyQyxnQ0FBaUIsV0FBVyxTQUFTO0FBRTlDLGFBQU8sTUFBTTtBQUNGLHFDQUFvQixhQUFhLE9BQU87QUFDeEMscUNBQW9CLFdBQVcsU0FBUztBQUFBLE1BQ25EO0FBQUE7QUFHRixXQUFPLE1BQU07QUFBQSxJQUFDO0FBQUEsS0FDYixDQUFDLE1BQU0sWUFBWSxDQUFDO0FBRXZCQSx5QkFBZ0IsTUFBTTtBQUNwQixVQUFNLFdBQVcsTUFBTSw4QkFBOEIsV0FBUyxRQUFRLENBQUM7QUFFaEUsNEJBQWlCLFVBQVUsUUFBUTtBQUUxQyxXQUFPLE1BQU07QUFDSixpQ0FBb0IsVUFBVSxRQUFRO0FBQUEsSUFDL0M7QUFBQSxFQUNGLEdBQUcsRUFBRTtBQUVMQywrQkFBc0IsTUFBTTtBQUMxQixRQUFJLENBQUMsVUFBVTtBQUNiO0FBRUYsUUFBSSxNQUFNO0FBQ0o7QUFDRixrQkFBVSxRQUFRLFVBQVU7QUFBQTtBQUU1QixrQkFBVSxRQUFRLEtBQUs7QUFBQSxXQUNwQjtBQUNMLGdCQUFVLFFBQVEsTUFBTTtBQUFBO0FBQUEsRUFDMUIsR0FDQyxDQUFDLE1BQU0sT0FBTyxDQUFDO0FBR2hCLFNBQUFDLHNDQUFDLFlBQU8sS0FBSyxXQUFXLE9BQWMsV0FBc0IsZUFBYSxZQUN0RSxVQUNIO0FBRUo7QUFFQSxNQUFNLG9CQUFvQixDQUFDLFFBQWlCLFVBQTBCO0FBQ3BFLFFBQU0saUJBQWlCLCtCQUErQixRQUFRLE9BQU8sTUFBTTtBQUUzRSxNQUFJLGVBQWU7QUFDakIsV0FBTyxlQUFlO0FBRXhCLFFBQU0sa0JBQWtCO0FBQUEsSUFDcEI7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLEVBQ0o7QUFFQSxNQUFJLGdCQUFnQjtBQUNsQixXQUFPLGdCQUFnQjtBQUV6QixTQUFPLGVBQWU7QUFDeEI7QUFFQSxNQUFNLGlDQUFpQyxDQUNyQyxRQUNBLE9BQ0EsY0FJRztBQUNHLGtCQUFVLFNBQVMsZ0JBQWdCO0FBRXpDLE1BQUksY0FBYyxRQUFRO0FBQ3hCLFVBQU0sUUFBUSxPQUFPO0FBRWQ7QUFBQSxNQUNMO0FBQUEsTUFDQSxVQUFVLFFBQVEsU0FBUztBQUFBLElBQzdCO0FBQUEsU0FDSztBQUNDLGtCQUFRLE9BQU8sUUFBUTtBQUV0QjtBQUFBLE1BQ0w7QUFBQSxNQUNBLFVBQVUsT0FBTyxRQUFRLFNBQVM7QUFBQSxJQUNwQztBQUFBO0FBRUo7QUM1SE8sTUFBTSxXQUFvQyxDQUFDO0FBQUEsRUFDaEQ7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFDRixNQUFNO0FBQ0osUUFBTSxDQUFDLGdCQUFnQixpQkFBaUIsSUFBSUosc0JBQW1DO0FBQy9FLFFBQU0sQ0FBQyxhQUFhLGNBQWMsSUFBSSxXQUFtQix5QkFBeUIsS0FBSztBQUN2RixRQUFNLENBQUMsY0FBYyxlQUFlLElBQUlBLHNCQUFtQztBQUMzRSxRQUFNLENBQUMsb0JBQW9CLHFCQUFxQixJQUFJQSxzQkFBa0M7QUFDdEYsUUFBTSxDQUFDLGNBQWMsZUFBZSxJQUFJQSxzQkFBZSxLQUFLO0FBQzVELFFBQU0sQ0FBQyxVQUFVLFdBQVcsSUFBSSxtQkFBbUI7QUFDbkQsUUFBTSxDQUFDLFlBQVksYUFBYSxJQUFJLFdBQW9CLGNBQWMsS0FBSztBQUNyRSw0QkFBb0JDLGFBQU0sT0FBMEIsSUFBSTtBQUN2RCxrQ0FBeUIsQ0FBb0IsdUNBQWtCLGdCQUFnQjtBQUV0RkMseUJBQWdCLE1BQU07QUFDYixvQkFBUyxFQUFFLE9BQU8saUJBQWlCLFFBQVEsRUFBRSxjQUFjO0FBQUEsS0FDakUsQ0FBQyxVQUFVLENBQUM7QUFFVCxpQkFBU29GLHFCQUFjLE1BQU07QUFDakMsVUFBTUMsVUFBUyxRQUFRLEtBQUssQ0FBSyxRQUFFLE9BQU8sY0FBYztBQUN4RCxXQUFPQSxXQUFVLFlBQVk7QUFBQSxLQUM1QixDQUFDLFNBQVMsY0FBYyxDQUFDO0FBRTVCLFFBQU0sQ0FBQyxTQUFTLFVBQVUsSUFBSXZGLHNCQUFlLEVBQUU7QUFDeEMsbUNBQTBCLENBQUMsYUFBMEIsZ0JBQTBCO0FBQ3BGLFVBQU0sV0FBVyxPQUFPO0FBQ3hCLGVBQVcsVUFBVSxVQUFVLFlBQVksUUFBUSxDQUFDO0FBQ3BELG9CQUFnQixZQUFZLFlBQVk7QUFDeEMsMEJBQXNCLEVBQUU7QUFDcEIsdUJBQWUsZ0JBQWdCLGFBQWEsZ0JBQWdCO0FBQzlELHFCQUFlLFNBQVM7QUFFdEIsaUJBQVMsZ0JBQWdCLGdCQUFnQixPQUFRO0FBQUEsU0FFOUM7QUFDTCxhQUFPLFNBQVMsRUFBRSxPQUFPLFdBQVcsUUFBUSxFQUFFLE1BQU0sU0FBUyxlQUFlLFlBQVksWUFBWSxHQUFHLEVBQUUsTUFBTSxNQUFNO0FBQUEsT0FBRztBQUFBO0FBQUEsRUFFNUg7QUFFTSx5QkFBaUJDLGFBQU0sT0FBdUIsSUFBSTtBQUN4REUsK0JBQXNCLE1BQU07O0FBQzFCLHlCQUFlLFlBQWYsbUJBQXdCLGVBQWUsRUFBRSxPQUFPLFVBQVUsUUFBUTtFQUFXLEdBQzVFLENBQUMsY0FBYyxDQUFDO0FBR25CQSwrQkFBc0IsTUFBTTtBQUNwQiwwQkFBZ0IsQ0FBQyxVQUF5QjtBQUM5QyxjQUFRLE1BQU0sS0FBSztBQUFBLFFBQ2pCLEtBQUs7QUFDSCxnQkFBTSxlQUFlO0FBQ2pCO0FBQ0YsbUJBQU8sU0FBUyxFQUFFLE9BQU8sVUFBVTtBQUFBO0FBRW5DLG1CQUFPLFNBQVMsRUFBRSxPQUFPLFNBQVM7QUFDcEM7QUFBQSxRQUNGLEtBQUs7QUFDSCxnQkFBTSxlQUFlO0FBQ2pCO0FBQ0YsbUJBQU8sU0FBUyxFQUFFLE9BQU8sUUFBUTtBQUNuQztBQUFBO0FBQUEsSUFFTjtBQUNTLDhCQUFpQixXQUFXLGFBQWE7QUFDbEQsV0FBTyxNQUFNLFNBQVMsb0JBQW9CLFdBQVcsYUFBYTtBQUFBLEtBQ2pFLENBQUMsTUFBTSxDQUFDO0FBRVgsUUFBTSxpQkFBaUJxRix5QkFBa0IsQ0FBQyxhQUFxQjtBQUN6RCxpQkFBUyxVQUFVLFNBQVM7QUFDdkIsc0JBQVMsRUFBRSxPQUFPLFdBQVcsUUFBUSxFQUFFLE1BQU0sVUFBVSxHQUFHO0FBQ25FLGVBQVcsUUFBUTtBQUNaLG9CQUFTLEVBQUUsT0FBTyxzQkFBc0IsUUFBUSxFQUFFLFlBQVk7QUFBQSxLQUNwRSxDQUFDLElBQUksQ0FBQztBQUVULFFBQU0scUJBQXFCQSx5QkFBa0IsQ0FBQ0Msa0JBQXlCO0FBQ2pFLGlCQUFTLFVBQVUsU0FBUztBQUN2QixzQkFBUyxFQUFFLE9BQU8sV0FBVyxRQUFRLEVBQUUsTUFBTSxVQUFVLEdBQUc7QUFDN0QsWUFBRSxVQUFVLFdBQVcsa0JBQWtCQyxNQUFNRCxlQUFjLEVBQUUsY0FBYyxPQUFPO0FBQ3BGLHVCQUFhLE9BQU8sSUFBSSxDQUFTO0FBQ3JDLFlBQU0sWUFBNkI7QUFBQSxRQUNqQyxTQUFTLE1BQU07QUFBQSxRQUNmLE1BQU0sTUFBTSxNQUFNLENBQUMsRUFBRTtBQUFBLFFBQ3JCLFFBQVEsTUFBTSxNQUFNLENBQUMsRUFBRTtBQUFBLFFBQ3ZCLE1BQU07QUFBQSxNQUNSO0FBQ087QUFBQSxLQUNSO0FBQ0QsMEJBQXNCLFVBQVU7QUFDaEMsb0JBQWdCQSxhQUFZO0FBQzVCLFFBQUksQ0FBQyxPQUFPO0FBQ0gsc0JBQVMsRUFBRSxPQUFPLHNCQUFzQixRQUFRLEVBQUUsY0FBYyxTQUFTLEdBQUc7QUFBQSxLQUNwRixDQUFDLElBQUksQ0FBQztBQUVGLFNBQUFwRixrQ0FBQSxLQUFDLE9BQUksYUFBVSxZQUNwQjtBQUFBLElBQUFBLHVDQUFDLFNBQ0M7QUFBQSxNQUFBRCxrQ0FBQSxJQUFDLGVBQWMsUUFBSyx1QkFBc0IsT0FBTSxVQUFTLFNBQVMsU0FBUyxlQUFlLFNBQVMsMEJBQTBCLFNBQVMsbUJBQW1CLFNBQVMsdUJBQXVCLFNBQVMsTUFBTTtBQUN0TSxlQUFPLFNBQVMsRUFBRSxPQUFPLFdBQVcsUUFBUSxFQUFFLE1BQU0sU0FBUyxVQUFVLFNBQVMsYUFBYSxTQUFTLGVBQWUsY0FBYyxhQUFhO0FBQUEsU0FDL0ksVUFBTTtBQUFBLDRDQUNSLGtCQUFpQjtBQUFBLE1BQ2pCQSxzQ0FBQSxpQkFBYyxNQUFLLFdBQVUsT0FBTSxnQkFBZSxTQUFTLFNBQVMsZ0JBQWdCLFNBQVMsd0JBQXdCLFNBQVMsTUFBTTtBQUNuSSxjQUFNLFVBQVU7QUFBQSxVQUNkLGNBQWM7QUFBQSxVQUNkLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLHdCQUF3QjtBQUFBLFVBQ3hCLGlCQUFpQjtBQUFBLFVBQ2pCLHVCQUF1QjtBQUFBLFVBQ3ZCLGtCQUFrQjtBQUFBLFVBQ2xCLHFCQUFxQjtBQUFBLFVBQ3JCLElBQUk7QUFDTixlQUFPLFNBQVMsRUFBRSxPQUFPLFdBQVcsUUFBUSxFQUFFLE1BQU0sV0FBVyxFQUFFLE1BQU0sTUFBTTtBQUFBLFNBQUc7QUFBQSxTQUMvRTtBQUFBLDRDQUNGLGVBQWMsUUFBSyxPQUFNLE9BQU0scUJBQW9CLFNBQVMsU0FBUyx1QkFBdUIsVUFBVSxTQUFTLFVBQVUsU0FBUyxhQUFhLFNBQVMsY0FBYyxTQUFTLE1BQU07QUFDcEwsZUFBTyxTQUFTLEVBQUUsT0FBTyxXQUFXLFFBQVEsRUFBRSxNQUFNLFNBQVMsd0JBQXdCLGNBQWMsc0JBQXNCLEdBQUc7QUFBQSxTQUMzSDtBQUFBLDRDQUNGLGVBQWMsUUFBSyxjQUFhLE9BQU0sZUFBYyxTQUFTLFNBQVMsaUJBQWlCLFVBQVUsU0FBUyxVQUFVLFNBQVMsYUFBYSxTQUFTLGNBQWMsU0FBUyxNQUFNO0FBQy9LLGVBQU8sU0FBUyxFQUFFLE9BQU8sV0FBVyxRQUFRLEVBQUUsTUFBTSxTQUFTLGtCQUFrQixjQUFjLGdCQUFnQixHQUFHO0FBQUEsU0FDL0c7QUFBQSw0Q0FDRixlQUFjLFFBQUssbUJBQWtCLE9BQU0sZ0JBQWUsU0FBUyxTQUFTLGtCQUFrQixVQUFVLFNBQVMsVUFBVSxTQUFTLGFBQWEsU0FBUyxjQUFjLFNBQVMsTUFBTTtBQUN0TCxlQUFPLFNBQVMsRUFBRSxPQUFPLFdBQVcsUUFBUSxFQUFFLE1BQU0sU0FBUyxtQkFBbUIsY0FBYyxpQkFBaUIsR0FBRztBQUFBLFNBQ2pIO0FBQUEsNENBQ0YsZUFBYyxRQUFLLFFBQU8sT0FBTSxtQkFBa0IsU0FBUyxTQUFTLHFCQUFxQixVQUFVLFNBQVMsVUFBVSxTQUFTLGFBQWEsU0FBUyxjQUFjLFNBQVMsTUFBTTtBQUNqTCxlQUFPLFNBQVMsRUFBRSxPQUFPLFdBQVcsUUFBUSxFQUFFLE1BQU0sU0FBUyxzQkFBc0IsY0FBYyxvQkFBb0IsR0FBRztBQUFBLFNBQ3ZIO0FBQUEsNENBQ0Ysa0JBQWlCO0FBQUEsTUFDakJBLHNDQUFBLGlCQUFjLE1BQUssU0FBUSxPQUFNLFFBQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxPQUFPLE1BQU0sU0FBUyxNQUFNO0FBQ3pGLGFBQUssT0FBTyxJQUFJO0FBQUEsU0FDZjtBQUFBLE1BQ0ZBLHNDQUFBLGlCQUFjLE1BQUssa0JBQWlCLE9BQU0sZUFBYyxXQUFVLFVBQVMsVUFBVSxDQUFDLFFBQVEsU0FBUyxNQUFNO0FBQzVHLGVBQU8sU0FBUyxFQUFFLE9BQU8sVUFBVTtBQUFBLFNBQ2xDO0FBQUEsTUFDSEEsc0NBQUMsZUFBYyxRQUFLLGVBQWMsT0FBTSxjQUFhLFdBQVUsU0FBUSxVQUFVLFFBQVEsU0FBUyxNQUFNO0FBQ3RHLGVBQU8sU0FBUyxFQUFFLE9BQU8sU0FBUztBQUFBLFNBQ2pDO0FBQUEsTUFDRkEsc0NBQUEsaUJBQWMsTUFBSyxtQkFBa0IsT0FBTSxtQkFBa0IsV0FBVSxhQUFZLFVBQVUsQ0FBQyxRQUFRLFNBQVMsTUFBTTtBQUNwSCxlQUFPLFNBQVMsRUFBRSxPQUFPLFFBQVE7QUFBQSxTQUNoQztBQUFBLDRDQUNGLE9BQUksU0FBTyxFQUFFLE1BQU0sVUFBVTtBQUFBLE1BQzlCQSxzQ0FBQyxTQUFJLFVBQU87QUFBQSw0Q0FDWCxlQUFjLFVBQVEsT0FBTyxJQUFJLFNBQWtCLFdBQVcsQ0FBVTtBQUN2RSwwQkFBa0IsTUFBTTtBQUNqQix3QkFBUyxFQUFFLE9BQU8sZUFBZSxRQUFRLEVBQUUsVUFBVTtBQUFBLFNBQzNEO0FBQUEsTUFDRkEsc0NBQUEsaUJBQWMsTUFBSyxhQUFZLE9BQU0sU0FBUSxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sTUFBTSxTQUFTLE1BQU07QUFDOUYsZUFBTyxTQUFTLEVBQUUsT0FBTyxTQUFTO0FBQUEsU0FDakM7QUFBQSxNQUNIQSxrQ0FBQTtBQUFBLFFBQUM7QUFBQTtBQUFBLFVBQ0MsS0FBSztBQUFBLFVBQ0wsTUFBSztBQUFBLFVBQ0wsT0FBTTtBQUFBLFVBQ04sU0FBUyxNQUFNLGdCQUFnQixhQUFXLENBQUMsT0FBTztBQUFBO0FBQUEsTUFDcEQ7QUFBQSxNQUNBQyxrQ0FBQTtBQUFBLFFBQUM7QUFBQTtBQUFBLFVBQ0MsT0FBTyxFQUFFLFNBQVMsVUFBVTtBQUFBLFVBQzVCLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLGdCQUFnQjtBQUFBLFVBQ2hCLGNBQWMsTUFBTSxnQkFBZ0IsS0FBSztBQUFBLFVBQ3pDLFFBQVE7QUFBQSxVQUNSLFlBQVc7QUFBQSxVQUVYO0FBQUEsWUFBQ0EsdUNBQUEsU0FBNEIsV0FBVSxXQUNyQztBQUFBLGNBQUFELHNDQUFDLFNBQU0sUUFBSyxZQUFXLElBQUcscUJBQW9CLFNBQVMsVUFBVSxVQUFVLE1BQU0sWUFBWSxDQUFDLFFBQVEsRUFBRztBQUFBLGNBQ3hHQSxrQ0FBQSxlQUFNLFNBQVEscUJBQW9CLFVBQVM7QUFBQSxpQkFGckMsbUJBR1Q7QUFBQSxZQUNDQyxrQ0FBQSxjQUE4QixXQUFVLFdBQVUsT0FBTSxxREFDdkQ7QUFBQSxjQUFDRCxzQ0FBQSxXQUFNLE1BQUssWUFBVyxJQUFHLHVCQUFzQixTQUFTLFlBQVksVUFBVSxNQUFNO0FBQzVFLGdDQUFTLEVBQUUsT0FBTyxpQkFBaUIsUUFBUSxFQUFFLFlBQVksQ0FBQyxXQUFXLEdBQUc7QUFDL0UsOEJBQWMsQ0FBQyxVQUFVO0FBQUEsaUJBQ3hCO0FBQUEsY0FDRkEsa0NBQUEsZUFBTSxTQUFRLHVCQUFzQixVQUFtQjtBQUFBLGlCQUxqRCxxQkFNVDtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQ0YsR0FDRjtBQUFBLElBQ0FBLGtDQUFBO0FBQUEsTUFBQztBQUFBO0FBQUEsUUFDQyxhQUFhO0FBQUEsUUFDYixNQUFPQSxzQ0FBQSxxQkFBa0IsTUFBTSxPQUFPLE1BQU0sYUFBYSxPQUFPLFVBQVUsV0FBVyxPQUFPLFdBQVcsWUFBWSxPQUFPLFlBQVksVUFBVSxNQUFNLGFBQWEsTUFBTTtBQUFBLFFBQ3pLLFNBQVNBLGtDQUFBO0FBQUEsVUFBQztBQUFBO0FBQUEsWUFDUixjQUFjLGdCQUFnQixhQUFhLGdCQUFnQixTQUFTLENBQUVBLGtDQUFBLHFCQUFzQixNQUFLLFNBQVEsT0FBTSxRQUFPLFNBQVMsTUFBTSxNQUFNLGdCQUFnQixZQUFZLFVBQVUsaUJBQWlCLEVBQUUsRUFBM0csSUFBOEcsQ0FBRSxJQUFJLENBQUM7QUFBQSxZQUM5TSxNQUFNO0FBQUEsY0FDSjtBQUFBLGdCQUNFLElBQUk7QUFBQSxnQkFDSixPQUFPO0FBQUEsZ0JBQ1AsUUFBUSxNQUFNQSxzQ0FBQyxtQkFBa0IsUUFBTSxTQUFTLGFBQVksMkJBQTBCLGFBQWEsT0FBTyxVQUFVLGVBQWUsTUFBTSxVQUFVLGdCQUFnQixXQUFXLEtBQU07QUFBQSxjQUN0TDtBQUFBLGNBQ0E7QUFBQSxnQkFDRSxJQUFJO0FBQUEsZ0JBQ0osT0FBTztBQUFBLGdCQUNQLFFBQVEsTUFBT0Esa0NBQUEsbUJBQVksVUFBVSxPQUFPLFVBQVUsS0FBSyxNQUFNLEtBQUssSUFBSSxPQUFRLEdBQUc7QUFBQSxjQUN2RjtBQUFBLGNBQ0E7QUFBQSxnQkFDRSxJQUFJO0FBQUEsZ0JBQ0osT0FBTztBQUFBLGdCQUNQLFFBQVEsTUFBTUEsc0NBQUMsbUJBQWtCLFFBQU0sZ0JBQWdCLElBQUksYUFBWSwrQkFBOEIsYUFBYSxRQUFRLFVBQVUsb0JBQW9CLFdBQVcsb0JBQW9CLFdBQVcsS0FBTTtBQUFBO0FBQUEsWUFFNU07QUFBQSxZQUNBO0FBQUEsWUFDQTtBQUFBO0FBQUE7QUFBQSxNQUNGO0FBQUE7QUFBQSxFQUNGLEdBQ0Y7QUFDRjtBQy9OYSxhQUFpQixDQUFDLE9BQU87QUFDcEMsUUFBTSxDQUFDLFNBQVMsVUFBVSxJQUFJSixzQkFBeUIsRUFBRTtBQUN6RCxRQUFNLENBQUMsUUFBUSxTQUFTLElBQUlBLHNCQUFlLEtBQUs7QUFDMUMsU0FBQyxLQUFLLE1BQU0sSUFBSUEsc0JBQWUsb0JBQUksS0FBc0I7QUFDL0QsUUFBTSxDQUFDLE1BQU0sT0FBTyxJQUFJQSxzQkFBcUIsTUFBTTtBQUVuREcsK0JBQXNCLE1BQU07QUFDMUIsV0FBTyxvQkFBb0I7QUFDcEIsa0NBQXVCLENBQUFLLGFBQVc7QUFDdkMsaUJBQVdBLFFBQU87QUFDbEIsYUFBTywrQkFBK0JBO0FBQUFBLElBQ3hDO0FBQ0EsV0FBTyx1QkFBdUIsQ0FBTztBQUNuQyxlQUFTLFFBQVEsTUFDYiwwQkFBMEIsR0FBRyxLQUM3QjtBQUFBLElBQ047QUFDQSxXQUFPLHNCQUFzQjtBQUM3QixXQUFPLHVCQUF1QixDQUFZO0FBQ3hDLGFBQU8sQ0FBQW1GLFNBQU87QUFDTix1QkFBUyxJQUFJLElBQXFCQSxJQUFHO0FBQzNDLG1CQUFXLFdBQVcsVUFBVTtBQUM5QixrQkFBUSxTQUFTLENBQUNBLEtBQUksSUFBSSxRQUFRLEVBQUU7QUFDN0IscUJBQUksUUFBUSxJQUFJLE9BQU87QUFBQTtBQUV6QjtBQUFBLE9BQ1I7QUFBQSxJQUNIO0FBQUEsRUFDRixHQUFHLEVBQUU7QUFFTCxTQUFRdkYsc0NBQUEsWUFBUyxTQUFrQixRQUFnQixLQUFVLE1BQVk7QUFDM0U7QUFBQSxDQzlCQyxZQUFZO0FBQ0E7QUFDRndGLDJCQUFXLFNBQVMsY0FBYyxPQUFPLENBQUUsRUFBRSxPQUFReEYsa0NBQUEsWUFBSSxDQUFFO0FBQ3RFLEdBQUciLCJuYW1lcyI6WyJhIiwiYiIsInJlYWN0TW9kdWxlIiwicmVxdWlyZSQkMCIsImpzeFJ1bnRpbWVNb2R1bGUiLCJ2YWx1ZSIsImN1cnJlbnRUaGVtZSIsInNjaGVkdWxlck1vZHVsZSIsInJlcXVpcmUkJDEiLCJkIiwiZSIsImciLCJoIiwiayIsImMiLCJmIiwibCIsIm0iLCJuIiwidCIsInJlYWN0RG9tTW9kdWxlIiwidGV4dCIsIlJlYWN0LnVzZVN0YXRlIiwiUmVhY3QudXNlUmVmIiwiUmVhY3QudXNlRWZmZWN0IiwiUmVhY3QudXNlTGF5b3V0RWZmZWN0IiwianN4IiwianN4cyIsInNpemUiLCJSZWFjdC51c2VJZCIsInNvdXJjZXMiLCJSZWFjdC5mb3J3YXJkUmVmIiwiVG9vbGJhckJ1dHRvbiIsImkiLCJjb2RlcG9pbnQiLCJzdHIiLCJzdHJpbmciLCJjc3MudG9rZW5pemUiLCJjc3MuRU9GVG9rZW4iLCJjc3MuQXRLZXl3b3JkVG9rZW4iLCJjc3MuQmFkU3RyaW5nVG9rZW4iLCJjc3MuQmFkVVJMVG9rZW4iLCJjc3MuQ29sdW1uVG9rZW4iLCJjc3MuQ0RPVG9rZW4iLCJjc3MuQ0RDVG9rZW4iLCJjc3MuU2VtaWNvbG9uVG9rZW4iLCJjc3MuT3BlbkN1cmx5VG9rZW4iLCJjc3MuQ2xvc2VDdXJseVRva2VuIiwiY3NzLlVSTFRva2VuIiwiY3NzLlBlcmNlbnRhZ2VUb2tlbiIsImNzcy5XaGl0ZXNwYWNlVG9rZW4iLCJjc3MuSWRlbnRUb2tlbiIsImNzcy5TdHJpbmdUb2tlbiIsImNzcy5OdW1iZXJUb2tlbiIsImNzcy5Db21tYVRva2VuIiwiY3NzLk9wZW5QYXJlblRva2VuIiwiY3NzLkNsb3NlUGFyZW5Ub2tlbiIsImNzcy5GdW5jdGlvblRva2VuIiwiY3NzLkRlbGltVG9rZW4iLCJyZXN1bHQiLCJjc3MuSGFzaFRva2VuIiwiY3NzLkNvbG9uVG9rZW4iLCJjc3MuT3BlblNxdWFyZVRva2VuIiwiY3NzLkNsb3NlU3F1YXJlVG9rZW4iLCJwYXJ0Iiwic2VsZWN0b3JQYXJ0IiwidmlzaXQiLCJTQ0FMQVIiLCJpc1NjYWxhciIsImlzQ29sbGVjdGlvbiIsIkJSRUFLIiwiU0tJUCIsIlJFTU9WRSIsImNvcHkiLCJyZXMiLCJtYXAiLCJzY2hlbWEiLCJub2RlIiwiZW5kIiwiaXNCbG9jayIsIl9hIiwic3RyaW5naWZ5IiwiY29tbWVudCIsInNlcSIsImZsb2F0TmFOIiwiZmxvYXRFeHAiLCJmbG9hdCIsImludElkZW50aWZ5IiwiaW50UmVzb2x2ZSIsImludFN0cmluZ2lmeSIsImludE9jdCIsImludCIsImludEhleCIsInBhaXJzIiwib21hcCIsInNldCIsInNjaGVtYSQyIiwidGFncyIsIm1lcmdlIiwiY29tcG9zZU5vZGUiLCJjb21wb3NlRW1wdHlOb2RlIiwiaXNNYXAiLCJDTiIsInRhZyIsImNzdCIsImNoIiwic3RhcnQiLCJwYXJzZU9wdGlvbnMiLCJSZWFjdC51c2VNZW1vIiwic291cmNlIiwiUmVhY3QudXNlQ2FsbGJhY2siLCJhcmlhU25hcHNob3QiLCJ5YW1sIiwibG9nIiwiUmVhY3RET00uY3JlYXRlUm9vdCJdLCJpZ25vcmVMaXN0IjpbMCwxLDIsMyw2LDcsOCw5LDEwLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLDYyLDYzLDY0LDY1LDY2LDY3LDY4LDY5LDcwLDcxLDcyLDczLDc0LDc1LDc2LDc3LDc4LDc5LDgwLDgxLDgyLDgzLDg0LDg1LDg2LDg3LDg4LDg5LDkwLDkxLDkyLDkzLDk0XSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIi4uLy4uLy4uLy4uLy4uL3dlYi9zcmMvdWlVdGlscy50cyIsIi4uLy4uLy4uLy4uLy4uL3dlYi9zcmMvdGhlbWUudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwiLi4vLi4vLi4vLi4vLi4vd2ViL3NyYy9hbnNpMmh0bWwudHMiLCIuLi8uLi8uLi8uLi8uLi93ZWIvc3JjL2NvbXBvbmVudHMvY29kZU1pcnJvcldyYXBwZXIudHN4IiwiLi4vLi4vLi4vLi4vLi4vd2ViL3NyYy9jb21wb25lbnRzL3NwbGl0Vmlldy50c3giLCIuLi8uLi8uLi8uLi8uLi93ZWIvc3JjL2NvbXBvbmVudHMvdG9vbGJhci50c3giLCIuLi8uLi8uLi8uLi8uLi93ZWIvc3JjL2NvbXBvbmVudHMvdGFiYmVkUGFuZS50c3giLCIuLi8uLi8uLi8uLi8uLi93ZWIvc3JjL2NvbXBvbmVudHMvc291cmNlQ2hvb3Nlci50c3giLCIuLi8uLi8uLi8uLi8uLi93ZWIvc3JjL2NvbXBvbmVudHMvdG9vbGJhckJ1dHRvbi50c3giLCIuLi8uLi8uLi8uLi9zcmMvdXRpbHMvaXNvbW9ycGhpYy9jc3NUb2tlbml6ZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvdXRpbHMvaXNvbW9ycGhpYy9jc3NQYXJzZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvdXRpbHMvaXNvbW9ycGhpYy9zZWxlY3RvclBhcnNlci50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlscy9pc29tb3JwaGljL3N0cmluZ1V0aWxzLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3V0aWxzL2lzb21vcnBoaWMvbG9jYXRvckdlbmVyYXRvcnMudHMiLCIuLi8uLi8uLi8uLi8uLi9yZWNvcmRlci9zcmMvY2FsbExvZy50c3giLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvaWRlbnRpdHkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvdmlzaXQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2RpcmVjdGl2ZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2FuY2hvcnMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2FwcGx5UmV2aXZlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy90b0pTLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL05vZGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvQWxpYXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvU2NhbGFyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2RvYy9jcmVhdGVOb2RlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL0NvbGxlY3Rpb24uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeUNvbW1lbnQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L2ZvbGRGbG93TGluZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeVN0cmluZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3N0cmluZ2lmeS9zdHJpbmdpZnlQYWlyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2xvZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvbWVyZ2UuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvYWRkUGFpclRvSlNNYXAuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvUGFpci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5Q29sbGVjdGlvbi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy9ZQU1MTWFwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9jb21tb24vbWFwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL1lBTUxTZXEuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9zZXEuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9zdHJpbmcuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9udWxsLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9jb3JlL2Jvb2wuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeU51bWJlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29yZS9mbG9hdC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29yZS9pbnQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvcmUvc2NoZW1hLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9qc29uL3NjaGVtYS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvYmluYXJ5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS9wYWlycy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvb21hcC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvYm9vbC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvZmxvYXQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL2ludC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvc2V0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS90aW1lc3RhbXAuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL3NjaGVtYS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvdGFncy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvU2NoZW1hLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3N0cmluZ2lmeS9zdHJpbmdpZnlEb2N1bWVudC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9kb2MvRG9jdW1lbnQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZXJyb3JzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1wcm9wcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3V0aWwtY29udGFpbnMtbmV3bGluZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3V0aWwtZmxvdy1pbmRlbnQtY2hlY2suanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS91dGlsLW1hcC1pbmNsdWRlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3Jlc29sdmUtYmxvY2stbWFwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1ibG9jay1zZXEuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWVuZC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3Jlc29sdmUtZmxvdy1jb2xsZWN0aW9uLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZS1jb2xsZWN0aW9uLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1ibG9jay1zY2FsYXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWZsb3ctc2NhbGFyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZS1zY2FsYXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS91dGlsLWVtcHR5LXNjYWxhci1wb3NpdGlvbi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2Utbm9kZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2UtZG9jLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvY3N0LXNjYWxhci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9jc3Qtc3RyaW5naWZ5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3BhcnNlL2NzdC12aXNpdC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9jc3QuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvbGV4ZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvbGluZS1jb3VudGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3BhcnNlL3BhcnNlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wdWJsaWMtYXBpLmpzIiwiLi4vLi4vLi4vLi4vc3JjL3V0aWxzL2lzb21vcnBoaWMvYXJpYVNuYXBzaG90LnRzIiwiLi4vLi4vLi4vLi4vLi4vd2ViL3NyYy9jb21wb25lbnRzL2RpYWxvZy50c3giLCIuLi8uLi8uLi8uLi8uLi9yZWNvcmRlci9zcmMvcmVjb3JkZXIudHN4IiwiLi4vLi4vLi4vLi4vLi4vcmVjb3JkZXIvc3JjL21haW4udHN4IiwiLi4vLi4vLi4vLi4vLi4vcmVjb3JkZXIvc3JjL2luZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2Z1bmN0aW9uIFgoKXt0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO31cbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7ZXhwb3J0cy5Qcm9maWxlcj1yO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1HO2V4cG9ydHMuU3RyaWN0TW9kZT1xO2V4cG9ydHMuU3VzcGVuc2U9dztcbmV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztleHBvcnRzLmFjdD1YO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PVg7ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07XG5leHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZURlZmVycmVkVmFsdWUoYSl9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJZD1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlSWQoKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGUpfTtleHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07XG5leHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZHVjZXIoYSxiLGUpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN0YXRlKGEpfTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsYixlKX07ZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjMuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksbT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG49Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxnKXt2YXIgYixkPXt9LGU9bnVsbCxoPW51bGw7dm9pZCAwIT09ZyYmKGU9XCJcIitnKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihoPWEucmVmKTtmb3IoYiBpbiBhKW0uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjprLHR5cGU6YyxrZXk6ZSxyZWY6aCxwcm9wczpkLF9vd25lcjpuLmN1cnJlbnR9fWV4cG9ydHMuRnJhZ21lbnQ9bDtleHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKlxuICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHlwZSB7IEVmZmVjdENhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBSZWNhbGN1bGF0ZXMgdGhlIHZhbHVlIHdoZW4gZGVwZW5kZW5jaWVzIGNoYW5nZS5cbmV4cG9ydCBmdW5jdGlvbiB1c2VBc3luY01lbW88VD4oZm46ICgpID0+IFByb21pc2U8VD4sIGRlcHM6IFJlYWN0LkRlcGVuZGVuY3lMaXN0LCBpbml0aWFsVmFsdWU6IFQsIHJlc2V0VmFsdWU/OiBUKSB7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGU8VD4oaW5pdGlhbFZhbHVlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgY2FuY2VsZWQgPSBmYWxzZTtcbiAgICBpZiAocmVzZXRWYWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgc2V0VmFsdWUocmVzZXRWYWx1ZSk7XG4gICAgZm4oKS50aGVuKHZhbHVlID0+IHtcbiAgICAgIGlmICghY2FuY2VsZWQpXG4gICAgICAgIHNldFZhbHVlKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2FuY2VsZWQgPSB0cnVlO1xuICAgIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgZGVwcyk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gVHJhY2tzIHRoZSBlbGVtZW50IHNpemUgYW5kIHJldHVybnMgaXQncyBjb250ZW50UmVjdCAoYWx3YXlzIGhhcyB4PTAsIHk9MCkuXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVhc3VyZTxUIGV4dGVuZHMgRWxlbWVudD4oKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZjxUIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFttZWFzdXJlLCBzZXRNZWFzdXJlXSA9IFJlYWN0LnVzZVN0YXRlKG5ldyBET01SZWN0KDAsIDAsIDEwLCAxMCkpO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IHJlZi5jdXJyZW50O1xuICAgIGlmICghdGFyZ2V0KVxuICAgICAgcmV0dXJuO1xuXG4gICAgY29uc3QgYm91bmRzID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgc2V0TWVhc3VyZShuZXcgRE9NUmVjdCgwLCAwLCBib3VuZHMud2lkdGgsIGJvdW5kcy5oZWlnaHQpKTtcblxuICAgIGNvbnN0IHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllc1tlbnRyaWVzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGVudHJ5ICYmIGVudHJ5LmNvbnRlbnRSZWN0KVxuICAgICAgICBzZXRNZWFzdXJlKGVudHJ5LmNvbnRlbnRSZWN0KTtcbiAgICB9KTtcbiAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKHRhcmdldCk7XG4gICAgcmV0dXJuICgpID0+IHJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgfSwgW3JlZl0pO1xuICByZXR1cm4gW21lYXN1cmUsIHJlZl0gYXMgY29uc3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtc1RvU3RyaW5nKG1zOiBudW1iZXIpOiBzdHJpbmcge1xuICBpZiAobXMgPCAwIHx8ICFpc0Zpbml0ZShtcykpXG4gICAgcmV0dXJuICctJztcblxuICBpZiAobXMgPT09IDApXG4gICAgcmV0dXJuICcwJztcblxuICBpZiAobXMgPCAxMDAwKVxuICAgIHJldHVybiBtcy50b0ZpeGVkKDApICsgJ21zJztcblxuICBjb25zdCBzZWNvbmRzID0gbXMgLyAxMDAwO1xuICBpZiAoc2Vjb25kcyA8IDYwKVxuICAgIHJldHVybiBzZWNvbmRzLnRvRml4ZWQoMSkgKyAncyc7XG5cbiAgY29uc3QgbWludXRlcyA9IHNlY29uZHMgLyA2MDtcbiAgaWYgKG1pbnV0ZXMgPCA2MClcbiAgICByZXR1cm4gbWludXRlcy50b0ZpeGVkKDEpICsgJ20nO1xuXG4gIGNvbnN0IGhvdXJzID0gbWludXRlcyAvIDYwO1xuICBpZiAoaG91cnMgPCAyNClcbiAgICByZXR1cm4gaG91cnMudG9GaXhlZCgxKSArICdoJztcblxuICBjb25zdCBkYXlzID0gaG91cnMgLyAyNDtcbiAgcmV0dXJuIGRheXMudG9GaXhlZCgxKSArICdkJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9TdHJpbmcoYnl0ZXM6IG51bWJlcik6IHN0cmluZyB7XG4gIGlmIChieXRlcyA8IDAgfHwgIWlzRmluaXRlKGJ5dGVzKSlcbiAgICByZXR1cm4gJy0nO1xuXG4gIGlmIChieXRlcyA9PT0gMClcbiAgICByZXR1cm4gJzAnO1xuXG4gIGlmIChieXRlcyA8IDEwMDApXG4gICAgcmV0dXJuIGJ5dGVzLnRvRml4ZWQoMCk7XG5cbiAgY29uc3Qga2IgPSBieXRlcyAvIDEwMjQ7XG4gIGlmIChrYiA8IDEwMDApXG4gICAgcmV0dXJuIGtiLnRvRml4ZWQoMSkgKyAnSyc7XG5cbiAgY29uc3QgbWIgPSBrYiAvIDEwMjQ7XG4gIGlmIChtYiA8IDEwMDApXG4gICAgcmV0dXJuIG1iLnRvRml4ZWQoMSkgKyAnTSc7XG5cbiAgY29uc3QgZ2IgPSBtYiAvIDEwMjQ7XG4gIHJldHVybiBnYi50b0ZpeGVkKDEpICsgJ0cnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG93ZXJCb3VuZDxTLCBUPihhcnJheTogU1tdLCBvYmplY3Q6IFQsIGNvbXBhcmF0b3I6IChvYmplY3Q6IFQsIGI6IFMpID0+IG51bWJlciwgbGVmdD86IG51bWJlciwgcmlnaHQ/OiBudW1iZXIpOiBudW1iZXIge1xuICBsZXQgbCA9IGxlZnQgfHwgMDtcbiAgbGV0IHIgPSByaWdodCAhPT0gdW5kZWZpbmVkID8gcmlnaHQgOiBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsIDwgcikge1xuICAgIGNvbnN0IG0gPSAobCArIHIpID4+IDE7XG4gICAgaWYgKGNvbXBhcmF0b3Iob2JqZWN0LCBhcnJheVttXSkgPiAwKVxuICAgICAgbCA9IG0gKyAxO1xuICAgIGVsc2VcbiAgICAgIHIgPSBtO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBwZXJCb3VuZDxTLCBUPihhcnJheTogU1tdLCBvYmplY3Q6IFQsIGNvbXBhcmF0b3I6IChvYmplY3Q6IFQsIGI6IFMpID0+IG51bWJlciwgbGVmdD86IG51bWJlciwgcmlnaHQ/OiBudW1iZXIpOiBudW1iZXIge1xuICBsZXQgbCA9IGxlZnQgfHwgMDtcbiAgbGV0IHIgPSByaWdodCAhPT0gdW5kZWZpbmVkID8gcmlnaHQgOiBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsIDwgcikge1xuICAgIGNvbnN0IG0gPSAobCArIHIpID4+IDE7XG4gICAgaWYgKGNvbXBhcmF0b3Iob2JqZWN0LCBhcnJheVttXSkgPj0gMClcbiAgICAgIGwgPSBtICsgMTtcbiAgICBlbHNlXG4gICAgICByID0gbTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkodGV4dDogc3RyaW5nKSB7XG4gIGNvbnN0IHRleHRBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgdGV4dEFyZWEuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICB0ZXh0QXJlYS5zdHlsZS56SW5kZXggPSAnLTEwMDAnO1xuICB0ZXh0QXJlYS52YWx1ZSA9IHRleHQ7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGV4dEFyZWEpO1xuICB0ZXh0QXJlYS5zZWxlY3QoKTtcbiAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcbiAgdGV4dEFyZWEucmVtb3ZlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTZXR0aW5nPFM+KG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCwgZGVmYXVsdFZhbHVlOiBTKTogW1MsIFJlYWN0LkRpc3BhdGNoPFJlYWN0LlNldFN0YXRlQWN0aW9uPFM+Pl0ge1xuICBpZiAobmFtZSlcbiAgICBkZWZhdWx0VmFsdWUgPSBzZXR0aW5ncy5nZXRPYmplY3QobmFtZSwgZGVmYXVsdFZhbHVlKTtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZTxTPihkZWZhdWx0VmFsdWUpO1xuICBjb25zdCBzZXRWYWx1ZVdyYXBwZXIgPSBSZWFjdC51c2VDYWxsYmFjaygodmFsdWU6IFJlYWN0LlNldFN0YXRlQWN0aW9uPFM+KSA9PiB7XG4gICAgaWYgKG5hbWUpXG4gICAgICBzZXR0aW5ncy5zZXRPYmplY3QobmFtZSwgdmFsdWUpO1xuICAgIGVsc2VcbiAgICAgIHNldFZhbHVlKHZhbHVlKTtcbiAgfSwgW25hbWUsIHNldFZhbHVlXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobmFtZSkge1xuICAgICAgY29uc3Qgb25TdG9yZUNoYW5nZSA9ICgpID0+IHNldFZhbHVlKHNldHRpbmdzLmdldE9iamVjdChuYW1lLCBkZWZhdWx0VmFsdWUpKTtcbiAgICAgIHNldHRpbmdzLm9uQ2hhbmdlRW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIG9uU3RvcmVDaGFuZ2UpO1xuICAgICAgcmV0dXJuICgpID0+IHNldHRpbmdzLm9uQ2hhbmdlRW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIG9uU3RvcmVDaGFuZ2UpO1xuICAgIH1cbiAgfSwgW2RlZmF1bHRWYWx1ZSwgbmFtZV0pO1xuICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZVdyYXBwZXJdO1xufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIHNhdmVTZXR0aW5ncz8oKTogdm9pZDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2V0dGluZ3Mge1xuICBvbkNoYW5nZUVtaXR0ZXIgPSBuZXcgRXZlbnRUYXJnZXQoKTtcblxuICBnZXRTdHJpbmcobmFtZTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZVtuYW1lXSB8fCBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICBzZXRTdHJpbmcobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgbG9jYWxTdG9yYWdlW25hbWVdID0gdmFsdWU7XG4gICAgdGhpcy5vbkNoYW5nZUVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQobmFtZSkpO1xuICAgIHdpbmRvdy5zYXZlU2V0dGluZ3M/LigpO1xuICB9XG5cbiAgZ2V0T2JqZWN0PFQ+KG5hbWU6IHN0cmluZywgZGVmYXVsdFZhbHVlOiBUKTogVCB7XG4gICAgaWYgKCFsb2NhbFN0b3JhZ2VbbmFtZV0pXG4gICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2VbbmFtZV0pO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH1cblxuICBzZXRPYmplY3Q8VD4obmFtZTogc3RyaW5nLCB2YWx1ZTogVCkge1xuICAgIGxvY2FsU3RvcmFnZVtuYW1lXSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICB0aGlzLm9uQ2hhbmdlRW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChuYW1lKSk7XG4gICAgd2luZG93LnNhdmVTZXR0aW5ncz8uKCk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNldHRpbmdzID0gbmV3IFNldHRpbmdzKCk7XG5cbi8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2Nsc3hcbmV4cG9ydCBmdW5jdGlvbiBjbHN4KC4uLmNsYXNzZXM6IChzdHJpbmcgfCB1bmRlZmluZWQgfCBmYWxzZSlbXSkge1xuICByZXR1cm4gY2xhc3Nlcy5maWx0ZXIoQm9vbGVhbikuam9pbignICcpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2hhMShzdHI6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IGJ1ZmZlciA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHIpO1xuICByZXR1cm4gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTEnLCBidWZmZXIpKSkubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxJbnRvVmlld0lmTmVlZGVkKGVsZW1lbnQ6IEVsZW1lbnQgfCB1bmRlZmluZWQpIHtcbiAgaWYgKCFlbGVtZW50KVxuICAgIHJldHVybjtcbiAgaWYgKChlbGVtZW50IGFzIGFueSk/LnNjcm9sbEludG9WaWV3SWZOZWVkZWQpXG4gICAgKGVsZW1lbnQgYXMgYW55KS5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKGZhbHNlKTtcbiAgZWxzZVxuICAgIGVsZW1lbnQ/LnNjcm9sbEludG9WaWV3KCk7XG59XG5cbmNvbnN0IGtDb250cm9sQ29kZXNSZSA9ICdcXFxcdTAwMDAtXFxcXHUwMDIwXFxcXHUwMDdmLVxcXFx1MDA5Zic7XG5leHBvcnQgY29uc3Qga1dlYkxpbmtSZSA9IG5ldyBSZWdFeHAoJyg/OlthLXpBLVpdW2EtekEtWjAtOSsuLV17Mix9OlxcXFwvXFxcXC98d3d3XFxcXC4pW15cXFxccycgKyBrQ29udHJvbENvZGVzUmUgKyAnXCJdezIsfVteXFxcXHMnICsga0NvbnRyb2xDb2Rlc1JlICsgJ1wiXFwnKX1cXFxcXSw6Oy4hP10nLCAndWcnKTtcblxuLyoqXG4gKiBNYW5hZ2VzIGZsYXNoIGFuaW1hdGlvbiBzdGF0ZS5cbiAqIENhbGxpbmcgYHRyaWdnZXJgIHdpbGwgdHVybiBgZmxhc2hgIHRvIHRydWUgZm9yIGEgc2Vjb25kLCBhbmQgdGhlbiBiYWNrIHRvIGZhbHNlLlxuICogSWYgYHRyaWdnZXJgIGlzIGNhbGxlZCB3aGlsZSBhIGZsYXNoIGlzIG9uZ29pbmcsIHRoZSBvbmdvaW5nIGZsYXNoIHdpbGwgYmUgY2FuY2VsbGVkIGFuZCBhZnRlciA1MG1zIGEgbmV3IGZsYXNoIGlzIHN0YXJ0ZWQuXG4gKiBAcmV0dXJucyBbZmxhc2gsIHRyaWdnZXJdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGbGFzaCgpOiBbYm9vbGVhbiwgRWZmZWN0Q2FsbGJhY2tdIHtcbiAgY29uc3QgW2ZsYXNoLCBzZXRGbGFzaF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHRyaWdnZXIgPSBSZWFjdC51c2VDYWxsYmFjazxSZWFjdC5FZmZlY3RDYWxsYmFjaz4oKCkgPT4ge1xuICAgIGNvbnN0IHRpbWVvdXRzOiBhbnlbXSA9IFtdO1xuICAgIHNldEZsYXNoKGN1cnJlbnRseUZsYXNoaW5nID0+IHtcbiAgICAgIHRpbWVvdXRzLnB1c2goc2V0VGltZW91dCgoKSA9PiBzZXRGbGFzaChmYWxzZSksIDEwMDApKTtcbiAgICAgIGlmICghY3VycmVudGx5Rmxhc2hpbmcpXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICB0aW1lb3V0cy5wdXNoKHNldFRpbWVvdXQoKCkgPT4gc2V0Rmxhc2godHJ1ZSksIDUwKSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHRpbWVvdXRzLmZvckVhY2goY2xlYXJUaW1lb3V0KTtcbiAgfSwgW3NldEZsYXNoXSk7XG4gIHJldHVybiBbZmxhc2gsIHRyaWdnZXJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlQ29va2llcygpIHtcbiAgY29uc3QgY29va2llcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJykuZmlsdGVyKHYgPT4gdi5pbmNsdWRlcygnPScpKS5tYXAoa3YgPT4ge1xuICAgICAgY29uc3Qgc2VwYXJhdG9yID0ga3YuaW5kZXhPZignPScpO1xuICAgICAgcmV0dXJuIFtrdi5zdWJzdHJpbmcoMCwgc2VwYXJhdG9yKSwga3Yuc3Vic3RyaW5nKHNlcGFyYXRvciArIDEpXTtcbiAgICB9KTtcbiAgfSwgW10pO1xuICByZXR1cm4gY29va2llcztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHNldHRpbmdzIH0gZnJvbSAnLi91aVV0aWxzJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgRG9jdW1lbnQge1xuICAgIHBsYXl3cmlnaHRUaGVtZUluaXRpYWxpemVkPzogYm9vbGVhbjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlUaGVtZSgpIHtcbiAgaWYgKGRvY3VtZW50LnBsYXl3cmlnaHRUaGVtZUluaXRpYWxpemVkKVxuICAgIHJldHVybjtcbiAgZG9jdW1lbnQucGxheXdyaWdodFRoZW1lSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICBkb2N1bWVudCEuZGVmYXVsdFZpZXchLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKGV2ZW50OiBhbnkpID0+IHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmRvY3VtZW50Lm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX05PREUpXG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2luYWN0aXZlJyk7XG4gIH0sIGZhbHNlKTtcbiAgZG9jdW1lbnQhLmRlZmF1bHRWaWV3IS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZXZlbnQgPT4ge1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnaW5hY3RpdmUnKTtcbiAgfSwgZmFsc2UpO1xuXG4gIGNvbnN0IHByZWZlcnNEYXJrU2NoZW1lID0gd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKTtcbiAgY29uc3QgZGVmYXVsdFRoZW1lID0gcHJlZmVyc0RhcmtTY2hlbWUubWF0Y2hlcyA/ICdkYXJrLW1vZGUnIDogJ2xpZ2h0LW1vZGUnO1xuXG4gIGNvbnN0IGN1cnJlbnRUaGVtZSA9IHNldHRpbmdzLmdldFN0cmluZygndGhlbWUnLCBkZWZhdWx0VGhlbWUpO1xuICBpZiAoY3VycmVudFRoZW1lID09PSAnZGFyay1tb2RlJylcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2RhcmstbW9kZScpO1xufVxuXG50eXBlIFRoZW1lID0gJ2RhcmstbW9kZScgfCAnbGlnaHQtbW9kZSc7XG5cbmNvbnN0IGxpc3RlbmVycyA9IG5ldyBTZXQ8KHRoZW1lOiBUaGVtZSkgPT4gdm9pZD4oKTtcbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVUaGVtZSgpIHtcbiAgY29uc3Qgb2xkVGhlbWUgPSBjdXJyZW50VGhlbWUoKTtcbiAgY29uc3QgbmV3VGhlbWUgPSBvbGRUaGVtZSA9PT0gJ2RhcmstbW9kZScgPyAnbGlnaHQtbW9kZScgOiAnZGFyay1tb2RlJztcblxuICBpZiAob2xkVGhlbWUpXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKG9sZFRoZW1lKTtcbiAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKG5ld1RoZW1lKTtcbiAgc2V0dGluZ3Muc2V0U3RyaW5nKCd0aGVtZScsIG5ld1RoZW1lKTtcbiAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBsaXN0ZW5lcnMpXG4gICAgbGlzdGVuZXIobmV3VGhlbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVGhlbWVMaXN0ZW5lcihsaXN0ZW5lcjogKHRoZW1lOiAnbGlnaHQtbW9kZScgfCAnZGFyay1tb2RlJykgPT4gdm9pZCkge1xuICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVRoZW1lTGlzdGVuZXIobGlzdGVuZXI6ICh0aGVtZTogVGhlbWUpID0+IHZvaWQpIHtcbiAgbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXJyZW50VGhlbWUoKTogVGhlbWUge1xuICByZXR1cm4gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ2RhcmstbW9kZScpID8gJ2RhcmstbW9kZScgOiAnbGlnaHQtbW9kZSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VEYXJrTW9kZVNldHRpbmcoKTogW2Jvb2xlYW4sICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZF0ge1xuICBjb25zdCBbdGhlbWUsIHNldFRoZW1lXSA9IFJlYWN0LnVzZVN0YXRlKGN1cnJlbnRUaGVtZSgpID09PSAnZGFyay1tb2RlJyk7XG4gIHJldHVybiBbdGhlbWUsICh2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnQgPSBjdXJyZW50VGhlbWUoKSA9PT0gJ2RhcmstbW9kZSc7XG4gICAgaWYgKGN1cnJlbnQgIT09IHZhbHVlKVxuICAgICAgdG9nZ2xlVGhlbWUoKTtcbiAgICBzZXRUaGVtZSh2YWx1ZSk7XG4gIH1dO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksY2E9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBwKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBkYT1uZXcgU2V0LGVhPXt9O2Z1bmN0aW9uIGZhKGEsYil7aGEoYSxiKTtoYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gaGEoYSxiKXtlYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZGEuYWRkKGJbYV0pfVxudmFyIGlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxqYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGthPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYT1cbnt9LG1hPXt9O2Z1bmN0aW9uIG9hKGEpe2lmKGphLmNhbGwobWEsYSkpcmV0dXJuITA7aWYoamEuY2FsbChsYSxhKSlyZXR1cm4hMTtpZihrYS50ZXN0KGEpKXJldHVybiBtYVthXT0hMDtsYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIHo9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07eltiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciByYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLFxuc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuei54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gdGEoYSxiLGMsZCl7dmFyIGU9ei5oYXNPd25Qcm9wZXJ0eShiKT96W2JdOm51bGw7aWYobnVsbCE9PWU/MCE9PWUudHlwZTpkfHwhKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0pcWEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29hKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKX1cbnZhciB1YT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCx2YT1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSx3YT1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHlhPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSx6YT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxDYT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLEZhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLEdhPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLEhhPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBJYT1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5jYWNoZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7dmFyIEphPVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBLYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9SmEmJmFbSmFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIEE9T2JqZWN0LmFzc2lnbixMYTtmdW5jdGlvbiBNYShhKXtpZih2b2lkIDA9PT1MYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtMYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTGErYX12YXIgTmE9ITE7XG5mdW5jdGlvbiBPYShhLGIpe2lmKCFhfHxOYSlyZXR1cm5cIlwiO05hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChsKXt2YXIgZD1sfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2gobCl7ZD1sfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2gobCl7ZD1sfWEoKX19Y2F0Y2gobCl7aWYobCYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBsLnN0YWNrKXtmb3IodmFyIGU9bC5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXt2YXIgaz1cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO2EuZGlzcGxheU5hbWUmJmsuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSYmKGs9ay5yZXBsYWNlKFwiPGFub255bW91cz5cIixhLmRpc3BsYXlOYW1lKSk7cmV0dXJuIGt9d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e05hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TWEoYSk6XCJcIn1cbmZ1bmN0aW9uIFBhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBNYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE1hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBNYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE1hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1PYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1PYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1PYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFFhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2Ugd2E6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIEFhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHphOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgRWE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgRmE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQ2E6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgQmE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgRGE6dmFyIGI9YS5yZW5kZXI7YT1hLmRpc3BsYXlOYW1lO2F8fChhPWIuZGlzcGxheU5hbWV8fFxuYi5uYW1lfHxcIlwiLGE9XCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO3JldHVybiBhO2Nhc2UgR2E6cmV0dXJuIGI9YS5kaXNwbGF5TmFtZXx8bnVsbCxudWxsIT09Yj9iOlFhKGEudHlwZSl8fFwiTWVtb1wiO2Nhc2UgSGE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFFhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSYShhKXt2YXIgYj1hLnR5cGU7c3dpdGNoKGEudGFnKXtjYXNlIDI0OnJldHVyblwiQ2FjaGVcIjtjYXNlIDk6cmV0dXJuKGIuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgMTA6cmV0dXJuKGIuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgMTg6cmV0dXJuXCJEZWh5ZHJhdGVkRnJhZ21lbnRcIjtjYXNlIDExOnJldHVybiBhPWIucmVuZGVyLGE9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiLGIuZGlzcGxheU5hbWV8fChcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSA3OnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA0OnJldHVyblwiUG9ydGFsXCI7Y2FzZSAzOnJldHVyblwiUm9vdFwiO2Nhc2UgNjpyZXR1cm5cIlRleHRcIjtjYXNlIDE2OnJldHVybiBRYShiKTtjYXNlIDg6cmV0dXJuIGI9PT16YT9cIlN0cmljdE1vZGVcIjpcIk1vZGVcIjtjYXNlIDIyOnJldHVyblwiT2Zmc2NyZWVuXCI7XG5jYXNlIDEyOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIDIxOnJldHVyblwiU2NvcGVcIjtjYXNlIDEzOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIDE5OnJldHVyblwiU3VzcGVuc2VMaXN0XCI7Y2FzZSAyNTpyZXR1cm5cIlRyYWNpbmdNYXJrZXJcIjtjYXNlIDE6Y2FzZSAwOmNhc2UgMTc6Y2FzZSAyOmNhc2UgMTQ6Y2FzZSAxNTppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7Y2FzZSBcIm9iamVjdFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gYWIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYmIoYSxiKXthYihhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2NiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmNiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBlYj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IocCg5MSkpO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHAoOTIpKTtpZihlYihjKSl7aWYoMTxjLmxlbmd0aCl0aHJvdyBFcnJvcihwKDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX1mdW5jdGlvbiBrYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxuZnVuY3Rpb24gbGIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2tiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG1iLG5iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIhPT1hLm5hbWVzcGFjZVVSSXx8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle21iPW1ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO21iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW1iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG9iKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcGI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGFzcGVjdFJhdGlvOiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCxcbnpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scWI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHBiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3FiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cGJbYl09cGJbYV19KX0pO2Z1bmN0aW9uIHJiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxwYi5oYXNPd25Qcm9wZXJ0eShhKSYmcGJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gc2IoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9cmIoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdGI9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHViKGEsYil7aWYoYil7aWYodGJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcihwKDYwKSk7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfHwhKFwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcihwKDYyKSk7fX1cbmZ1bmN0aW9uIHZiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgd2I9bnVsbDtmdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHAoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKCl7fXZhciBJYj0hMTtmdW5jdGlvbiBKYihhLGIsYyl7aWYoSWIpcmV0dXJuIGEoYixjKTtJYj0hMDt0cnl7cmV0dXJuIEdiKGEsYixjKX1maW5hbGx5e2lmKEliPSExLG51bGwhPT16Ynx8bnVsbCE9PUFiKUhiKCksRmIoKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHAoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgTGI9ITE7aWYoaWEpdHJ5e3ZhciBNYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0xiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYil9Y2F0Y2goYSl7TGI9ITF9ZnVuY3Rpb24gTmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIE9iPSExLFBiPW51bGwsUWI9ITEsUmI9bnVsbCxTYj17b25FcnJvcjpmdW5jdGlvbihhKXtPYj0hMDtQYj1hfX07ZnVuY3Rpb24gVGIoYSxiLGMsZCxlLGYsZyxoLGspe09iPSExO1BiPW51bGw7TmIuYXBwbHkoU2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFViKGEsYixjLGQsZSxmLGcsaCxrKXtUYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoT2Ipe2lmKE9iKXt2YXIgbD1QYjtPYj0hMTtQYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IocCgxOTgpKTtRYnx8KFFiPSEwLFJiPWwpfX1mdW5jdGlvbiBWYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmNDA5OCkmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIFdiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGIoYSl7aWYoVmIoYSkhPT1hKXRocm93IEVycm9yKHAoMTg4KSk7fVxuZnVuY3Rpb24gWWIoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9VmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gWGIoZSksYTtpZihmPT09ZClyZXR1cm4gWGIoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcihwKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHAoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IocCgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBaYihhKXthPVliKGEpO3JldHVybiBudWxsIT09YT8kYihhKTpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhO2ZvcihhPWEuY2hpbGQ7bnVsbCE9PWE7KXt2YXIgYj0kYihhKTtpZihudWxsIT09YilyZXR1cm4gYjthPWEuc2libGluZ31yZXR1cm4gbnVsbH1cbnZhciBhYz1jYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGJjPWNhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLGNjPWNhLnVuc3RhYmxlX3Nob3VsZFlpZWxkLGRjPWNhLnVuc3RhYmxlX3JlcXVlc3RQYWludCxCPWNhLnVuc3RhYmxlX25vdyxlYz1jYS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxmYz1jYS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxnYz1jYS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxoYz1jYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxpYz1jYS51bnN0YWJsZV9Mb3dQcmlvcml0eSxqYz1jYS51bnN0YWJsZV9JZGxlUHJpb3JpdHksa2M9bnVsbCxsYz1udWxsO2Z1bmN0aW9uIG1jKGEpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclJvb3QpdHJ5e2xjLm9uQ29tbWl0RmliZXJSb290KGtjLGEsdm9pZCAwLDEyOD09PShhLmN1cnJlbnQuZmxhZ3MmMTI4KSl9Y2F0Y2goYil7fX1cbnZhciBvYz1NYXRoLmNsejMyP01hdGguY2x6MzI6bmMscGM9TWF0aC5sb2cscWM9TWF0aC5MTjI7ZnVuY3Rpb24gbmMoYSl7YT4+Pj0wO3JldHVybiAwPT09YT8zMjozMS0ocGMoYSkvcWN8MCl8MH12YXIgcmM9NjQsc2M9NDE5NDMwNDtcbmZ1bmN0aW9uIHRjKGEpe3N3aXRjaChhJi1hKXtjYXNlIDE6cmV0dXJuIDE7Y2FzZSAyOnJldHVybiAyO2Nhc2UgNDpyZXR1cm4gNDtjYXNlIDg6cmV0dXJuIDg7Y2FzZSAxNjpyZXR1cm4gMTY7Y2FzZSAzMjpyZXR1cm4gMzI7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYSY0MTk0MjQwO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuIGEmMTMwMDIzNDI0O2Nhc2UgMTM0MjE3NzI4OnJldHVybiAxMzQyMTc3Mjg7Y2FzZSAyNjg0MzU0NTY6cmV0dXJuIDI2ODQzNTQ1NjtjYXNlIDUzNjg3MDkxMjpyZXR1cm4gNTM2ODcwOTEyO2Nhc2UgMTA3Mzc0MTgyNDpyZXR1cm4gMTA3Mzc0MTgyNDtcbmRlZmF1bHQ6cmV0dXJuIGF9fWZ1bmN0aW9uIHVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIDA7dmFyIGQ9MCxlPWEuc3VzcGVuZGVkTGFuZXMsZj1hLnBpbmdlZExhbmVzLGc9YyYyNjg0MzU0NTU7aWYoMCE9PWcpe3ZhciBoPWcmfmU7MCE9PWg/ZD10YyhoKTooZiY9ZywwIT09ZiYmKGQ9dGMoZikpKX1lbHNlIGc9YyZ+ZSwwIT09Zz9kPXRjKGcpOjAhPT1mJiYoZD10YyhmKSk7aWYoMD09PWQpcmV0dXJuIDA7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZSkmJihlPWQmLWQsZj1iJi1iLGU+PWZ8fDE2PT09ZSYmMCE9PShmJjQxOTQyNDApKSlyZXR1cm4gYjswIT09KGQmNCkmJihkfD1jJjE2KTtiPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLW9jKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gdmMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuIGIrMjUwO2Nhc2UgODpjYXNlIDE2OmNhc2UgMzI6Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYis1RTM7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4tMTtjYXNlIDEzNDIxNzcyODpjYXNlIDI2ODQzNTQ1NjpjYXNlIDUzNjg3MDkxMjpjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuLTE7ZGVmYXVsdDpyZXR1cm4tMX19XG5mdW5jdGlvbiB3YyhhLGIpe2Zvcih2YXIgYz1hLnN1c3BlbmRlZExhbmVzLGQ9YS5waW5nZWRMYW5lcyxlPWEuZXhwaXJhdGlvblRpbWVzLGY9YS5wZW5kaW5nTGFuZXM7MDxmOyl7dmFyIGc9MzEtb2MoZiksaD0xPDxnLGs9ZVtnXTtpZigtMT09PWspe2lmKDA9PT0oaCZjKXx8MCE9PShoJmQpKWVbZ109dmMoaCxiKX1lbHNlIGs8PWImJihhLmV4cGlyZWRMYW5lc3w9aCk7ZiY9fmh9fWZ1bmN0aW9uIHhjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiB5Yygpe3ZhciBhPXJjO3JjPDw9MTswPT09KHJjJjQxOTQyNDApJiYocmM9NjQpO3JldHVybiBhfWZ1bmN0aW9uIHpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gQWMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iOzUzNjg3MDkxMiE9PWImJihhLnN1c3BlbmRlZExhbmVzPTAsYS5waW5nZWRMYW5lcz0wKTthPWEuZXZlbnRUaW1lcztiPTMxLW9jKGIpO2FbYl09Y31mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzJn5iO2EucGVuZGluZ0xhbmVzPWI7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9YjthLm11dGFibGVSZWFkTGFuZXMmPWI7YS5lbnRhbmdsZWRMYW5lcyY9YjtiPWEuZW50YW5nbGVtZW50czt2YXIgZD1hLmV2ZW50VGltZXM7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxjOyl7dmFyIGU9MzEtb2MoYyksZj0xPDxlO2JbZV09MDtkW2VdPS0xO2FbZV09LTE7YyY9fmZ9fVxuZnVuY3Rpb24gQ2MoYSxiKXt2YXIgYz1hLmVudGFuZ2xlZExhbmVzfD1iO2ZvcihhPWEuZW50YW5nbGVtZW50cztjOyl7dmFyIGQ9MzEtb2MoYyksZT0xPDxkO2UmYnxhW2RdJmImJihhW2RdfD1iKTtjJj1+ZX19dmFyIEM9MDtmdW5jdGlvbiBEYyhhKXthJj0tYTtyZXR1cm4gMTxhPzQ8YT8wIT09KGEmMjY4NDM1NDU1KT8xNjo1MzY4NzA5MTI6NDoxfXZhciBFYyxGYyxHYyxIYyxJYyxKYz0hMSxLYz1bXSxMYz1udWxsLE1jPW51bGwsTmM9bnVsbCxPYz1uZXcgTWFwLFBjPW5ldyBNYXAsUWM9W10sUmM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gU2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpMYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6TWM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6TmM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOk9jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOlBjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gVGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT17YmxvY2tlZE9uOmIsZG9tRXZlbnROYW1lOmMsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmYsdGFyZ2V0Q29udGFpbmVyczpbZV19LG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmRmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gVWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4gTGM9VGMoTGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIE1jPVRjKE1jLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBOYz1UYyhOYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO09jLnNldChmLFRjKE9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxQYy5zZXQoZixUYyhQYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1XYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVZiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPVdiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO0ljKGEucHJpb3JpdHksZnVuY3Rpb24oKXtHYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiBYYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9WWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbD09PWMpe2M9YS5uYXRpdmVFdmVudDt2YXIgZD1uZXcgYy5jb25zdHJ1Y3RvcihjLnR5cGUsYyk7d2I9ZDtjLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpO3diPW51bGx9ZWxzZSByZXR1cm4gYj1DYihjKSxudWxsIT09YiYmRmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gWmMoYSxiLGMpe1hjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiAkYygpe0pjPSExO251bGwhPT1MYyYmWGMoTGMpJiYoTGM9bnVsbCk7bnVsbCE9PU1jJiZYYyhNYykmJihNYz1udWxsKTtudWxsIT09TmMmJlhjKE5jKSYmKE5jPW51bGwpO09jLmZvckVhY2goWmMpO1BjLmZvckVhY2goWmMpfVxuZnVuY3Rpb24gYWQoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLEpjfHwoSmM9ITAsY2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhjYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSwkYykpKX1cbmZ1bmN0aW9uIGJkKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIGFkKGIsYSl9aWYoMDxLYy5sZW5ndGgpe2FkKEtjWzBdLGEpO2Zvcih2YXIgYz0xO2M8S2MubGVuZ3RoO2MrKyl7dmFyIGQ9S2NbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1MYyYmYWQoTGMsYSk7bnVsbCE9PU1jJiZhZChNYyxhKTtudWxsIT09TmMmJmFkKE5jLGEpO09jLmZvckVhY2goYik7UGMuZm9yRWFjaChiKTtmb3IoYz0wO2M8UWMubGVuZ3RoO2MrKylkPVFjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxRYy5sZW5ndGgmJihjPVFjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmUWMuc2hpZnQoKX12YXIgY2Q9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsZGQ9ITA7XG5mdW5jdGlvbiBlZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9MSxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fWZ1bmN0aW9uIGdkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz00LGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19XG5mdW5jdGlvbiBmZChhLGIsYyxkKXtpZihkZCl7dmFyIGU9WWMoYSxiLGMsZCk7aWYobnVsbD09PWUpaGQoYSxiLGQsaWQsYyksU2MoYSxkKTtlbHNlIGlmKFVjKGUsYSxiLGMsZCkpZC5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKFNjKGEsZCksYiY0JiYtMTxSYy5pbmRleE9mKGEpKXtmb3IoO251bGwhPT1lOyl7dmFyIGY9Q2IoZSk7bnVsbCE9PWYmJkVjKGYpO2Y9WWMoYSxiLGMsZCk7bnVsbD09PWYmJmhkKGEsYixkLGlkLGMpO2lmKGY9PT1lKWJyZWFrO2U9Zn1udWxsIT09ZSYmZC5zdG9wUHJvcGFnYXRpb24oKX1lbHNlIGhkKGEsYixkLG51bGwsYyl9fXZhciBpZD1udWxsO1xuZnVuY3Rpb24gWWMoYSxiLGMsZCl7aWQ9bnVsbDthPXhiKGQpO2E9V2MoYSk7aWYobnVsbCE9PWEpaWYoYj1WYihhKSxudWxsPT09YilhPW51bGw7ZWxzZSBpZihjPWIudGFnLDEzPT09Yyl7YT1XYihiKTtpZihudWxsIT09YSlyZXR1cm4gYTthPW51bGx9ZWxzZSBpZigzPT09Yyl7aWYoYi5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClyZXR1cm4gMz09PWIudGFnP2Iuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDthPW51bGx9ZWxzZSBiIT09YSYmKGE9bnVsbCk7aWQ9YTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGpkKGEpe3N3aXRjaChhKXtjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsaWNrXCI6Y2FzZSBcImNsb3NlXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjpjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwia2V5dXBcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwicGFzdGVcIjpjYXNlIFwicGF1c2VcIjpjYXNlIFwicGxheVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmNhc2UgXCJyYXRlY2hhbmdlXCI6Y2FzZSBcInJlc2V0XCI6Y2FzZSBcInJlc2l6ZVwiOmNhc2UgXCJzZWVrZWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjpjYXNlIFwidm9sdW1lY2hhbmdlXCI6Y2FzZSBcImNoYW5nZVwiOmNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpjYXNlIFwidGV4dElucHV0XCI6Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjpjYXNlIFwiYmVmb3JlaW5wdXRcIjpjYXNlIFwiYmx1clwiOmNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImhhc2hjaGFuZ2VcIjpjYXNlIFwicG9wc3RhdGVcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInNlbGVjdHN0YXJ0XCI6cmV0dXJuIDE7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwic2Nyb2xsXCI6Y2FzZSBcInRvZ2dsZVwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwid2hlZWxcIjpjYXNlIFwibW91c2VlbnRlclwiOmNhc2UgXCJtb3VzZWxlYXZlXCI6Y2FzZSBcInBvaW50ZXJlbnRlclwiOmNhc2UgXCJwb2ludGVybGVhdmVcIjpyZXR1cm4gNDtcbmNhc2UgXCJtZXNzYWdlXCI6c3dpdGNoKGVjKCkpe2Nhc2UgZmM6cmV0dXJuIDE7Y2FzZSBnYzpyZXR1cm4gNDtjYXNlIGhjOmNhc2UgaWM6cmV0dXJuIDE2O2Nhc2UgamM6cmV0dXJuIDUzNjg3MDkxMjtkZWZhdWx0OnJldHVybiAxNn1kZWZhdWx0OnJldHVybiAxNn19dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO2Z1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1cbmZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9QShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9QSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPUEoe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPUEoe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPUEoe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1BKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9QSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1BKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9QSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1BKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1BKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9QSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9QSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9aWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9aWEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoaWEpe3ZhciB4ZTtpZihpYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO0piKHJlLGIpfX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlO1xuZnVuY3Rpb24gSWUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07aWYoIWphLmNhbGwoYixlKXx8IUhlKGFbZV0sYltlXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gSmUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gS2UoYSxiKXt2YXIgYz1KZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1KZShjKX19ZnVuY3Rpb24gTGUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9MZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBNZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBOZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gT2UoYSl7dmFyIGI9TWUoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJkxlKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZOZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1LZShjLGYpO3ZhciBnPUtlKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgUGU9aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk5lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkllKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cbmZ1bmN0aW9uIFZlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFdlPXthbmltYXRpb25lbmQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpWZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFhlPXt9LFllPXt9O1xuaWEmJihZZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBXZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBXZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFplKGEpe2lmKFhlW2FdKXJldHVybiBYZVthXTtpZighV2VbYV0pcmV0dXJuIGE7dmFyIGI9V2VbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gWWUpcmV0dXJuIFhlW2FdPWJbY107cmV0dXJuIGF9dmFyICRlPVplKFwiYW5pbWF0aW9uZW5kXCIpLGFmPVplKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGJmPVplKFwiYW5pbWF0aW9uc3RhcnRcIiksY2Y9WmUoXCJ0cmFuc2l0aW9uZW5kXCIpLGRmPW5ldyBNYXAsZWY9XCJhYm9ydCBhdXhDbGljayBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHRvZ2dsZSB0b3VjaE1vdmUgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGZmKGEsYil7ZGYuc2V0KGEsYik7ZmEoYixbYV0pfWZvcih2YXIgZ2Y9MDtnZjxlZi5sZW5ndGg7Z2YrKyl7dmFyIGhmPWVmW2dmXSxqZj1oZi50b0xvd2VyQ2FzZSgpLGtmPWhmWzBdLnRvVXBwZXJDYXNlKCkraGYuc2xpY2UoMSk7ZmYoamYsXCJvblwiK2tmKX1mZigkZSxcIm9uQW5pbWF0aW9uRW5kXCIpO2ZmKGFmLFwib25BbmltYXRpb25JdGVyYXRpb25cIik7ZmYoYmYsXCJvbkFuaW1hdGlvblN0YXJ0XCIpO2ZmKFwiZGJsY2xpY2tcIixcIm9uRG91YmxlQ2xpY2tcIik7ZmYoXCJmb2N1c2luXCIsXCJvbkZvY3VzXCIpO2ZmKFwiZm9jdXNvdXRcIixcIm9uQmx1clwiKTtmZihjZixcIm9uVHJhbnNpdGlvbkVuZFwiKTtoYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtcbmhhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZmEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtmYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5mYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgbGY9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxtZj1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChsZikpO1xuZnVuY3Rpb24gbmYoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7VWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfX19aWYoUWIpdGhyb3cgYT1SYixRYj0hMSxSYj1udWxsLGE7fVxuZnVuY3Rpb24gRChhLGIpe3ZhciBjPWJbb2ZdO3ZvaWQgMD09PWMmJihjPWJbb2ZdPW5ldyBTZXQpO3ZhciBkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwocGYoYixhLDIsITEpLGMuYWRkKGQpKX1mdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9MDtiJiYoZHw9NCk7cGYoYyxhLGQsYil9dmFyIHJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gc2YoYSl7aWYoIWFbcmZdKXthW3JmXT0hMDtkYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1wic2VsZWN0aW9uY2hhbmdlXCIhPT1iJiYobWYuaGFzKGIpfHxxZihiLCExLGEpLHFmKGIsITAsYSkpfSk7dmFyIGI9OT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7bnVsbD09PWJ8fGJbcmZdfHwoYltyZl09ITAscWYoXCJzZWxlY3Rpb25jaGFuZ2VcIiwhMSxiKSl9fVxuZnVuY3Rpb24gcGYoYSxiLGMsZCl7c3dpdGNoKGpkKGIpKXtjYXNlIDE6dmFyIGU9ZWQ7YnJlYWs7Y2FzZSA0OmU9Z2Q7YnJlYWs7ZGVmYXVsdDplPWZkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFMYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPVdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1KYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9ZGYuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLG49YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6bj1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpuPVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSAkZTpjYXNlIGFmOmNhc2UgYmY6az1IZDticmVhaztjYXNlIGNmOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHQ9MCE9PShiJjQpLEo9IXQmJlwic2Nyb2xsXCI9PT1hLHg9dD9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt0PVtdO2Zvcih2YXIgdz1kLHU7bnVsbCE9PVxudzspe3U9dzt2YXIgRj11LnN0YXRlTm9kZTs1PT09dS50YWcmJm51bGwhPT1GJiYodT1GLG51bGwhPT14JiYoRj1LYih3LHgpLG51bGwhPUYmJnQucHVzaCh0Zih3LEYsdSkpKSk7aWYoSilicmVhazt3PXcucmV0dXJufTA8dC5sZW5ndGgmJihoPW5ldyBrKGgsbixudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp0fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmYyE9PXdiJiYobj1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYoV2Mobil8fG5bdWZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYobj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCxuPW4/V2Mobik6bnVsbCxudWxsIT09XG5uJiYoSj1WYihuKSxuIT09Snx8NSE9PW4udGFnJiY2IT09bi50YWcpKW49bnVsbH1lbHNlIGs9bnVsbCxuPWQ7aWYoayE9PW4pe3Q9QmQ7Rj1cIm9uTW91c2VMZWF2ZVwiO3g9XCJvbk1vdXNlRW50ZXJcIjt3PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdD1UZCxGPVwib25Qb2ludGVyTGVhdmVcIix4PVwib25Qb2ludGVyRW50ZXJcIix3PVwicG9pbnRlclwiO0o9bnVsbD09az9oOnVlKGspO3U9bnVsbD09bj9oOnVlKG4pO2g9bmV3IHQoRix3K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9SjtoLnJlbGF0ZWRUYXJnZXQ9dTtGPW51bGw7V2MoZSk9PT1kJiYodD1uZXcgdCh4LHcrXCJlbnRlclwiLG4sYyxlKSx0LnRhcmdldD11LHQucmVsYXRlZFRhcmdldD1KLEY9dCk7Sj1GO2lmKGsmJm4pYjp7dD1rO3g9bjt3PTA7Zm9yKHU9dDt1O3U9dmYodSkpdysrO3U9MDtmb3IoRj14O0Y7Rj12ZihGKSl1Kys7Zm9yKDswPHctdTspdD12Zih0KSx3LS07Zm9yKDswPHUtdzspeD1cbnZmKHgpLHUtLTtmb3IoO3ctLTspe2lmKHQ9PT14fHxudWxsIT09eCYmdD09PXguYWx0ZXJuYXRlKWJyZWFrIGI7dD12Zih0KTt4PXZmKHgpfXQ9bnVsbH1lbHNlIHQ9bnVsbDtudWxsIT09ayYmd2YoZyxoLGssdCwhMSk7bnVsbCE9PW4mJm51bGwhPT1KJiZ3ZihnLEosbix0LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBuYT12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKW5hPUZlO2Vsc2V7bmE9RGU7dmFyIHhhPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYobmE9RWUpO2lmKG5hJiYobmE9bmEoYSxkKSkpe25lKGcsbmEsYyxlKTticmVhayBhfXhhJiZ4YShhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKHhhPWguX3dyYXBwZXJTdGF0ZSkmJlxueGEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmY2IoaCxcIm51bWJlclwiLGgudmFsdWUpfXhhPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKHhhKXx8XCJ0cnVlXCI9PT14YS5jb250ZW50RWRpdGFibGUpUWU9eGEsUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciAkYTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmJhPVwib25Db21wb3NpdGlvbkVuZFwiO1xuYnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpiYT1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifWJhPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihiYT1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtiYSYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09YmE/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1iYSYmaWUmJigkYT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLHhhPW9lKGQsYmEpLDA8eGEubGVuZ3RoJiYoYmE9bmV3IExkKGJhLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6YmEsbGlzdGVuZXJzOnhhfSksJGE/YmEuZGF0YT0kYTooJGE9aGUoYyksbnVsbCE9PSRhJiYoYmEuZGF0YT0kYSkpKSk7aWYoJGE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksXG4wPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9JGEpfXNlKGcsYil9KX1mdW5jdGlvbiB0ZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9S2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQodGYoYSxmLGUpKSxmPUtiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKHRmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gdmYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHdmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9S2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQodGYoYyxrLGgpKSk6ZXx8KGs9S2IoYyxmKSxudWxsIT1rJiZnLnB1c2godGYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgeGY9L1xcclxcbj8vZyx5Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24gemYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZSh4ZixcIlxcblwiKS5yZXBsYWNlKHlmLFwiXCIpfWZ1bmN0aW9uIEFmKGEsYixjKXtiPXpmKGIpO2lmKHpmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiBCZigpe31cbnZhciBDZj1udWxsLERmPW51bGw7ZnVuY3Rpb24gRWYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgRmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsR2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEhmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLEpmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEhmP2Z1bmN0aW9uKGEpe3JldHVybiBIZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSWYpfTpGZjtmdW5jdGlvbiBJZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO2JkKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTtiZChiKX1mdW5jdGlvbiBMZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gTWYoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5mPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE9mPVwiX19yZWFjdEZpYmVyJFwiK05mLFBmPVwiX19yZWFjdFByb3BzJFwiK05mLHVmPVwiX19yZWFjdENvbnRhaW5lciRcIitOZixvZj1cIl9fcmVhY3RFdmVudHMkXCIrTmYsUWY9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK05mLFJmPVwiX19yZWFjdEhhbmRsZXMkXCIrTmY7XG5mdW5jdGlvbiBXYyhhKXt2YXIgYj1hW09mXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t1Zl18fGNbT2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9TWYoYSk7bnVsbCE9PWE7KXtpZihjPWFbT2ZdKXJldHVybiBjO2E9TWYoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVtPZl18fGFbdWZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVtQZl18fG51bGx9dmFyIFNmPVtdLFRmPS0xO2Z1bmN0aW9uIFVmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRShhKXswPlRmfHwoYS5jdXJyZW50PVNmW1RmXSxTZltUZl09bnVsbCxUZi0tKX1mdW5jdGlvbiBHKGEsYil7VGYrKztTZltUZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBWZj17fSxIPVVmKFZmKSxXZj1VZighMSksWGY9VmY7ZnVuY3Rpb24gWWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBWZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFpmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gJGYoKXtFKFdmKTtFKEgpfWZ1bmN0aW9uIGFnKGEsYixjKXtpZihILmN1cnJlbnQhPT1WZil0aHJvdyBFcnJvcihwKDE2OCkpO0coSCxiKTtHKFdmLGMpfWZ1bmN0aW9uIGJnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUmEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gY2coYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFZmO1hmPUguY3VycmVudDtHKEgsYSk7RyhXZixXZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBkZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPWJnKGEsYixYZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEUoV2YpLEUoSCksRyhILGEpKTpFKFdmKTtHKFdmLGMpfXZhciBlZz1udWxsLGZnPSExLGdnPSExO2Z1bmN0aW9uIGhnKGEpe251bGw9PT1lZz9lZz1bYV06ZWcucHVzaChhKX1mdW5jdGlvbiBpZyhhKXtmZz0hMDtoZyhhKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWdnJiZudWxsIT09ZWcpe2dnPSEwO3ZhciBhPTAsYj1DO3RyeXt2YXIgYz1lZztmb3IoQz0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfWVnPW51bGw7Zmc9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PWVnJiYoZWc9ZWcuc2xpY2UoYSsxKSksYWMoZmMsamcpLGU7fWZpbmFsbHl7Qz1iLGdnPSExfX1yZXR1cm4gbnVsbH12YXIga2c9W10sbGc9MCxtZz1udWxsLG5nPTAsb2c9W10scGc9MCxxZz1udWxsLHJnPTEsc2c9XCJcIjtmdW5jdGlvbiB0ZyhhLGIpe2tnW2xnKytdPW5nO2tnW2xnKytdPW1nO21nPWE7bmc9Yn1cbmZ1bmN0aW9uIHVnKGEsYixjKXtvZ1twZysrXT1yZztvZ1twZysrXT1zZztvZ1twZysrXT1xZztxZz1hO3ZhciBkPXJnO2E9c2c7dmFyIGU9MzItb2MoZCktMTtkJj1+KDE8PGUpO2MrPTE7dmFyIGY9MzItb2MoYikrZTtpZigzMDxmKXt2YXIgZz1lLWUlNTtmPShkJigxPDxnKS0xKS50b1N0cmluZygzMik7ZD4+PWc7ZS09ZztyZz0xPDwzMi1vYyhiKStlfGM8PGV8ZDtzZz1mK2F9ZWxzZSByZz0xPDxmfGM8PGV8ZCxzZz1hfWZ1bmN0aW9uIHZnKGEpe251bGwhPT1hLnJldHVybiYmKHRnKGEsMSksdWcoYSwxLDApKX1mdW5jdGlvbiB3ZyhhKXtmb3IoO2E9PT1tZzspbWc9a2dbLS1sZ10sa2dbbGddPW51bGwsbmc9a2dbLS1sZ10sa2dbbGddPW51bGw7Zm9yKDthPT09cWc7KXFnPW9nWy0tcGddLG9nW3BnXT1udWxsLHNnPW9nWy0tcGddLG9nW3BnXT1udWxsLHJnPW9nWy0tcGddLG9nW3BnXT1udWxsfXZhciB4Zz1udWxsLHlnPW51bGwsST0hMSx6Zz1udWxsO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1CZyg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtiPWEuZGVsZXRpb25zO251bGw9PT1iPyhhLmRlbGV0aW9ucz1bY10sYS5mbGFnc3w9MTYpOmIucHVzaChjKX1cbmZ1bmN0aW9uIENnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9TGYoYi5maXJzdENoaWxkKSwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9bnVsbCwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4gYj04IT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGM9bnVsbCE9PXFnP3tpZDpyZyxvdmVyZmxvdzpzZ306bnVsbCxhLm1lbW9pemVkU3RhdGU9e2RlaHlkcmF0ZWQ6Yix0cmVlQ29udGV4dDpjLHJldHJ5TGFuZToxMDczNzQxODI0fSxjPUJnKDE4LG51bGwsbnVsbCwwKSxjLnN0YXRlTm9kZT1iLGMucmV0dXJuPWEsYS5jaGlsZD1jLHhnPWEseWc9XG5udWxsLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBEZyhhKXtyZXR1cm4gMCE9PShhLm1vZGUmMSkmJjA9PT0oYS5mbGFncyYxMjgpfWZ1bmN0aW9uIEVnKGEpe2lmKEkpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUNnKGEsYikpe2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7Yj1MZihjLm5leHRTaWJsaW5nKTt2YXIgZD14ZztiJiZDZyhhLGIpP0FnKGQsYyk6KGEuZmxhZ3M9YS5mbGFncyYtNDA5N3wyLEk9ITEseGc9YSl9fWVsc2V7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTthLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MjtJPSExO3hnPWF9fX1mdW5jdGlvbiBGZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1cbmZ1bmN0aW9uIEdnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighSSlyZXR1cm4gRmcoYSksST0hMCwhMTt2YXIgYjsoYj0zIT09YS50YWcpJiYhKGI9NSE9PWEudGFnKSYmKGI9YS50eXBlLGI9XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFFZihhLnR5cGUsYS5tZW1vaXplZFByb3BzKSk7aWYoYiYmKGI9eWcpKXtpZihEZyhhKSl0aHJvdyBIZygpLEVycm9yKHAoNDE4KSk7Zm9yKDtiOylBZyhhLGIpLGI9TGYoYi5uZXh0U2libGluZyl9RmcoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcihwKDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXt5Zz1MZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfXlnPVxubnVsbH19ZWxzZSB5Zz14Zz9MZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBIZygpe2Zvcih2YXIgYT15ZzthOylhPUxmKGEubmV4dFNpYmxpbmcpfWZ1bmN0aW9uIElnKCl7eWc9eGc9bnVsbDtJPSExfWZ1bmN0aW9uIEpnKGEpe251bGw9PT16Zz96Zz1bYV06emcucHVzaChhKX12YXIgS2c9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7XG5mdW5jdGlvbiBMZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHAoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IocCgxNDcsYSkpO3ZhciBlPWQsZj1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZilyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1lLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIE1nKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIE5nKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiBPZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1QZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVFnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT15YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09SGEmJk5nKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9TGcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVJnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPUxnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9U2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVRnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVFnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjPVJnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9TGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHdhOnJldHVybiBiPVNnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEhhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHEoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGViKGIpfHxLYShiKSlyZXR1cm4gYj1UZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtNZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gZT1jLl9pbml0LHIoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihlYihjKXx8S2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO01nKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB3YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEhhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihlYihkKXx8S2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO01nKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCx1PWcsdz1nPTAseD1udWxsO251bGwhPT11JiZ3PGgubGVuZ3RoO3crKyl7dS5pbmRleD53Pyh4PXUsdT1udWxsKTp4PXUuc2libGluZzt2YXIgbj1yKGUsdSxoW3ddLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9eCk7YnJlYWt9YSYmdSYmbnVsbD09PW4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx3KTtudWxsPT09bT9sPW46bS5zaWJsaW5nPW47bT1uO3U9eH1pZih3PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PXUpe2Zvcig7dzxoLmxlbmd0aDt3KyspdT1xKGUsaFt3XSxrKSxudWxsIT09dSYmKGc9Zih1LGcsdyksbnVsbD09PW0/bD11Om0uc2libGluZz11LG09dSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7dzxoLmxlbmd0aDt3KyspeD15KHUsZSx3LGhbd10sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1cbngua2V5P3c6eC5rZXkpLGc9Zih4LGcsdyksbnVsbD09PW0/bD14Om0uc2libGluZz14LG09eCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIHQoZSxnLGgsayl7dmFyIGw9S2EoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciB1PWw9bnVsbCxtPWcsdz1nPTAseD1udWxsLG49aC5uZXh0KCk7bnVsbCE9PW0mJiFuLmRvbmU7dysrLG49aC5uZXh0KCkpe20uaW5kZXg+dz8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9cihlLG0sbi52YWx1ZSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcsdyk7bnVsbD09PXU/bD10OnUuc2libGluZz10O3U9dDttPXh9aWYobi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PW0pe2Zvcig7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcihtPWQoZSxtKTshbi5kb25lO3crKyxuPWgubmV4dCgpKW49eShtLGUsdyxuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09bi5rZXk/dzpuLmtleSksZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT15YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB2YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT15YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09SGEmJk5nKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1MZyhhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09eWE/KGQ9VGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVJnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPUxnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB3YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVNnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgSGE6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGViKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKEthKGYpKXJldHVybiB0KGEsZCxmLGgpO01nKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9UWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgVWc9T2coITApLFZnPU9nKCExKSxXZz1VZihudWxsKSxYZz1udWxsLFlnPW51bGwsWmc9bnVsbDtmdW5jdGlvbiAkZygpe1pnPVlnPVhnPW51bGx9ZnVuY3Rpb24gYWgoYSl7dmFyIGI9V2cuY3VycmVudDtFKFdnKTthLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBiaChhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fVxuZnVuY3Rpb24gY2goYSxiKXtYZz1hO1pnPVlnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoZGg9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfWZ1bmN0aW9uIGVoKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihaZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1ZZyl7aWYobnVsbD09PVhnKXRocm93IEVycm9yKHAoMzA4KSk7WWc9YTtYZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgWWc9WWcubmV4dD1hO3JldHVybiBifXZhciBmaD1udWxsO2Z1bmN0aW9uIGdoKGEpe251bGw9PT1maD9maD1bYV06ZmgucHVzaChhKX1cbmZ1bmN0aW9uIGhoKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLGdoKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBpaChhLGQpfWZ1bmN0aW9uIGloKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH12YXIgamg9ITE7ZnVuY3Rpb24ga2goYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIGxoKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIG1oKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gbmgoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZD1kLnNoYXJlZDtpZigwIT09KEsmMikpe3ZhciBlPWQucGVuZGluZztudWxsPT09ZT9iLm5leHQ9YjooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5wZW5kaW5nPWI7cmV0dXJuIGloKGEsYyl9ZT1kLmludGVybGVhdmVkO251bGw9PT1lPyhiLm5leHQ9YixnaChkKSk6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QuaW50ZXJsZWF2ZWQ9YjtyZXR1cm4gaWgoYSxjKX1mdW5jdGlvbiBvaChhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxuZnVuY3Rpb24gcGgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIHFoKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7amg9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgcT1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHI9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcik9PT1yKXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHQ9aDtyPWI7eT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOm49dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXtxPW4uY2FsbCh5LHEscik7YnJlYWsgYX1xPW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49dC5wYXlsb2FkO3I9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHkscSxyKTpuO2lmKG51bGw9PT1yfHx2b2lkIDA9PT1yKWJyZWFrIGE7cT1BKHt9LHEscik7YnJlYWsgYTtjYXNlIDI6amg9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscj1lLmVmZmVjdHMsbnVsbD09PXI/ZS5lZmZlY3RzPVtoXTpyLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpyLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9cSk6bT1tLm5leHQ9eSxnfD1yO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2Ugcj1oLGg9ci5uZXh0LHIubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cixlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO3JofD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9cX19XG5mdW5jdGlvbiBzaChhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciB0aD17fSx1aD1VZih0aCksdmg9VWYodGgpLHdoPVVmKHRoKTtmdW5jdGlvbiB4aChhKXtpZihhPT09dGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHloKGEsYil7Ryh3aCxiKTtHKHZoLGEpO0codWgsdGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RSh1aCk7Ryh1aCxiKX1mdW5jdGlvbiB6aCgpe0UodWgpO0UodmgpO0Uod2gpfWZ1bmN0aW9uIEFoKGEpe3hoKHdoLmN1cnJlbnQpO3ZhciBiPXhoKHVoLmN1cnJlbnQpO3ZhciBjPWxiKGIsYS50eXBlKTtiIT09YyYmKEcodmgsYSksRyh1aCxjKSl9ZnVuY3Rpb24gQmgoYSl7dmguY3VycmVudD09PWEmJihFKHVoKSxFKHZoKSl9dmFyIEw9VWYoMCk7XG5mdW5jdGlvbiBDaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgRGg9W107XG5mdW5jdGlvbiBFaCgpe2Zvcih2YXIgYT0wO2E8RGgubGVuZ3RoO2ErKylEaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO0RoLmxlbmd0aD0wfXZhciBGaD11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLEdoPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEhoPTAsTT1udWxsLE49bnVsbCxPPW51bGwsSWg9ITEsSmg9ITEsS2g9MCxMaD0wO2Z1bmN0aW9uIFAoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBNaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gTmgoYSxiLGMsZCxlLGYpe0hoPWY7TT1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7RmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9PaDpQaDthPWMoZCxlKTtpZihKaCl7Zj0wO2Rve0poPSExO0toPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO089Tj1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtGaC5jdXJyZW50PVFoO2E9YyhkLGUpfXdoaWxlKEpoKX1GaC5jdXJyZW50PVJoO2I9bnVsbCE9PU4mJm51bGwhPT1OLm5leHQ7SGg9MDtPPU49TT1udWxsO0loPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBTaCgpe3ZhciBhPTAhPT1LaDtLaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gVGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09Tz9NLm1lbW9pemVkU3RhdGU9Tz1hOk89Ty5uZXh0PWE7cmV0dXJuIE99ZnVuY3Rpb24gVWgoKXtpZihudWxsPT09Til7dmFyIGE9TS5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ti5uZXh0O3ZhciBiPW51bGw9PT1PP00ubWVtb2l6ZWRTdGF0ZTpPLm5leHQ7aWYobnVsbCE9PWIpTz1iLE49YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Tj1hO2E9e21lbW9pemVkU3RhdGU6Ti5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpOLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ti5iYXNlUXVldWUscXVldWU6Ti5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1PP00ubWVtb2l6ZWRTdGF0ZT1PPWE6Tz1PLm5leHQ9YX1yZXR1cm4gT31cbmZ1bmN0aW9uIFZoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gV2goYSl7dmFyIGI9VWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1OLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChIaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciBxPXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXEsZz1kKTprPWsubmV4dD1xO00ubGFuZXN8PW07cmh8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwoZGg9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTS5sYW5lc3w9ZixyaHw9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIFhoKGEpe3ZhciBiPVVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChkaD0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIFloKCl7fVxuZnVuY3Rpb24gWmgoYSxiKXt2YXIgYz1NLGQ9VWgoKSxlPWIoKSxmPSFIZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLGRoPSEwKTtkPWQucXVldWU7JGgoYWkuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09TyYmTy5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2JpKDksY2kuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09USl0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oSGgmMzApfHxkaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gZGkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1NLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE0udXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gY2koYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtlaShiKSYmZmkoYSl9ZnVuY3Rpb24gYWkoYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7ZWkoYikmJmZpKGEpfSl9ZnVuY3Rpb24gZWkoYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hSGUoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gZmkoYSl7dmFyIGI9aWgoYSwxKTtudWxsIT09YiYmZ2koYixhLDEsLTEpfVxuZnVuY3Rpb24gaGkoYSl7dmFyIGI9VGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpWaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPWlpLmJpbmQobnVsbCxNLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBiaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1NLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE0udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gamkoKXtyZXR1cm4gVWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIGtpKGEsYixjLGQpe3ZhciBlPVRoKCk7TS5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9YmkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe3ZhciBlPVVoKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU4pe3ZhciBnPU4ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmTWgoZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9YmkoYixjLGYsZCk7cmV0dXJufX1NLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1iaSgxfGIsYyxmLGQpfWZ1bmN0aW9uIG1pKGEsYil7cmV0dXJuIGtpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uICRoKGEsYil7cmV0dXJuIGxpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIG5pKGEsYil7cmV0dXJuIGxpKDQsMixhLGIpfWZ1bmN0aW9uIG9pKGEsYil7cmV0dXJuIGxpKDQsNCxhLGIpfVxuZnVuY3Rpb24gcGkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBxaShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIGxpKDQsNCxwaS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiByaSgpe31mdW5jdGlvbiBzaShhLGIpe3ZhciBjPVVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZNaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRpKGEsYil7dmFyIGM9VWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJk1oKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIHVpKGEsYixjKXtpZigwPT09KEhoJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSxkaD0hMCksYS5tZW1vaXplZFN0YXRlPWM7SGUoYyxiKXx8KGM9eWMoKSxNLmxhbmVzfD1jLHJofD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiB2aShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1HaC50cmFuc2l0aW9uO0doLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxHaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIHdpKCl7cmV0dXJuIFVoKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIHhpKGEsYixjKXt2YXIgZD15aShhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZih6aShhKSlBaShiLGMpO2Vsc2UgaWYoYz1oaChhLGIsYyxkKSxudWxsIT09Yyl7dmFyIGU9UigpO2dpKGMsYSxkLGUpO0JpKGMsYixkKX19XG5mdW5jdGlvbiBpaShhLGIsYyl7dmFyIGQ9eWkoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoemkoYSkpQWkoYixlKTtlbHNle3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoSGUoaCxnKSl7dmFyIGs9Yi5pbnRlcmxlYXZlZDtudWxsPT09az8oZS5uZXh0PWUsZ2goYikpOihlLm5leHQ9ay5uZXh0LGsubmV4dD1lKTtiLmludGVybGVhdmVkPWU7cmV0dXJufX1jYXRjaChsKXt9ZmluYWxseXt9Yz1oaChhLGIsZSxkKTtudWxsIT09YyYmKGU9UigpLGdpKGMsYSxkLGUpLEJpKGMsYixkKSl9fVxuZnVuY3Rpb24gemkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1NfHxudWxsIT09YiYmYj09PU19ZnVuY3Rpb24gQWkoYSxiKXtKaD1JaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEJpKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG52YXIgUmg9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOlAsdXNlQ29udGV4dDpQLHVzZUVmZmVjdDpQLHVzZUltcGVyYXRpdmVIYW5kbGU6UCx1c2VJbnNlcnRpb25FZmZlY3Q6UCx1c2VMYXlvdXRFZmZlY3Q6UCx1c2VNZW1vOlAsdXNlUmVkdWNlcjpQLHVzZVJlZjpQLHVzZVN0YXRlOlAsdXNlRGVidWdWYWx1ZTpQLHVzZURlZmVycmVkVmFsdWU6UCx1c2VUcmFuc2l0aW9uOlAsdXNlTXV0YWJsZVNvdXJjZTpQLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlAsdXNlSWQ6UCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LE9oPXtyZWFkQ29udGV4dDplaCx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe1RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6ZWgsdXNlRWZmZWN0Om1pLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBraSg0MTk0MzA4LFxuNCxwaS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGtpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2koNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1UaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1UaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXhpLmJpbmQobnVsbCxNLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cblRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOmhpLHVzZURlYnVnVmFsdWU6cmksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gVGgoKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1oaSghMSksYj1hWzBdO2E9dmkuYmluZChudWxsLGFbMV0pO1RoKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TSxlPVRoKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVEpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KEhoJjMwKXx8ZGkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9ZjttaShhaS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2JpKDksY2kuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1UaCgpLGI9US5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPXNnO3ZhciBkPXJnO2M9KGQmfigxPDwzMi1vYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1LaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9TGgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFBoPXtyZWFkQ29udGV4dDplaCx1c2VDYWxsYmFjazpzaSx1c2VDb250ZXh0OmVoLHVzZUVmZmVjdDokaCx1c2VJbXBlcmF0aXZlSGFuZGxlOnFpLHVzZUluc2VydGlvbkVmZmVjdDpuaSx1c2VMYXlvdXRFZmZlY3Q6b2ksdXNlTWVtbzp0aSx1c2VSZWR1Y2VyOldoLHVzZVJlZjpqaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBXaChWaCl9LFxudXNlRGVidWdWYWx1ZTpyaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVVoKCk7cmV0dXJuIHVpKGIsTi5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9V2goVmgpWzBdLGI9VWgoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOlloLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlpoLHVzZUlkOndpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sUWg9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOnNpLHVzZUNvbnRleHQ6ZWgsdXNlRWZmZWN0OiRoLHVzZUltcGVyYXRpdmVIYW5kbGU6cWksdXNlSW5zZXJ0aW9uRWZmZWN0Om5pLHVzZUxheW91dEVmZmVjdDpvaSx1c2VNZW1vOnRpLHVzZVJlZHVjZXI6WGgsdXNlUmVmOmppLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIFhoKFZoKX0sdXNlRGVidWdWYWx1ZTpyaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVVoKCk7cmV0dXJuIG51bGw9PT1cbk4/Yi5tZW1vaXplZFN0YXRlPWE6dWkoYixOLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1YaChWaClbMF0sYj1VaCgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6WWgsdXNlU3luY0V4dGVybmFsU3RvcmU6WmgsdXNlSWQ6d2ksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBDaShhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn1mdW5jdGlvbiBEaShhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgRWk9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9UigpLGU9eWkoYSksZj1taChkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPW5oKGEsZixlKTtudWxsIT09YiYmKGdpKGIsYSxlLGQpLG9oKGIsYSxlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9UigpLGU9eWkoYSksZj1taChkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9bmgoYSxmLGUpO251bGwhPT1iJiYoZ2koYixhLGUsZCksb2goYixhLGUpKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1SKCksZD1cbnlpKGEpLGU9bWgoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtiPW5oKGEsZSxkKTtudWxsIT09YiYmKGdpKGIsYSxkLGMpLG9oKGIsYSxkKSl9fTtmdW5jdGlvbiBGaShhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFJZShjLGQpfHwhSWUoZSxmKTohMH1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD0hMSxlPVZmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPWVoKGYpOihlPVpmKGIpP1hmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1lmKGEsZSk6VmYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1FaTthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEhpKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZFaS5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIElpKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9e307a2goYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1laChmKTooZj1aZihiKT9YZjpILmN1cnJlbnQsZS5jb250ZXh0PVlmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihEaShhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZFaS5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxxaChhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX1mdW5jdGlvbiBKaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1QYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZSxkaWdlc3Q6bnVsbH19XG5mdW5jdGlvbiBLaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1mdW5jdGlvbiBMaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgTWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gTmkoYSxiLGMpe2M9bWgoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7T2l8fChPaT0hMCxQaT1kKTtMaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFFpKGEsYixjKXtjPW1oKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0xpKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtMaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVJpP1JpPW5ldyBTZXQoW3RoaXNdKTpSaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBNaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVRpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFVpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9bWgoLTEsMSksYi50YWc9MixuaChjLGIsMSkpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgV2k9dWEuUmVhY3RDdXJyZW50T3duZXIsZGg9ITE7ZnVuY3Rpb24gWGkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9WZyhiLG51bGwsYyxkKTpVZyhiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFlpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtjaChiLGUpO2Q9TmgoYSxiLGMsZCxmLGUpO2M9U2goKTtpZihudWxsIT09YSYmIWRoKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsWmkoYSxiLGUpO0kmJmMmJnZnKGIpO2IuZmxhZ3N8PTE7WGkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiAkaShhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFhaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixiaihhLGIsZixkLGUpO2E9UmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpJZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuIFppKGEsYixlKX1iLmZsYWdzfD0xO2E9UGcoZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBiaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSWUoZixkKSYmYS5yZWY9PT1iLnJlZilpZihkaD0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYoZGg9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxaaShhLGIsZSl9cmV0dXJuIGNqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBkaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcoZWosZmopLGZqfD1jO2Vsc2V7aWYoMD09PShjJjEwNzM3NDE4MjQpKXJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcoZWosZmopLGZqfD1hLG51bGw7Yi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmM7Ryhlaixmaik7Zmp8PWR9ZWxzZSBudWxsIT09XG5mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKGVqLGZqKSxmanw9ZDtYaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBnaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBjaihhLGIsYyxkLGUpe3ZhciBmPVpmKGMpP1hmOkguY3VycmVudDtmPVlmKGIsZik7Y2goYixlKTtjPU5oKGEsYixjLGQsZixlKTtkPVNoKCk7aWYobnVsbCE9PWEmJiFkaClyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLFppKGEsYixlKTtJJiZkJiZ2ZyhiKTtiLmZsYWdzfD0xO1hpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGooYSxiLGMsZCxlKXtpZihaZihjKSl7dmFyIGY9ITA7Y2coYil9ZWxzZSBmPSExO2NoKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKWlqKGEsYiksR2koYixjLGQpLElpKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPWVoKGwpOihsPVpmKGMpP1hmOkguY3VycmVudCxsPVlmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09ZHx8ayE9PWwpJiZIaShiLGcsZCxsKTtqaD0hMTt2YXIgcj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO3FoKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxyIT09a3x8V2YuY3VycmVudHx8amg/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRGkoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPWpofHxGaShiLGMsaCxkLHIsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTtsaChhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkNpKGIudHlwZSxoKTtnLnByb3BzPWw7cT1iLnBlbmRpbmdQcm9wcztyPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPWVoKGspOihrPVpmKGMpP1hmOkguY3VycmVudCxrPVlmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cXx8ciE9PWspJiZIaShiLGcsZCxrKTtqaD0hMTtyPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7cWgoYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT1xfHxyIT09bnx8V2YuY3VycmVudHx8amg/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoRGkoYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPWpofHxGaShiLGMsbCxkLHIsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PVxuYS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4gamooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gamooYSxiLGMsZCxlLGYpe2dqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZkZyhiLGMsITEpLFppKGEsYixmKTtkPWIuc3RhdGVOb2RlO1dpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9VWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1VZyhiLG51bGwsaCxmKSk6WGkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmZGcoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBraihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P2FnKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmFnKGEsYi5jb250ZXh0LCExKTt5aChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBsaihhLGIsYyxkLGUpe0lnKCk7SmcoZSk7Yi5mbGFnc3w9MjU2O1hpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBtaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIG5qKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1cbmZ1bmN0aW9uIG9qKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPUwuY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhMLGUmMSk7aWYobnVsbD09PWEpe0VnKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtnPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmd9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZyk6Zj1waihnLGQsMCxudWxsKSxhPVRnKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPW5qKGMpLGIubWVtb2l6ZWRTdGF0ZT1taixhKTpxaihiLGcpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lJiYoaD1lLmRlaHlkcmF0ZWQsbnVsbCE9PWgpKXJldHVybiByaihhLGIsZyxkLGgsZSxjKTtpZihmKXtmPWQuZmFsbGJhY2s7Zz1iLm1vZGU7ZT1hLmNoaWxkO2g9ZS5zaWJsaW5nO3ZhciBrPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn07MD09PShnJjEpJiZiLmNoaWxkIT09ZT8oZD1iLmNoaWxkLGQuY2hpbGRMYW5lcz0wLGQucGVuZGluZ1Byb3BzPWssYi5kZWxldGlvbnM9bnVsbCk6KGQ9UGcoZSxrKSxkLnN1YnRyZWVGbGFncz1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWg/Zj1QZyhoLGYpOihmPVRnKGYsZyxjLG51bGwpLGYuZmxhZ3N8PTIpO2YucmV0dXJuPVxuYjtkLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDtkPWY7Zj1iLmNoaWxkO2c9YS5jaGlsZC5tZW1vaXplZFN0YXRlO2c9bnVsbD09PWc/bmooYyk6e2Jhc2VMYW5lczpnLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9O2YubWVtb2l6ZWRTdGF0ZT1nO2YuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmM7Yi5tZW1vaXplZFN0YXRlPW1qO3JldHVybiBkfWY9YS5jaGlsZDthPWYuc2libGluZztkPVBnKGYse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0pOzA9PT0oYi5tb2RlJjEpJiYoZC5sYW5lcz1jKTtkLnJldHVybj1iO2Quc2libGluZz1udWxsO251bGwhPT1hJiYoYz1iLmRlbGV0aW9ucyxudWxsPT09Yz8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpjLnB1c2goYSkpO2IuY2hpbGQ9ZDtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gZH1cbmZ1bmN0aW9uIHFqKGEsYil7Yj1waih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gc2ooYSxiLGMsZCl7bnVsbCE9PWQmJkpnKGQpO1VnKGIsYS5jaGlsZCxudWxsLGMpO2E9cWooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHJqKGEsYixjLGQsZSxmLGcpe2lmKGMpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LGQ9S2koRXJyb3IocCg0MjIpKSksc2ooYSxiLGcsZCk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXBqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPVRnKGYsZSxnLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmVWcoYixhLmNoaWxkLG51bGwsZyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPW5qKGcpO2IubWVtb2l6ZWRTdGF0ZT1tajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSlyZXR1cm4gc2ooYSxiLGcsbnVsbCk7aWYoXCIkIVwiPT09ZS5kYXRhKXtkPWUubmV4dFNpYmxpbmcmJmUubmV4dFNpYmxpbmcuZGF0YXNldDtcbmlmKGQpdmFyIGg9ZC5kZ3N0O2Q9aDtmPUVycm9yKHAoNDE5KSk7ZD1LaShmLGQsdm9pZCAwKTtyZXR1cm4gc2ooYSxiLGcsZCl9aD0wIT09KGcmYS5jaGlsZExhbmVzKTtpZihkaHx8aCl7ZD1RO2lmKG51bGwhPT1kKXtzd2l0Y2goZyYtZyl7Y2FzZSA0OmU9MjticmVhaztjYXNlIDE2OmU9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZT0zMjticmVhaztjYXNlIDUzNjg3MDkxMjplPTI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmU9MH1lPTAhPT0oZSYoZC5zdXNwZW5kZWRMYW5lc3xnKSk/MDplO1xuMCE9PWUmJmUhPT1mLnJldHJ5TGFuZSYmKGYucmV0cnlMYW5lPWUsaWgoYSxlKSxnaShkLGEsZSwtMSkpfXRqKCk7ZD1LaShFcnJvcihwKDQyMSkpKTtyZXR1cm4gc2ooYSxiLGcsZCl9aWYoXCIkP1wiPT09ZS5kYXRhKXJldHVybiBiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9dWouYmluZChudWxsLGEpLGUuX3JlYWN0UmV0cnk9YixudWxsO2E9Zi50cmVlQ29udGV4dDt5Zz1MZihlLm5leHRTaWJsaW5nKTt4Zz1iO0k9ITA7emc9bnVsbDtudWxsIT09YSYmKG9nW3BnKytdPXJnLG9nW3BnKytdPXNnLG9nW3BnKytdPXFnLHJnPWEuaWQsc2c9YS5vdmVyZmxvdyxxZz1iKTtiPXFqKGIsZC5jaGlsZHJlbik7Yi5mbGFnc3w9NDA5NjtyZXR1cm4gYn1mdW5jdGlvbiB2aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO2JoKGEucmV0dXJuLGIsYyl9XG5mdW5jdGlvbiB3aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24geGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtYaShhLGIsZC5jaGlsZHJlbixjKTtkPUwuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ2aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXZqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhMLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1DaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3dqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09Q2goYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXdqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOndqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlqKGEsYil7MD09PShiLm1vZGUmMSkmJm51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpfWZ1bmN0aW9uIFppKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtyaHw9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9UGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVBnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB5aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6a2ooYik7SWcoKTticmVhaztjYXNlIDU6QWgoYik7YnJlYWs7Y2FzZSAxOlpmKGIudHlwZSkmJmNnKGIpO2JyZWFrO2Nhc2UgNDp5aChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0coV2csZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKEwsTC5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBvaihhLGIsYyk7RyhMLEwuY3VycmVudCYxKTthPVppKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhMLEwuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4geGooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coTCxMLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxkaihhLGIsYyl9cmV0dXJuIFppKGEsYixjKX12YXIgemosQWosQmosQ2o7XG56aj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07QWo9ZnVuY3Rpb24oKXt9O1xuQmo9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO3hoKHVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXViKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtDaj1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIERqKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFMoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBFaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUyhiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7emgoKTtFKFdmKTtFKEgpO0VoKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUdnKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09emcmJihGaih6Zyksemc9bnVsbCkpO0FqKGEsYik7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6QmgoYik7dmFyIGU9eGgod2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQmooYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1MoYik7cmV0dXJuIG51bGx9YT14aCh1aC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtkW1BmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRChcImludmFsaWRcIixkKX11YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2RiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QmYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1rYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW09mXT1iO2FbUGZdPWQ7emooYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dmIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1nYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dWIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/c2IoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm5iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmb2IoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm9iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnRhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7ZGIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1TKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPXhoKHdoLmN1cnJlbnQpO3hoKHVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbnhnLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW09mXT1iLGIuc3RhdGVOb2RlPWR9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoTCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7aWYoSSYmbnVsbCE9PXlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpSGcoKSxJZygpLGIuZmxhZ3N8PTk4NTYwLGY9ITE7ZWxzZSBpZihmPUdnKGIpLG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtpZihudWxsPT09XG5hKXtpZighZil0aHJvdyBFcnJvcihwKDMxOCkpO2Y9Yi5tZW1vaXplZFN0YXRlO2Y9bnVsbCE9PWY/Zi5kZWh5ZHJhdGVkOm51bGw7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTcpKTtmW09mXT1ifWVsc2UgSWcoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1MoYik7Zj0hMX1lbHNlIG51bGwhPT16ZyYmKEZqKHpnKSx6Zz1udWxsKSxmPSEwO2lmKCFmKXJldHVybiBiLmZsYWdzJjY1NTM2P2I6bnVsbH1pZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtkIT09KG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKSYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShMLmN1cnJlbnQmMSk/MD09PVQmJihUPTMpOnRqKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiB6aCgpLFxuQWooYSxiKSxudWxsPT09YSYmc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUyhiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGFoKGIudHlwZS5fY29udGV4dCksUyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMTk6RShMKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUyhiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKURqKGYsITEpO2Vsc2V7aWYoMCE9PVR8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1DaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O0RqKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LFxuZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhMLEwuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9XG5hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPkdqJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRGooZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9Q2goZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxEaihmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUyhiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+R2omJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRGooZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPVxuYixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUIoKSxiLnNpYmxpbmc9bnVsbCxjPUwuY3VycmVudCxHKEwsZD9jJjF8MjpjJjEpLGI7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIEhqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oZmomMTA3Mzc0MTgyNCkmJihTKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UyhiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIElqKGEsYil7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiB6aCgpLEUoV2YpLEUoSCksRWgoKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBCaChiKSxudWxsO2Nhc2UgMTM6RShMKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7SWcoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShMKSxudWxsO2Nhc2UgNDpyZXR1cm4gemgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGFoKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIEhqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEpqPSExLFU9ITEsS2o9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVj1udWxsO2Z1bmN0aW9uIExqKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VyhhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBNaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtXKGEsYixkKX19dmFyIE5qPSExO1xuZnVuY3Rpb24gT2ooYSxiKXtDZj1kZDthPU1lKCk7aWYoTmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goRil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCxxPWEscj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7cSE9PWN8fDAhPT1lJiYzIT09cS5ub2RlVHlwZXx8KGg9ZytlKTtxIT09Znx8MCE9PWQmJjMhPT1xLm5vZGVUeXBlfHwoaz1nK2QpOzM9PT1xLm5vZGVUeXBlJiYoZys9XG5xLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT1xLmZpcnN0Q2hpbGQpKWJyZWFrO3I9cTtxPXl9Zm9yKDs7KXtpZihxPT09YSlicmVhayBiO3I9PT1jJiYrK2w9PT1lJiYoaD1nKTtyPT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9cjtyPXEucGFyZW50Tm9kZX1xPXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtEZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtkZD0hMTtmb3IoVj1iO251bGwhPT1WOylpZihiPVYsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVj1hO2Vsc2UgZm9yKDtudWxsIT09Vjspe2I9Vjt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bil7dmFyIHQ9bi5tZW1vaXplZFByb3BzLEo9bi5tZW1vaXplZFN0YXRlLHg9Yi5zdGF0ZU5vZGUsdz14LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dDpDaShiLnR5cGUsdCksSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT13fWJyZWFrO2Nhc2UgMzp2YXIgdT1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOzE9PT11Lm5vZGVUeXBlP3UudGV4dENvbnRlbnQ9XCJcIjo5PT09dS5ub2RlVHlwZSYmdS5kb2N1bWVudEVsZW1lbnQmJnUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO2JyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goRil7VyhiLGIucmV0dXJuLEYpfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtWPWE7YnJlYWt9Vj1iLnJldHVybn1uPU5qO05qPSExO3JldHVybiBufVxuZnVuY3Rpb24gUGooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmTWooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gUWooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFJqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBTaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsU2ooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltPZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW29mXSxkZWxldGUgYltRZl0sZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBUaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFVqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFRqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBWaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QmYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoVmooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylWaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBXaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspV2ooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBYPW51bGwsWGo9ITE7ZnVuY3Rpb24gWWooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KVpqKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIFpqKGEsYixjKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6VXx8TGooYyxiKTtjYXNlIDY6dmFyIGQ9WCxlPVhqO1g9bnVsbDtZaihhLGIsYyk7WD1kO1hqPWU7bnVsbCE9PVgmJihYaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1YJiYoWGo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0tmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmS2YoYSxjKSxiZChhKSk6S2YoWCxjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVg7ZT1YajtYPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WGo9ITA7XG5ZaihhLGIsYyk7WD1kO1hqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFVJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9NaihjLGIsZyk6MCE9PShmJjQpJiZNaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1ZaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFVJiYoTGooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1coYyxiLGgpfVlqKGEsYixjKTticmVhaztjYXNlIDIxOllqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhVPShkPVUpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsWWooYSxiLGMpLFU9ZCk6WWooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6WWooYSxiLGMpfX1mdW5jdGlvbiBhayhhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBLaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWJrLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gY2soYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1Olg9aC5zdGF0ZU5vZGU7WGo9ITE7YnJlYWsgYTtjYXNlIDM6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1hqPSEwO2JyZWFrIGE7Y2FzZSA0Olg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztYaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVgpdGhyb3cgRXJyb3IocCgxNjApKTtaaihmLGcsZSk7WD1udWxsO1hqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtXKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspZGsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGRrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNrKGIsYSk7ZWsoYSk7aWYoZCY0KXt0cnl7UGooMyxhLGEucmV0dXJuKSxRaigzLGEpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX10cnl7UGooNSxhLGEucmV0dXJuKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMTpjayhiLGEpO2VrKGEpO2QmNTEyJiZudWxsIT09YyYmTGooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmNrKGIsYSk7ZWsoYSk7ZCY1MTImJm51bGwhPT1jJiZMaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7b2IoZSxcIlwiKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJmFiKGUsZik7dmIoaCxnKTt2YXIgbD12YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbT1rW2ddLHE9a1tnKzFdO1wic3R5bGVcIj09PW0/c2IoZSxxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1tP25iKGUscSk6XCJjaGlsZHJlblwiPT09bT9vYihlLHEpOnRhKGUsbSxxLGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpiYihlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciByPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9mYihlLCEhZi5tdWx0aXBsZSx5LCExKTpyIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZmIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtQZl09Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgNjpjayhiLGEpO2VrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7ZT1hLnN0YXRlTm9kZTtmPWEubWVtb2l6ZWRQcm9wczt0cnl7ZS5ub2RlVmFsdWU9Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMzpjayhiLGEpO2VrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2JkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfWJyZWFrO2Nhc2UgNDpjayhiLGEpO2VrKGEpO2JyZWFrO2Nhc2UgMTM6Y2soYixhKTtlayhhKTtlPWEuY2hpbGQ7ZS5mbGFncyY4MTkyJiYoZj1udWxsIT09ZS5tZW1vaXplZFN0YXRlLGUuc3RhdGVOb2RlLmlzSGlkZGVuPWYsIWZ8fFxubnVsbCE9PWUuYWx0ZXJuYXRlJiZudWxsIT09ZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZXx8KGZrPUIoKSkpO2QmNCYmYWsoYSk7YnJlYWs7Y2FzZSAyMjptPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhVPShsPVUpfHxtLGNrKGIsYSksVT1sKTpjayhiLGEpO2VrKGEpO2lmKGQmODE5Mil7bD1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKChhLnN0YXRlTm9kZS5pc0hpZGRlbj1sKSYmIW0mJjAhPT0oYS5tb2RlJjEpKWZvcihWPWEsbT1hLmNoaWxkO251bGwhPT1tOyl7Zm9yKHE9Vj1tO251bGwhPT1WOyl7cj1WO3k9ci5jaGlsZDtzd2l0Y2goci50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpQaig0LHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpMaihyLHIucmV0dXJuKTt2YXIgbj1yLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsVW5tb3VudCl7ZD1yO2M9ci5yZXR1cm47dHJ5e2I9ZCxuLnByb3BzPVxuYi5tZW1vaXplZFByb3BzLG4uc3RhdGU9Yi5tZW1vaXplZFN0YXRlLG4uY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtXKGQsYyx0KX19YnJlYWs7Y2FzZSA1OkxqKHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PXIubWVtb2l6ZWRTdGF0ZSl7Z2socSk7Y29udGludWV9fW51bGwhPT15Pyh5LnJldHVybj1yLFY9eSk6Z2socSl9bT1tLnNpYmxpbmd9YTpmb3IobT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT1tKXttPXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbD8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9XG5yYihcImRpc3BsYXlcIixnKSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX19ZWxzZSBpZig2PT09cS50YWcpe2lmKG51bGw9PT1tKXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bD9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTttPT09cSYmKG09bnVsbCk7cT1xLnJldHVybn1tPT09cSYmKG09bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ319YnJlYWs7Y2FzZSAxOTpjayhiLGEpO2VrKGEpO2QmNCYmYWsoYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmNrKGIsXG5hKSxlayhhKX19ZnVuY3Rpb24gZWsoYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihUaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG9iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1VaihhKTtXaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9VWooYSk7VmooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1coYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gaGsoYSxiLGMpe1Y9YTtpayhhLGIsYyl9XG5mdW5jdGlvbiBpayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1WOyl7dmFyIGU9VixmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8Smo7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFU7aD1Kajt2YXIgbD1VO0pqPWc7aWYoKFU9aykmJiFsKWZvcihWPWU7bnVsbCE9PVY7KWc9VixrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9qayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxWPWspOmprKGUpO2Zvcig7bnVsbCE9PWY7KVY9ZixpayhmLGIsYyksZj1mLnNpYmxpbmc7Vj1lO0pqPWg7VT1sfWtrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFY9Zik6a2soYSxiLGMpfX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VXx8UWooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhVSlpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpDaShiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZzaChiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9c2goYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciBxPW0uZGVoeWRyYXRlZDtudWxsIT09cSYmYmQocSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6Y2FzZSAyNTpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VXx8Yi5mbGFncyY1MTImJlJqKGIpfWNhdGNoKHIpe1coYixiLnJldHVybixyKX19aWYoYj09PWEpe1Y9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fWZ1bmN0aW9uIGdrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19XG5mdW5jdGlvbiBqayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9Vjt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtRaig0LGIpfWNhdGNoKGspe1coYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtXKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1JqKGIpfWNhdGNoKGspe1coYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7UmooYil9Y2F0Y2goayl7VyhiLGcsayl9fX1jYXRjaChrKXtXKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Y9aDticmVha31WPWIucmV0dXJufX1cbnZhciBsaz1NYXRoLmNlaWwsbWs9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixuaz11YS5SZWFjdEN1cnJlbnRPd25lcixvaz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsUT1udWxsLFk9bnVsbCxaPTAsZmo9MCxlaj1VZigwKSxUPTAscGs9bnVsbCxyaD0wLHFrPTAscms9MCxzaz1udWxsLHRrPW51bGwsZms9MCxHaj1JbmZpbml0eSx1az1udWxsLE9pPSExLFBpPW51bGwsUmk9bnVsbCx2az0hMSx3az1udWxsLHhrPTAseWs9MCx6az1udWxsLEFrPS0xLEJrPTA7ZnVuY3Rpb24gUigpe3JldHVybiAwIT09KEsmNik/QigpOi0xIT09QWs/QWs6QWs9QigpfVxuZnVuY3Rpb24geWkoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09S2cudHJhbnNpdGlvbilyZXR1cm4gMD09PUJrJiYoQms9eWMoKSksQms7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjpqZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIGdpKGEsYixjLGQpe2lmKDUwPHlrKXRocm93IHlrPTAsems9bnVsbCxFcnJvcihwKDE4NSkpO0FjKGEsYyxkKTtpZigwPT09KEsmMil8fGEhPT1RKWE9PT1RJiYoMD09PShLJjIpJiYocWt8PWMpLDQ9PT1UJiZDayhhLFopKSxEayhhLGQpLDE9PT1jJiYwPT09SyYmMD09PShiLm1vZGUmMSkmJihHaj1CKCkrNTAwLGZnJiZqZygpKX1cbmZ1bmN0aW9uIERrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7d2MoYSxiKTt2YXIgZD11YyhhLGE9PT1RP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmJjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYmMoYyk7aWYoMT09PWIpMD09PWEudGFnP2lnKEVrLmJpbmQobnVsbCxhKSk6aGcoRWsuYmluZChudWxsLGEpKSxKZihmdW5jdGlvbigpezA9PT0oSyY2KSYmamcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChEYyhkKSl7Y2FzZSAxOmM9ZmM7YnJlYWs7Y2FzZSA0OmM9Z2M7YnJlYWs7Y2FzZSAxNjpjPWhjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9amM7YnJlYWs7ZGVmYXVsdDpjPWhjfWM9RmsoYyxHay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gR2soYSxiKXtBaz0tMTtCaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKEhrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD11YyhhLGE9PT1RP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUlrKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPUprKCk7aWYoUSE9PWF8fFohPT1iKXVrPW51bGwsR2o9QigpKzUwMCxLayhhLGIpO2RvIHRyeXtMaygpO2JyZWFrfWNhdGNoKGgpe01rKGEsaCl9d2hpbGUoMSk7JGcoKTttay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooUT1udWxsLFo9MCxiPVQpfWlmKDAhPT1iKXsyPT09YiYmKGU9eGMoYSksMCE9PWUmJihkPWUsYj1OayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1wayxLayhhLDApLENrKGEsZCksRGsoYSxCKCkpLGM7aWYoNj09PWIpQ2soYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFPayhlKSYmKGI9SWsoYSxkKSwyPT09YiYmKGY9eGMoYSksMCE9PWYmJihkPWYsYj1OayhhLGYpKSksMT09PWIpKXRocm93IGM9cGssS2soYSwwKSxDayhhLGQpLERrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UGsoYSx0ayx1ayk7YnJlYWs7Y2FzZSAzOkNrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWZrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT11YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe1IoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUZmKFBrLmJpbmQobnVsbCxhLHRrLHVrKSxiKTticmVha31QayhhLHRrLHVrKTticmVhaztjYXNlIDQ6Q2soYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1vYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpsayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1GZihQay5iaW5kKG51bGwsYSx0ayx1ayksZCk7YnJlYWt9UGsoYSx0ayx1ayk7YnJlYWs7Y2FzZSA1OlBrKGEsdGssdWspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1EayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Hay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE5rKGEsYil7dmFyIGM9c2s7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoS2soYSxiKS5mbGFnc3w9MjU2KTthPUlrKGEsYik7MiE9PWEmJihiPXRrLHRrPWMsbnVsbCE9PWImJkZqKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBGaihhKXtudWxsPT09dGs/dGs9YTp0ay5wdXNoLmFwcGx5KHRrLGEpfVxuZnVuY3Rpb24gT2soYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFIZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIENrKGEsYil7YiY9fnJrO2ImPX5xazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW9jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBFayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtIaygpO3ZhciBiPXVjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBEayhhLEIoKSksbnVsbDt2YXIgYz1JayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXhjKGEpOzAhPT1kJiYoYj1kLGM9TmsoYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1wayxLayhhLDApLENrKGEsYiksRGsoYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1BrKGEsdGssdWspO0RrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFFrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKEdqPUIoKSs1MDAsZmcmJmpnKCkpfX1mdW5jdGlvbiBSayhhKXtudWxsIT09d2smJjA9PT13ay50YWcmJjA9PT0oSyY2KSYmSGsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9b2sudHJhbnNpdGlvbixkPUM7dHJ5e2lmKG9rLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLG9rLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZqZygpfX1mdW5jdGlvbiBIaigpe2ZqPWVqLmN1cnJlbnQ7RShlail9XG5mdW5jdGlvbiBLayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxHZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiYkZigpO2JyZWFrO2Nhc2UgMzp6aCgpO0UoV2YpO0UoSCk7RWgoKTticmVhaztjYXNlIDU6QmgoZCk7YnJlYWs7Y2FzZSA0OnpoKCk7YnJlYWs7Y2FzZSAxMzpFKEwpO2JyZWFrO2Nhc2UgMTk6RShMKTticmVhaztjYXNlIDEwOmFoKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOkhqKCl9Yz1jLnJldHVybn1RPWE7WT1hPVBnKGEuY3VycmVudCxudWxsKTtaPWZqPWI7VD0wO3BrPW51bGw7cms9cWs9cmg9MDt0az1zaz1udWxsO2lmKG51bGwhPT1maCl7Zm9yKGI9XG4wO2I8ZmgubGVuZ3RoO2IrKylpZihjPWZoW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfWZoPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBNayhhLGIpe2Rve3ZhciBjPVk7dHJ5eyRnKCk7RmguY3VycmVudD1SaDtpZihJaCl7Zm9yKHZhciBkPU0ubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9SWg9ITF9SGg9MDtPPU49TT1udWxsO0poPSExO0toPTA7bmsuY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Q9MTtwaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgscT1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT1xfHwxMT09PXF8fDE1PT09cSkpe3ZhciByPW0uYWx0ZXJuYXRlO3I/KG0udXBkYXRlUXVldWU9ci51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9ci5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz1yLmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1VaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztWaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZTaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO2IudXBkYXRlUXVldWU9dH1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1NpKGYsbCxiKTt0aigpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1VaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7VmkoSixnLGgsZixiKTtKZyhKaShrLGgpKTticmVhayBhfX1mPWs9SmkoayxoKTs0IT09VCYmKFQ9Mik7bnVsbD09PXNrP3NrPVtmXTpzay5wdXNoKGYpO2Y9Zztkb3tzd2l0Y2goZi50YWcpe2Nhc2UgMzpmLmZsYWdzfD02NTUzNjtcbmImPS1iO2YubGFuZXN8PWI7dmFyIHg9TmkoZixrLGIpO3BoKGYseCk7YnJlYWsgYTtjYXNlIDE6aD1rO3ZhciB3PWYudHlwZSx1PWYuc3RhdGVOb2RlO2lmKDA9PT0oZi5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHUuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Uml8fCFSaS5oYXModSkpKSl7Zi5mbGFnc3w9NjU1MzY7YiY9LWI7Zi5sYW5lc3w9Yjt2YXIgRj1RaShmLGgsYik7cGgoZixGKTticmVhayBhfX1mPWYucmV0dXJufXdoaWxlKG51bGwhPT1mKX1TayhjKX1jYXRjaChuYSl7Yj1uYTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEprKCl7dmFyIGE9bWsuY3VycmVudDttay5jdXJyZW50PVJoO3JldHVybiBudWxsPT09YT9SaDphfVxuZnVuY3Rpb24gdGooKXtpZigwPT09VHx8Mz09PVR8fDI9PT1UKVQ9NDtudWxsPT09UXx8MD09PShyaCYyNjg0MzU0NTUpJiYwPT09KHFrJjI2ODQzNTQ1NSl8fENrKFEsWil9ZnVuY3Rpb24gSWsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9SmsoKTtpZihRIT09YXx8WiE9PWIpdWs9bnVsbCxLayhhLGIpO2RvIHRyeXtUaygpO2JyZWFrfWNhdGNoKGUpe01rKGEsZSl9d2hpbGUoMSk7JGcoKTtLPWM7bWsuY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7UT1udWxsO1o9MDtyZXR1cm4gVH1mdW5jdGlvbiBUaygpe2Zvcig7bnVsbCE9PVk7KVVrKFkpfWZ1bmN0aW9uIExrKCl7Zm9yKDtudWxsIT09WSYmIWNjKCk7KVVrKFkpfWZ1bmN0aW9uIFVrKGEpe3ZhciBiPVZrKGEuYWx0ZXJuYXRlLGEsZmopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9TayhhKTpZPWI7bmsuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gU2soYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9RWooYyxiLGZqKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPUlqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7VD02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VCYmKFQ9NSl9ZnVuY3Rpb24gUGsoYSxiLGMpe3ZhciBkPUMsZT1vay50cmFuc2l0aW9uO3RyeXtvay50cmFuc2l0aW9uPW51bGwsQz0xLFdrKGEsYixjLGQpfWZpbmFsbHl7b2sudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdrKGEsYixjLGQpe2RvIEhrKCk7d2hpbGUobnVsbCE9PXdrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0JjKGEsZik7YT09PVEmJihZPVE9bnVsbCxaPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8dmt8fCh2az0hMCxGayhoYyxmdW5jdGlvbigpe0hrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPW9rLnRyYW5zaXRpb247b2sudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9SztLfD00O25rLmN1cnJlbnQ9bnVsbDtPaihhLGMpO2RrKGMsYSk7T2UoRGYpO2RkPSEhQ2Y7RGY9Q2Y9bnVsbDthLmN1cnJlbnQ9YztoayhjLGEsZSk7ZGMoKTtLPWg7Qz1nO29rLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3ZrJiYodms9ITEsd2s9YSx4az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoUmk9bnVsbCk7bWMoYy5zdGF0ZU5vZGUsZCk7RGsoYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKyllPWJbY10sZChlLnZhbHVlLHtjb21wb25lbnRTdGFjazplLnN0YWNrLGRpZ2VzdDplLmRpZ2VzdH0pO2lmKE9pKXRocm93IE9pPSExLGE9UGksUGk9bnVsbCxhOzAhPT0oeGsmMSkmJjAhPT1hLnRhZyYmSGsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09ems/eWsrKzooeWs9MCx6az1hKTp5az0wO2pnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBIaygpe2lmKG51bGwhPT13ayl7dmFyIGE9RGMoeGspLGI9b2sudHJhbnNpdGlvbixjPUM7dHJ5e29rLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09d2spdmFyIGQ9ITE7ZWxzZXthPXdrO3drPW51bGw7eGs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFY9YS5jdXJyZW50O251bGwhPT1WOyl7dmFyIGY9VixnPWYuY2hpbGQ7aWYoMCE9PShWLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihWPWw7bnVsbCE9PVY7KXt2YXIgbT1WO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpQaig4LG0sZil9dmFyIHE9bS5jaGlsZDtpZihudWxsIT09cSlxLnJldHVybj1tLFY9cTtlbHNlIGZvcig7bnVsbCE9PVY7KXttPVY7dmFyIHI9bS5zaWJsaW5nLHk9bS5yZXR1cm47U2oobSk7aWYobT09PVxubCl7Vj1udWxsO2JyZWFrfWlmKG51bGwhPT1yKXtyLnJldHVybj15O1Y9cjticmVha31WPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHQ9bi5jaGlsZDtpZihudWxsIT09dCl7bi5jaGlsZD1udWxsO2Rve3ZhciBKPXQuc2libGluZzt0LnNpYmxpbmc9bnVsbDt0PUp9d2hpbGUobnVsbCE9PXQpfX1WPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVj1nO2Vsc2UgYjpmb3IoO251bGwhPT1WOyl7Zj1WO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UGooOSxmLGYucmV0dXJuKX12YXIgeD1mLnNpYmxpbmc7aWYobnVsbCE9PXgpe3gucmV0dXJuPWYucmV0dXJuO1Y9eDticmVhayBifVY9Zi5yZXR1cm59fXZhciB3PWEuY3VycmVudDtmb3IoVj13O251bGwhPT1WOyl7Zz1WO3ZhciB1PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxudSl1LnJldHVybj1nLFY9dTtlbHNlIGI6Zm9yKGc9dztudWxsIT09Vjspe2g9VjtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGgpfX1jYXRjaChuYSl7VyhoLGgucmV0dXJuLG5hKX1pZihoPT09Zyl7Vj1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtWPUY7YnJlYWsgYn1WPWgucmV0dXJufX1LPWU7amcoKTtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Qb3N0Q29tbWl0RmliZXJSb290KGtjLGEpfWNhdGNoKG5hKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxvay50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFhrKGEsYixjKXtiPUppKGMsYik7Yj1OaShhLGIsMSk7YT1uaChhLGIsMSk7Yj1SKCk7bnVsbCE9PWEmJihBYyhhLDEsYiksRGsoYSxiKSl9XG5mdW5jdGlvbiBXKGEsYixjKXtpZigzPT09YS50YWcpWGsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7WGsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Uml8fCFSaS5oYXMoZCkpKXthPUppKGMsYSk7YT1RaShiLGEsMSk7Yj1uaChiLGEsMSk7YT1SKCk7bnVsbCE9PWImJihBYyhiLDEsYSksRGsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gVGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPVIoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7UT09PWEmJihaJmMpPT09YyYmKDQ9PT1UfHwzPT09VCYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5CKCktZms/S2soYSwwKTpya3w9Yyk7RGsoYSxiKX1mdW5jdGlvbiBZayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXNjLHNjPDw9MSwwPT09KHNjJjEzMDAyMzQyNCkmJihzYz00MTk0MzA0KSkpO3ZhciBjPVIoKTthPWloKGEsYik7bnVsbCE9PWEmJihBYyhhLGIsYyksRGsoYSxjKSl9ZnVuY3Rpb24gdWooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1lrKGEsYyl9XG5mdW5jdGlvbiBiayhhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtZayhhLGMpfXZhciBWaztcblZrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8V2YuY3VycmVudClkaD0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIGRoPSExLHlqKGEsYixjKTtkaD0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIGRoPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmdWcoYixuZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO2lqKGEsYik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1ZZihiLEguY3VycmVudCk7Y2goYixjKTtlPU5oKG51bGwsYixkLGEsZSxjKTt2YXIgZj1TaCgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mPyhiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9XG5udWxsLFpmKGQpPyhmPSEwLGNnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsa2goYiksZS51cGRhdGVyPUVpLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixJaShiLGQsYSxjKSxiPWpqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJnZnKGIpLFhpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7aWooYSxiKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz1aayhkKTthPUNpKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWNqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1oaihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVlpKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9JGkobnVsbCxiLGQsQ2koZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsXG5kLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpDaShkLGUpLGNqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpDaShkLGUpLGhqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2tqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDtsaChhLGIpO3FoKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLGNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9XG5mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUppKEVycm9yKHAoNDIzKSksYik7Yj1saihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1KaShFcnJvcihwKDQyNCkpLGIpO2I9bGooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKHlnPUxmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCkseGc9YixJPSEwLHpnPW51bGwsYz1WZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtJZygpO2lmKGQ9PT1lKXtiPVppKGEsYixjKTticmVhayBhfVhpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEFoKGIpLG51bGw9PT1hJiZFZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLEVmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZFZihkLGYpJiYoYi5mbGFnc3w9MzIpLFxuZ2ooYSxiKSxYaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gb2ooYSxiLGMpO2Nhc2UgNDpyZXR1cm4geWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9VWcoYixudWxsLGQsYyk6WGkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpDaShkLGUpLFlpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBYaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztcbmc9ZS52YWx1ZTtHKFdnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoSGUoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFXZi5jdXJyZW50KXtiPVppKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPW1oKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtiaChmLnJldHVybixcbmMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtiaChnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WGkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjaChiLGMpLGU9ZWgoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWGkoYSxiLGQsYyksXG5iLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9Q2koZCxiLnBlbmRpbmdQcm9wcyksZT1DaShkLnR5cGUsZSksJGkoYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBiaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksaWooYSxiKSxiLnRhZz0xLFpmKGQpPyhhPSEwLGNnKGIpKTphPSExLGNoKGIsYyksR2koYixkLGUpLElpKGIsZCxlLGMpLGpqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4geGooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGRqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gRmsoYSxiKXtyZXR1cm4gYWMoYSxiKX1cbmZ1bmN0aW9uICRrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEJnKGEsYixjLGQpe3JldHVybiBuZXcgJGsoYSxiLGMsZCl9ZnVuY3Rpb24gYWooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIFprKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09RGEpcmV0dXJuIDExO2lmKGE9PT1HYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBQZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUJnKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBSZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYWooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuIFRnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgemE6Zz04O2V8PTg7YnJlYWs7Y2FzZSBBYTpyZXR1cm4gYT1CZygxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPUFhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9QmcoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBGYTpyZXR1cm4gYT1CZygxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1GYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiBwaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6Zz0xMDticmVhayBhO2Nhc2UgQ2E6Zz05O2JyZWFrIGE7Y2FzZSBEYTpnPTExO1xuYnJlYWsgYTtjYXNlIEdhOmc9MTQ7YnJlYWsgYTtjYXNlIEhhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1CZyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFRnKGEsYixjLGQpe2E9QmcoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHBqKGEsYixjLGQpe2E9QmcoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXtpc0hpZGRlbjohMX07cmV0dXJuIGF9ZnVuY3Rpb24gUWcoYSxiLGMpe2E9QmcoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gU2coYSxiLGMpe2I9QmcoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBhbChhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXpjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBibChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgYWwoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1CZygzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O2toKGYpO3JldHVybiBhfWZ1bmN0aW9uIGNsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6d2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBkbChhKXtpZighYSlyZXR1cm4gVmY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihWYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFpmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWmYoYykpcmV0dXJuIGJnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGVsKGEsYixjLGQsZSxmLGcsaCxrKXthPWJsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWRsKG51bGwpO2M9YS5jdXJyZW50O2Q9UigpO2U9eWkoYyk7Zj1taChkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO25oKGMsZixlKTthLmN1cnJlbnQubGFuZXM9ZTtBYyhhLGUsZCk7RGsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBmbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1SKCksZz15aShlKTtjPWRsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9bWgoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7YT1uaChlLGIsZyk7bnVsbCE9PWEmJihnaShhLGUsZyxmKSxvaChhLGUsZykpO3JldHVybiBnfVxuZnVuY3Rpb24gZ2woYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBobChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gaWwoYSxiKXtobChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmaGwoYSxiKX1mdW5jdGlvbiBqbCgpe3JldHVybiBudWxsfXZhciBrbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gbGwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5tbC5wcm90b3R5cGUucmVuZGVyPWxsLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7ZmwoYSxiLG51bGwsbnVsbCl9O21sLnByb3RvdHlwZS51bm1vdW50PWxsLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87UmsoZnVuY3Rpb24oKXtmbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdWZdPW51bGx9fTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm1sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1IYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UWMubGVuZ3RoJiYwIT09YiYmYjxRY1tjXS5wcmlvcml0eTtjKyspO1FjLnNwbGljZShjLDAsYSk7MD09PWMmJlZjKGEpfX07ZnVuY3Rpb24gbmwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIG9sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBwbCgpe31cbmZ1bmN0aW9uIHFsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWdsKGcpO2YuY2FsbChhKX19dmFyIGc9ZWwoYixkLGEsMCxudWxsLCExLCExLFwiXCIscGwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdWZdPWcuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7UmsoKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWdsKGspO2guY2FsbChhKX19dmFyIGs9YmwoYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLHBsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3VmXT1rLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1JrKGZ1bmN0aW9uKCl7ZmwoYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHJsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWdsKGcpO2guY2FsbChhKX19ZmwoYixnLGEsZSl9ZWxzZSBnPXFsKGMsYixhLGUsZCk7cmV0dXJuIGdsKGcpfUVjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9dGMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQ2MoYixjfDEpLERrKGIsQigpKSwwPT09KEsmNikmJihHaj1CKCkrNTAwLGpnKCkpKX1icmVhaztjYXNlIDEzOlJrKGZ1bmN0aW9uKCl7dmFyIGI9aWgoYSwxKTtpZihudWxsIT09Yil7dmFyIGM9UigpO2dpKGIsYSwxLGMpfX0pLGlsKGEsMSl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWloKGEsMTM0MjE3NzI4KTtpZihudWxsIT09Yil7dmFyIGM9UigpO2dpKGIsYSwxMzQyMTc3MjgsYyl9aWwoYSwxMzQyMTc3MjgpfX07R2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9eWkoYSksYz1paChhLGIpO2lmKG51bGwhPT1jKXt2YXIgZD1SKCk7Z2koYyxhLGIsZCl9aWwoYSxiKX19O0hjPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0ljPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YmIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtXYShkKTtiYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9UWs7SGI9Ums7XG52YXIgc2w9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0NiLHVlLERiLEViLEZiLFFrXX0sdGw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOldjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMy4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB1bD17YnVuZGxlVHlwZTp0bC5idW5kbGVUeXBlLHZlcnNpb246dGwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnRsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6dGwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVpiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0bC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5qbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMy4xLW5leHQtZjEzMzhmODA4MC0yMDI0MDQyNlwifTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHZsPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZighdmwuaXNEaXNhYmxlZCYmdmwuc3VwcG9ydHNGaWJlcil0cnl7a2M9dmwuaW5qZWN0KHVsKSxsYz12bH1jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9c2w7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFubChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBjbChhLGIsbnVsbCxjKX07ZXhwb3J0cy5jcmVhdGVSb290PWZ1bmN0aW9uKGEsYil7aWYoIW5sKGEpKXRocm93IEVycm9yKHAoMjk5KSk7dmFyIGM9ITEsZD1cIlwiLGU9a2w7bnVsbCE9PWImJnZvaWQgMCE9PWImJighMD09PWIudW5zdGFibGVfc3RyaWN0TW9kZSYmKGM9ITApLHZvaWQgMCE9PWIuaWRlbnRpZmllclByZWZpeCYmKGQ9Yi5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1iLm9uUmVjb3ZlcmFibGVFcnJvciYmKGU9Yi5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWJsKGEsMSwhMSxudWxsLG51bGwsYywhMSxkLGUpO2FbdWZdPWIuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7cmV0dXJuIG5ldyBsbChiKX07XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHAoMTg4KSk7YT1PYmplY3Qua2V5cyhhKS5qb2luKFwiLFwiKTt0aHJvdyBFcnJvcihwKDI2OCxhKSk7fWE9WmIoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhKXtyZXR1cm4gUmsoYSl9O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHJsKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3Q9ZnVuY3Rpb24oYSxiLGMpe2lmKCFubChhKSl0aHJvdyBFcnJvcihwKDQwNSkpO3ZhciBkPW51bGwhPWMmJmMuaHlkcmF0ZWRTb3VyY2VzfHxudWxsLGU9ITEsZj1cIlwiLGc9a2w7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJighMD09PWMudW5zdGFibGVfc3RyaWN0TW9kZSYmKGU9ITApLHZvaWQgMCE9PWMuaWRlbnRpZmllclByZWZpeCYmKGY9Yy5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1jLm9uUmVjb3ZlcmFibGVFcnJvciYmKGc9Yy5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWVsKGIsbnVsbCxhLDEsbnVsbCE9Yz9jOm51bGwsZSwhMSxmLGcpO2FbdWZdPWIuY3VycmVudDtzZihhKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspYz1kW2FdLGU9Yy5fZ2V0VmVyc2lvbixlPWUoYy5fc291cmNlKSxudWxsPT1iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtjLGVdOmIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGMsXG5lKTtyZXR1cm4gbmV3IG1sKGIpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHJsKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhSayhmdW5jdGlvbigpe3JsKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVt1Zl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVFrO1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighb2woYykpdGhyb3cgRXJyb3IocCgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcihwKDM4KSk7cmV0dXJuIHJsKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxOC4zLjEtbmV4dC1mMTMzOGY4MDgwLTIwMjQwNDI2XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIi8qXG4gIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmV4cG9ydCBmdW5jdGlvbiBhbnNpMmh0bWwodGV4dDogc3RyaW5nLCBkZWZhdWx0Q29sb3JzPzogeyBiZzogc3RyaW5nLCBmZzogc3RyaW5nIH0pOiBzdHJpbmcge1xuICBjb25zdCByZWdleCA9IC8oXFx4MWJcXFsoXFxkKyg7XFxkKykqKW0pfChbXlxceDFiXSspL2c7XG4gIGNvbnN0IHRva2Vuczogc3RyaW5nW10gPSBbXTtcbiAgbGV0IG1hdGNoO1xuICBsZXQgc3R5bGU6IGFueSA9IHt9O1xuXG4gIGxldCByZXZlcnNlID0gZmFsc2U7XG4gIGxldCBmZzogc3RyaW5nIHwgdW5kZWZpbmVkID0gZGVmYXVsdENvbG9ycz8uZmc7XG4gIGxldCBiZzogc3RyaW5nIHwgdW5kZWZpbmVkID0gZGVmYXVsdENvbG9ycz8uYmc7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWModGV4dCkpICE9PSBudWxsKSB7XG4gICAgY29uc3QgWywgLCBjb2RlU3RyLCAsIHRleHRdID0gbWF0Y2g7XG4gICAgaWYgKGNvZGVTdHIpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSArY29kZVN0cjtcbiAgICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICBjYXNlIDA6IHN0eWxlID0ge307IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHN0eWxlWydmb250LXdlaWdodCddID0gJ2JvbGQnOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBzdHlsZVsnb3BhY2l0eSddID0gJzAuOCc7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IHN0eWxlWydmb250LXN0eWxlJ10gPSAnaXRhbGljJzsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDogc3R5bGVbJ3RleHQtZGVjb3JhdGlvbiddID0gJ3VuZGVybGluZSc7IGJyZWFrO1xuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgcmV2ZXJzZSA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgODogc3R5bGUuZGlzcGxheSA9ICdub25lJzsgYnJlYWs7XG4gICAgICAgIGNhc2UgOTogc3R5bGVbJ3RleHQtZGVjb3JhdGlvbiddID0gJ2xpbmUtdGhyb3VnaCc7IGJyZWFrO1xuICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgIGRlbGV0ZSBzdHlsZVsnZm9udC13ZWlnaHQnXTtcbiAgICAgICAgICBkZWxldGUgc3R5bGVbJ2ZvbnQtc3R5bGUnXTtcbiAgICAgICAgICBkZWxldGUgc3R5bGVbJ29wYWNpdHknXTtcbiAgICAgICAgICBkZWxldGUgc3R5bGVbJ3RleHQtZGVjb3JhdGlvbiddO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDIzOlxuICAgICAgICAgIGRlbGV0ZSBzdHlsZVsnZm9udC13ZWlnaHQnXTtcbiAgICAgICAgICBkZWxldGUgc3R5bGVbJ2ZvbnQtc3R5bGUnXTtcbiAgICAgICAgICBkZWxldGUgc3R5bGVbJ29wYWNpdHknXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICBkZWxldGUgc3R5bGVbJ3RleHQtZGVjb3JhdGlvbiddO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIHJldmVyc2UgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzMDpcbiAgICAgICAgY2FzZSAzMTpcbiAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgY2FzZSAzMzpcbiAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgY2FzZSAzNTpcbiAgICAgICAgY2FzZSAzNjpcbiAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICBmZyA9IGFuc2lDb2xvcnNbY29kZSAtIDMwXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICBmZyA9IGRlZmF1bHRDb2xvcnM/LmZnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQwOlxuICAgICAgICBjYXNlIDQxOlxuICAgICAgICBjYXNlIDQyOlxuICAgICAgICBjYXNlIDQzOlxuICAgICAgICBjYXNlIDQ0OlxuICAgICAgICBjYXNlIDQ1OlxuICAgICAgICBjYXNlIDQ2OlxuICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgIGJnID0gYW5zaUNvbG9yc1tjb2RlIC0gNDBdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ5OlxuICAgICAgICAgIGJnID0gZGVmYXVsdENvbG9ycz8uYmc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTM6IHN0eWxlWyd0ZXh0LWRlY29yYXRpb24nXSA9ICdvdmVybGluZSc7IGJyZWFrO1xuICAgICAgICBjYXNlIDkwOlxuICAgICAgICBjYXNlIDkxOlxuICAgICAgICBjYXNlIDkyOlxuICAgICAgICBjYXNlIDkzOlxuICAgICAgICBjYXNlIDk0OlxuICAgICAgICBjYXNlIDk1OlxuICAgICAgICBjYXNlIDk2OlxuICAgICAgICBjYXNlIDk3OlxuICAgICAgICAgIGZnID0gYnJpZ2h0QW5zaUNvbG9yc1tjb2RlIC0gOTBdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgY2FzZSAxMDE6XG4gICAgICAgIGNhc2UgMTAyOlxuICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgY2FzZSAxMDQ6XG4gICAgICAgIGNhc2UgMTA1OlxuICAgICAgICBjYXNlIDEwNjpcbiAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgYmcgPSBicmlnaHRBbnNpQ29sb3JzW2NvZGUgLSAxMDBdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGV4dCkge1xuICAgICAgY29uc3Qgc3R5bGVDb3B5ID0geyAuLi5zdHlsZSB9O1xuICAgICAgY29uc3QgY29sb3IgPSByZXZlcnNlID8gYmcgOiBmZztcbiAgICAgIGlmIChjb2xvciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBzdHlsZUNvcHlbJ2NvbG9yJ10gPSBjb2xvcjtcbiAgICAgIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IHJldmVyc2UgPyBmZyA6IGJnO1xuICAgICAgaWYgKGJhY2tncm91bmRDb2xvciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBzdHlsZUNvcHlbJ2JhY2tncm91bmQtY29sb3InXSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgIHRva2Vucy5wdXNoKGA8c3BhbiBzdHlsZT1cIiR7c3R5bGVCb2R5KHN0eWxlQ29weSl9XCI+JHtlc2NhcGVIVE1MKHRleHQpfTwvc3Bhbj5gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRva2Vucy5qb2luKCcnKTtcbn1cblxuY29uc3QgYW5zaUNvbG9yczogUmVjb3JkPG51bWJlciwgc3RyaW5nPiA9IHtcbiAgMDogJ3ZhcigtLXZzY29kZS10ZXJtaW5hbC1hbnNpQmxhY2spJyxcbiAgMTogJ3ZhcigtLXZzY29kZS10ZXJtaW5hbC1hbnNpUmVkKScsXG4gIDI6ICd2YXIoLS12c2NvZGUtdGVybWluYWwtYW5zaUdyZWVuKScsXG4gIDM6ICd2YXIoLS12c2NvZGUtdGVybWluYWwtYW5zaVllbGxvdyknLFxuICA0OiAndmFyKC0tdnNjb2RlLXRlcm1pbmFsLWFuc2lCbHVlKScsXG4gIDU6ICd2YXIoLS12c2NvZGUtdGVybWluYWwtYW5zaU1hZ2VudGEpJyxcbiAgNjogJ3ZhcigtLXZzY29kZS10ZXJtaW5hbC1hbnNpQ3lhbiknLFxuICA3OiAndmFyKC0tdnNjb2RlLXRlcm1pbmFsLWFuc2lXaGl0ZSknLFxufTtcblxuY29uc3QgYnJpZ2h0QW5zaUNvbG9yczogUmVjb3JkPG51bWJlciwgc3RyaW5nPiA9IHtcbiAgMDogJ3ZhcigtLXZzY29kZS10ZXJtaW5hbC1hbnNpQnJpZ2h0QmxhY2spJyxcbiAgMTogJ3ZhcigtLXZzY29kZS10ZXJtaW5hbC1hbnNpQnJpZ2h0UmVkKScsXG4gIDI6ICd2YXIoLS12c2NvZGUtdGVybWluYWwtYW5zaUJyaWdodEdyZWVuKScsXG4gIDM6ICd2YXIoLS12c2NvZGUtdGVybWluYWwtYW5zaUJyaWdodFllbGxvdyknLFxuICA0OiAndmFyKC0tdnNjb2RlLXRlcm1pbmFsLWFuc2lCcmlnaHRCbHVlKScsXG4gIDU6ICd2YXIoLS12c2NvZGUtdGVybWluYWwtYW5zaUJyaWdodE1hZ2VudGEpJyxcbiAgNjogJ3ZhcigtLXZzY29kZS10ZXJtaW5hbC1hbnNpQnJpZ2h0Q3lhbiknLFxuICA3OiAndmFyKC0tdnNjb2RlLXRlcm1pbmFsLWFuc2lCcmlnaHRXaGl0ZSknLFxufTtcblxuZnVuY3Rpb24gZXNjYXBlSFRNTCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKC9bJlwiPD5dL2csIGMgPT4gKHsgJyYnOiAnJmFtcDsnLCAnXCInOiAnJnF1b3Q7JywgJzwnOiAnJmx0OycsICc+JzogJyZndDsnIH1bY10hKSk7XG59XG5cbmZ1bmN0aW9uIHN0eWxlQm9keShzdHlsZTogYW55KTogc3RyaW5nIHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHN0eWxlKS5tYXAoKFtuYW1lLCB2YWx1ZV0pID0+IGAke25hbWV9OiAke3ZhbHVlfWApLmpvaW4oJzsgJyk7XG59XG4iLCIvKlxuICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgJy4vY29kZU1pcnJvcldyYXBwZXIuY3NzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgQ29kZU1pcnJvciB9IGZyb20gJy4vY29kZU1pcnJvck1vZHVsZSc7XG5pbXBvcnQgeyBhbnNpMmh0bWwgfSBmcm9tICcuLi9hbnNpMmh0bWwnO1xuaW1wb3J0IHsgdXNlTWVhc3VyZSwga1dlYkxpbmtSZSB9IGZyb20gJy4uL3VpVXRpbHMnO1xuXG5leHBvcnQgdHlwZSBTb3VyY2VIaWdobGlnaHQgPSB7XG4gIGxpbmU6IG51bWJlcjtcbiAgY29sdW1uPzogbnVtYmVyO1xuICB0eXBlOiAncnVubmluZycgfCAncGF1c2VkJyB8ICdlcnJvcicgfCAnc3VidGxlLWVycm9yJztcbiAgbWVzc2FnZT86IHN0cmluZztcbn07XG5cbnR5cGUgQ29kZU1pcnJvckhpZ2hsaWdodGVyID0gJ2phdmFzY3JpcHQnIHwgJ3B5dGhvbicgfCAnamF2YScgfCAnY3NoYXJwJyB8ICdqc29ubCcgfCAnaHRtbCcgfCAnY3NzJyB8ICdtYXJrZG93bicgfCAneWFtbCc7XG5cbmV4cG9ydCBjb25zdCBsaW5lSGVpZ2h0ID0gMjA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU291cmNlUHJvcHMge1xuICB0ZXh0OiBzdHJpbmc7XG4gIGhpZ2hsaWdodGVyPzogQ29kZU1pcnJvckhpZ2hsaWdodGVyO1xuICBtaW1lVHlwZT86IHN0cmluZztcbiAgbGlua2lmeT86IGJvb2xlYW47XG4gIHJlYWRPbmx5PzogYm9vbGVhbjtcbiAgLy8gMS1iYXNlZFxuICBoaWdobGlnaHQ/OiBTb3VyY2VIaWdobGlnaHRbXTtcbiAgcmV2ZWFsTGluZT86IG51bWJlcjtcbiAgbGluZU51bWJlcnM/OiBib29sZWFuO1xuICBpc0ZvY3VzZWQ/OiBib29sZWFuO1xuICBmb2N1c09uQ2hhbmdlPzogYm9vbGVhbjtcbiAgd3JhcExpbmVzPzogYm9vbGVhbjtcbiAgb25DaGFuZ2U/OiAodGV4dDogc3RyaW5nKSA9PiB2b2lkO1xuICBkYXRhVGVzdElkPzogc3RyaW5nO1xuICBwbGFjZWhvbGRlcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IENvZGVNaXJyb3JXcmFwcGVyOiBSZWFjdC5GQzxTb3VyY2VQcm9wcz4gPSAoe1xuICB0ZXh0LFxuICBoaWdobGlnaHRlcixcbiAgbWltZVR5cGUsXG4gIGxpbmtpZnksXG4gIHJlYWRPbmx5LFxuICBoaWdobGlnaHQsXG4gIHJldmVhbExpbmUsXG4gIGxpbmVOdW1iZXJzLFxuICBpc0ZvY3VzZWQsXG4gIGZvY3VzT25DaGFuZ2UsXG4gIHdyYXBMaW5lcyxcbiAgb25DaGFuZ2UsXG4gIGRhdGFUZXN0SWQsXG4gIHBsYWNlaG9sZGVyLFxufSkgPT4ge1xuICBjb25zdCBbbWVhc3VyZSwgY29kZW1pcnJvckVsZW1lbnRdID0gdXNlTWVhc3VyZTxIVE1MRGl2RWxlbWVudD4oKTtcbiAgY29uc3QgW21vZHVsZVByb21pc2VdID0gUmVhY3QudXNlU3RhdGU8UHJvbWlzZTxDb2RlTWlycm9yPj4oaW1wb3J0KCcuL2NvZGVNaXJyb3JNb2R1bGUnKS50aGVuKG0gPT4gbS5kZWZhdWx0KSk7XG4gIGNvbnN0IGNvZGVtaXJyb3JSZWYgPSBSZWFjdC51c2VSZWY8e1xuICAgIGNtOiBDb2RlTWlycm9yLkVkaXRvcixcbiAgICBoaWdobGlnaHQ/OiBTb3VyY2VIaWdobGlnaHRbXSxcbiAgICB3aWRnZXRzPzogQ29kZU1pcnJvci5MaW5lV2lkZ2V0W10sXG4gICAgbWFya2Vycz86IENvZGVNaXJyb3IuVGV4dE1hcmtlcltdLFxuICB9IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtjb2RlbWlycm9yLCBzZXRDb2RlbWlycm9yXSA9IFJlYWN0LnVzZVN0YXRlPENvZGVNaXJyb3IuRWRpdG9yPigpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFsd2F5cyBsb2FkIHRoZSBtb2R1bGUgZmlyc3QuXG4gICAgICBjb25zdCBDb2RlTWlycm9yID0gYXdhaXQgbW9kdWxlUHJvbWlzZTtcbiAgICAgIGRlZmluZUN1c3RvbU1vZGUoQ29kZU1pcnJvcik7XG5cbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBjb2RlbWlycm9yRWxlbWVudC5jdXJyZW50O1xuICAgICAgaWYgKCFlbGVtZW50KVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNvbnN0IG1vZGUgPSBoaWdobGlnaHRlclRvTW9kZShoaWdobGlnaHRlcikgfHwgbWltZVR5cGVUb01vZGUobWltZVR5cGUpIHx8IChsaW5raWZ5ID8gJ3RleHQvbGlua2lmaWVkJyA6ICcnKTtcblxuICAgICAgaWYgKGNvZGVtaXJyb3JSZWYuY3VycmVudFxuICAgICAgICAmJiBtb2RlID09PSBjb2RlbWlycm9yUmVmLmN1cnJlbnQuY20uZ2V0T3B0aW9uKCdtb2RlJylcbiAgICAgICAgJiYgISFyZWFkT25seSA9PT0gY29kZW1pcnJvclJlZi5jdXJyZW50LmNtLmdldE9wdGlvbigncmVhZE9ubHknKVxuICAgICAgICAmJiBsaW5lTnVtYmVycyA9PT0gY29kZW1pcnJvclJlZi5jdXJyZW50LmNtLmdldE9wdGlvbignbGluZU51bWJlcnMnKVxuICAgICAgICAmJiB3cmFwTGluZXMgPT09IGNvZGVtaXJyb3JSZWYuY3VycmVudC5jbS5nZXRPcHRpb24oJ2xpbmVXcmFwcGluZycpXG4gICAgICAgICYmIHBsYWNlaG9sZGVyID09PSBjb2RlbWlycm9yUmVmLmN1cnJlbnQuY20uZ2V0T3B0aW9uKCdwbGFjZWhvbGRlcicpKSB7XG4gICAgICAgIC8vIE5vIG5lZWQgdG8gcmUtY3JlYXRlIGNvZGVtaXJyb3IuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gRWl0aGVyIGNvbmZpZ3VyYXRpb24gaXMgZGlmZmVyZW50IG9yIHdlIGRvbid0IGhhdmUgYSBjb2RlbWlycm9yIHlldC5cbiAgICAgIGNvZGVtaXJyb3JSZWYuY3VycmVudD8uY20/LmdldFdyYXBwZXJFbGVtZW50KCkucmVtb3ZlKCk7XG4gICAgICBjb25zdCBjbSA9IENvZGVNaXJyb3IoZWxlbWVudCwge1xuICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgIG1vZGUsXG4gICAgICAgIHJlYWRPbmx5OiAhIXJlYWRPbmx5LFxuICAgICAgICBsaW5lTnVtYmVycyxcbiAgICAgICAgbGluZVdyYXBwaW5nOiB3cmFwTGluZXMsXG4gICAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgfSk7XG4gICAgICBjb2RlbWlycm9yUmVmLmN1cnJlbnQgPSB7IGNtIH07XG4gICAgICBpZiAoaXNGb2N1c2VkKVxuICAgICAgICBjbS5mb2N1cygpO1xuICAgICAgc2V0Q29kZW1pcnJvcihjbSk7XG4gICAgICByZXR1cm4gY207XG4gICAgfSkoKTtcbiAgfSwgW21vZHVsZVByb21pc2UsIGNvZGVtaXJyb3IsIGNvZGVtaXJyb3JFbGVtZW50LCBoaWdobGlnaHRlciwgbWltZVR5cGUsIGxpbmtpZnksIGxpbmVOdW1iZXJzLCB3cmFwTGluZXMsIHJlYWRPbmx5LCBpc0ZvY3VzZWQsIHBsYWNlaG9sZGVyXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoY29kZW1pcnJvclJlZi5jdXJyZW50KVxuICAgICAgY29kZW1pcnJvclJlZi5jdXJyZW50LmNtLnNldFNpemUobWVhc3VyZS53aWR0aCwgbWVhc3VyZS5oZWlnaHQpO1xuICB9LCBbbWVhc3VyZV0pO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFjb2RlbWlycm9yKVxuICAgICAgcmV0dXJuO1xuXG4gICAgbGV0IHZhbHVlQ2hhbmdlZCA9IGZhbHNlO1xuICAgIGlmIChjb2RlbWlycm9yLmdldFZhbHVlKCkgIT09IHRleHQpIHtcbiAgICAgIGNvZGVtaXJyb3Iuc2V0VmFsdWUodGV4dCk7XG4gICAgICB2YWx1ZUNoYW5nZWQgPSB0cnVlO1xuICAgICAgaWYgKGZvY3VzT25DaGFuZ2UpIHtcbiAgICAgICAgY29kZW1pcnJvci5leGVjQ29tbWFuZCgnc2VsZWN0QWxsJyk7XG4gICAgICAgIGNvZGVtaXJyb3IuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodmFsdWVDaGFuZ2VkIHx8IEpTT04uc3RyaW5naWZ5KGhpZ2hsaWdodCkgIT09IEpTT04uc3RyaW5naWZ5KGNvZGVtaXJyb3JSZWYuY3VycmVudCEuaGlnaGxpZ2h0KSkge1xuICAgICAgLy8gTGluZSBoaWdobGlnaHQuXG4gICAgICBmb3IgKGNvbnN0IGggb2YgY29kZW1pcnJvclJlZi5jdXJyZW50IS5oaWdobGlnaHQgfHwgW10pXG4gICAgICAgIGNvZGVtaXJyb3IucmVtb3ZlTGluZUNsYXNzKGgubGluZSAtIDEsICd3cmFwJyk7XG4gICAgICBmb3IgKGNvbnN0IGggb2YgaGlnaGxpZ2h0IHx8IFtdKVxuICAgICAgICBjb2RlbWlycm9yLmFkZExpbmVDbGFzcyhoLmxpbmUgLSAxLCAnd3JhcCcsIGBzb3VyY2UtbGluZS0ke2gudHlwZX1gKTtcblxuICAgICAgLy8gRXJyb3Igd2lkZ2V0cy5cbiAgICAgIGZvciAoY29uc3QgdyBvZiBjb2RlbWlycm9yUmVmLmN1cnJlbnQhLndpZGdldHMgfHwgW10pXG4gICAgICAgIGNvZGVtaXJyb3IucmVtb3ZlTGluZVdpZGdldCh3KTtcbiAgICAgIGZvciAoY29uc3QgbSBvZiBjb2RlbWlycm9yUmVmLmN1cnJlbnQhLm1hcmtlcnMgfHwgW10pXG4gICAgICAgIG0uY2xlYXIoKTtcbiAgICAgIGNvbnN0IHdpZGdldHM6IENvZGVNaXJyb3IuTGluZVdpZGdldFtdID0gW107XG4gICAgICBjb25zdCBtYXJrZXJzOiBDb2RlTWlycm9yLlRleHRNYXJrZXJbXSA9IFtdO1xuICAgICAgZm9yIChjb25zdCBoIG9mIGhpZ2hsaWdodCB8fCBbXSkge1xuICAgICAgICBpZiAoaC50eXBlICE9PSAnc3VidGxlLWVycm9yJyAmJiBoLnR5cGUgIT09ICdlcnJvcicpXG4gICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgY29uc3QgbGluZSA9IGNvZGVtaXJyb3JSZWYuY3VycmVudD8uY20uZ2V0TGluZShoLmxpbmUgLSAxKTtcbiAgICAgICAgaWYgKGxpbmUpIHtcbiAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gICAgICAgICAgYXR0cmlidXRlc1sndGl0bGUnXSA9IGgubWVzc2FnZSB8fCAnJztcbiAgICAgICAgICBtYXJrZXJzLnB1c2goY29kZW1pcnJvci5tYXJrVGV4dChcbiAgICAgICAgICAgICAgeyBsaW5lOiBoLmxpbmUgLSAxLCBjaDogMCB9LFxuICAgICAgICAgICAgICB7IGxpbmU6IGgubGluZSAtIDEsIGNoOiBoLmNvbHVtbiB8fCBsaW5lLmxlbmd0aCB9LFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3NvdXJjZS1saW5lLWVycm9yLXVuZGVybGluZScsIGF0dHJpYnV0ZXMgfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGgudHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgIGNvbnN0IGVycm9yV2lkZ2V0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGVycm9yV2lkZ2V0RWxlbWVudC5pbm5lckhUTUwgPSBhbnNpMmh0bWwoaC5tZXNzYWdlIHx8ICcnKTtcbiAgICAgICAgICBlcnJvcldpZGdldEVsZW1lbnQuY2xhc3NOYW1lID0gJ3NvdXJjZS1saW5lLWVycm9yLXdpZGdldCc7XG4gICAgICAgICAgd2lkZ2V0cy5wdXNoKGNvZGVtaXJyb3IuYWRkTGluZVdpZGdldChoLmxpbmUsIGVycm9yV2lkZ2V0RWxlbWVudCwgeyBhYm92ZTogdHJ1ZSwgY292ZXJHdXR0ZXI6IGZhbHNlIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBFcnJvciBtYXJrZXJzLlxuICAgICAgY29kZW1pcnJvclJlZi5jdXJyZW50IS5oaWdobGlnaHQgPSBoaWdobGlnaHQ7XG4gICAgICBjb2RlbWlycm9yUmVmLmN1cnJlbnQhLndpZGdldHMgPSB3aWRnZXRzO1xuICAgICAgY29kZW1pcnJvclJlZi5jdXJyZW50IS5tYXJrZXJzID0gbWFya2VycztcbiAgICB9XG5cbiAgICAvLyBMaW5lLWxlc3MgbG9jYXRpb25zIGhhdmUgbGluZSA9IDAsIGJ1dCB0aGV5IG1lYW4gdG8gcmV2ZWFsIHRoZSBmaWxlLlxuICAgIGlmICh0eXBlb2YgcmV2ZWFsTGluZSA9PT0gJ251bWJlcicgJiYgY29kZW1pcnJvclJlZi5jdXJyZW50IS5jbS5saW5lQ291bnQoKSA+PSByZXZlYWxMaW5lKVxuICAgICAgY29kZW1pcnJvci5zY3JvbGxJbnRvVmlldyh7IGxpbmU6IE1hdGgubWF4KDAsIHJldmVhbExpbmUgLSAxKSwgY2g6IDAgfSwgNTApO1xuXG4gICAgbGV0IGNoYW5nZUxpc3RlbmVyOiAoKSA9PiB2b2lkIHwgdW5kZWZpbmVkO1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgY2hhbmdlTGlzdGVuZXIgPSAoKSA9PiBvbkNoYW5nZShjb2RlbWlycm9yLmdldFZhbHVlKCkpO1xuICAgICAgY29kZW1pcnJvci5vbignY2hhbmdlJywgY2hhbmdlTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoY2hhbmdlTGlzdGVuZXIpXG4gICAgICAgIGNvZGVtaXJyb3Iub2ZmKCdjaGFuZ2UnLCBjaGFuZ2VMaXN0ZW5lcik7XG4gICAgfTtcbiAgfSwgW2NvZGVtaXJyb3IsIHRleHQsIGhpZ2hsaWdodCwgcmV2ZWFsTGluZSwgZm9jdXNPbkNoYW5nZSwgb25DaGFuZ2VdKTtcblxuICByZXR1cm4gPGRpdiBkYXRhLXRlc3RpZD17ZGF0YVRlc3RJZH0gY2xhc3NOYW1lPSdjbS13cmFwcGVyJyByZWY9e2NvZGVtaXJyb3JFbGVtZW50fSBvbkNsaWNrPXtvbkNvZGVNaXJyb3JDbGlja30+PC9kaXY+O1xufTtcblxuZnVuY3Rpb24gb25Db2RlTWlycm9yQ2xpY2soZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQpIHtcbiAgaWYgKCEoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKVxuICAgIHJldHVybjtcbiAgbGV0IHVybDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY20tbGlua2lmaWVkJykpIHtcbiAgICAvLyAndGV4dC9saW5raWZpZWQnIGN1c3RvbSBtb2RlXG4gICAgdXJsID0gZXZlbnQudGFyZ2V0LnRleHRDb250ZW50ITtcbiAgfSBlbHNlIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjbS1saW5rJykgJiYgZXZlbnQudGFyZ2V0Lm5leHRFbGVtZW50U2libGluZz8uY2xhc3NMaXN0LmNvbnRhaW5zKCdjbS11cmwnKSkge1xuICAgIC8vICdtYXJrZG93bicgbW9kZVxuICAgIHVybCA9IGV2ZW50LnRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnQhLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAodXJsKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcbiAgfVxufVxuXG5sZXQgY3VzdG9tTW9kZURlZmluZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGRlZmluZUN1c3RvbU1vZGUoY206IENvZGVNaXJyb3IpIHtcbiAgaWYgKGN1c3RvbU1vZGVEZWZpbmVkKVxuICAgIHJldHVybjtcbiAgY3VzdG9tTW9kZURlZmluZWQgPSB0cnVlO1xuICAoY20gYXMgYW55KS5kZWZpbmVTaW1wbGVNb2RlKCd0ZXh0L2xpbmtpZmllZCcsIHtcbiAgICBzdGFydDogW1xuICAgICAgeyByZWdleDoga1dlYkxpbmtSZSwgdG9rZW46ICdsaW5raWZpZWQnIH0sXG4gICAgXSxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1pbWVUeXBlVG9Nb2RlKG1pbWVUeXBlOiBzdHJpbmcgfCB1bmRlZmluZWQpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBpZiAoIW1pbWVUeXBlKVxuICAgIHJldHVybjtcbiAgaWYgKG1pbWVUeXBlLmluY2x1ZGVzKCdqYXZhc2NyaXB0JykgfHwgbWltZVR5cGUuaW5jbHVkZXMoJ2pzb24nKSlcbiAgICByZXR1cm4gJ2phdmFzY3JpcHQnO1xuICBpZiAobWltZVR5cGUuaW5jbHVkZXMoJ3B5dGhvbicpKVxuICAgIHJldHVybiAncHl0aG9uJztcbiAgaWYgKG1pbWVUeXBlLmluY2x1ZGVzKCdjc2hhcnAnKSlcbiAgICByZXR1cm4gJ3RleHQveC1jc2hhcnAnO1xuICBpZiAobWltZVR5cGUuaW5jbHVkZXMoJ2phdmEnKSlcbiAgICByZXR1cm4gJ3RleHQveC1qYXZhJztcbiAgaWYgKG1pbWVUeXBlLmluY2x1ZGVzKCdtYXJrZG93bicpKVxuICAgIHJldHVybiAnbWFya2Rvd24nO1xuICBpZiAobWltZVR5cGUuaW5jbHVkZXMoJ2h0bWwnKSB8fCBtaW1lVHlwZS5pbmNsdWRlcygnc3ZnJykpXG4gICAgcmV0dXJuICdodG1sbWl4ZWQnO1xuICBpZiAobWltZVR5cGUuaW5jbHVkZXMoJ2NzcycpKVxuICAgIHJldHVybiAnY3NzJztcbn1cblxuZnVuY3Rpb24gaGlnaGxpZ2h0ZXJUb01vZGUoaGlnaGxpZ2h0ZXI6IENvZGVNaXJyb3JIaWdobGlnaHRlciB8IHVuZGVmaW5lZCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIGlmICghaGlnaGxpZ2h0ZXIpXG4gICAgcmV0dXJuO1xuICByZXR1cm4ge1xuICAgIGphdmFzY3JpcHQ6ICdqYXZhc2NyaXB0JyxcbiAgICBqc29ubDogJ2phdmFzY3JpcHQnLFxuICAgIHB5dGhvbjogJ3B5dGhvbicsXG4gICAgY3NoYXJwOiAndGV4dC94LWNzaGFycCcsXG4gICAgamF2YTogJ3RleHQveC1qYXZhJyxcbiAgICBtYXJrZG93bjogJ21hcmtkb3duJyxcbiAgICBodG1sOiAnaHRtbG1peGVkJyxcbiAgICBjc3M6ICdjc3MnLFxuICAgIHlhbWw6ICd5YW1sJyxcbiAgfVtoaWdobGlnaHRlcl07XG59XG4iLCIvKlxuICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2VcIik7XG4gIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IGNsc3gsIHVzZU1lYXN1cmUsIHVzZVNldHRpbmcgfSBmcm9tICcuLi91aVV0aWxzJztcbmltcG9ydCAnLi9zcGxpdFZpZXcuY3NzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IHR5cGUgU3BsaXRWaWV3UHJvcHMgPSB7XG4gIHNpZGViYXJTaXplOiBudW1iZXI7XG4gIHNpZGViYXJIaWRkZW4/OiBib29sZWFuO1xuICBzaWRlYmFySXNGaXJzdD86IGJvb2xlYW47XG4gIG9yaWVudGF0aW9uPzogJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJztcbiAgbWluU2lkZWJhclNpemU/OiBudW1iZXI7XG4gIHNldHRpbmdOYW1lPzogc3RyaW5nO1xuXG4gIHNpZGViYXI6IFJlYWN0LlJlYWN0Tm9kZTtcbiAgbWFpbjogUmVhY3QuUmVhY3ROb2RlO1xufTtcblxuY29uc3Qga01pblNpemUgPSA1MDtcblxuZXhwb3J0IGNvbnN0IFNwbGl0VmlldzogUmVhY3QuRkM8U3BsaXRWaWV3UHJvcHM+ID0gKHtcbiAgc2lkZWJhclNpemUsXG4gIHNpZGViYXJIaWRkZW4gPSBmYWxzZSxcbiAgc2lkZWJhcklzRmlyc3QgPSBmYWxzZSxcbiAgb3JpZW50YXRpb24gPSAndmVydGljYWwnLFxuICBtaW5TaWRlYmFyU2l6ZSA9IGtNaW5TaXplLFxuICBzZXR0aW5nTmFtZSxcbiAgc2lkZWJhcixcbiAgbWFpbixcbn0pID0+IHtcbiAgY29uc3QgZGVmYXVsdFNpemUgPSBNYXRoLm1heChtaW5TaWRlYmFyU2l6ZSwgc2lkZWJhclNpemUpICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gIGNvbnN0IFtoU2l6ZSwgc2V0SFNpemVdID0gdXNlU2V0dGluZzxudW1iZXI+KHNldHRpbmdOYW1lID8gc2V0dGluZ05hbWUgKyAnLicgKyBvcmllbnRhdGlvbiArICc6c2l6ZScgOiB1bmRlZmluZWQsIGRlZmF1bHRTaXplKTtcbiAgY29uc3QgW3ZTaXplLCBzZXRWU2l6ZV0gPSB1c2VTZXR0aW5nPG51bWJlcj4oc2V0dGluZ05hbWUgPyBzZXR0aW5nTmFtZSArICcuJyArIG9yaWVudGF0aW9uICsgJzpzaXplJyA6IHVuZGVmaW5lZCwgZGVmYXVsdFNpemUpO1xuXG4gIGNvbnN0IFtyZXNpemluZywgc2V0UmVzaXppbmddID0gUmVhY3QudXNlU3RhdGU8eyBvZmZzZXQ6IG51bWJlciwgc2l6ZTogbnVtYmVyIH0gfCBudWxsPihudWxsKTtcbiAgY29uc3QgW21lYXN1cmUsIHJlZl0gPSB1c2VNZWFzdXJlPEhUTUxEaXZFbGVtZW50PigpO1xuXG4gIGxldCBzaXplOiBudW1iZXI7XG4gIGlmIChvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgIHNpemUgPSB2U2l6ZSAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIGlmIChtZWFzdXJlICYmIG1lYXN1cmUuaGVpZ2h0IDwgc2l6ZSlcbiAgICAgIHNpemUgPSBtZWFzdXJlLmhlaWdodCAtIDEwO1xuICB9IGVsc2Uge1xuICAgIHNpemUgPSBoU2l6ZSAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIGlmIChtZWFzdXJlICYmIG1lYXN1cmUud2lkdGggPCBzaXplKVxuICAgICAgc2l6ZSA9IG1lYXN1cmUud2lkdGggLSAxMDtcbiAgfVxuXG4gIGRvY3VtZW50LmJvZHkuc3R5bGUudXNlclNlbGVjdCA9IHJlc2l6aW5nID8gJ25vbmUnIDogJ2luaGVyaXQnO1xuICBsZXQgcmVzaXplclN0eWxlOiBhbnkgPSB7fTtcbiAgaWYgKG9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgaWYgKHNpZGViYXJJc0ZpcnN0KVxuICAgICAgcmVzaXplclN0eWxlID0geyB0b3A6IHJlc2l6aW5nID8gMCA6IHNpemUgLSA0LCBib3R0b206IHJlc2l6aW5nID8gMCA6IHVuZGVmaW5lZCwgaGVpZ2h0OiByZXNpemluZyA/ICdpbml0aWFsJyA6IDggfTtcbiAgICBlbHNlXG4gICAgICByZXNpemVyU3R5bGUgPSB7IGJvdHRvbTogcmVzaXppbmcgPyAwIDogc2l6ZSAtIDQsIHRvcDogcmVzaXppbmcgPyAwIDogdW5kZWZpbmVkLCBoZWlnaHQ6IHJlc2l6aW5nID8gJ2luaXRpYWwnIDogOCB9O1xuICB9IGVsc2Uge1xuICAgIGlmIChzaWRlYmFySXNGaXJzdClcbiAgICAgIHJlc2l6ZXJTdHlsZSA9IHsgbGVmdDogcmVzaXppbmcgPyAwIDogc2l6ZSAtIDQsIHJpZ2h0OiByZXNpemluZyA/IDAgOiB1bmRlZmluZWQsIHdpZHRoOiByZXNpemluZyA/ICdpbml0aWFsJyA6IDggfTtcbiAgICBlbHNlXG4gICAgICByZXNpemVyU3R5bGUgPSB7IHJpZ2h0OiByZXNpemluZyA/IDAgOiBzaXplIC0gNCwgbGVmdDogcmVzaXppbmcgPyAwIDogdW5kZWZpbmVkLCB3aWR0aDogcmVzaXppbmcgPyAnaW5pdGlhbCcgOiA4IH07XG4gIH1cblxuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2Nsc3goJ3NwbGl0LXZpZXcnLCBvcmllbnRhdGlvbiwgc2lkZWJhcklzRmlyc3QgJiYgJ3NpZGViYXItZmlyc3QnKX0gcmVmPXtyZWZ9PlxuICAgIDxkaXYgY2xhc3NOYW1lPSdzcGxpdC12aWV3LW1haW4nPnttYWlufTwvZGl2PlxuICAgIHshc2lkZWJhckhpZGRlbiAmJiA8ZGl2IHN0eWxlPXt7IGZsZXhCYXNpczogc2l6ZSB9fSBjbGFzc05hbWU9J3NwbGl0LXZpZXctc2lkZWJhcic+e3NpZGViYXJ9PC9kaXY+fVxuICAgIHshc2lkZWJhckhpZGRlbiAmJiA8ZGl2XG4gICAgICBzdHlsZT17cmVzaXplclN0eWxlfVxuICAgICAgY2xhc3NOYW1lPSdzcGxpdC12aWV3LXJlc2l6ZXInXG4gICAgICBvbk1vdXNlRG93bj17ZXZlbnQgPT4gc2V0UmVzaXppbmcoeyBvZmZzZXQ6IG9yaWVudGF0aW9uID09PSAndmVydGljYWwnID8gZXZlbnQuY2xpZW50WSA6IGV2ZW50LmNsaWVudFgsIHNpemUgfSl9XG4gICAgICBvbk1vdXNlVXA9eygpID0+IHNldFJlc2l6aW5nKG51bGwpfVxuICAgICAgb25Nb3VzZU1vdmU9e2V2ZW50ID0+IHtcbiAgICAgICAgaWYgKCFldmVudC5idXR0b25zKSB7XG4gICAgICAgICAgc2V0UmVzaXppbmcobnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzaXppbmcpIHtcbiAgICAgICAgICBjb25zdCBvZmZzZXQgPSBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/IGV2ZW50LmNsaWVudFkgOiBldmVudC5jbGllbnRYO1xuICAgICAgICAgIGNvbnN0IGRlbHRhID0gb2Zmc2V0IC0gcmVzaXppbmcub2Zmc2V0O1xuICAgICAgICAgIGNvbnN0IG5ld1NpemUgPSBzaWRlYmFySXNGaXJzdCA/IHJlc2l6aW5nLnNpemUgKyBkZWx0YSA6IHJlc2l6aW5nLnNpemUgLSBkZWx0YTtcblxuICAgICAgICAgIGNvbnN0IHNwbGl0VmlldyA9IChldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLnBhcmVudEVsZW1lbnQhO1xuICAgICAgICAgIGNvbnN0IHJlY3QgPSBzcGxpdFZpZXcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgY29uc3Qgc2l6ZSA9IE1hdGgubWluKE1hdGgubWF4KG1pblNpZGViYXJTaXplLCBuZXdTaXplKSwgKG9yaWVudGF0aW9uID09PSAndmVydGljYWwnID8gcmVjdC5oZWlnaHQgOiByZWN0LndpZHRoKSAtIG1pblNpZGViYXJTaXplKTtcbiAgICAgICAgICBpZiAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpXG4gICAgICAgICAgICBzZXRWU2l6ZShzaXplICogd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHNldEhTaXplKHNpemUgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIH1cbiAgICAgIH19XG4gICAgPjwvZGl2Pn1cbiAgPC9kaXY+O1xufTtcbiIsIi8qXG4gIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZVwiKTtcbiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgY2xzeCB9IGZyb20gJy4uL3VpVXRpbHMnO1xuaW1wb3J0ICcuL3Rvb2xiYXIuY3NzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudHlwZSBUb29sYmFyUHJvcHMgPSB7XG4gIG5vU2hhZG93PzogYm9vbGVhbjtcbiAgbm9NaW5IZWlnaHQ/OiBib29sZWFuO1xuICBzaWRlYmFyQmFja2dyb3VuZD86IGJvb2xlYW47XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgb25DbGljaz86IChlOiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IFRvb2xiYXI6IFJlYWN0LkZDPFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPFRvb2xiYXJQcm9wcz4+ID0gKHtcbiAgbm9TaGFkb3csXG4gIGNoaWxkcmVuLFxuICBub01pbkhlaWdodCxcbiAgY2xhc3NOYW1lLFxuICBzaWRlYmFyQmFja2dyb3VuZCxcbiAgb25DbGljayxcbn0pID0+IHtcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbHN4KCd0b29sYmFyJywgbm9TaGFkb3cgJiYgJ25vLXNoYWRvdycsIG5vTWluSGVpZ2h0ICYmICduby1taW4taGVpZ2h0JywgY2xhc3NOYW1lLCBzaWRlYmFyQmFja2dyb3VuZCAmJiAndG9vbGJhci1zaWRlYmFyLWJhY2tncm91bmQnKX0gb25DbGljaz17b25DbGlja30+e2NoaWxkcmVufTwvZGl2Pjtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBjbHN4IH0gZnJvbSAnLi4vdWlVdGlscyc7XG5pbXBvcnQgJy4vdGFiYmVkUGFuZS5jc3MnO1xuaW1wb3J0IHsgVG9vbGJhciB9IGZyb20gJy4vdG9vbGJhcic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFiYmVkUGFuZVRhYk1vZGVsIHtcbiAgaWQ6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgY291bnQ/OiBudW1iZXI7XG4gIGVycm9yQ291bnQ/OiBudW1iZXI7XG4gIGNvbXBvbmVudD86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVuZGVyPzogKCkgPT4gUmVhY3QuUmVhY3RFbGVtZW50O1xufVxuXG5leHBvcnQgY29uc3QgVGFiYmVkUGFuZTogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8e1xuICB0YWJzOiBUYWJiZWRQYW5lVGFiTW9kZWxbXSxcbiAgbGVmdFRvb2xiYXI/OiBSZWFjdC5SZWFjdEVsZW1lbnRbXSxcbiAgcmlnaHRUb29sYmFyPzogUmVhY3QuUmVhY3RFbGVtZW50W10sXG4gIHNlbGVjdGVkVGFiPzogc3RyaW5nLFxuICBzZXRTZWxlY3RlZFRhYj86ICh0YWI6IHN0cmluZykgPT4gdm9pZCxcbiAgZGF0YVRlc3RJZD86IHN0cmluZyxcbiAgbW9kZT86ICdkZWZhdWx0JyB8ICdzZWxlY3QnLFxufT4gPSAoeyB0YWJzLCBzZWxlY3RlZFRhYiwgc2V0U2VsZWN0ZWRUYWIsIGxlZnRUb29sYmFyLCByaWdodFRvb2xiYXIsIGRhdGFUZXN0SWQsIG1vZGUgfSkgPT4ge1xuICBjb25zdCBpZCA9IFJlYWN0LnVzZUlkKCk7XG4gIGlmICghc2VsZWN0ZWRUYWIpXG4gICAgc2VsZWN0ZWRUYWIgPSB0YWJzWzBdLmlkO1xuICBpZiAoIW1vZGUpXG4gICAgbW9kZSA9ICdkZWZhdWx0JztcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSd0YWJiZWQtcGFuZScgZGF0YS10ZXN0aWQ9e2RhdGFUZXN0SWR9PlxuICAgIDxkaXYgY2xhc3NOYW1lPSd2Ym94Jz5cbiAgICAgIDxUb29sYmFyPlxuICAgICAgICB7IGxlZnRUb29sYmFyICYmIDxkaXYgc3R5bGU9e3sgZmxleDogJ25vbmUnLCBkaXNwbGF5OiAnZmxleCcsIG1hcmdpbjogJzAgNHB4JywgYWxpZ25JdGVtczogJ2NlbnRlcicgfX0+XG4gICAgICAgICAgey4uLmxlZnRUb29sYmFyfVxuICAgICAgICA8L2Rpdj59XG4gICAgICAgIHttb2RlID09PSAnZGVmYXVsdCcgJiYgPGRpdiBzdHlsZT17eyBmbGV4OiAnYXV0bycsIGRpc3BsYXk6ICdmbGV4JywgaGVpZ2h0OiAnMTAwJScsIG92ZXJmbG93OiAnaGlkZGVuJyB9fSByb2xlPSd0YWJsaXN0Jz5cbiAgICAgICAgICB7Wy4uLnRhYnMubWFwKHRhYiA9PiAoXG4gICAgICAgICAgICA8VGFiYmVkUGFuZVRhYlxuICAgICAgICAgICAgICBrZXk9e3RhYi5pZH1cbiAgICAgICAgICAgICAgaWQ9e3RhYi5pZH1cbiAgICAgICAgICAgICAgYXJpYUNvbnRyb2xzPXtgJHtpZH0tJHt0YWIuaWR9YH1cbiAgICAgICAgICAgICAgdGl0bGU9e3RhYi50aXRsZX1cbiAgICAgICAgICAgICAgY291bnQ9e3RhYi5jb3VudH1cbiAgICAgICAgICAgICAgZXJyb3JDb3VudD17dGFiLmVycm9yQ291bnR9XG4gICAgICAgICAgICAgIHNlbGVjdGVkPXtzZWxlY3RlZFRhYiA9PT0gdGFiLmlkfVxuICAgICAgICAgICAgICBvblNlbGVjdD17c2V0U2VsZWN0ZWRUYWJ9XG4gICAgICAgICAgICAvPikpLFxuICAgICAgICAgIF19XG4gICAgICAgIDwvZGl2Pn1cbiAgICAgICAge21vZGUgPT09ICdzZWxlY3QnICYmIDxkaXYgc3R5bGU9e3sgZmxleDogJ2F1dG8nLCBkaXNwbGF5OiAnZmxleCcsIGhlaWdodDogJzEwMCUnLCBvdmVyZmxvdzogJ2hpZGRlbicgfX0gcm9sZT0ndGFibGlzdCc+XG4gICAgICAgICAgPHNlbGVjdCBzdHlsZT17eyB3aWR0aDogJzEwMCUnLCBiYWNrZ3JvdW5kOiAnbm9uZScsIGN1cnNvcjogJ3BvaW50ZXInIH19IHZhbHVlPXtzZWxlY3RlZFRhYn0gb25DaGFuZ2U9e2UgPT4ge1xuICAgICAgICAgICAgc2V0U2VsZWN0ZWRUYWI/Lih0YWJzW2UuY3VycmVudFRhcmdldC5zZWxlY3RlZEluZGV4XS5pZCk7XG4gICAgICAgICAgfX0+XG4gICAgICAgICAgICB7dGFicy5tYXAodGFiID0+IHtcbiAgICAgICAgICAgICAgbGV0IHN1ZmZpeCA9ICcnO1xuICAgICAgICAgICAgICBpZiAodGFiLmNvdW50KVxuICAgICAgICAgICAgICAgIHN1ZmZpeCA9IGAgKCR7dGFiLmNvdW50fSlgO1xuICAgICAgICAgICAgICBpZiAodGFiLmVycm9yQ291bnQpXG4gICAgICAgICAgICAgICAgc3VmZml4ID0gYCAoJHt0YWIuZXJyb3JDb3VudH0pYDtcbiAgICAgICAgICAgICAgcmV0dXJuIDxvcHRpb24ga2V5PXt0YWIuaWR9IHZhbHVlPXt0YWIuaWR9IHJvbGU9J3RhYicgYXJpYS1jb250cm9scz17YCR7aWR9LSR7dGFiLmlkfWB9Pnt0YWIudGl0bGV9e3N1ZmZpeH08L29wdGlvbj47XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+fVxuICAgICAgICB7cmlnaHRUb29sYmFyICYmIDxkaXYgc3R5bGU9e3sgZmxleDogJ25vbmUnLCBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInIH19PlxuICAgICAgICAgIHsuLi5yaWdodFRvb2xiYXJ9XG4gICAgICAgIDwvZGl2Pn1cbiAgICAgIDwvVG9vbGJhcj5cbiAgICAgIHtcbiAgICAgICAgdGFicy5tYXAodGFiID0+IHtcbiAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSAndGFiLWNvbnRlbnQgdGFiLScgKyB0YWIuaWQ7XG4gICAgICAgICAgaWYgKHRhYi5jb21wb25lbnQpXG4gICAgICAgICAgICByZXR1cm4gPGRpdiBrZXk9e3RhYi5pZH0gaWQ9e2Ake2lkfS0ke3RhYi5pZH1gfSByb2xlPSd0YWJwYW5lbCcgYXJpYS1sYWJlbD17dGFiLnRpdGxlfSBjbGFzc05hbWU9e2NsYXNzTmFtZX0gc3R5bGU9e3sgZGlzcGxheTogc2VsZWN0ZWRUYWIgPT09IHRhYi5pZCA/ICdpbmhlcml0JyA6ICdub25lJyB9fT57dGFiLmNvbXBvbmVudH08L2Rpdj47XG4gICAgICAgICAgaWYgKHNlbGVjdGVkVGFiID09PSB0YWIuaWQpXG4gICAgICAgICAgICByZXR1cm4gPGRpdiBrZXk9e3RhYi5pZH0gaWQ9e2Ake2lkfS0ke3RhYi5pZH1gfSByb2xlPSd0YWJwYW5lbCcgYXJpYS1sYWJlbD17dGFiLnRpdGxlfSBjbGFzc05hbWU9e2NsYXNzTmFtZX0+e3RhYi5yZW5kZXIhKCl9PC9kaXY+O1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIDwvZGl2PlxuICA8L2Rpdj47XG59O1xuXG5leHBvcnQgY29uc3QgVGFiYmVkUGFuZVRhYjogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8e1xuICBpZDogc3RyaW5nLFxuICB0aXRsZTogc3RyaW5nLFxuICBjb3VudD86IG51bWJlcixcbiAgZXJyb3JDb3VudD86IG51bWJlcixcbiAgc2VsZWN0ZWQ/OiBib29sZWFuLFxuICBvblNlbGVjdD86IChpZDogc3RyaW5nKSA9PiB2b2lkLFxuICBhcmlhQ29udHJvbHM/OiBzdHJpbmcsXG59PiA9ICh7IGlkLCB0aXRsZSwgY291bnQsIGVycm9yQ291bnQsIHNlbGVjdGVkLCBvblNlbGVjdCwgYXJpYUNvbnRyb2xzIH0pID0+IHtcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbHN4KCd0YWJiZWQtcGFuZS10YWInLCBzZWxlY3RlZCAmJiAnc2VsZWN0ZWQnKX1cbiAgICBvbkNsaWNrPXsoKSA9PiBvblNlbGVjdD8uKGlkKX1cbiAgICByb2xlPSd0YWInXG4gICAgdGl0bGU9e3RpdGxlfVxuICAgIGFyaWEtY29udHJvbHM9e2FyaWFDb250cm9sc30+XG4gICAgPGRpdiBjbGFzc05hbWU9J3RhYmJlZC1wYW5lLXRhYi1sYWJlbCc+e3RpdGxlfTwvZGl2PlxuICAgIHshIWNvdW50ICYmIDxkaXYgY2xhc3NOYW1lPSd0YWJiZWQtcGFuZS10YWItY291bnRlcic+e2NvdW50fTwvZGl2Pn1cbiAgICB7ISFlcnJvckNvdW50ICYmIDxkaXYgY2xhc3NOYW1lPSd0YWJiZWQtcGFuZS10YWItY291bnRlciBlcnJvcic+e2Vycm9yQ291bnR9PC9kaXY+fVxuICA8L2Rpdj47XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IFNvdXJjZSB9IGZyb20gJ0ByZWNvcmRlci9yZWNvcmRlclR5cGVzJztcblxuZXhwb3J0IGNvbnN0IFNvdXJjZUNob29zZXI6IFJlYWN0LkZDPHtcbiAgc291cmNlczogU291cmNlW10sXG4gIGZpbGVJZDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICBzZXRGaWxlSWQ6IChmaWxlSWQ6IHN0cmluZykgPT4gdm9pZCxcbn0+ID0gKHsgc291cmNlcywgZmlsZUlkLCBzZXRGaWxlSWQgfSkgPT4ge1xuICByZXR1cm4gPHNlbGVjdCBjbGFzc05hbWU9J3NvdXJjZS1jaG9vc2VyJyBoaWRkZW49eyFzb3VyY2VzLmxlbmd0aH0gdGl0bGU9J1NvdXJjZSBjaG9vc2VyJyB2YWx1ZT17ZmlsZUlkfSBvbkNoYW5nZT17ZXZlbnQgPT4ge1xuICAgIHNldEZpbGVJZChldmVudC50YXJnZXQuc2VsZWN0ZWRPcHRpb25zWzBdLnZhbHVlKTtcbiAgfX0+e3JlbmRlclNvdXJjZU9wdGlvbnMoc291cmNlcyl9PC9zZWxlY3Q+O1xufTtcblxuZnVuY3Rpb24gcmVuZGVyU291cmNlT3B0aW9ucyhzb3VyY2VzOiBTb3VyY2VbXSk6IFJlYWN0LlJlYWN0Tm9kZSB7XG4gIGNvbnN0IHRyYW5zZm9ybVRpdGxlID0gKHRpdGxlOiBzdHJpbmcpOiBzdHJpbmcgPT4gdGl0bGUucmVwbGFjZSgvLipbL1xcXFxdKFteL1xcXFxdKykvLCAnJDEnKTtcbiAgY29uc3QgcmVuZGVyT3B0aW9uID0gKHNvdXJjZTogU291cmNlKTogUmVhY3QuUmVhY3ROb2RlID0+IChcbiAgICA8b3B0aW9uIGtleT17c291cmNlLmlkfSB2YWx1ZT17c291cmNlLmlkfT57dHJhbnNmb3JtVGl0bGUoc291cmNlLmxhYmVsKX08L29wdGlvbj5cbiAgKTtcblxuICBjb25zdCBzb3VyY2VzQnlHcm91cHMgPSBuZXcgTWFwPHN0cmluZywgU291cmNlW10+KCk7XG4gIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICBsZXQgbGlzdCA9IHNvdXJjZXNCeUdyb3Vwcy5nZXQoc291cmNlLmdyb3VwIHx8ICdEZWJ1Z2dlcicpO1xuICAgIGlmICghbGlzdCkge1xuICAgICAgbGlzdCA9IFtdO1xuICAgICAgc291cmNlc0J5R3JvdXBzLnNldChzb3VyY2UuZ3JvdXAgfHwgJ0RlYnVnZ2VyJywgbGlzdCk7XG4gICAgfVxuICAgIGxpc3QucHVzaChzb3VyY2UpO1xuICB9XG5cbiAgcmV0dXJuIFsuLi5zb3VyY2VzQnlHcm91cHMuZW50cmllcygpXS5tYXAoKFtncm91cCwgc291cmNlc10pID0+IChcbiAgICA8b3B0Z3JvdXAgbGFiZWw9e2dyb3VwfSBrZXk9e2dyb3VwfT5cbiAgICAgIHtzb3VyY2VzLmZpbHRlcihzID0+IChzLmdyb3VwIHx8ICdEZWJ1Z2dlcicpID09PSBncm91cCkubWFwKHNvdXJjZSA9PiByZW5kZXJPcHRpb24oc291cmNlKSl9XG4gICAgPC9vcHRncm91cD5cbiAgKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbXB0eVNvdXJjZSgpOiBTb3VyY2Uge1xuICByZXR1cm4ge1xuICAgIGlkOiAnZGVmYXVsdCcsXG4gICAgaXNSZWNvcmRlZDogZmFsc2UsXG4gICAgdGV4dDogJycsXG4gICAgbGFuZ3VhZ2U6ICdqYXZhc2NyaXB0JyxcbiAgICBsYWJlbDogJycsXG4gICAgaGlnaGxpZ2h0OiBbXVxuICB9O1xufVxuIiwiLypcbiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0ICcuL3Rvb2xiYXJCdXR0b24uY3NzJztcbmltcG9ydCAnLi4vdGhpcmRfcGFydHkvdnNjb2RlL2NvZGljb24uY3NzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNsc3ggfSBmcm9tICcuLi91aVV0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBUb29sYmFyQnV0dG9uUHJvcHMge1xuICB0aXRsZT86IHN0cmluZyxcbiAgaWNvbj86IHN0cmluZyxcbiAgZGlzYWJsZWQ/OiBib29sZWFuLFxuICB0b2dnbGVkPzogYm9vbGVhbixcbiAgb25DbGljaz86IChlOiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiB2b2lkLFxuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXMsXG4gIHRlc3RJZD86IHN0cmluZyxcbiAgY2xhc3NOYW1lPzogc3RyaW5nLFxuICBhcmlhTGFiZWw/OiBzdHJpbmcsXG59XG5cbmV4cG9ydCBjb25zdCBUb29sYmFyQnV0dG9uID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MQnV0dG9uRWxlbWVudCwgUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48VG9vbGJhckJ1dHRvblByb3BzPj4oZnVuY3Rpb24gVG9vbGJhckJ1dHRvbih7XG4gIGNoaWxkcmVuLFxuICB0aXRsZSA9ICcnLFxuICBpY29uLFxuICBkaXNhYmxlZCA9IGZhbHNlLFxuICB0b2dnbGVkID0gZmFsc2UsXG4gIG9uQ2xpY2sgPSAoKSA9PiB7fSxcbiAgc3R5bGUsXG4gIHRlc3RJZCxcbiAgY2xhc3NOYW1lLFxuICBhcmlhTGFiZWwsXG59LCByZWYpIHtcbiAgcmV0dXJuIDxidXR0b25cbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3NOYW1lLCAndG9vbGJhci1idXR0b24nLCBpY29uLCB0b2dnbGVkICYmICd0b2dnbGVkJyl9XG4gICAgb25Nb3VzZURvd249e3ByZXZlbnREZWZhdWx0fVxuICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgb25Eb3VibGVDbGljaz17cHJldmVudERlZmF1bHR9XG4gICAgdGl0bGU9e3RpdGxlfVxuICAgIGRpc2FibGVkPXshIWRpc2FibGVkfVxuICAgIHN0eWxlPXtzdHlsZX1cbiAgICBkYXRhLXRlc3RpZD17dGVzdElkfVxuICAgIGFyaWEtbGFiZWw9e2FyaWFMYWJlbCB8fCB0aXRsZX1cbiAgPlxuICAgIHtpY29uICYmIDxzcGFuIGNsYXNzTmFtZT17YGNvZGljb24gY29kaWNvbi0ke2ljb259YH0gc3R5bGU9e2NoaWxkcmVuID8geyBtYXJnaW5SaWdodDogNSB9IDoge319Pjwvc3Bhbj59XG4gICAge2NoaWxkcmVufVxuICA8L2J1dHRvbj47XG59KTtcblxuZXhwb3J0IGNvbnN0IFRvb2xiYXJTZXBhcmF0b3I6IFJlYWN0LkZDPHsgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzIH0+ID0gKHtcbiAgc3R5bGUsXG59KSA9PiB7XG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0ndG9vbGJhci1zZXBhcmF0b3InIHN0eWxlPXtzdHlsZX0+PC9kaXY+O1xufTtcblxuY29uc3QgcHJldmVudERlZmF1bHQgPSAoZTogYW55KSA9PiB7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBub3RpY2Uvbm90aWNlICovXG5cbi8qXG4gKiBUaGUgY29kZSBpbiB0aGlzIGZpbGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIENDMCBsaWNlbnNlLlxuICogaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvcHVibGljZG9tYWluL3plcm8vMS4wL1xuICogSXQgaXMgZnJlZSB0byB1c2UgZm9yIGFueSBwdXJwb3NlLiBObyBhdHRyaWJ1dGlvbiwgcGVybWlzc2lvbiwgb3IgcmVwcm9kdWN0aW9uIG9mIHRoaXMgbGljZW5zZSBpcyByZXF1aXJlZC5cbiAqL1xuXG4vLyBPcmlnaW5hbCBhdCBodHRwczovL2dpdGh1Yi5jb20vdGFiYXRraW5zL3BhcnNlLWNzc1xuLy8gQ2hhbmdlczpcbi8vICAgLSBKUyBpcyByZXBsYWNlZCB3aXRoIFRTLlxuLy8gICAtIFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbiB3cmFwcGVyIGlzIHJlbW92ZWQuXG4vLyAgIC0gRXZlcnl0aGluZyBub3QgcmVsYXRlZCB0byB0b2tlbml6aW5nIC0gYmVsb3cgdGhlIGZpcnN0IGV4cG9ydHMgYmxvY2sgLSBpcyByZW1vdmVkLlxuXG5leHBvcnQgaW50ZXJmYWNlIENTU1Rva2VuSW50ZXJmYWNlIHtcbiAgdG9Tb3VyY2UoKTogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgdW5kZWZpbmVkO1xufVxuXG5jb25zdCBiZXR3ZWVuID0gZnVuY3Rpb24obnVtOiBudW1iZXIsIGZpcnN0OiBudW1iZXIsIGxhc3Q6IG51bWJlcikgeyByZXR1cm4gbnVtID49IGZpcnN0ICYmIG51bSA8PSBsYXN0OyB9O1xuZnVuY3Rpb24gZGlnaXQoY29kZTogbnVtYmVyKSB7IHJldHVybiBiZXR3ZWVuKGNvZGUsIDB4MzAsIDB4MzkpOyB9XG5mdW5jdGlvbiBoZXhkaWdpdChjb2RlOiBudW1iZXIpIHsgcmV0dXJuIGRpZ2l0KGNvZGUpIHx8IGJldHdlZW4oY29kZSwgMHg0MSwgMHg0NikgfHwgYmV0d2Vlbihjb2RlLCAweDYxLCAweDY2KTsgfVxuZnVuY3Rpb24gdXBwZXJjYXNlbGV0dGVyKGNvZGU6IG51bWJlcikgeyByZXR1cm4gYmV0d2Vlbihjb2RlLCAweDQxLCAweDVhKTsgfVxuZnVuY3Rpb24gbG93ZXJjYXNlbGV0dGVyKGNvZGU6IG51bWJlcikgeyByZXR1cm4gYmV0d2Vlbihjb2RlLCAweDYxLCAweDdhKTsgfVxuZnVuY3Rpb24gbGV0dGVyKGNvZGU6IG51bWJlcikgeyByZXR1cm4gdXBwZXJjYXNlbGV0dGVyKGNvZGUpIHx8IGxvd2VyY2FzZWxldHRlcihjb2RlKTsgfVxuZnVuY3Rpb24gbm9uYXNjaWkoY29kZTogbnVtYmVyKSB7IHJldHVybiBjb2RlID49IDB4ODA7IH1cbmZ1bmN0aW9uIG5hbWVzdGFydGNoYXIoY29kZTogbnVtYmVyKSB7IHJldHVybiBsZXR0ZXIoY29kZSkgfHwgbm9uYXNjaWkoY29kZSkgfHwgY29kZSA9PT0gMHg1ZjsgfVxuZnVuY3Rpb24gbmFtZWNoYXIoY29kZTogbnVtYmVyKSB7IHJldHVybiBuYW1lc3RhcnRjaGFyKGNvZGUpIHx8IGRpZ2l0KGNvZGUpIHx8IGNvZGUgPT09IDB4MmQ7IH1cbmZ1bmN0aW9uIG5vbnByaW50YWJsZShjb2RlOiBudW1iZXIpIHsgcmV0dXJuIGJldHdlZW4oY29kZSwgMCwgOCkgfHwgY29kZSA9PT0gMHhiIHx8IGJldHdlZW4oY29kZSwgMHhlLCAweDFmKSB8fCBjb2RlID09PSAweDdmOyB9XG5mdW5jdGlvbiBuZXdsaW5lKGNvZGU6IG51bWJlcikgeyByZXR1cm4gY29kZSA9PT0gMHhhOyB9XG5mdW5jdGlvbiB3aGl0ZXNwYWNlKGNvZGU6IG51bWJlcikgeyByZXR1cm4gbmV3bGluZShjb2RlKSB8fCBjb2RlID09PSA5IHx8IGNvZGUgPT09IDB4MjA7IH1cblxuY29uc3QgbWF4aW11bWFsbG93ZWRjb2RlcG9pbnQgPSAweDEwZmZmZjtcblxuZXhwb3J0IGNsYXNzIEludmFsaWRDaGFyYWN0ZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ0ludmFsaWRDaGFyYWN0ZXJFcnJvcic7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcHJvY2VzcyhzdHI6IHN0cmluZyk6IG51bWJlcltdIHtcbiAgLy8gVHVybiBhIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIGNvZGUgcG9pbnRzLFxuICAvLyBmb2xsb3dpbmcgdGhlIHByZXByb2Nlc3NpbmcgY2xlYW51cCBydWxlcy5cbiAgY29uc3QgY29kZXBvaW50cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGxldCBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPT09IDB4ZCAmJiBzdHIuY2hhckNvZGVBdChpICsgMSkgPT09IDB4YSkge1xuICAgICAgY29kZSA9IDB4YTsgaSsrO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gMHhkIHx8IGNvZGUgPT09IDB4YylcbiAgICAgIGNvZGUgPSAweGE7XG4gICAgaWYgKGNvZGUgPT09IDB4MClcbiAgICAgIGNvZGUgPSAweGZmZmQ7XG4gICAgaWYgKGJldHdlZW4oY29kZSwgMHhkODAwLCAweGRiZmYpICYmIGJldHdlZW4oc3RyLmNoYXJDb2RlQXQoaSArIDEpLCAweGRjMDAsIDB4ZGZmZikpIHtcbiAgICAgIC8vIERlY29kZSBhIHN1cnJvZ2F0ZSBwYWlyIGludG8gYW4gYXN0cmFsIGNvZGVwb2ludC5cbiAgICAgIGNvbnN0IGxlYWQgPSBjb2RlIC0gMHhkODAwO1xuICAgICAgY29uc3QgdHJhaWwgPSBzdHIuY2hhckNvZGVBdChpICsgMSkgLSAweGRjMDA7XG4gICAgICBjb2RlID0gTWF0aC5wb3coMiwgMTYpICsgbGVhZCAqIE1hdGgucG93KDIsIDEwKSArIHRyYWlsO1xuICAgICAgaSsrO1xuICAgIH1cbiAgICBjb2RlcG9pbnRzLnB1c2goY29kZSk7XG4gIH1cbiAgcmV0dXJuIGNvZGVwb2ludHM7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ0Zyb21Db2RlKGNvZGU6IG51bWJlcikge1xuICBpZiAoY29kZSA8PSAweGZmZmYpXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gIC8vIE90aGVyd2lzZSwgZW5jb2RlIGFzdHJhbCBjaGFyIGFzIHN1cnJvZ2F0ZSBwYWlyLlxuICBjb2RlIC09IE1hdGgucG93KDIsIDE2KTtcbiAgY29uc3QgbGVhZCA9IE1hdGguZmxvb3IoY29kZSAvIE1hdGgucG93KDIsIDEwKSkgKyAweGQ4MDA7XG4gIGNvbnN0IHRyYWlsID0gY29kZSAlIE1hdGgucG93KDIsIDEwKSArIDB4ZGMwMDtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUobGVhZCkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHRyYWlsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplKHN0cjE6IHN0cmluZyk6IENTU1Rva2VuSW50ZXJmYWNlW10ge1xuICBjb25zdCBzdHIgPSBwcmVwcm9jZXNzKHN0cjEpO1xuICBsZXQgaSA9IC0xO1xuICBjb25zdCB0b2tlbnM6IENTU1Rva2VuSW50ZXJmYWNlW10gPSBbXTtcbiAgbGV0IGNvZGU6IG51bWJlcjtcblxuICAvLyBMaW5lIG51bWJlciBpbmZvcm1hdGlvbi5cbiAgbGV0IGxpbmUgPSAwO1xuICBsZXQgY29sdW1uID0gMDtcbiAgLy8gVGhlIG9ubHkgdXNlIG9mIGxhc3RMaW5lTGVuZ3RoIGlzIGluIHJlY29uc3VtZSgpLlxuICBsZXQgbGFzdExpbmVMZW5ndGggPSAwO1xuICBjb25zdCBpbmNyTGluZW5vID0gZnVuY3Rpb24oKSB7XG4gICAgbGluZSArPSAxO1xuICAgIGxhc3RMaW5lTGVuZ3RoID0gY29sdW1uO1xuICAgIGNvbHVtbiA9IDA7XG4gIH07XG4gIGNvbnN0IGxvY1N0YXJ0ID0geyBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiB9O1xuXG4gIGNvbnN0IGNvZGVwb2ludCA9IGZ1bmN0aW9uKGk6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKGkgPj0gc3RyLmxlbmd0aClcbiAgICAgIHJldHVybiAtMTtcblxuICAgIHJldHVybiBzdHJbaV07XG4gIH07XG4gIGNvbnN0IG5leHQgPSBmdW5jdGlvbihudW0/OiBudW1iZXIpIHtcbiAgICBpZiAobnVtID09PSB1bmRlZmluZWQpXG4gICAgICBudW0gPSAxO1xuICAgIGlmIChudW0gPiAzKVxuICAgICAgdGhyb3cgJ1NwZWMgRXJyb3I6IG5vIG1vcmUgdGhhbiB0aHJlZSBjb2RlcG9pbnRzIG9mIGxvb2thaGVhZC4nO1xuICAgIHJldHVybiBjb2RlcG9pbnQoaSArIG51bSk7XG4gIH07XG4gIGNvbnN0IGNvbnN1bWUgPSBmdW5jdGlvbihudW0/OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAobnVtID09PSB1bmRlZmluZWQpXG4gICAgICBudW0gPSAxO1xuICAgIGkgKz0gbnVtO1xuICAgIGNvZGUgPSBjb2RlcG9pbnQoaSk7XG4gICAgaWYgKG5ld2xpbmUoY29kZSkpXG4gICAgICBpbmNyTGluZW5vKCk7XG4gICAgZWxzZVxuICAgICAgY29sdW1uICs9IG51bTtcbiAgICAvLyBjb25zb2xlLmxvZygnQ29uc3VtZSAnK2krJyAnK1N0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkgKyAnIDB4JyArIGNvZGUudG9TdHJpbmcoMTYpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgY29uc3QgcmVjb25zdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgaSAtPSAxO1xuICAgIGlmIChuZXdsaW5lKGNvZGUpKSB7XG4gICAgICBsaW5lIC09IDE7XG4gICAgICBjb2x1bW4gPSBsYXN0TGluZUxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29sdW1uIC09IDE7XG4gICAgfVxuICAgIGxvY1N0YXJ0LmxpbmUgPSBsaW5lO1xuICAgIGxvY1N0YXJ0LmNvbHVtbiA9IGNvbHVtbjtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgY29uc3QgZW9mID0gZnVuY3Rpb24oY29kZXBvaW50PzogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKGNvZGVwb2ludCA9PT0gdW5kZWZpbmVkKVxuICAgICAgY29kZXBvaW50ID0gY29kZTtcbiAgICByZXR1cm4gY29kZXBvaW50ID09PSAtMTtcbiAgfTtcbiAgY29uc3QgZG9ub3RoaW5nID0gZnVuY3Rpb24oKSB7IH07XG4gIGNvbnN0IHBhcnNlZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBMYW5ndWFnZSBiaW5kaW5ncyBkb24ndCBsaWtlIHdyaXRpbmcgdG8gc3Rkb3V0IVxuICAgIC8vIGNvbnNvbGUubG9nKCdQYXJzZSBlcnJvciBhdCBpbmRleCAnICsgaSArICcsIHByb2Nlc3NpbmcgY29kZXBvaW50IDB4JyArIGNvZGUudG9TdHJpbmcoMTYpICsgJy4nKTsgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgY29uc3QgY29uc3VtZUFUb2tlbiA9IGZ1bmN0aW9uKCk6IENTU1Rva2VuSW50ZXJmYWNlIHtcbiAgICBjb25zdW1lQ29tbWVudHMoKTtcbiAgICBjb25zdW1lKCk7XG4gICAgaWYgKHdoaXRlc3BhY2UoY29kZSkpIHtcbiAgICAgIHdoaWxlICh3aGl0ZXNwYWNlKG5leHQoKSkpXG4gICAgICAgIGNvbnN1bWUoKTtcbiAgICAgIHJldHVybiBuZXcgV2hpdGVzcGFjZVRva2VuKCk7XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAweDIyKSB7cmV0dXJuIGNvbnN1bWVBU3RyaW5nVG9rZW4oKTt9IGVsc2UgaWYgKGNvZGUgPT09IDB4MjMpIHtcbiAgICAgIGlmIChuYW1lY2hhcihuZXh0KCkpIHx8IGFyZUFWYWxpZEVzY2FwZShuZXh0KDEpLCBuZXh0KDIpKSkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IG5ldyBIYXNoVG9rZW4oJycpO1xuICAgICAgICBpZiAod291bGRTdGFydEFuSWRlbnRpZmllcihuZXh0KDEpLCBuZXh0KDIpLCBuZXh0KDMpKSlcbiAgICAgICAgICB0b2tlbi50eXBlID0gJ2lkJztcbiAgICAgICAgdG9rZW4udmFsdWUgPSBjb25zdW1lQU5hbWUoKTtcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWxpbVRva2VuKGNvZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyNCkge1xuICAgICAgaWYgKG5leHQoKSA9PT0gMHgzZCkge1xuICAgICAgICBjb25zdW1lKCk7XG4gICAgICAgIHJldHVybiBuZXcgU3VmZml4TWF0Y2hUb2tlbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWxpbVRva2VuKGNvZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyNykge3JldHVybiBjb25zdW1lQVN0cmluZ1Rva2VuKCk7fSBlbHNlIGlmIChjb2RlID09PSAweDI4KSB7cmV0dXJuIG5ldyBPcGVuUGFyZW5Ub2tlbigpO30gZWxzZSBpZiAoY29kZSA9PT0gMHgyOSkge3JldHVybiBuZXcgQ2xvc2VQYXJlblRva2VuKCk7fSBlbHNlIGlmIChjb2RlID09PSAweDJhKSB7XG4gICAgICBpZiAobmV4dCgpID09PSAweDNkKSB7XG4gICAgICAgIGNvbnN1bWUoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzdHJpbmdNYXRjaFRva2VuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IERlbGltVG9rZW4oY29kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAweDJiKSB7XG4gICAgICBpZiAoc3RhcnRzV2l0aEFOdW1iZXIoKSkge1xuICAgICAgICByZWNvbnN1bWUoKTtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVBTnVtZXJpY1Rva2VuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IERlbGltVG9rZW4oY29kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAweDJjKSB7cmV0dXJuIG5ldyBDb21tYVRva2VuKCk7fSBlbHNlIGlmIChjb2RlID09PSAweDJkKSB7XG4gICAgICBpZiAoc3RhcnRzV2l0aEFOdW1iZXIoKSkge1xuICAgICAgICByZWNvbnN1bWUoKTtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVBTnVtZXJpY1Rva2VuKCk7XG4gICAgICB9IGVsc2UgaWYgKG5leHQoMSkgPT09IDB4MmQgJiYgbmV4dCgyKSA9PT0gMHgzZSkge1xuICAgICAgICBjb25zdW1lKDIpO1xuICAgICAgICByZXR1cm4gbmV3IENEQ1Rva2VuKCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0c1dpdGhBbklkZW50aWZpZXIoKSkge1xuICAgICAgICByZWNvbnN1bWUoKTtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVBbklkZW50bGlrZVRva2VuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IERlbGltVG9rZW4oY29kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAweDJlKSB7XG4gICAgICBpZiAoc3RhcnRzV2l0aEFOdW1iZXIoKSkge1xuICAgICAgICByZWNvbnN1bWUoKTtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVBTnVtZXJpY1Rva2VuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IERlbGltVG9rZW4oY29kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAweDNhKSB7cmV0dXJuIG5ldyBDb2xvblRva2VuKCk7fSBlbHNlIGlmIChjb2RlID09PSAweDNiKSB7cmV0dXJuIG5ldyBTZW1pY29sb25Ub2tlbigpO30gZWxzZSBpZiAoY29kZSA9PT0gMHgzYykge1xuICAgICAgaWYgKG5leHQoMSkgPT09IDB4MjEgJiYgbmV4dCgyKSA9PT0gMHgyZCAmJiBuZXh0KDMpID09PSAweDJkKSB7XG4gICAgICAgIGNvbnN1bWUoMyk7XG4gICAgICAgIHJldHVybiBuZXcgQ0RPVG9rZW4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVsaW1Ub2tlbihjb2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4NDApIHtcbiAgICAgIGlmICh3b3VsZFN0YXJ0QW5JZGVudGlmaWVyKG5leHQoMSksIG5leHQoMiksIG5leHQoMykpKVxuICAgICAgICByZXR1cm4gbmV3IEF0S2V5d29yZFRva2VuKGNvbnN1bWVBTmFtZSgpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIG5ldyBEZWxpbVRva2VuKGNvZGUpO1xuXG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAweDViKSB7cmV0dXJuIG5ldyBPcGVuU3F1YXJlVG9rZW4oKTt9IGVsc2UgaWYgKGNvZGUgPT09IDB4NWMpIHtcbiAgICAgIGlmIChzdGFydHNXaXRoQVZhbGlkRXNjYXBlKCkpIHtcbiAgICAgICAgcmVjb25zdW1lKCk7XG4gICAgICAgIHJldHVybiBjb25zdW1lQW5JZGVudGxpa2VUb2tlbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VlcnJvcigpO1xuICAgICAgICByZXR1cm4gbmV3IERlbGltVG9rZW4oY29kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAweDVkKSB7cmV0dXJuIG5ldyBDbG9zZVNxdWFyZVRva2VuKCk7fSBlbHNlIGlmIChjb2RlID09PSAweDVlKSB7XG4gICAgICBpZiAobmV4dCgpID09PSAweDNkKSB7XG4gICAgICAgIGNvbnN1bWUoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcmVmaXhNYXRjaFRva2VuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IERlbGltVG9rZW4oY29kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAweDdiKSB7cmV0dXJuIG5ldyBPcGVuQ3VybHlUb2tlbigpO30gZWxzZSBpZiAoY29kZSA9PT0gMHg3Yykge1xuICAgICAgaWYgKG5leHQoKSA9PT0gMHgzZCkge1xuICAgICAgICBjb25zdW1lKCk7XG4gICAgICAgIHJldHVybiBuZXcgRGFzaE1hdGNoVG9rZW4oKTtcbiAgICAgIH0gZWxzZSBpZiAobmV4dCgpID09PSAweDdjKSB7XG4gICAgICAgIGNvbnN1bWUoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2x1bW5Ub2tlbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWxpbVRva2VuKGNvZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHg3ZCkge3JldHVybiBuZXcgQ2xvc2VDdXJseVRva2VuKCk7fSBlbHNlIGlmIChjb2RlID09PSAweDdlKSB7XG4gICAgICBpZiAobmV4dCgpID09PSAweDNkKSB7XG4gICAgICAgIGNvbnN1bWUoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBJbmNsdWRlTWF0Y2hUb2tlbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWxpbVRva2VuKGNvZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGlnaXQoY29kZSkpIHtcbiAgICAgIHJlY29uc3VtZSgpO1xuICAgICAgcmV0dXJuIGNvbnN1bWVBTnVtZXJpY1Rva2VuKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lc3RhcnRjaGFyKGNvZGUpKSB7XG4gICAgICByZWNvbnN1bWUoKTtcbiAgICAgIHJldHVybiBjb25zdW1lQW5JZGVudGxpa2VUb2tlbigpO1xuICAgIH0gZWxzZSBpZiAoZW9mKCkpIHtyZXR1cm4gbmV3IEVPRlRva2VuKCk7fSBlbHNlIHtyZXR1cm4gbmV3IERlbGltVG9rZW4oY29kZSk7fVxuICB9O1xuXG4gIGNvbnN0IGNvbnN1bWVDb21tZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIHdoaWxlIChuZXh0KDEpID09PSAweDJmICYmIG5leHQoMikgPT09IDB4MmEpIHtcbiAgICAgIGNvbnN1bWUoMik7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdW1lKCk7XG4gICAgICAgIGlmIChjb2RlID09PSAweDJhICYmIG5leHQoKSA9PT0gMHgyZikge1xuICAgICAgICAgIGNvbnN1bWUoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmIChlb2YoKSkge1xuICAgICAgICAgIHBhcnNlZXJyb3IoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY29uc3VtZUFOdW1lcmljVG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBudW0gPSBjb25zdW1lQU51bWJlcigpO1xuICAgIGlmICh3b3VsZFN0YXJ0QW5JZGVudGlmaWVyKG5leHQoMSksIG5leHQoMiksIG5leHQoMykpKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IG5ldyBEaW1lbnNpb25Ub2tlbigpO1xuICAgICAgdG9rZW4udmFsdWUgPSBudW0udmFsdWU7XG4gICAgICB0b2tlbi5yZXByID0gbnVtLnJlcHI7XG4gICAgICB0b2tlbi50eXBlID0gbnVtLnR5cGU7XG4gICAgICB0b2tlbi51bml0ID0gY29uc3VtZUFOYW1lKCk7XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfSBlbHNlIGlmIChuZXh0KCkgPT09IDB4MjUpIHtcbiAgICAgIGNvbnN1bWUoKTtcbiAgICAgIGNvbnN0IHRva2VuID0gbmV3IFBlcmNlbnRhZ2VUb2tlbigpO1xuICAgICAgdG9rZW4udmFsdWUgPSBudW0udmFsdWU7XG4gICAgICB0b2tlbi5yZXByID0gbnVtLnJlcHI7XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHRva2VuID0gbmV3IE51bWJlclRva2VuKCk7XG4gICAgICB0b2tlbi52YWx1ZSA9IG51bS52YWx1ZTtcbiAgICAgIHRva2VuLnJlcHIgPSBudW0ucmVwcjtcbiAgICAgIHRva2VuLnR5cGUgPSBudW0udHlwZTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY29uc3VtZUFuSWRlbnRsaWtlVG9rZW4gPSBmdW5jdGlvbigpOiBDU1NUb2tlbkludGVyZmFjZSB7XG4gICAgY29uc3Qgc3RyID0gY29uc3VtZUFOYW1lKCk7XG4gICAgaWYgKHN0ci50b0xvd2VyQ2FzZSgpID09PSAndXJsJyAmJiBuZXh0KCkgPT09IDB4MjgpIHtcbiAgICAgIGNvbnN1bWUoKTtcbiAgICAgIHdoaWxlICh3aGl0ZXNwYWNlKG5leHQoMSkpICYmIHdoaXRlc3BhY2UobmV4dCgyKSkpXG4gICAgICAgIGNvbnN1bWUoKTtcbiAgICAgIGlmIChuZXh0KCkgPT09IDB4MjIgfHwgbmV4dCgpID09PSAweDI3KVxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uVG9rZW4oc3RyKTtcbiAgICAgIGVsc2UgaWYgKHdoaXRlc3BhY2UobmV4dCgpKSAmJiAobmV4dCgyKSA9PT0gMHgyMiB8fCBuZXh0KDIpID09PSAweDI3KSlcbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvblRva2VuKHN0cik7XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiBjb25zdW1lQVVSTFRva2VuKCk7XG5cbiAgICB9IGVsc2UgaWYgKG5leHQoKSA9PT0gMHgyOCkge1xuICAgICAgY29uc3VtZSgpO1xuICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvblRva2VuKHN0cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgSWRlbnRUb2tlbihzdHIpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBjb25zdW1lQVN0cmluZ1Rva2VuID0gZnVuY3Rpb24oZW5kaW5nQ29kZVBvaW50PzogbnVtYmVyKTogQ1NTUGFyc2VyVG9rZW4ge1xuICAgIGlmIChlbmRpbmdDb2RlUG9pbnQgPT09IHVuZGVmaW5lZClcbiAgICAgIGVuZGluZ0NvZGVQb2ludCA9IGNvZGU7XG4gICAgbGV0IHN0cmluZyA9ICcnO1xuICAgIHdoaWxlIChjb25zdW1lKCkpIHtcbiAgICAgIGlmIChjb2RlID09PSBlbmRpbmdDb2RlUG9pbnQgfHwgZW9mKCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJpbmdUb2tlbihzdHJpbmcpO1xuICAgICAgfSBlbHNlIGlmIChuZXdsaW5lKGNvZGUpKSB7XG4gICAgICAgIHBhcnNlZXJyb3IoKTtcbiAgICAgICAgcmVjb25zdW1lKCk7XG4gICAgICAgIHJldHVybiBuZXcgQmFkU3RyaW5nVG9rZW4oKTtcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHg1Yykge1xuICAgICAgICBpZiAoZW9mKG5leHQoKSkpXG4gICAgICAgICAgZG9ub3RoaW5nKCk7XG4gICAgICAgIGVsc2UgaWYgKG5ld2xpbmUobmV4dCgpKSlcbiAgICAgICAgICBjb25zdW1lKCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzdHJpbmcgKz0gc3RyaW5nRnJvbUNvZGUoY29uc3VtZUVzY2FwZSgpKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyaW5nICs9IHN0cmluZ0Zyb21Db2RlKGNvZGUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludGVybmFsIGVycm9yJyk7XG4gIH07XG5cbiAgY29uc3QgY29uc3VtZUFVUkxUb2tlbiA9IGZ1bmN0aW9uKCk6IENTU1Rva2VuSW50ZXJmYWNlIHtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBVUkxUb2tlbignJyk7XG4gICAgd2hpbGUgKHdoaXRlc3BhY2UobmV4dCgpKSlcbiAgICAgIGNvbnN1bWUoKTtcbiAgICBpZiAoZW9mKG5leHQoKSkpXG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgd2hpbGUgKGNvbnN1bWUoKSkge1xuICAgICAgaWYgKGNvZGUgPT09IDB4MjkgfHwgZW9mKCkpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfSBlbHNlIGlmICh3aGl0ZXNwYWNlKGNvZGUpKSB7XG4gICAgICAgIHdoaWxlICh3aGl0ZXNwYWNlKG5leHQoKSkpXG4gICAgICAgICAgY29uc3VtZSgpO1xuICAgICAgICBpZiAobmV4dCgpID09PSAweDI5IHx8IGVvZihuZXh0KCkpKSB7XG4gICAgICAgICAgY29uc3VtZSgpO1xuICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdW1lVGhlUmVtbmFudHNPZkFCYWRVUkwoKTtcbiAgICAgICAgICByZXR1cm4gbmV3IEJhZFVSTFRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyMiB8fCBjb2RlID09PSAweDI3IHx8IGNvZGUgPT09IDB4MjggfHwgbm9ucHJpbnRhYmxlKGNvZGUpKSB7XG4gICAgICAgIHBhcnNlZXJyb3IoKTtcbiAgICAgICAgY29uc3VtZVRoZVJlbW5hbnRzT2ZBQmFkVVJMKCk7XG4gICAgICAgIHJldHVybiBuZXcgQmFkVVJMVG9rZW4oKTtcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHg1Yykge1xuICAgICAgICBpZiAoc3RhcnRzV2l0aEFWYWxpZEVzY2FwZSgpKSB7XG4gICAgICAgICAgdG9rZW4udmFsdWUgKz0gc3RyaW5nRnJvbUNvZGUoY29uc3VtZUVzY2FwZSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJzZWVycm9yKCk7XG4gICAgICAgICAgY29uc3VtZVRoZVJlbW5hbnRzT2ZBQmFkVVJMKCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBCYWRVUkxUb2tlbigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b2tlbi52YWx1ZSArPSBzdHJpbmdGcm9tQ29kZShjb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnRlcm5hbCBlcnJvcicpO1xuICB9O1xuXG4gIGNvbnN0IGNvbnN1bWVFc2NhcGUgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBBc3N1bWUgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIGlzIHRoZSBcXFxuICAgIC8vIGFuZCB0aGUgbmV4dCBjb2RlIHBvaW50IGlzIG5vdCBhIG5ld2xpbmUuXG4gICAgY29uc3VtZSgpO1xuICAgIGlmIChoZXhkaWdpdChjb2RlKSkge1xuICAgICAgLy8gQ29uc3VtZSAxLTYgaGV4IGRpZ2l0c1xuICAgICAgY29uc3QgZGlnaXRzID0gW2NvZGVdO1xuICAgICAgZm9yIChsZXQgdG90YWwgPSAwOyB0b3RhbCA8IDU7IHRvdGFsKyspIHtcbiAgICAgICAgaWYgKGhleGRpZ2l0KG5leHQoKSkpIHtcbiAgICAgICAgICBjb25zdW1lKCk7XG4gICAgICAgICAgZGlnaXRzLnB1c2goY29kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh3aGl0ZXNwYWNlKG5leHQoKSkpXG4gICAgICAgIGNvbnN1bWUoKTtcbiAgICAgIGxldCB2YWx1ZSA9IHBhcnNlSW50KGRpZ2l0cy5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTsgfSkuam9pbignJyksIDE2KTtcbiAgICAgIGlmICh2YWx1ZSA+IG1heGltdW1hbGxvd2VkY29kZXBvaW50KVxuICAgICAgICB2YWx1ZSA9IDB4ZmZmZDtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKGVvZigpKSB7XG4gICAgICByZXR1cm4gMHhmZmZkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY29kZTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYXJlQVZhbGlkRXNjYXBlID0gZnVuY3Rpb24oYzE6IG51bWJlciwgYzI6IG51bWJlcikge1xuICAgIGlmIChjMSAhPT0gMHg1YylcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAobmV3bGluZShjMikpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIGNvbnN0IHN0YXJ0c1dpdGhBVmFsaWRFc2NhcGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlQVZhbGlkRXNjYXBlKGNvZGUsIG5leHQoKSk7XG4gIH07XG5cbiAgY29uc3Qgd291bGRTdGFydEFuSWRlbnRpZmllciA9IGZ1bmN0aW9uKGMxOiBudW1iZXIsIGMyOiBudW1iZXIsIGMzOiBudW1iZXIpIHtcbiAgICBpZiAoYzEgPT09IDB4MmQpXG4gICAgICByZXR1cm4gbmFtZXN0YXJ0Y2hhcihjMikgfHwgYzIgPT09IDB4MmQgfHwgYXJlQVZhbGlkRXNjYXBlKGMyLCBjMyk7XG4gICAgZWxzZSBpZiAobmFtZXN0YXJ0Y2hhcihjMSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBlbHNlIGlmIChjMSA9PT0gMHg1YylcbiAgICAgIHJldHVybiBhcmVBVmFsaWRFc2NhcGUoYzEsIGMyKTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgfTtcbiAgY29uc3Qgc3RhcnRzV2l0aEFuSWRlbnRpZmllciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB3b3VsZFN0YXJ0QW5JZGVudGlmaWVyKGNvZGUsIG5leHQoMSksIG5leHQoMikpO1xuICB9O1xuXG4gIGNvbnN0IHdvdWxkU3RhcnRBTnVtYmVyID0gZnVuY3Rpb24oYzE6IG51bWJlciwgYzI6IG51bWJlciwgYzM6IG51bWJlcikge1xuICAgIGlmIChjMSA9PT0gMHgyYiB8fCBjMSA9PT0gMHgyZCkge1xuICAgICAgaWYgKGRpZ2l0KGMyKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoYzIgPT09IDB4MmUgJiYgZGlnaXQoYzMpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGMxID09PSAweDJlKSB7XG4gICAgICBpZiAoZGlnaXQoYzIpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGRpZ2l0KGMxKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN0YXJ0c1dpdGhBTnVtYmVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdvdWxkU3RhcnRBTnVtYmVyKGNvZGUsIG5leHQoMSksIG5leHQoMikpO1xuICB9O1xuXG4gIGNvbnN0IGNvbnN1bWVBTmFtZSA9IGZ1bmN0aW9uKCk6IHN0cmluZyB7XG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIHdoaWxlIChjb25zdW1lKCkpIHtcbiAgICAgIGlmIChuYW1lY2hhcihjb2RlKSkge1xuICAgICAgICByZXN1bHQgKz0gc3RyaW5nRnJvbUNvZGUoY29kZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0c1dpdGhBVmFsaWRFc2NhcGUoKSkge1xuICAgICAgICByZXN1bHQgKz0gc3RyaW5nRnJvbUNvZGUoY29uc3VtZUVzY2FwZSgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlY29uc3VtZSgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludGVybmFsIHBhcnNlIGVycm9yJyk7XG4gIH07XG5cbiAgY29uc3QgY29uc3VtZUFOdW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgcmVwciA9ICcnO1xuICAgIGxldCB0eXBlID0gJ2ludGVnZXInO1xuICAgIGlmIChuZXh0KCkgPT09IDB4MmIgfHwgbmV4dCgpID09PSAweDJkKSB7XG4gICAgICBjb25zdW1lKCk7XG4gICAgICByZXByICs9IHN0cmluZ0Zyb21Db2RlKGNvZGUpO1xuICAgIH1cbiAgICB3aGlsZSAoZGlnaXQobmV4dCgpKSkge1xuICAgICAgY29uc3VtZSgpO1xuICAgICAgcmVwciArPSBzdHJpbmdGcm9tQ29kZShjb2RlKTtcbiAgICB9XG4gICAgaWYgKG5leHQoMSkgPT09IDB4MmUgJiYgZGlnaXQobmV4dCgyKSkpIHtcbiAgICAgIGNvbnN1bWUoKTtcbiAgICAgIHJlcHIgKz0gc3RyaW5nRnJvbUNvZGUoY29kZSk7XG4gICAgICBjb25zdW1lKCk7XG4gICAgICByZXByICs9IHN0cmluZ0Zyb21Db2RlKGNvZGUpO1xuICAgICAgdHlwZSA9ICdudW1iZXInO1xuICAgICAgd2hpbGUgKGRpZ2l0KG5leHQoKSkpIHtcbiAgICAgICAgY29uc3VtZSgpO1xuICAgICAgICByZXByICs9IHN0cmluZ0Zyb21Db2RlKGNvZGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjMSA9IG5leHQoMSksIGMyID0gbmV4dCgyKSwgYzMgPSBuZXh0KDMpO1xuICAgIGlmICgoYzEgPT09IDB4NDUgfHwgYzEgPT09IDB4NjUpICYmIGRpZ2l0KGMyKSkge1xuICAgICAgY29uc3VtZSgpO1xuICAgICAgcmVwciArPSBzdHJpbmdGcm9tQ29kZShjb2RlKTtcbiAgICAgIGNvbnN1bWUoKTtcbiAgICAgIHJlcHIgKz0gc3RyaW5nRnJvbUNvZGUoY29kZSk7XG4gICAgICB0eXBlID0gJ251bWJlcic7XG4gICAgICB3aGlsZSAoZGlnaXQobmV4dCgpKSkge1xuICAgICAgICBjb25zdW1lKCk7XG4gICAgICAgIHJlcHIgKz0gc3RyaW5nRnJvbUNvZGUoY29kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgoYzEgPT09IDB4NDUgfHwgYzEgPT09IDB4NjUpICYmIChjMiA9PT0gMHgyYiB8fCBjMiA9PT0gMHgyZCkgJiYgZGlnaXQoYzMpKSB7XG4gICAgICBjb25zdW1lKCk7XG4gICAgICByZXByICs9IHN0cmluZ0Zyb21Db2RlKGNvZGUpO1xuICAgICAgY29uc3VtZSgpO1xuICAgICAgcmVwciArPSBzdHJpbmdGcm9tQ29kZShjb2RlKTtcbiAgICAgIGNvbnN1bWUoKTtcbiAgICAgIHJlcHIgKz0gc3RyaW5nRnJvbUNvZGUoY29kZSk7XG4gICAgICB0eXBlID0gJ251bWJlcic7XG4gICAgICB3aGlsZSAoZGlnaXQobmV4dCgpKSkge1xuICAgICAgICBjb25zdW1lKCk7XG4gICAgICAgIHJlcHIgKz0gc3RyaW5nRnJvbUNvZGUoY29kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gY29udmVydEFTdHJpbmdUb0FOdW1iZXIocmVwcik7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgdmFsdWU6IHZhbHVlLCByZXByOiByZXByIH07XG4gIH07XG5cbiAgY29uc3QgY29udmVydEFTdHJpbmdUb0FOdW1iZXIgPSBmdW5jdGlvbihzdHJpbmc6IHN0cmluZyk6IG51bWJlciB7XG4gICAgLy8gQ1NTJ3MgbnVtYmVyIHJ1bGVzIGFyZSBpZGVudGljYWwgdG8gSlMsIGFmYWlrLlxuICAgIHJldHVybiArc3RyaW5nO1xuICB9O1xuXG4gIGNvbnN0IGNvbnN1bWVUaGVSZW1uYW50c09mQUJhZFVSTCA9IGZ1bmN0aW9uKCkge1xuICAgIHdoaWxlIChjb25zdW1lKCkpIHtcbiAgICAgIGlmIChjb2RlID09PSAweDI5IHx8IGVvZigpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnRzV2l0aEFWYWxpZEVzY2FwZSgpKSB7XG4gICAgICAgIGNvbnN1bWVFc2NhcGUoKTtcbiAgICAgICAgZG9ub3RoaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25vdGhpbmcoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgbGV0IGl0ZXJhdGlvbkNvdW50ID0gMDtcbiAgd2hpbGUgKCFlb2YobmV4dCgpKSkge1xuICAgIHRva2Vucy5wdXNoKGNvbnN1bWVBVG9rZW4oKSk7XG4gICAgaXRlcmF0aW9uQ291bnQrKztcbiAgICBpZiAoaXRlcmF0aW9uQ291bnQgPiBzdHIubGVuZ3RoICogMilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkknbSBpbmZpbml0ZS1sb29waW5nIVwiKTtcbiAgfVxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5leHBvcnQgY2xhc3MgQ1NTUGFyc2VyVG9rZW4gaW1wbGVtZW50cyBDU1NUb2tlbkludGVyZmFjZSB7XG4gIHRva2VuVHlwZSA9ICcnO1xuICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgdW5kZWZpbmVkO1xuICB0b0pTT04oKTogYW55IHtcbiAgICByZXR1cm4geyB0b2tlbjogdGhpcy50b2tlblR5cGUgfTtcbiAgfVxuICB0b1N0cmluZygpIHsgcmV0dXJuIHRoaXMudG9rZW5UeXBlOyB9XG4gIHRvU291cmNlKCkgeyByZXR1cm4gJycgKyB0aGlzOyB9XG59XG5cbmV4cG9ydCBjbGFzcyBCYWRTdHJpbmdUb2tlbiBleHRlbmRzIENTU1BhcnNlclRva2VuIHtcbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJ0JBRFNUUklORyc7XG59XG5cbmV4cG9ydCBjbGFzcyBCYWRVUkxUb2tlbiBleHRlbmRzIENTU1BhcnNlclRva2VuIHtcbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJ0JBRFVSTCc7XG59XG5cbmV4cG9ydCBjbGFzcyBXaGl0ZXNwYWNlVG9rZW4gZXh0ZW5kcyBDU1NQYXJzZXJUb2tlbiB7XG4gIG92ZXJyaWRlIHRva2VuVHlwZSA9ICdXSElURVNQQUNFJztcbiAgb3ZlcnJpZGUgdG9TdHJpbmcoKSB7IHJldHVybiAnV1MnOyB9XG4gIG92ZXJyaWRlIHRvU291cmNlKCkgeyByZXR1cm4gJyAnOyB9XG59XG5cbmV4cG9ydCBjbGFzcyBDRE9Ub2tlbiBleHRlbmRzIENTU1BhcnNlclRva2VuIHtcbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJ0NETyc7XG4gIG92ZXJyaWRlIHRvU291cmNlKCkgeyByZXR1cm4gJzwhLS0nOyB9XG59XG5cbmV4cG9ydCBjbGFzcyBDRENUb2tlbiBleHRlbmRzIENTU1BhcnNlclRva2VuIHtcbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJ0NEQyc7XG4gIG92ZXJyaWRlIHRvU291cmNlKCkgeyByZXR1cm4gJy0tPic7IH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbG9uVG9rZW4gZXh0ZW5kcyBDU1NQYXJzZXJUb2tlbiB7XG4gIG92ZXJyaWRlIHRva2VuVHlwZSA9ICc6Jztcbn1cblxuZXhwb3J0IGNsYXNzIFNlbWljb2xvblRva2VuIGV4dGVuZHMgQ1NTUGFyc2VyVG9rZW4ge1xuICBvdmVycmlkZSB0b2tlblR5cGUgPSAnOyc7XG59XG5cbmV4cG9ydCBjbGFzcyBDb21tYVRva2VuIGV4dGVuZHMgQ1NTUGFyc2VyVG9rZW4ge1xuICBvdmVycmlkZSB0b2tlblR5cGUgPSAnLCc7XG59XG5cbmV4cG9ydCBjbGFzcyBHcm91cGluZ1Rva2VuIGV4dGVuZHMgQ1NTUGFyc2VyVG9rZW4ge1xuICBvdmVycmlkZSB2YWx1ZSA9ICcnO1xuICBtaXJyb3IgPSAnJztcbn1cblxuZXhwb3J0IGNsYXNzIE9wZW5DdXJseVRva2VuIGV4dGVuZHMgR3JvdXBpbmdUb2tlbiB7XG4gIG92ZXJyaWRlIHRva2VuVHlwZSA9ICd7JztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnZhbHVlID0gJ3snO1xuICAgIHRoaXMubWlycm9yID0gJ30nO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDbG9zZUN1cmx5VG9rZW4gZXh0ZW5kcyBHcm91cGluZ1Rva2VuIHtcbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJ30nO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudmFsdWUgPSAnfSc7XG4gICAgdGhpcy5taXJyb3IgPSAneyc7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE9wZW5TcXVhcmVUb2tlbiBleHRlbmRzIEdyb3VwaW5nVG9rZW4ge1xuICBvdmVycmlkZSB0b2tlblR5cGUgPSAnWyc7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy52YWx1ZSA9ICdbJztcbiAgICB0aGlzLm1pcnJvciA9ICddJztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2xvc2VTcXVhcmVUb2tlbiBleHRlbmRzIEdyb3VwaW5nVG9rZW4ge1xuICBvdmVycmlkZSB0b2tlblR5cGUgPSAnXSc7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy52YWx1ZSA9ICddJztcbiAgICB0aGlzLm1pcnJvciA9ICdbJztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgT3BlblBhcmVuVG9rZW4gZXh0ZW5kcyBHcm91cGluZ1Rva2VuIHtcbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJygnO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudmFsdWUgPSAnKCc7XG4gICAgdGhpcy5taXJyb3IgPSAnKSc7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENsb3NlUGFyZW5Ub2tlbiBleHRlbmRzIEdyb3VwaW5nVG9rZW4ge1xuICBvdmVycmlkZSAgIHRva2VuVHlwZSA9ICcpJztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnZhbHVlID0gJyknO1xuICAgIHRoaXMubWlycm9yID0gJygnO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbmNsdWRlTWF0Y2hUb2tlbiBleHRlbmRzIENTU1BhcnNlclRva2VuIHtcbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJ349Jztcbn1cblxuZXhwb3J0IGNsYXNzIERhc2hNYXRjaFRva2VuIGV4dGVuZHMgQ1NTUGFyc2VyVG9rZW4ge1xuICBvdmVycmlkZSB0b2tlblR5cGUgPSAnfD0nO1xufVxuXG5leHBvcnQgY2xhc3MgUHJlZml4TWF0Y2hUb2tlbiBleHRlbmRzIENTU1BhcnNlclRva2VuIHtcbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJ149Jztcbn1cblxuZXhwb3J0IGNsYXNzIFN1ZmZpeE1hdGNoVG9rZW4gZXh0ZW5kcyBDU1NQYXJzZXJUb2tlbiB7XG4gIG92ZXJyaWRlIHRva2VuVHlwZSA9ICckPSc7XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJzdHJpbmdNYXRjaFRva2VuIGV4dGVuZHMgQ1NTUGFyc2VyVG9rZW4ge1xuICBvdmVycmlkZSB0b2tlblR5cGUgPSAnKj0nO1xufVxuXG5leHBvcnQgY2xhc3MgQ29sdW1uVG9rZW4gZXh0ZW5kcyBDU1NQYXJzZXJUb2tlbiB7XG4gIG92ZXJyaWRlIHRva2VuVHlwZSA9ICd8fCc7XG59XG5cbmV4cG9ydCBjbGFzcyBFT0ZUb2tlbiBleHRlbmRzIENTU1BhcnNlclRva2VuIHtcbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJ0VPRic7XG4gIG92ZXJyaWRlIHRvU291cmNlKCkgeyByZXR1cm4gJyc7IH1cbn1cblxuZXhwb3J0IGNsYXNzIERlbGltVG9rZW4gZXh0ZW5kcyBDU1NQYXJzZXJUb2tlbiB7XG4gIG92ZXJyaWRlIHRva2VuVHlwZSA9ICdERUxJTSc7XG4gIG92ZXJyaWRlIHZhbHVlOiBzdHJpbmcgPSAnJztcblxuICBjb25zdHJ1Y3Rvcihjb2RlOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudmFsdWUgPSBzdHJpbmdGcm9tQ29kZShjb2RlKTtcbiAgfVxuXG4gIG92ZXJyaWRlIHRvU3RyaW5nKCkgeyByZXR1cm4gJ0RFTElNKCcgKyB0aGlzLnZhbHVlICsgJyknOyB9XG5cbiAgb3ZlcnJpZGUgdG9KU09OKCkge1xuICAgIGNvbnN0IGpzb24gPSB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7XG4gICAganNvbi52YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICBvdmVycmlkZSB0b1NvdXJjZSgpIHtcbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gJ1xcXFwnKVxuICAgICAgcmV0dXJuICdcXFxcXFxuJztcbiAgICBlbHNlXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RyaW5nVmFsdWVkVG9rZW4gZXh0ZW5kcyBDU1NQYXJzZXJUb2tlbiB7XG4gIG92ZXJyaWRlIHZhbHVlOiBzdHJpbmcgPSAnJztcbiAgQVNDSUlNYXRjaChzdHI6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IHN0ci50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgb3ZlcnJpZGUgdG9KU09OKCkge1xuICAgIGNvbnN0IGpzb24gPSB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7XG4gICAganNvbi52YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgcmV0dXJuIGpzb247XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIElkZW50VG9rZW4gZXh0ZW5kcyBTdHJpbmdWYWx1ZWRUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKHZhbDogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnZhbHVlID0gdmFsO1xuICB9XG5cbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJ0lERU5UJztcbiAgb3ZlcnJpZGUgdG9TdHJpbmcoKSB7IHJldHVybiAnSURFTlQoJyArIHRoaXMudmFsdWUgKyAnKSc7IH1cbiAgb3ZlcnJpZGUgdG9Tb3VyY2UoKSB7XG4gICAgcmV0dXJuIGVzY2FwZUlkZW50KHRoaXMudmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGdW5jdGlvblRva2VuIGV4dGVuZHMgU3RyaW5nVmFsdWVkVG9rZW4ge1xuICBvdmVycmlkZSB0b2tlblR5cGUgPSAnRlVOQ1RJT04nO1xuICBtaXJyb3I6IHN0cmluZztcbiAgY29uc3RydWN0b3IodmFsOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudmFsdWUgPSB2YWw7XG4gICAgdGhpcy5taXJyb3IgPSAnKSc7XG4gIH1cblxuICBvdmVycmlkZSB0b1N0cmluZygpIHsgcmV0dXJuICdGVU5DVElPTignICsgdGhpcy52YWx1ZSArICcpJzsgfVxuXG4gIG92ZXJyaWRlIHRvU291cmNlKCkge1xuICAgIHJldHVybiBlc2NhcGVJZGVudCh0aGlzLnZhbHVlKSArICcoJztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXRLZXl3b3JkVG9rZW4gZXh0ZW5kcyBTdHJpbmdWYWx1ZWRUb2tlbiB7XG4gIG92ZXJyaWRlIHRva2VuVHlwZSA9ICdBVC1LRVlXT1JEJztcbiAgY29uc3RydWN0b3IodmFsOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudmFsdWUgPSB2YWw7XG4gIH1cbiAgb3ZlcnJpZGUgdG9TdHJpbmcoKSB7IHJldHVybiAnQVQoJyArIHRoaXMudmFsdWUgKyAnKSc7IH1cbiAgb3ZlcnJpZGUgdG9Tb3VyY2UoKSB7XG4gICAgcmV0dXJuICdAJyArIGVzY2FwZUlkZW50KHRoaXMudmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBIYXNoVG9rZW4gZXh0ZW5kcyBTdHJpbmdWYWx1ZWRUb2tlbiB7XG4gIG92ZXJyaWRlIHRva2VuVHlwZSA9ICdIQVNIJztcbiAgdHlwZTogc3RyaW5nO1xuICBjb25zdHJ1Y3Rvcih2YWw6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbDtcbiAgICB0aGlzLnR5cGUgPSAndW5yZXN0cmljdGVkJztcbiAgfVxuXG4gIG92ZXJyaWRlIHRvU3RyaW5nKCkgeyByZXR1cm4gJ0hBU0goJyArIHRoaXMudmFsdWUgKyAnKSc7IH1cblxuICBvdmVycmlkZSB0b0pTT04oKSB7XG4gICAgY29uc3QganNvbiA9IHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcbiAgICBqc29uLnZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBqc29uLnR5cGUgPSB0aGlzLnR5cGU7XG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICBvdmVycmlkZSB0b1NvdXJjZSgpIHtcbiAgICBpZiAodGhpcy50eXBlID09PSAnaWQnKVxuICAgICAgcmV0dXJuICcjJyArIGVzY2FwZUlkZW50KHRoaXMudmFsdWUpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiAnIycgKyBlc2NhcGVIYXNoKHRoaXMudmFsdWUpO1xuXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0cmluZ1Rva2VuIGV4dGVuZHMgU3RyaW5nVmFsdWVkVG9rZW4ge1xuICBvdmVycmlkZSB0b2tlblR5cGUgPSAnU1RSSU5HJztcbiAgY29uc3RydWN0b3IodmFsOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudmFsdWUgPSB2YWw7XG4gIH1cblxuICBvdmVycmlkZSB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1wiJyArIGVzY2FwZVN0cmluZyh0aGlzLnZhbHVlKSArICdcIic7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVSTFRva2VuIGV4dGVuZHMgU3RyaW5nVmFsdWVkVG9rZW4ge1xuICBvdmVycmlkZSB0b2tlblR5cGUgPSAnVVJMJztcbiAgY29uc3RydWN0b3IodmFsOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudmFsdWUgPSB2YWw7XG4gIH1cbiAgb3ZlcnJpZGUgdG9TdHJpbmcoKSB7IHJldHVybiAnVVJMKCcgKyB0aGlzLnZhbHVlICsgJyknOyB9XG4gIG92ZXJyaWRlIHRvU291cmNlKCkge1xuICAgIHJldHVybiAndXJsKFwiJyArIGVzY2FwZVN0cmluZyh0aGlzLnZhbHVlKSArICdcIiknO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOdW1iZXJUb2tlbiBleHRlbmRzIENTU1BhcnNlclRva2VuIHtcbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJ05VTUJFUic7XG4gIHR5cGU6IHN0cmluZztcbiAgcmVwcjogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50eXBlID0gJ2ludGVnZXInO1xuICAgIHRoaXMucmVwciA9ICcnO1xuICB9XG5cbiAgb3ZlcnJpZGUgdG9TdHJpbmcoKSB7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gJ2ludGVnZXInKVxuICAgICAgcmV0dXJuICdJTlQoJyArIHRoaXMudmFsdWUgKyAnKSc7XG4gICAgcmV0dXJuICdOVU1CRVIoJyArIHRoaXMudmFsdWUgKyAnKSc7XG4gIH1cbiAgb3ZlcnJpZGUgdG9KU09OKCkge1xuICAgIGNvbnN0IGpzb24gPSBzdXBlci50b0pTT04oKTtcbiAgICBqc29uLnZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBqc29uLnR5cGUgPSB0aGlzLnR5cGU7XG4gICAganNvbi5yZXByID0gdGhpcy5yZXByO1xuICAgIHJldHVybiBqc29uO1xuICB9XG4gIG92ZXJyaWRlIHRvU291cmNlKCkgeyByZXR1cm4gdGhpcy5yZXByOyB9XG59XG5cblxuZXhwb3J0IGNsYXNzIFBlcmNlbnRhZ2VUb2tlbiBleHRlbmRzIENTU1BhcnNlclRva2VuIHtcbiAgb3ZlcnJpZGUgdG9rZW5UeXBlID0gJ1BFUkNFTlRBR0UnO1xuICByZXByOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5yZXByID0gJyc7XG4gIH1cbiAgb3ZlcnJpZGUgdG9TdHJpbmcoKSB7IHJldHVybiAnUEVSQ0VOVEFHRSgnICsgdGhpcy52YWx1ZSArICcpJzsgfVxuICBvdmVycmlkZSB0b0pTT04oKSB7XG4gICAgY29uc3QganNvbiA9IHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcbiAgICBqc29uLnZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBqc29uLnJlcHIgPSB0aGlzLnJlcHI7XG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgb3ZlcnJpZGUgdG9Tb3VyY2UoKSB7IHJldHVybiB0aGlzLnJlcHIgKyAnJSc7IH1cbn1cblxuZXhwb3J0IGNsYXNzIERpbWVuc2lvblRva2VuIGV4dGVuZHMgQ1NTUGFyc2VyVG9rZW4ge1xuICBvdmVycmlkZSB0b2tlblR5cGUgPSAnRElNRU5TSU9OJztcbiAgdHlwZTogc3RyaW5nO1xuICByZXByOiBzdHJpbmc7XG4gIHVuaXQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudHlwZSA9ICdpbnRlZ2VyJztcbiAgICB0aGlzLnJlcHIgPSAnJztcbiAgICB0aGlzLnVuaXQgPSAnJztcbiAgfVxuXG4gIG92ZXJyaWRlIHRvU3RyaW5nKCkgeyByZXR1cm4gJ0RJTSgnICsgdGhpcy52YWx1ZSArICcsJyArIHRoaXMudW5pdCArICcpJzsgfVxuICBvdmVycmlkZSB0b0pTT04oKSB7XG4gICAgY29uc3QganNvbiA9IHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcbiAgICBqc29uLnZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBqc29uLnR5cGUgPSB0aGlzLnR5cGU7XG4gICAganNvbi5yZXByID0gdGhpcy5yZXByO1xuICAgIGpzb24udW5pdCA9IHRoaXMudW5pdDtcbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICBvdmVycmlkZSB0b1NvdXJjZSgpIHtcbiAgICBjb25zdCBzb3VyY2UgPSB0aGlzLnJlcHI7XG4gICAgbGV0IHVuaXQgPSBlc2NhcGVJZGVudCh0aGlzLnVuaXQpO1xuICAgIGlmICh1bml0WzBdLnRvTG93ZXJDYXNlKCkgPT09ICdlJyAmJiAodW5pdFsxXSA9PT0gJy0nIHx8IGJldHdlZW4odW5pdC5jaGFyQ29kZUF0KDEpLCAweDMwLCAweDM5KSkpIHtcbiAgICAgIC8vIFVuaXQgaXMgYW1iaWd1b3VzIHdpdGggc2Npbm90XG4gICAgICAvLyBSZW1vdmUgdGhlIGxlYWRpbmcgXCJlXCIsIHJlcGxhY2Ugd2l0aCBlc2NhcGUuXG4gICAgICB1bml0ID0gJ1xcXFw2NSAnICsgdW5pdC5zbGljZSgxLCB1bml0Lmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2UgKyB1bml0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUlkZW50KHN0cmluZzogc3RyaW5nKSB7XG4gIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuICBsZXQgcmVzdWx0ID0gJyc7XG4gIGNvbnN0IGZpcnN0Y29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KDApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNvZGUgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoY29kZSA9PT0gMHgwKVxuICAgICAgdGhyb3cgbmV3IEludmFsaWRDaGFyYWN0ZXJFcnJvcignSW52YWxpZCBjaGFyYWN0ZXI6IHRoZSBpbnB1dCBjb250YWlucyBVKzAwMDAuJyk7XG5cbiAgICBpZiAoXG4gICAgICBiZXR3ZWVuKGNvZGUsIDB4MSwgMHgxZikgfHwgY29kZSA9PT0gMHg3ZiB8fFxuICAgICAgKGkgPT09IDAgJiYgYmV0d2Vlbihjb2RlLCAweDMwLCAweDM5KSkgfHxcbiAgICAgIChpID09PSAxICYmIGJldHdlZW4oY29kZSwgMHgzMCwgMHgzOSkgJiYgZmlyc3Rjb2RlID09PSAweDJkKVxuICAgIClcbiAgICAgIHJlc3VsdCArPSAnXFxcXCcgKyBjb2RlLnRvU3RyaW5nKDE2KSArICcgJztcbiAgICBlbHNlIGlmIChcbiAgICAgIGNvZGUgPj0gMHg4MCB8fFxuICAgICAgY29kZSA9PT0gMHgyZCB8fFxuICAgICAgY29kZSA9PT0gMHg1ZiB8fFxuICAgICAgYmV0d2Vlbihjb2RlLCAweDMwLCAweDM5KSB8fFxuICAgICAgYmV0d2Vlbihjb2RlLCAweDQxLCAweDVhKSB8fFxuICAgICAgYmV0d2Vlbihjb2RlLCAweDYxLCAweDdhKVxuICAgIClcbiAgICAgIHJlc3VsdCArPSBzdHJpbmdbaV07XG4gICAgZWxzZVxuICAgICAgcmVzdWx0ICs9ICdcXFxcJyArIHN0cmluZ1tpXTtcblxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUhhc2goc3RyaW5nOiBzdHJpbmcpIHtcbiAgLy8gRXNjYXBlcyB0aGUgY29udGVudHMgb2YgXCJ1bnJlc3RyaWN0ZWRcIi10eXBlIGhhc2ggdG9rZW5zLlxuICAvLyBXb24ndCBwcmVzZXJ2ZSB0aGUgSUQtbmVzcyBvZiBcImlkXCItdHlwZSBoYXNoIHRva2VucztcbiAgLy8gdXNlIGVzY2FwZUlkZW50KCkgZm9yIHRoYXQuXG4gIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuICBsZXQgcmVzdWx0ID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChjb2RlID09PSAweDApXG4gICAgICB0aHJvdyBuZXcgSW52YWxpZENoYXJhY3RlckVycm9yKCdJbnZhbGlkIGNoYXJhY3RlcjogdGhlIGlucHV0IGNvbnRhaW5zIFUrMDAwMC4nKTtcblxuICAgIGlmIChcbiAgICAgIGNvZGUgPj0gMHg4MCB8fFxuICAgICAgY29kZSA9PT0gMHgyZCB8fFxuICAgICAgY29kZSA9PT0gMHg1ZiB8fFxuICAgICAgYmV0d2Vlbihjb2RlLCAweDMwLCAweDM5KSB8fFxuICAgICAgYmV0d2Vlbihjb2RlLCAweDQxLCAweDVhKSB8fFxuICAgICAgYmV0d2Vlbihjb2RlLCAweDYxLCAweDdhKVxuICAgIClcbiAgICAgIHJlc3VsdCArPSBzdHJpbmdbaV07XG4gICAgZWxzZVxuICAgICAgcmVzdWx0ICs9ICdcXFxcJyArIGNvZGUudG9TdHJpbmcoMTYpICsgJyAnO1xuXG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZXNjYXBlU3RyaW5nKHN0cmluZzogc3RyaW5nKSB7XG4gIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuICBsZXQgcmVzdWx0ID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuXG4gICAgaWYgKGNvZGUgPT09IDB4MClcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQ2hhcmFjdGVyRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyOiB0aGUgaW5wdXQgY29udGFpbnMgVSswMDAwLicpO1xuXG4gICAgaWYgKGJldHdlZW4oY29kZSwgMHgxLCAweDFmKSB8fCBjb2RlID09PSAweDdmKVxuICAgICAgcmVzdWx0ICs9ICdcXFxcJyArIGNvZGUudG9TdHJpbmcoMTYpICsgJyAnO1xuICAgIGVsc2UgaWYgKGNvZGUgPT09IDB4MjIgfHwgY29kZSA9PT0gMHg1YylcbiAgICAgIHJlc3VsdCArPSAnXFxcXCcgKyBzdHJpbmdbaV07XG4gICAgZWxzZVxuICAgICAgcmVzdWx0ICs9IHN0cmluZ1tpXTtcblxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIGNzcyBmcm9tICcuL2Nzc1Rva2VuaXplcic7XG5cbmV4cG9ydCBjbGFzcyBJbnZhbGlkU2VsZWN0b3JFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSW52YWxpZFNlbGVjdG9yRXJyb3IoZXJyb3I6IEVycm9yKSB7XG4gIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIEludmFsaWRTZWxlY3RvckVycm9yO1xufVxuXG4vLyBOb3RlOiAnPj0nIGlzIHVzZWQgaW50ZXJuYWxseSBmb3IgdGV4dCBlbmdpbmUgdG8gcHJlc2VydmUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG50eXBlIENsYXVzZUNvbWJpbmF0b3IgPSAnJyB8ICc+JyB8ICcrJyB8ICd+JyB8ICc+PSc7XG4vLyBUT0RPOiBjb25zaWRlclxuLy8gICAtIGtleT12YWx1ZVxuLy8gICAtIG9wZXJhdG9ycyBsaWtlIGA9YCwgYHw9YCwgYH49YCwgYCo9YCwgYC9gXG4vLyAgIC0gPGVtcHR5Pn49dmFsdWVcbi8vICAgLSBhcmd1bWVudCBtb2RlczogXCJwYXJzZSBhbGxcIiwgXCJwYXJzZSBjb21tYXNcIiwgXCJqdXN0IGEgc3RyaW5nXCJcbmV4cG9ydCB0eXBlIENTU0Z1bmN0aW9uQXJndW1lbnQgPSBDU1NDb21wbGV4U2VsZWN0b3IgfCBudW1iZXIgfCBzdHJpbmc7XG5leHBvcnQgdHlwZSBDU1NGdW5jdGlvbiA9IHsgbmFtZTogc3RyaW5nLCBhcmdzOiBDU1NGdW5jdGlvbkFyZ3VtZW50W10gfTtcbmV4cG9ydCB0eXBlIENTU1NpbXBsZVNlbGVjdG9yID0geyBjc3M/OiBzdHJpbmcsIGZ1bmN0aW9uczogQ1NTRnVuY3Rpb25bXSB9O1xuZXhwb3J0IHR5cGUgQ1NTQ29tcGxleFNlbGVjdG9yID0geyBzaW1wbGVzOiB7IHNlbGVjdG9yOiBDU1NTaW1wbGVTZWxlY3RvciwgY29tYmluYXRvcjogQ2xhdXNlQ29tYmluYXRvciB9W10gfTtcbmV4cG9ydCB0eXBlIENTU0NvbXBsZXhTZWxlY3Rvckxpc3QgPSBDU1NDb21wbGV4U2VsZWN0b3JbXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ1NTKHNlbGVjdG9yOiBzdHJpbmcsIGN1c3RvbU5hbWVzOiBTZXQ8c3RyaW5nPik6IHsgc2VsZWN0b3I6IENTU0NvbXBsZXhTZWxlY3Rvckxpc3QsIG5hbWVzOiBzdHJpbmdbXSB9IHtcbiAgbGV0IHRva2VuczogY3NzLkNTU1Rva2VuSW50ZXJmYWNlW107XG4gIHRyeSB7XG4gICAgdG9rZW5zID0gY3NzLnRva2VuaXplKHNlbGVjdG9yKTtcbiAgICBpZiAoISh0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdIGluc3RhbmNlb2YgY3NzLkVPRlRva2VuKSlcbiAgICAgIHRva2Vucy5wdXNoKG5ldyBjc3MuRU9GVG9rZW4oKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zdCBuZXdNZXNzYWdlID0gZS5tZXNzYWdlICsgYCB3aGlsZSBwYXJzaW5nIGNzcyBzZWxlY3RvciBcIiR7c2VsZWN0b3J9XCIuIERpZCB5b3UgbWVhbiB0byBDU1MuZXNjYXBlIGl0P2A7XG4gICAgY29uc3QgaW5kZXggPSAoZS5zdGFjayB8fCAnJykuaW5kZXhPZihlLm1lc3NhZ2UpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICBlLnN0YWNrID0gZS5zdGFjay5zdWJzdHJpbmcoMCwgaW5kZXgpICsgbmV3TWVzc2FnZSArIGUuc3RhY2suc3Vic3RyaW5nKGluZGV4ICsgZS5tZXNzYWdlLmxlbmd0aCk7XG4gICAgZS5tZXNzYWdlID0gbmV3TWVzc2FnZTtcbiAgICB0aHJvdyBlO1xuICB9XG4gIGNvbnN0IHVuc3VwcG9ydGVkVG9rZW4gPSB0b2tlbnMuZmluZCh0b2tlbiA9PiB7XG4gICAgcmV0dXJuICh0b2tlbiBpbnN0YW5jZW9mIGNzcy5BdEtleXdvcmRUb2tlbikgfHxcbiAgICAgICh0b2tlbiBpbnN0YW5jZW9mIGNzcy5CYWRTdHJpbmdUb2tlbikgfHxcbiAgICAgICh0b2tlbiBpbnN0YW5jZW9mIGNzcy5CYWRVUkxUb2tlbikgfHxcbiAgICAgICh0b2tlbiBpbnN0YW5jZW9mIGNzcy5Db2x1bW5Ub2tlbikgfHxcbiAgICAgICh0b2tlbiBpbnN0YW5jZW9mIGNzcy5DRE9Ub2tlbikgfHxcbiAgICAgICh0b2tlbiBpbnN0YW5jZW9mIGNzcy5DRENUb2tlbikgfHxcbiAgICAgICh0b2tlbiBpbnN0YW5jZW9mIGNzcy5TZW1pY29sb25Ub2tlbikgfHxcbiAgICAgIC8vIFRPRE86IENvbnNpZGVyIHVzaW5nIHRoZXNlIGZvciBzb21ldGhpbmcsIGUuZy4gdG8gZXNjYXBlIGNvbXBsZXggc3RyaW5ncy5cbiAgICAgIC8vIEZvciBleGFtcGxlIDp4cGF0aHsgKC8vZGl2L2JhcltAYXR0cj1cImZvb1wiXSlbMl0vYmF6IH1cbiAgICAgIC8vIE9yIHRoaXMgd2F5IDp4cGF0aCgge2NvbXBsZXgteHBhdGgtZ29lcy1oZXJlKFwiaGVsbG9cIil9IClcbiAgICAgICh0b2tlbiBpbnN0YW5jZW9mIGNzcy5PcGVuQ3VybHlUb2tlbikgfHxcbiAgICAgICh0b2tlbiBpbnN0YW5jZW9mIGNzcy5DbG9zZUN1cmx5VG9rZW4pIHx8XG4gICAgICAvLyBUT0RPOiBDb25zaWRlciB0cmVhdGluZyB0aGVzZSBhcyBzdHJpbmdzP1xuICAgICAgKHRva2VuIGluc3RhbmNlb2YgY3NzLlVSTFRva2VuKSB8fFxuICAgICAgKHRva2VuIGluc3RhbmNlb2YgY3NzLlBlcmNlbnRhZ2VUb2tlbik7XG4gIH0pO1xuICBpZiAodW5zdXBwb3J0ZWRUb2tlbilcbiAgICB0aHJvdyBuZXcgSW52YWxpZFNlbGVjdG9yRXJyb3IoYFVuc3VwcG9ydGVkIHRva2VuIFwiJHt1bnN1cHBvcnRlZFRva2VuLnRvU291cmNlKCl9XCIgd2hpbGUgcGFyc2luZyBjc3Mgc2VsZWN0b3IgXCIke3NlbGVjdG9yfVwiLiBEaWQgeW91IG1lYW4gdG8gQ1NTLmVzY2FwZSBpdD9gKTtcblxuICBsZXQgcG9zID0gMDtcbiAgY29uc3QgbmFtZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuICBmdW5jdGlvbiB1bmV4cGVjdGVkKCkge1xuICAgIHJldHVybiBuZXcgSW52YWxpZFNlbGVjdG9yRXJyb3IoYFVuZXhwZWN0ZWQgdG9rZW4gXCIke3Rva2Vuc1twb3NdLnRvU291cmNlKCl9XCIgd2hpbGUgcGFyc2luZyBjc3Mgc2VsZWN0b3IgXCIke3NlbGVjdG9yfVwiLiBEaWQgeW91IG1lYW4gdG8gQ1NTLmVzY2FwZSBpdD9gKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNraXBXaGl0ZXNwYWNlKCkge1xuICAgIHdoaWxlICh0b2tlbnNbcG9zXSBpbnN0YW5jZW9mIGNzcy5XaGl0ZXNwYWNlVG9rZW4pXG4gICAgICBwb3MrKztcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSWRlbnQocCA9IHBvcykge1xuICAgIHJldHVybiB0b2tlbnNbcF0gaW5zdGFuY2VvZiBjc3MuSWRlbnRUb2tlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3RyaW5nKHAgPSBwb3MpIHtcbiAgICByZXR1cm4gdG9rZW5zW3BdIGluc3RhbmNlb2YgY3NzLlN0cmluZ1Rva2VuO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNOdW1iZXIocCA9IHBvcykge1xuICAgIHJldHVybiB0b2tlbnNbcF0gaW5zdGFuY2VvZiBjc3MuTnVtYmVyVG9rZW47XG4gIH1cblxuICBmdW5jdGlvbiBpc0NvbW1hKHAgPSBwb3MpIHtcbiAgICByZXR1cm4gdG9rZW5zW3BdIGluc3RhbmNlb2YgY3NzLkNvbW1hVG9rZW47XG4gIH1cblxuICBmdW5jdGlvbiBpc09wZW5QYXJlbihwID0gcG9zKSB7XG4gICAgcmV0dXJuIHRva2Vuc1twXSBpbnN0YW5jZW9mIGNzcy5PcGVuUGFyZW5Ub2tlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQ2xvc2VQYXJlbihwID0gcG9zKSB7XG4gICAgcmV0dXJuIHRva2Vuc1twXSBpbnN0YW5jZW9mIGNzcy5DbG9zZVBhcmVuVG9rZW47XG4gIH1cblxuICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHAgPSBwb3MpIHtcbiAgICByZXR1cm4gdG9rZW5zW3BdIGluc3RhbmNlb2YgY3NzLkZ1bmN0aW9uVG9rZW47XG4gIH1cblxuICBmdW5jdGlvbiBpc1N0YXIocCA9IHBvcykge1xuICAgIHJldHVybiAodG9rZW5zW3BdIGluc3RhbmNlb2YgY3NzLkRlbGltVG9rZW4pICYmIHRva2Vuc1twXS52YWx1ZSA9PT0gJyonO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNFT0YocCA9IHBvcykge1xuICAgIHJldHVybiB0b2tlbnNbcF0gaW5zdGFuY2VvZiBjc3MuRU9GVG9rZW47XG4gIH1cblxuICBmdW5jdGlvbiBpc0NsYXVzZUNvbWJpbmF0b3IocCA9IHBvcykge1xuICAgIHJldHVybiAodG9rZW5zW3BdIGluc3RhbmNlb2YgY3NzLkRlbGltVG9rZW4pICYmIChbJz4nLCAnKycsICd+J10uaW5jbHVkZXModG9rZW5zW3BdLnZhbHVlIGFzIHN0cmluZykpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNTZWxlY3RvckNsYXVzZUVuZChwID0gcG9zKSB7XG4gICAgcmV0dXJuIGlzQ29tbWEocCkgfHwgaXNDbG9zZVBhcmVuKHApIHx8IGlzRU9GKHApIHx8IGlzQ2xhdXNlQ29tYmluYXRvcihwKSB8fCAodG9rZW5zW3BdIGluc3RhbmNlb2YgY3NzLldoaXRlc3BhY2VUb2tlbik7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lRnVuY3Rpb25Bcmd1bWVudHMoKTogQ1NTRnVuY3Rpb25Bcmd1bWVudFtdIHtcbiAgICBjb25zdCByZXN1bHQgPSBbY29uc3VtZUFyZ3VtZW50KCldO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBza2lwV2hpdGVzcGFjZSgpO1xuICAgICAgaWYgKCFpc0NvbW1hKCkpXG4gICAgICAgIGJyZWFrO1xuICAgICAgcG9zKys7XG4gICAgICByZXN1bHQucHVzaChjb25zdW1lQXJndW1lbnQoKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lQXJndW1lbnQoKTogQ1NTRnVuY3Rpb25Bcmd1bWVudCB7XG4gICAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgICBpZiAoaXNOdW1iZXIoKSlcbiAgICAgIHJldHVybiB0b2tlbnNbcG9zKytdLnZhbHVlITtcbiAgICBpZiAoaXNTdHJpbmcoKSlcbiAgICAgIHJldHVybiB0b2tlbnNbcG9zKytdLnZhbHVlITtcbiAgICByZXR1cm4gY29uc3VtZUNvbXBsZXhTZWxlY3RvcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3VtZUNvbXBsZXhTZWxlY3RvcigpOiBDU1NDb21wbGV4U2VsZWN0b3Ige1xuICAgIGNvbnN0IHJlc3VsdDogQ1NTQ29tcGxleFNlbGVjdG9yID0geyBzaW1wbGVzOiBbXSB9O1xuICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgaWYgKGlzQ2xhdXNlQ29tYmluYXRvcigpKSB7XG4gICAgICAvLyBQdXQgaW1wbGljaXQgXCI6c2NvcGVcIiBhdCB0aGUgc3RhcnQuIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMtNC8jcmVsYXRpdmVcbiAgICAgIHJlc3VsdC5zaW1wbGVzLnB1c2goeyBzZWxlY3RvcjogeyBmdW5jdGlvbnM6IFt7IG5hbWU6ICdzY29wZScsIGFyZ3M6IFtdIH1dIH0sIGNvbWJpbmF0b3I6ICcnIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQuc2ltcGxlcy5wdXNoKHsgc2VsZWN0b3I6IGNvbnN1bWVTaW1wbGVTZWxlY3RvcigpLCBjb21iaW5hdG9yOiAnJyB9KTtcbiAgICB9XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgICBpZiAoaXNDbGF1c2VDb21iaW5hdG9yKCkpIHtcbiAgICAgICAgcmVzdWx0LnNpbXBsZXNbcmVzdWx0LnNpbXBsZXMubGVuZ3RoIC0gMV0uY29tYmluYXRvciA9IHRva2Vuc1twb3MrK10udmFsdWUgYXMgQ2xhdXNlQ29tYmluYXRvcjtcbiAgICAgICAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNTZWxlY3RvckNsYXVzZUVuZCgpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnNpbXBsZXMucHVzaCh7IGNvbWJpbmF0b3I6ICcnLCBzZWxlY3RvcjogY29uc3VtZVNpbXBsZVNlbGVjdG9yKCkgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lU2ltcGxlU2VsZWN0b3IoKTogQ1NTU2ltcGxlU2VsZWN0b3Ige1xuICAgIGxldCByYXdDU1NTdHJpbmcgPSAnJztcbiAgICBjb25zdCBmdW5jdGlvbnM6IENTU0Z1bmN0aW9uW10gPSBbXTtcblxuICAgIHdoaWxlICghaXNTZWxlY3RvckNsYXVzZUVuZCgpKSB7XG4gICAgICBpZiAoaXNJZGVudCgpIHx8IGlzU3RhcigpKSB7XG4gICAgICAgIHJhd0NTU1N0cmluZyArPSB0b2tlbnNbcG9zKytdLnRvU291cmNlKCk7XG4gICAgICB9IGVsc2UgaWYgKHRva2Vuc1twb3NdIGluc3RhbmNlb2YgY3NzLkhhc2hUb2tlbikge1xuICAgICAgICByYXdDU1NTdHJpbmcgKz0gdG9rZW5zW3BvcysrXS50b1NvdXJjZSgpO1xuICAgICAgfSBlbHNlIGlmICgodG9rZW5zW3Bvc10gaW5zdGFuY2VvZiBjc3MuRGVsaW1Ub2tlbikgJiYgdG9rZW5zW3Bvc10udmFsdWUgPT09ICcuJykge1xuICAgICAgICBwb3MrKztcbiAgICAgICAgaWYgKGlzSWRlbnQoKSlcbiAgICAgICAgICByYXdDU1NTdHJpbmcgKz0gJy4nICsgdG9rZW5zW3BvcysrXS50b1NvdXJjZSgpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhyb3cgdW5leHBlY3RlZCgpO1xuICAgICAgfSBlbHNlIGlmICh0b2tlbnNbcG9zXSBpbnN0YW5jZW9mIGNzcy5Db2xvblRva2VuKSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgICBpZiAoaXNJZGVudCgpKSB7XG4gICAgICAgICAgaWYgKCFjdXN0b21OYW1lcy5oYXMoKHRva2Vuc1twb3NdLnZhbHVlIGFzIHN0cmluZykudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIHJhd0NTU1N0cmluZyArPSAnOicgKyB0b2tlbnNbcG9zKytdLnRvU291cmNlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAodG9rZW5zW3BvcysrXS52YWx1ZSBhcyBzdHJpbmcpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBmdW5jdGlvbnMucHVzaCh7IG5hbWUsIGFyZ3M6IFtdIH0pO1xuICAgICAgICAgICAgbmFtZXMuYWRkKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKCkpIHtcbiAgICAgICAgICBjb25zdCBuYW1lID0gKHRva2Vuc1twb3MrK10udmFsdWUgYXMgc3RyaW5nKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIGlmICghY3VzdG9tTmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICByYXdDU1NTdHJpbmcgKz0gYDoke25hbWV9KCR7Y29uc3VtZUJ1aWx0aW5GdW5jdGlvbkFyZ3VtZW50cygpfSlgO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmdW5jdGlvbnMucHVzaCh7IG5hbWUsIGFyZ3M6IGNvbnN1bWVGdW5jdGlvbkFyZ3VtZW50cygpIH0pO1xuICAgICAgICAgICAgbmFtZXMuYWRkKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBza2lwV2hpdGVzcGFjZSgpO1xuICAgICAgICAgIGlmICghaXNDbG9zZVBhcmVuKCkpXG4gICAgICAgICAgICB0aHJvdyB1bmV4cGVjdGVkKCk7XG4gICAgICAgICAgcG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgdW5leHBlY3RlZCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRva2Vuc1twb3NdIGluc3RhbmNlb2YgY3NzLk9wZW5TcXVhcmVUb2tlbikge1xuICAgICAgICByYXdDU1NTdHJpbmcgKz0gJ1snO1xuICAgICAgICBwb3MrKztcbiAgICAgICAgd2hpbGUgKCEodG9rZW5zW3Bvc10gaW5zdGFuY2VvZiBjc3MuQ2xvc2VTcXVhcmVUb2tlbikgJiYgIWlzRU9GKCkpXG4gICAgICAgICAgcmF3Q1NTU3RyaW5nICs9IHRva2Vuc1twb3MrK10udG9Tb3VyY2UoKTtcbiAgICAgICAgaWYgKCEodG9rZW5zW3Bvc10gaW5zdGFuY2VvZiBjc3MuQ2xvc2VTcXVhcmVUb2tlbikpXG4gICAgICAgICAgdGhyb3cgdW5leHBlY3RlZCgpO1xuICAgICAgICByYXdDU1NTdHJpbmcgKz0gJ10nO1xuICAgICAgICBwb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IHVuZXhwZWN0ZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFyYXdDU1NTdHJpbmcgJiYgIWZ1bmN0aW9ucy5sZW5ndGgpXG4gICAgICB0aHJvdyB1bmV4cGVjdGVkKCk7XG4gICAgcmV0dXJuIHsgY3NzOiByYXdDU1NTdHJpbmcgfHwgdW5kZWZpbmVkLCBmdW5jdGlvbnMgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVCdWlsdGluRnVuY3Rpb25Bcmd1bWVudHMoKTogc3RyaW5nIHtcbiAgICBsZXQgcyA9ICcnO1xuICAgIGxldCBiYWxhbmNlID0gMTsgIC8vIEZpcnN0IG9wZW4gcGFyZW4gaXMgYSBwYXJ0IG9mIGEgZnVuY3Rpb24gdG9rZW4uXG4gICAgd2hpbGUgKCFpc0VPRigpKSB7XG4gICAgICBpZiAoaXNPcGVuUGFyZW4oKSB8fCBpc0Z1bmN0aW9uKCkpXG4gICAgICAgIGJhbGFuY2UrKztcbiAgICAgIGlmIChpc0Nsb3NlUGFyZW4oKSlcbiAgICAgICAgYmFsYW5jZS0tO1xuICAgICAgaWYgKCFiYWxhbmNlKVxuICAgICAgICBicmVhaztcbiAgICAgIHMgKz0gdG9rZW5zW3BvcysrXS50b1NvdXJjZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IGNvbnN1bWVGdW5jdGlvbkFyZ3VtZW50cygpO1xuICBpZiAoIWlzRU9GKCkpXG4gICAgdGhyb3cgdW5leHBlY3RlZCgpO1xuICBpZiAocmVzdWx0LnNvbWUoYXJnID0+IHR5cGVvZiBhcmcgIT09ICdvYmplY3QnIHx8ICEoJ3NpbXBsZXMnIGluIGFyZykpKVxuICAgIHRocm93IG5ldyBJbnZhbGlkU2VsZWN0b3JFcnJvcihgRXJyb3Igd2hpbGUgcGFyc2luZyBjc3Mgc2VsZWN0b3IgXCIke3NlbGVjdG9yfVwiLiBEaWQgeW91IG1lYW4gdG8gQ1NTLmVzY2FwZSBpdD9gKTtcbiAgcmV0dXJuIHsgc2VsZWN0b3I6IHJlc3VsdCBhcyBDU1NDb21wbGV4U2VsZWN0b3JbXSwgbmFtZXM6IEFycmF5LmZyb20obmFtZXMpIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVTZWxlY3RvcihhcmdzOiBDU1NGdW5jdGlvbkFyZ3VtZW50W10pIHtcbiAgcmV0dXJuIGFyZ3MubWFwKGFyZyA9PiB7XG4gICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKVxuICAgICAgcmV0dXJuIGBcIiR7YXJnfVwiYDtcbiAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpXG4gICAgICByZXR1cm4gU3RyaW5nKGFyZyk7XG4gICAgcmV0dXJuIGFyZy5zaW1wbGVzLm1hcCgoeyBzZWxlY3RvciwgY29tYmluYXRvciB9KSA9PiB7XG4gICAgICBsZXQgcyA9IHNlbGVjdG9yLmNzcyB8fCAnJztcbiAgICAgIHMgPSBzICsgc2VsZWN0b3IuZnVuY3Rpb25zLm1hcChmdW5jID0+IGA6JHtmdW5jLm5hbWV9KCR7c2VyaWFsaXplU2VsZWN0b3IoZnVuYy5hcmdzKX0pYCkuam9pbignJyk7XG4gICAgICBpZiAoY29tYmluYXRvcilcbiAgICAgICAgcyArPSAnICcgKyBjb21iaW5hdG9yO1xuICAgICAgcmV0dXJuIHM7XG4gICAgfSkuam9pbignICcpO1xuICB9KS5qb2luKCcsICcpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbnZhbGlkU2VsZWN0b3JFcnJvciwgcGFyc2VDU1MgfSBmcm9tICcuL2Nzc1BhcnNlcic7XG5cbmltcG9ydCB0eXBlIHsgQ1NTQ29tcGxleFNlbGVjdG9yTGlzdCB9IGZyb20gJy4vY3NzUGFyc2VyJztcbmV4cG9ydCB7IEludmFsaWRTZWxlY3RvckVycm9yLCBpc0ludmFsaWRTZWxlY3RvckVycm9yIH0gZnJvbSAnLi9jc3NQYXJzZXInO1xuXG5leHBvcnQgdHlwZSBOZXN0ZWRTZWxlY3RvckJvZHkgPSB7IHBhcnNlZDogUGFyc2VkU2VsZWN0b3IsIGRpc3RhbmNlPzogbnVtYmVyIH07XG5jb25zdCBrTmVzdGVkU2VsZWN0b3JOYW1lcyA9IG5ldyBTZXQoWydpbnRlcm5hbDpoYXMnLCAnaW50ZXJuYWw6aGFzLW5vdCcsICdpbnRlcm5hbDphbmQnLCAnaW50ZXJuYWw6b3InLCAnaW50ZXJuYWw6Y2hhaW4nLCAnbGVmdC1vZicsICdyaWdodC1vZicsICdhYm92ZScsICdiZWxvdycsICduZWFyJ10pO1xuY29uc3Qga05lc3RlZFNlbGVjdG9yTmFtZXNXaXRoRGlzdGFuY2UgPSBuZXcgU2V0KFsnbGVmdC1vZicsICdyaWdodC1vZicsICdhYm92ZScsICdiZWxvdycsICduZWFyJ10pO1xuXG5leHBvcnQgdHlwZSBQYXJzZWRTZWxlY3RvclBhcnQgPSB7XG4gIG5hbWU6IHN0cmluZyxcbiAgYm9keTogc3RyaW5nIHwgQ1NTQ29tcGxleFNlbGVjdG9yTGlzdCB8IE5lc3RlZFNlbGVjdG9yQm9keSxcbiAgc291cmNlOiBzdHJpbmcsXG59O1xuXG5leHBvcnQgdHlwZSBQYXJzZWRTZWxlY3RvciA9IHtcbiAgcGFydHM6IFBhcnNlZFNlbGVjdG9yUGFydFtdLFxuICBjYXB0dXJlPzogbnVtYmVyLFxufTtcblxudHlwZSBQYXJzZWRTZWxlY3RvclN0cmluZ3MgPSB7XG4gIHBhcnRzOiB7IG5hbWU6IHN0cmluZywgYm9keTogc3RyaW5nIH1bXSxcbiAgY2FwdHVyZT86IG51bWJlcixcbn07XG5cbmV4cG9ydCBjb25zdCBjdXN0b21DU1NOYW1lcyA9IG5ldyBTZXQoWydub3QnLCAnaXMnLCAnd2hlcmUnLCAnaGFzJywgJ3Njb3BlJywgJ2xpZ2h0JywgJ3Zpc2libGUnLCAndGV4dCcsICd0ZXh0LW1hdGNoZXMnLCAndGV4dC1pcycsICdoYXMtdGV4dCcsICdhYm92ZScsICdiZWxvdycsICdyaWdodC1vZicsICdsZWZ0LW9mJywgJ25lYXInLCAnbnRoLW1hdGNoJ10pO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTZWxlY3RvcihzZWxlY3Rvcjogc3RyaW5nKTogUGFyc2VkU2VsZWN0b3Ige1xuICBjb25zdCBwYXJzZWRTdHJpbmdzID0gcGFyc2VTZWxlY3RvclN0cmluZyhzZWxlY3Rvcik7XG4gIGNvbnN0IHBhcnRzOiBQYXJzZWRTZWxlY3RvclBhcnRbXSA9IFtdO1xuICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFyc2VkU3RyaW5ncy5wYXJ0cykge1xuICAgIGlmIChwYXJ0Lm5hbWUgPT09ICdjc3MnIHx8IHBhcnQubmFtZSA9PT0gJ2NzczpsaWdodCcpIHtcbiAgICAgIGlmIChwYXJ0Lm5hbWUgPT09ICdjc3M6bGlnaHQnKVxuICAgICAgICBwYXJ0LmJvZHkgPSAnOmxpZ2h0KCcgKyBwYXJ0LmJvZHkgKyAnKSc7XG4gICAgICBjb25zdCBwYXJzZWRDU1MgPSBwYXJzZUNTUyhwYXJ0LmJvZHksIGN1c3RvbUNTU05hbWVzKTtcbiAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICBuYW1lOiAnY3NzJyxcbiAgICAgICAgYm9keTogcGFyc2VkQ1NTLnNlbGVjdG9yLFxuICAgICAgICBzb3VyY2U6IHBhcnQuYm9keVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGtOZXN0ZWRTZWxlY3Rvck5hbWVzLmhhcyhwYXJ0Lm5hbWUpKSB7XG4gICAgICBsZXQgaW5uZXJTZWxlY3Rvcjogc3RyaW5nO1xuICAgICAgbGV0IGRpc3RhbmNlOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB1bmVzY2FwZWQgPSBKU09OLnBhcnNlKCdbJyArIHBhcnQuYm9keSArICddJyk7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh1bmVzY2FwZWQpIHx8IHVuZXNjYXBlZC5sZW5ndGggPCAxIHx8IHVuZXNjYXBlZC5sZW5ndGggPiAyIHx8IHR5cGVvZiB1bmVzY2FwZWRbMF0gIT09ICdzdHJpbmcnKVxuICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkU2VsZWN0b3JFcnJvcihgTWFsZm9ybWVkIHNlbGVjdG9yOiAke3BhcnQubmFtZX09YCArIHBhcnQuYm9keSk7XG4gICAgICAgIGlubmVyU2VsZWN0b3IgPSB1bmVzY2FwZWRbMF07XG4gICAgICAgIGlmICh1bmVzY2FwZWQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB1bmVzY2FwZWRbMV0gIT09ICdudW1iZXInIHx8ICFrTmVzdGVkU2VsZWN0b3JOYW1lc1dpdGhEaXN0YW5jZS5oYXMocGFydC5uYW1lKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkU2VsZWN0b3JFcnJvcihgTWFsZm9ybWVkIHNlbGVjdG9yOiAke3BhcnQubmFtZX09YCArIHBhcnQuYm9keSk7XG4gICAgICAgICAgZGlzdGFuY2UgPSB1bmVzY2FwZWRbMV07XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRTZWxlY3RvckVycm9yKGBNYWxmb3JtZWQgc2VsZWN0b3I6ICR7cGFydC5uYW1lfT1gICsgcGFydC5ib2R5KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5lc3RlZCA9IHsgbmFtZTogcGFydC5uYW1lLCBzb3VyY2U6IHBhcnQuYm9keSwgYm9keTogeyBwYXJzZWQ6IHBhcnNlU2VsZWN0b3IoaW5uZXJTZWxlY3RvciksIGRpc3RhbmNlIH0gfTtcbiAgICAgIGNvbnN0IGxhc3RGcmFtZSA9IFsuLi5uZXN0ZWQuYm9keS5wYXJzZWQucGFydHNdLnJldmVyc2UoKS5maW5kKHBhcnQgPT4gcGFydC5uYW1lID09PSAnaW50ZXJuYWw6Y29udHJvbCcgJiYgcGFydC5ib2R5ID09PSAnZW50ZXItZnJhbWUnKTtcbiAgICAgIGNvbnN0IGxhc3RGcmFtZUluZGV4ID0gbGFzdEZyYW1lID8gbmVzdGVkLmJvZHkucGFyc2VkLnBhcnRzLmluZGV4T2YobGFzdEZyYW1lKSA6IC0xO1xuICAgICAgLy8gQWxsb3cgbmVzdGVkIHNlbGVjdG9ycyB0byBzdGFydCB3aXRoIHRoZSBzYW1lIGZyYW1lIHNlbGVjdG9yLlxuICAgICAgaWYgKGxhc3RGcmFtZUluZGV4ICE9PSAtMSAmJiBzZWxlY3RvclBhcnRzRXF1YWwobmVzdGVkLmJvZHkucGFyc2VkLnBhcnRzLnNsaWNlKDAsIGxhc3RGcmFtZUluZGV4ICsgMSksIHBhcnRzLnNsaWNlKDAsIGxhc3RGcmFtZUluZGV4ICsgMSkpKVxuICAgICAgICBuZXN0ZWQuYm9keS5wYXJzZWQucGFydHMuc3BsaWNlKDAsIGxhc3RGcmFtZUluZGV4ICsgMSk7XG4gICAgICBwYXJ0cy5wdXNoKG5lc3RlZCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcGFydHMucHVzaCh7IC4uLnBhcnQsIHNvdXJjZTogcGFydC5ib2R5IH0pO1xuICB9XG4gIGlmIChrTmVzdGVkU2VsZWN0b3JOYW1lcy5oYXMocGFydHNbMF0ubmFtZSkpXG4gICAgdGhyb3cgbmV3IEludmFsaWRTZWxlY3RvckVycm9yKGBcIiR7cGFydHNbMF0ubmFtZX1cIiBzZWxlY3RvciBjYW5ub3QgYmUgZmlyc3RgKTtcbiAgcmV0dXJuIHtcbiAgICBjYXB0dXJlOiBwYXJzZWRTdHJpbmdzLmNhcHR1cmUsXG4gICAgcGFydHNcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0U2VsZWN0b3JCeUZyYW1lKHNlbGVjdG9yVGV4dDogc3RyaW5nKTogUGFyc2VkU2VsZWN0b3JbXSB7XG4gIGNvbnN0IHNlbGVjdG9yID0gcGFyc2VTZWxlY3RvcihzZWxlY3RvclRleHQpO1xuICBjb25zdCByZXN1bHQ6IFBhcnNlZFNlbGVjdG9yW10gPSBbXTtcbiAgbGV0IGNodW5rOiBQYXJzZWRTZWxlY3RvciA9IHtcbiAgICBwYXJ0czogW10sXG4gIH07XG4gIGxldCBjaHVua1N0YXJ0SW5kZXggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdG9yLnBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgcGFydCA9IHNlbGVjdG9yLnBhcnRzW2ldO1xuICAgIGlmIChwYXJ0Lm5hbWUgPT09ICdpbnRlcm5hbDpjb250cm9sJyAmJiBwYXJ0LmJvZHkgPT09ICdlbnRlci1mcmFtZScpIHtcbiAgICAgIGlmICghY2h1bmsucGFydHMubGVuZ3RoKVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFNlbGVjdG9yRXJyb3IoJ1NlbGVjdG9yIGNhbm5vdCBzdGFydCB3aXRoIGVudGVyaW5nIGZyYW1lLCBzZWxlY3QgdGhlIGlmcmFtZSBmaXJzdCcpO1xuICAgICAgcmVzdWx0LnB1c2goY2h1bmspO1xuICAgICAgY2h1bmsgPSB7IHBhcnRzOiBbXSB9O1xuICAgICAgY2h1bmtTdGFydEluZGV4ID0gaSArIDE7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdG9yLmNhcHR1cmUgPT09IGkpXG4gICAgICBjaHVuay5jYXB0dXJlID0gaSAtIGNodW5rU3RhcnRJbmRleDtcbiAgICBjaHVuay5wYXJ0cy5wdXNoKHBhcnQpO1xuICB9XG4gIGlmICghY2h1bmsucGFydHMubGVuZ3RoKVxuICAgIHRocm93IG5ldyBJbnZhbGlkU2VsZWN0b3JFcnJvcihgU2VsZWN0b3IgY2Fubm90IGVuZCB3aXRoIGVudGVyaW5nIGZyYW1lLCB3aGlsZSBwYXJzaW5nIHNlbGVjdG9yICR7c2VsZWN0b3JUZXh0fWApO1xuICByZXN1bHQucHVzaChjaHVuayk7XG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IuY2FwdHVyZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0uY2FwdHVyZSAhPT0gJ251bWJlcicpXG4gICAgdGhyb3cgbmV3IEludmFsaWRTZWxlY3RvckVycm9yKGBDYW4gbm90IGNhcHR1cmUgdGhlIHNlbGVjdG9yIGJlZm9yZSBkaXZpbmcgaW50byB0aGUgZnJhbWUuIE9ubHkgdXNlICogYWZ0ZXIgdGhlIGxhc3QgZnJhbWUgaGFzIGJlZW4gc2VsZWN0ZWRgKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc2VsZWN0b3JQYXJ0c0VxdWFsKGxpc3QxOiBQYXJzZWRTZWxlY3RvclBhcnRbXSwgbGlzdDI6IFBhcnNlZFNlbGVjdG9yUGFydFtdKSB7XG4gIHJldHVybiBzdHJpbmdpZnlTZWxlY3Rvcih7IHBhcnRzOiBsaXN0MSB9KSA9PT0gc3RyaW5naWZ5U2VsZWN0b3IoeyBwYXJ0czogbGlzdDIgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlTZWxlY3RvcihzZWxlY3Rvcjogc3RyaW5nIHwgUGFyc2VkU2VsZWN0b3IsIGZvcmNlRW5naW5lTmFtZT86IGJvb2xlYW4pOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJylcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIHJldHVybiBzZWxlY3Rvci5wYXJ0cy5tYXAoKHAsIGkpID0+IHtcbiAgICBsZXQgaW5jbHVkZUVuZ2luZSA9IHRydWU7XG4gICAgaWYgKCFmb3JjZUVuZ2luZU5hbWUgJiYgaSAhPT0gc2VsZWN0b3IuY2FwdHVyZSkge1xuICAgICAgaWYgKHAubmFtZSA9PT0gJ2NzcycpXG4gICAgICAgIGluY2x1ZGVFbmdpbmUgPSBmYWxzZTtcbiAgICAgIGVsc2UgaWYgKHAubmFtZSA9PT0gJ3hwYXRoJyAmJiBwLnNvdXJjZS5zdGFydHNXaXRoKCcvLycpIHx8IHAuc291cmNlLnN0YXJ0c1dpdGgoJy4uJykpXG4gICAgICAgIGluY2x1ZGVFbmdpbmUgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgcHJlZml4ID0gaW5jbHVkZUVuZ2luZSA/IHAubmFtZSArICc9JyA6ICcnO1xuICAgIHJldHVybiBgJHtpID09PSBzZWxlY3Rvci5jYXB0dXJlID8gJyonIDogJyd9JHtwcmVmaXh9JHtwLnNvdXJjZX1gO1xuICB9KS5qb2luKCcgPj4gJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNpdEFsbFNlbGVjdG9yUGFydHMoc2VsZWN0b3I6IFBhcnNlZFNlbGVjdG9yLCB2aXNpdG9yOiAocGFydDogUGFyc2VkU2VsZWN0b3JQYXJ0LCBuZXN0ZWQ6IGJvb2xlYW4pID0+IHZvaWQpIHtcbiAgY29uc3QgdmlzaXQgPSAoc2VsZWN0b3I6IFBhcnNlZFNlbGVjdG9yLCBuZXN0ZWQ6IGJvb2xlYW4pID0+IHtcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2Ygc2VsZWN0b3IucGFydHMpIHtcbiAgICAgIHZpc2l0b3IocGFydCwgbmVzdGVkKTtcbiAgICAgIGlmIChrTmVzdGVkU2VsZWN0b3JOYW1lcy5oYXMocGFydC5uYW1lKSlcbiAgICAgICAgdmlzaXQoKHBhcnQuYm9keSBhcyBOZXN0ZWRTZWxlY3RvckJvZHkpLnBhcnNlZCwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuICB2aXNpdChzZWxlY3RvciwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNlbGVjdG9yU3RyaW5nKHNlbGVjdG9yOiBzdHJpbmcpOiBQYXJzZWRTZWxlY3RvclN0cmluZ3Mge1xuICBsZXQgaW5kZXggPSAwO1xuICBsZXQgcXVvdGU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgY29uc3QgcmVzdWx0OiBQYXJzZWRTZWxlY3RvclN0cmluZ3MgPSB7IHBhcnRzOiBbXSB9O1xuICBjb25zdCBhcHBlbmQgPSAoKSA9PiB7XG4gICAgY29uc3QgcGFydCA9IHNlbGVjdG9yLnN1YnN0cmluZyhzdGFydCwgaW5kZXgpLnRyaW0oKTtcbiAgICBjb25zdCBlcUluZGV4ID0gcGFydC5pbmRleE9mKCc9Jyk7XG4gICAgbGV0IG5hbWU6IHN0cmluZztcbiAgICBsZXQgYm9keTogc3RyaW5nO1xuICAgIGlmIChlcUluZGV4ICE9PSAtMSAmJiBwYXJ0LnN1YnN0cmluZygwLCBlcUluZGV4KS50cmltKCkubWF0Y2goL15bYS16QS1aXzAtOS0rOipdKyQvKSkge1xuICAgICAgbmFtZSA9IHBhcnQuc3Vic3RyaW5nKDAsIGVxSW5kZXgpLnRyaW0oKTtcbiAgICAgIGJvZHkgPSBwYXJ0LnN1YnN0cmluZyhlcUluZGV4ICsgMSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0Lmxlbmd0aCA+IDEgJiYgcGFydFswXSA9PT0gJ1wiJyAmJiBwYXJ0W3BhcnQubGVuZ3RoIC0gMV0gPT09ICdcIicpIHtcbiAgICAgIG5hbWUgPSAndGV4dCc7XG4gICAgICBib2R5ID0gcGFydDtcbiAgICB9IGVsc2UgaWYgKHBhcnQubGVuZ3RoID4gMSAmJiBwYXJ0WzBdID09PSBcIidcIiAmJiBwYXJ0W3BhcnQubGVuZ3RoIC0gMV0gPT09IFwiJ1wiKSB7XG4gICAgICBuYW1lID0gJ3RleHQnO1xuICAgICAgYm9keSA9IHBhcnQ7XG4gICAgfSBlbHNlIGlmICgvXlxcKCpcXC9cXC8vLnRlc3QocGFydCkgfHwgcGFydC5zdGFydHNXaXRoKCcuLicpKSB7XG4gICAgICAvLyBJZiBzZWxlY3RvciBzdGFydHMgd2l0aCAnLy8nIG9yICcvLycgcHJlZml4ZWQgd2l0aCBtdWx0aXBsZSBvcGVuaW5nXG4gICAgICAvLyBwYXJlbnRoZXNpcywgY29uc2lkZXIgeHBhdGguIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9wbGF5d3JpZ2h0L2lzc3Vlcy84MTdcbiAgICAgIC8vIElmIHNlbGVjdG9yIHN0YXJ0cyB3aXRoICcuLicsIGNvbnNpZGVyIHhwYXRoIGFzIHdlbGwuXG4gICAgICBuYW1lID0gJ3hwYXRoJztcbiAgICAgIGJvZHkgPSBwYXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gJ2Nzcyc7XG4gICAgICBib2R5ID0gcGFydDtcbiAgICB9XG4gICAgbGV0IGNhcHR1cmUgPSBmYWxzZTtcbiAgICBpZiAobmFtZVswXSA9PT0gJyonKSB7XG4gICAgICBjYXB0dXJlID0gdHJ1ZTtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cmluZygxKTtcbiAgICB9XG4gICAgcmVzdWx0LnBhcnRzLnB1c2goeyBuYW1lLCBib2R5IH0pO1xuICAgIGlmIChjYXB0dXJlKSB7XG4gICAgICBpZiAocmVzdWx0LmNhcHR1cmUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRTZWxlY3RvckVycm9yKGBPbmx5IG9uZSBvZiB0aGUgc2VsZWN0b3JzIGNhbiBjYXB0dXJlIHVzaW5nICogbW9kaWZpZXJgKTtcbiAgICAgIHJlc3VsdC5jYXB0dXJlID0gcmVzdWx0LnBhcnRzLmxlbmd0aCAtIDE7XG4gICAgfVxuICB9O1xuXG4gIGlmICghc2VsZWN0b3IuaW5jbHVkZXMoJz4+JykpIHtcbiAgICBpbmRleCA9IHNlbGVjdG9yLmxlbmd0aDtcbiAgICBhcHBlbmQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgY29uc3Qgc2hvdWxkSWdub3JlVGV4dFNlbGVjdG9yUXVvdGUgPSAoKSA9PiB7XG4gICAgY29uc3QgcHJlZml4ID0gc2VsZWN0b3Iuc3Vic3RyaW5nKHN0YXJ0LCBpbmRleCk7XG4gICAgY29uc3QgbWF0Y2ggPSBwcmVmaXgubWF0Y2goL15cXHMqdGV4dFxccyo9KC4qKSQvKTtcbiAgICAvLyBNdXN0IGJlIGEgdGV4dCBzZWxlY3RvciB3aXRoIHNvbWUgdGV4dCBiZWZvcmUgdGhlIHF1b3RlLlxuICAgIHJldHVybiAhIW1hdGNoICYmICEhbWF0Y2hbMV07XG4gIH07XG5cbiAgd2hpbGUgKGluZGV4IDwgc2VsZWN0b3IubGVuZ3RoKSB7XG4gICAgY29uc3QgYyA9IHNlbGVjdG9yW2luZGV4XTtcbiAgICBpZiAoYyA9PT0gJ1xcXFwnICYmIGluZGV4ICsgMSA8IHNlbGVjdG9yLmxlbmd0aCkge1xuICAgICAgaW5kZXggKz0gMjtcbiAgICB9IGVsc2UgaWYgKGMgPT09IHF1b3RlKSB7XG4gICAgICBxdW90ZSA9IHVuZGVmaW5lZDtcbiAgICAgIGluZGV4Kys7XG4gICAgfSBlbHNlIGlmICghcXVvdGUgJiYgKGMgPT09ICdcIicgfHwgYyA9PT0gJ1xcJycgfHwgYyA9PT0gJ2AnKSAmJiAhc2hvdWxkSWdub3JlVGV4dFNlbGVjdG9yUXVvdGUoKSkge1xuICAgICAgcXVvdGUgPSBjO1xuICAgICAgaW5kZXgrKztcbiAgICB9IGVsc2UgaWYgKCFxdW90ZSAmJiBjID09PSAnPicgJiYgc2VsZWN0b3JbaW5kZXggKyAxXSA9PT0gJz4nKSB7XG4gICAgICBhcHBlbmQoKTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgICBzdGFydCA9IGluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgfVxuICBhcHBlbmQoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IHR5cGUgQXR0cmlidXRlU2VsZWN0b3JPcGVyYXRvciA9ICc8dHJ1dGh5Pid8Jz0nfCcqPSd8J3w9J3wnXj0nfCckPSd8J349JztcbmV4cG9ydCB0eXBlIEF0dHJpYnV0ZVNlbGVjdG9yUGFydCA9IHtcbiAgbmFtZTogc3RyaW5nLFxuICBqc29uUGF0aDogc3RyaW5nW10sXG4gIG9wOiBBdHRyaWJ1dGVTZWxlY3Rvck9wZXJhdG9yLFxuICB2YWx1ZTogYW55LFxuICBjYXNlU2Vuc2l0aXZlOiBib29sZWFuLFxufTtcblxuZXhwb3J0IHR5cGUgQXR0cmlidXRlU2VsZWN0b3IgPSB7XG4gIG5hbWU6IHN0cmluZyxcbiAgYXR0cmlidXRlczogQXR0cmlidXRlU2VsZWN0b3JQYXJ0W10sXG59O1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUF0dHJpYnV0ZVNlbGVjdG9yKHNlbGVjdG9yOiBzdHJpbmcsIGFsbG93VW5xdW90ZWRTdHJpbmdzOiBib29sZWFuKTogQXR0cmlidXRlU2VsZWN0b3Ige1xuICBsZXQgd3AgPSAwO1xuICBsZXQgRU9MID0gc2VsZWN0b3IubGVuZ3RoID09PSAwO1xuXG4gIGNvbnN0IG5leHQgPSAoKSA9PiBzZWxlY3Rvclt3cF0gfHwgJyc7XG4gIGNvbnN0IGVhdDEgPSAoKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV4dCgpO1xuICAgICsrd3A7XG4gICAgRU9MID0gd3AgPj0gc2VsZWN0b3IubGVuZ3RoO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgY29uc3Qgc3ludGF4RXJyb3IgPSAoc3RhZ2U6IHN0cmluZ3x1bmRlZmluZWQpID0+IHtcbiAgICBpZiAoRU9MKVxuICAgICAgdGhyb3cgbmV3IEludmFsaWRTZWxlY3RvckVycm9yKGBVbmV4cGVjdGVkIGVuZCBvZiBzZWxlY3RvciB3aGlsZSBwYXJzaW5nIHNlbGVjdG9yIFxcYCR7c2VsZWN0b3J9XFxgYCk7XG4gICAgdGhyb3cgbmV3IEludmFsaWRTZWxlY3RvckVycm9yKGBFcnJvciB3aGlsZSBwYXJzaW5nIHNlbGVjdG9yIFxcYCR7c2VsZWN0b3J9XFxgIC0gdW5leHBlY3RlZCBzeW1ib2wgXCIke25leHQoKX1cIiBhdCBwb3NpdGlvbiAke3dwfWAgKyAoc3RhZ2UgPyAnIGR1cmluZyAnICsgc3RhZ2UgOiAnJykpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNraXBTcGFjZXMoKSB7XG4gICAgd2hpbGUgKCFFT0wgJiYgL1xccy8udGVzdChuZXh0KCkpKVxuICAgICAgZWF0MSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNDU1NOYW1lQ2hhcihjaGFyOiBzdHJpbmcpIHtcbiAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG4gICAgcmV0dXJuIChjaGFyID49ICdcXHUwMDgwJykgIC8vIG5vbi1hc2NpaVxuICAgICAgICB8fCAoY2hhciA+PSAnXFx1MDAzMCcgJiYgY2hhciA8PSAnXFx1MDAzOScpICAvLyBkaWdpdFxuICAgICAgICB8fCAoY2hhciA+PSAnXFx1MDA0MScgJiYgY2hhciA8PSAnXFx1MDA1YScpICAvLyB1cHBlcmNhc2UgbGV0dGVyXG4gICAgICAgIHx8IChjaGFyID49ICdcXHUwMDYxJyAmJiBjaGFyIDw9ICdcXHUwMDdhJykgIC8vIGxvd2VyY2FzZSBsZXR0ZXJcbiAgICAgICAgfHwgKGNoYXIgPj0gJ1xcdTAwMzAnICYmIGNoYXIgPD0gJ1xcdTAwMzknKSAgLy8gZGlnaXRcbiAgICAgICAgfHwgY2hhciA9PT0gJ1xcdTAwNWYnICAvLyBcIl9cIlxuICAgICAgICB8fCBjaGFyID09PSAnXFx1MDAyZCc7ICAvLyBcIi1cIlxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZElkZW50aWZpZXIoKSB7XG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIHNraXBTcGFjZXMoKTtcbiAgICB3aGlsZSAoIUVPTCAmJiBpc0NTU05hbWVDaGFyKG5leHQoKSkpXG4gICAgICByZXN1bHQgKz0gZWF0MSgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkUXVvdGVkU3RyaW5nKHF1b3RlOiBzdHJpbmcpIHtcbiAgICBsZXQgcmVzdWx0ID0gZWF0MSgpO1xuICAgIGlmIChyZXN1bHQgIT09IHF1b3RlKVxuICAgICAgc3ludGF4RXJyb3IoJ3BhcnNpbmcgcXVvdGVkIHN0cmluZycpO1xuICAgIHdoaWxlICghRU9MICYmIG5leHQoKSAhPT0gcXVvdGUpIHtcbiAgICAgIGlmIChuZXh0KCkgPT09ICdcXFxcJylcbiAgICAgICAgZWF0MSgpO1xuICAgICAgcmVzdWx0ICs9IGVhdDEoKTtcbiAgICB9XG4gICAgaWYgKG5leHQoKSAhPT0gcXVvdGUpXG4gICAgICBzeW50YXhFcnJvcigncGFyc2luZyBxdW90ZWQgc3RyaW5nJyk7XG4gICAgcmVzdWx0ICs9IGVhdDEoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFJlZ3VsYXJFeHByZXNzaW9uKCkge1xuICAgIGlmIChlYXQxKCkgIT09ICcvJylcbiAgICAgIHN5bnRheEVycm9yKCdwYXJzaW5nIHJlZ3VsYXIgZXhwcmVzc2lvbicpO1xuICAgIGxldCBzb3VyY2UgPSAnJztcbiAgICBsZXQgaW5DbGFzcyA9IGZhbHNlO1xuICAgIC8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTEuMC8jc2VjLWxpdGVyYWxzLXJlZ3VsYXItZXhwcmVzc2lvbi1saXRlcmFsc1xuICAgIHdoaWxlICghRU9MKSB7XG4gICAgICBpZiAobmV4dCgpID09PSAnXFxcXCcpIHtcbiAgICAgICAgc291cmNlICs9IGVhdDEoKTtcbiAgICAgICAgaWYgKEVPTClcbiAgICAgICAgICBzeW50YXhFcnJvcigncGFyc2luZyByZWd1bGFyIGV4cHJlc3Npb24nKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5DbGFzcyAmJiBuZXh0KCkgPT09ICddJykge1xuICAgICAgICBpbkNsYXNzID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFpbkNsYXNzICYmIG5leHQoKSA9PT0gJ1snKSB7XG4gICAgICAgIGluQ2xhc3MgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICghaW5DbGFzcyAmJiBuZXh0KCkgPT09ICcvJykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNvdXJjZSArPSBlYXQxKCk7XG4gICAgfVxuICAgIGlmIChlYXQxKCkgIT09ICcvJylcbiAgICAgIHN5bnRheEVycm9yKCdwYXJzaW5nIHJlZ3VsYXIgZXhwcmVzc2lvbicpO1xuICAgIGxldCBmbGFncyA9ICcnO1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvR3VpZGUvUmVndWxhcl9FeHByZXNzaW9uc1xuICAgIHdoaWxlICghRU9MICYmIG5leHQoKS5tYXRjaCgvW2RnaW1zdXldLykpXG4gICAgICBmbGFncyArPSBlYXQxKCk7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHNvdXJjZSwgZmxhZ3MpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkU2VsZWN0b3JFcnJvcihgRXJyb3Igd2hpbGUgcGFyc2luZyBzZWxlY3RvciBcXGAke3NlbGVjdG9yfVxcYDogJHtlLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEF0dHJpYnV0ZVRva2VuKCkge1xuICAgIGxldCB0b2tlbiA9ICcnO1xuICAgIHNraXBTcGFjZXMoKTtcbiAgICBpZiAobmV4dCgpID09PSBgJ2AgfHwgbmV4dCgpID09PSBgXCJgKVxuICAgICAgdG9rZW4gPSByZWFkUXVvdGVkU3RyaW5nKG5leHQoKSkuc2xpY2UoMSwgLTEpO1xuICAgIGVsc2VcbiAgICAgIHRva2VuID0gcmVhZElkZW50aWZpZXIoKTtcbiAgICBpZiAoIXRva2VuKVxuICAgICAgc3ludGF4RXJyb3IoJ3BhcnNpbmcgcHJvcGVydHkgcGF0aCcpO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRPcGVyYXRvcigpOiBBdHRyaWJ1dGVTZWxlY3Rvck9wZXJhdG9yIHtcbiAgICBza2lwU3BhY2VzKCk7XG4gICAgbGV0IG9wID0gJyc7XG4gICAgaWYgKCFFT0wpXG4gICAgICBvcCArPSBlYXQxKCk7XG4gICAgaWYgKCFFT0wgJiYgKG9wICE9PSAnPScpKVxuICAgICAgb3AgKz0gZWF0MSgpO1xuICAgIGlmICghWyc9JywgJyo9JywgJ149JywgJyQ9JywgJ3w9JywgJ349J10uaW5jbHVkZXMob3ApKVxuICAgICAgc3ludGF4RXJyb3IoJ3BhcnNpbmcgb3BlcmF0b3InKTtcbiAgICByZXR1cm4gKG9wIGFzIEF0dHJpYnV0ZVNlbGVjdG9yT3BlcmF0b3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEF0dHJpYnV0ZSgpOiBBdHRyaWJ1dGVTZWxlY3RvclBhcnQge1xuICAgIC8vIHNraXAgbGVhZGluZyBbXG4gICAgZWF0MSgpO1xuXG4gICAgLy8gcmVhZCBhdHRyaWJ1dGUgbmFtZTpcbiAgICAvLyBmb28uYmFyXG4gICAgLy8gJ2ZvbycgIC4gXCJiYSB6elwiXG4gICAgY29uc3QganNvblBhdGggPSBbXTtcbiAgICBqc29uUGF0aC5wdXNoKHJlYWRBdHRyaWJ1dGVUb2tlbigpKTtcbiAgICBza2lwU3BhY2VzKCk7XG4gICAgd2hpbGUgKG5leHQoKSA9PT0gJy4nKSB7XG4gICAgICBlYXQxKCk7XG4gICAgICBqc29uUGF0aC5wdXNoKHJlYWRBdHRyaWJ1dGVUb2tlbigpKTtcbiAgICAgIHNraXBTcGFjZXMoKTtcbiAgICB9XG4gICAgLy8gY2hlY2sgcHJvcGVydHkgaXMgdHJ1dGh5OiBbZW5hYmxlZF1cbiAgICBpZiAobmV4dCgpID09PSAnXScpIHtcbiAgICAgIGVhdDEoKTtcbiAgICAgIHJldHVybiB7IG5hbWU6IGpzb25QYXRoLmpvaW4oJy4nKSwganNvblBhdGgsIG9wOiAnPHRydXRoeT4nLCB2YWx1ZTogbnVsbCwgY2FzZVNlbnNpdGl2ZTogZmFsc2UgfTtcbiAgICB9XG5cbiAgICBjb25zdCBvcGVyYXRvciA9IHJlYWRPcGVyYXRvcigpO1xuXG4gICAgbGV0IHZhbHVlID0gdW5kZWZpbmVkO1xuICAgIGxldCBjYXNlU2Vuc2l0aXZlID0gdHJ1ZTtcbiAgICBza2lwU3BhY2VzKCk7XG4gICAgaWYgKG5leHQoKSA9PT0gJy8nKSB7XG4gICAgICBpZiAob3BlcmF0b3IgIT09ICc9JylcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRTZWxlY3RvckVycm9yKGBFcnJvciB3aGlsZSBwYXJzaW5nIHNlbGVjdG9yIFxcYCR7c2VsZWN0b3J9XFxgIC0gY2Fubm90IHVzZSAke29wZXJhdG9yfSBpbiBhdHRyaWJ1dGUgd2l0aCByZWd1bGFyIGV4cHJlc3Npb25gKTtcbiAgICAgIHZhbHVlID0gcmVhZFJlZ3VsYXJFeHByZXNzaW9uKCk7XG4gICAgfSBlbHNlIGlmIChuZXh0KCkgPT09IGAnYCB8fCBuZXh0KCkgPT09IGBcImApIHtcbiAgICAgIHZhbHVlID0gcmVhZFF1b3RlZFN0cmluZyhuZXh0KCkpLnNsaWNlKDEsIC0xKTtcbiAgICAgIHNraXBTcGFjZXMoKTtcbiAgICAgIGlmIChuZXh0KCkgPT09ICdpJyB8fCBuZXh0KCkgPT09ICdJJykge1xuICAgICAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2U7XG4gICAgICAgIGVhdDEoKTtcbiAgICAgIH0gZWxzZSBpZiAobmV4dCgpID09PSAncycgfHwgbmV4dCgpID09PSAnUycpIHtcbiAgICAgICAgY2FzZVNlbnNpdGl2ZSA9IHRydWU7XG4gICAgICAgIGVhdDEoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSAnJztcbiAgICAgIHdoaWxlICghRU9MICYmIChpc0NTU05hbWVDaGFyKG5leHQoKSkgfHwgbmV4dCgpID09PSAnKycgfHwgbmV4dCgpID09PSAnLicpKVxuICAgICAgICB2YWx1ZSArPSBlYXQxKCk7XG4gICAgICBpZiAodmFsdWUgPT09ICd0cnVlJykge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnZmFsc2UnKSB7XG4gICAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWFsbG93VW5xdW90ZWRTdHJpbmdzKSB7XG4gICAgICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICAgICAgaWYgKE51bWJlci5pc05hTih2YWx1ZSkpXG4gICAgICAgICAgICBzeW50YXhFcnJvcigncGFyc2luZyBhdHRyaWJ1dGUgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBza2lwU3BhY2VzKCk7XG4gICAgaWYgKG5leHQoKSAhPT0gJ10nKVxuICAgICAgc3ludGF4RXJyb3IoJ3BhcnNpbmcgYXR0cmlidXRlIHZhbHVlJyk7XG5cbiAgICBlYXQxKCk7XG4gICAgaWYgKG9wZXJhdG9yICE9PSAnPScgJiYgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJylcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkU2VsZWN0b3JFcnJvcihgRXJyb3Igd2hpbGUgcGFyc2luZyBzZWxlY3RvciBcXGAke3NlbGVjdG9yfVxcYCAtIGNhbm5vdCB1c2UgJHtvcGVyYXRvcn0gaW4gYXR0cmlidXRlIHdpdGggbm9uLXN0cmluZyBtYXRjaGluZyB2YWx1ZSAtICR7dmFsdWV9YCk7XG4gICAgcmV0dXJuIHsgbmFtZToganNvblBhdGguam9pbignLicpLCBqc29uUGF0aCwgb3A6IG9wZXJhdG9yLCB2YWx1ZSwgY2FzZVNlbnNpdGl2ZSB9O1xuICB9XG5cbiAgY29uc3QgcmVzdWx0OiBBdHRyaWJ1dGVTZWxlY3RvciA9IHtcbiAgICBuYW1lOiAnJyxcbiAgICBhdHRyaWJ1dGVzOiBbXSxcbiAgfTtcbiAgcmVzdWx0Lm5hbWUgPSByZWFkSWRlbnRpZmllcigpO1xuICBza2lwU3BhY2VzKCk7XG4gIHdoaWxlIChuZXh0KCkgPT09ICdbJykge1xuICAgIHJlc3VsdC5hdHRyaWJ1dGVzLnB1c2gocmVhZEF0dHJpYnV0ZSgpKTtcbiAgICBza2lwU3BhY2VzKCk7XG4gIH1cbiAgaWYgKCFFT0wpXG4gICAgc3ludGF4RXJyb3IodW5kZWZpbmVkKTtcbiAgaWYgKCFyZXN1bHQubmFtZSAmJiAhcmVzdWx0LmF0dHJpYnV0ZXMubGVuZ3RoKVxuICAgIHRocm93IG5ldyBJbnZhbGlkU2VsZWN0b3JFcnJvcihgRXJyb3Igd2hpbGUgcGFyc2luZyBzZWxlY3RvciBcXGAke3NlbGVjdG9yfVxcYCAtIHNlbGVjdG9yIGNhbm5vdCBiZSBlbXB0eWApO1xuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBOT1RFOiB0aGlzIGZ1bmN0aW9uIHNob3VsZCBub3QgYmUgdXNlZCB0byBlc2NhcGUgYW55IHNlbGVjdG9ycy5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVXaXRoUXVvdGVzKHRleHQ6IHN0cmluZywgY2hhcjogc3RyaW5nID0gJ1xcJycpIHtcbiAgY29uc3Qgc3RyaW5naWZpZWQgPSBKU09OLnN0cmluZ2lmeSh0ZXh0KTtcbiAgY29uc3QgZXNjYXBlZFRleHQgPSBzdHJpbmdpZmllZC5zdWJzdHJpbmcoMSwgc3RyaW5naWZpZWQubGVuZ3RoIC0gMSkucmVwbGFjZSgvXFxcXFwiL2csICdcIicpO1xuICBpZiAoY2hhciA9PT0gJ1xcJycpXG4gICAgcmV0dXJuIGNoYXIgKyBlc2NhcGVkVGV4dC5yZXBsYWNlKC9bJ10vZywgJ1xcXFxcXCcnKSArIGNoYXI7XG4gIGlmIChjaGFyID09PSAnXCInKVxuICAgIHJldHVybiBjaGFyICsgZXNjYXBlZFRleHQucmVwbGFjZSgvW1wiXS9nLCAnXFxcXFwiJykgKyBjaGFyO1xuICBpZiAoY2hhciA9PT0gJ2AnKVxuICAgIHJldHVybiBjaGFyICsgZXNjYXBlZFRleHQucmVwbGFjZSgvW2BdL2csICdcXFxcYCcpICsgY2hhcjtcbiAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVzY2FwZSBjaGFyJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVUZW1wbGF0ZVN0cmluZyh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gdGV4dFxuICAgICAgLnJlcGxhY2UoL1xcXFwvZywgJ1xcXFxcXFxcJylcbiAgICAgIC5yZXBsYWNlKC9gL2csICdcXFxcYCcpXG4gICAgICAucmVwbGFjZSgvXFwkXFx7L2csICdcXFxcJHsnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKG9iajogYW55KTogb2JqIGlzIHN0cmluZyB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyB8fCBvYmogaW5zdGFuY2VvZiBTdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1RpdGxlQ2FzZShuYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cmluZygxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvU25ha2VDYXNlKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIEUuZy4gaWdub3JlSFRUUFNFcnJvcnMgPT4gaWdub3JlX2h0dHBzX2Vycm9ycy5cbiAgcmV0dXJuIG5hbWUucmVwbGFjZSgvKFthLXowLTldKShbQS1aXSkvZywgJyQxXyQyJykucmVwbGFjZSgvKFtBLVpdKShbQS1aXVthLXpdKS9nLCAnJDFfJDInKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVvdGVDU1NBdHRyaWJ1dGVWYWx1ZSh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYFwiJHt0ZXh0LnJlcGxhY2UoL1tcIlxcXFxdL2csIGNoYXIgPT4gJ1xcXFwnICsgY2hhcil9XCJgO1xufVxuXG5sZXQgbm9ybWFsaXplZFdoaXRlc3BhY2VDYWNoZTogTWFwPHN0cmluZywgc3RyaW5nPiB8IHVuZGVmaW5lZDtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhY2hlTm9ybWFsaXplZFdoaXRlc3BhY2VzKCkge1xuICBub3JtYWxpemVkV2hpdGVzcGFjZUNhY2hlID0gbmV3IE1hcCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplV2hpdGVTcGFjZSh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICBsZXQgcmVzdWx0ID0gbm9ybWFsaXplZFdoaXRlc3BhY2VDYWNoZT8uZ2V0KHRleHQpO1xuICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXN1bHQgPSB0ZXh0LnJlcGxhY2UoL1tcXHUyMDBiXFx1MDBhZF0vZywgJycpLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgbm9ybWFsaXplZFdoaXRlc3BhY2VDYWNoZT8uc2V0KHRleHQsIHJlc3VsdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUVzY2FwZWRSZWdleFF1b3Rlcyhzb3VyY2U6IHN0cmluZykge1xuICAvLyBUaGlzIGZ1bmN0aW9uIHJldmVyc2VzIHRoZSBlZmZlY3Qgb2YgZXNjYXBlUmVnZXhGb3JTZWxlY3RvciBiZWxvdy5cbiAgLy8gT2RkIG51bWJlciBvZiBiYWNrc2xhc2hlcyBmb2xsb3dlZCBieSB0aGUgcXVvdGUgLT4gcmVtb3ZlIHVubmVlZGVkIGJhY2tzbGFzaC5cbiAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKC8oXnxbXlxcXFxdKShcXFxcXFxcXCkqXFxcXChbJ1wiYF0pL2csICckMSQyJDMnKTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlUmVnZXhGb3JTZWxlY3RvcihyZTogUmVnRXhwKTogc3RyaW5nIHtcbiAgLy8gVW5pY29kZSBtb2RlIGRvZXMgbm90IGFsbG93IFwiaWRlbnRpdHkgY2hhcmFjdGVyIGVzY2FwZXNcIiwgc28gd2UgZG8gbm90IGVzY2FwZSBhbmRcbiAgLy8gaG9wZSB0aGF0IGl0IGRvZXMgbm90IGNvbnRhaW4gcXVvdGVzIGFuZC9vciA+PiBzaWducy5cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvUmVndWxhcl9leHByZXNzaW9ucy9DaGFyYWN0ZXJfZXNjYXBlXG4gIC8vIFRPRE86IHJld29yayBSRSB1c2FnZXMgaW4gaW50ZXJuYWwgc2VsZWN0b3JzIGF3YXkgZnJvbSBsaXRlcmFsIHJlcHJlc2VudGF0aW9uIHRvIGpzb24sIGUuZy4ge3NvdXJjZSxmbGFnc30uXG4gIGlmIChyZS51bmljb2RlIHx8IChyZSBhcyBhbnkpLnVuaWNvZGVTZXRzKVxuICAgIHJldHVybiBTdHJpbmcocmUpO1xuICAvLyBFdmVuIG51bWJlciBvZiBiYWNrc2xhc2hlcyBmb2xsb3dlZCBieSB0aGUgcXVvdGUgLT4gaW5zZXJ0IGEgYmFja3NsYXNoLlxuICByZXR1cm4gU3RyaW5nKHJlKS5yZXBsYWNlKC8oXnxbXlxcXFxdKShcXFxcXFxcXCkqKFtcIidgXSkvZywgJyQxJDJcXFxcJDMnKS5yZXBsYWNlKC8+Pi9nLCAnXFxcXD5cXFxcPicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRm9yVGV4dFNlbGVjdG9yKHRleHQ6IHN0cmluZyB8IFJlZ0V4cCwgZXhhY3Q6IGJvb2xlYW4pOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIHRleHQgIT09ICdzdHJpbmcnKVxuICAgIHJldHVybiBlc2NhcGVSZWdleEZvclNlbGVjdG9yKHRleHQpO1xuICByZXR1cm4gYCR7SlNPTi5zdHJpbmdpZnkodGV4dCl9JHtleGFjdCA/ICdzJyA6ICdpJ31gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRm9yQXR0cmlidXRlU2VsZWN0b3IodmFsdWU6IHN0cmluZyB8IFJlZ0V4cCwgZXhhY3Q6IGJvb2xlYW4pOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJylcbiAgICByZXR1cm4gZXNjYXBlUmVnZXhGb3JTZWxlY3Rvcih2YWx1ZSk7XG4gIC8vIFRPRE86IHRoaXMgc2hvdWxkIGFjdHVhbGx5IGJlXG4gIC8vICAgY3NzRXNjYXBlKHZhbHVlKS5yZXBsYWNlKC9cXFxcIC9nLCAnICcpXG4gIC8vIEhvd2V2ZXIsIG91ciBhdHRyaWJ1dGUgc2VsZWN0b3JzIGRvIG5vdCBjb25mb3JtIHRvIENTUyBwYXJzaW5nIHNwZWMsXG4gIC8vIHNvIHdlIGVzY2FwZSB0aGVtIGRpZmZlcmVudGx5LlxuICByZXR1cm4gYFwiJHt2YWx1ZS5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpLnJlcGxhY2UoL1tcIl0vZywgJ1xcXFxcIicpfVwiJHtleGFjdCA/ICdzJyA6ICdpJ31gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJpbVN0cmluZyhpbnB1dDogc3RyaW5nLCBjYXA6IG51bWJlciwgc3VmZml4OiBzdHJpbmcgPSAnJyk6IHN0cmluZyB7XG4gIGlmIChpbnB1dC5sZW5ndGggPD0gY2FwKVxuICAgIHJldHVybiBpbnB1dDtcbiAgY29uc3QgY2hhcnMgPSBbLi4uaW5wdXRdO1xuICBpZiAoY2hhcnMubGVuZ3RoID4gY2FwKVxuICAgIHJldHVybiBjaGFycy5zbGljZSgwLCBjYXAgLSBzdWZmaXgubGVuZ3RoKS5qb2luKCcnKSArIHN1ZmZpeDtcbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJpbVN0cmluZ1dpdGhFbGxpcHNpcyhpbnB1dDogc3RyaW5nLCBjYXA6IG51bWJlcik6IHN0cmluZyB7XG4gIHJldHVybiB0cmltU3RyaW5nKGlucHV0LCBjYXAsICdcXHUyMDI2Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoczogc3RyaW5nKSB7XG4gIC8vIEZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9SZWd1bGFyX0V4cHJlc3Npb25zI2VzY2FwaW5nXG4gIHJldHVybiBzLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCAnXFxcXCQmJyk7IC8vICQmIG1lYW5zIHRoZSB3aG9sZSBtYXRjaGVkIHN0cmluZ1xufVxuXG5jb25zdCBlc2NhcGVkID0geyAnJic6ICcmYW1wOycsICc8JzogJyZsdDsnLCAnPic6ICcmZ3Q7JywgJ1wiJzogJyZxdW90OycsICdcXCcnOiAnJiMzOTsnIH07XG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlSFRNTEF0dHJpYnV0ZShzOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gcy5yZXBsYWNlKC9bJjw+XCInXS91ZywgY2hhciA9PiAoZXNjYXBlZCBhcyBhbnkpW2NoYXJdKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVIVE1MKHM6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzLnJlcGxhY2UoL1smPF0vdWcsIGNoYXIgPT4gKGVzY2FwZWQgYXMgYW55KVtjaGFyXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb25nZXN0Q29tbW9uU3Vic3RyaW5nKHMxOiBzdHJpbmcsIHMyOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBuID0gczEubGVuZ3RoO1xuICBjb25zdCBtID0gczIubGVuZ3RoO1xuICBsZXQgbWF4TGVuID0gMDtcbiAgbGV0IGVuZGluZ0luZGV4ID0gMDtcblxuICAvLyBJbml0aWFsaXplIGEgMkQgYXJyYXkgd2l0aCB6ZXJvc1xuICBjb25zdCBkcCA9IEFycmF5KG4gKyAxKVxuICAgICAgLmZpbGwobnVsbClcbiAgICAgIC5tYXAoKCkgPT4gQXJyYXkobSArIDEpLmZpbGwoMCkpO1xuXG4gIC8vIEJ1aWxkIHRoZSBkcCB0YWJsZVxuICBmb3IgKGxldCBpID0gMTsgaSA8PSBuOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMTsgaiA8PSBtOyBqKyspIHtcbiAgICAgIGlmIChzMVtpIC0gMV0gPT09IHMyW2ogLSAxXSkge1xuICAgICAgICBkcFtpXVtqXSA9IGRwW2kgLSAxXVtqIC0gMV0gKyAxO1xuXG4gICAgICAgIGlmIChkcFtpXVtqXSA+IG1heExlbikge1xuICAgICAgICAgIG1heExlbiA9IGRwW2ldW2pdO1xuICAgICAgICAgIGVuZGluZ0luZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEV4dHJhY3QgdGhlIGxvbmdlc3QgY29tbW9uIHN1YnN0cmluZ1xuICByZXR1cm4gczEuc2xpY2UoZW5kaW5nSW5kZXggLSBtYXhMZW4sIGVuZGluZ0luZGV4KTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgIHBhcnNlQXR0cmlidXRlU2VsZWN0b3IsIHBhcnNlU2VsZWN0b3IsIHN0cmluZ2lmeVNlbGVjdG9yIH0gZnJvbSAnLi9zZWxlY3RvclBhcnNlcic7XG5pbXBvcnQgeyBlc2NhcGVXaXRoUXVvdGVzLCBub3JtYWxpemVFc2NhcGVkUmVnZXhRdW90ZXMsIHRvU25ha2VDYXNlLCB0b1RpdGxlQ2FzZSB9IGZyb20gJy4vc3RyaW5nVXRpbHMnO1xuXG5pbXBvcnQgdHlwZSB7IE5lc3RlZFNlbGVjdG9yQm9keSB9IGZyb20gJy4vc2VsZWN0b3JQYXJzZXInO1xuaW1wb3J0IHR5cGUgeyBQYXJzZWRTZWxlY3RvciB9IGZyb20gJy4vc2VsZWN0b3JQYXJzZXInO1xuXG5leHBvcnQgdHlwZSBMYW5ndWFnZSA9ICdqYXZhc2NyaXB0JyB8ICdweXRob24nIHwgJ2phdmEnIHwgJ2NzaGFycCcgfCAnanNvbmwnO1xuZXhwb3J0IHR5cGUgTG9jYXRvclR5cGUgPSAnZGVmYXVsdCcgfCAncm9sZScgfCAndGV4dCcgfCAnbGFiZWwnIHwgJ3BsYWNlaG9sZGVyJyB8ICdhbHQnIHwgJ3RpdGxlJyB8ICd0ZXN0LWlkJyB8ICdudGgnIHwgJ2ZpcnN0JyB8ICdsYXN0JyB8ICd2aXNpYmxlJyB8ICdoYXMtdGV4dCcgfCAnaGFzLW5vdC10ZXh0JyB8ICdoYXMnIHwgJ2hhc05vdCcgfCAnZnJhbWUnIHwgJ2ZyYW1lLWxvY2F0b3InIHwgJ2FuZCcgfCAnb3InIHwgJ2NoYWluJztcbmV4cG9ydCB0eXBlIExvY2F0b3JCYXNlID0gJ3BhZ2UnIHwgJ2xvY2F0b3InIHwgJ2ZyYW1lLWxvY2F0b3InO1xuZXhwb3J0IHR5cGUgUXVvdGUgPSAnXFwnJyB8ICdcIicgfCAnYCc7XG5cbnR5cGUgTG9jYXRvck9wdGlvbnMgPSB7XG4gIGF0dHJzPzogeyBuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBib29sZWFuIHwgbnVtYmVyIH1bXSxcbiAgZXhhY3Q/OiBib29sZWFuLFxuICBuYW1lPzogc3RyaW5nIHwgUmVnRXhwLFxuICBoYXNUZXh0Pzogc3RyaW5nIHwgUmVnRXhwLFxuICBoYXNOb3RUZXh0Pzogc3RyaW5nIHwgUmVnRXhwLFxufTtcbmV4cG9ydCBpbnRlcmZhY2UgTG9jYXRvckZhY3Rvcnkge1xuICBnZW5lcmF0ZUxvY2F0b3IoYmFzZTogTG9jYXRvckJhc2UsIGtpbmQ6IExvY2F0b3JUeXBlLCBib2R5OiBzdHJpbmcgfCBSZWdFeHAsIG9wdGlvbnM/OiBMb2NhdG9yT3B0aW9ucyk6IHN0cmluZztcbiAgY2hhaW5Mb2NhdG9ycyhsb2NhdG9yczogc3RyaW5nW10pOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc0xvY2F0b3JEZXNjcmlwdGlvbihsYW5nOiBMYW5ndWFnZSwgc2VsZWN0b3I6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgY29uc3QgbGFzdFBhcnQgPSBwYXJzZWQucGFydHNbcGFyc2VkLnBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0UGFydD8ubmFtZSA9PT0gJ2ludGVybmFsOmRlc2NyaWJlJykge1xuICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBKU09OLnBhcnNlKGxhc3RQYXJ0LmJvZHkgYXMgc3RyaW5nKTtcbiAgICAgIGlmICh0eXBlb2YgZGVzY3JpcHRpb24gPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgfVxuICAgIHJldHVybiBpbm5lckFzTG9jYXRvcnMobmV3IGdlbmVyYXRvcnNbbGFuZ10oKSwgcGFyc2VkLCBmYWxzZSwgMSlbMF07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBUb2xlcmF0ZSBpbnZhbGlkIGlucHV0LlxuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNMb2NhdG9yKGxhbmc6IExhbmd1YWdlLCBzZWxlY3Rvcjogc3RyaW5nLCBpc0ZyYW1lTG9jYXRvcjogYm9vbGVhbiA9IGZhbHNlKTogc3RyaW5nIHtcbiAgcmV0dXJuIGFzTG9jYXRvcnMobGFuZywgc2VsZWN0b3IsIGlzRnJhbWVMb2NhdG9yLCAxKVswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzTG9jYXRvcnMobGFuZzogTGFuZ3VhZ2UsIHNlbGVjdG9yOiBzdHJpbmcsIGlzRnJhbWVMb2NhdG9yOiBib29sZWFuID0gZmFsc2UsIG1heE91dHB1dFNpemUgPSAyMCwgcHJlZmVycmVkUXVvdGU/OiBRdW90ZSk6IHN0cmluZ1tdIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaW5uZXJBc0xvY2F0b3JzKG5ldyBnZW5lcmF0b3JzW2xhbmddKHByZWZlcnJlZFF1b3RlKSwgcGFyc2VTZWxlY3RvcihzZWxlY3RvciksIGlzRnJhbWVMb2NhdG9yLCBtYXhPdXRwdXRTaXplKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFRvbGVyYXRlIGludmFsaWQgaW5wdXQuXG4gICAgcmV0dXJuIFtzZWxlY3Rvcl07XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5uZXJBc0xvY2F0b3JzKGZhY3Rvcnk6IExvY2F0b3JGYWN0b3J5LCBwYXJzZWQ6IFBhcnNlZFNlbGVjdG9yLCBpc0ZyYW1lTG9jYXRvcjogYm9vbGVhbiA9IGZhbHNlLCBtYXhPdXRwdXRTaXplID0gMjApOiBzdHJpbmdbXSB7XG4gIGNvbnN0IHBhcnRzID0gWy4uLnBhcnNlZC5wYXJ0c107XG4gIGNvbnN0IHRva2Vuczogc3RyaW5nW11bXSA9IFtdO1xuICBsZXQgbmV4dEJhc2U6IExvY2F0b3JCYXNlID0gaXNGcmFtZUxvY2F0b3IgPyAnZnJhbWUtbG9jYXRvcicgOiAncGFnZSc7XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBwYXJ0ID0gcGFydHNbaW5kZXhdO1xuICAgIGNvbnN0IGJhc2UgPSBuZXh0QmFzZTtcbiAgICBuZXh0QmFzZSA9ICdsb2NhdG9yJztcblxuICAgIGlmIChwYXJ0Lm5hbWUgPT09ICdpbnRlcm5hbDpkZXNjcmliZScpXG4gICAgICBjb250aW51ZTtcbiAgICBpZiAocGFydC5uYW1lID09PSAnbnRoJykge1xuICAgICAgaWYgKHBhcnQuYm9keSA9PT0gJzAnKVxuICAgICAgICB0b2tlbnMucHVzaChbZmFjdG9yeS5nZW5lcmF0ZUxvY2F0b3IoYmFzZSwgJ2ZpcnN0JywgJycpLCBmYWN0b3J5LmdlbmVyYXRlTG9jYXRvcihiYXNlLCAnbnRoJywgJzAnKV0pO1xuICAgICAgZWxzZSBpZiAocGFydC5ib2R5ID09PSAnLTEnKVxuICAgICAgICB0b2tlbnMucHVzaChbZmFjdG9yeS5nZW5lcmF0ZUxvY2F0b3IoYmFzZSwgJ2xhc3QnLCAnJyksIGZhY3RvcnkuZ2VuZXJhdGVMb2NhdG9yKGJhc2UsICdudGgnLCAnLTEnKV0pO1xuICAgICAgZWxzZVxuICAgICAgICB0b2tlbnMucHVzaChbZmFjdG9yeS5nZW5lcmF0ZUxvY2F0b3IoYmFzZSwgJ250aCcsIHBhcnQuYm9keSBhcyBzdHJpbmcpXSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHBhcnQubmFtZSA9PT0gJ3Zpc2libGUnKSB7XG4gICAgICB0b2tlbnMucHVzaChbZmFjdG9yeS5nZW5lcmF0ZUxvY2F0b3IoYmFzZSwgJ3Zpc2libGUnLCBwYXJ0LmJvZHkgYXMgc3RyaW5nKSwgZmFjdG9yeS5nZW5lcmF0ZUxvY2F0b3IoYmFzZSwgJ2RlZmF1bHQnLCBgdmlzaWJsZT0ke3BhcnQuYm9keX1gKV0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChwYXJ0Lm5hbWUgPT09ICdpbnRlcm5hbDp0ZXh0Jykge1xuICAgICAgY29uc3QgeyBleGFjdCwgdGV4dCB9ID0gZGV0ZWN0RXhhY3QocGFydC5ib2R5IGFzIHN0cmluZyk7XG4gICAgICB0b2tlbnMucHVzaChbZmFjdG9yeS5nZW5lcmF0ZUxvY2F0b3IoYmFzZSwgJ3RleHQnLCB0ZXh0LCB7IGV4YWN0IH0pXSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHBhcnQubmFtZSA9PT0gJ2ludGVybmFsOmhhcy10ZXh0Jykge1xuICAgICAgY29uc3QgeyBleGFjdCwgdGV4dCB9ID0gZGV0ZWN0RXhhY3QocGFydC5ib2R5IGFzIHN0cmluZyk7XG4gICAgICAvLyBUaGVyZSBpcyBubyBsb2NhdG9yIGVxdWl2YWxlbnQgZm9yIHN0cmljdCBoYXMtdGV4dCwgbGVhdmUgaXQgYXMgaXMuXG4gICAgICBpZiAoIWV4YWN0KSB7XG4gICAgICAgIHRva2Vucy5wdXNoKFtmYWN0b3J5LmdlbmVyYXRlTG9jYXRvcihiYXNlLCAnaGFzLXRleHQnLCB0ZXh0LCB7IGV4YWN0IH0pXSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFydC5uYW1lID09PSAnaW50ZXJuYWw6aGFzLW5vdC10ZXh0Jykge1xuICAgICAgY29uc3QgeyBleGFjdCwgdGV4dCB9ID0gZGV0ZWN0RXhhY3QocGFydC5ib2R5IGFzIHN0cmluZyk7XG4gICAgICAvLyBUaGVyZSBpcyBubyBsb2NhdG9yIGVxdWl2YWxlbnQgZm9yIHN0cmljdCBoYXMtbm90LXRleHQsIGxlYXZlIGl0IGFzIGlzLlxuICAgICAgaWYgKCFleGFjdCkge1xuICAgICAgICB0b2tlbnMucHVzaChbZmFjdG9yeS5nZW5lcmF0ZUxvY2F0b3IoYmFzZSwgJ2hhcy1ub3QtdGV4dCcsIHRleHQsIHsgZXhhY3QgfSldKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJ0Lm5hbWUgPT09ICdpbnRlcm5hbDpoYXMnKSB7XG4gICAgICBjb25zdCBpbm5lcnMgPSBpbm5lckFzTG9jYXRvcnMoZmFjdG9yeSwgKHBhcnQuYm9keSBhcyBOZXN0ZWRTZWxlY3RvckJvZHkpLnBhcnNlZCwgZmFsc2UsIG1heE91dHB1dFNpemUpO1xuICAgICAgdG9rZW5zLnB1c2goaW5uZXJzLm1hcChpbm5lciA9PiBmYWN0b3J5LmdlbmVyYXRlTG9jYXRvcihiYXNlLCAnaGFzJywgaW5uZXIpKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHBhcnQubmFtZSA9PT0gJ2ludGVybmFsOmhhcy1ub3QnKSB7XG4gICAgICBjb25zdCBpbm5lcnMgPSBpbm5lckFzTG9jYXRvcnMoZmFjdG9yeSwgKHBhcnQuYm9keSBhcyBOZXN0ZWRTZWxlY3RvckJvZHkpLnBhcnNlZCwgZmFsc2UsIG1heE91dHB1dFNpemUpO1xuICAgICAgdG9rZW5zLnB1c2goaW5uZXJzLm1hcChpbm5lciA9PiBmYWN0b3J5LmdlbmVyYXRlTG9jYXRvcihiYXNlLCAnaGFzTm90JywgaW5uZXIpKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHBhcnQubmFtZSA9PT0gJ2ludGVybmFsOmFuZCcpIHtcbiAgICAgIGNvbnN0IGlubmVycyA9IGlubmVyQXNMb2NhdG9ycyhmYWN0b3J5LCAocGFydC5ib2R5IGFzIE5lc3RlZFNlbGVjdG9yQm9keSkucGFyc2VkLCBmYWxzZSwgbWF4T3V0cHV0U2l6ZSk7XG4gICAgICB0b2tlbnMucHVzaChpbm5lcnMubWFwKGlubmVyID0+IGZhY3RvcnkuZ2VuZXJhdGVMb2NhdG9yKGJhc2UsICdhbmQnLCBpbm5lcikpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocGFydC5uYW1lID09PSAnaW50ZXJuYWw6b3InKSB7XG4gICAgICBjb25zdCBpbm5lcnMgPSBpbm5lckFzTG9jYXRvcnMoZmFjdG9yeSwgKHBhcnQuYm9keSBhcyBOZXN0ZWRTZWxlY3RvckJvZHkpLnBhcnNlZCwgZmFsc2UsIG1heE91dHB1dFNpemUpO1xuICAgICAgdG9rZW5zLnB1c2goaW5uZXJzLm1hcChpbm5lciA9PiBmYWN0b3J5LmdlbmVyYXRlTG9jYXRvcihiYXNlLCAnb3InLCBpbm5lcikpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocGFydC5uYW1lID09PSAnaW50ZXJuYWw6Y2hhaW4nKSB7XG4gICAgICBjb25zdCBpbm5lcnMgPSBpbm5lckFzTG9jYXRvcnMoZmFjdG9yeSwgKHBhcnQuYm9keSBhcyBOZXN0ZWRTZWxlY3RvckJvZHkpLnBhcnNlZCwgZmFsc2UsIG1heE91dHB1dFNpemUpO1xuICAgICAgdG9rZW5zLnB1c2goaW5uZXJzLm1hcChpbm5lciA9PiBmYWN0b3J5LmdlbmVyYXRlTG9jYXRvcihiYXNlLCAnY2hhaW4nLCBpbm5lcikpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocGFydC5uYW1lID09PSAnaW50ZXJuYWw6bGFiZWwnKSB7XG4gICAgICBjb25zdCB7IGV4YWN0LCB0ZXh0IH0gPSBkZXRlY3RFeGFjdChwYXJ0LmJvZHkgYXMgc3RyaW5nKTtcbiAgICAgIHRva2Vucy5wdXNoKFtmYWN0b3J5LmdlbmVyYXRlTG9jYXRvcihiYXNlLCAnbGFiZWwnLCB0ZXh0LCB7IGV4YWN0IH0pXSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHBhcnQubmFtZSA9PT0gJ2ludGVybmFsOnJvbGUnKSB7XG4gICAgICBjb25zdCBhdHRyU2VsZWN0b3IgPSBwYXJzZUF0dHJpYnV0ZVNlbGVjdG9yKHBhcnQuYm9keSBhcyBzdHJpbmcsIHRydWUpO1xuICAgICAgY29uc3Qgb3B0aW9uczogTG9jYXRvck9wdGlvbnMgPSB7IGF0dHJzOiBbXSB9O1xuICAgICAgZm9yIChjb25zdCBhdHRyIG9mIGF0dHJTZWxlY3Rvci5hdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmIChhdHRyLm5hbWUgPT09ICduYW1lJykge1xuICAgICAgICAgIG9wdGlvbnMuZXhhY3QgPSBhdHRyLmNhc2VTZW5zaXRpdmU7XG4gICAgICAgICAgb3B0aW9ucy5uYW1lID0gYXR0ci52YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYXR0ci5uYW1lID09PSAnbGV2ZWwnICYmIHR5cGVvZiBhdHRyLnZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIGF0dHIudmFsdWUgPSArYXR0ci52YWx1ZTtcbiAgICAgICAgICBvcHRpb25zLmF0dHJzIS5wdXNoKHsgbmFtZTogYXR0ci5uYW1lID09PSAnaW5jbHVkZS1oaWRkZW4nID8gJ2luY2x1ZGVIaWRkZW4nIDogYXR0ci5uYW1lLCB2YWx1ZTogYXR0ci52YWx1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdG9rZW5zLnB1c2goW2ZhY3RvcnkuZ2VuZXJhdGVMb2NhdG9yKGJhc2UsICdyb2xlJywgYXR0clNlbGVjdG9yLm5hbWUsIG9wdGlvbnMpXSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHBhcnQubmFtZSA9PT0gJ2ludGVybmFsOnRlc3RpZCcpIHtcbiAgICAgIGNvbnN0IGF0dHJTZWxlY3RvciA9IHBhcnNlQXR0cmlidXRlU2VsZWN0b3IocGFydC5ib2R5IGFzIHN0cmluZywgdHJ1ZSk7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSBhdHRyU2VsZWN0b3IuYXR0cmlidXRlc1swXTtcbiAgICAgIHRva2Vucy5wdXNoKFtmYWN0b3J5LmdlbmVyYXRlTG9jYXRvcihiYXNlLCAndGVzdC1pZCcsIHZhbHVlKV0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChwYXJ0Lm5hbWUgPT09ICdpbnRlcm5hbDphdHRyJykge1xuICAgICAgY29uc3QgYXR0clNlbGVjdG9yID0gcGFyc2VBdHRyaWJ1dGVTZWxlY3RvcihwYXJ0LmJvZHkgYXMgc3RyaW5nLCB0cnVlKTtcbiAgICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUsIGNhc2VTZW5zaXRpdmUgfSA9IGF0dHJTZWxlY3Rvci5hdHRyaWJ1dGVzWzBdO1xuICAgICAgY29uc3QgdGV4dCA9IHZhbHVlIGFzIHN0cmluZyB8IFJlZ0V4cDtcbiAgICAgIGNvbnN0IGV4YWN0ID0gISFjYXNlU2Vuc2l0aXZlO1xuICAgICAgaWYgKG5hbWUgPT09ICdwbGFjZWhvbGRlcicpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goW2ZhY3RvcnkuZ2VuZXJhdGVMb2NhdG9yKGJhc2UsICdwbGFjZWhvbGRlcicsIHRleHQsIHsgZXhhY3QgfSldKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PT0gJ2FsdCcpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goW2ZhY3RvcnkuZ2VuZXJhdGVMb2NhdG9yKGJhc2UsICdhbHQnLCB0ZXh0LCB7IGV4YWN0IH0pXSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgPT09ICd0aXRsZScpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goW2ZhY3RvcnkuZ2VuZXJhdGVMb2NhdG9yKGJhc2UsICd0aXRsZScsIHRleHQsIHsgZXhhY3QgfSldKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJ0Lm5hbWUgPT09ICdpbnRlcm5hbDpjb250cm9sJyAmJiAocGFydC5ib2R5IGFzIHN0cmluZykgPT09ICdlbnRlci1mcmFtZScpIHtcbiAgICAgIC8vIHRyYW5zZm9ybSBsYXN0IHRva2VucyBmcm9tIGAke3NlbGVjdG9yfWAgaW50byBgJHtzZWxlY3Rvcn0uY29udGVudEZyYW1lKClgIGFuZCBgZnJhbWVMb2NhdG9yKCR7c2VsZWN0b3J9KWBcbiAgICAgIGNvbnN0IGxhc3RUb2tlbnMgPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgY29uc3QgbGFzdFBhcnQgPSBwYXJ0c1tpbmRleCAtIDFdO1xuXG4gICAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IGxhc3RUb2tlbnMubWFwKHRva2VuID0+IGZhY3RvcnkuY2hhaW5Mb2NhdG9ycyhbdG9rZW4sIGZhY3RvcnkuZ2VuZXJhdGVMb2NhdG9yKGJhc2UsICdmcmFtZScsICcnKV0pKTtcbiAgICAgIGlmIChbJ3hwYXRoJywgJ2NzcyddLmluY2x1ZGVzKGxhc3RQYXJ0Lm5hbWUpKSB7XG4gICAgICAgIHRyYW5zZm9ybWVkLnB1c2goXG4gICAgICAgICAgICBmYWN0b3J5LmdlbmVyYXRlTG9jYXRvcihiYXNlLCAnZnJhbWUtbG9jYXRvcicsIHN0cmluZ2lmeVNlbGVjdG9yKHsgcGFydHM6IFtsYXN0UGFydF0gfSkpLFxuICAgICAgICAgICAgZmFjdG9yeS5nZW5lcmF0ZUxvY2F0b3IoYmFzZSwgJ2ZyYW1lLWxvY2F0b3InLCBzdHJpbmdpZnlTZWxlY3Rvcih7IHBhcnRzOiBbbGFzdFBhcnRdIH0sIHRydWUpKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBsYXN0VG9rZW5zLnNwbGljZSgwLCBsYXN0VG9rZW5zLmxlbmd0aCwgLi4udHJhbnNmb3JtZWQpO1xuICAgICAgbmV4dEJhc2UgPSAnZnJhbWUtbG9jYXRvcic7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0UGFydCA9IHBhcnRzW2luZGV4ICsgMV07XG5cbiAgICBjb25zdCBzZWxlY3RvclBhcnQgPSBzdHJpbmdpZnlTZWxlY3Rvcih7IHBhcnRzOiBbcGFydF0gfSk7XG4gICAgY29uc3QgbG9jYXRvclBhcnQgPSBmYWN0b3J5LmdlbmVyYXRlTG9jYXRvcihiYXNlLCAnZGVmYXVsdCcsIHNlbGVjdG9yUGFydCk7XG5cbiAgICBpZiAobmV4dFBhcnQgJiYgWydpbnRlcm5hbDpoYXMtdGV4dCcsICdpbnRlcm5hbDpoYXMtbm90LXRleHQnXS5pbmNsdWRlcyhuZXh0UGFydC5uYW1lKSkge1xuICAgICAgY29uc3QgeyBleGFjdCwgdGV4dCB9ID0gZGV0ZWN0RXhhY3QobmV4dFBhcnQuYm9keSBhcyBzdHJpbmcpO1xuICAgICAgLy8gVGhlcmUgaXMgbm8gbG9jYXRvciBlcXVpdmFsZW50IGZvciBzdHJpY3QgaGFzLXRleHQgYW5kIGhhcy1ub3QtdGV4dCwgbGVhdmUgaXQgYXMgaXMuXG4gICAgICBpZiAoIWV4YWN0KSB7XG4gICAgICAgIGNvbnN0IG5leHRMb2NhdG9yUGFydCA9IGZhY3RvcnkuZ2VuZXJhdGVMb2NhdG9yKCdsb2NhdG9yJywgbmV4dFBhcnQubmFtZSA9PT0gJ2ludGVybmFsOmhhcy10ZXh0JyA/ICdoYXMtdGV4dCcgOiAnaGFzLW5vdC10ZXh0JywgdGV4dCwgeyBleGFjdCB9KTtcbiAgICAgICAgY29uc3Qgb3B0aW9uczogTG9jYXRvck9wdGlvbnMgPSB7fTtcbiAgICAgICAgaWYgKG5leHRQYXJ0Lm5hbWUgPT09ICdpbnRlcm5hbDpoYXMtdGV4dCcpXG4gICAgICAgICAgb3B0aW9ucy5oYXNUZXh0ID0gdGV4dDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIG9wdGlvbnMuaGFzTm90VGV4dCA9IHRleHQ7XG4gICAgICAgIGNvbnN0IGNvbWJpbmVkUGFydCA9IGZhY3RvcnkuZ2VuZXJhdGVMb2NhdG9yKGJhc2UsICdkZWZhdWx0Jywgc2VsZWN0b3JQYXJ0LCBvcHRpb25zKTtcbiAgICAgICAgLy8gVHdvIG9wdGlvbnM6XG4gICAgICAgIC8vIC0gbG9jYXRvcignZGl2JykuZmlsdGVyKHsgaGFzVGV4dDogJ2ZvbycgfSlcbiAgICAgICAgLy8gLSBsb2NhdG9yKCdkaXYnLCB7IGhhc1RleHQ6ICdmb28nIH0pXG4gICAgICAgIHRva2Vucy5wdXNoKFtmYWN0b3J5LmNoYWluTG9jYXRvcnMoW2xvY2F0b3JQYXJ0LCBuZXh0TG9jYXRvclBhcnRdKSwgY29tYmluZWRQYXJ0XSk7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNlbGVjdG9ycyBjYW4gYmUgcHJlZml4ZWQgd2l0aCBlbmdpbmUgbmFtZSwgZS5nLiB4cGF0aD0vL2Zvb1xuICAgIGxldCBsb2NhdG9yUGFydFdpdGhFbmdpbmU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBpZiAoWyd4cGF0aCcsICdjc3MnXS5pbmNsdWRlcyhwYXJ0Lm5hbWUpKSB7XG4gICAgICBjb25zdCBzZWxlY3RvclBhcnQgPSBzdHJpbmdpZnlTZWxlY3Rvcih7IHBhcnRzOiBbcGFydF0gfSwgLyogZm9yY2VFbmdpbmVOYW1lICovIHRydWUpO1xuICAgICAgbG9jYXRvclBhcnRXaXRoRW5naW5lID0gZmFjdG9yeS5nZW5lcmF0ZUxvY2F0b3IoYmFzZSwgJ2RlZmF1bHQnLCBzZWxlY3RvclBhcnQpO1xuICAgIH1cblxuICAgIHRva2Vucy5wdXNoKFtsb2NhdG9yUGFydCwgbG9jYXRvclBhcnRXaXRoRW5naW5lXS5maWx0ZXIoQm9vbGVhbikgYXMgc3RyaW5nW10pO1xuICB9XG5cbiAgcmV0dXJuIGNvbWJpbmVUb2tlbnMoZmFjdG9yeSwgdG9rZW5zLCBtYXhPdXRwdXRTaXplKTtcbn1cblxuZnVuY3Rpb24gY29tYmluZVRva2VucyhmYWN0b3J5OiBMb2NhdG9yRmFjdG9yeSwgdG9rZW5zOiBzdHJpbmdbXVtdLCBtYXhPdXRwdXRTaXplOiBudW1iZXIpOiBzdHJpbmdbXSB7XG4gIGNvbnN0IGN1cnJlbnRUb2tlbnMgPSB0b2tlbnMubWFwKCgpID0+ICcnKTtcbiAgY29uc3QgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0IHZpc2l0ID0gKGluZGV4OiBudW1iZXIpID0+IHtcbiAgICBpZiAoaW5kZXggPT09IHRva2Vucy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGZhY3RvcnkuY2hhaW5Mb2NhdG9ycyhjdXJyZW50VG9rZW5zKSk7XG4gICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA8IG1heE91dHB1dFNpemU7XG4gICAgfVxuICAgIGZvciAoY29uc3QgdGFrZW4gb2YgdG9rZW5zW2luZGV4XSkge1xuICAgICAgY3VycmVudFRva2Vuc1tpbmRleF0gPSB0YWtlbjtcbiAgICAgIGlmICghdmlzaXQoaW5kZXggKyAxKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICB2aXNpdCgwKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZGV0ZWN0RXhhY3QodGV4dDogc3RyaW5nKTogeyBleGFjdD86IGJvb2xlYW4sIHRleHQ6IHN0cmluZyB8IFJlZ0V4cCB9IHtcbiAgbGV0IGV4YWN0ID0gZmFsc2U7XG4gIGNvbnN0IG1hdGNoID0gdGV4dC5tYXRjaCgvXlxcLyguKilcXC8oW2lnbV0qKSQvKTtcbiAgaWYgKG1hdGNoKVxuICAgIHJldHVybiB7IHRleHQ6IG5ldyBSZWdFeHAobWF0Y2hbMV0sIG1hdGNoWzJdKSB9O1xuICBpZiAodGV4dC5lbmRzV2l0aCgnXCInKSkge1xuICAgIHRleHQgPSBKU09OLnBhcnNlKHRleHQpO1xuICAgIGV4YWN0ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0ZXh0LmVuZHNXaXRoKCdcInMnKSkge1xuICAgIHRleHQgPSBKU09OLnBhcnNlKHRleHQuc3Vic3RyaW5nKDAsIHRleHQubGVuZ3RoIC0gMSkpO1xuICAgIGV4YWN0ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0ZXh0LmVuZHNXaXRoKCdcImknKSkge1xuICAgIHRleHQgPSBKU09OLnBhcnNlKHRleHQuc3Vic3RyaW5nKDAsIHRleHQubGVuZ3RoIC0gMSkpO1xuICAgIGV4YWN0ID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHsgZXhhY3QsIHRleHQgfTtcbn1cblxuZXhwb3J0IGNsYXNzIEphdmFTY3JpcHRMb2NhdG9yRmFjdG9yeSBpbXBsZW1lbnRzIExvY2F0b3JGYWN0b3J5IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwcmVmZXJyZWRRdW90ZT86IFF1b3RlKSB7fVxuXG4gIGdlbmVyYXRlTG9jYXRvcihiYXNlOiBMb2NhdG9yQmFzZSwga2luZDogTG9jYXRvclR5cGUsIGJvZHk6IHN0cmluZyB8IFJlZ0V4cCwgb3B0aW9uczogTG9jYXRvck9wdGlvbnMgPSB7fSk6IHN0cmluZyB7XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlICdkZWZhdWx0JzpcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzVGV4dCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHJldHVybiBgbG9jYXRvcigke3RoaXMucXVvdGUoYm9keSBhcyBzdHJpbmcpfSwgeyBoYXNUZXh0OiAke3RoaXMudG9IYXNUZXh0KG9wdGlvbnMuaGFzVGV4dCl9IH0pYDtcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzTm90VGV4dCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHJldHVybiBgbG9jYXRvcigke3RoaXMucXVvdGUoYm9keSBhcyBzdHJpbmcpfSwgeyBoYXNOb3RUZXh0OiAke3RoaXMudG9IYXNUZXh0KG9wdGlvbnMuaGFzTm90VGV4dCl9IH0pYDtcbiAgICAgICAgcmV0dXJuIGBsb2NhdG9yKCR7dGhpcy5xdW90ZShib2R5IGFzIHN0cmluZyl9KWA7XG4gICAgICBjYXNlICdmcmFtZS1sb2NhdG9yJzpcbiAgICAgICAgcmV0dXJuIGBmcmFtZUxvY2F0b3IoJHt0aGlzLnF1b3RlKGJvZHkgYXMgc3RyaW5nKX0pYDtcbiAgICAgIGNhc2UgJ2ZyYW1lJzpcbiAgICAgICAgcmV0dXJuIGBjb250ZW50RnJhbWUoKWA7XG4gICAgICBjYXNlICdudGgnOlxuICAgICAgICByZXR1cm4gYG50aCgke2JvZHl9KWA7XG4gICAgICBjYXNlICdmaXJzdCc6XG4gICAgICAgIHJldHVybiBgZmlyc3QoKWA7XG4gICAgICBjYXNlICdsYXN0JzpcbiAgICAgICAgcmV0dXJuIGBsYXN0KClgO1xuICAgICAgY2FzZSAndmlzaWJsZSc6XG4gICAgICAgIHJldHVybiBgZmlsdGVyKHsgdmlzaWJsZTogJHtib2R5ID09PSAndHJ1ZScgPyAndHJ1ZScgOiAnZmFsc2UnfSB9KWA7XG4gICAgICBjYXNlICdyb2xlJzpcbiAgICAgICAgY29uc3QgYXR0cnM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGlmIChpc1JlZ0V4cChvcHRpb25zLm5hbWUpKSB7XG4gICAgICAgICAgYXR0cnMucHVzaChgbmFtZTogJHt0aGlzLnJlZ2V4VG9Tb3VyY2VTdHJpbmcob3B0aW9ucy5uYW1lKX1gKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5uYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGF0dHJzLnB1c2goYG5hbWU6ICR7dGhpcy5xdW90ZShvcHRpb25zLm5hbWUpfWApO1xuICAgICAgICAgIGlmIChvcHRpb25zLmV4YWN0KVxuICAgICAgICAgICAgYXR0cnMucHVzaChgZXhhY3Q6IHRydWVgKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHsgbmFtZSwgdmFsdWUgfSBvZiBvcHRpb25zLmF0dHJzISlcbiAgICAgICAgICBhdHRycy5wdXNoKGAke25hbWV9OiAke3R5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB0aGlzLnF1b3RlKHZhbHVlKSA6IHZhbHVlfWApO1xuICAgICAgICBjb25zdCBhdHRyU3RyaW5nID0gYXR0cnMubGVuZ3RoID8gYCwgeyAke2F0dHJzLmpvaW4oJywgJyl9IH1gIDogJyc7XG4gICAgICAgIHJldHVybiBgZ2V0QnlSb2xlKCR7dGhpcy5xdW90ZShib2R5IGFzIHN0cmluZyl9JHthdHRyU3RyaW5nfSlgO1xuICAgICAgY2FzZSAnaGFzLXRleHQnOlxuICAgICAgICByZXR1cm4gYGZpbHRlcih7IGhhc1RleHQ6ICR7dGhpcy50b0hhc1RleHQoYm9keSl9IH0pYDtcbiAgICAgIGNhc2UgJ2hhcy1ub3QtdGV4dCc6XG4gICAgICAgIHJldHVybiBgZmlsdGVyKHsgaGFzTm90VGV4dDogJHt0aGlzLnRvSGFzVGV4dChib2R5KX0gfSlgO1xuICAgICAgY2FzZSAnaGFzJzpcbiAgICAgICAgcmV0dXJuIGBmaWx0ZXIoeyBoYXM6ICR7Ym9keX0gfSlgO1xuICAgICAgY2FzZSAnaGFzTm90JzpcbiAgICAgICAgcmV0dXJuIGBmaWx0ZXIoeyBoYXNOb3Q6ICR7Ym9keX0gfSlgO1xuICAgICAgY2FzZSAnYW5kJzpcbiAgICAgICAgcmV0dXJuIGBhbmQoJHtib2R5fSlgO1xuICAgICAgY2FzZSAnb3InOlxuICAgICAgICByZXR1cm4gYG9yKCR7Ym9keX0pYDtcbiAgICAgIGNhc2UgJ2NoYWluJzpcbiAgICAgICAgcmV0dXJuIGBsb2NhdG9yKCR7Ym9keX0pYDtcbiAgICAgIGNhc2UgJ3Rlc3QtaWQnOlxuICAgICAgICByZXR1cm4gYGdldEJ5VGVzdElkKCR7dGhpcy50b1Rlc3RJZFZhbHVlKGJvZHkpfSlgO1xuICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgIHJldHVybiB0aGlzLnRvQ2FsbFdpdGhFeGFjdCgnZ2V0QnlUZXh0JywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGNhc2UgJ2FsdCc6XG4gICAgICAgIHJldHVybiB0aGlzLnRvQ2FsbFdpdGhFeGFjdCgnZ2V0QnlBbHRUZXh0JywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGNhc2UgJ3BsYWNlaG9sZGVyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMudG9DYWxsV2l0aEV4YWN0KCdnZXRCeVBsYWNlaG9sZGVyJywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGNhc2UgJ2xhYmVsJzpcbiAgICAgICAgcmV0dXJuIHRoaXMudG9DYWxsV2l0aEV4YWN0KCdnZXRCeUxhYmVsJywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGNhc2UgJ3RpdGxlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMudG9DYWxsV2l0aEV4YWN0KCdnZXRCeVRpdGxlJywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBzZWxlY3RvciBraW5kICcgKyBraW5kKTtcbiAgICB9XG4gIH1cblxuICBjaGFpbkxvY2F0b3JzKGxvY2F0b3JzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGxvY2F0b3JzLmpvaW4oJy4nKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVnZXhUb1NvdXJjZVN0cmluZyhyZTogUmVnRXhwKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZUVzY2FwZWRSZWdleFF1b3RlcyhTdHJpbmcocmUpKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9DYWxsV2l0aEV4YWN0KG1ldGhvZDogc3RyaW5nLCBib2R5OiBzdHJpbmcgfCBSZWdFeHAsIGV4YWN0PzogYm9vbGVhbikge1xuICAgIGlmIChpc1JlZ0V4cChib2R5KSlcbiAgICAgIHJldHVybiBgJHttZXRob2R9KCR7dGhpcy5yZWdleFRvU291cmNlU3RyaW5nKGJvZHkpfSlgO1xuICAgIHJldHVybiBleGFjdCA/IGAke21ldGhvZH0oJHt0aGlzLnF1b3RlKGJvZHkpfSwgeyBleGFjdDogdHJ1ZSB9KWAgOiBgJHttZXRob2R9KCR7dGhpcy5xdW90ZShib2R5KX0pYDtcbiAgfVxuXG4gIHByaXZhdGUgdG9IYXNUZXh0KGJvZHk6IHN0cmluZyB8IFJlZ0V4cCkge1xuICAgIGlmIChpc1JlZ0V4cChib2R5KSlcbiAgICAgIHJldHVybiB0aGlzLnJlZ2V4VG9Tb3VyY2VTdHJpbmcoYm9keSk7XG4gICAgcmV0dXJuIHRoaXMucXVvdGUoYm9keSk7XG4gIH1cblxuICBwcml2YXRlIHRvVGVzdElkVmFsdWUodmFsdWU6IHN0cmluZyB8IFJlZ0V4cCk6IHN0cmluZyB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSlcbiAgICAgIHJldHVybiB0aGlzLnJlZ2V4VG9Tb3VyY2VTdHJpbmcodmFsdWUpO1xuICAgIHJldHVybiB0aGlzLnF1b3RlKHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgcXVvdGUodGV4dDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGVzY2FwZVdpdGhRdW90ZXModGV4dCwgdGhpcy5wcmVmZXJyZWRRdW90ZSA/PyAnXFwnJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFB5dGhvbkxvY2F0b3JGYWN0b3J5IGltcGxlbWVudHMgTG9jYXRvckZhY3Rvcnkge1xuICBnZW5lcmF0ZUxvY2F0b3IoYmFzZTogTG9jYXRvckJhc2UsIGtpbmQ6IExvY2F0b3JUeXBlLCBib2R5OiBzdHJpbmcgfCBSZWdFeHAsIG9wdGlvbnM6IExvY2F0b3JPcHRpb25zID0ge30pOiBzdHJpbmcge1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSAnZGVmYXVsdCc6XG4gICAgICAgIGlmIChvcHRpb25zLmhhc1RleHQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICByZXR1cm4gYGxvY2F0b3IoJHt0aGlzLnF1b3RlKGJvZHkgYXMgc3RyaW5nKX0sIGhhc190ZXh0PSR7dGhpcy50b0hhc1RleHQob3B0aW9ucy5oYXNUZXh0KX0pYDtcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzTm90VGV4dCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHJldHVybiBgbG9jYXRvcigke3RoaXMucXVvdGUoYm9keSBhcyBzdHJpbmcpfSwgaGFzX25vdF90ZXh0PSR7dGhpcy50b0hhc1RleHQob3B0aW9ucy5oYXNOb3RUZXh0KX0pYDtcbiAgICAgICAgcmV0dXJuIGBsb2NhdG9yKCR7dGhpcy5xdW90ZShib2R5IGFzIHN0cmluZyl9KWA7XG4gICAgICBjYXNlICdmcmFtZS1sb2NhdG9yJzpcbiAgICAgICAgcmV0dXJuIGBmcmFtZV9sb2NhdG9yKCR7dGhpcy5xdW90ZShib2R5IGFzIHN0cmluZyl9KWA7XG4gICAgICBjYXNlICdmcmFtZSc6XG4gICAgICAgIHJldHVybiBgY29udGVudF9mcmFtZWA7XG4gICAgICBjYXNlICdudGgnOlxuICAgICAgICByZXR1cm4gYG50aCgke2JvZHl9KWA7XG4gICAgICBjYXNlICdmaXJzdCc6XG4gICAgICAgIHJldHVybiBgZmlyc3RgO1xuICAgICAgY2FzZSAnbGFzdCc6XG4gICAgICAgIHJldHVybiBgbGFzdGA7XG4gICAgICBjYXNlICd2aXNpYmxlJzpcbiAgICAgICAgcmV0dXJuIGBmaWx0ZXIodmlzaWJsZT0ke2JvZHkgPT09ICd0cnVlJyA/ICdUcnVlJyA6ICdGYWxzZSd9KWA7XG4gICAgICBjYXNlICdyb2xlJzpcbiAgICAgICAgY29uc3QgYXR0cnM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGlmIChpc1JlZ0V4cChvcHRpb25zLm5hbWUpKSB7XG4gICAgICAgICAgYXR0cnMucHVzaChgbmFtZT0ke3RoaXMucmVnZXhUb1N0cmluZyhvcHRpb25zLm5hbWUpfWApO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYXR0cnMucHVzaChgbmFtZT0ke3RoaXMucXVvdGUob3B0aW9ucy5uYW1lKX1gKTtcbiAgICAgICAgICBpZiAob3B0aW9ucy5leGFjdClcbiAgICAgICAgICAgIGF0dHJzLnB1c2goYGV4YWN0PVRydWVgKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHsgbmFtZSwgdmFsdWUgfSBvZiBvcHRpb25zLmF0dHJzISkge1xuICAgICAgICAgIGxldCB2YWx1ZVN0cmluZyA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB0aGlzLnF1b3RlKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJylcbiAgICAgICAgICAgIHZhbHVlU3RyaW5nID0gdmFsdWUgPyAnVHJ1ZScgOiAnRmFsc2UnO1xuICAgICAgICAgIGF0dHJzLnB1c2goYCR7dG9TbmFrZUNhc2UobmFtZSl9PSR7dmFsdWVTdHJpbmd9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXR0clN0cmluZyA9IGF0dHJzLmxlbmd0aCA/IGAsICR7YXR0cnMuam9pbignLCAnKX1gIDogJyc7XG4gICAgICAgIHJldHVybiBgZ2V0X2J5X3JvbGUoJHt0aGlzLnF1b3RlKGJvZHkgYXMgc3RyaW5nKX0ke2F0dHJTdHJpbmd9KWA7XG4gICAgICBjYXNlICdoYXMtdGV4dCc6XG4gICAgICAgIHJldHVybiBgZmlsdGVyKGhhc190ZXh0PSR7dGhpcy50b0hhc1RleHQoYm9keSl9KWA7XG4gICAgICBjYXNlICdoYXMtbm90LXRleHQnOlxuICAgICAgICByZXR1cm4gYGZpbHRlcihoYXNfbm90X3RleHQ9JHt0aGlzLnRvSGFzVGV4dChib2R5KX0pYDtcbiAgICAgIGNhc2UgJ2hhcyc6XG4gICAgICAgIHJldHVybiBgZmlsdGVyKGhhcz0ke2JvZHl9KWA7XG4gICAgICBjYXNlICdoYXNOb3QnOlxuICAgICAgICByZXR1cm4gYGZpbHRlcihoYXNfbm90PSR7Ym9keX0pYDtcbiAgICAgIGNhc2UgJ2FuZCc6XG4gICAgICAgIHJldHVybiBgYW5kXygke2JvZHl9KWA7XG4gICAgICBjYXNlICdvcic6XG4gICAgICAgIHJldHVybiBgb3JfKCR7Ym9keX0pYDtcbiAgICAgIGNhc2UgJ2NoYWluJzpcbiAgICAgICAgcmV0dXJuIGBsb2NhdG9yKCR7Ym9keX0pYDtcbiAgICAgIGNhc2UgJ3Rlc3QtaWQnOlxuICAgICAgICByZXR1cm4gYGdldF9ieV90ZXN0X2lkKCR7dGhpcy50b1Rlc3RJZFZhbHVlKGJvZHkpfSlgO1xuICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgIHJldHVybiB0aGlzLnRvQ2FsbFdpdGhFeGFjdCgnZ2V0X2J5X3RleHQnLCBib2R5LCAhIW9wdGlvbnMuZXhhY3QpO1xuICAgICAgY2FzZSAnYWx0JzpcbiAgICAgICAgcmV0dXJuIHRoaXMudG9DYWxsV2l0aEV4YWN0KCdnZXRfYnlfYWx0X3RleHQnLCBib2R5LCAhIW9wdGlvbnMuZXhhY3QpO1xuICAgICAgY2FzZSAncGxhY2Vob2xkZXInOlxuICAgICAgICByZXR1cm4gdGhpcy50b0NhbGxXaXRoRXhhY3QoJ2dldF9ieV9wbGFjZWhvbGRlcicsIGJvZHksICEhb3B0aW9ucy5leGFjdCk7XG4gICAgICBjYXNlICdsYWJlbCc6XG4gICAgICAgIHJldHVybiB0aGlzLnRvQ2FsbFdpdGhFeGFjdCgnZ2V0X2J5X2xhYmVsJywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGNhc2UgJ3RpdGxlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMudG9DYWxsV2l0aEV4YWN0KCdnZXRfYnlfdGl0bGUnLCBib2R5LCAhIW9wdGlvbnMuZXhhY3QpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHNlbGVjdG9yIGtpbmQgJyArIGtpbmQpO1xuICAgIH1cbiAgfVxuXG4gIGNoYWluTG9jYXRvcnMobG9jYXRvcnM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbG9jYXRvcnMuam9pbignLicpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWdleFRvU3RyaW5nKGJvZHk6IFJlZ0V4cCkge1xuICAgIGNvbnN0IHN1ZmZpeCA9IGJvZHkuZmxhZ3MuaW5jbHVkZXMoJ2knKSA/ICcsIHJlLklHTk9SRUNBU0UnIDogJyc7XG4gICAgcmV0dXJuIGByZS5jb21waWxlKHJcIiR7bm9ybWFsaXplRXNjYXBlZFJlZ2V4UXVvdGVzKGJvZHkuc291cmNlKS5yZXBsYWNlKC9cXFxcXFwvLywgJy8nKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJyl9XCIke3N1ZmZpeH0pYDtcbiAgfVxuXG4gIHByaXZhdGUgdG9DYWxsV2l0aEV4YWN0KG1ldGhvZDogc3RyaW5nLCBib2R5OiBzdHJpbmcgfCBSZWdFeHAsIGV4YWN0OiBib29sZWFuKSB7XG4gICAgaWYgKGlzUmVnRXhwKGJvZHkpKVxuICAgICAgcmV0dXJuIGAke21ldGhvZH0oJHt0aGlzLnJlZ2V4VG9TdHJpbmcoYm9keSl9KWA7XG4gICAgaWYgKGV4YWN0KVxuICAgICAgcmV0dXJuIGAke21ldGhvZH0oJHt0aGlzLnF1b3RlKGJvZHkpfSwgZXhhY3Q9VHJ1ZSlgO1xuICAgIHJldHVybiBgJHttZXRob2R9KCR7dGhpcy5xdW90ZShib2R5KX0pYDtcbiAgfVxuXG4gIHByaXZhdGUgdG9IYXNUZXh0KGJvZHk6IHN0cmluZyB8IFJlZ0V4cCkge1xuICAgIGlmIChpc1JlZ0V4cChib2R5KSlcbiAgICAgIHJldHVybiB0aGlzLnJlZ2V4VG9TdHJpbmcoYm9keSk7XG4gICAgcmV0dXJuIGAke3RoaXMucXVvdGUoYm9keSl9YDtcbiAgfVxuXG4gIHByaXZhdGUgdG9UZXN0SWRWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgUmVnRXhwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSlcbiAgICAgIHJldHVybiB0aGlzLnJlZ2V4VG9TdHJpbmcodmFsdWUpO1xuICAgIHJldHVybiB0aGlzLnF1b3RlKHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgcXVvdGUodGV4dDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGVzY2FwZVdpdGhRdW90ZXModGV4dCwgJ1xcXCInKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSmF2YUxvY2F0b3JGYWN0b3J5IGltcGxlbWVudHMgTG9jYXRvckZhY3Rvcnkge1xuICBnZW5lcmF0ZUxvY2F0b3IoYmFzZTogTG9jYXRvckJhc2UsIGtpbmQ6IExvY2F0b3JUeXBlLCBib2R5OiBzdHJpbmcgfCBSZWdFeHAsIG9wdGlvbnM6IExvY2F0b3JPcHRpb25zID0ge30pOiBzdHJpbmcge1xuICAgIGxldCBjbGF6ejogc3RyaW5nO1xuICAgIHN3aXRjaCAoYmFzZSkge1xuICAgICAgY2FzZSAncGFnZSc6IGNsYXp6ID0gJ1BhZ2UnOyBicmVhaztcbiAgICAgIGNhc2UgJ2ZyYW1lLWxvY2F0b3InOiBjbGF6eiA9ICdGcmFtZUxvY2F0b3InOyBicmVhaztcbiAgICAgIGNhc2UgJ2xvY2F0b3InOiBjbGF6eiA9ICdMb2NhdG9yJzsgYnJlYWs7XG4gICAgfVxuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSAnZGVmYXVsdCc6XG4gICAgICAgIGlmIChvcHRpb25zLmhhc1RleHQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICByZXR1cm4gYGxvY2F0b3IoJHt0aGlzLnF1b3RlKGJvZHkgYXMgc3RyaW5nKX0sIG5ldyAke2NsYXp6fS5Mb2NhdG9yT3B0aW9ucygpLnNldEhhc1RleHQoJHt0aGlzLnRvSGFzVGV4dChvcHRpb25zLmhhc1RleHQpfSkpYDtcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzTm90VGV4dCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHJldHVybiBgbG9jYXRvcigke3RoaXMucXVvdGUoYm9keSBhcyBzdHJpbmcpfSwgbmV3ICR7Y2xhenp9LkxvY2F0b3JPcHRpb25zKCkuc2V0SGFzTm90VGV4dCgke3RoaXMudG9IYXNUZXh0KG9wdGlvbnMuaGFzTm90VGV4dCl9KSlgO1xuICAgICAgICByZXR1cm4gYGxvY2F0b3IoJHt0aGlzLnF1b3RlKGJvZHkgYXMgc3RyaW5nKX0pYDtcbiAgICAgIGNhc2UgJ2ZyYW1lLWxvY2F0b3InOlxuICAgICAgICByZXR1cm4gYGZyYW1lTG9jYXRvcigke3RoaXMucXVvdGUoYm9keSBhcyBzdHJpbmcpfSlgO1xuICAgICAgY2FzZSAnZnJhbWUnOlxuICAgICAgICByZXR1cm4gYGNvbnRlbnRGcmFtZSgpYDtcbiAgICAgIGNhc2UgJ250aCc6XG4gICAgICAgIHJldHVybiBgbnRoKCR7Ym9keX0pYDtcbiAgICAgIGNhc2UgJ2ZpcnN0JzpcbiAgICAgICAgcmV0dXJuIGBmaXJzdCgpYDtcbiAgICAgIGNhc2UgJ2xhc3QnOlxuICAgICAgICByZXR1cm4gYGxhc3QoKWA7XG4gICAgICBjYXNlICd2aXNpYmxlJzpcbiAgICAgICAgcmV0dXJuIGBmaWx0ZXIobmV3ICR7Y2xhenp9LkZpbHRlck9wdGlvbnMoKS5zZXRWaXNpYmxlKCR7Ym9keSA9PT0gJ3RydWUnID8gJ3RydWUnIDogJ2ZhbHNlJ30pKWA7XG4gICAgICBjYXNlICdyb2xlJzpcbiAgICAgICAgY29uc3QgYXR0cnM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGlmIChpc1JlZ0V4cChvcHRpb25zLm5hbWUpKSB7XG4gICAgICAgICAgYXR0cnMucHVzaChgLnNldE5hbWUoJHt0aGlzLnJlZ2V4VG9TdHJpbmcob3B0aW9ucy5uYW1lKX0pYCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBhdHRycy5wdXNoKGAuc2V0TmFtZSgke3RoaXMucXVvdGUob3B0aW9ucy5uYW1lKX0pYCk7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuZXhhY3QpXG4gICAgICAgICAgICBhdHRycy5wdXNoKGAuc2V0RXhhY3QodHJ1ZSlgKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHsgbmFtZSwgdmFsdWUgfSBvZiBvcHRpb25zLmF0dHJzISlcbiAgICAgICAgICBhdHRycy5wdXNoKGAuc2V0JHt0b1RpdGxlQ2FzZShuYW1lKX0oJHt0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdGhpcy5xdW90ZSh2YWx1ZSkgOiB2YWx1ZX0pYCk7XG4gICAgICAgIGNvbnN0IGF0dHJTdHJpbmcgPSBhdHRycy5sZW5ndGggPyBgLCBuZXcgJHtjbGF6en0uR2V0QnlSb2xlT3B0aW9ucygpJHthdHRycy5qb2luKCcnKX1gIDogJyc7XG4gICAgICAgIHJldHVybiBgZ2V0QnlSb2xlKEFyaWFSb2xlLiR7dG9TbmFrZUNhc2UoYm9keSBhcyBzdHJpbmcpLnRvVXBwZXJDYXNlKCl9JHthdHRyU3RyaW5nfSlgO1xuICAgICAgY2FzZSAnaGFzLXRleHQnOlxuICAgICAgICByZXR1cm4gYGZpbHRlcihuZXcgJHtjbGF6en0uRmlsdGVyT3B0aW9ucygpLnNldEhhc1RleHQoJHt0aGlzLnRvSGFzVGV4dChib2R5KX0pKWA7XG4gICAgICBjYXNlICdoYXMtbm90LXRleHQnOlxuICAgICAgICByZXR1cm4gYGZpbHRlcihuZXcgJHtjbGF6en0uRmlsdGVyT3B0aW9ucygpLnNldEhhc05vdFRleHQoJHt0aGlzLnRvSGFzVGV4dChib2R5KX0pKWA7XG4gICAgICBjYXNlICdoYXMnOlxuICAgICAgICByZXR1cm4gYGZpbHRlcihuZXcgJHtjbGF6en0uRmlsdGVyT3B0aW9ucygpLnNldEhhcygke2JvZHl9KSlgO1xuICAgICAgY2FzZSAnaGFzTm90JzpcbiAgICAgICAgcmV0dXJuIGBmaWx0ZXIobmV3ICR7Y2xhenp9LkZpbHRlck9wdGlvbnMoKS5zZXRIYXNOb3QoJHtib2R5fSkpYDtcbiAgICAgIGNhc2UgJ2FuZCc6XG4gICAgICAgIHJldHVybiBgYW5kKCR7Ym9keX0pYDtcbiAgICAgIGNhc2UgJ29yJzpcbiAgICAgICAgcmV0dXJuIGBvcigke2JvZHl9KWA7XG4gICAgICBjYXNlICdjaGFpbic6XG4gICAgICAgIHJldHVybiBgbG9jYXRvcigke2JvZHl9KWA7XG4gICAgICBjYXNlICd0ZXN0LWlkJzpcbiAgICAgICAgcmV0dXJuIGBnZXRCeVRlc3RJZCgke3RoaXMudG9UZXN0SWRWYWx1ZShib2R5KX0pYDtcbiAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICByZXR1cm4gdGhpcy50b0NhbGxXaXRoRXhhY3QoY2xhenosICdnZXRCeVRleHQnLCBib2R5LCAhIW9wdGlvbnMuZXhhY3QpO1xuICAgICAgY2FzZSAnYWx0JzpcbiAgICAgICAgcmV0dXJuIHRoaXMudG9DYWxsV2l0aEV4YWN0KGNsYXp6LCAnZ2V0QnlBbHRUZXh0JywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGNhc2UgJ3BsYWNlaG9sZGVyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMudG9DYWxsV2l0aEV4YWN0KGNsYXp6LCAnZ2V0QnlQbGFjZWhvbGRlcicsIGJvZHksICEhb3B0aW9ucy5leGFjdCk7XG4gICAgICBjYXNlICdsYWJlbCc6XG4gICAgICAgIHJldHVybiB0aGlzLnRvQ2FsbFdpdGhFeGFjdChjbGF6eiwgJ2dldEJ5TGFiZWwnLCBib2R5LCAhIW9wdGlvbnMuZXhhY3QpO1xuICAgICAgY2FzZSAndGl0bGUnOlxuICAgICAgICByZXR1cm4gdGhpcy50b0NhbGxXaXRoRXhhY3QoY2xhenosICdnZXRCeVRpdGxlJywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBzZWxlY3RvciBraW5kICcgKyBraW5kKTtcbiAgICB9XG4gIH1cblxuICBjaGFpbkxvY2F0b3JzKGxvY2F0b3JzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGxvY2F0b3JzLmpvaW4oJy4nKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVnZXhUb1N0cmluZyhib2R5OiBSZWdFeHApIHtcbiAgICBjb25zdCBzdWZmaXggPSBib2R5LmZsYWdzLmluY2x1ZGVzKCdpJykgPyAnLCBQYXR0ZXJuLkNBU0VfSU5TRU5TSVRJVkUnIDogJyc7XG4gICAgcmV0dXJuIGBQYXR0ZXJuLmNvbXBpbGUoJHt0aGlzLnF1b3RlKG5vcm1hbGl6ZUVzY2FwZWRSZWdleFF1b3Rlcyhib2R5LnNvdXJjZSkpfSR7c3VmZml4fSlgO1xuICB9XG5cbiAgcHJpdmF0ZSB0b0NhbGxXaXRoRXhhY3QoY2xheno6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIGJvZHk6IHN0cmluZyB8IFJlZ0V4cCwgZXhhY3Q6IGJvb2xlYW4pIHtcbiAgICBpZiAoaXNSZWdFeHAoYm9keSkpXG4gICAgICByZXR1cm4gYCR7bWV0aG9kfSgke3RoaXMucmVnZXhUb1N0cmluZyhib2R5KX0pYDtcbiAgICBpZiAoZXhhY3QpXG4gICAgICByZXR1cm4gYCR7bWV0aG9kfSgke3RoaXMucXVvdGUoYm9keSl9LCBuZXcgJHtjbGF6en0uJHt0b1RpdGxlQ2FzZShtZXRob2QpfU9wdGlvbnMoKS5zZXRFeGFjdCh0cnVlKSlgO1xuICAgIHJldHVybiBgJHttZXRob2R9KCR7dGhpcy5xdW90ZShib2R5KX0pYDtcbiAgfVxuXG4gIHByaXZhdGUgdG9IYXNUZXh0KGJvZHk6IHN0cmluZyB8IFJlZ0V4cCkge1xuICAgIGlmIChpc1JlZ0V4cChib2R5KSlcbiAgICAgIHJldHVybiB0aGlzLnJlZ2V4VG9TdHJpbmcoYm9keSk7XG4gICAgcmV0dXJuIHRoaXMucXVvdGUoYm9keSk7XG4gIH1cblxuICBwcml2YXRlIHRvVGVzdElkVmFsdWUodmFsdWU6IHN0cmluZyB8IFJlZ0V4cCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpXG4gICAgICByZXR1cm4gdGhpcy5yZWdleFRvU3RyaW5nKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5xdW90ZSh2YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIHF1b3RlKHRleHQ6IHN0cmluZykge1xuICAgIHJldHVybiBlc2NhcGVXaXRoUXVvdGVzKHRleHQsICdcXFwiJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENTaGFycExvY2F0b3JGYWN0b3J5IGltcGxlbWVudHMgTG9jYXRvckZhY3Rvcnkge1xuICBnZW5lcmF0ZUxvY2F0b3IoYmFzZTogTG9jYXRvckJhc2UsIGtpbmQ6IExvY2F0b3JUeXBlLCBib2R5OiBzdHJpbmcgfCBSZWdFeHAsIG9wdGlvbnM6IExvY2F0b3JPcHRpb25zID0ge30pOiBzdHJpbmcge1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSAnZGVmYXVsdCc6XG4gICAgICAgIGlmIChvcHRpb25zLmhhc1RleHQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICByZXR1cm4gYExvY2F0b3IoJHt0aGlzLnF1b3RlKGJvZHkgYXMgc3RyaW5nKX0sIG5ldygpIHsgJHt0aGlzLnRvSGFzVGV4dChvcHRpb25zLmhhc1RleHQpfSB9KWA7XG4gICAgICAgIGlmIChvcHRpb25zLmhhc05vdFRleHQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICByZXR1cm4gYExvY2F0b3IoJHt0aGlzLnF1b3RlKGJvZHkgYXMgc3RyaW5nKX0sIG5ldygpIHsgJHt0aGlzLnRvSGFzTm90VGV4dChvcHRpb25zLmhhc05vdFRleHQpfSB9KWA7XG4gICAgICAgIHJldHVybiBgTG9jYXRvcigke3RoaXMucXVvdGUoYm9keSBhcyBzdHJpbmcpfSlgO1xuICAgICAgY2FzZSAnZnJhbWUtbG9jYXRvcic6XG4gICAgICAgIHJldHVybiBgRnJhbWVMb2NhdG9yKCR7dGhpcy5xdW90ZShib2R5IGFzIHN0cmluZyl9KWA7XG4gICAgICBjYXNlICdmcmFtZSc6XG4gICAgICAgIHJldHVybiBgQ29udGVudEZyYW1lYDtcbiAgICAgIGNhc2UgJ250aCc6XG4gICAgICAgIHJldHVybiBgTnRoKCR7Ym9keX0pYDtcbiAgICAgIGNhc2UgJ2ZpcnN0JzpcbiAgICAgICAgcmV0dXJuIGBGaXJzdGA7XG4gICAgICBjYXNlICdsYXN0JzpcbiAgICAgICAgcmV0dXJuIGBMYXN0YDtcbiAgICAgIGNhc2UgJ3Zpc2libGUnOlxuICAgICAgICByZXR1cm4gYEZpbHRlcihuZXcoKSB7IFZpc2libGUgPSAke2JvZHkgPT09ICd0cnVlJyA/ICd0cnVlJyA6ICdmYWxzZSd9IH0pYDtcbiAgICAgIGNhc2UgJ3JvbGUnOlxuICAgICAgICBjb25zdCBhdHRyczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgaWYgKGlzUmVnRXhwKG9wdGlvbnMubmFtZSkpIHtcbiAgICAgICAgICBhdHRycy5wdXNoKGBOYW1lUmVnZXggPSAke3RoaXMucmVnZXhUb1N0cmluZyhvcHRpb25zLm5hbWUpfWApO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYXR0cnMucHVzaChgTmFtZSA9ICR7dGhpcy5xdW90ZShvcHRpb25zLm5hbWUpfWApO1xuICAgICAgICAgIGlmIChvcHRpb25zLmV4YWN0KVxuICAgICAgICAgICAgYXR0cnMucHVzaChgRXhhY3QgPSB0cnVlYCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB7IG5hbWUsIHZhbHVlIH0gb2Ygb3B0aW9ucy5hdHRycyEpXG4gICAgICAgICAgYXR0cnMucHVzaChgJHt0b1RpdGxlQ2FzZShuYW1lKX0gPSAke3R5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB0aGlzLnF1b3RlKHZhbHVlKSA6IHZhbHVlfWApO1xuICAgICAgICBjb25zdCBhdHRyU3RyaW5nID0gYXR0cnMubGVuZ3RoID8gYCwgbmV3KCkgeyAke2F0dHJzLmpvaW4oJywgJyl9IH1gIDogJyc7XG4gICAgICAgIHJldHVybiBgR2V0QnlSb2xlKEFyaWFSb2xlLiR7dG9UaXRsZUNhc2UoYm9keSBhcyBzdHJpbmcpfSR7YXR0clN0cmluZ30pYDtcbiAgICAgIGNhc2UgJ2hhcy10ZXh0JzpcbiAgICAgICAgcmV0dXJuIGBGaWx0ZXIobmV3KCkgeyAke3RoaXMudG9IYXNUZXh0KGJvZHkpfSB9KWA7XG4gICAgICBjYXNlICdoYXMtbm90LXRleHQnOlxuICAgICAgICByZXR1cm4gYEZpbHRlcihuZXcoKSB7ICR7dGhpcy50b0hhc05vdFRleHQoYm9keSl9IH0pYDtcbiAgICAgIGNhc2UgJ2hhcyc6XG4gICAgICAgIHJldHVybiBgRmlsdGVyKG5ldygpIHsgSGFzID0gJHtib2R5fSB9KWA7XG4gICAgICBjYXNlICdoYXNOb3QnOlxuICAgICAgICByZXR1cm4gYEZpbHRlcihuZXcoKSB7IEhhc05vdCA9ICR7Ym9keX0gfSlgO1xuICAgICAgY2FzZSAnYW5kJzpcbiAgICAgICAgcmV0dXJuIGBBbmQoJHtib2R5fSlgO1xuICAgICAgY2FzZSAnb3InOlxuICAgICAgICByZXR1cm4gYE9yKCR7Ym9keX0pYDtcbiAgICAgIGNhc2UgJ2NoYWluJzpcbiAgICAgICAgcmV0dXJuIGBMb2NhdG9yKCR7Ym9keX0pYDtcbiAgICAgIGNhc2UgJ3Rlc3QtaWQnOlxuICAgICAgICByZXR1cm4gYEdldEJ5VGVzdElkKCR7dGhpcy50b1Rlc3RJZFZhbHVlKGJvZHkpfSlgO1xuICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgIHJldHVybiB0aGlzLnRvQ2FsbFdpdGhFeGFjdCgnR2V0QnlUZXh0JywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGNhc2UgJ2FsdCc6XG4gICAgICAgIHJldHVybiB0aGlzLnRvQ2FsbFdpdGhFeGFjdCgnR2V0QnlBbHRUZXh0JywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGNhc2UgJ3BsYWNlaG9sZGVyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMudG9DYWxsV2l0aEV4YWN0KCdHZXRCeVBsYWNlaG9sZGVyJywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGNhc2UgJ2xhYmVsJzpcbiAgICAgICAgcmV0dXJuIHRoaXMudG9DYWxsV2l0aEV4YWN0KCdHZXRCeUxhYmVsJywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGNhc2UgJ3RpdGxlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMudG9DYWxsV2l0aEV4YWN0KCdHZXRCeVRpdGxlJywgYm9keSwgISFvcHRpb25zLmV4YWN0KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBzZWxlY3RvciBraW5kICcgKyBraW5kKTtcbiAgICB9XG4gIH1cblxuICBjaGFpbkxvY2F0b3JzKGxvY2F0b3JzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGxvY2F0b3JzLmpvaW4oJy4nKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVnZXhUb1N0cmluZyhib2R5OiBSZWdFeHApOiBzdHJpbmcge1xuICAgIGNvbnN0IHN1ZmZpeCA9IGJvZHkuZmxhZ3MuaW5jbHVkZXMoJ2knKSA/ICcsIFJlZ2V4T3B0aW9ucy5JZ25vcmVDYXNlJyA6ICcnO1xuICAgIHJldHVybiBgbmV3IFJlZ2V4KCR7dGhpcy5xdW90ZShub3JtYWxpemVFc2NhcGVkUmVnZXhRdW90ZXMoYm9keS5zb3VyY2UpKX0ke3N1ZmZpeH0pYDtcbiAgfVxuXG4gIHByaXZhdGUgdG9DYWxsV2l0aEV4YWN0KG1ldGhvZDogc3RyaW5nLCBib2R5OiBzdHJpbmcgfCBSZWdFeHAsIGV4YWN0OiBib29sZWFuKSB7XG4gICAgaWYgKGlzUmVnRXhwKGJvZHkpKVxuICAgICAgcmV0dXJuIGAke21ldGhvZH0oJHt0aGlzLnJlZ2V4VG9TdHJpbmcoYm9keSl9KWA7XG4gICAgaWYgKGV4YWN0KVxuICAgICAgcmV0dXJuIGAke21ldGhvZH0oJHt0aGlzLnF1b3RlKGJvZHkpfSwgbmV3KCkgeyBFeGFjdCA9IHRydWUgfSlgO1xuICAgIHJldHVybiBgJHttZXRob2R9KCR7dGhpcy5xdW90ZShib2R5KX0pYDtcbiAgfVxuXG4gIHByaXZhdGUgdG9IYXNUZXh0KGJvZHk6IHN0cmluZyB8IFJlZ0V4cCkge1xuICAgIGlmIChpc1JlZ0V4cChib2R5KSlcbiAgICAgIHJldHVybiBgSGFzVGV4dFJlZ2V4ID0gJHt0aGlzLnJlZ2V4VG9TdHJpbmcoYm9keSl9YDtcbiAgICByZXR1cm4gYEhhc1RleHQgPSAke3RoaXMucXVvdGUoYm9keSl9YDtcbiAgfVxuXG4gIHByaXZhdGUgdG9UZXN0SWRWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgUmVnRXhwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSlcbiAgICAgIHJldHVybiB0aGlzLnJlZ2V4VG9TdHJpbmcodmFsdWUpO1xuICAgIHJldHVybiB0aGlzLnF1b3RlKHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9IYXNOb3RUZXh0KGJvZHk6IHN0cmluZyB8IFJlZ0V4cCkge1xuICAgIGlmIChpc1JlZ0V4cChib2R5KSlcbiAgICAgIHJldHVybiBgSGFzTm90VGV4dFJlZ2V4ID0gJHt0aGlzLnJlZ2V4VG9TdHJpbmcoYm9keSl9YDtcbiAgICByZXR1cm4gYEhhc05vdFRleHQgPSAke3RoaXMucXVvdGUoYm9keSl9YDtcbiAgfVxuXG4gIHByaXZhdGUgcXVvdGUodGV4dDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGVzY2FwZVdpdGhRdW90ZXModGV4dCwgJ1xcXCInKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSnNvbmxMb2NhdG9yRmFjdG9yeSBpbXBsZW1lbnRzIExvY2F0b3JGYWN0b3J5IHtcbiAgZ2VuZXJhdGVMb2NhdG9yKGJhc2U6IExvY2F0b3JCYXNlLCBraW5kOiBMb2NhdG9yVHlwZSwgYm9keTogc3RyaW5nIHwgUmVnRXhwLCBvcHRpb25zOiBMb2NhdG9yT3B0aW9ucyA9IHt9KTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAga2luZCxcbiAgICAgIGJvZHksXG4gICAgICBvcHRpb25zLFxuICAgIH0pO1xuICB9XG5cbiAgY2hhaW5Mb2NhdG9ycyhsb2NhdG9yczogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIGNvbnN0IG9iamVjdHMgPSBsb2NhdG9ycy5tYXAobCA9PiBKU09OLnBhcnNlKGwpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoIC0gMTsgKytpKVxuICAgICAgb2JqZWN0c1tpXS5uZXh0ID0gb2JqZWN0c1tpICsgMV07XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iamVjdHNbMF0pO1xuICB9XG59XG5cbmNvbnN0IGdlbmVyYXRvcnM6IFJlY29yZDxMYW5ndWFnZSwgbmV3IChwcmVmZXJyZWRRdW90ZT86IFF1b3RlKSA9PiBMb2NhdG9yRmFjdG9yeT4gPSB7XG4gIGphdmFzY3JpcHQ6IEphdmFTY3JpcHRMb2NhdG9yRmFjdG9yeSxcbiAgcHl0aG9uOiBQeXRob25Mb2NhdG9yRmFjdG9yeSxcbiAgamF2YTogSmF2YUxvY2F0b3JGYWN0b3J5LFxuICBjc2hhcnA6IENTaGFycExvY2F0b3JGYWN0b3J5LFxuICBqc29ubDogSnNvbmxMb2NhdG9yRmFjdG9yeSxcbn07XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKG9iajogYW55KTogb2JqIGlzIFJlZ0V4cCB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiBSZWdFeHA7XG59XG4iLCIvKlxuICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgJy4vY2FsbExvZy5jc3MnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBDYWxsTG9nIH0gZnJvbSAnLi9yZWNvcmRlclR5cGVzJztcbmltcG9ydCB7IGNsc3gsIG1zVG9TdHJpbmcgfSBmcm9tICdAd2ViL3VpVXRpbHMnO1xuaW1wb3J0IHsgYXNMb2NhdG9yIH0gZnJvbSAnQGlzb21vcnBoaWMvbG9jYXRvckdlbmVyYXRvcnMnO1xuaW1wb3J0IHR5cGUgeyBMYW5ndWFnZSB9IGZyb20gJ0Bpc29tb3JwaGljL2xvY2F0b3JHZW5lcmF0b3JzJztcblxuZXhwb3J0IHR5cGUgQ2FsbExvZ1Byb3BzID0ge1xuICBsYW5ndWFnZTogTGFuZ3VhZ2U7XG4gIGxvZzogQ2FsbExvZ1tdO1xufTtcblxuZXhwb3J0IGNvbnN0IENhbGxMb2dWaWV3OiBSZWFjdC5GQzxDYWxsTG9nUHJvcHM+ID0gKHtcbiAgbGFuZ3VhZ2UsXG4gIGxvZyxcbn0pID0+IHtcbiAgY29uc3QgbWVzc2FnZXNFbmRSZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBbZXhwYW5kT3ZlcnJpZGVzLCBzZXRFeHBhbmRPdmVycmlkZXNdID0gUmVhY3QudXNlU3RhdGU8TWFwPHN0cmluZywgYm9vbGVhbj4+KG5ldyBNYXAoKSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGxvZy5maW5kKGNhbGxMb2cgPT4gY2FsbExvZy5yZXZlYWwpKVxuICAgICAgbWVzc2FnZXNFbmRSZWYuY3VycmVudD8uc2Nyb2xsSW50b1ZpZXcoeyBibG9jazogJ2NlbnRlcicsIGlubGluZTogJ25lYXJlc3QnIH0pO1xuICB9LCBbbWVzc2FnZXNFbmRSZWYsIGxvZ10pO1xuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J2NhbGwtbG9nJyBzdHlsZT17eyBmbGV4OiAnYXV0bycgfX0+XG4gICAge2xvZy5tYXAoY2FsbExvZyA9PiB7XG4gICAgICBjb25zdCBleHBhbmRPdmVycmlkZSA9IGV4cGFuZE92ZXJyaWRlcy5nZXQoY2FsbExvZy5pZCk7XG4gICAgICBjb25zdCBpc0V4cGFuZGVkID0gdHlwZW9mIGV4cGFuZE92ZXJyaWRlID09PSAnYm9vbGVhbicgPyBleHBhbmRPdmVycmlkZSA6IGNhbGxMb2cuc3RhdHVzICE9PSAnZG9uZSc7XG4gICAgICBjb25zdCBsb2NhdG9yID0gY2FsbExvZy5wYXJhbXMuc2VsZWN0b3IgPyBhc0xvY2F0b3IobGFuZ3VhZ2UsIGNhbGxMb2cucGFyYW1zLnNlbGVjdG9yKSA6IG51bGw7XG4gICAgICBsZXQgdGl0bGVQcmVmaXggPSBjYWxsTG9nLnRpdGxlO1xuICAgICAgbGV0IHRpdGxlU3VmZml4ID0gJyc7XG4gICAgICBpZiAoY2FsbExvZy50aXRsZS5zdGFydHNXaXRoKCdleHBlY3QudG8nKSB8fCBjYWxsTG9nLnRpdGxlLnN0YXJ0c1dpdGgoJ2V4cGVjdC5ub3QudG8nKSkge1xuICAgICAgICB0aXRsZVByZWZpeCA9ICdleHBlY3QoJztcbiAgICAgICAgdGl0bGVTdWZmaXggPSBgKS4ke2NhbGxMb2cudGl0bGUuc3Vic3RyaW5nKCdleHBlY3QuJy5sZW5ndGgpfSgpYDtcbiAgICAgIH0gZWxzZSBpZiAoY2FsbExvZy50aXRsZS5zdGFydHNXaXRoKCdsb2NhdG9yLicpKSB7XG4gICAgICAgIHRpdGxlUHJlZml4ID0gJyc7XG4gICAgICAgIHRpdGxlU3VmZml4ID0gYC4ke2NhbGxMb2cudGl0bGUuc3Vic3RyaW5nKCdsb2NhdG9yLicubGVuZ3RoKX0oKWA7XG4gICAgICB9IGVsc2UgaWYgKGxvY2F0b3IgfHwgY2FsbExvZy5wYXJhbXMudXJsKSB7XG4gICAgICAgIHRpdGxlUHJlZml4ID0gY2FsbExvZy50aXRsZSArICcoJztcbiAgICAgICAgdGl0bGVTdWZmaXggPSAnKSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2Nsc3goJ2NhbGwtbG9nLWNhbGwnLCBjYWxsTG9nLnN0YXR1cyl9IGtleT17Y2FsbExvZy5pZH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjYWxsLWxvZy1jYWxsLWhlYWRlcic+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbHN4KCdjb2RpY29uJywgYGNvZGljb24tY2hldnJvbi0ke2lzRXhwYW5kZWQgPyAnZG93bicgOiAncmlnaHQnfWApfSBzdHlsZT17eyBjdXJzb3I6ICdwb2ludGVyJyB9fW9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld092ZXJyaWRlcyA9IG5ldyBNYXAoZXhwYW5kT3ZlcnJpZGVzKTtcbiAgICAgICAgICAgIG5ld092ZXJyaWRlcy5zZXQoY2FsbExvZy5pZCwgIWlzRXhwYW5kZWQpO1xuICAgICAgICAgICAgc2V0RXhwYW5kT3ZlcnJpZGVzKG5ld092ZXJyaWRlcyk7XG4gICAgICAgICAgfX0+PC9zcGFuPlxuICAgICAgICAgIHsgdGl0bGVQcmVmaXggfVxuICAgICAgICAgIHsgY2FsbExvZy5wYXJhbXMudXJsID8gPHNwYW4gY2xhc3NOYW1lPSdjYWxsLWxvZy1kZXRhaWxzJz48c3BhbiBjbGFzc05hbWU9J2NhbGwtbG9nLXVybCcgdGl0bGU9e2NhbGxMb2cucGFyYW1zLnVybH0+e2NhbGxMb2cucGFyYW1zLnVybH08L3NwYW4+PC9zcGFuPiA6IHVuZGVmaW5lZCB9XG4gICAgICAgICAgeyBsb2NhdG9yID8gPHNwYW4gY2xhc3NOYW1lPSdjYWxsLWxvZy1kZXRhaWxzJz48c3BhbiBjbGFzc05hbWU9J2NhbGwtbG9nLXNlbGVjdG9yJyB0aXRsZT17YHBhZ2UuJHtsb2NhdG9yfWB9PntgcGFnZS4ke2xvY2F0b3J9YH08L3NwYW4+PC9zcGFuPiA6IHVuZGVmaW5lZCB9XG4gICAgICAgICAgeyB0aXRsZVN1ZmZpeCB9XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbHN4KCdjb2RpY29uJywgaWNvbkNsYXNzKGNhbGxMb2cpKX0+PC9zcGFuPlxuICAgICAgICAgIHsgdHlwZW9mIGNhbGxMb2cuZHVyYXRpb24gPT09ICdudW1iZXInID8gPHNwYW4gY2xhc3NOYW1lPSdjYWxsLWxvZy10aW1lJz7igJQge21zVG9TdHJpbmcoY2FsbExvZy5kdXJhdGlvbil9PC9zcGFuPiA6IHVuZGVmaW5lZH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHsgKGlzRXhwYW5kZWQgPyBjYWxsTG9nLm1lc3NhZ2VzIDogW10pLm1hcCgobWVzc2FnZSwgaSkgPT4ge1xuICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0nY2FsbC1sb2ctbWVzc2FnZScga2V5PXtpfT5cbiAgICAgICAgICAgIHsgbWVzc2FnZS50cmltKCkgfVxuICAgICAgICAgIDwvZGl2PjtcbiAgICAgICAgfSl9XG4gICAgICAgIHsgISFjYWxsTG9nLmVycm9yICYmIDxkaXYgY2xhc3NOYW1lPSdjYWxsLWxvZy1tZXNzYWdlIGVycm9yJyBoaWRkZW49eyFpc0V4cGFuZGVkfT57IGNhbGxMb2cuZXJyb3IgfTwvZGl2PiB9XG4gICAgICA8L2Rpdj47XG4gICAgfSl9XG4gICAgPGRpdiByZWY9e21lc3NhZ2VzRW5kUmVmfT48L2Rpdj5cbiAgPC9kaXY+O1xufTtcblxuZnVuY3Rpb24gaWNvbkNsYXNzKGNhbGxMb2c6IENhbGxMb2cpOiBzdHJpbmcge1xuICBzd2l0Y2ggKGNhbGxMb2cuc3RhdHVzKSB7XG4gICAgY2FzZSAnZG9uZSc6IHJldHVybiAnY29kaWNvbi1jaGVjayc7XG4gICAgY2FzZSAnaW4tcHJvZ3Jlc3MnOiByZXR1cm4gJ2NvZGljb24tY2xvY2snO1xuICAgIGNhc2UgJ3BhdXNlZCc6IHJldHVybiAnY29kaWNvbi1kZWJ1Zy1wYXVzZSc7XG4gICAgY2FzZSAnZXJyb3InOiByZXR1cm4gJ2NvZGljb24tZXJyb3InO1xuICB9XG59XG4iLCJjb25zdCBBTElBUyA9IFN5bWJvbC5mb3IoJ3lhbWwuYWxpYXMnKTtcbmNvbnN0IERPQyA9IFN5bWJvbC5mb3IoJ3lhbWwuZG9jdW1lbnQnKTtcbmNvbnN0IE1BUCA9IFN5bWJvbC5mb3IoJ3lhbWwubWFwJyk7XG5jb25zdCBQQUlSID0gU3ltYm9sLmZvcigneWFtbC5wYWlyJyk7XG5jb25zdCBTQ0FMQVIgPSBTeW1ib2wuZm9yKCd5YW1sLnNjYWxhcicpO1xuY29uc3QgU0VRID0gU3ltYm9sLmZvcigneWFtbC5zZXEnKTtcbmNvbnN0IE5PREVfVFlQRSA9IFN5bWJvbC5mb3IoJ3lhbWwubm9kZS50eXBlJyk7XG5jb25zdCBpc0FsaWFzID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBBTElBUztcbmNvbnN0IGlzRG9jdW1lbnQgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IERPQztcbmNvbnN0IGlzTWFwID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBNQVA7XG5jb25zdCBpc1BhaXIgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IFBBSVI7XG5jb25zdCBpc1NjYWxhciA9IChub2RlKSA9PiAhIW5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmIG5vZGVbTk9ERV9UWVBFXSA9PT0gU0NBTEFSO1xuY29uc3QgaXNTZXEgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IFNFUTtcbmZ1bmN0aW9uIGlzQ29sbGVjdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKVxuICAgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSkge1xuICAgICAgICAgICAgY2FzZSBNQVA6XG4gICAgICAgICAgICBjYXNlIFNFUTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKVxuICAgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSkge1xuICAgICAgICAgICAgY2FzZSBBTElBUzpcbiAgICAgICAgICAgIGNhc2UgTUFQOlxuICAgICAgICAgICAgY2FzZSBTQ0FMQVI6XG4gICAgICAgICAgICBjYXNlIFNFUTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmNvbnN0IGhhc0FuY2hvciA9IChub2RlKSA9PiAoaXNTY2FsYXIobm9kZSkgfHwgaXNDb2xsZWN0aW9uKG5vZGUpKSAmJiAhIW5vZGUuYW5jaG9yO1xuXG5leHBvcnQgeyBBTElBUywgRE9DLCBNQVAsIE5PREVfVFlQRSwgUEFJUiwgU0NBTEFSLCBTRVEsIGhhc0FuY2hvciwgaXNBbGlhcywgaXNDb2xsZWN0aW9uLCBpc0RvY3VtZW50LCBpc01hcCwgaXNOb2RlLCBpc1BhaXIsIGlzU2NhbGFyLCBpc1NlcSB9O1xuIiwiaW1wb3J0IHsgaXNEb2N1bWVudCwgaXNOb2RlLCBpc1BhaXIsIGlzQ29sbGVjdGlvbiwgaXNNYXAsIGlzU2VxLCBpc1NjYWxhciwgaXNBbGlhcyB9IGZyb20gJy4vbm9kZXMvaWRlbnRpdHkuanMnO1xuXG5jb25zdCBCUkVBSyA9IFN5bWJvbCgnYnJlYWsgdmlzaXQnKTtcbmNvbnN0IFNLSVAgPSBTeW1ib2woJ3NraXAgY2hpbGRyZW4nKTtcbmNvbnN0IFJFTU9WRSA9IFN5bWJvbCgncmVtb3ZlIG5vZGUnKTtcbi8qKlxuICogQXBwbHkgYSB2aXNpdG9yIHRvIGFuIEFTVCBub2RlIG9yIGRvY3VtZW50LlxuICpcbiAqIFdhbGtzIHRocm91Z2ggdGhlIHRyZWUgKGRlcHRoLWZpcnN0KSBzdGFydGluZyBmcm9tIGBub2RlYCwgY2FsbGluZyBhXG4gKiBgdmlzaXRvcmAgZnVuY3Rpb24gd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAgIC0gYGtleWA6IEZvciBzZXF1ZW5jZSB2YWx1ZXMgYW5kIG1hcCBgUGFpcmAsIHRoZSBub2RlJ3MgaW5kZXggaW4gdGhlXG4gKiAgICAgY29sbGVjdGlvbi4gV2l0aGluIGEgYFBhaXJgLCBgJ2tleSdgIG9yIGAndmFsdWUnYCwgY29ycmVzcG9uZGluZ2x5LlxuICogICAgIGBudWxsYCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAqICAgLSBgbm9kZWA6IFRoZSBjdXJyZW50IG5vZGUuXG4gKiAgIC0gYHBhdGhgOiBUaGUgYW5jZXN0cnkgb2YgdGhlIGN1cnJlbnQgbm9kZS5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSB2aXNpdG9yIG1heSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHRyYXZlcnNhbDpcbiAqICAgLSBgdW5kZWZpbmVkYCAoZGVmYXVsdCk6IERvIG5vdGhpbmcgYW5kIGNvbnRpbnVlXG4gKiAgIC0gYHZpc2l0LlNLSVBgOiBEbyBub3QgdmlzaXQgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSwgY29udGludWUgd2l0aCBuZXh0XG4gKiAgICAgc2libGluZ1xuICogICAtIGB2aXNpdC5CUkVBS2A6IFRlcm1pbmF0ZSB0cmF2ZXJzYWwgY29tcGxldGVseVxuICogICAtIGB2aXNpdC5SRU1PVkVgOiBSZW1vdmUgdGhlIGN1cnJlbnQgbm9kZSwgdGhlbiBjb250aW51ZSB3aXRoIHRoZSBuZXh0IG9uZVxuICogICAtIGBOb2RlYDogUmVwbGFjZSB0aGUgY3VycmVudCBub2RlLCB0aGVuIGNvbnRpbnVlIGJ5IHZpc2l0aW5nIGl0XG4gKiAgIC0gYG51bWJlcmA6IFdoaWxlIGl0ZXJhdGluZyB0aGUgaXRlbXMgb2YgYSBzZXF1ZW5jZSBvciBtYXAsIHNldCB0aGUgaW5kZXhcbiAqICAgICBvZiB0aGUgbmV4dCBzdGVwLiBUaGlzIGlzIHVzZWZ1bCBlc3BlY2lhbGx5IGlmIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudFxuICogICAgIG5vZGUgaGFzIGNoYW5nZWQuXG4gKlxuICogSWYgYHZpc2l0b3JgIGlzIGEgc2luZ2xlIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFsbCB2YWx1ZXNcbiAqIGVuY291bnRlcmVkIGluIHRoZSB0cmVlLCBpbmNsdWRpbmcgZS5nLiBgbnVsbGAgdmFsdWVzLiBBbHRlcm5hdGl2ZWx5LFxuICogc2VwYXJhdGUgdmlzaXRvciBmdW5jdGlvbnMgbWF5IGJlIGRlZmluZWQgZm9yIGVhY2ggYE1hcGAsIGBQYWlyYCwgYFNlcWAsXG4gKiBgQWxpYXNgIGFuZCBgU2NhbGFyYCBub2RlLiBUbyBkZWZpbmUgdGhlIHNhbWUgdmlzaXRvciBmdW5jdGlvbiBmb3IgbW9yZSB0aGFuXG4gKiBvbmUgbm9kZSB0eXBlLCB1c2UgdGhlIGBDb2xsZWN0aW9uYCAobWFwIGFuZCBzZXEpLCBgVmFsdWVgIChtYXAsIHNlcSAmIHNjYWxhcilcbiAqIGFuZCBgTm9kZWAgKGFsaWFzLCBtYXAsIHNlcSAmIHNjYWxhcikgdGFyZ2V0cy4gT2YgYWxsIHRoZXNlLCBvbmx5IHRoZSBtb3N0XG4gKiBzcGVjaWZpYyBkZWZpbmVkIG9uZSB3aWxsIGJlIHVzZWQgZm9yIGVhY2ggbm9kZS5cbiAqL1xuZnVuY3Rpb24gdmlzaXQobm9kZSwgdmlzaXRvcikge1xuICAgIGNvbnN0IHZpc2l0b3JfID0gaW5pdFZpc2l0b3IodmlzaXRvcik7XG4gICAgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICAgICAgY29uc3QgY2QgPSB2aXNpdF8obnVsbCwgbm9kZS5jb250ZW50cywgdmlzaXRvcl8sIE9iamVjdC5mcmVlemUoW25vZGVdKSk7XG4gICAgICAgIGlmIChjZCA9PT0gUkVNT1ZFKVxuICAgICAgICAgICAgbm9kZS5jb250ZW50cyA9IG51bGw7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgdmlzaXRfKG51bGwsIG5vZGUsIHZpc2l0b3JfLCBPYmplY3QuZnJlZXplKFtdKSk7XG59XG4vLyBXaXRob3V0IHRoZSBgYXMgc3ltYm9sYCBjYXN0cywgVFMgZGVjbGFyZXMgdGhlc2UgaW4gdGhlIGB2aXNpdGBcbi8vIG5hbWVzcGFjZSB1c2luZyBgdmFyYCwgYnV0IHRoZW4gY29tcGxhaW5zIGFib3V0IHRoYXQgYmVjYXVzZVxuLy8gYHVuaXF1ZSBzeW1ib2xgIG11c3QgYmUgYGNvbnN0YC5cbi8qKiBUZXJtaW5hdGUgdmlzaXQgdHJhdmVyc2FsIGNvbXBsZXRlbHkgKi9cbnZpc2l0LkJSRUFLID0gQlJFQUs7XG4vKiogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBub2RlICovXG52aXNpdC5TS0lQID0gU0tJUDtcbi8qKiBSZW1vdmUgdGhlIGN1cnJlbnQgbm9kZSAqL1xudmlzaXQuUkVNT1ZFID0gUkVNT1ZFO1xuZnVuY3Rpb24gdmlzaXRfKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCkge1xuICAgIGNvbnN0IGN0cmwgPSBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpO1xuICAgIGlmIChpc05vZGUoY3RybCkgfHwgaXNQYWlyKGN0cmwpKSB7XG4gICAgICAgIHJlcGxhY2VOb2RlKGtleSwgcGF0aCwgY3RybCk7XG4gICAgICAgIHJldHVybiB2aXNpdF8oa2V5LCBjdHJsLCB2aXNpdG9yLCBwYXRoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjdHJsICE9PSAnc3ltYm9sJykge1xuICAgICAgICBpZiAoaXNDb2xsZWN0aW9uKG5vZGUpKSB7XG4gICAgICAgICAgICBwYXRoID0gT2JqZWN0LmZyZWV6ZShwYXRoLmNvbmNhdChub2RlKSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaSA9IHZpc2l0XyhpLCBub2RlLml0ZW1zW2ldLCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNpID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgaSA9IGNpIC0gMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCUkVBSztcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gUkVNT1ZFKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaXRlbXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGFpcihub2RlKSkge1xuICAgICAgICAgICAgcGF0aCA9IE9iamVjdC5mcmVlemUocGF0aC5jb25jYXQobm9kZSkpO1xuICAgICAgICAgICAgY29uc3QgY2sgPSB2aXNpdF8oJ2tleScsIG5vZGUua2V5LCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjayA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2sgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLmtleSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBjdiA9IHZpc2l0XygndmFsdWUnLCBub2RlLnZhbHVlLCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjdiA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY3YgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLnZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3RybDtcbn1cbi8qKlxuICogQXBwbHkgYW4gYXN5bmMgdmlzaXRvciB0byBhbiBBU1Qgbm9kZSBvciBkb2N1bWVudC5cbiAqXG4gKiBXYWxrcyB0aHJvdWdoIHRoZSB0cmVlIChkZXB0aC1maXJzdCkgc3RhcnRpbmcgZnJvbSBgbm9kZWAsIGNhbGxpbmcgYVxuICogYHZpc2l0b3JgIGZ1bmN0aW9uIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogICAtIGBrZXlgOiBGb3Igc2VxdWVuY2UgdmFsdWVzIGFuZCBtYXAgYFBhaXJgLCB0aGUgbm9kZSdzIGluZGV4IGluIHRoZVxuICogICAgIGNvbGxlY3Rpb24uIFdpdGhpbiBhIGBQYWlyYCwgYCdrZXknYCBvciBgJ3ZhbHVlJ2AsIGNvcnJlc3BvbmRpbmdseS5cbiAqICAgICBgbnVsbGAgZm9yIHRoZSByb290IG5vZGUuXG4gKiAgIC0gYG5vZGVgOiBUaGUgY3VycmVudCBub2RlLlxuICogICAtIGBwYXRoYDogVGhlIGFuY2VzdHJ5IG9mIHRoZSBjdXJyZW50IG5vZGUuXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgdmlzaXRvciBtYXkgYmUgdXNlZCB0byBjb250cm9sIHRoZSB0cmF2ZXJzYWw6XG4gKiAgIC0gYFByb21pc2VgOiBNdXN0IHJlc29sdmUgdG8gb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzXG4gKiAgIC0gYHVuZGVmaW5lZGAgKGRlZmF1bHQpOiBEbyBub3RoaW5nIGFuZCBjb250aW51ZVxuICogICAtIGB2aXNpdC5TS0lQYDogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUsIGNvbnRpbnVlIHdpdGggbmV4dFxuICogICAgIHNpYmxpbmdcbiAqICAgLSBgdmlzaXQuQlJFQUtgOiBUZXJtaW5hdGUgdHJhdmVyc2FsIGNvbXBsZXRlbHlcbiAqICAgLSBgdmlzaXQuUkVNT1ZFYDogUmVtb3ZlIHRoZSBjdXJyZW50IG5vZGUsIHRoZW4gY29udGludWUgd2l0aCB0aGUgbmV4dCBvbmVcbiAqICAgLSBgTm9kZWA6IFJlcGxhY2UgdGhlIGN1cnJlbnQgbm9kZSwgdGhlbiBjb250aW51ZSBieSB2aXNpdGluZyBpdFxuICogICAtIGBudW1iZXJgOiBXaGlsZSBpdGVyYXRpbmcgdGhlIGl0ZW1zIG9mIGEgc2VxdWVuY2Ugb3IgbWFwLCBzZXQgdGhlIGluZGV4XG4gKiAgICAgb2YgdGhlIG5leHQgc3RlcC4gVGhpcyBpcyB1c2VmdWwgZXNwZWNpYWxseSBpZiB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnRcbiAqICAgICBub2RlIGhhcyBjaGFuZ2VkLlxuICpcbiAqIElmIGB2aXNpdG9yYCBpcyBhIHNpbmdsZSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBhbGwgdmFsdWVzXG4gKiBlbmNvdW50ZXJlZCBpbiB0aGUgdHJlZSwgaW5jbHVkaW5nIGUuZy4gYG51bGxgIHZhbHVlcy4gQWx0ZXJuYXRpdmVseSxcbiAqIHNlcGFyYXRlIHZpc2l0b3IgZnVuY3Rpb25zIG1heSBiZSBkZWZpbmVkIGZvciBlYWNoIGBNYXBgLCBgUGFpcmAsIGBTZXFgLFxuICogYEFsaWFzYCBhbmQgYFNjYWxhcmAgbm9kZS4gVG8gZGVmaW5lIHRoZSBzYW1lIHZpc2l0b3IgZnVuY3Rpb24gZm9yIG1vcmUgdGhhblxuICogb25lIG5vZGUgdHlwZSwgdXNlIHRoZSBgQ29sbGVjdGlvbmAgKG1hcCBhbmQgc2VxKSwgYFZhbHVlYCAobWFwLCBzZXEgJiBzY2FsYXIpXG4gKiBhbmQgYE5vZGVgIChhbGlhcywgbWFwLCBzZXEgJiBzY2FsYXIpIHRhcmdldHMuIE9mIGFsbCB0aGVzZSwgb25seSB0aGUgbW9zdFxuICogc3BlY2lmaWMgZGVmaW5lZCBvbmUgd2lsbCBiZSB1c2VkIGZvciBlYWNoIG5vZGUuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHZpc2l0QXN5bmMobm9kZSwgdmlzaXRvcikge1xuICAgIGNvbnN0IHZpc2l0b3JfID0gaW5pdFZpc2l0b3IodmlzaXRvcik7XG4gICAgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICAgICAgY29uc3QgY2QgPSBhd2FpdCB2aXNpdEFzeW5jXyhudWxsLCBub2RlLmNvbnRlbnRzLCB2aXNpdG9yXywgT2JqZWN0LmZyZWV6ZShbbm9kZV0pKTtcbiAgICAgICAgaWYgKGNkID09PSBSRU1PVkUpXG4gICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBhd2FpdCB2aXNpdEFzeW5jXyhudWxsLCBub2RlLCB2aXNpdG9yXywgT2JqZWN0LmZyZWV6ZShbXSkpO1xufVxuLy8gV2l0aG91dCB0aGUgYGFzIHN5bWJvbGAgY2FzdHMsIFRTIGRlY2xhcmVzIHRoZXNlIGluIHRoZSBgdmlzaXRgXG4vLyBuYW1lc3BhY2UgdXNpbmcgYHZhcmAsIGJ1dCB0aGVuIGNvbXBsYWlucyBhYm91dCB0aGF0IGJlY2F1c2Vcbi8vIGB1bmlxdWUgc3ltYm9sYCBtdXN0IGJlIGBjb25zdGAuXG4vKiogVGVybWluYXRlIHZpc2l0IHRyYXZlcnNhbCBjb21wbGV0ZWx5ICovXG52aXNpdEFzeW5jLkJSRUFLID0gQlJFQUs7XG4vKiogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBub2RlICovXG52aXNpdEFzeW5jLlNLSVAgPSBTS0lQO1xuLyoqIFJlbW92ZSB0aGUgY3VycmVudCBub2RlICovXG52aXNpdEFzeW5jLlJFTU9WRSA9IFJFTU9WRTtcbmFzeW5jIGZ1bmN0aW9uIHZpc2l0QXN5bmNfKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCkge1xuICAgIGNvbnN0IGN0cmwgPSBhd2FpdCBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpO1xuICAgIGlmIChpc05vZGUoY3RybCkgfHwgaXNQYWlyKGN0cmwpKSB7XG4gICAgICAgIHJlcGxhY2VOb2RlKGtleSwgcGF0aCwgY3RybCk7XG4gICAgICAgIHJldHVybiB2aXNpdEFzeW5jXyhrZXksIGN0cmwsIHZpc2l0b3IsIHBhdGgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGN0cmwgIT09ICdzeW1ib2wnKSB7XG4gICAgICAgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGggPSBPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KG5vZGUpKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpID0gYXdhaXQgdmlzaXRBc3luY18oaSwgbm9kZS5pdGVtc1tpXSwgdmlzaXRvciwgcGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgIGkgPSBjaSAtIDE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IEJSRUFLKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IFJFTU9WRSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLml0ZW1zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BhaXIobm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGggPSBPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KG5vZGUpKTtcbiAgICAgICAgICAgIGNvbnN0IGNrID0gYXdhaXQgdmlzaXRBc3luY18oJ2tleScsIG5vZGUua2V5LCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjayA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2sgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLmtleSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBjdiA9IGF3YWl0IHZpc2l0QXN5bmNfKCd2YWx1ZScsIG5vZGUudmFsdWUsIHZpc2l0b3IsIHBhdGgpO1xuICAgICAgICAgICAgaWYgKGN2ID09PSBCUkVBSylcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICBlbHNlIGlmIChjdiA9PT0gUkVNT1ZFKVxuICAgICAgICAgICAgICAgIG5vZGUudmFsdWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdHJsO1xufVxuZnVuY3Rpb24gaW5pdFZpc2l0b3IodmlzaXRvcikge1xuICAgIGlmICh0eXBlb2YgdmlzaXRvciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgKHZpc2l0b3IuQ29sbGVjdGlvbiB8fCB2aXNpdG9yLk5vZGUgfHwgdmlzaXRvci5WYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgQWxpYXM6IHZpc2l0b3IuTm9kZSxcbiAgICAgICAgICAgIE1hcDogdmlzaXRvci5Ob2RlLFxuICAgICAgICAgICAgU2NhbGFyOiB2aXNpdG9yLk5vZGUsXG4gICAgICAgICAgICBTZXE6IHZpc2l0b3IuTm9kZVxuICAgICAgICB9LCB2aXNpdG9yLlZhbHVlICYmIHtcbiAgICAgICAgICAgIE1hcDogdmlzaXRvci5WYWx1ZSxcbiAgICAgICAgICAgIFNjYWxhcjogdmlzaXRvci5WYWx1ZSxcbiAgICAgICAgICAgIFNlcTogdmlzaXRvci5WYWx1ZVxuICAgICAgICB9LCB2aXNpdG9yLkNvbGxlY3Rpb24gJiYge1xuICAgICAgICAgICAgTWFwOiB2aXNpdG9yLkNvbGxlY3Rpb24sXG4gICAgICAgICAgICBTZXE6IHZpc2l0b3IuQ29sbGVjdGlvblxuICAgICAgICB9LCB2aXNpdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHZpc2l0b3I7XG59XG5mdW5jdGlvbiBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpIHtcbiAgICBpZiAodHlwZW9mIHZpc2l0b3IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB2aXNpdG9yKGtleSwgbm9kZSwgcGF0aCk7XG4gICAgaWYgKGlzTWFwKG5vZGUpKVxuICAgICAgICByZXR1cm4gdmlzaXRvci5NYXA/LihrZXksIG5vZGUsIHBhdGgpO1xuICAgIGlmIChpc1NlcShub2RlKSlcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuU2VxPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICBpZiAoaXNQYWlyKG5vZGUpKVxuICAgICAgICByZXR1cm4gdmlzaXRvci5QYWlyPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICBpZiAoaXNTY2FsYXIobm9kZSkpXG4gICAgICAgIHJldHVybiB2aXNpdG9yLlNjYWxhcj8uKGtleSwgbm9kZSwgcGF0aCk7XG4gICAgaWYgKGlzQWxpYXMobm9kZSkpXG4gICAgICAgIHJldHVybiB2aXNpdG9yLkFsaWFzPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gcmVwbGFjZU5vZGUoa2V5LCBwYXRoLCBub2RlKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIGlmIChpc0NvbGxlY3Rpb24ocGFyZW50KSkge1xuICAgICAgICBwYXJlbnQuaXRlbXNba2V5XSA9IG5vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGFpcihwYXJlbnQpKSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdrZXknKVxuICAgICAgICAgICAgcGFyZW50LmtleSA9IG5vZGU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBhcmVudC52YWx1ZSA9IG5vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRG9jdW1lbnQocGFyZW50KSkge1xuICAgICAgICBwYXJlbnQuY29udGVudHMgPSBub2RlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcHQgPSBpc0FsaWFzKHBhcmVudCkgPyAnYWxpYXMnIDogJ3NjYWxhcic7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlcGxhY2Ugbm9kZSB3aXRoICR7cHR9IHBhcmVudGApO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgdmlzaXQsIHZpc2l0QXN5bmMgfTtcbiIsImltcG9ydCB7IGlzTm9kZSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IHZpc2l0IH0gZnJvbSAnLi4vdmlzaXQuanMnO1xuXG5jb25zdCBlc2NhcGVDaGFycyA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgICcsJzogJyUyQycsXG4gICAgJ1snOiAnJTVCJyxcbiAgICAnXSc6ICclNUQnLFxuICAgICd7JzogJyU3QicsXG4gICAgJ30nOiAnJTdEJ1xufTtcbmNvbnN0IGVzY2FwZVRhZ05hbWUgPSAodG4pID0+IHRuLnJlcGxhY2UoL1shLFtcXF17fV0vZywgY2ggPT4gZXNjYXBlQ2hhcnNbY2hdKTtcbmNsYXNzIERpcmVjdGl2ZXMge1xuICAgIGNvbnN0cnVjdG9yKHlhbWwsIHRhZ3MpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkaXJlY3RpdmVzLWVuZC9kb2Mtc3RhcnQgbWFya2VyIGAtLS1gLiBJZiBgbnVsbGAsIGEgbWFya2VyIG1heSBzdGlsbCBiZVxuICAgICAgICAgKiBpbmNsdWRlZCBpbiB0aGUgZG9jdW1lbnQncyBzdHJpbmdpZmllZCByZXByZXNlbnRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZG9jU3RhcnQgPSBudWxsO1xuICAgICAgICAvKiogVGhlIGRvYy1lbmQgbWFya2VyIGAuLi5gLiAgKi9cbiAgICAgICAgdGhpcy5kb2NFbmQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy55YW1sID0gT2JqZWN0LmFzc2lnbih7fSwgRGlyZWN0aXZlcy5kZWZhdWx0WWFtbCwgeWFtbCk7XG4gICAgICAgIHRoaXMudGFncyA9IE9iamVjdC5hc3NpZ24oe30sIERpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MsIHRhZ3MpO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IG5ldyBEaXJlY3RpdmVzKHRoaXMueWFtbCwgdGhpcy50YWdzKTtcbiAgICAgICAgY29weS5kb2NTdGFydCA9IHRoaXMuZG9jU3RhcnQ7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEdXJpbmcgcGFyc2luZywgZ2V0IGEgRGlyZWN0aXZlcyBpbnN0YW5jZSBmb3IgdGhlIGN1cnJlbnQgZG9jdW1lbnQgYW5kXG4gICAgICogdXBkYXRlIHRoZSBzdHJlYW0gc3RhdGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHZlcnNpb24ncyBzcGVjLlxuICAgICAqL1xuICAgIGF0RG9jdW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IG5ldyBEaXJlY3RpdmVzKHRoaXMueWFtbCwgdGhpcy50YWdzKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnlhbWwudmVyc2lvbikge1xuICAgICAgICAgICAgY2FzZSAnMS4xJzpcbiAgICAgICAgICAgICAgICB0aGlzLmF0TmV4dERvY3VtZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzEuMic6XG4gICAgICAgICAgICAgICAgdGhpcy5hdE5leHREb2N1bWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMueWFtbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZXhwbGljaXQ6IERpcmVjdGl2ZXMuZGVmYXVsdFlhbWwuZXhwbGljaXQsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246ICcxLjInXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBEaXJlY3RpdmVzLmRlZmF1bHRUYWdzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb25FcnJvciAtIE1heSBiZSBjYWxsZWQgZXZlbiBpZiB0aGUgYWN0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAgICogQHJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBhZGQobGluZSwgb25FcnJvcikge1xuICAgICAgICBpZiAodGhpcy5hdE5leHREb2N1bWVudCkge1xuICAgICAgICAgICAgdGhpcy55YW1sID0geyBleHBsaWNpdDogRGlyZWN0aXZlcy5kZWZhdWx0WWFtbC5leHBsaWNpdCwgdmVyc2lvbjogJzEuMScgfTtcbiAgICAgICAgICAgIHRoaXMudGFncyA9IE9iamVjdC5hc3NpZ24oe30sIERpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MpO1xuICAgICAgICAgICAgdGhpcy5hdE5leHREb2N1bWVudCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnRzID0gbGluZS50cmltKCkuc3BsaXQoL1sgXFx0XSsvKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnJVRBRyc6IHtcbiAgICAgICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoMCwgJyVUQUcgZGlyZWN0aXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgdHdvIHBhcnRzJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPCAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBbaGFuZGxlLCBwcmVmaXhdID0gcGFydHM7XG4gICAgICAgICAgICAgICAgdGhpcy50YWdzW2hhbmRsZV0gPSBwcmVmaXg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICclWUFNTCc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnlhbWwuZXhwbGljaXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcigwLCAnJVlBTUwgZGlyZWN0aXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHBhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBbdmVyc2lvbl0gPSBwYXJ0cztcbiAgICAgICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gJzEuMScgfHwgdmVyc2lvbiA9PT0gJzEuMicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55YW1sLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSAvXlxcZCtcXC5cXGQrJC8udGVzdCh2ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcig2LCBgVW5zdXBwb3J0ZWQgWUFNTCB2ZXJzaW9uICR7dmVyc2lvbn1gLCBpc1ZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgb25FcnJvcigwLCBgVW5rbm93biBkaXJlY3RpdmUgJHtuYW1lfWAsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyBhIHRhZywgbWF0Y2hpbmcgaGFuZGxlcyB0byB0aG9zZSBkZWZpbmVkIGluICVUQUcgZGlyZWN0aXZlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlc29sdmVkIHRhZywgd2hpY2ggbWF5IGFsc28gYmUgdGhlIG5vbi1zcGVjaWZpYyB0YWcgYCchJ2Agb3IgYVxuICAgICAqICAgYCchbG9jYWwnYCB0YWcsIG9yIGBudWxsYCBpZiB1bnJlc29sdmFibGUuXG4gICAgICovXG4gICAgdGFnTmFtZShzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gJyEnKVxuICAgICAgICAgICAgcmV0dXJuICchJzsgLy8gbm9uLXNwZWNpZmljIHRhZ1xuICAgICAgICBpZiAoc291cmNlWzBdICE9PSAnIScpIHtcbiAgICAgICAgICAgIG9uRXJyb3IoYE5vdCBhIHZhbGlkIHRhZzogJHtzb3VyY2V9YCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlWzFdID09PSAnPCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHZlcmJhdGltID0gc291cmNlLnNsaWNlKDIsIC0xKTtcbiAgICAgICAgICAgIGlmICh2ZXJiYXRpbSA9PT0gJyEnIHx8IHZlcmJhdGltID09PSAnISEnKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihgVmVyYmF0aW0gdGFncyBhcmVuJ3QgcmVzb2x2ZWQsIHNvICR7c291cmNlfSBpcyBpbnZhbGlkLmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNvdXJjZVtzb3VyY2UubGVuZ3RoIC0gMV0gIT09ICc+JylcbiAgICAgICAgICAgICAgICBvbkVycm9yKCdWZXJiYXRpbSB0YWdzIG11c3QgZW5kIHdpdGggYSA+Jyk7XG4gICAgICAgICAgICByZXR1cm4gdmVyYmF0aW07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgWywgaGFuZGxlLCBzdWZmaXhdID0gc291cmNlLm1hdGNoKC9eKC4qISkoW14hXSopJC9zKTtcbiAgICAgICAgaWYgKCFzdWZmaXgpXG4gICAgICAgICAgICBvbkVycm9yKGBUaGUgJHtzb3VyY2V9IHRhZyBoYXMgbm8gc3VmZml4YCk7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHRoaXMudGFnc1toYW5kbGVdO1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyBkZWNvZGVVUklDb21wb25lbnQoc3VmZml4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZSA9PT0gJyEnKVxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTsgLy8gbG9jYWwgdGFnXG4gICAgICAgIG9uRXJyb3IoYENvdWxkIG5vdCByZXNvbHZlIHRhZzogJHtzb3VyY2V9YCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIGZ1bGx5IHJlc29sdmVkIHRhZywgcmV0dXJucyBpdHMgcHJpbnRhYmxlIHN0cmluZyBmb3JtLFxuICAgICAqIHRha2luZyBpbnRvIGFjY291bnQgY3VycmVudCB0YWcgcHJlZml4ZXMgYW5kIGRlZmF1bHRzLlxuICAgICAqL1xuICAgIHRhZ1N0cmluZyh0YWcpIHtcbiAgICAgICAgZm9yIChjb25zdCBbaGFuZGxlLCBwcmVmaXhdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMudGFncykpIHtcbiAgICAgICAgICAgIGlmICh0YWcuc3RhcnRzV2l0aChwcmVmaXgpKVxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUgKyBlc2NhcGVUYWdOYW1lKHRhZy5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWdbMF0gPT09ICchJyA/IHRhZyA6IGAhPCR7dGFnfT5gO1xuICAgIH1cbiAgICB0b1N0cmluZyhkb2MpIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSB0aGlzLnlhbWwuZXhwbGljaXRcbiAgICAgICAgICAgID8gW2AlWUFNTCAke3RoaXMueWFtbC52ZXJzaW9uIHx8ICcxLjInfWBdXG4gICAgICAgICAgICA6IFtdO1xuICAgICAgICBjb25zdCB0YWdFbnRyaWVzID0gT2JqZWN0LmVudHJpZXModGhpcy50YWdzKTtcbiAgICAgICAgbGV0IHRhZ05hbWVzO1xuICAgICAgICBpZiAoZG9jICYmIHRhZ0VudHJpZXMubGVuZ3RoID4gMCAmJiBpc05vZGUoZG9jLmNvbnRlbnRzKSkge1xuICAgICAgICAgICAgY29uc3QgdGFncyA9IHt9O1xuICAgICAgICAgICAgdmlzaXQoZG9jLmNvbnRlbnRzLCAoX2tleSwgbm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc05vZGUobm9kZSkgJiYgbm9kZS50YWcpXG4gICAgICAgICAgICAgICAgICAgIHRhZ3Nbbm9kZS50YWddID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFnTmFtZXMgPSBPYmplY3Qua2V5cyh0YWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0YWdOYW1lcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IFtoYW5kbGUsIHByZWZpeF0gb2YgdGFnRW50cmllcykge1xuICAgICAgICAgICAgaWYgKGhhbmRsZSA9PT0gJyEhJyAmJiBwcmVmaXggPT09ICd0YWc6eWFtbC5vcmcsMjAwMjonKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCFkb2MgfHwgdGFnTmFtZXMuc29tZSh0biA9PiB0bi5zdGFydHNXaXRoKHByZWZpeCkpKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goYCVUQUcgJHtoYW5kbGV9ICR7cHJlZml4fWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICB9XG59XG5EaXJlY3RpdmVzLmRlZmF1bHRZYW1sID0geyBleHBsaWNpdDogZmFsc2UsIHZlcnNpb246ICcxLjInIH07XG5EaXJlY3RpdmVzLmRlZmF1bHRUYWdzID0geyAnISEnOiAndGFnOnlhbWwub3JnLDIwMDI6JyB9O1xuXG5leHBvcnQgeyBEaXJlY3RpdmVzIH07XG4iLCJpbXBvcnQgeyBpc1NjYWxhciwgaXNDb2xsZWN0aW9uIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tICcuLi92aXNpdC5qcyc7XG5cbi8qKlxuICogVmVyaWZ5IHRoYXQgdGhlIGlucHV0IHN0cmluZyBpcyBhIHZhbGlkIGFuY2hvci5cbiAqXG4gKiBXaWxsIHRocm93IG9uIGVycm9ycy5cbiAqL1xuZnVuY3Rpb24gYW5jaG9ySXNWYWxpZChhbmNob3IpIHtcbiAgICBpZiAoL1tcXHgwMC1cXHgxOVxccyxbXFxde31dLy50ZXN0KGFuY2hvcikpIHtcbiAgICAgICAgY29uc3Qgc2EgPSBKU09OLnN0cmluZ2lmeShhbmNob3IpO1xuICAgICAgICBjb25zdCBtc2cgPSBgQW5jaG9yIG11c3Qgbm90IGNvbnRhaW4gd2hpdGVzcGFjZSBvciBjb250cm9sIGNoYXJhY3RlcnM6ICR7c2F9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gYW5jaG9yTmFtZXMocm9vdCkge1xuICAgIGNvbnN0IGFuY2hvcnMgPSBuZXcgU2V0KCk7XG4gICAgdmlzaXQocm9vdCwge1xuICAgICAgICBWYWx1ZShfa2V5LCBub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5hbmNob3IpXG4gICAgICAgICAgICAgICAgYW5jaG9ycy5hZGQobm9kZS5hbmNob3IpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFuY2hvcnM7XG59XG4vKiogRmluZCBhIG5ldyBhbmNob3IgbmFtZSB3aXRoIHRoZSBnaXZlbiBgcHJlZml4YCBhbmQgYSBvbmUtaW5kZXhlZCBzdWZmaXguICovXG5mdW5jdGlvbiBmaW5kTmV3QW5jaG9yKHByZWZpeCwgZXhjbHVkZSkge1xuICAgIGZvciAobGV0IGkgPSAxOyB0cnVlOyArK2kpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGAke3ByZWZpeH0ke2l9YDtcbiAgICAgICAgaWYgKCFleGNsdWRlLmhhcyhuYW1lKSlcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVBbmNob3JzKGRvYywgcHJlZml4KSB7XG4gICAgY29uc3QgYWxpYXNPYmplY3RzID0gW107XG4gICAgY29uc3Qgc291cmNlT2JqZWN0cyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgcHJldkFuY2hvcnMgPSBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9uQW5jaG9yOiAoc291cmNlKSA9PiB7XG4gICAgICAgICAgICBhbGlhc09iamVjdHMucHVzaChzb3VyY2UpO1xuICAgICAgICAgICAgaWYgKCFwcmV2QW5jaG9ycylcbiAgICAgICAgICAgICAgICBwcmV2QW5jaG9ycyA9IGFuY2hvck5hbWVzKGRvYyk7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBmaW5kTmV3QW5jaG9yKHByZWZpeCwgcHJldkFuY2hvcnMpO1xuICAgICAgICAgICAgcHJldkFuY2hvcnMuYWRkKGFuY2hvcik7XG4gICAgICAgICAgICByZXR1cm4gYW5jaG9yO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogV2l0aCBjaXJjdWxhciByZWZlcmVuY2VzLCB0aGUgc291cmNlIG5vZGUgaXMgb25seSByZXNvbHZlZCBhZnRlciBhbGxcbiAgICAgICAgICogb2YgaXRzIGNoaWxkIG5vZGVzIGFyZS4gVGhpcyBpcyB3aHkgYW5jaG9ycyBhcmUgc2V0IG9ubHkgYWZ0ZXIgYWxsIG9mXG4gICAgICAgICAqIHRoZSBub2RlcyBoYXZlIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHNldEFuY2hvcnM6ICgpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc291cmNlIG9mIGFsaWFzT2JqZWN0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZiA9IHNvdXJjZU9iamVjdHMuZ2V0KHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAgICAgICAgIHJlZi5hbmNob3IgJiZcbiAgICAgICAgICAgICAgICAgICAgKGlzU2NhbGFyKHJlZi5ub2RlKSB8fCBpc0NvbGxlY3Rpb24ocmVmLm5vZGUpKSkge1xuICAgICAgICAgICAgICAgICAgICByZWYubm9kZS5hbmNob3IgPSByZWYuYW5jaG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZXNvbHZlIHJlcGVhdGVkIG9iamVjdCAodGhpcyBzaG91bGQgbm90IGhhcHBlbiknKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3Iuc291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNvdXJjZU9iamVjdHNcbiAgICB9O1xufVxuXG5leHBvcnQgeyBhbmNob3JJc1ZhbGlkLCBhbmNob3JOYW1lcywgY3JlYXRlTm9kZUFuY2hvcnMsIGZpbmROZXdBbmNob3IgfTtcbiIsIi8qKlxuICogQXBwbGllcyB0aGUgSlNPTi5wYXJzZSByZXZpdmVyIGFsZ29yaXRobSBhcyBkZWZpbmVkIGluIHRoZSBFQ01BLTI2MiBzcGVjLFxuICogaW4gc2VjdGlvbiAyNC41LjEuMSBcIlJ1bnRpbWUgU2VtYW50aWNzOiBJbnRlcm5hbGl6ZUpTT05Qcm9wZXJ0eVwiIG9mIHRoZVxuICogMjAyMSBlZGl0aW9uOiBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24ucGFyc2VcbiAqXG4gKiBJbmNsdWRlcyBleHRlbnNpb25zIGZvciBoYW5kbGluZyBNYXAgYW5kIFNldCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBhcHBseVJldml2ZXIocmV2aXZlciwgb2JqLCBrZXksIHZhbCkge1xuICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYwID0gdmFsW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHYxID0gYXBwbHlSZXZpdmVyKHJldml2ZXIsIHZhbCwgU3RyaW5nKGkpLCB2MCk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1hcnJheS1kZWxldGVcbiAgICAgICAgICAgICAgICBpZiAodjEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHZhbFtpXTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApXG4gICAgICAgICAgICAgICAgICAgIHZhbFtpXSA9IHYxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrIG9mIEFycmF5LmZyb20odmFsLmtleXMoKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2MCA9IHZhbC5nZXQoayk7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCBrLCB2MCk7XG4gICAgICAgICAgICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHZhbC5kZWxldGUoayk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodjEgIT09IHYwKVxuICAgICAgICAgICAgICAgICAgICB2YWwuc2V0KGssIHYxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWwgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdjAgb2YgQXJyYXkuZnJvbSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCB2MCwgdjApO1xuICAgICAgICAgICAgICAgIGlmICh2MSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB2YWwuZGVsZXRlKHYwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsLmRlbGV0ZSh2MCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbC5hZGQodjEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2ssIHYwXSBvZiBPYmplY3QuZW50cmllcyh2YWwpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCBrLCB2MCk7XG4gICAgICAgICAgICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWxba107XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodjEgIT09IHYwKVxuICAgICAgICAgICAgICAgICAgICB2YWxba10gPSB2MTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV2aXZlci5jYWxsKG9iaiwga2V5LCB2YWwpO1xufVxuXG5leHBvcnQgeyBhcHBseVJldml2ZXIgfTtcbiIsImltcG9ydCB7IGhhc0FuY2hvciB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgYW55IG5vZGUgb3IgaXRzIGNvbnRlbnRzIHRvIG5hdGl2ZSBKYXZhU2NyaXB0XG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIGlucHV0IHZhbHVlXG4gKiBAcGFyYW0gYXJnIC0gSWYgYHZhbHVlYCBkZWZpbmVzIGEgYHRvSlNPTigpYCBtZXRob2QsIHVzZSB0aGlzXG4gKiAgIGFzIGl0cyBmaXJzdCBhcmd1bWVudFxuICogQHBhcmFtIGN0eCAtIENvbnZlcnNpb24gY29udGV4dCwgb3JpZ2luYWxseSBzZXQgaW4gRG9jdW1lbnQjdG9KUygpLiBJZlxuICogICBgeyBrZWVwOiB0cnVlIH1gIGlzIG5vdCBzZXQsIG91dHB1dCBzaG91bGQgYmUgc3VpdGFibGUgZm9yIEpTT05cbiAqICAgc3RyaW5naWZpY2F0aW9uLlxuICovXG5mdW5jdGlvbiB0b0pTKHZhbHVlLCBhcmcsIGN0eCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVyblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCgodiwgaSkgPT4gdG9KUyh2LCBTdHJpbmcoaSksIGN0eCkpO1xuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGxcbiAgICAgICAgaWYgKCFjdHggfHwgIWhhc0FuY2hvcih2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9KU09OKGFyZywgY3R4KTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHsgYWxpYXNDb3VudDogMCwgY291bnQ6IDEsIHJlczogdW5kZWZpbmVkIH07XG4gICAgICAgIGN0eC5hbmNob3JzLnNldCh2YWx1ZSwgZGF0YSk7XG4gICAgICAgIGN0eC5vbkNyZWF0ZSA9IHJlcyA9PiB7XG4gICAgICAgICAgICBkYXRhLnJlcyA9IHJlcztcbiAgICAgICAgICAgIGRlbGV0ZSBjdHgub25DcmVhdGU7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IHZhbHVlLnRvSlNPTihhcmcsIGN0eCk7XG4gICAgICAgIGlmIChjdHgub25DcmVhdGUpXG4gICAgICAgICAgICBjdHgub25DcmVhdGUocmVzKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgJiYgIWN0eD8ua2VlcClcbiAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgeyB0b0pTIH07XG4iLCJpbXBvcnQgeyBhcHBseVJldml2ZXIgfSBmcm9tICcuLi9kb2MvYXBwbHlSZXZpdmVyLmpzJztcbmltcG9ydCB7IE5PREVfVFlQRSwgaXNEb2N1bWVudCB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4vdG9KUy5qcyc7XG5cbmNsYXNzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBOT0RFX1RZUEUsIHsgdmFsdWU6IHR5cGUgfSk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGUgYSBjb3B5IG9mIHRoaXMgbm9kZS4gICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModGhpcykpO1xuICAgICAgICBpZiAodGhpcy5yYW5nZSlcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSB0aGlzLnJhbmdlLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKiogQSBwbGFpbiBKYXZhU2NyaXB0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgbm9kZS4gKi9cbiAgICB0b0pTKGRvYywgeyBtYXBBc01hcCwgbWF4QWxpYXNDb3VudCwgb25BbmNob3IsIHJldml2ZXIgfSA9IHt9KSB7XG4gICAgICAgIGlmICghaXNEb2N1bWVudChkb2MpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBkb2N1bWVudCBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBhbmNob3JzOiBuZXcgTWFwKCksXG4gICAgICAgICAgICBkb2MsXG4gICAgICAgICAgICBrZWVwOiB0cnVlLFxuICAgICAgICAgICAgbWFwQXNNYXA6IG1hcEFzTWFwID09PSB0cnVlLFxuICAgICAgICAgICAgbWFwS2V5V2FybmVkOiBmYWxzZSxcbiAgICAgICAgICAgIG1heEFsaWFzQ291bnQ6IHR5cGVvZiBtYXhBbGlhc0NvdW50ID09PSAnbnVtYmVyJyA/IG1heEFsaWFzQ291bnQgOiAxMDBcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gdG9KUyh0aGlzLCAnJywgY3R4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBvbkFuY2hvciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBjb3VudCwgcmVzIH0gb2YgY3R4LmFuY2hvcnMudmFsdWVzKCkpXG4gICAgICAgICAgICAgICAgb25BbmNob3IocmVzLCBjb3VudCk7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBhcHBseVJldml2ZXIocmV2aXZlciwgeyAnJzogcmVzIH0sICcnLCByZXMpXG4gICAgICAgICAgICA6IHJlcztcbiAgICB9XG59XG5cbmV4cG9ydCB7IE5vZGVCYXNlIH07XG4iLCJpbXBvcnQgeyBhbmNob3JJc1ZhbGlkIH0gZnJvbSAnLi4vZG9jL2FuY2hvcnMuanMnO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tICcuLi92aXNpdC5qcyc7XG5pbXBvcnQgeyBBTElBUywgaXNBbGlhcywgaXNDb2xsZWN0aW9uLCBpc1BhaXIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IE5vZGVCYXNlIH0gZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuL3RvSlMuanMnO1xuXG5jbGFzcyBBbGlhcyBleHRlbmRzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcbiAgICAgICAgc3VwZXIoQUxJQVMpO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0YWcnLCB7XG4gICAgICAgICAgICBzZXQoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbGlhcyBub2RlcyBjYW5ub3QgaGF2ZSB0YWdzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlIHRoZSB2YWx1ZSBvZiB0aGlzIGFsaWFzIHdpdGhpbiBgZG9jYCwgZmluZGluZyB0aGUgbGFzdFxuICAgICAqIGluc3RhbmNlIG9mIHRoZSBgc291cmNlYCBhbmNob3IgYmVmb3JlIHRoaXMgbm9kZS5cbiAgICAgKi9cbiAgICByZXNvbHZlKGRvYykge1xuICAgICAgICBsZXQgZm91bmQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZpc2l0KGRvYywge1xuICAgICAgICAgICAgTm9kZTogKF9rZXksIG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gdGhpcylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0LkJSRUFLO1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmFuY2hvciA9PT0gdGhpcy5zb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG4gICAgdG9KU09OKF9hcmcsIGN0eCkge1xuICAgICAgICBpZiAoIWN0eClcbiAgICAgICAgICAgIHJldHVybiB7IHNvdXJjZTogdGhpcy5zb3VyY2UgfTtcbiAgICAgICAgY29uc3QgeyBhbmNob3JzLCBkb2MsIG1heEFsaWFzQ291bnQgfSA9IGN0eDtcbiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5yZXNvbHZlKGRvYyk7XG4gICAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgVW5yZXNvbHZlZCBhbGlhcyAodGhlIGFuY2hvciBtdXN0IGJlIHNldCBiZWZvcmUgdGhlIGFsaWFzKTogJHt0aGlzLnNvdXJjZX1gO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRhdGEgPSBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIC8vIFJlc29sdmUgYW5jaG9ycyBmb3IgTm9kZS5wcm90b3R5cGUudG9KUygpXG4gICAgICAgICAgICB0b0pTKHNvdXJjZSwgbnVsbCwgY3R4KTtcbiAgICAgICAgICAgIGRhdGEgPSBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWRhdGEgfHwgZGF0YS5yZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gJ1RoaXMgc2hvdWxkIG5vdCBoYXBwZW46IEFsaWFzIGFuY2hvciB3YXMgbm90IHJlc29sdmVkPyc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IobXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4QWxpYXNDb3VudCA+PSAwKSB7XG4gICAgICAgICAgICBkYXRhLmNvdW50ICs9IDE7XG4gICAgICAgICAgICBpZiAoZGF0YS5hbGlhc0NvdW50ID09PSAwKVxuICAgICAgICAgICAgICAgIGRhdGEuYWxpYXNDb3VudCA9IGdldEFsaWFzQ291bnQoZG9jLCBzb3VyY2UsIGFuY2hvcnMpO1xuICAgICAgICAgICAgaWYgKGRhdGEuY291bnQgKiBkYXRhLmFsaWFzQ291bnQgPiBtYXhBbGlhc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gJ0V4Y2Vzc2l2ZSBhbGlhcyBjb3VudCBpbmRpY2F0ZXMgYSByZXNvdXJjZSBleGhhdXN0aW9uIGF0dGFjayc7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGEucmVzO1xuICAgIH1cbiAgICB0b1N0cmluZyhjdHgsIF9vbkNvbW1lbnQsIF9vbkNob21wS2VlcCkge1xuICAgICAgICBjb25zdCBzcmMgPSBgKiR7dGhpcy5zb3VyY2V9YDtcbiAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgYW5jaG9ySXNWYWxpZCh0aGlzLnNvdXJjZSk7XG4gICAgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMudmVyaWZ5QWxpYXNPcmRlciAmJiAhY3R4LmFuY2hvcnMuaGFzKHRoaXMuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IGBVbnJlc29sdmVkIGFsaWFzICh0aGUgYW5jaG9yIG11c3QgYmUgc2V0IGJlZm9yZSB0aGUgYWxpYXMpOiAke3RoaXMuc291cmNlfWA7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3R4LmltcGxpY2l0S2V5KVxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtzcmN9IGA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNyYztcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRBbGlhc0NvdW50KGRvYywgbm9kZSwgYW5jaG9ycykge1xuICAgIGlmIChpc0FsaWFzKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IG5vZGUucmVzb2x2ZShkb2MpO1xuICAgICAgICBjb25zdCBhbmNob3IgPSBhbmNob3JzICYmIHNvdXJjZSAmJiBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICByZXR1cm4gYW5jaG9yID8gYW5jaG9yLmNvdW50ICogYW5jaG9yLmFsaWFzQ291bnQgOiAwO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpIHtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIG5vZGUuaXRlbXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBnZXRBbGlhc0NvdW50KGRvYywgaXRlbSwgYW5jaG9ycyk7XG4gICAgICAgICAgICBpZiAoYyA+IGNvdW50KVxuICAgICAgICAgICAgICAgIGNvdW50ID0gYztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGFpcihub2RlKSkge1xuICAgICAgICBjb25zdCBrYyA9IGdldEFsaWFzQ291bnQoZG9jLCBub2RlLmtleSwgYW5jaG9ycyk7XG4gICAgICAgIGNvbnN0IHZjID0gZ2V0QWxpYXNDb3VudChkb2MsIG5vZGUudmFsdWUsIGFuY2hvcnMpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoa2MsIHZjKTtcbiAgICB9XG4gICAgcmV0dXJuIDE7XG59XG5cbmV4cG9ydCB7IEFsaWFzIH07XG4iLCJpbXBvcnQgeyBTQ0FMQVIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IE5vZGVCYXNlIH0gZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuL3RvSlMuanMnO1xuXG5jb25zdCBpc1NjYWxhclZhbHVlID0gKHZhbHVlKSA9PiAhdmFsdWUgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKTtcbmNsYXNzIFNjYWxhciBleHRlbmRzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICBzdXBlcihTQ0FMQVIpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIHRvSlNPTihhcmcsIGN0eCkge1xuICAgICAgICByZXR1cm4gY3R4Py5rZWVwID8gdGhpcy52YWx1ZSA6IHRvSlModGhpcy52YWx1ZSwgYXJnLCBjdHgpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLnZhbHVlKTtcbiAgICB9XG59XG5TY2FsYXIuQkxPQ0tfRk9MREVEID0gJ0JMT0NLX0ZPTERFRCc7XG5TY2FsYXIuQkxPQ0tfTElURVJBTCA9ICdCTE9DS19MSVRFUkFMJztcblNjYWxhci5QTEFJTiA9ICdQTEFJTic7XG5TY2FsYXIuUVVPVEVfRE9VQkxFID0gJ1FVT1RFX0RPVUJMRSc7XG5TY2FsYXIuUVVPVEVfU0lOR0xFID0gJ1FVT1RFX1NJTkdMRSc7XG5cbmV4cG9ydCB7IFNjYWxhciwgaXNTY2FsYXJWYWx1ZSB9O1xuIiwiaW1wb3J0IHsgQWxpYXMgfSBmcm9tICcuLi9ub2Rlcy9BbGlhcy5qcyc7XG5pbXBvcnQgeyBpc05vZGUsIGlzUGFpciwgTUFQLCBTRVEsIGlzRG9jdW1lbnQgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5jb25zdCBkZWZhdWx0VGFnUHJlZml4ID0gJ3RhZzp5YW1sLm9yZywyMDAyOic7XG5mdW5jdGlvbiBmaW5kVGFnT2JqZWN0KHZhbHVlLCB0YWdOYW1lLCB0YWdzKSB7XG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0YWdzLmZpbHRlcih0ID0+IHQudGFnID09PSB0YWdOYW1lKTtcbiAgICAgICAgY29uc3QgdGFnT2JqID0gbWF0Y2guZmluZCh0ID0+ICF0LmZvcm1hdCkgPz8gbWF0Y2hbMF07XG4gICAgICAgIGlmICghdGFnT2JqKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUYWcgJHt0YWdOYW1lfSBub3QgZm91bmRgKTtcbiAgICAgICAgcmV0dXJuIHRhZ09iajtcbiAgICB9XG4gICAgcmV0dXJuIHRhZ3MuZmluZCh0ID0+IHQuaWRlbnRpZnk/Lih2YWx1ZSkgJiYgIXQuZm9ybWF0KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU5vZGUodmFsdWUsIHRhZ05hbWUsIGN0eCkge1xuICAgIGlmIChpc0RvY3VtZW50KHZhbHVlKSlcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5jb250ZW50cztcbiAgICBpZiAoaXNOb2RlKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGlmIChpc1BhaXIodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IGN0eC5zY2hlbWFbTUFQXS5jcmVhdGVOb2RlPy4oY3R4LnNjaGVtYSwgbnVsbCwgY3R4KTtcbiAgICAgICAgbWFwLml0ZW1zLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcgfHxcbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIgfHxcbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuIHx8XG4gICAgICAgICh0eXBlb2YgQmlnSW50ICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEJpZ0ludCkgLy8gbm90IHN1cHBvcnRlZCBldmVyeXdoZXJlXG4gICAgKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2VyaWFsaXplanNvbnByb3BlcnR5XG4gICAgICAgIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgIH1cbiAgICBjb25zdCB7IGFsaWFzRHVwbGljYXRlT2JqZWN0cywgb25BbmNob3IsIG9uVGFnT2JqLCBzY2hlbWEsIHNvdXJjZU9iamVjdHMgfSA9IGN0eDtcbiAgICAvLyBEZXRlY3QgZHVwbGljYXRlIHJlZmVyZW5jZXMgdG8gdGhlIHNhbWUgb2JqZWN0ICYgdXNlIEFsaWFzIG5vZGVzIGZvciBhbGxcbiAgICAvLyBhZnRlciBmaXJzdC4gVGhlIGByZWZgIHdyYXBwZXIgYWxsb3dzIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIHRvIHJlc29sdmUuXG4gICAgbGV0IHJlZiA9IHVuZGVmaW5lZDtcbiAgICBpZiAoYWxpYXNEdXBsaWNhdGVPYmplY3RzICYmIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmVmID0gc291cmNlT2JqZWN0cy5nZXQodmFsdWUpO1xuICAgICAgICBpZiAocmVmKSB7XG4gICAgICAgICAgICBpZiAoIXJlZi5hbmNob3IpXG4gICAgICAgICAgICAgICAgcmVmLmFuY2hvciA9IG9uQW5jaG9yKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWxpYXMocmVmLmFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWYgPSB7IGFuY2hvcjogbnVsbCwgbm9kZTogbnVsbCB9O1xuICAgICAgICAgICAgc291cmNlT2JqZWN0cy5zZXQodmFsdWUsIHJlZik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRhZ05hbWU/LnN0YXJ0c1dpdGgoJyEhJykpXG4gICAgICAgIHRhZ05hbWUgPSBkZWZhdWx0VGFnUHJlZml4ICsgdGFnTmFtZS5zbGljZSgyKTtcbiAgICBsZXQgdGFnT2JqID0gZmluZFRhZ09iamVjdCh2YWx1ZSwgdGFnTmFtZSwgc2NoZW1hLnRhZ3MpO1xuICAgIGlmICghdGFnT2JqKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1jYWxsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBTY2FsYXIodmFsdWUpO1xuICAgICAgICAgICAgaWYgKHJlZilcbiAgICAgICAgICAgICAgICByZWYubm9kZSA9IG5vZGU7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICB0YWdPYmogPVxuICAgICAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBNYXBcbiAgICAgICAgICAgICAgICA/IHNjaGVtYVtNQVBdXG4gICAgICAgICAgICAgICAgOiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA/IHNjaGVtYVtTRVFdXG4gICAgICAgICAgICAgICAgICAgIDogc2NoZW1hW01BUF07XG4gICAgfVxuICAgIGlmIChvblRhZ09iaikge1xuICAgICAgICBvblRhZ09iaih0YWdPYmopO1xuICAgICAgICBkZWxldGUgY3R4Lm9uVGFnT2JqO1xuICAgIH1cbiAgICBjb25zdCBub2RlID0gdGFnT2JqPy5jcmVhdGVOb2RlXG4gICAgICAgID8gdGFnT2JqLmNyZWF0ZU5vZGUoY3R4LnNjaGVtYSwgdmFsdWUsIGN0eClcbiAgICAgICAgOiB0eXBlb2YgdGFnT2JqPy5ub2RlQ2xhc3M/LmZyb20gPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gdGFnT2JqLm5vZGVDbGFzcy5mcm9tKGN0eC5zY2hlbWEsIHZhbHVlLCBjdHgpXG4gICAgICAgICAgICA6IG5ldyBTY2FsYXIodmFsdWUpO1xuICAgIGlmICh0YWdOYW1lKVxuICAgICAgICBub2RlLnRhZyA9IHRhZ05hbWU7XG4gICAgZWxzZSBpZiAoIXRhZ09iai5kZWZhdWx0KVxuICAgICAgICBub2RlLnRhZyA9IHRhZ09iai50YWc7XG4gICAgaWYgKHJlZilcbiAgICAgICAgcmVmLm5vZGUgPSBub2RlO1xuICAgIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgeyBjcmVhdGVOb2RlIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVOb2RlIH0gZnJvbSAnLi4vZG9jL2NyZWF0ZU5vZGUuanMnO1xuaW1wb3J0IHsgaXNOb2RlLCBpc1BhaXIsIGlzQ29sbGVjdGlvbiwgaXNTY2FsYXIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IE5vZGVCYXNlIH0gZnJvbSAnLi9Ob2RlLmpzJztcblxuZnVuY3Rpb24gY29sbGVjdGlvbkZyb21QYXRoKHNjaGVtYSwgcGF0aCwgdmFsdWUpIHtcbiAgICBsZXQgdiA9IHZhbHVlO1xuICAgIGZvciAobGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGNvbnN0IGsgPSBwYXRoW2ldO1xuICAgICAgICBpZiAodHlwZW9mIGsgPT09ICdudW1iZXInICYmIE51bWJlci5pc0ludGVnZXIoaykgJiYgayA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBhID0gW107XG4gICAgICAgICAgICBhW2tdID0gdjtcbiAgICAgICAgICAgIHYgPSBhO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdiA9IG5ldyBNYXAoW1trLCB2XV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVOb2RlKHYsIHVuZGVmaW5lZCwge1xuICAgICAgICBhbGlhc0R1cGxpY2F0ZU9iamVjdHM6IGZhbHNlLFxuICAgICAgICBrZWVwVW5kZWZpbmVkOiBmYWxzZSxcbiAgICAgICAgb25BbmNob3I6ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBzaG91bGQgbm90IGhhcHBlbiwgcGxlYXNlIHJlcG9ydCBhIGJ1Zy4nKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBzb3VyY2VPYmplY3RzOiBuZXcgTWFwKClcbiAgICB9KTtcbn1cbi8vIFR5cGUgZ3VhcmQgaXMgaW50ZW50aW9uYWxseSBhIGxpdHRsZSB3cm9uZyBzbyBhcyB0byBiZSBtb3JlIHVzZWZ1bCxcbi8vIGFzIGl0IGRvZXMgbm90IGNvdmVyIHVudHlwYWJsZSBlbXB0eSBub24tc3RyaW5nIGl0ZXJhYmxlcyAoZS5nLiBbXSkuXG5jb25zdCBpc0VtcHR5UGF0aCA9IChwYXRoKSA9PiBwYXRoID09IG51bGwgfHxcbiAgICAodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmICEhcGF0aFtTeW1ib2wuaXRlcmF0b3JdKCkubmV4dCgpLmRvbmUpO1xuY2xhc3MgQ29sbGVjdGlvbiBleHRlbmRzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBzY2hlbWEpIHtcbiAgICAgICAgc3VwZXIodHlwZSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NoZW1hJywge1xuICAgICAgICAgICAgdmFsdWU6IHNjaGVtYSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvcHkgb2YgdGhpcyBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjaGVtYSAtIElmIGRlZmluZWQsIG92ZXJ3cml0ZXMgdGhlIG9yaWdpbmFsJ3Mgc2NoZW1hXG4gICAgICovXG4gICAgY2xvbmUoc2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModGhpcykpO1xuICAgICAgICBpZiAoc2NoZW1hKVxuICAgICAgICAgICAgY29weS5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgIGNvcHkuaXRlbXMgPSBjb3B5Lml0ZW1zLm1hcChpdCA9PiBpc05vZGUoaXQpIHx8IGlzUGFpcihpdCkgPyBpdC5jbG9uZShzY2hlbWEpIDogaXQpO1xuICAgICAgICBpZiAodGhpcy5yYW5nZSlcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSB0aGlzLnJhbmdlLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgdmFsdWUgdG8gdGhlIGNvbGxlY3Rpb24uIEZvciBgISFtYXBgIGFuZCBgISFvbWFwYCB0aGUgdmFsdWUgbXVzdFxuICAgICAqIGJlIGEgUGFpciBpbnN0YW5jZSBvciBhIGB7IGtleSwgdmFsdWUgfWAgb2JqZWN0LCB3aGljaCBtYXkgbm90IGhhdmUgYSBrZXlcbiAgICAgKiB0aGF0IGFscmVhZHkgZXhpc3RzIGluIHRoZSBtYXAuXG4gICAgICovXG4gICAgYWRkSW4ocGF0aCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzRW1wdHlQYXRoKHBhdGgpKVxuICAgICAgICAgICAgdGhpcy5hZGQodmFsdWUpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICAgICAgaWYgKGlzQ29sbGVjdGlvbihub2RlKSlcbiAgICAgICAgICAgICAgICBub2RlLmFkZEluKHJlc3QsIHZhbHVlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLnNjaGVtYSlcbiAgICAgICAgICAgICAgICB0aGlzLnNldChrZXksIGNvbGxlY3Rpb25Gcm9tUGF0aCh0aGlzLnNjaGVtYSwgcmVzdCwgdmFsdWUpKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFlBTUwgY29sbGVjdGlvbiBhdCAke2tleX0uIFJlbWFpbmluZyBwYXRoOiAke3Jlc3R9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBpdGVtIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBkZWxldGVJbihwYXRoKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgaWYgKHJlc3QubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlKGtleSk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICBpZiAoaXNDb2xsZWN0aW9uKG5vZGUpKVxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuZGVsZXRlSW4ocmVzdCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgWUFNTCBjb2xsZWN0aW9uIGF0ICR7a2V5fS4gUmVtYWluaW5nIHBhdGg6ICR7cmVzdH1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpdGVtIGF0IGBrZXlgLCBvciBgdW5kZWZpbmVkYCBpZiBub3QgZm91bmQuIEJ5IGRlZmF1bHQgdW53cmFwc1xuICAgICAqIHNjYWxhciB2YWx1ZXMgZnJvbSB0aGVpciBzdXJyb3VuZGluZyBub2RlOyB0byBkaXNhYmxlIHNldCBga2VlcFNjYWxhcmAgdG9cbiAgICAgKiBgdHJ1ZWAgKGNvbGxlY3Rpb25zIGFyZSBhbHdheXMgcmV0dXJuZWQgaW50YWN0KS5cbiAgICAgKi9cbiAgICBnZXRJbihwYXRoLCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0KGtleSwgdHJ1ZSk7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiAha2VlcFNjYWxhciAmJiBpc1NjYWxhcihub2RlKSA/IG5vZGUudmFsdWUgOiBub2RlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKG5vZGUpID8gbm9kZS5nZXRJbihyZXN0LCBrZWVwU2NhbGFyKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaGFzQWxsTnVsbFZhbHVlcyhhbGxvd1NjYWxhcikge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5ldmVyeShub2RlID0+IHtcbiAgICAgICAgICAgIGlmICghaXNQYWlyKG5vZGUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBub2RlLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIChuID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAoYWxsb3dTY2FsYXIgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNTY2FsYXIobikgJiZcbiAgICAgICAgICAgICAgICAgICAgbi52YWx1ZSA9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICFuLmNvbW1lbnRCZWZvcmUgJiZcbiAgICAgICAgICAgICAgICAgICAgIW4uY29tbWVudCAmJlxuICAgICAgICAgICAgICAgICAgICAhbi50YWcpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY29sbGVjdGlvbiBpbmNsdWRlcyBhIHZhbHVlIHdpdGggdGhlIGtleSBga2V5YC5cbiAgICAgKi9cbiAgICBoYXNJbihwYXRoKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgaWYgKHJlc3QubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzKGtleSk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKG5vZGUpID8gbm9kZS5oYXNJbihyZXN0KSA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgaW4gdGhpcyBjb2xsZWN0aW9uLiBGb3IgYCEhc2V0YCwgYHZhbHVlYCBuZWVkcyB0byBiZSBhXG4gICAgICogYm9vbGVhbiB0byBhZGQvcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIHNldC5cbiAgICAgKi9cbiAgICBzZXRJbihwYXRoLCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XSA9IHBhdGg7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXQoa2V5LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpXG4gICAgICAgICAgICAgICAgbm9kZS5zZXRJbihyZXN0LCB2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlID09PSB1bmRlZmluZWQgJiYgdGhpcy5zY2hlbWEpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCBjb2xsZWN0aW9uRnJvbVBhdGgodGhpcy5zY2hlbWEsIHJlc3QsIHZhbHVlKSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBZQU1MIGNvbGxlY3Rpb24gYXQgJHtrZXl9LiBSZW1haW5pbmcgcGF0aDogJHtyZXN0fWApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBDb2xsZWN0aW9uLCBjb2xsZWN0aW9uRnJvbVBhdGgsIGlzRW1wdHlQYXRoIH07XG4iLCIvKipcbiAqIFN0cmluZ2lmaWVzIGEgY29tbWVudC5cbiAqXG4gKiBFbXB0eSBjb21tZW50IGxpbmVzIGFyZSBsZWZ0IGVtcHR5LFxuICogbGluZXMgY29uc2lzdGluZyBvZiBhIHNpbmdsZSBzcGFjZSBhcmUgcmVwbGFjZWQgYnkgYCNgLFxuICogYW5kIGFsbCBvdGhlciBsaW5lcyBhcmUgcHJlZml4ZWQgd2l0aCBhIGAjYC5cbiAqL1xuY29uc3Qgc3RyaW5naWZ5Q29tbWVudCA9IChzdHIpID0+IHN0ci5yZXBsYWNlKC9eKD8hJCkoPzogJCk/L2dtLCAnIycpO1xuZnVuY3Rpb24gaW5kZW50Q29tbWVudChjb21tZW50LCBpbmRlbnQpIHtcbiAgICBpZiAoL15cXG4rJC8udGVzdChjb21tZW50KSlcbiAgICAgICAgcmV0dXJuIGNvbW1lbnQuc3Vic3RyaW5nKDEpO1xuICAgIHJldHVybiBpbmRlbnQgPyBjb21tZW50LnJlcGxhY2UoL14oPyEgKiQpL2dtLCBpbmRlbnQpIDogY29tbWVudDtcbn1cbmNvbnN0IGxpbmVDb21tZW50ID0gKHN0ciwgaW5kZW50LCBjb21tZW50KSA9PiBzdHIuZW5kc1dpdGgoJ1xcbicpXG4gICAgPyBpbmRlbnRDb21tZW50KGNvbW1lbnQsIGluZGVudClcbiAgICA6IGNvbW1lbnQuaW5jbHVkZXMoJ1xcbicpXG4gICAgICAgID8gJ1xcbicgKyBpbmRlbnRDb21tZW50KGNvbW1lbnQsIGluZGVudClcbiAgICAgICAgOiAoc3RyLmVuZHNXaXRoKCcgJykgPyAnJyA6ICcgJykgKyBjb21tZW50O1xuXG5leHBvcnQgeyBpbmRlbnRDb21tZW50LCBsaW5lQ29tbWVudCwgc3RyaW5naWZ5Q29tbWVudCB9O1xuIiwiY29uc3QgRk9MRF9GTE9XID0gJ2Zsb3cnO1xuY29uc3QgRk9MRF9CTE9DSyA9ICdibG9jayc7XG5jb25zdCBGT0xEX1FVT1RFRCA9ICdxdW90ZWQnO1xuLyoqXG4gKiBUcmllcyB0byBrZWVwIGlucHV0IGF0IHVwIHRvIGBsaW5lV2lkdGhgIGNoYXJhY3RlcnMsIHNwbGl0dGluZyBvbmx5IG9uIHNwYWNlc1xuICogbm90IGZvbGxvd2VkIGJ5IG5ld2xpbmVzIG9yIHNwYWNlcyB1bmxlc3MgYG1vZGVgIGlzIGAncXVvdGVkJ2AuIExpbmVzIGFyZVxuICogdGVybWluYXRlZCB3aXRoIGBcXG5gIGFuZCBzdGFydGVkIHdpdGggYGluZGVudGAuXG4gKi9cbmZ1bmN0aW9uIGZvbGRGbG93TGluZXModGV4dCwgaW5kZW50LCBtb2RlID0gJ2Zsb3cnLCB7IGluZGVudEF0U3RhcnQsIGxpbmVXaWR0aCA9IDgwLCBtaW5Db250ZW50V2lkdGggPSAyMCwgb25Gb2xkLCBvbk92ZXJmbG93IH0gPSB7fSkge1xuICAgIGlmICghbGluZVdpZHRoIHx8IGxpbmVXaWR0aCA8IDApXG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIGlmIChsaW5lV2lkdGggPCBtaW5Db250ZW50V2lkdGgpXG4gICAgICAgIG1pbkNvbnRlbnRXaWR0aCA9IDA7XG4gICAgY29uc3QgZW5kU3RlcCA9IE1hdGgubWF4KDEgKyBtaW5Db250ZW50V2lkdGgsIDEgKyBsaW5lV2lkdGggLSBpbmRlbnQubGVuZ3RoKTtcbiAgICBpZiAodGV4dC5sZW5ndGggPD0gZW5kU3RlcClcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgY29uc3QgZm9sZHMgPSBbXTtcbiAgICBjb25zdCBlc2NhcGVkRm9sZHMgPSB7fTtcbiAgICBsZXQgZW5kID0gbGluZVdpZHRoIC0gaW5kZW50Lmxlbmd0aDtcbiAgICBpZiAodHlwZW9mIGluZGVudEF0U3RhcnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChpbmRlbnRBdFN0YXJ0ID4gbGluZVdpZHRoIC0gTWF0aC5tYXgoMiwgbWluQ29udGVudFdpZHRoKSlcbiAgICAgICAgICAgIGZvbGRzLnB1c2goMCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGVuZCA9IGxpbmVXaWR0aCAtIGluZGVudEF0U3RhcnQ7XG4gICAgfVxuICAgIGxldCBzcGxpdCA9IHVuZGVmaW5lZDtcbiAgICBsZXQgcHJldiA9IHVuZGVmaW5lZDtcbiAgICBsZXQgb3ZlcmZsb3cgPSBmYWxzZTtcbiAgICBsZXQgaSA9IC0xO1xuICAgIGxldCBlc2NTdGFydCA9IC0xO1xuICAgIGxldCBlc2NFbmQgPSAtMTtcbiAgICBpZiAobW9kZSA9PT0gRk9MRF9CTE9DSykge1xuICAgICAgICBpID0gY29uc3VtZU1vcmVJbmRlbnRlZExpbmVzKHRleHQsIGksIGluZGVudC5sZW5ndGgpO1xuICAgICAgICBpZiAoaSAhPT0gLTEpXG4gICAgICAgICAgICBlbmQgPSBpICsgZW5kU3RlcDtcbiAgICB9XG4gICAgZm9yIChsZXQgY2g7IChjaCA9IHRleHRbKGkgKz0gMSldKTspIHtcbiAgICAgICAgaWYgKG1vZGUgPT09IEZPTERfUVVPVEVEICYmIGNoID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGVzY1N0YXJ0ID0gaTtcbiAgICAgICAgICAgIHN3aXRjaCAodGV4dFtpICsgMV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1JzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSA1O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdVJzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSA5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlc2NFbmQgPSBpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBGT0xEX0JMT0NLKVxuICAgICAgICAgICAgICAgIGkgPSBjb25zdW1lTW9yZUluZGVudGVkTGluZXModGV4dCwgaSwgaW5kZW50Lmxlbmd0aCk7XG4gICAgICAgICAgICBlbmQgPSBpICsgaW5kZW50Lmxlbmd0aCArIGVuZFN0ZXA7XG4gICAgICAgICAgICBzcGxpdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJyAnICYmXG4gICAgICAgICAgICAgICAgcHJldiAmJlxuICAgICAgICAgICAgICAgIHByZXYgIT09ICcgJyAmJlxuICAgICAgICAgICAgICAgIHByZXYgIT09ICdcXG4nICYmXG4gICAgICAgICAgICAgICAgcHJldiAhPT0gJ1xcdCcpIHtcbiAgICAgICAgICAgICAgICAvLyBzcGFjZSBzdXJyb3VuZGVkIGJ5IG5vbi1zcGFjZSBjYW4gYmUgcmVwbGFjZWQgd2l0aCBuZXdsaW5lICsgaW5kZW50XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRleHRbaSArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09ICcgJyAmJiBuZXh0ICE9PSAnXFxuJyAmJiBuZXh0ICE9PSAnXFx0JylcbiAgICAgICAgICAgICAgICAgICAgc3BsaXQgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPj0gZW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwbGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbGRzLnB1c2goc3BsaXQpO1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBzcGxpdCArIGVuZFN0ZXA7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSBGT0xEX1FVT1RFRCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGl0ZS1zcGFjZSBjb2xsZWN0ZWQgYXQgZW5kIG1heSBzdHJldGNoIHBhc3QgbGluZVdpZHRoXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwcmV2ID09PSAnICcgfHwgcHJldiA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoID0gdGV4dFsoaSArPSAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQWNjb3VudCBmb3IgbmV3bGluZSBlc2NhcGUsIGJ1dCBkb24ndCBicmVhayBwcmVjZWRpbmcgZXNjYXBlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGogPSBpID4gZXNjRW5kICsgMSA/IGkgLSAyIDogZXNjU3RhcnQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIG91dCBpZiBsaW5lV2lkdGggJiBtaW5Db250ZW50V2lkdGggYXJlIHNob3J0ZXIgdGhhbiBhbiBlc2NhcGUgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIGlmIChlc2NhcGVkRm9sZHNbal0pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgZm9sZHMucHVzaChqKTtcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlZEZvbGRzW2pdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gaiArIGVuZFN0ZXA7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gY2g7XG4gICAgfVxuICAgIGlmIChvdmVyZmxvdyAmJiBvbk92ZXJmbG93KVxuICAgICAgICBvbk92ZXJmbG93KCk7XG4gICAgaWYgKGZvbGRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgaWYgKG9uRm9sZClcbiAgICAgICAgb25Gb2xkKCk7XG4gICAgbGV0IHJlcyA9IHRleHQuc2xpY2UoMCwgZm9sZHNbMF0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm9sZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgZm9sZCA9IGZvbGRzW2ldO1xuICAgICAgICBjb25zdCBlbmQgPSBmb2xkc1tpICsgMV0gfHwgdGV4dC5sZW5ndGg7XG4gICAgICAgIGlmIChmb2xkID09PSAwKVxuICAgICAgICAgICAgcmVzID0gYFxcbiR7aW5kZW50fSR7dGV4dC5zbGljZSgwLCBlbmQpfWA7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1vZGUgPT09IEZPTERfUVVPVEVEICYmIGVzY2FwZWRGb2xkc1tmb2xkXSlcbiAgICAgICAgICAgICAgICByZXMgKz0gYCR7dGV4dFtmb2xkXX1cXFxcYDtcbiAgICAgICAgICAgIHJlcyArPSBgXFxuJHtpbmRlbnR9JHt0ZXh0LnNsaWNlKGZvbGQgKyAxLCBlbmQpfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qKlxuICogUHJlc3VtZXMgYGkgKyAxYCBpcyBhdCB0aGUgc3RhcnQgb2YgYSBsaW5lXG4gKiBAcmV0dXJucyBpbmRleCBvZiBsYXN0IG5ld2xpbmUgaW4gbW9yZS1pbmRlbnRlZCBibG9ja1xuICovXG5mdW5jdGlvbiBjb25zdW1lTW9yZUluZGVudGVkTGluZXModGV4dCwgaSwgaW5kZW50KSB7XG4gICAgbGV0IGVuZCA9IGk7XG4gICAgbGV0IHN0YXJ0ID0gaSArIDE7XG4gICAgbGV0IGNoID0gdGV4dFtzdGFydF07XG4gICAgd2hpbGUgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKSB7XG4gICAgICAgIGlmIChpIDwgc3RhcnQgKyBpbmRlbnQpIHtcbiAgICAgICAgICAgIGNoID0gdGV4dFsrK2ldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGNoID0gdGV4dFsrK2ldO1xuICAgICAgICAgICAgfSB3aGlsZSAoY2ggJiYgY2ggIT09ICdcXG4nKTtcbiAgICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgY2ggPSB0ZXh0W3N0YXJ0XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kO1xufVxuXG5leHBvcnQgeyBGT0xEX0JMT0NLLCBGT0xEX0ZMT1csIEZPTERfUVVPVEVELCBmb2xkRmxvd0xpbmVzIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgZm9sZEZsb3dMaW5lcywgRk9MRF9RVU9URUQsIEZPTERfRkxPVywgRk9MRF9CTE9DSyB9IGZyb20gJy4vZm9sZEZsb3dMaW5lcy5qcyc7XG5cbmNvbnN0IGdldEZvbGRPcHRpb25zID0gKGN0eCwgaXNCbG9jaykgPT4gKHtcbiAgICBpbmRlbnRBdFN0YXJ0OiBpc0Jsb2NrID8gY3R4LmluZGVudC5sZW5ndGggOiBjdHguaW5kZW50QXRTdGFydCxcbiAgICBsaW5lV2lkdGg6IGN0eC5vcHRpb25zLmxpbmVXaWR0aCxcbiAgICBtaW5Db250ZW50V2lkdGg6IGN0eC5vcHRpb25zLm1pbkNvbnRlbnRXaWR0aFxufSk7XG4vLyBBbHNvIGNoZWNrcyBmb3IgbGluZXMgc3RhcnRpbmcgd2l0aCAlLCBhcyBwYXJzaW5nIHRoZSBvdXRwdXQgYXMgWUFNTCAxLjEgd2lsbFxuLy8gcHJlc3VtZSB0aGF0J3Mgc3RhcnRpbmcgYSBuZXcgZG9jdW1lbnQuXG5jb25zdCBjb250YWluc0RvY3VtZW50TWFya2VyID0gKHN0cikgPT4gL14oJXwtLS18XFwuXFwuXFwuKS9tLnRlc3Qoc3RyKTtcbmZ1bmN0aW9uIGxpbmVMZW5ndGhPdmVyTGltaXQoc3RyLCBsaW5lV2lkdGgsIGluZGVudExlbmd0aCkge1xuICAgIGlmICghbGluZVdpZHRoIHx8IGxpbmVXaWR0aCA8IDApXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBsaW1pdCA9IGxpbmVXaWR0aCAtIGluZGVudExlbmd0aDtcbiAgICBjb25zdCBzdHJMZW4gPSBzdHIubGVuZ3RoO1xuICAgIGlmIChzdHJMZW4gPD0gbGltaXQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMCwgc3RhcnQgPSAwOyBpIDwgc3RyTGVuOyArK2kpIHtcbiAgICAgICAgaWYgKHN0cltpXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIGlmIChpIC0gc3RhcnQgPiBsaW1pdClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICBpZiAoc3RyTGVuIC0gc3RhcnQgPD0gbGltaXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZG91YmxlUXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpIHtcbiAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIGlmIChjdHgub3B0aW9ucy5kb3VibGVRdW90ZWRBc0pTT04pXG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIGNvbnN0IHsgaW1wbGljaXRLZXkgfSA9IGN0eDtcbiAgICBjb25zdCBtaW5NdWx0aUxpbmVMZW5ndGggPSBjdHgub3B0aW9ucy5kb3VibGVRdW90ZWRNaW5NdWx0aUxpbmVMZW5ndGg7XG4gICAgY29uc3QgaW5kZW50ID0gY3R4LmluZGVudCB8fCAoY29udGFpbnNEb2N1bWVudE1hcmtlcih2YWx1ZSkgPyAnICAnIDogJycpO1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwLCBjaCA9IGpzb25baV07IGNoOyBjaCA9IGpzb25bKytpXSkge1xuICAgICAgICBpZiAoY2ggPT09ICcgJyAmJiBqc29uW2kgKyAxXSA9PT0gJ1xcXFwnICYmIGpzb25baSArIDJdID09PSAnbicpIHtcbiAgICAgICAgICAgIC8vIHNwYWNlIGJlZm9yZSBuZXdsaW5lIG5lZWRzIHRvIGJlIGVzY2FwZWQgdG8gbm90IGJlIGZvbGRlZFxuICAgICAgICAgICAgc3RyICs9IGpzb24uc2xpY2Uoc3RhcnQsIGkpICsgJ1xcXFwgJztcbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgIHN0YXJ0ID0gaTtcbiAgICAgICAgICAgIGNoID0gJ1xcXFwnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcXFwnKVxuICAgICAgICAgICAgc3dpdGNoIChqc29uW2kgKyAxXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0ganNvbi5zbGljZShzdGFydCwgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0ganNvbi5zdWJzdHIoaSArIDIsIDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMDAwMCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXDAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMDA3JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcYSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzAwMGInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMDAxYic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMDg1JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcTic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzAwYTAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFxfJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMjAyOCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXEwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcyMDI5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcUCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlLnN1YnN0cigwLCAyKSA9PT0gJzAwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXHgnICsgY29kZS5zdWJzdHIoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBqc29uLnN1YnN0cihpLCA2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbXBsaWNpdEtleSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAganNvbltpICsgMl0gPT09ICdcIicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb24ubGVuZ3RoIDwgbWluTXVsdGlMaW5lTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb2xkaW5nIHdpbGwgZWF0IGZpcnN0IG5ld2xpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBqc29uLnNsaWNlKHN0YXJ0LCBpKSArICdcXG5cXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGpzb25baSArIDJdID09PSAnXFxcXCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uW2kgKyAzXSA9PT0gJ24nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbltpICsgNF0gIT09ICdcIicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IGluZGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwYWNlIGFmdGVyIG5ld2xpbmUgbmVlZHMgdG8gYmUgZXNjYXBlZCB0byBub3QgYmUgZm9sZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvbltpICsgMl0gPT09ICcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIHN0ciA9IHN0YXJ0ID8gc3RyICsganNvbi5zbGljZShzdGFydCkgOiBqc29uO1xuICAgIHJldHVybiBpbXBsaWNpdEtleVxuICAgICAgICA/IHN0clxuICAgICAgICA6IGZvbGRGbG93TGluZXMoc3RyLCBpbmRlbnQsIEZPTERfUVVPVEVELCBnZXRGb2xkT3B0aW9ucyhjdHgsIGZhbHNlKSk7XG59XG5mdW5jdGlvbiBzaW5nbGVRdW90ZWRTdHJpbmcodmFsdWUsIGN0eCkge1xuICAgIGlmIChjdHgub3B0aW9ucy5zaW5nbGVRdW90ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGN0eC5pbXBsaWNpdEtleSAmJiB2YWx1ZS5pbmNsdWRlcygnXFxuJykpIHx8XG4gICAgICAgIC9bIFxcdF1cXG58XFxuWyBcXHRdLy50ZXN0KHZhbHVlKSAvLyBzaW5nbGUgcXVvdGVkIHN0cmluZyBjYW4ndCBoYXZlIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcm91bmQgbmV3bGluZVxuICAgIClcbiAgICAgICAgcmV0dXJuIGRvdWJsZVF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KTtcbiAgICBjb25zdCBpbmRlbnQgPSBjdHguaW5kZW50IHx8IChjb250YWluc0RvY3VtZW50TWFya2VyKHZhbHVlKSA/ICcgICcgOiAnJyk7XG4gICAgY29uc3QgcmVzID0gXCInXCIgKyB2YWx1ZS5yZXBsYWNlKC8nL2csIFwiJydcIikucmVwbGFjZSgvXFxuKy9nLCBgJCZcXG4ke2luZGVudH1gKSArIFwiJ1wiO1xuICAgIHJldHVybiBjdHguaW1wbGljaXRLZXlcbiAgICAgICAgPyByZXNcbiAgICAgICAgOiBmb2xkRmxvd0xpbmVzKHJlcywgaW5kZW50LCBGT0xEX0ZMT1csIGdldEZvbGRPcHRpb25zKGN0eCwgZmFsc2UpKTtcbn1cbmZ1bmN0aW9uIHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KSB7XG4gICAgY29uc3QgeyBzaW5nbGVRdW90ZSB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgbGV0IHFzO1xuICAgIGlmIChzaW5nbGVRdW90ZSA9PT0gZmFsc2UpXG4gICAgICAgIHFzID0gZG91YmxlUXVvdGVkU3RyaW5nO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBoYXNEb3VibGUgPSB2YWx1ZS5pbmNsdWRlcygnXCInKTtcbiAgICAgICAgY29uc3QgaGFzU2luZ2xlID0gdmFsdWUuaW5jbHVkZXMoXCInXCIpO1xuICAgICAgICBpZiAoaGFzRG91YmxlICYmICFoYXNTaW5nbGUpXG4gICAgICAgICAgICBxcyA9IHNpbmdsZVF1b3RlZFN0cmluZztcbiAgICAgICAgZWxzZSBpZiAoaGFzU2luZ2xlICYmICFoYXNEb3VibGUpXG4gICAgICAgICAgICBxcyA9IGRvdWJsZVF1b3RlZFN0cmluZztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcXMgPSBzaW5nbGVRdW90ZSA/IHNpbmdsZVF1b3RlZFN0cmluZyA6IGRvdWJsZVF1b3RlZFN0cmluZztcbiAgICB9XG4gICAgcmV0dXJuIHFzKHZhbHVlLCBjdHgpO1xufVxuLy8gVGhlIG5lZ2F0aXZlIGxvb2tiZWhpbmQgYXZvaWRzIGEgcG9seW5vbWlhbCBzZWFyY2gsXG4vLyBidXQgaXNuJ3Qgc3VwcG9ydGVkIHlldCBvbiBTYWZhcmk6IGh0dHBzOi8vY2FuaXVzZS5jb20vanMtcmVnZXhwLWxvb2tiZWhpbmRcbmxldCBibG9ja0VuZE5ld2xpbmVzO1xudHJ5IHtcbiAgICBibG9ja0VuZE5ld2xpbmVzID0gbmV3IFJlZ0V4cCgnKF58KD88IVxcbikpXFxuKyg/IVxcbnwkKScsICdnJyk7XG59XG5jYXRjaCB7XG4gICAgYmxvY2tFbmROZXdsaW5lcyA9IC9cXG4rKD8hXFxufCQpL2c7XG59XG5mdW5jdGlvbiBibG9ja1N0cmluZyh7IGNvbW1lbnQsIHR5cGUsIHZhbHVlIH0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgIGNvbnN0IHsgYmxvY2tRdW90ZSwgY29tbWVudFN0cmluZywgbGluZVdpZHRoIH0gPSBjdHgub3B0aW9ucztcbiAgICAvLyAxLiBCbG9jayBjYW4ndCBlbmQgaW4gd2hpdGVzcGFjZSB1bmxlc3MgdGhlIGxhc3QgbGluZSBpcyBub24tZW1wdHkuXG4gICAgLy8gMi4gU3RyaW5ncyBjb25zaXN0aW5nIG9mIG9ubHkgd2hpdGVzcGFjZSBhcmUgYmVzdCByZW5kZXJlZCBleHBsaWNpdGx5LlxuICAgIGlmICghYmxvY2tRdW90ZSB8fCAvXFxuW1xcdCBdKyQvLnRlc3QodmFsdWUpIHx8IC9eXFxzKiQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBxdW90ZWRTdHJpbmcodmFsdWUsIGN0eCk7XG4gICAgfVxuICAgIGNvbnN0IGluZGVudCA9IGN0eC5pbmRlbnQgfHxcbiAgICAgICAgKGN0eC5mb3JjZUJsb2NrSW5kZW50IHx8IGNvbnRhaW5zRG9jdW1lbnRNYXJrZXIodmFsdWUpID8gJyAgJyA6ICcnKTtcbiAgICBjb25zdCBsaXRlcmFsID0gYmxvY2tRdW90ZSA9PT0gJ2xpdGVyYWwnXG4gICAgICAgID8gdHJ1ZVxuICAgICAgICA6IGJsb2NrUXVvdGUgPT09ICdmb2xkZWQnIHx8IHR5cGUgPT09IFNjYWxhci5CTE9DS19GT0xERURcbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDogdHlwZSA9PT0gU2NhbGFyLkJMT0NLX0xJVEVSQUxcbiAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICA6ICFsaW5lTGVuZ3RoT3ZlckxpbWl0KHZhbHVlLCBsaW5lV2lkdGgsIGluZGVudC5sZW5ndGgpO1xuICAgIGlmICghdmFsdWUpXG4gICAgICAgIHJldHVybiBsaXRlcmFsID8gJ3xcXG4nIDogJz5cXG4nO1xuICAgIC8vIGRldGVybWluZSBjaG9tcGluZyBmcm9tIHdoaXRlc3BhY2UgYXQgdmFsdWUgZW5kXG4gICAgbGV0IGNob21wO1xuICAgIGxldCBlbmRTdGFydDtcbiAgICBmb3IgKGVuZFN0YXJ0ID0gdmFsdWUubGVuZ3RoOyBlbmRTdGFydCA+IDA7IC0tZW5kU3RhcnQpIHtcbiAgICAgICAgY29uc3QgY2ggPSB2YWx1ZVtlbmRTdGFydCAtIDFdO1xuICAgICAgICBpZiAoY2ggIT09ICdcXG4nICYmIGNoICE9PSAnXFx0JyAmJiBjaCAhPT0gJyAnKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGxldCBlbmQgPSB2YWx1ZS5zdWJzdHJpbmcoZW5kU3RhcnQpO1xuICAgIGNvbnN0IGVuZE5sUG9zID0gZW5kLmluZGV4T2YoJ1xcbicpO1xuICAgIGlmIChlbmRObFBvcyA9PT0gLTEpIHtcbiAgICAgICAgY2hvbXAgPSAnLSc7IC8vIHN0cmlwXG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlID09PSBlbmQgfHwgZW5kTmxQb3MgIT09IGVuZC5sZW5ndGggLSAxKSB7XG4gICAgICAgIGNob21wID0gJysnOyAvLyBrZWVwXG4gICAgICAgIGlmIChvbkNob21wS2VlcClcbiAgICAgICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjaG9tcCA9ICcnOyAvLyBjbGlwXG4gICAgfVxuICAgIGlmIChlbmQpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCAtZW5kLmxlbmd0aCk7XG4gICAgICAgIGlmIChlbmRbZW5kLmxlbmd0aCAtIDFdID09PSAnXFxuJylcbiAgICAgICAgICAgIGVuZCA9IGVuZC5zbGljZSgwLCAtMSk7XG4gICAgICAgIGVuZCA9IGVuZC5yZXBsYWNlKGJsb2NrRW5kTmV3bGluZXMsIGAkJiR7aW5kZW50fWApO1xuICAgIH1cbiAgICAvLyBkZXRlcm1pbmUgaW5kZW50IGluZGljYXRvciBmcm9tIHdoaXRlc3BhY2UgYXQgdmFsdWUgc3RhcnRcbiAgICBsZXQgc3RhcnRXaXRoU3BhY2UgPSBmYWxzZTtcbiAgICBsZXQgc3RhcnRFbmQ7XG4gICAgbGV0IHN0YXJ0TmxQb3MgPSAtMTtcbiAgICBmb3IgKHN0YXJ0RW5kID0gMDsgc3RhcnRFbmQgPCB2YWx1ZS5sZW5ndGg7ICsrc3RhcnRFbmQpIHtcbiAgICAgICAgY29uc3QgY2ggPSB2YWx1ZVtzdGFydEVuZF07XG4gICAgICAgIGlmIChjaCA9PT0gJyAnKVxuICAgICAgICAgICAgc3RhcnRXaXRoU3BhY2UgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJ1xcbicpXG4gICAgICAgICAgICBzdGFydE5sUG9zID0gc3RhcnRFbmQ7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBsZXQgc3RhcnQgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgc3RhcnRObFBvcyA8IHN0YXJ0RW5kID8gc3RhcnRObFBvcyArIDEgOiBzdGFydEVuZCk7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKHN0YXJ0Lmxlbmd0aCk7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQucmVwbGFjZSgvXFxuKy9nLCBgJCYke2luZGVudH1gKTtcbiAgICB9XG4gICAgY29uc3QgaW5kZW50U2l6ZSA9IGluZGVudCA/ICcyJyA6ICcxJzsgLy8gcm9vdCBpcyBhdCAtMVxuICAgIGxldCBoZWFkZXIgPSAobGl0ZXJhbCA/ICd8JyA6ICc+JykgKyAoc3RhcnRXaXRoU3BhY2UgPyBpbmRlbnRTaXplIDogJycpICsgY2hvbXA7XG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgICAgaGVhZGVyICs9ICcgJyArIGNvbW1lbnRTdHJpbmcoY29tbWVudC5yZXBsYWNlKC8gP1tcXHJcXG5dKy9nLCAnICcpKTtcbiAgICAgICAgaWYgKG9uQ29tbWVudClcbiAgICAgICAgICAgIG9uQ29tbWVudCgpO1xuICAgIH1cbiAgICBpZiAobGl0ZXJhbCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcbisvZywgYCQmJHtpbmRlbnR9YCk7XG4gICAgICAgIHJldHVybiBgJHtoZWFkZXJ9XFxuJHtpbmRlbnR9JHtzdGFydH0ke3ZhbHVlfSR7ZW5kfWA7XG4gICAgfVxuICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgLnJlcGxhY2UoL1xcbisvZywgJ1xcbiQmJylcbiAgICAgICAgLnJlcGxhY2UoLyg/Ol58XFxuKShbXFx0IF0uKikoPzooW1xcblxcdCBdKilcXG4oPyFbXFxuXFx0IF0pKT8vZywgJyQxJDInKSAvLyBtb3JlLWluZGVudGVkIGxpbmVzIGFyZW4ndCBmb2xkZWRcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgXiBtb3JlLWluZC4gXiBlbXB0eSAgICAgXiBjYXB0dXJlIG5leHQgZW1wdHkgbGluZXMgb25seSBhdCBlbmQgb2YgaW5kZW50XG4gICAgICAgIC5yZXBsYWNlKC9cXG4rL2csIGAkJiR7aW5kZW50fWApO1xuICAgIGNvbnN0IGJvZHkgPSBmb2xkRmxvd0xpbmVzKGAke3N0YXJ0fSR7dmFsdWV9JHtlbmR9YCwgaW5kZW50LCBGT0xEX0JMT0NLLCBnZXRGb2xkT3B0aW9ucyhjdHgsIHRydWUpKTtcbiAgICByZXR1cm4gYCR7aGVhZGVyfVxcbiR7aW5kZW50fSR7Ym9keX1gO1xufVxuZnVuY3Rpb24gcGxhaW5TdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gaXRlbTtcbiAgICBjb25zdCB7IGFjdHVhbFN0cmluZywgaW1wbGljaXRLZXksIGluZGVudCwgaW5kZW50U3RlcCwgaW5GbG93IH0gPSBjdHg7XG4gICAgaWYgKChpbXBsaWNpdEtleSAmJiB2YWx1ZS5pbmNsdWRlcygnXFxuJykpIHx8XG4gICAgICAgIChpbkZsb3cgJiYgL1tbXFxde30sXS8udGVzdCh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiBxdW90ZWRTdHJpbmcodmFsdWUsIGN0eCk7XG4gICAgfVxuICAgIGlmICghdmFsdWUgfHxcbiAgICAgICAgL15bXFxuXFx0ICxbXFxde30jJiohfD4nXCIlQGBdfF5bPy1dJHxeWz8tXVsgXFx0XXxbXFxuOl1bIFxcdF18WyBcXHRdXFxufFtcXG5cXHQgXSN8W1xcblxcdCA6XSQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIC8vIG5vdCBhbGxvd2VkOlxuICAgICAgICAvLyAtIGVtcHR5IHN0cmluZywgJy0nIG9yICc/J1xuICAgICAgICAvLyAtIHN0YXJ0IHdpdGggYW4gaW5kaWNhdG9yIGNoYXJhY3RlciAoZXhjZXB0IFs/Oi1dKSBvciAvWz8tXSAvXG4gICAgICAgIC8vIC0gJ1xcbiAnLCAnOiAnIG9yICcgXFxuJyBhbnl3aGVyZVxuICAgICAgICAvLyAtICcjJyBub3QgcHJlY2VkZWQgYnkgYSBub24tc3BhY2UgY2hhclxuICAgICAgICAvLyAtIGVuZCB3aXRoICcgJyBvciAnOidcbiAgICAgICAgcmV0dXJuIGltcGxpY2l0S2V5IHx8IGluRmxvdyB8fCAhdmFsdWUuaW5jbHVkZXMoJ1xcbicpXG4gICAgICAgICAgICA/IHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KVxuICAgICAgICAgICAgOiBibG9ja1N0cmluZyhpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIH1cbiAgICBpZiAoIWltcGxpY2l0S2V5ICYmXG4gICAgICAgICFpbkZsb3cgJiZcbiAgICAgICAgdHlwZSAhPT0gU2NhbGFyLlBMQUlOICYmXG4gICAgICAgIHZhbHVlLmluY2x1ZGVzKCdcXG4nKSkge1xuICAgICAgICAvLyBXaGVyZSBhbGxvd2VkICYgdHlwZSBub3Qgc2V0IGV4cGxpY2l0bHksIHByZWZlciBibG9jayBzdHlsZSBmb3IgbXVsdGlsaW5lIHN0cmluZ3NcbiAgICAgICAgcmV0dXJuIGJsb2NrU3RyaW5nKGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgfVxuICAgIGlmIChjb250YWluc0RvY3VtZW50TWFya2VyKHZhbHVlKSkge1xuICAgICAgICBpZiAoaW5kZW50ID09PSAnJykge1xuICAgICAgICAgICAgY3R4LmZvcmNlQmxvY2tJbmRlbnQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGJsb2NrU3RyaW5nKGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW1wbGljaXRLZXkgJiYgaW5kZW50ID09PSBpbmRlbnRTdGVwKSB7XG4gICAgICAgICAgICByZXR1cm4gcXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHN0ciA9IHZhbHVlLnJlcGxhY2UoL1xcbisvZywgYCQmXFxuJHtpbmRlbnR9YCk7XG4gICAgLy8gVmVyaWZ5IHRoYXQgb3V0cHV0IHdpbGwgYmUgcGFyc2VkIGFzIGEgc3RyaW5nLCBhcyBlLmcuIHBsYWluIG51bWJlcnMgYW5kXG4gICAgLy8gYm9vbGVhbnMgZ2V0IHBhcnNlZCB3aXRoIHRob3NlIHR5cGVzIGluIHYxLjIgKGUuZy4gJzQyJywgJ3RydWUnICYgJzAuOWUtMycpLFxuICAgIC8vIGFuZCBvdGhlcnMgaW4gdjEuMS5cbiAgICBpZiAoYWN0dWFsU3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHRlc3QgPSAodGFnKSA9PiB0YWcuZGVmYXVsdCAmJiB0YWcudGFnICE9PSAndGFnOnlhbWwub3JnLDIwMDI6c3RyJyAmJiB0YWcudGVzdD8udGVzdChzdHIpO1xuICAgICAgICBjb25zdCB7IGNvbXBhdCwgdGFncyB9ID0gY3R4LmRvYy5zY2hlbWE7XG4gICAgICAgIGlmICh0YWdzLnNvbWUodGVzdCkgfHwgY29tcGF0Py5zb21lKHRlc3QpKVxuICAgICAgICAgICAgcmV0dXJuIHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KTtcbiAgICB9XG4gICAgcmV0dXJuIGltcGxpY2l0S2V5XG4gICAgICAgID8gc3RyXG4gICAgICAgIDogZm9sZEZsb3dMaW5lcyhzdHIsIGluZGVudCwgRk9MRF9GTE9XLCBnZXRGb2xkT3B0aW9ucyhjdHgsIGZhbHNlKSk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgY29uc3QgeyBpbXBsaWNpdEtleSwgaW5GbG93IH0gPSBjdHg7XG4gICAgY29uc3Qgc3MgPSB0eXBlb2YgaXRlbS52YWx1ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBpdGVtXG4gICAgICAgIDogT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwgeyB2YWx1ZTogU3RyaW5nKGl0ZW0udmFsdWUpIH0pO1xuICAgIGxldCB7IHR5cGUgfSA9IGl0ZW07XG4gICAgaWYgKHR5cGUgIT09IFNjYWxhci5RVU9URV9ET1VCTEUpIHtcbiAgICAgICAgLy8gZm9yY2UgZG91YmxlIHF1b3RlcyBvbiBjb250cm9sIGNoYXJhY3RlcnMgJiB1bnBhaXJlZCBzdXJyb2dhdGVzXG4gICAgICAgIGlmICgvW1xceDAwLVxceDA4XFx4MGItXFx4MWZcXHg3Zi1cXHg5ZlxcdXtEODAwfS1cXHV7REZGRn1dL3UudGVzdChzcy52YWx1ZSkpXG4gICAgICAgICAgICB0eXBlID0gU2NhbGFyLlFVT1RFX0RPVUJMRTtcbiAgICB9XG4gICAgY29uc3QgX3N0cmluZ2lmeSA9IChfdHlwZSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKF90eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFNjYWxhci5CTE9DS19GT0xERUQ6XG4gICAgICAgICAgICBjYXNlIFNjYWxhci5CTE9DS19MSVRFUkFMOlxuICAgICAgICAgICAgICAgIHJldHVybiBpbXBsaWNpdEtleSB8fCBpbkZsb3dcbiAgICAgICAgICAgICAgICAgICAgPyBxdW90ZWRTdHJpbmcoc3MudmFsdWUsIGN0eCkgLy8gYmxvY2tzIGFyZSBub3QgdmFsaWQgaW5zaWRlIGZsb3cgY29udGFpbmVyc1xuICAgICAgICAgICAgICAgICAgICA6IGJsb2NrU3RyaW5nKHNzLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgICAgICAgICAgY2FzZSBTY2FsYXIuUVVPVEVfRE9VQkxFOlxuICAgICAgICAgICAgICAgIHJldHVybiBkb3VibGVRdW90ZWRTdHJpbmcoc3MudmFsdWUsIGN0eCk7XG4gICAgICAgICAgICBjYXNlIFNjYWxhci5RVU9URV9TSU5HTEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpbmdsZVF1b3RlZFN0cmluZyhzcy52YWx1ZSwgY3R4KTtcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLlBMQUlOOlxuICAgICAgICAgICAgICAgIHJldHVybiBwbGFpblN0cmluZyhzcywgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGxldCByZXMgPSBfc3RyaW5naWZ5KHR5cGUpO1xuICAgIGlmIChyZXMgPT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgeyBkZWZhdWx0S2V5VHlwZSwgZGVmYXVsdFN0cmluZ1R5cGUgfSA9IGN0eC5vcHRpb25zO1xuICAgICAgICBjb25zdCB0ID0gKGltcGxpY2l0S2V5ICYmIGRlZmF1bHRLZXlUeXBlKSB8fCBkZWZhdWx0U3RyaW5nVHlwZTtcbiAgICAgICAgcmVzID0gX3N0cmluZ2lmeSh0KTtcbiAgICAgICAgaWYgKHJlcyA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGVmYXVsdCBzdHJpbmcgdHlwZSAke3R9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCB7IHN0cmluZ2lmeVN0cmluZyB9O1xuIiwiaW1wb3J0IHsgYW5jaG9ySXNWYWxpZCB9IGZyb20gJy4uL2RvYy9hbmNob3JzLmpzJztcbmltcG9ydCB7IGlzUGFpciwgaXNBbGlhcywgaXNOb2RlLCBpc1NjYWxhciwgaXNDb2xsZWN0aW9uIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5Q29tbWVudCB9IGZyb20gJy4vc3RyaW5naWZ5Q29tbWVudC5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlTdHJpbmcgfSBmcm9tICcuL3N0cmluZ2lmeVN0cmluZy5qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmluZ2lmeUNvbnRleHQoZG9jLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0ID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIGJsb2NrUXVvdGU6IHRydWUsXG4gICAgICAgIGNvbW1lbnRTdHJpbmc6IHN0cmluZ2lmeUNvbW1lbnQsXG4gICAgICAgIGRlZmF1bHRLZXlUeXBlOiBudWxsLFxuICAgICAgICBkZWZhdWx0U3RyaW5nVHlwZTogJ1BMQUlOJyxcbiAgICAgICAgZGlyZWN0aXZlczogbnVsbCxcbiAgICAgICAgZG91YmxlUXVvdGVkQXNKU09OOiBmYWxzZSxcbiAgICAgICAgZG91YmxlUXVvdGVkTWluTXVsdGlMaW5lTGVuZ3RoOiA0MCxcbiAgICAgICAgZmFsc2VTdHI6ICdmYWxzZScsXG4gICAgICAgIGZsb3dDb2xsZWN0aW9uUGFkZGluZzogdHJ1ZSxcbiAgICAgICAgaW5kZW50U2VxOiB0cnVlLFxuICAgICAgICBsaW5lV2lkdGg6IDgwLFxuICAgICAgICBtaW5Db250ZW50V2lkdGg6IDIwLFxuICAgICAgICBudWxsU3RyOiAnbnVsbCcsXG4gICAgICAgIHNpbXBsZUtleXM6IGZhbHNlLFxuICAgICAgICBzaW5nbGVRdW90ZTogbnVsbCxcbiAgICAgICAgdHJ1ZVN0cjogJ3RydWUnLFxuICAgICAgICB2ZXJpZnlBbGlhc09yZGVyOiB0cnVlXG4gICAgfSwgZG9jLnNjaGVtYS50b1N0cmluZ09wdGlvbnMsIG9wdGlvbnMpO1xuICAgIGxldCBpbkZsb3c7XG4gICAgc3dpdGNoIChvcHQuY29sbGVjdGlvblN0eWxlKSB7XG4gICAgICAgIGNhc2UgJ2Jsb2NrJzpcbiAgICAgICAgICAgIGluRmxvdyA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Zsb3cnOlxuICAgICAgICAgICAgaW5GbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaW5GbG93ID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYW5jaG9yczogbmV3IFNldCgpLFxuICAgICAgICBkb2MsXG4gICAgICAgIGZsb3dDb2xsZWN0aW9uUGFkZGluZzogb3B0LmZsb3dDb2xsZWN0aW9uUGFkZGluZyA/ICcgJyA6ICcnLFxuICAgICAgICBpbmRlbnQ6ICcnLFxuICAgICAgICBpbmRlbnRTdGVwOiB0eXBlb2Ygb3B0LmluZGVudCA9PT0gJ251bWJlcicgPyAnICcucmVwZWF0KG9wdC5pbmRlbnQpIDogJyAgJyxcbiAgICAgICAgaW5GbG93LFxuICAgICAgICBvcHRpb25zOiBvcHRcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0VGFnT2JqZWN0KHRhZ3MsIGl0ZW0pIHtcbiAgICBpZiAoaXRlbS50YWcpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0YWdzLmZpbHRlcih0ID0+IHQudGFnID09PSBpdGVtLnRhZyk7XG4gICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoLmZpbmQodCA9PiB0LmZvcm1hdCA9PT0gaXRlbS5mb3JtYXQpID8/IG1hdGNoWzBdO1xuICAgIH1cbiAgICBsZXQgdGFnT2JqID0gdW5kZWZpbmVkO1xuICAgIGxldCBvYmo7XG4gICAgaWYgKGlzU2NhbGFyKGl0ZW0pKSB7XG4gICAgICAgIG9iaiA9IGl0ZW0udmFsdWU7XG4gICAgICAgIGxldCBtYXRjaCA9IHRhZ3MuZmlsdGVyKHQgPT4gdC5pZGVudGlmeT8uKG9iaikpO1xuICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3QgdGVzdE1hdGNoID0gbWF0Y2guZmlsdGVyKHQgPT4gdC50ZXN0KTtcbiAgICAgICAgICAgIGlmICh0ZXN0TWF0Y2gubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHRlc3RNYXRjaDtcbiAgICAgICAgfVxuICAgICAgICB0YWdPYmogPVxuICAgICAgICAgICAgbWF0Y2guZmluZCh0ID0+IHQuZm9ybWF0ID09PSBpdGVtLmZvcm1hdCkgPz8gbWF0Y2guZmluZCh0ID0+ICF0LmZvcm1hdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvYmogPSBpdGVtO1xuICAgICAgICB0YWdPYmogPSB0YWdzLmZpbmQodCA9PiB0Lm5vZGVDbGFzcyAmJiBvYmogaW5zdGFuY2VvZiB0Lm5vZGVDbGFzcyk7XG4gICAgfVxuICAgIGlmICghdGFnT2JqKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBvYmo/LmNvbnN0cnVjdG9yPy5uYW1lID8/IHR5cGVvZiBvYmo7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVGFnIG5vdCByZXNvbHZlZCBmb3IgJHtuYW1lfSB2YWx1ZWApO1xuICAgIH1cbiAgICByZXR1cm4gdGFnT2JqO1xufVxuLy8gbmVlZHMgdG8gYmUgY2FsbGVkIGJlZm9yZSB2YWx1ZSBzdHJpbmdpZmllciB0byBhbGxvdyBmb3IgY2lyY3VsYXIgYW5jaG9yIHJlZnNcbmZ1bmN0aW9uIHN0cmluZ2lmeVByb3BzKG5vZGUsIHRhZ09iaiwgeyBhbmNob3JzLCBkb2MgfSkge1xuICAgIGlmICghZG9jLmRpcmVjdGl2ZXMpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBjb25zdCBwcm9wcyA9IFtdO1xuICAgIGNvbnN0IGFuY2hvciA9IChpc1NjYWxhcihub2RlKSB8fCBpc0NvbGxlY3Rpb24obm9kZSkpICYmIG5vZGUuYW5jaG9yO1xuICAgIGlmIChhbmNob3IgJiYgYW5jaG9ySXNWYWxpZChhbmNob3IpKSB7XG4gICAgICAgIGFuY2hvcnMuYWRkKGFuY2hvcik7XG4gICAgICAgIHByb3BzLnB1c2goYCYke2FuY2hvcn1gKTtcbiAgICB9XG4gICAgY29uc3QgdGFnID0gbm9kZS50YWcgPyBub2RlLnRhZyA6IHRhZ09iai5kZWZhdWx0ID8gbnVsbCA6IHRhZ09iai50YWc7XG4gICAgaWYgKHRhZylcbiAgICAgICAgcHJvcHMucHVzaChkb2MuZGlyZWN0aXZlcy50YWdTdHJpbmcodGFnKSk7XG4gICAgcmV0dXJuIHByb3BzLmpvaW4oJyAnKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeShpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBpZiAoaXNQYWlyKGl0ZW0pKVxuICAgICAgICByZXR1cm4gaXRlbS50b1N0cmluZyhjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIGlmIChpc0FsaWFzKGl0ZW0pKSB7XG4gICAgICAgIGlmIChjdHguZG9jLmRpcmVjdGl2ZXMpXG4gICAgICAgICAgICByZXR1cm4gaXRlbS50b1N0cmluZyhjdHgpO1xuICAgICAgICBpZiAoY3R4LnJlc29sdmVkQWxpYXNlcz8uaGFzKGl0ZW0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBDYW5ub3Qgc3RyaW5naWZ5IGNpcmN1bGFyIHN0cnVjdHVyZSB3aXRob3V0IGFsaWFzIG5vZGVzYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3R4LnJlc29sdmVkQWxpYXNlcylcbiAgICAgICAgICAgICAgICBjdHgucmVzb2x2ZWRBbGlhc2VzLmFkZChpdGVtKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjdHgucmVzb2x2ZWRBbGlhc2VzID0gbmV3IFNldChbaXRlbV0pO1xuICAgICAgICAgICAgaXRlbSA9IGl0ZW0ucmVzb2x2ZShjdHguZG9jKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgdGFnT2JqID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IG5vZGUgPSBpc05vZGUoaXRlbSlcbiAgICAgICAgPyBpdGVtXG4gICAgICAgIDogY3R4LmRvYy5jcmVhdGVOb2RlKGl0ZW0sIHsgb25UYWdPYmo6IG8gPT4gKHRhZ09iaiA9IG8pIH0pO1xuICAgIGlmICghdGFnT2JqKVxuICAgICAgICB0YWdPYmogPSBnZXRUYWdPYmplY3QoY3R4LmRvYy5zY2hlbWEudGFncywgbm9kZSk7XG4gICAgY29uc3QgcHJvcHMgPSBzdHJpbmdpZnlQcm9wcyhub2RlLCB0YWdPYmosIGN0eCk7XG4gICAgaWYgKHByb3BzLmxlbmd0aCA+IDApXG4gICAgICAgIGN0eC5pbmRlbnRBdFN0YXJ0ID0gKGN0eC5pbmRlbnRBdFN0YXJ0ID8/IDApICsgcHJvcHMubGVuZ3RoICsgMTtcbiAgICBjb25zdCBzdHIgPSB0eXBlb2YgdGFnT2JqLnN0cmluZ2lmeSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHRhZ09iai5zdHJpbmdpZnkobm9kZSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKVxuICAgICAgICA6IGlzU2NhbGFyKG5vZGUpXG4gICAgICAgICAgICA/IHN0cmluZ2lmeVN0cmluZyhub2RlLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApXG4gICAgICAgICAgICA6IG5vZGUudG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICBpZiAoIXByb3BzKVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgIHJldHVybiBpc1NjYWxhcihub2RlKSB8fCBzdHJbMF0gPT09ICd7JyB8fCBzdHJbMF0gPT09ICdbJ1xuICAgICAgICA/IGAke3Byb3BzfSAke3N0cn1gXG4gICAgICAgIDogYCR7cHJvcHN9XFxuJHtjdHguaW5kZW50fSR7c3RyfWA7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0cmluZ2lmeUNvbnRleHQsIHN0cmluZ2lmeSB9O1xuIiwiaW1wb3J0IHsgaXNDb2xsZWN0aW9uLCBpc05vZGUsIGlzU2NhbGFyLCBpc1NlcSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5pbXBvcnQgeyBsaW5lQ29tbWVudCwgaW5kZW50Q29tbWVudCB9IGZyb20gJy4vc3RyaW5naWZ5Q29tbWVudC5qcyc7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVBhaXIoeyBrZXksIHZhbHVlIH0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgIGNvbnN0IHsgYWxsTnVsbFZhbHVlcywgZG9jLCBpbmRlbnQsIGluZGVudFN0ZXAsIG9wdGlvbnM6IHsgY29tbWVudFN0cmluZywgaW5kZW50U2VxLCBzaW1wbGVLZXlzIH0gfSA9IGN0eDtcbiAgICBsZXQga2V5Q29tbWVudCA9IChpc05vZGUoa2V5KSAmJiBrZXkuY29tbWVudCkgfHwgbnVsbDtcbiAgICBpZiAoc2ltcGxlS2V5cykge1xuICAgICAgICBpZiAoa2V5Q29tbWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXaXRoIHNpbXBsZSBrZXlzLCBrZXkgbm9kZXMgY2Fubm90IGhhdmUgY29tbWVudHMnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDb2xsZWN0aW9uKGtleSkgfHwgKCFpc05vZGUoa2V5KSAmJiB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdXaXRoIHNpbXBsZSBrZXlzLCBjb2xsZWN0aW9uIGNhbm5vdCBiZSB1c2VkIGFzIGEga2V5IHZhbHVlJztcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBleHBsaWNpdEtleSA9ICFzaW1wbGVLZXlzICYmXG4gICAgICAgICgha2V5IHx8XG4gICAgICAgICAgICAoa2V5Q29tbWVudCAmJiB2YWx1ZSA9PSBudWxsICYmICFjdHguaW5GbG93KSB8fFxuICAgICAgICAgICAgaXNDb2xsZWN0aW9uKGtleSkgfHxcbiAgICAgICAgICAgIChpc1NjYWxhcihrZXkpXG4gICAgICAgICAgICAgICAgPyBrZXkudHlwZSA9PT0gU2NhbGFyLkJMT0NLX0ZPTERFRCB8fCBrZXkudHlwZSA9PT0gU2NhbGFyLkJMT0NLX0xJVEVSQUxcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSk7XG4gICAgY3R4ID0gT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7XG4gICAgICAgIGFsbE51bGxWYWx1ZXM6IGZhbHNlLFxuICAgICAgICBpbXBsaWNpdEtleTogIWV4cGxpY2l0S2V5ICYmIChzaW1wbGVLZXlzIHx8ICFhbGxOdWxsVmFsdWVzKSxcbiAgICAgICAgaW5kZW50OiBpbmRlbnQgKyBpbmRlbnRTdGVwXG4gICAgfSk7XG4gICAgbGV0IGtleUNvbW1lbnREb25lID0gZmFsc2U7XG4gICAgbGV0IGNob21wS2VlcCA9IGZhbHNlO1xuICAgIGxldCBzdHIgPSBzdHJpbmdpZnkoa2V5LCBjdHgsICgpID0+IChrZXlDb21tZW50RG9uZSA9IHRydWUpLCAoKSA9PiAoY2hvbXBLZWVwID0gdHJ1ZSkpO1xuICAgIGlmICghZXhwbGljaXRLZXkgJiYgIWN0eC5pbkZsb3cgJiYgc3RyLmxlbmd0aCA+IDEwMjQpIHtcbiAgICAgICAgaWYgKHNpbXBsZUtleXMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpdGggc2ltcGxlIGtleXMsIHNpbmdsZSBsaW5lIHNjYWxhciBtdXN0IG5vdCBzcGFuIG1vcmUgdGhhbiAxMDI0IGNoYXJhY3RlcnMnKTtcbiAgICAgICAgZXhwbGljaXRLZXkgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY3R4LmluRmxvdykge1xuICAgICAgICBpZiAoYWxsTnVsbFZhbHVlcyB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoa2V5Q29tbWVudERvbmUgJiYgb25Db21tZW50KVxuICAgICAgICAgICAgICAgIG9uQ29tbWVudCgpO1xuICAgICAgICAgICAgcmV0dXJuIHN0ciA9PT0gJycgPyAnPycgOiBleHBsaWNpdEtleSA/IGA/ICR7c3RyfWAgOiBzdHI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoKGFsbE51bGxWYWx1ZXMgJiYgIXNpbXBsZUtleXMpIHx8ICh2YWx1ZSA9PSBudWxsICYmIGV4cGxpY2l0S2V5KSkge1xuICAgICAgICBzdHIgPSBgPyAke3N0cn1gO1xuICAgICAgICBpZiAoa2V5Q29tbWVudCAmJiAha2V5Q29tbWVudERvbmUpIHtcbiAgICAgICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGN0eC5pbmRlbnQsIGNvbW1lbnRTdHJpbmcoa2V5Q29tbWVudCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNob21wS2VlcCAmJiBvbkNob21wS2VlcClcbiAgICAgICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIGlmIChrZXlDb21tZW50RG9uZSlcbiAgICAgICAga2V5Q29tbWVudCA9IG51bGw7XG4gICAgaWYgKGV4cGxpY2l0S2V5KSB7XG4gICAgICAgIGlmIChrZXlDb21tZW50KVxuICAgICAgICAgICAgc3RyICs9IGxpbmVDb21tZW50KHN0ciwgY3R4LmluZGVudCwgY29tbWVudFN0cmluZyhrZXlDb21tZW50KSk7XG4gICAgICAgIHN0ciA9IGA/ICR7c3RyfVxcbiR7aW5kZW50fTpgO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3RyID0gYCR7c3RyfTpgO1xuICAgICAgICBpZiAoa2V5Q29tbWVudClcbiAgICAgICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGN0eC5pbmRlbnQsIGNvbW1lbnRTdHJpbmcoa2V5Q29tbWVudCkpO1xuICAgIH1cbiAgICBsZXQgdnNiLCB2Y2IsIHZhbHVlQ29tbWVudDtcbiAgICBpZiAoaXNOb2RlKHZhbHVlKSkge1xuICAgICAgICB2c2IgPSAhIXZhbHVlLnNwYWNlQmVmb3JlO1xuICAgICAgICB2Y2IgPSB2YWx1ZS5jb21tZW50QmVmb3JlO1xuICAgICAgICB2YWx1ZUNvbW1lbnQgPSB2YWx1ZS5jb21tZW50O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdnNiID0gZmFsc2U7XG4gICAgICAgIHZjYiA9IG51bGw7XG4gICAgICAgIHZhbHVlQ29tbWVudCA9IG51bGw7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgdmFsdWUgPSBkb2MuY3JlYXRlTm9kZSh2YWx1ZSk7XG4gICAgfVxuICAgIGN0eC5pbXBsaWNpdEtleSA9IGZhbHNlO1xuICAgIGlmICghZXhwbGljaXRLZXkgJiYgIWtleUNvbW1lbnQgJiYgaXNTY2FsYXIodmFsdWUpKVxuICAgICAgICBjdHguaW5kZW50QXRTdGFydCA9IHN0ci5sZW5ndGggKyAxO1xuICAgIGNob21wS2VlcCA9IGZhbHNlO1xuICAgIGlmICghaW5kZW50U2VxICYmXG4gICAgICAgIGluZGVudFN0ZXAubGVuZ3RoID49IDIgJiZcbiAgICAgICAgIWN0eC5pbkZsb3cgJiZcbiAgICAgICAgIWV4cGxpY2l0S2V5ICYmXG4gICAgICAgIGlzU2VxKHZhbHVlKSAmJlxuICAgICAgICAhdmFsdWUuZmxvdyAmJlxuICAgICAgICAhdmFsdWUudGFnICYmXG4gICAgICAgICF2YWx1ZS5hbmNob3IpIHtcbiAgICAgICAgLy8gSWYgaW5kZW50U2VxID09PSBmYWxzZSwgY29uc2lkZXIgJy0gJyBhcyBwYXJ0IG9mIGluZGVudGF0aW9uIHdoZXJlIHBvc3NpYmxlXG4gICAgICAgIGN0eC5pbmRlbnQgPSBjdHguaW5kZW50LnN1YnN0cmluZygyKTtcbiAgICB9XG4gICAgbGV0IHZhbHVlQ29tbWVudERvbmUgPSBmYWxzZTtcbiAgICBjb25zdCB2YWx1ZVN0ciA9IHN0cmluZ2lmeSh2YWx1ZSwgY3R4LCAoKSA9PiAodmFsdWVDb21tZW50RG9uZSA9IHRydWUpLCAoKSA9PiAoY2hvbXBLZWVwID0gdHJ1ZSkpO1xuICAgIGxldCB3cyA9ICcgJztcbiAgICBpZiAoa2V5Q29tbWVudCB8fCB2c2IgfHwgdmNiKSB7XG4gICAgICAgIHdzID0gdnNiID8gJ1xcbicgOiAnJztcbiAgICAgICAgaWYgKHZjYikge1xuICAgICAgICAgICAgY29uc3QgY3MgPSBjb21tZW50U3RyaW5nKHZjYik7XG4gICAgICAgICAgICB3cyArPSBgXFxuJHtpbmRlbnRDb21tZW50KGNzLCBjdHguaW5kZW50KX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZVN0ciA9PT0gJycgJiYgIWN0eC5pbkZsb3cpIHtcbiAgICAgICAgICAgIGlmICh3cyA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgd3MgPSAnXFxuXFxuJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdzICs9IGBcXG4ke2N0eC5pbmRlbnR9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICghZXhwbGljaXRLZXkgJiYgaXNDb2xsZWN0aW9uKHZhbHVlKSkge1xuICAgICAgICBjb25zdCB2czAgPSB2YWx1ZVN0clswXTtcbiAgICAgICAgY29uc3QgbmwwID0gdmFsdWVTdHIuaW5kZXhPZignXFxuJyk7XG4gICAgICAgIGNvbnN0IGhhc05ld2xpbmUgPSBubDAgIT09IC0xO1xuICAgICAgICBjb25zdCBmbG93ID0gY3R4LmluRmxvdyA/PyB2YWx1ZS5mbG93ID8/IHZhbHVlLml0ZW1zLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgaWYgKGhhc05ld2xpbmUgfHwgIWZsb3cpIHtcbiAgICAgICAgICAgIGxldCBoYXNQcm9wc0xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChoYXNOZXdsaW5lICYmICh2czAgPT09ICcmJyB8fCB2czAgPT09ICchJykpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3AwID0gdmFsdWVTdHIuaW5kZXhPZignICcpO1xuICAgICAgICAgICAgICAgIGlmICh2czAgPT09ICcmJyAmJlxuICAgICAgICAgICAgICAgICAgICBzcDAgIT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgIHNwMCA8IG5sMCAmJlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVN0cltzcDAgKyAxXSA9PT0gJyEnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwMCA9IHZhbHVlU3RyLmluZGV4T2YoJyAnLCBzcDAgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNwMCA9PT0gLTEgfHwgbmwwIDwgc3AwKVxuICAgICAgICAgICAgICAgICAgICBoYXNQcm9wc0xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFoYXNQcm9wc0xpbmUpXG4gICAgICAgICAgICAgICAgd3MgPSBgXFxuJHtjdHguaW5kZW50fWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWVTdHIgPT09ICcnIHx8IHZhbHVlU3RyWzBdID09PSAnXFxuJykge1xuICAgICAgICB3cyA9ICcnO1xuICAgIH1cbiAgICBzdHIgKz0gd3MgKyB2YWx1ZVN0cjtcbiAgICBpZiAoY3R4LmluRmxvdykge1xuICAgICAgICBpZiAodmFsdWVDb21tZW50RG9uZSAmJiBvbkNvbW1lbnQpXG4gICAgICAgICAgICBvbkNvbW1lbnQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWVDb21tZW50ICYmICF2YWx1ZUNvbW1lbnREb25lKSB7XG4gICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGN0eC5pbmRlbnQsIGNvbW1lbnRTdHJpbmcodmFsdWVDb21tZW50KSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNob21wS2VlcCAmJiBvbkNob21wS2VlcCkge1xuICAgICAgICBvbkNob21wS2VlcCgpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgeyBzdHJpbmdpZnlQYWlyIH07XG4iLCJmdW5jdGlvbiBkZWJ1Zyhsb2dMZXZlbCwgLi4ubWVzc2FnZXMpIHtcbiAgICBpZiAobG9nTGV2ZWwgPT09ICdkZWJ1ZycpXG4gICAgICAgIGNvbnNvbGUubG9nKC4uLm1lc3NhZ2VzKTtcbn1cbmZ1bmN0aW9uIHdhcm4obG9nTGV2ZWwsIHdhcm5pbmcpIHtcbiAgICBpZiAobG9nTGV2ZWwgPT09ICdkZWJ1ZycgfHwgbG9nTGV2ZWwgPT09ICd3YXJuJykge1xuICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW1pdFdhcm5pbmcpXG4gICAgICAgICAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKHdhcm5pbmcpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBkZWJ1Zywgd2FybiB9O1xuIiwiaW1wb3J0IHsgaXNTY2FsYXIsIGlzQWxpYXMsIGlzU2VxLCBpc01hcCB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5cbi8vIElmIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggYSBtZXJnZSBrZXkgaXMgYSBzaW5nbGUgbWFwcGluZyBub2RlLCBlYWNoIG9mXG4vLyBpdHMga2V5L3ZhbHVlIHBhaXJzIGlzIGluc2VydGVkIGludG8gdGhlIGN1cnJlbnQgbWFwcGluZywgdW5sZXNzIHRoZSBrZXlcbi8vIGFscmVhZHkgZXhpc3RzIGluIGl0LiBJZiB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBtZXJnZSBrZXkgaXMgYVxuLy8gc2VxdWVuY2UsIHRoZW4gdGhpcyBzZXF1ZW5jZSBpcyBleHBlY3RlZCB0byBjb250YWluIG1hcHBpbmcgbm9kZXMgYW5kIGVhY2hcbi8vIG9mIHRoZXNlIG5vZGVzIGlzIG1lcmdlZCBpbiB0dXJuIGFjY29yZGluZyB0byBpdHMgb3JkZXIgaW4gdGhlIHNlcXVlbmNlLlxuLy8gS2V5cyBpbiBtYXBwaW5nIG5vZGVzIGVhcmxpZXIgaW4gdGhlIHNlcXVlbmNlIG92ZXJyaWRlIGtleXMgc3BlY2lmaWVkIGluXG4vLyBsYXRlciBtYXBwaW5nIG5vZGVzLiAtLSBodHRwOi8veWFtbC5vcmcvdHlwZS9tZXJnZS5odG1sXG5jb25zdCBNRVJHRV9LRVkgPSAnPDwnO1xuY29uc3QgbWVyZ2UgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlID09PSBNRVJHRV9LRVkgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgJiYgdmFsdWUuZGVzY3JpcHRpb24gPT09IE1FUkdFX0tFWSksXG4gICAgZGVmYXVsdDogJ2tleScsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnLFxuICAgIHRlc3Q6IC9ePDwkLyxcbiAgICByZXNvbHZlOiAoKSA9PiBPYmplY3QuYXNzaWduKG5ldyBTY2FsYXIoU3ltYm9sKE1FUkdFX0tFWSkpLCB7XG4gICAgICAgIGFkZFRvSlNNYXA6IGFkZE1lcmdlVG9KU01hcFxuICAgIH0pLFxuICAgIHN0cmluZ2lmeTogKCkgPT4gTUVSR0VfS0VZXG59O1xuY29uc3QgaXNNZXJnZUtleSA9IChjdHgsIGtleSkgPT4gKG1lcmdlLmlkZW50aWZ5KGtleSkgfHxcbiAgICAoaXNTY2FsYXIoa2V5KSAmJlxuICAgICAgICAoIWtleS50eXBlIHx8IGtleS50eXBlID09PSBTY2FsYXIuUExBSU4pICYmXG4gICAgICAgIG1lcmdlLmlkZW50aWZ5KGtleS52YWx1ZSkpKSAmJlxuICAgIGN0eD8uZG9jLnNjaGVtYS50YWdzLnNvbWUodGFnID0+IHRhZy50YWcgPT09IG1lcmdlLnRhZyAmJiB0YWcuZGVmYXVsdCk7XG5mdW5jdGlvbiBhZGRNZXJnZVRvSlNNYXAoY3R4LCBtYXAsIHZhbHVlKSB7XG4gICAgdmFsdWUgPSBjdHggJiYgaXNBbGlhcyh2YWx1ZSkgPyB2YWx1ZS5yZXNvbHZlKGN0eC5kb2MpIDogdmFsdWU7XG4gICAgaWYgKGlzU2VxKHZhbHVlKSlcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiB2YWx1ZS5pdGVtcylcbiAgICAgICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIGl0KTtcbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiB2YWx1ZSlcbiAgICAgICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIGl0KTtcbiAgICBlbHNlXG4gICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIG1lcmdlVmFsdWUoY3R4LCBtYXAsIHZhbHVlKSB7XG4gICAgY29uc3Qgc291cmNlID0gY3R4ICYmIGlzQWxpYXModmFsdWUpID8gdmFsdWUucmVzb2x2ZShjdHguZG9jKSA6IHZhbHVlO1xuICAgIGlmICghaXNNYXAoc291cmNlKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXJnZSBzb3VyY2VzIG11c3QgYmUgbWFwcyBvciBtYXAgYWxpYXNlcycpO1xuICAgIGNvbnN0IHNyY01hcCA9IHNvdXJjZS50b0pTT04obnVsbCwgY3R4LCBNYXApO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHNyY01hcCkge1xuICAgICAgICBpZiAobWFwIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBpZiAoIW1hcC5oYXMoa2V5KSlcbiAgICAgICAgICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1hcCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgbWFwLmFkZChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFwLCBrZXkpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWFwLCBrZXksIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IHsgYWRkTWVyZ2VUb0pTTWFwLCBpc01lcmdlS2V5LCBtZXJnZSB9O1xuIiwiaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uL2xvZy5qcyc7XG5pbXBvcnQgeyBpc01lcmdlS2V5LCBhZGRNZXJnZVRvSlNNYXAgfSBmcm9tICcuLi9zY2hlbWEveWFtbC0xLjEvbWVyZ2UuanMnO1xuaW1wb3J0IHsgY3JlYXRlU3RyaW5naWZ5Q29udGV4dCB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b0pTLmpzJztcblxuZnVuY3Rpb24gYWRkUGFpclRvSlNNYXAoY3R4LCBtYXAsIHsga2V5LCB2YWx1ZSB9KSB7XG4gICAgaWYgKGlzTm9kZShrZXkpICYmIGtleS5hZGRUb0pTTWFwKVxuICAgICAgICBrZXkuYWRkVG9KU01hcChjdHgsIG1hcCwgdmFsdWUpO1xuICAgIC8vIFRPRE86IFNob3VsZCBkcm9wIHRoaXMgc3BlY2lhbCBjYXNlIGZvciBiYXJlIDw8IGhhbmRsaW5nXG4gICAgZWxzZSBpZiAoaXNNZXJnZUtleShjdHgsIGtleSkpXG4gICAgICAgIGFkZE1lcmdlVG9KU01hcChjdHgsIG1hcCwgdmFsdWUpO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBqc0tleSA9IHRvSlMoa2V5LCAnJywgY3R4KTtcbiAgICAgICAgaWYgKG1hcCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgbWFwLnNldChqc0tleSwgdG9KUyh2YWx1ZSwganNLZXksIGN0eCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1hcCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgbWFwLmFkZChqc0tleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdLZXkgPSBzdHJpbmdpZnlLZXkoa2V5LCBqc0tleSwgY3R4KTtcbiAgICAgICAgICAgIGNvbnN0IGpzVmFsdWUgPSB0b0pTKHZhbHVlLCBzdHJpbmdLZXksIGN0eCk7XG4gICAgICAgICAgICBpZiAoc3RyaW5nS2V5IGluIG1hcClcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWFwLCBzdHJpbmdLZXksIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGpzVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBtYXBbc3RyaW5nS2V5XSA9IGpzVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUtleShrZXksIGpzS2V5LCBjdHgpIHtcbiAgICBpZiAoanNLZXkgPT09IG51bGwpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBpZiAodHlwZW9mIGpzS2V5ICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIFN0cmluZyhqc0tleSk7XG4gICAgaWYgKGlzTm9kZShrZXkpICYmIGN0eD8uZG9jKSB7XG4gICAgICAgIGNvbnN0IHN0ckN0eCA9IGNyZWF0ZVN0cmluZ2lmeUNvbnRleHQoY3R4LmRvYywge30pO1xuICAgICAgICBzdHJDdHguYW5jaG9ycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIGN0eC5hbmNob3JzLmtleXMoKSlcbiAgICAgICAgICAgIHN0ckN0eC5hbmNob3JzLmFkZChub2RlLmFuY2hvcik7XG4gICAgICAgIHN0ckN0eC5pbkZsb3cgPSB0cnVlO1xuICAgICAgICBzdHJDdHguaW5TdHJpbmdpZnlLZXkgPSB0cnVlO1xuICAgICAgICBjb25zdCBzdHJLZXkgPSBrZXkudG9TdHJpbmcoc3RyQ3R4KTtcbiAgICAgICAgaWYgKCFjdHgubWFwS2V5V2FybmVkKSB7XG4gICAgICAgICAgICBsZXQganNvblN0ciA9IEpTT04uc3RyaW5naWZ5KHN0cktleSk7XG4gICAgICAgICAgICBpZiAoanNvblN0ci5sZW5ndGggPiA0MClcbiAgICAgICAgICAgICAgICBqc29uU3RyID0ganNvblN0ci5zdWJzdHJpbmcoMCwgMzYpICsgJy4uLlwiJztcbiAgICAgICAgICAgIHdhcm4oY3R4LmRvYy5vcHRpb25zLmxvZ0xldmVsLCBgS2V5cyB3aXRoIGNvbGxlY3Rpb24gdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWQgZHVlIHRvIEpTIE9iamVjdCByZXN0cmljdGlvbnM6ICR7anNvblN0cn0uIFNldCBtYXBBc01hcDogdHJ1ZSB0byB1c2Ugb2JqZWN0IGtleXMuYCk7XG4gICAgICAgICAgICBjdHgubWFwS2V5V2FybmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyS2V5O1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoanNLZXkpO1xufVxuXG5leHBvcnQgeyBhZGRQYWlyVG9KU01hcCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gJy4uL2RvYy9jcmVhdGVOb2RlLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeVBhaXIgfSBmcm9tICcuLi9zdHJpbmdpZnkvc3RyaW5naWZ5UGFpci5qcyc7XG5pbXBvcnQgeyBhZGRQYWlyVG9KU01hcCB9IGZyb20gJy4vYWRkUGFpclRvSlNNYXAuanMnO1xuaW1wb3J0IHsgTk9ERV9UWVBFLCBQQUlSLCBpc05vZGUgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcblxuZnVuY3Rpb24gY3JlYXRlUGFpcihrZXksIHZhbHVlLCBjdHgpIHtcbiAgICBjb25zdCBrID0gY3JlYXRlTm9kZShrZXksIHVuZGVmaW5lZCwgY3R4KTtcbiAgICBjb25zdCB2ID0gY3JlYXRlTm9kZSh2YWx1ZSwgdW5kZWZpbmVkLCBjdHgpO1xuICAgIHJldHVybiBuZXcgUGFpcihrLCB2KTtcbn1cbmNsYXNzIFBhaXIge1xuICAgIGNvbnN0cnVjdG9yKGtleSwgdmFsdWUgPSBudWxsKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBOT0RFX1RZUEUsIHsgdmFsdWU6IFBBSVIgfSk7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNsb25lKHNjaGVtYSkge1xuICAgICAgICBsZXQgeyBrZXksIHZhbHVlIH0gPSB0aGlzO1xuICAgICAgICBpZiAoaXNOb2RlKGtleSkpXG4gICAgICAgICAgICBrZXkgPSBrZXkuY2xvbmUoc2NoZW1hKTtcbiAgICAgICAgaWYgKGlzTm9kZSh2YWx1ZSkpXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNsb25lKHNjaGVtYSk7XG4gICAgICAgIHJldHVybiBuZXcgUGFpcihrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgdG9KU09OKF8sIGN0eCkge1xuICAgICAgICBjb25zdCBwYWlyID0gY3R4Py5tYXBBc01hcCA/IG5ldyBNYXAoKSA6IHt9O1xuICAgICAgICByZXR1cm4gYWRkUGFpclRvSlNNYXAoY3R4LCBwYWlyLCB0aGlzKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIHJldHVybiBjdHg/LmRvY1xuICAgICAgICAgICAgPyBzdHJpbmdpZnlQYWlyKHRoaXMsIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcClcbiAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBQYWlyLCBjcmVhdGVQYWlyIH07XG4iLCJpbXBvcnQgeyBpc05vZGUsIGlzUGFpciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCB7IGxpbmVDb21tZW50LCBpbmRlbnRDb21tZW50IH0gZnJvbSAnLi9zdHJpbmdpZnlDb21tZW50LmpzJztcblxuZnVuY3Rpb24gc3RyaW5naWZ5Q29sbGVjdGlvbihjb2xsZWN0aW9uLCBjdHgsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBmbG93ID0gY3R4LmluRmxvdyA/PyBjb2xsZWN0aW9uLmZsb3c7XG4gICAgY29uc3Qgc3RyaW5naWZ5ID0gZmxvdyA/IHN0cmluZ2lmeUZsb3dDb2xsZWN0aW9uIDogc3RyaW5naWZ5QmxvY2tDb2xsZWN0aW9uO1xuICAgIHJldHVybiBzdHJpbmdpZnkoY29sbGVjdGlvbiwgY3R4LCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUJsb2NrQ29sbGVjdGlvbih7IGNvbW1lbnQsIGl0ZW1zIH0sIGN0eCwgeyBibG9ja0l0ZW1QcmVmaXgsIGZsb3dDaGFycywgaXRlbUluZGVudCwgb25DaG9tcEtlZXAsIG9uQ29tbWVudCB9KSB7XG4gICAgY29uc3QgeyBpbmRlbnQsIG9wdGlvbnM6IHsgY29tbWVudFN0cmluZyB9IH0gPSBjdHg7XG4gICAgY29uc3QgaXRlbUN0eCA9IE9iamVjdC5hc3NpZ24oe30sIGN0eCwgeyBpbmRlbnQ6IGl0ZW1JbmRlbnQsIHR5cGU6IG51bGwgfSk7XG4gICAgbGV0IGNob21wS2VlcCA9IGZhbHNlOyAvLyBmbGFnIGZvciB0aGUgcHJlY2VkaW5nIG5vZGUncyBzdGF0dXNcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICBsZXQgY29tbWVudCA9IG51bGw7XG4gICAgICAgIGlmIChpc05vZGUoaXRlbSkpIHtcbiAgICAgICAgICAgIGlmICghY2hvbXBLZWVwICYmIGl0ZW0uc3BhY2VCZWZvcmUpXG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XG4gICAgICAgICAgICBhZGRDb21tZW50QmVmb3JlKGN0eCwgbGluZXMsIGl0ZW0uY29tbWVudEJlZm9yZSwgY2hvbXBLZWVwKTtcbiAgICAgICAgICAgIGlmIChpdGVtLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgY29tbWVudCA9IGl0ZW0uY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BhaXIoaXRlbSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlrID0gaXNOb2RlKGl0ZW0ua2V5KSA/IGl0ZW0ua2V5IDogbnVsbDtcbiAgICAgICAgICAgIGlmIChpaykge1xuICAgICAgICAgICAgICAgIGlmICghY2hvbXBLZWVwICYmIGlrLnNwYWNlQmVmb3JlKVxuICAgICAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKCcnKTtcbiAgICAgICAgICAgICAgICBhZGRDb21tZW50QmVmb3JlKGN0eCwgbGluZXMsIGlrLmNvbW1lbnRCZWZvcmUsIGNob21wS2VlcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hvbXBLZWVwID0gZmFsc2U7XG4gICAgICAgIGxldCBzdHIgPSBzdHJpbmdpZnkoaXRlbSwgaXRlbUN0eCwgKCkgPT4gKGNvbW1lbnQgPSBudWxsKSwgKCkgPT4gKGNob21wS2VlcCA9IHRydWUpKTtcbiAgICAgICAgaWYgKGNvbW1lbnQpXG4gICAgICAgICAgICBzdHIgKz0gbGluZUNvbW1lbnQoc3RyLCBpdGVtSW5kZW50LCBjb21tZW50U3RyaW5nKGNvbW1lbnQpKTtcbiAgICAgICAgaWYgKGNob21wS2VlcCAmJiBjb21tZW50KVxuICAgICAgICAgICAgY2hvbXBLZWVwID0gZmFsc2U7XG4gICAgICAgIGxpbmVzLnB1c2goYmxvY2tJdGVtUHJlZml4ICsgc3RyKTtcbiAgICB9XG4gICAgbGV0IHN0cjtcbiAgICBpZiAobGluZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHN0ciA9IGZsb3dDaGFycy5zdGFydCArIGZsb3dDaGFycy5lbmQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdHIgPSBsaW5lc1swXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICAgICAgc3RyICs9IGxpbmUgPyBgXFxuJHtpbmRlbnR9JHtsaW5lfWAgOiAnXFxuJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgICBzdHIgKz0gJ1xcbicgKyBpbmRlbnRDb21tZW50KGNvbW1lbnRTdHJpbmcoY29tbWVudCksIGluZGVudCk7XG4gICAgICAgIGlmIChvbkNvbW1lbnQpXG4gICAgICAgICAgICBvbkNvbW1lbnQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hvbXBLZWVwICYmIG9uQ2hvbXBLZWVwKVxuICAgICAgICBvbkNob21wS2VlcCgpO1xuICAgIHJldHVybiBzdHI7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlGbG93Q29sbGVjdGlvbih7IGl0ZW1zIH0sIGN0eCwgeyBmbG93Q2hhcnMsIGl0ZW1JbmRlbnQgfSkge1xuICAgIGNvbnN0IHsgaW5kZW50LCBpbmRlbnRTdGVwLCBmbG93Q29sbGVjdGlvblBhZGRpbmc6IGZjUGFkZGluZywgb3B0aW9uczogeyBjb21tZW50U3RyaW5nIH0gfSA9IGN0eDtcbiAgICBpdGVtSW5kZW50ICs9IGluZGVudFN0ZXA7XG4gICAgY29uc3QgaXRlbUN0eCA9IE9iamVjdC5hc3NpZ24oe30sIGN0eCwge1xuICAgICAgICBpbmRlbnQ6IGl0ZW1JbmRlbnQsXG4gICAgICAgIGluRmxvdzogdHJ1ZSxcbiAgICAgICAgdHlwZTogbnVsbFxuICAgIH0pO1xuICAgIGxldCByZXFOZXdsaW5lID0gZmFsc2U7XG4gICAgbGV0IGxpbmVzQXRWYWx1ZSA9IDA7XG4gICAgY29uc3QgbGluZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgbGV0IGNvbW1lbnQgPSBudWxsO1xuICAgICAgICBpZiAoaXNOb2RlKGl0ZW0pKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5zcGFjZUJlZm9yZSlcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKCcnKTtcbiAgICAgICAgICAgIGFkZENvbW1lbnRCZWZvcmUoY3R4LCBsaW5lcywgaXRlbS5jb21tZW50QmVmb3JlLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoaXRlbS5jb21tZW50KVxuICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBpdGVtLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQYWlyKGl0ZW0pKSB7XG4gICAgICAgICAgICBjb25zdCBpayA9IGlzTm9kZShpdGVtLmtleSkgPyBpdGVtLmtleSA6IG51bGw7XG4gICAgICAgICAgICBpZiAoaWspIHtcbiAgICAgICAgICAgICAgICBpZiAoaWsuc3BhY2VCZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgICAgIGFkZENvbW1lbnRCZWZvcmUoY3R4LCBsaW5lcywgaWsuY29tbWVudEJlZm9yZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmIChpay5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICByZXFOZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGl2ID0gaXNOb2RlKGl0ZW0udmFsdWUpID8gaXRlbS52YWx1ZSA6IG51bGw7XG4gICAgICAgICAgICBpZiAoaXYpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXYuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IGl2LmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgaWYgKGl2LmNvbW1lbnRCZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgIHJlcU5ld2xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS52YWx1ZSA9PSBudWxsICYmIGlrPy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgY29tbWVudCA9IGlrLmNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbW1lbnQpXG4gICAgICAgICAgICByZXFOZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgbGV0IHN0ciA9IHN0cmluZ2lmeShpdGVtLCBpdGVtQ3R4LCAoKSA9PiAoY29tbWVudCA9IG51bGwpKTtcbiAgICAgICAgaWYgKGkgPCBpdGVtcy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgc3RyICs9ICcsJztcbiAgICAgICAgaWYgKGNvbW1lbnQpXG4gICAgICAgICAgICBzdHIgKz0gbGluZUNvbW1lbnQoc3RyLCBpdGVtSW5kZW50LCBjb21tZW50U3RyaW5nKGNvbW1lbnQpKTtcbiAgICAgICAgaWYgKCFyZXFOZXdsaW5lICYmIChsaW5lcy5sZW5ndGggPiBsaW5lc0F0VmFsdWUgfHwgc3RyLmluY2x1ZGVzKCdcXG4nKSkpXG4gICAgICAgICAgICByZXFOZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgbGluZXMucHVzaChzdHIpO1xuICAgICAgICBsaW5lc0F0VmFsdWUgPSBsaW5lcy5sZW5ndGg7XG4gICAgfVxuICAgIGNvbnN0IHsgc3RhcnQsIGVuZCB9ID0gZmxvd0NoYXJzO1xuICAgIGlmIChsaW5lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgZW5kO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFyZXFOZXdsaW5lKSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBsaW5lcy5yZWR1Y2UoKHN1bSwgbGluZSkgPT4gc3VtICsgbGluZS5sZW5ndGggKyAyLCAyKTtcbiAgICAgICAgICAgIHJlcU5ld2xpbmUgPSBjdHgub3B0aW9ucy5saW5lV2lkdGggPiAwICYmIGxlbiA+IGN0eC5vcHRpb25zLmxpbmVXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVxTmV3bGluZSkge1xuICAgICAgICAgICAgbGV0IHN0ciA9IHN0YXJ0O1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKVxuICAgICAgICAgICAgICAgIHN0ciArPSBsaW5lID8gYFxcbiR7aW5kZW50U3RlcH0ke2luZGVudH0ke2xpbmV9YCA6ICdcXG4nO1xuICAgICAgICAgICAgcmV0dXJuIGAke3N0cn1cXG4ke2luZGVudH0ke2VuZH1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGAke3N0YXJ0fSR7ZmNQYWRkaW5nfSR7bGluZXMuam9pbignICcpfSR7ZmNQYWRkaW5nfSR7ZW5kfWA7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBhZGRDb21tZW50QmVmb3JlKHsgaW5kZW50LCBvcHRpb25zOiB7IGNvbW1lbnRTdHJpbmcgfSB9LCBsaW5lcywgY29tbWVudCwgY2hvbXBLZWVwKSB7XG4gICAgaWYgKGNvbW1lbnQgJiYgY2hvbXBLZWVwKVxuICAgICAgICBjb21tZW50ID0gY29tbWVudC5yZXBsYWNlKC9eXFxuKy8sICcnKTtcbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgICBjb25zdCBpYyA9IGluZGVudENvbW1lbnQoY29tbWVudFN0cmluZyhjb21tZW50KSwgaW5kZW50KTtcbiAgICAgICAgbGluZXMucHVzaChpYy50cmltU3RhcnQoKSk7IC8vIEF2b2lkIGRvdWJsZSBpbmRlbnQgb24gZmlyc3QgbGluZVxuICAgIH1cbn1cblxuZXhwb3J0IHsgc3RyaW5naWZ5Q29sbGVjdGlvbiB9O1xuIiwiaW1wb3J0IHsgc3RyaW5naWZ5Q29sbGVjdGlvbiB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlDb2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IGFkZFBhaXJUb0pTTWFwIH0gZnJvbSAnLi9hZGRQYWlyVG9KU01hcC5qcyc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi9Db2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IGlzUGFpciwgaXNTY2FsYXIsIE1BUCB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgUGFpciwgY3JlYXRlUGFpciB9IGZyb20gJy4vUGFpci5qcyc7XG5pbXBvcnQgeyBpc1NjYWxhclZhbHVlIH0gZnJvbSAnLi9TY2FsYXIuanMnO1xuXG5mdW5jdGlvbiBmaW5kUGFpcihpdGVtcywga2V5KSB7XG4gICAgY29uc3QgayA9IGlzU2NhbGFyKGtleSkgPyBrZXkudmFsdWUgOiBrZXk7XG4gICAgZm9yIChjb25zdCBpdCBvZiBpdGVtcykge1xuICAgICAgICBpZiAoaXNQYWlyKGl0KSkge1xuICAgICAgICAgICAgaWYgKGl0LmtleSA9PT0ga2V5IHx8IGl0LmtleSA9PT0gaylcbiAgICAgICAgICAgICAgICByZXR1cm4gaXQ7XG4gICAgICAgICAgICBpZiAoaXNTY2FsYXIoaXQua2V5KSAmJiBpdC5rZXkudmFsdWUgPT09IGspXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5jbGFzcyBZQU1MTWFwIGV4dGVuZHMgQ29sbGVjdGlvbiB7XG4gICAgc3RhdGljIGdldCB0YWdOYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3RhZzp5YW1sLm9yZywyMDAyOm1hcCc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHNjaGVtYSkge1xuICAgICAgICBzdXBlcihNQVAsIHNjaGVtYSk7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBnZW5lcmljIGNvbGxlY3Rpb24gcGFyc2luZyBtZXRob2QgdGhhdCBjYW4gYmUgZXh0ZW5kZWRcbiAgICAgKiB0byBvdGhlciBub2RlIGNsYXNzZXMgdGhhdCBpbmhlcml0IGZyb20gWUFNTE1hcFxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tKHNjaGVtYSwgb2JqLCBjdHgpIHtcbiAgICAgICAgY29uc3QgeyBrZWVwVW5kZWZpbmVkLCByZXBsYWNlciB9ID0gY3R4O1xuICAgICAgICBjb25zdCBtYXAgPSBuZXcgdGhpcyhzY2hlbWEpO1xuICAgICAgICBjb25zdCBhZGQgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlcGxhY2VyLmNhbGwob2JqLCBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVwbGFjZXIpICYmICFyZXBsYWNlci5pbmNsdWRlcyhrZXkpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkIHx8IGtlZXBVbmRlZmluZWQpXG4gICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goY3JlYXRlUGFpcihrZXksIHZhbHVlLCBjdHgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygb2JqKVxuICAgICAgICAgICAgICAgIGFkZChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG9iaikpXG4gICAgICAgICAgICAgICAgYWRkKGtleSwgb2JqW2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLnNvcnRNYXBFbnRyaWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBtYXAuaXRlbXMuc29ydChzY2hlbWEuc29ydE1hcEVudHJpZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSB2YWx1ZSB0byB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdmVyd3JpdGUgLSBJZiBub3Qgc2V0IGB0cnVlYCwgdXNpbmcgYSBrZXkgdGhhdCBpcyBhbHJlYWR5IGluIHRoZVxuICAgICAqICAgY29sbGVjdGlvbiB3aWxsIHRocm93LiBPdGhlcndpc2UsIG92ZXJ3cml0ZXMgdGhlIHByZXZpb3VzIHZhbHVlLlxuICAgICAqL1xuICAgIGFkZChwYWlyLCBvdmVyd3JpdGUpIHtcbiAgICAgICAgbGV0IF9wYWlyO1xuICAgICAgICBpZiAoaXNQYWlyKHBhaXIpKVxuICAgICAgICAgICAgX3BhaXIgPSBwYWlyO1xuICAgICAgICBlbHNlIGlmICghcGFpciB8fCB0eXBlb2YgcGFpciAhPT0gJ29iamVjdCcgfHwgISgna2V5JyBpbiBwYWlyKSkge1xuICAgICAgICAgICAgLy8gSW4gVHlwZVNjcmlwdCwgdGhpcyBuZXZlciBoYXBwZW5zLlxuICAgICAgICAgICAgX3BhaXIgPSBuZXcgUGFpcihwYWlyLCBwYWlyPy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgX3BhaXIgPSBuZXcgUGFpcihwYWlyLmtleSwgcGFpci52YWx1ZSk7XG4gICAgICAgIGNvbnN0IHByZXYgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBfcGFpci5rZXkpO1xuICAgICAgICBjb25zdCBzb3J0RW50cmllcyA9IHRoaXMuc2NoZW1hPy5zb3J0TWFwRW50cmllcztcbiAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgIGlmICghb3ZlcndyaXRlKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgS2V5ICR7X3BhaXIua2V5fSBhbHJlYWR5IHNldGApO1xuICAgICAgICAgICAgLy8gRm9yIHNjYWxhcnMsIGtlZXAgdGhlIG9sZCBub2RlICYgaXRzIGNvbW1lbnRzIGFuZCBhbmNob3JzXG4gICAgICAgICAgICBpZiAoaXNTY2FsYXIocHJldi52YWx1ZSkgJiYgaXNTY2FsYXJWYWx1ZShfcGFpci52YWx1ZSkpXG4gICAgICAgICAgICAgICAgcHJldi52YWx1ZS52YWx1ZSA9IF9wYWlyLnZhbHVlO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHByZXYudmFsdWUgPSBfcGFpci52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzb3J0RW50cmllcykge1xuICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuaXRlbXMuZmluZEluZGV4KGl0ZW0gPT4gc29ydEVudHJpZXMoX3BhaXIsIGl0ZW0pIDwgMCk7XG4gICAgICAgICAgICBpZiAoaSA9PT0gLTEpXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKF9wYWlyKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShpLCAwLCBfcGFpcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goX3BhaXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgY29uc3QgaXQgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgICAgICBpZiAoIWl0KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBkZWwgPSB0aGlzLml0ZW1zLnNwbGljZSh0aGlzLml0ZW1zLmluZGV4T2YoaXQpLCAxKTtcbiAgICAgICAgcmV0dXJuIGRlbC5sZW5ndGggPiAwO1xuICAgIH1cbiAgICBnZXQoa2V5LCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIGNvbnN0IGl0ID0gZmluZFBhaXIodGhpcy5pdGVtcywga2V5KTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGl0Py52YWx1ZTtcbiAgICAgICAgcmV0dXJuICgha2VlcFNjYWxhciAmJiBpc1NjYWxhcihub2RlKSA/IG5vZGUudmFsdWUgOiBub2RlKSA/PyB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZmluZFBhaXIodGhpcy5pdGVtcywga2V5KTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5hZGQobmV3IFBhaXIoa2V5LCB2YWx1ZSksIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY3R4IC0gQ29udmVyc2lvbiBjb250ZXh0LCBvcmlnaW5hbGx5IHNldCBpbiBEb2N1bWVudCN0b0pTKClcbiAgICAgKiBAcGFyYW0ge0NsYXNzfSBUeXBlIC0gSWYgc2V0LCBmb3JjZXMgdGhlIHJldHVybmVkIGNvbGxlY3Rpb24gdHlwZVxuICAgICAqIEByZXR1cm5zIEluc3RhbmNlIG9mIFR5cGUsIE1hcCwgb3IgT2JqZWN0XG4gICAgICovXG4gICAgdG9KU09OKF8sIGN0eCwgVHlwZSkge1xuICAgICAgICBjb25zdCBtYXAgPSBUeXBlID8gbmV3IFR5cGUoKSA6IGN0eD8ubWFwQXNNYXAgPyBuZXcgTWFwKCkgOiB7fTtcbiAgICAgICAgaWYgKGN0eD8ub25DcmVhdGUpXG4gICAgICAgICAgICBjdHgub25DcmVhdGUobWFwKTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuaXRlbXMpXG4gICAgICAgICAgICBhZGRQYWlyVG9KU01hcChjdHgsIG1hcCwgaXRlbSk7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfVxuICAgIHRvU3RyaW5nKGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgICAgICBpZiAoIWN0eClcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgICAgICAgIGlmICghaXNQYWlyKGl0ZW0pKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWFwIGl0ZW1zIG11c3QgYWxsIGJlIHBhaXJzOyBmb3VuZCAke0pTT04uc3RyaW5naWZ5KGl0ZW0pfSBpbnN0ZWFkYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjdHguYWxsTnVsbFZhbHVlcyAmJiB0aGlzLmhhc0FsbE51bGxWYWx1ZXMoZmFsc2UpKVxuICAgICAgICAgICAgY3R4ID0gT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7IGFsbE51bGxWYWx1ZXM6IHRydWUgfSk7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlDb2xsZWN0aW9uKHRoaXMsIGN0eCwge1xuICAgICAgICAgICAgYmxvY2tJdGVtUHJlZml4OiAnJyxcbiAgICAgICAgICAgIGZsb3dDaGFyczogeyBzdGFydDogJ3snLCBlbmQ6ICd9JyB9LFxuICAgICAgICAgICAgaXRlbUluZGVudDogY3R4LmluZGVudCB8fCAnJyxcbiAgICAgICAgICAgIG9uQ2hvbXBLZWVwLFxuICAgICAgICAgICAgb25Db21tZW50XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgWUFNTE1hcCwgZmluZFBhaXIgfTtcbiIsImltcG9ydCB7IGlzTWFwIH0gZnJvbSAnLi4vLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgWUFNTE1hcCB9IGZyb20gJy4uLy4uL25vZGVzL1lBTUxNYXAuanMnO1xuXG5jb25zdCBtYXAgPSB7XG4gICAgY29sbGVjdGlvbjogJ21hcCcsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICBub2RlQ2xhc3M6IFlBTUxNYXAsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6bWFwJyxcbiAgICByZXNvbHZlKG1hcCwgb25FcnJvcikge1xuICAgICAgICBpZiAoIWlzTWFwKG1hcCkpXG4gICAgICAgICAgICBvbkVycm9yKCdFeHBlY3RlZCBhIG1hcHBpbmcgZm9yIHRoaXMgdGFnJyk7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfSxcbiAgICBjcmVhdGVOb2RlOiAoc2NoZW1hLCBvYmosIGN0eCkgPT4gWUFNTE1hcC5mcm9tKHNjaGVtYSwgb2JqLCBjdHgpXG59O1xuXG5leHBvcnQgeyBtYXAgfTtcbiIsImltcG9ydCB7IGNyZWF0ZU5vZGUgfSBmcm9tICcuLi9kb2MvY3JlYXRlTm9kZS5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlDb2xsZWN0aW9uIH0gZnJvbSAnLi4vc3RyaW5naWZ5L3N0cmluZ2lmeUNvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4vQ29sbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBTRVEsIGlzU2NhbGFyIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBpc1NjYWxhclZhbHVlIH0gZnJvbSAnLi9TY2FsYXIuanMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4vdG9KUy5qcyc7XG5cbmNsYXNzIFlBTUxTZXEgZXh0ZW5kcyBDb2xsZWN0aW9uIHtcbiAgICBzdGF0aWMgZ2V0IHRhZ05hbWUoKSB7XG4gICAgICAgIHJldHVybiAndGFnOnlhbWwub3JnLDIwMDI6c2VxJztcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hKSB7XG4gICAgICAgIHN1cGVyKFNFUSwgc2NoZW1hKTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIH1cbiAgICBhZGQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBga2V5YCBtdXN0IGNvbnRhaW4gYSByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnRlZ2VyIGZvciB0aGlzIHRvIHN1Y2NlZWQuXG4gICAgICogSXQgbWF5IGJlIHdyYXBwZWQgaW4gYSBgU2NhbGFyYC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgaXRlbSB3YXMgZm91bmQgYW5kIHJlbW92ZWQuXG4gICAgICovXG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICBjb25zdCBpZHggPSBhc0l0ZW1JbmRleChrZXkpO1xuICAgICAgICBpZiAodHlwZW9mIGlkeCAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGRlbCA9IHRoaXMuaXRlbXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIHJldHVybiBkZWwubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgZ2V0KGtleSwga2VlcFNjYWxhcikge1xuICAgICAgICBjb25zdCBpZHggPSBhc0l0ZW1JbmRleChrZXkpO1xuICAgICAgICBpZiAodHlwZW9mIGlkeCAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBpdCA9IHRoaXMuaXRlbXNbaWR4XTtcbiAgICAgICAgcmV0dXJuICFrZWVwU2NhbGFyICYmIGlzU2NhbGFyKGl0KSA/IGl0LnZhbHVlIDogaXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY29sbGVjdGlvbiBpbmNsdWRlcyBhIHZhbHVlIHdpdGggdGhlIGtleSBga2V5YC5cbiAgICAgKlxuICAgICAqIGBrZXlgIG11c3QgY29udGFpbiBhIHJlcHJlc2VudGF0aW9uIG9mIGFuIGludGVnZXIgZm9yIHRoaXMgdG8gc3VjY2VlZC5cbiAgICAgKiBJdCBtYXkgYmUgd3JhcHBlZCBpbiBhIGBTY2FsYXJgLlxuICAgICAqL1xuICAgIGhhcyhrZXkpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gYXNJdGVtSW5kZXgoa2V5KTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpZHggPT09ICdudW1iZXInICYmIGlkeCA8IHRoaXMuaXRlbXMubGVuZ3RoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgaW4gdGhpcyBjb2xsZWN0aW9uLiBGb3IgYCEhc2V0YCwgYHZhbHVlYCBuZWVkcyB0byBiZSBhXG4gICAgICogYm9vbGVhbiB0byBhZGQvcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIHNldC5cbiAgICAgKlxuICAgICAqIElmIGBrZXlgIGRvZXMgbm90IGNvbnRhaW4gYSByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnRlZ2VyLCB0aGlzIHdpbGwgdGhyb3cuXG4gICAgICogSXQgbWF5IGJlIHdyYXBwZWQgaW4gYSBgU2NhbGFyYC5cbiAgICAgKi9cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBpZHggPSBhc0l0ZW1JbmRleChrZXkpO1xuICAgICAgICBpZiAodHlwZW9mIGlkeCAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGEgdmFsaWQgaW5kZXgsIG5vdCAke2tleX0uYCk7XG4gICAgICAgIGNvbnN0IHByZXYgPSB0aGlzLml0ZW1zW2lkeF07XG4gICAgICAgIGlmIChpc1NjYWxhcihwcmV2KSAmJiBpc1NjYWxhclZhbHVlKHZhbHVlKSlcbiAgICAgICAgICAgIHByZXYudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5pdGVtc1tpZHhdID0gdmFsdWU7XG4gICAgfVxuICAgIHRvSlNPTihfLCBjdHgpIHtcbiAgICAgICAgY29uc3Qgc2VxID0gW107XG4gICAgICAgIGlmIChjdHg/Lm9uQ3JlYXRlKVxuICAgICAgICAgICAgY3R4Lm9uQ3JlYXRlKHNlcSk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuaXRlbXMpXG4gICAgICAgICAgICBzZXEucHVzaCh0b0pTKGl0ZW0sIFN0cmluZyhpKyspLCBjdHgpKTtcbiAgICAgICAgcmV0dXJuIHNlcTtcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIGlmICghY3R4KVxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgICAgICByZXR1cm4gc3RyaW5naWZ5Q29sbGVjdGlvbih0aGlzLCBjdHgsIHtcbiAgICAgICAgICAgIGJsb2NrSXRlbVByZWZpeDogJy0gJyxcbiAgICAgICAgICAgIGZsb3dDaGFyczogeyBzdGFydDogJ1snLCBlbmQ6ICddJyB9LFxuICAgICAgICAgICAgaXRlbUluZGVudDogKGN0eC5pbmRlbnQgfHwgJycpICsgJyAgJyxcbiAgICAgICAgICAgIG9uQ2hvbXBLZWVwLFxuICAgICAgICAgICAgb25Db21tZW50XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbShzY2hlbWEsIG9iaiwgY3R4KSB7XG4gICAgICAgIGNvbnN0IHsgcmVwbGFjZXIgfSA9IGN0eDtcbiAgICAgICAgY29uc3Qgc2VxID0gbmV3IHRoaXMoc2NoZW1hKTtcbiAgICAgICAgaWYgKG9iaiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KG9iaikpIHtcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGl0IG9mIG9iaikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gb2JqIGluc3RhbmNlb2YgU2V0ID8gaXQgOiBTdHJpbmcoaSsrKTtcbiAgICAgICAgICAgICAgICAgICAgaXQgPSByZXBsYWNlci5jYWxsKG9iaiwga2V5LCBpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlcS5pdGVtcy5wdXNoKGNyZWF0ZU5vZGUoaXQsIHVuZGVmaW5lZCwgY3R4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc0l0ZW1JbmRleChrZXkpIHtcbiAgICBsZXQgaWR4ID0gaXNTY2FsYXIoa2V5KSA/IGtleS52YWx1ZSA6IGtleTtcbiAgICBpZiAoaWR4ICYmIHR5cGVvZiBpZHggPT09ICdzdHJpbmcnKVxuICAgICAgICBpZHggPSBOdW1iZXIoaWR4KTtcbiAgICByZXR1cm4gdHlwZW9mIGlkeCA9PT0gJ251bWJlcicgJiYgTnVtYmVyLmlzSW50ZWdlcihpZHgpICYmIGlkeCA+PSAwXG4gICAgICAgID8gaWR4XG4gICAgICAgIDogbnVsbDtcbn1cblxuZXhwb3J0IHsgWUFNTFNlcSB9O1xuIiwiaW1wb3J0IHsgaXNTZXEgfSBmcm9tICcuLi8uLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBZQU1MU2VxIH0gZnJvbSAnLi4vLi4vbm9kZXMvWUFNTFNlcS5qcyc7XG5cbmNvbnN0IHNlcSA9IHtcbiAgICBjb2xsZWN0aW9uOiAnc2VxJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIG5vZGVDbGFzczogWUFNTFNlcSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpzZXEnLFxuICAgIHJlc29sdmUoc2VxLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICghaXNTZXEoc2VxKSlcbiAgICAgICAgICAgIG9uRXJyb3IoJ0V4cGVjdGVkIGEgc2VxdWVuY2UgZm9yIHRoaXMgdGFnJyk7XG4gICAgICAgIHJldHVybiBzZXE7XG4gICAgfSxcbiAgICBjcmVhdGVOb2RlOiAoc2NoZW1hLCBvYmosIGN0eCkgPT4gWUFNTFNlcS5mcm9tKHNjaGVtYSwgb2JqLCBjdHgpXG59O1xuXG5leHBvcnQgeyBzZXEgfTtcbiIsImltcG9ydCB7IHN0cmluZ2lmeVN0cmluZyB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlTdHJpbmcuanMnO1xuXG5jb25zdCBzdHJpbmcgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpzdHInLFxuICAgIHJlc29sdmU6IHN0ciA9PiBzdHIsXG4gICAgc3RyaW5naWZ5KGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgICAgICBjdHggPSBPYmplY3QuYXNzaWduKHsgYWN0dWFsU3RyaW5nOiB0cnVlIH0sIGN0eCk7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBzdHJpbmcgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5cbmNvbnN0IG51bGxUYWcgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlID09IG51bGwsXG4gICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFNjYWxhcihudWxsKSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOm51bGwnLFxuICAgIHRlc3Q6IC9eKD86fnxbTm5ddWxsfE5VTEwpPyQvLFxuICAgIHJlc29sdmU6ICgpID0+IG5ldyBTY2FsYXIobnVsbCksXG4gICAgc3RyaW5naWZ5OiAoeyBzb3VyY2UgfSwgY3R4KSA9PiB0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJyAmJiBudWxsVGFnLnRlc3QudGVzdChzb3VyY2UpXG4gICAgICAgID8gc291cmNlXG4gICAgICAgIDogY3R4Lm9wdGlvbnMubnVsbFN0clxufTtcblxuZXhwb3J0IHsgbnVsbFRhZyB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcblxuY29uc3QgYm9vbFRhZyA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpib29sJyxcbiAgICB0ZXN0OiAvXig/OltUdF1ydWV8VFJVRXxbRmZdYWxzZXxGQUxTRSkkLyxcbiAgICByZXNvbHZlOiBzdHIgPT4gbmV3IFNjYWxhcihzdHJbMF0gPT09ICd0JyB8fCBzdHJbMF0gPT09ICdUJyksXG4gICAgc3RyaW5naWZ5KHsgc291cmNlLCB2YWx1ZSB9LCBjdHgpIHtcbiAgICAgICAgaWYgKHNvdXJjZSAmJiBib29sVGFnLnRlc3QudGVzdChzb3VyY2UpKSB7XG4gICAgICAgICAgICBjb25zdCBzdiA9IHNvdXJjZVswXSA9PT0gJ3QnIHx8IHNvdXJjZVswXSA9PT0gJ1QnO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBzdilcbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZSA/IGN0eC5vcHRpb25zLnRydWVTdHIgOiBjdHgub3B0aW9ucy5mYWxzZVN0cjtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBib29sVGFnIH07XG4iLCJmdW5jdGlvbiBzdHJpbmdpZnlOdW1iZXIoeyBmb3JtYXQsIG1pbkZyYWN0aW9uRGlnaXRzLCB0YWcsIHZhbHVlIH0pIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50JylcbiAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgY29uc3QgbnVtID0gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogTnVtYmVyKHZhbHVlKTtcbiAgICBpZiAoIWlzRmluaXRlKG51bSkpXG4gICAgICAgIHJldHVybiBpc05hTihudW0pID8gJy5uYW4nIDogbnVtIDwgMCA/ICctLmluZicgOiAnLmluZic7XG4gICAgbGV0IG4gPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgaWYgKCFmb3JtYXQgJiZcbiAgICAgICAgbWluRnJhY3Rpb25EaWdpdHMgJiZcbiAgICAgICAgKCF0YWcgfHwgdGFnID09PSAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnKSAmJlxuICAgICAgICAvXlxcZC8udGVzdChuKSkge1xuICAgICAgICBsZXQgaSA9IG4uaW5kZXhPZignLicpO1xuICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgIGkgPSBuLmxlbmd0aDtcbiAgICAgICAgICAgIG4gKz0gJy4nO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkID0gbWluRnJhY3Rpb25EaWdpdHMgLSAobi5sZW5ndGggLSBpIC0gMSk7XG4gICAgICAgIHdoaWxlIChkLS0gPiAwKVxuICAgICAgICAgICAgbiArPSAnMCc7XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuXG5leHBvcnQgeyBzdHJpbmdpZnlOdW1iZXIgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlOdW1iZXIgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJztcblxuY29uc3QgZmxvYXROYU4gPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgdGVzdDogL14oPzpbLStdP1xcLig/OmluZnxJbmZ8SU5GKXxcXC5uYW58XFwuTmFOfFxcLk5BTikkLyxcbiAgICByZXNvbHZlOiBzdHIgPT4gc3RyLnNsaWNlKC0zKS50b0xvd2VyQ2FzZSgpID09PSAnbmFuJ1xuICAgICAgICA/IE5hTlxuICAgICAgICA6IHN0clswXSA9PT0gJy0nXG4gICAgICAgICAgICA/IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICAgICAgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5jb25zdCBmbG9hdEV4cCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICBmb3JtYXQ6ICdFWFAnLFxuICAgIHRlc3Q6IC9eWy0rXT8oPzpcXC5bMC05XSt8WzAtOV0rKD86XFwuWzAtOV0qKT8pW2VFXVstK10/WzAtOV0rJC8sXG4gICAgcmVzb2x2ZTogc3RyID0+IHBhcnNlRmxvYXQoc3RyKSxcbiAgICBzdHJpbmdpZnkobm9kZSkge1xuICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIobm9kZS52YWx1ZSk7XG4gICAgICAgIHJldHVybiBpc0Zpbml0ZShudW0pID8gbnVtLnRvRXhwb25lbnRpYWwoKSA6IHN0cmluZ2lmeU51bWJlcihub2RlKTtcbiAgICB9XG59O1xuY29uc3QgZmxvYXQgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgdGVzdDogL15bLStdPyg/OlxcLlswLTldK3xbMC05XStcXC5bMC05XSopJC8sXG4gICAgcmVzb2x2ZShzdHIpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBTY2FsYXIocGFyc2VGbG9hdChzdHIpKTtcbiAgICAgICAgY29uc3QgZG90ID0gc3RyLmluZGV4T2YoJy4nKTtcbiAgICAgICAgaWYgKGRvdCAhPT0gLTEgJiYgc3RyW3N0ci5sZW5ndGggLSAxXSA9PT0gJzAnKVxuICAgICAgICAgICAgbm9kZS5taW5GcmFjdGlvbkRpZ2l0cyA9IHN0ci5sZW5ndGggLSBkb3QgLSAxO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9LFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5TnVtYmVyXG59O1xuXG5leHBvcnQgeyBmbG9hdCwgZmxvYXRFeHAsIGZsb2F0TmFOIH07XG4iLCJpbXBvcnQgeyBzdHJpbmdpZnlOdW1iZXIgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJztcblxuY29uc3QgaW50SWRlbnRpZnkgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSk7XG5jb25zdCBpbnRSZXNvbHZlID0gKHN0ciwgb2Zmc2V0LCByYWRpeCwgeyBpbnRBc0JpZ0ludCB9KSA9PiAoaW50QXNCaWdJbnQgPyBCaWdJbnQoc3RyKSA6IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcob2Zmc2V0KSwgcmFkaXgpKTtcbmZ1bmN0aW9uIGludFN0cmluZ2lmeShub2RlLCByYWRpeCwgcHJlZml4KSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gbm9kZTtcbiAgICBpZiAoaW50SWRlbnRpZnkodmFsdWUpICYmIHZhbHVlID49IDApXG4gICAgICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZS50b1N0cmluZyhyYWRpeCk7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU51bWJlcihub2RlKTtcbn1cbmNvbnN0IGludE9jdCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gaW50SWRlbnRpZnkodmFsdWUpICYmIHZhbHVlID49IDAsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIGZvcm1hdDogJ09DVCcsXG4gICAgdGVzdDogL14wb1swLTddKyQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCAyLCA4LCBvcHQpLFxuICAgIHN0cmluZ2lmeTogbm9kZSA9PiBpbnRTdHJpbmdpZnkobm9kZSwgOCwgJzBvJylcbn07XG5jb25zdCBpbnQgPSB7XG4gICAgaWRlbnRpZnk6IGludElkZW50aWZ5LFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICB0ZXN0OiAvXlstK10/WzAtOV0rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDAsIDEwLCBvcHQpLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5TnVtYmVyXG59O1xuY29uc3QgaW50SGV4ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiBpbnRJZGVudGlmeSh2YWx1ZSkgJiYgdmFsdWUgPj0gMCxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnSEVYJyxcbiAgICB0ZXN0OiAvXjB4WzAtOWEtZkEtRl0rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDE2LCBvcHQpLFxuICAgIHN0cmluZ2lmeTogbm9kZSA9PiBpbnRTdHJpbmdpZnkobm9kZSwgMTYsICcweCcpXG59O1xuXG5leHBvcnQgeyBpbnQsIGludEhleCwgaW50T2N0IH07XG4iLCJpbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9jb21tb24vbWFwLmpzJztcbmltcG9ydCB7IG51bGxUYWcgfSBmcm9tICcuLi9jb21tb24vbnVsbC5qcyc7XG5pbXBvcnQgeyBzZXEgfSBmcm9tICcuLi9jb21tb24vc2VxLmpzJztcbmltcG9ydCB7IHN0cmluZyB9IGZyb20gJy4uL2NvbW1vbi9zdHJpbmcuanMnO1xuaW1wb3J0IHsgYm9vbFRhZyB9IGZyb20gJy4vYm9vbC5qcyc7XG5pbXBvcnQgeyBmbG9hdE5hTiwgZmxvYXRFeHAsIGZsb2F0IH0gZnJvbSAnLi9mbG9hdC5qcyc7XG5pbXBvcnQgeyBpbnRPY3QsIGludCwgaW50SGV4IH0gZnJvbSAnLi9pbnQuanMnO1xuXG5jb25zdCBzY2hlbWEgPSBbXG4gICAgbWFwLFxuICAgIHNlcSxcbiAgICBzdHJpbmcsXG4gICAgbnVsbFRhZyxcbiAgICBib29sVGFnLFxuICAgIGludE9jdCxcbiAgICBpbnQsXG4gICAgaW50SGV4LFxuICAgIGZsb2F0TmFOLFxuICAgIGZsb2F0RXhwLFxuICAgIGZsb2F0XG5dO1xuXG5leHBvcnQgeyBzY2hlbWEgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9jb21tb24vbWFwLmpzJztcbmltcG9ydCB7IHNlcSB9IGZyb20gJy4uL2NvbW1vbi9zZXEuanMnO1xuXG5mdW5jdGlvbiBpbnRJZGVudGlmeSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xufVxuY29uc3Qgc3RyaW5naWZ5SlNPTiA9ICh7IHZhbHVlIH0pID0+IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbmNvbnN0IGpzb25TY2FsYXJzID0gW1xuICAgIHtcbiAgICAgICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicsXG4gICAgICAgIHJlc29sdmU6IHN0ciA9PiBzdHIsXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgPT0gbnVsbCxcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFNjYWxhcihudWxsKSxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6bnVsbCcsXG4gICAgICAgIHRlc3Q6IC9ebnVsbCQvLFxuICAgICAgICByZXNvbHZlOiAoKSA9PiBudWxsLFxuICAgICAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeUpTT05cbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpib29sJyxcbiAgICAgICAgdGVzdDogL150cnVlfGZhbHNlJC8sXG4gICAgICAgIHJlc29sdmU6IHN0ciA9PiBzdHIgPT09ICd0cnVlJyxcbiAgICAgICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlKU09OXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkZW50aWZ5OiBpbnRJZGVudGlmeSxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICAgICAgdGVzdDogL14tPyg/OjB8WzEtOV1bMC05XSopJC8sXG4gICAgICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCB7IGludEFzQmlnSW50IH0pID0+IGludEFzQmlnSW50ID8gQmlnSW50KHN0cikgOiBwYXJzZUludChzdHIsIDEwKSxcbiAgICAgICAgc3RyaW5naWZ5OiAoeyB2YWx1ZSB9KSA9PiBpbnRJZGVudGlmeSh2YWx1ZSkgPyB2YWx1ZS50b1N0cmluZygpIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgICAgIHRlc3Q6IC9eLT8oPzowfFsxLTldWzAtOV0qKSg/OlxcLlswLTldKik/KD86W2VFXVstK10/WzAtOV0rKT8kLyxcbiAgICAgICAgcmVzb2x2ZTogc3RyID0+IHBhcnNlRmxvYXQoc3RyKSxcbiAgICAgICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlKU09OXG4gICAgfVxuXTtcbmNvbnN0IGpzb25FcnJvciA9IHtcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJycsXG4gICAgdGVzdDogL14vLFxuICAgIHJlc29sdmUoc3RyLCBvbkVycm9yKSB7XG4gICAgICAgIG9uRXJyb3IoYFVucmVzb2x2ZWQgcGxhaW4gc2NhbGFyICR7SlNPTi5zdHJpbmdpZnkoc3RyKX1gKTtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG59O1xuY29uc3Qgc2NoZW1hID0gW21hcCwgc2VxXS5jb25jYXQoanNvblNjYWxhcnMsIGpzb25FcnJvcik7XG5cbmV4cG9ydCB7IHNjaGVtYSB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeVN0cmluZyB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlTdHJpbmcuanMnO1xuXG5jb25zdCBiaW5hcnkgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSwgLy8gQnVmZmVyIGluaGVyaXRzIGZyb20gVWludDhBcnJheVxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmJpbmFyeScsXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJ1ZmZlciBpbiBub2RlIGFuZCBhbiBVaW50OEFycmF5IGluIGJyb3dzZXJzXG4gICAgICpcbiAgICAgKiBUbyB1c2UgdGhlIHJlc3VsdGluZyBidWZmZXIgYXMgYW4gaW1hZ2UsIHlvdSdsbCB3YW50IHRvIGRvIHNvbWV0aGluZyBsaWtlOlxuICAgICAqXG4gICAgICogICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2J1ZmZlcl0sIHsgdHlwZTogJ2ltYWdlL2pwZWcnIH0pXG4gICAgICogICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGhvdG8nKS5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpXG4gICAgICovXG4gICAgcmVzb2x2ZShzcmMsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShzcmMsICdiYXNlNjQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gT24gSUUgMTEsIGF0b2IoKSBjYW4ndCBoYW5kbGUgbmV3bGluZXNcbiAgICAgICAgICAgIGNvbnN0IHN0ciA9IGF0b2Ioc3JjLnJlcGxhY2UoL1tcXG5cXHJdL2csICcnKSk7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGJ1ZmZlcltpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9uRXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCByZWFkaW5nIGJpbmFyeSB0YWdzOyBlaXRoZXIgQnVmZmVyIG9yIGF0b2IgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgICAgIHJldHVybiBzcmM7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHN0cmluZ2lmeSh7IGNvbW1lbnQsIHR5cGUsIHZhbHVlIH0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgICAgICBjb25zdCBidWYgPSB2YWx1ZTsgLy8gY2hlY2tlZCBlYXJsaWVyIGJ5IGJpbmFyeS5pZGVudGlmeSgpXG4gICAgICAgIGxldCBzdHI7XG4gICAgICAgIGlmICh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdHIgPVxuICAgICAgICAgICAgICAgIGJ1ZiBpbnN0YW5jZW9mIEJ1ZmZlclxuICAgICAgICAgICAgICAgICAgICA/IGJ1Zi50b1N0cmluZygnYmFzZTY0JylcbiAgICAgICAgICAgICAgICAgICAgOiBCdWZmZXIuZnJvbShidWYuYnVmZmVyKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGxldCBzID0gJyc7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgICAgICAgICAgIHN0ciA9IGJ0b2Eocyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCB3cml0aW5nIGJpbmFyeSB0YWdzOyBlaXRoZXIgQnVmZmVyIG9yIGJ0b2EgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXR5cGUpXG4gICAgICAgICAgICB0eXBlID0gU2NhbGFyLkJMT0NLX0xJVEVSQUw7XG4gICAgICAgIGlmICh0eXBlICE9PSBTY2FsYXIuUVVPVEVfRE9VQkxFKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lV2lkdGggPSBNYXRoLm1heChjdHgub3B0aW9ucy5saW5lV2lkdGggLSBjdHguaW5kZW50Lmxlbmd0aCwgY3R4Lm9wdGlvbnMubWluQ29udGVudFdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBNYXRoLmNlaWwoc3RyLmxlbmd0aCAvIGxpbmVXaWR0aCk7XG4gICAgICAgICAgICBjb25zdCBsaW5lcyA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBvID0gMDsgaSA8IG47ICsraSwgbyArPSBsaW5lV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBsaW5lc1tpXSA9IHN0ci5zdWJzdHIobywgbGluZVdpZHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0ciA9IGxpbmVzLmpvaW4odHlwZSA9PT0gU2NhbGFyLkJMT0NLX0xJVEVSQUwgPyAnXFxuJyA6ICcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeVN0cmluZyh7IGNvbW1lbnQsIHR5cGUsIHZhbHVlOiBzdHIgfSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBiaW5hcnkgfTtcbiIsImltcG9ydCB7IGlzU2VxLCBpc1BhaXIsIGlzTWFwIH0gZnJvbSAnLi4vLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgUGFpciwgY3JlYXRlUGFpciB9IGZyb20gJy4uLy4uL25vZGVzL1BhaXIuanMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi8uLi9ub2Rlcy9ZQU1MU2VxLmpzJztcblxuZnVuY3Rpb24gcmVzb2x2ZVBhaXJzKHNlcSwgb25FcnJvcikge1xuICAgIGlmIChpc1NlcShzZXEpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VxLml0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgaXRlbSA9IHNlcS5pdGVtc1tpXTtcbiAgICAgICAgICAgIGlmIChpc1BhaXIoaXRlbSkpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBlbHNlIGlmIChpc01hcChpdGVtKSkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLml0ZW1zLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoJ0VhY2ggcGFpciBtdXN0IGhhdmUgaXRzIG93biBzZXF1ZW5jZSBpbmRpY2F0b3InKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWlyID0gaXRlbS5pdGVtc1swXSB8fCBuZXcgUGFpcihuZXcgU2NhbGFyKG51bGwpKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5jb21tZW50QmVmb3JlKVxuICAgICAgICAgICAgICAgICAgICBwYWlyLmtleS5jb21tZW50QmVmb3JlID0gcGFpci5rZXkuY29tbWVudEJlZm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBgJHtpdGVtLmNvbW1lbnRCZWZvcmV9XFxuJHtwYWlyLmtleS5jb21tZW50QmVmb3JlfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbS5jb21tZW50QmVmb3JlO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY24gPSBwYWlyLnZhbHVlID8/IHBhaXIua2V5O1xuICAgICAgICAgICAgICAgICAgICBjbi5jb21tZW50ID0gY24uY29tbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBgJHtpdGVtLmNvbW1lbnR9XFxuJHtjbi5jb21tZW50fWBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbS5jb21tZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpdGVtID0gcGFpcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlcS5pdGVtc1tpXSA9IGlzUGFpcihpdGVtKSA/IGl0ZW0gOiBuZXcgUGFpcihpdGVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIG9uRXJyb3IoJ0V4cGVjdGVkIGEgc2VxdWVuY2UgZm9yIHRoaXMgdGFnJyk7XG4gICAgcmV0dXJuIHNlcTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhaXJzKHNjaGVtYSwgaXRlcmFibGUsIGN0eCkge1xuICAgIGNvbnN0IHsgcmVwbGFjZXIgfSA9IGN0eDtcbiAgICBjb25zdCBwYWlycyA9IG5ldyBZQU1MU2VxKHNjaGVtYSk7XG4gICAgcGFpcnMudGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJztcbiAgICBsZXQgaSA9IDA7XG4gICAgaWYgKGl0ZXJhYmxlICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcmFibGUpKVxuICAgICAgICBmb3IgKGxldCBpdCBvZiBpdGVyYWJsZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICBpdCA9IHJlcGxhY2VyLmNhbGwoaXRlcmFibGUsIFN0cmluZyhpKyspLCBpdCk7XG4gICAgICAgICAgICBsZXQga2V5LCB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0KSkge1xuICAgICAgICAgICAgICAgIGlmIChpdC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gaXRbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gaXRbMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgW2tleSwgdmFsdWVdIHR1cGxlOiAke2l0fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXQgJiYgaXQgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoaXQpO1xuICAgICAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBrZXkgPSBrZXlzWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGl0W2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCB0dXBsZSB3aXRoIG9uZSBrZXksIG5vdCAke2tleXMubGVuZ3RofSBrZXlzYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAga2V5ID0gaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYWlycy5pdGVtcy5wdXNoKGNyZWF0ZVBhaXIoa2V5LCB2YWx1ZSwgY3R4KSk7XG4gICAgICAgIH1cbiAgICByZXR1cm4gcGFpcnM7XG59XG5jb25zdCBwYWlycyA9IHtcbiAgICBjb2xsZWN0aW9uOiAnc2VxJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpwYWlycycsXG4gICAgcmVzb2x2ZTogcmVzb2x2ZVBhaXJzLFxuICAgIGNyZWF0ZU5vZGU6IGNyZWF0ZVBhaXJzXG59O1xuXG5leHBvcnQgeyBjcmVhdGVQYWlycywgcGFpcnMsIHJlc29sdmVQYWlycyB9O1xuIiwiaW1wb3J0IHsgaXNTY2FsYXIsIGlzUGFpciB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuLi8uLi9ub2Rlcy90b0pTLmpzJztcbmltcG9ydCB7IFlBTUxNYXAgfSBmcm9tICcuLi8uLi9ub2Rlcy9ZQU1MTWFwLmpzJztcbmltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi8uLi9ub2Rlcy9ZQU1MU2VxLmpzJztcbmltcG9ydCB7IHJlc29sdmVQYWlycywgY3JlYXRlUGFpcnMgfSBmcm9tICcuL3BhaXJzLmpzJztcblxuY2xhc3MgWUFNTE9NYXAgZXh0ZW5kcyBZQU1MU2VxIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hZGQgPSBZQU1MTWFwLnByb3RvdHlwZS5hZGQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZWxldGUgPSBZQU1MTWFwLnByb3RvdHlwZS5kZWxldGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5nZXQgPSBZQU1MTWFwLnByb3RvdHlwZS5nZXQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYXMgPSBZQU1MTWFwLnByb3RvdHlwZS5oYXMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZXQgPSBZQU1MTWFwLnByb3RvdHlwZS5zZXQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50YWcgPSBZQU1MT01hcC50YWc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIGBjdHhgIGlzIGdpdmVuLCB0aGUgcmV0dXJuIHR5cGUgaXMgYWN0dWFsbHkgYE1hcDx1bmtub3duLCB1bmtub3duPmAsXG4gICAgICogYnV0IFR5cGVTY3JpcHQgd29uJ3QgYWxsb3cgd2lkZW5pbmcgdGhlIHNpZ25hdHVyZSBvZiBhIGNoaWxkIG1ldGhvZC5cbiAgICAgKi9cbiAgICB0b0pTT04oXywgY3R4KSB7XG4gICAgICAgIGlmICghY3R4KVxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnRvSlNPTihfKTtcbiAgICAgICAgY29uc3QgbWFwID0gbmV3IE1hcCgpO1xuICAgICAgICBpZiAoY3R4Py5vbkNyZWF0ZSlcbiAgICAgICAgICAgIGN0eC5vbkNyZWF0ZShtYXApO1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgdGhpcy5pdGVtcykge1xuICAgICAgICAgICAgbGV0IGtleSwgdmFsdWU7XG4gICAgICAgICAgICBpZiAoaXNQYWlyKHBhaXIpKSB7XG4gICAgICAgICAgICAgICAga2V5ID0gdG9KUyhwYWlyLmtleSwgJycsIGN0eCk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0pTKHBhaXIudmFsdWUsIGtleSwgY3R4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleSA9IHRvSlMocGFpciwgJycsIGN0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWFwLmhhcyhrZXkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT3JkZXJlZCBtYXBzIG11c3Qgbm90IGluY2x1ZGUgZHVwbGljYXRlIGtleXMnKTtcbiAgICAgICAgICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgc3RhdGljIGZyb20oc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSB7XG4gICAgICAgIGNvbnN0IHBhaXJzID0gY3JlYXRlUGFpcnMoc2NoZW1hLCBpdGVyYWJsZSwgY3R4KTtcbiAgICAgICAgY29uc3Qgb21hcCA9IG5ldyB0aGlzKCk7XG4gICAgICAgIG9tYXAuaXRlbXMgPSBwYWlycy5pdGVtcztcbiAgICAgICAgcmV0dXJuIG9tYXA7XG4gICAgfVxufVxuWUFNTE9NYXAudGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOm9tYXAnO1xuY29uc3Qgb21hcCA9IHtcbiAgICBjb2xsZWN0aW9uOiAnc2VxJyxcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgaW5zdGFuY2VvZiBNYXAsXG4gICAgbm9kZUNsYXNzOiBZQU1MT01hcCxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpvbWFwJyxcbiAgICByZXNvbHZlKHNlcSwgb25FcnJvcikge1xuICAgICAgICBjb25zdCBwYWlycyA9IHJlc29sdmVQYWlycyhzZXEsIG9uRXJyb3IpO1xuICAgICAgICBjb25zdCBzZWVuS2V5cyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHsga2V5IH0gb2YgcGFpcnMuaXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpc1NjYWxhcihrZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlZW5LZXlzLmluY2x1ZGVzKGtleS52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihgT3JkZXJlZCBtYXBzIG11c3Qgbm90IGluY2x1ZGUgZHVwbGljYXRlIGtleXM6ICR7a2V5LnZhbHVlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VlbktleXMucHVzaChrZXkudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgWUFNTE9NYXAoKSwgcGFpcnMpO1xuICAgIH0sXG4gICAgY3JlYXRlTm9kZTogKHNjaGVtYSwgaXRlcmFibGUsIGN0eCkgPT4gWUFNTE9NYXAuZnJvbShzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpXG59O1xuXG5leHBvcnQgeyBZQU1MT01hcCwgb21hcCB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcblxuZnVuY3Rpb24gYm9vbFN0cmluZ2lmeSh7IHZhbHVlLCBzb3VyY2UgfSwgY3R4KSB7XG4gICAgY29uc3QgYm9vbE9iaiA9IHZhbHVlID8gdHJ1ZVRhZyA6IGZhbHNlVGFnO1xuICAgIGlmIChzb3VyY2UgJiYgYm9vbE9iai50ZXN0LnRlc3Qoc291cmNlKSlcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICByZXR1cm4gdmFsdWUgPyBjdHgub3B0aW9ucy50cnVlU3RyIDogY3R4Lm9wdGlvbnMuZmFsc2VTdHI7XG59XG5jb25zdCB0cnVlVGFnID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSA9PT0gdHJ1ZSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLFxuICAgIHRlc3Q6IC9eKD86WXx5fFtZeV1lc3xZRVN8W1R0XXJ1ZXxUUlVFfFtPb11ufE9OKSQvLFxuICAgIHJlc29sdmU6ICgpID0+IG5ldyBTY2FsYXIodHJ1ZSksXG4gICAgc3RyaW5naWZ5OiBib29sU3RyaW5naWZ5XG59O1xuY29uc3QgZmFsc2VUYWcgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlID09PSBmYWxzZSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLFxuICAgIHRlc3Q6IC9eKD86TnxufFtObl1vfE5PfFtGZl1hbHNlfEZBTFNFfFtPb11mZnxPRkYpJC8sXG4gICAgcmVzb2x2ZTogKCkgPT4gbmV3IFNjYWxhcihmYWxzZSksXG4gICAgc3RyaW5naWZ5OiBib29sU3RyaW5naWZ5XG59O1xuXG5leHBvcnQgeyBmYWxzZVRhZywgdHJ1ZVRhZyB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG5jb25zdCBmbG9hdE5hTiA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICB0ZXN0OiAvXig/OlstK10/XFwuKD86aW5mfEluZnxJTkYpfFxcLm5hbnxcXC5OYU58XFwuTkFOKSQvLFxuICAgIHJlc29sdmU6IChzdHIpID0+IHN0ci5zbGljZSgtMykudG9Mb3dlckNhc2UoKSA9PT0gJ25hbidcbiAgICAgICAgPyBOYU5cbiAgICAgICAgOiBzdHJbMF0gPT09ICctJ1xuICAgICAgICAgICAgPyBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5TnVtYmVyXG59O1xuY29uc3QgZmxvYXRFeHAgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgZm9ybWF0OiAnRVhQJyxcbiAgICB0ZXN0OiAvXlstK10/KD86WzAtOV1bMC05X10qKT8oPzpcXC5bMC05X10qKT9bZUVdWy0rXT9bMC05XSskLyxcbiAgICByZXNvbHZlOiAoc3RyKSA9PiBwYXJzZUZsb2F0KHN0ci5yZXBsYWNlKC9fL2csICcnKSksXG4gICAgc3RyaW5naWZ5KG5vZGUpIHtcbiAgICAgICAgY29uc3QgbnVtID0gTnVtYmVyKG5vZGUudmFsdWUpO1xuICAgICAgICByZXR1cm4gaXNGaW5pdGUobnVtKSA/IG51bS50b0V4cG9uZW50aWFsKCkgOiBzdHJpbmdpZnlOdW1iZXIobm9kZSk7XG4gICAgfVxufTtcbmNvbnN0IGZsb2F0ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgIHRlc3Q6IC9eWy0rXT8oPzpbMC05XVswLTlfXSopP1xcLlswLTlfXSokLyxcbiAgICByZXNvbHZlKHN0cikge1xuICAgICAgICBjb25zdCBub2RlID0gbmV3IFNjYWxhcihwYXJzZUZsb2F0KHN0ci5yZXBsYWNlKC9fL2csICcnKSkpO1xuICAgICAgICBjb25zdCBkb3QgPSBzdHIuaW5kZXhPZignLicpO1xuICAgICAgICBpZiAoZG90ICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgZiA9IHN0ci5zdWJzdHJpbmcoZG90ICsgMSkucmVwbGFjZSgvXy9nLCAnJyk7XG4gICAgICAgICAgICBpZiAoZltmLmxlbmd0aCAtIDFdID09PSAnMCcpXG4gICAgICAgICAgICAgICAgbm9kZS5taW5GcmFjdGlvbkRpZ2l0cyA9IGYubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5cbmV4cG9ydCB7IGZsb2F0LCBmbG9hdEV4cCwgZmxvYXROYU4gfTtcbiIsImltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG5jb25zdCBpbnRJZGVudGlmeSA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnYmlnaW50JyB8fCBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKTtcbmZ1bmN0aW9uIGludFJlc29sdmUoc3RyLCBvZmZzZXQsIHJhZGl4LCB7IGludEFzQmlnSW50IH0pIHtcbiAgICBjb25zdCBzaWduID0gc3RyWzBdO1xuICAgIGlmIChzaWduID09PSAnLScgfHwgc2lnbiA9PT0gJysnKVxuICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKG9mZnNldCkucmVwbGFjZSgvXy9nLCAnJyk7XG4gICAgaWYgKGludEFzQmlnSW50KSB7XG4gICAgICAgIHN3aXRjaCAocmFkaXgpIHtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBzdHIgPSBgMGIke3N0cn1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHN0ciA9IGAwbyR7c3RyfWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgIHN0ciA9IGAweCR7c3RyfWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbiA9IEJpZ0ludChzdHIpO1xuICAgICAgICByZXR1cm4gc2lnbiA9PT0gJy0nID8gQmlnSW50KC0xKSAqIG4gOiBuO1xuICAgIH1cbiAgICBjb25zdCBuID0gcGFyc2VJbnQoc3RyLCByYWRpeCk7XG4gICAgcmV0dXJuIHNpZ24gPT09ICctJyA/IC0xICogbiA6IG47XG59XG5mdW5jdGlvbiBpbnRTdHJpbmdpZnkobm9kZSwgcmFkaXgsIHByZWZpeCkge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IG5vZGU7XG4gICAgaWYgKGludElkZW50aWZ5KHZhbHVlKSkge1xuICAgICAgICBjb25zdCBzdHIgPSB2YWx1ZS50b1N0cmluZyhyYWRpeCk7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8IDAgPyAnLScgKyBwcmVmaXggKyBzdHIuc3Vic3RyKDEpIDogcHJlZml4ICsgc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xufVxuY29uc3QgaW50QmluID0ge1xuICAgIGlkZW50aWZ5OiBpbnRJZGVudGlmeSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnQklOJyxcbiAgICB0ZXN0OiAvXlstK10/MGJbMC0xX10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDIsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCAyLCAnMGInKVxufTtcbmNvbnN0IGludE9jdCA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIGZvcm1hdDogJ09DVCcsXG4gICAgdGVzdDogL15bLStdPzBbMC03X10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDEsIDgsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCA4LCAnMCcpXG59O1xuY29uc3QgaW50ID0ge1xuICAgIGlkZW50aWZ5OiBpbnRJZGVudGlmeSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgdGVzdDogL15bLStdP1swLTldWzAtOV9dKiQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCAwLCAxMCwgb3B0KSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bWJlclxufTtcbmNvbnN0IGludEhleCA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIGZvcm1hdDogJ0hFWCcsXG4gICAgdGVzdDogL15bLStdPzB4WzAtOWEtZkEtRl9dKyQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCAyLCAxNiwgb3B0KSxcbiAgICBzdHJpbmdpZnk6IG5vZGUgPT4gaW50U3RyaW5naWZ5KG5vZGUsIDE2LCAnMHgnKVxufTtcblxuZXhwb3J0IHsgaW50LCBpbnRCaW4sIGludEhleCwgaW50T2N0IH07XG4iLCJpbXBvcnQgeyBpc01hcCwgaXNQYWlyLCBpc1NjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFBhaXIsIGNyZWF0ZVBhaXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9QYWlyLmpzJztcbmltcG9ydCB7IFlBTUxNYXAsIGZpbmRQYWlyIH0gZnJvbSAnLi4vLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5cbmNsYXNzIFlBTUxTZXQgZXh0ZW5kcyBZQU1MTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihzY2hlbWEpIHtcbiAgICAgICAgc3VwZXIoc2NoZW1hKTtcbiAgICAgICAgdGhpcy50YWcgPSBZQU1MU2V0LnRhZztcbiAgICB9XG4gICAgYWRkKGtleSkge1xuICAgICAgICBsZXQgcGFpcjtcbiAgICAgICAgaWYgKGlzUGFpcihrZXkpKVxuICAgICAgICAgICAgcGFpciA9IGtleTtcbiAgICAgICAgZWxzZSBpZiAoa2V5ICYmXG4gICAgICAgICAgICB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgJ2tleScgaW4ga2V5ICYmXG4gICAgICAgICAgICAndmFsdWUnIGluIGtleSAmJlxuICAgICAgICAgICAga2V5LnZhbHVlID09PSBudWxsKVxuICAgICAgICAgICAgcGFpciA9IG5ldyBQYWlyKGtleS5rZXksIG51bGwpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBwYWlyID0gbmV3IFBhaXIoa2V5LCBudWxsKTtcbiAgICAgICAgY29uc3QgcHJldiA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsIHBhaXIua2V5KTtcbiAgICAgICAgaWYgKCFwcmV2KVxuICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHBhaXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiBga2VlcFBhaXJgIGlzIGB0cnVlYCwgcmV0dXJucyB0aGUgUGFpciBtYXRjaGluZyBga2V5YC5cbiAgICAgKiBPdGhlcndpc2UsIHJldHVybnMgdGhlIHZhbHVlIG9mIHRoYXQgUGFpcidzIGtleS5cbiAgICAgKi9cbiAgICBnZXQoa2V5LCBrZWVwUGFpcikge1xuICAgICAgICBjb25zdCBwYWlyID0gZmluZFBhaXIodGhpcy5pdGVtcywga2V5KTtcbiAgICAgICAgcmV0dXJuICFrZWVwUGFpciAmJiBpc1BhaXIocGFpcilcbiAgICAgICAgICAgID8gaXNTY2FsYXIocGFpci5rZXkpXG4gICAgICAgICAgICAgICAgPyBwYWlyLmtleS52YWx1ZVxuICAgICAgICAgICAgICAgIDogcGFpci5rZXlcbiAgICAgICAgICAgIDogcGFpcjtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBib29sZWFuIHZhbHVlIGZvciBzZXQoa2V5LCB2YWx1ZSkgaW4gYSBZQU1MIHNldCwgbm90ICR7dHlwZW9mIHZhbHVlfWApO1xuICAgICAgICBjb25zdCBwcmV2ID0gZmluZFBhaXIodGhpcy5pdGVtcywga2V5KTtcbiAgICAgICAgaWYgKHByZXYgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZSh0aGlzLml0ZW1zLmluZGV4T2YocHJldiksIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFwcmV2ICYmIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2gobmV3IFBhaXIoa2V5KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9KU09OKF8sIGN0eCkge1xuICAgICAgICByZXR1cm4gc3VwZXIudG9KU09OKF8sIGN0eCwgU2V0KTtcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIGlmICghY3R4KVxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5oYXNBbGxOdWxsVmFsdWVzKHRydWUpKVxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnRvU3RyaW5nKE9iamVjdC5hc3NpZ24oe30sIGN0eCwgeyBhbGxOdWxsVmFsdWVzOiB0cnVlIH0pLCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXQgaXRlbXMgbXVzdCBhbGwgaGF2ZSBudWxsIHZhbHVlcycpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbShzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpIHtcbiAgICAgICAgY29uc3QgeyByZXBsYWNlciB9ID0gY3R4O1xuICAgICAgICBjb25zdCBzZXQgPSBuZXcgdGhpcyhzY2hlbWEpO1xuICAgICAgICBpZiAoaXRlcmFibGUgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyYWJsZSkpXG4gICAgICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiBpdGVyYWJsZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVwbGFjZXIuY2FsbChpdGVyYWJsZSwgdmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzZXQuaXRlbXMucHVzaChjcmVhdGVQYWlyKHZhbHVlLCBudWxsLCBjdHgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldDtcbiAgICB9XG59XG5ZQU1MU2V0LnRhZyA9ICd0YWc6eWFtbC5vcmcsMjAwMjpzZXQnO1xuY29uc3Qgc2V0ID0ge1xuICAgIGNvbGxlY3Rpb246ICdtYXAnLFxuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSBpbnN0YW5jZW9mIFNldCxcbiAgICBub2RlQ2xhc3M6IFlBTUxTZXQsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6c2V0JyxcbiAgICBjcmVhdGVOb2RlOiAoc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSA9PiBZQU1MU2V0LmZyb20oc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSxcbiAgICByZXNvbHZlKG1hcCwgb25FcnJvcikge1xuICAgICAgICBpZiAoaXNNYXAobWFwKSkge1xuICAgICAgICAgICAgaWYgKG1hcC5oYXNBbGxOdWxsVmFsdWVzKHRydWUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBZQU1MU2V0KCksIG1hcCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgb25FcnJvcignU2V0IGl0ZW1zIG11c3QgYWxsIGhhdmUgbnVsbCB2YWx1ZXMnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBvbkVycm9yKCdFeHBlY3RlZCBhIG1hcHBpbmcgZm9yIHRoaXMgdGFnJyk7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgWUFNTFNldCwgc2V0IH07XG4iLCJpbXBvcnQgeyBzdHJpbmdpZnlOdW1iZXIgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJztcblxuLyoqIEludGVybmFsIHR5cGVzIGhhbmRsZSBiaWdpbnQgYXMgbnVtYmVyLCBiZWNhdXNlIFRTIGNhbid0IGZpZ3VyZSBpdCBvdXQuICovXG5mdW5jdGlvbiBwYXJzZVNleGFnZXNpbWFsKHN0ciwgYXNCaWdJbnQpIHtcbiAgICBjb25zdCBzaWduID0gc3RyWzBdO1xuICAgIGNvbnN0IHBhcnRzID0gc2lnbiA9PT0gJy0nIHx8IHNpZ24gPT09ICcrJyA/IHN0ci5zdWJzdHJpbmcoMSkgOiBzdHI7XG4gICAgY29uc3QgbnVtID0gKG4pID0+IGFzQmlnSW50ID8gQmlnSW50KG4pIDogTnVtYmVyKG4pO1xuICAgIGNvbnN0IHJlcyA9IHBhcnRzXG4gICAgICAgIC5yZXBsYWNlKC9fL2csICcnKVxuICAgICAgICAuc3BsaXQoJzonKVxuICAgICAgICAucmVkdWNlKChyZXMsIHApID0+IHJlcyAqIG51bSg2MCkgKyBudW0ocCksIG51bSgwKSk7XG4gICAgcmV0dXJuIChzaWduID09PSAnLScgPyBudW0oLTEpICogcmVzIDogcmVzKTtcbn1cbi8qKlxuICogaGhoaDptbTpzcy5zc3NcbiAqXG4gKiBJbnRlcm5hbCB0eXBlcyBoYW5kbGUgYmlnaW50IGFzIG51bWJlciwgYmVjYXVzZSBUUyBjYW4ndCBmaWd1cmUgaXQgb3V0LlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlTZXhhZ2VzaW1hbChub2RlKSB7XG4gICAgbGV0IHsgdmFsdWUgfSA9IG5vZGU7XG4gICAgbGV0IG51bSA9IChuKSA9PiBuO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKVxuICAgICAgICBudW0gPSBuID0+IEJpZ0ludChuKTtcbiAgICBlbHNlIGlmIChpc05hTih2YWx1ZSkgfHwgIWlzRmluaXRlKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeU51bWJlcihub2RlKTtcbiAgICBsZXQgc2lnbiA9ICcnO1xuICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgdmFsdWUgKj0gbnVtKC0xKTtcbiAgICB9XG4gICAgY29uc3QgXzYwID0gbnVtKDYwKTtcbiAgICBjb25zdCBwYXJ0cyA9IFt2YWx1ZSAlIF82MF07IC8vIHNlY29uZHMsIGluY2x1ZGluZyBtc1xuICAgIGlmICh2YWx1ZSA8IDYwKSB7XG4gICAgICAgIHBhcnRzLnVuc2hpZnQoMCk7IC8vIGF0IGxlYXN0IG9uZSA6IGlzIHJlcXVpcmVkXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAtIHBhcnRzWzBdKSAvIF82MDtcbiAgICAgICAgcGFydHMudW5zaGlmdCh2YWx1ZSAlIF82MCk7IC8vIG1pbnV0ZXNcbiAgICAgICAgaWYgKHZhbHVlID49IDYwKSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAtIHBhcnRzWzBdKSAvIF82MDtcbiAgICAgICAgICAgIHBhcnRzLnVuc2hpZnQodmFsdWUpOyAvLyBob3Vyc1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoc2lnbiArXG4gICAgICAgIHBhcnRzXG4gICAgICAgICAgICAubWFwKG4gPT4gU3RyaW5nKG4pLnBhZFN0YXJ0KDIsICcwJykpXG4gICAgICAgICAgICAuam9pbignOicpXG4gICAgICAgICAgICAucmVwbGFjZSgvMDAwMDAwXFxkKiQvLCAnJykgLy8gJSA2MCBtYXkgaW50cm9kdWNlIGVycm9yXG4gICAgKTtcbn1cbmNvbnN0IGludFRpbWUgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIGZvcm1hdDogJ1RJTUUnLFxuICAgIHRlc3Q6IC9eWy0rXT9bMC05XVswLTlfXSooPzo6WzAtNV0/WzAtOV0pKyQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCB7IGludEFzQmlnSW50IH0pID0+IHBhcnNlU2V4YWdlc2ltYWwoc3RyLCBpbnRBc0JpZ0ludCksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlTZXhhZ2VzaW1hbFxufTtcbmNvbnN0IGZsb2F0VGltZSA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICBmb3JtYXQ6ICdUSU1FJyxcbiAgICB0ZXN0OiAvXlstK10/WzAtOV1bMC05X10qKD86OlswLTVdP1swLTldKStcXC5bMC05X10qJC8sXG4gICAgcmVzb2x2ZTogc3RyID0+IHBhcnNlU2V4YWdlc2ltYWwoc3RyLCBmYWxzZSksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlTZXhhZ2VzaW1hbFxufTtcbmNvbnN0IHRpbWVzdGFtcCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6dGltZXN0YW1wJyxcbiAgICAvLyBJZiB0aGUgdGltZSB6b25lIGlzIG9taXR0ZWQsIHRoZSB0aW1lc3RhbXAgaXMgYXNzdW1lZCB0byBiZSBzcGVjaWZpZWQgaW4gVVRDLiBUaGUgdGltZSBwYXJ0XG4gICAgLy8gbWF5IGJlIG9taXR0ZWQgYWx0b2dldGhlciwgcmVzdWx0aW5nIGluIGEgZGF0ZSBmb3JtYXQuIEluIHN1Y2ggYSBjYXNlLCB0aGUgdGltZSBwYXJ0IGlzXG4gICAgLy8gYXNzdW1lZCB0byBiZSAwMDowMDowMFogKHN0YXJ0IG9mIGRheSwgVVRDKS5cbiAgICB0ZXN0OiBSZWdFeHAoJ14oWzAtOV17NH0pLShbMC05XXsxLDJ9KS0oWzAtOV17MSwyfSknICsgLy8gWVlZWS1NbS1EZFxuICAgICAgICAnKD86JyArIC8vIHRpbWUgaXMgb3B0aW9uYWxcbiAgICAgICAgJyg/OnR8VHxbIFxcXFx0XSspJyArIC8vIHQgfCBUIHwgd2hpdGVzcGFjZVxuICAgICAgICAnKFswLTldezEsMn0pOihbMC05XXsxLDJ9KTooWzAtOV17MSwyfShcXFxcLlswLTldKyk/KScgKyAvLyBIaDpNbTpTcyguc3MpP1xuICAgICAgICAnKD86WyBcXFxcdF0qKFp8Wy0rXVswMTJdP1swLTldKD86OlswLTldezJ9KT8pKT8nICsgLy8gWiB8ICs1IHwgLTAzOjMwXG4gICAgICAgICcpPyQnKSxcbiAgICByZXNvbHZlKHN0cikge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHN0ci5tYXRjaCh0aW1lc3RhbXAudGVzdCk7XG4gICAgICAgIGlmICghbWF0Y2gpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJyEhdGltZXN0YW1wIGV4cGVjdHMgYSBkYXRlLCBzdGFydGluZyB3aXRoIHl5eXktbW0tZGQnKTtcbiAgICAgICAgY29uc3QgWywgeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmRdID0gbWF0Y2gubWFwKE51bWJlcik7XG4gICAgICAgIGNvbnN0IG1pbGxpc2VjID0gbWF0Y2hbN10gPyBOdW1iZXIoKG1hdGNoWzddICsgJzAwJykuc3Vic3RyKDEsIDMpKSA6IDA7XG4gICAgICAgIGxldCBkYXRlID0gRGF0ZS5VVEMoeWVhciwgbW9udGggLSAxLCBkYXksIGhvdXIgfHwgMCwgbWludXRlIHx8IDAsIHNlY29uZCB8fCAwLCBtaWxsaXNlYyk7XG4gICAgICAgIGNvbnN0IHR6ID0gbWF0Y2hbOF07XG4gICAgICAgIGlmICh0eiAmJiB0eiAhPT0gJ1onKSB7XG4gICAgICAgICAgICBsZXQgZCA9IHBhcnNlU2V4YWdlc2ltYWwodHosIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhkKSA8IDMwKVxuICAgICAgICAgICAgICAgIGQgKj0gNjA7XG4gICAgICAgICAgICBkYXRlIC09IDYwMDAwICogZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZSk7XG4gICAgfSxcbiAgICBzdHJpbmdpZnk6ICh7IHZhbHVlIH0pID0+IHZhbHVlLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvKChUMDA6MDApPzowMCk/XFwuMDAwWiQvLCAnJylcbn07XG5cbmV4cG9ydCB7IGZsb2F0VGltZSwgaW50VGltZSwgdGltZXN0YW1wIH07XG4iLCJpbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9jb21tb24vbWFwLmpzJztcbmltcG9ydCB7IG51bGxUYWcgfSBmcm9tICcuLi9jb21tb24vbnVsbC5qcyc7XG5pbXBvcnQgeyBzZXEgfSBmcm9tICcuLi9jb21tb24vc2VxLmpzJztcbmltcG9ydCB7IHN0cmluZyB9IGZyb20gJy4uL2NvbW1vbi9zdHJpbmcuanMnO1xuaW1wb3J0IHsgYmluYXJ5IH0gZnJvbSAnLi9iaW5hcnkuanMnO1xuaW1wb3J0IHsgdHJ1ZVRhZywgZmFsc2VUYWcgfSBmcm9tICcuL2Jvb2wuanMnO1xuaW1wb3J0IHsgZmxvYXROYU4sIGZsb2F0RXhwLCBmbG9hdCB9IGZyb20gJy4vZmxvYXQuanMnO1xuaW1wb3J0IHsgaW50QmluLCBpbnRPY3QsIGludCwgaW50SGV4IH0gZnJvbSAnLi9pbnQuanMnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICcuL21lcmdlLmpzJztcbmltcG9ydCB7IG9tYXAgfSBmcm9tICcuL29tYXAuanMnO1xuaW1wb3J0IHsgcGFpcnMgfSBmcm9tICcuL3BhaXJzLmpzJztcbmltcG9ydCB7IHNldCB9IGZyb20gJy4vc2V0LmpzJztcbmltcG9ydCB7IGludFRpbWUsIGZsb2F0VGltZSwgdGltZXN0YW1wIH0gZnJvbSAnLi90aW1lc3RhbXAuanMnO1xuXG5jb25zdCBzY2hlbWEgPSBbXG4gICAgbWFwLFxuICAgIHNlcSxcbiAgICBzdHJpbmcsXG4gICAgbnVsbFRhZyxcbiAgICB0cnVlVGFnLFxuICAgIGZhbHNlVGFnLFxuICAgIGludEJpbixcbiAgICBpbnRPY3QsXG4gICAgaW50LFxuICAgIGludEhleCxcbiAgICBmbG9hdE5hTixcbiAgICBmbG9hdEV4cCxcbiAgICBmbG9hdCxcbiAgICBiaW5hcnksXG4gICAgbWVyZ2UsXG4gICAgb21hcCxcbiAgICBwYWlycyxcbiAgICBzZXQsXG4gICAgaW50VGltZSxcbiAgICBmbG9hdFRpbWUsXG4gICAgdGltZXN0YW1wXG5dO1xuXG5leHBvcnQgeyBzY2hlbWEgfTtcbiIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vY29tbW9uL21hcC5qcyc7XG5pbXBvcnQgeyBudWxsVGFnIH0gZnJvbSAnLi9jb21tb24vbnVsbC5qcyc7XG5pbXBvcnQgeyBzZXEgfSBmcm9tICcuL2NvbW1vbi9zZXEuanMnO1xuaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAnLi9jb21tb24vc3RyaW5nLmpzJztcbmltcG9ydCB7IGJvb2xUYWcgfSBmcm9tICcuL2NvcmUvYm9vbC5qcyc7XG5pbXBvcnQgeyBmbG9hdCwgZmxvYXRFeHAsIGZsb2F0TmFOIH0gZnJvbSAnLi9jb3JlL2Zsb2F0LmpzJztcbmltcG9ydCB7IGludCwgaW50SGV4LCBpbnRPY3QgfSBmcm9tICcuL2NvcmUvaW50LmpzJztcbmltcG9ydCB7IHNjaGVtYSB9IGZyb20gJy4vY29yZS9zY2hlbWEuanMnO1xuaW1wb3J0IHsgc2NoZW1hIGFzIHNjaGVtYSQxIH0gZnJvbSAnLi9qc29uL3NjaGVtYS5qcyc7XG5pbXBvcnQgeyBiaW5hcnkgfSBmcm9tICcuL3lhbWwtMS4xL2JpbmFyeS5qcyc7XG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJy4veWFtbC0xLjEvbWVyZ2UuanMnO1xuaW1wb3J0IHsgb21hcCB9IGZyb20gJy4veWFtbC0xLjEvb21hcC5qcyc7XG5pbXBvcnQgeyBwYWlycyB9IGZyb20gJy4veWFtbC0xLjEvcGFpcnMuanMnO1xuaW1wb3J0IHsgc2NoZW1hIGFzIHNjaGVtYSQyIH0gZnJvbSAnLi95YW1sLTEuMS9zY2hlbWEuanMnO1xuaW1wb3J0IHsgc2V0IH0gZnJvbSAnLi95YW1sLTEuMS9zZXQuanMnO1xuaW1wb3J0IHsgdGltZXN0YW1wLCBmbG9hdFRpbWUsIGludFRpbWUgfSBmcm9tICcuL3lhbWwtMS4xL3RpbWVzdGFtcC5qcyc7XG5cbmNvbnN0IHNjaGVtYXMgPSBuZXcgTWFwKFtcbiAgICBbJ2NvcmUnLCBzY2hlbWFdLFxuICAgIFsnZmFpbHNhZmUnLCBbbWFwLCBzZXEsIHN0cmluZ11dLFxuICAgIFsnanNvbicsIHNjaGVtYSQxXSxcbiAgICBbJ3lhbWwxMScsIHNjaGVtYSQyXSxcbiAgICBbJ3lhbWwtMS4xJywgc2NoZW1hJDJdXG5dKTtcbmNvbnN0IHRhZ3NCeU5hbWUgPSB7XG4gICAgYmluYXJ5LFxuICAgIGJvb2w6IGJvb2xUYWcsXG4gICAgZmxvYXQsXG4gICAgZmxvYXRFeHAsXG4gICAgZmxvYXROYU4sXG4gICAgZmxvYXRUaW1lLFxuICAgIGludCxcbiAgICBpbnRIZXgsXG4gICAgaW50T2N0LFxuICAgIGludFRpbWUsXG4gICAgbWFwLFxuICAgIG1lcmdlLFxuICAgIG51bGw6IG51bGxUYWcsXG4gICAgb21hcCxcbiAgICBwYWlycyxcbiAgICBzZXEsXG4gICAgc2V0LFxuICAgIHRpbWVzdGFtcFxufTtcbmNvbnN0IGNvcmVLbm93blRhZ3MgPSB7XG4gICAgJ3RhZzp5YW1sLm9yZywyMDAyOmJpbmFyeSc6IGJpbmFyeSxcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnOiBtZXJnZSxcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6b21hcCc6IG9tYXAsXG4gICAgJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJzogcGFpcnMsXG4gICAgJ3RhZzp5YW1sLm9yZywyMDAyOnNldCc6IHNldCxcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6dGltZXN0YW1wJzogdGltZXN0YW1wXG59O1xuZnVuY3Rpb24gZ2V0VGFncyhjdXN0b21UYWdzLCBzY2hlbWFOYW1lLCBhZGRNZXJnZVRhZykge1xuICAgIGNvbnN0IHNjaGVtYVRhZ3MgPSBzY2hlbWFzLmdldChzY2hlbWFOYW1lKTtcbiAgICBpZiAoc2NoZW1hVGFncyAmJiAhY3VzdG9tVGFncykge1xuICAgICAgICByZXR1cm4gYWRkTWVyZ2VUYWcgJiYgIXNjaGVtYVRhZ3MuaW5jbHVkZXMobWVyZ2UpXG4gICAgICAgICAgICA/IHNjaGVtYVRhZ3MuY29uY2F0KG1lcmdlKVxuICAgICAgICAgICAgOiBzY2hlbWFUYWdzLnNsaWNlKCk7XG4gICAgfVxuICAgIGxldCB0YWdzID0gc2NoZW1hVGFncztcbiAgICBpZiAoIXRhZ3MpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY3VzdG9tVGFncykpXG4gICAgICAgICAgICB0YWdzID0gW107XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IEFycmF5LmZyb20oc2NoZW1hcy5rZXlzKCkpXG4gICAgICAgICAgICAgICAgLmZpbHRlcihrZXkgPT4ga2V5ICE9PSAneWFtbDExJylcbiAgICAgICAgICAgICAgICAubWFwKGtleSA9PiBKU09OLnN0cmluZ2lmeShrZXkpKVxuICAgICAgICAgICAgICAgIC5qb2luKCcsICcpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHNjaGVtYSBcIiR7c2NoZW1hTmFtZX1cIjsgdXNlIG9uZSBvZiAke2tleXN9IG9yIGRlZmluZSBjdXN0b21UYWdzIGFycmF5YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY3VzdG9tVGFncykpIHtcbiAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgY3VzdG9tVGFncylcbiAgICAgICAgICAgIHRhZ3MgPSB0YWdzLmNvbmNhdCh0YWcpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgY3VzdG9tVGFncyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0YWdzID0gY3VzdG9tVGFncyh0YWdzLnNsaWNlKCkpO1xuICAgIH1cbiAgICBpZiAoYWRkTWVyZ2VUYWcpXG4gICAgICAgIHRhZ3MgPSB0YWdzLmNvbmNhdChtZXJnZSk7XG4gICAgcmV0dXJuIHRhZ3MucmVkdWNlKCh0YWdzLCB0YWcpID0+IHtcbiAgICAgICAgY29uc3QgdGFnT2JqID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgPyB0YWdzQnlOYW1lW3RhZ10gOiB0YWc7XG4gICAgICAgIGlmICghdGFnT2JqKSB7XG4gICAgICAgICAgICBjb25zdCB0YWdOYW1lID0gSlNPTi5zdHJpbmdpZnkodGFnKTtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0YWdzQnlOYW1lKVxuICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IEpTT04uc3RyaW5naWZ5KGtleSkpXG4gICAgICAgICAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gY3VzdG9tIHRhZyAke3RhZ05hbWV9OyB1c2Ugb25lIG9mICR7a2V5c31gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRhZ3MuaW5jbHVkZXModGFnT2JqKSlcbiAgICAgICAgICAgIHRhZ3MucHVzaCh0YWdPYmopO1xuICAgICAgICByZXR1cm4gdGFncztcbiAgICB9LCBbXSk7XG59XG5cbmV4cG9ydCB7IGNvcmVLbm93blRhZ3MsIGdldFRhZ3MgfTtcbiIsImltcG9ydCB7IE1BUCwgU0NBTEFSLCBTRVEgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgc2VxIH0gZnJvbSAnLi9jb21tb24vc2VxLmpzJztcbmltcG9ydCB7IHN0cmluZyB9IGZyb20gJy4vY29tbW9uL3N0cmluZy5qcyc7XG5pbXBvcnQgeyBnZXRUYWdzLCBjb3JlS25vd25UYWdzIH0gZnJvbSAnLi90YWdzLmpzJztcblxuY29uc3Qgc29ydE1hcEVudHJpZXNCeUtleSA9IChhLCBiKSA9PiBhLmtleSA8IGIua2V5ID8gLTEgOiBhLmtleSA+IGIua2V5ID8gMSA6IDA7XG5jbGFzcyBTY2hlbWEge1xuICAgIGNvbnN0cnVjdG9yKHsgY29tcGF0LCBjdXN0b21UYWdzLCBtZXJnZSwgcmVzb2x2ZUtub3duVGFncywgc2NoZW1hLCBzb3J0TWFwRW50cmllcywgdG9TdHJpbmdEZWZhdWx0cyB9KSB7XG4gICAgICAgIHRoaXMuY29tcGF0ID0gQXJyYXkuaXNBcnJheShjb21wYXQpXG4gICAgICAgICAgICA/IGdldFRhZ3MoY29tcGF0LCAnY29tcGF0JylcbiAgICAgICAgICAgIDogY29tcGF0XG4gICAgICAgICAgICAgICAgPyBnZXRUYWdzKG51bGwsIGNvbXBhdClcbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHRoaXMubmFtZSA9ICh0eXBlb2Ygc2NoZW1hID09PSAnc3RyaW5nJyAmJiBzY2hlbWEpIHx8ICdjb3JlJztcbiAgICAgICAgdGhpcy5rbm93blRhZ3MgPSByZXNvbHZlS25vd25UYWdzID8gY29yZUtub3duVGFncyA6IHt9O1xuICAgICAgICB0aGlzLnRhZ3MgPSBnZXRUYWdzKGN1c3RvbVRhZ3MsIHRoaXMubmFtZSwgbWVyZ2UpO1xuICAgICAgICB0aGlzLnRvU3RyaW5nT3B0aW9ucyA9IHRvU3RyaW5nRGVmYXVsdHMgPz8gbnVsbDtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIE1BUCwgeyB2YWx1ZTogbWFwIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgU0NBTEFSLCB7IHZhbHVlOiBzdHJpbmcgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBTRVEsIHsgdmFsdWU6IHNlcSB9KTtcbiAgICAgICAgLy8gVXNlZCBieSBjcmVhdGVNYXAoKVxuICAgICAgICB0aGlzLnNvcnRNYXBFbnRyaWVzID1cbiAgICAgICAgICAgIHR5cGVvZiBzb3J0TWFwRW50cmllcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8gc29ydE1hcEVudHJpZXNcbiAgICAgICAgICAgICAgICA6IHNvcnRNYXBFbnRyaWVzID09PSB0cnVlXG4gICAgICAgICAgICAgICAgICAgID8gc29ydE1hcEVudHJpZXNCeUtleVxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjb3B5ID0gT2JqZWN0LmNyZWF0ZShTY2hlbWEucHJvdG90eXBlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0aGlzKSk7XG4gICAgICAgIGNvcHkudGFncyA9IHRoaXMudGFncy5zbGljZSgpO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFNjaGVtYSB9O1xuIiwiaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgY3JlYXRlU3RyaW5naWZ5Q29udGV4dCwgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHsgaW5kZW50Q29tbWVudCwgbGluZUNvbW1lbnQgfSBmcm9tICcuL3N0cmluZ2lmeUNvbW1lbnQuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlEb2N1bWVudChkb2MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGxldCBoYXNEaXJlY3RpdmVzID0gb3B0aW9ucy5kaXJlY3RpdmVzID09PSB0cnVlO1xuICAgIGlmIChvcHRpb25zLmRpcmVjdGl2ZXMgIT09IGZhbHNlICYmIGRvYy5kaXJlY3RpdmVzKSB7XG4gICAgICAgIGNvbnN0IGRpciA9IGRvYy5kaXJlY3RpdmVzLnRvU3RyaW5nKGRvYyk7XG4gICAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goZGlyKTtcbiAgICAgICAgICAgIGhhc0RpcmVjdGl2ZXMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRvYy5kaXJlY3RpdmVzLmRvY1N0YXJ0KVxuICAgICAgICAgICAgaGFzRGlyZWN0aXZlcyA9IHRydWU7XG4gICAgfVxuICAgIGlmIChoYXNEaXJlY3RpdmVzKVxuICAgICAgICBsaW5lcy5wdXNoKCctLS0nKTtcbiAgICBjb25zdCBjdHggPSBjcmVhdGVTdHJpbmdpZnlDb250ZXh0KGRvYywgb3B0aW9ucyk7XG4gICAgY29uc3QgeyBjb21tZW50U3RyaW5nIH0gPSBjdHgub3B0aW9ucztcbiAgICBpZiAoZG9jLmNvbW1lbnRCZWZvcmUpIHtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCAhPT0gMSlcbiAgICAgICAgICAgIGxpbmVzLnVuc2hpZnQoJycpO1xuICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcoZG9jLmNvbW1lbnRCZWZvcmUpO1xuICAgICAgICBsaW5lcy51bnNoaWZ0KGluZGVudENvbW1lbnQoY3MsICcnKSk7XG4gICAgfVxuICAgIGxldCBjaG9tcEtlZXAgPSBmYWxzZTtcbiAgICBsZXQgY29udGVudENvbW1lbnQgPSBudWxsO1xuICAgIGlmIChkb2MuY29udGVudHMpIHtcbiAgICAgICAgaWYgKGlzTm9kZShkb2MuY29udGVudHMpKSB7XG4gICAgICAgICAgICBpZiAoZG9jLmNvbnRlbnRzLnNwYWNlQmVmb3JlICYmIGhhc0RpcmVjdGl2ZXMpXG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XG4gICAgICAgICAgICBpZiAoZG9jLmNvbnRlbnRzLmNvbW1lbnRCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcoZG9jLmNvbnRlbnRzLmNvbW1lbnRCZWZvcmUpO1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goaW5kZW50Q29tbWVudChjcywgJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRvcC1sZXZlbCBibG9jayBzY2FsYXJzIG5lZWQgdG8gYmUgaW5kZW50ZWQgaWYgZm9sbG93ZWQgYnkgYSBjb21tZW50XG4gICAgICAgICAgICBjdHguZm9yY2VCbG9ja0luZGVudCA9ICEhZG9jLmNvbW1lbnQ7XG4gICAgICAgICAgICBjb250ZW50Q29tbWVudCA9IGRvYy5jb250ZW50cy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9uQ2hvbXBLZWVwID0gY29udGVudENvbW1lbnQgPyB1bmRlZmluZWQgOiAoKSA9PiAoY2hvbXBLZWVwID0gdHJ1ZSk7XG4gICAgICAgIGxldCBib2R5ID0gc3RyaW5naWZ5KGRvYy5jb250ZW50cywgY3R4LCAoKSA9PiAoY29udGVudENvbW1lbnQgPSBudWxsKSwgb25DaG9tcEtlZXApO1xuICAgICAgICBpZiAoY29udGVudENvbW1lbnQpXG4gICAgICAgICAgICBib2R5ICs9IGxpbmVDb21tZW50KGJvZHksICcnLCBjb21tZW50U3RyaW5nKGNvbnRlbnRDb21tZW50KSk7XG4gICAgICAgIGlmICgoYm9keVswXSA9PT0gJ3wnIHx8IGJvZHlbMF0gPT09ICc+JykgJiZcbiAgICAgICAgICAgIGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdID09PSAnLS0tJykge1xuICAgICAgICAgICAgLy8gVG9wLWxldmVsIGJsb2NrIHNjYWxhcnMgd2l0aCBhIHByZWNlZGluZyBkb2MgbWFya2VyIG91Z2h0IHRvIHVzZSB0aGVcbiAgICAgICAgICAgIC8vIHNhbWUgbGluZSBmb3IgdGhlaXIgaGVhZGVyLlxuICAgICAgICAgICAgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0gPSBgLS0tICR7Ym9keX1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYm9keSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsaW5lcy5wdXNoKHN0cmluZ2lmeShkb2MuY29udGVudHMsIGN0eCkpO1xuICAgIH1cbiAgICBpZiAoZG9jLmRpcmVjdGl2ZXM/LmRvY0VuZCkge1xuICAgICAgICBpZiAoZG9jLmNvbW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNzID0gY29tbWVudFN0cmluZyhkb2MuY29tbWVudCk7XG4gICAgICAgICAgICBpZiAoY3MuaW5jbHVkZXMoJ1xcbicpKSB7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnLi4uJyk7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChpbmRlbnRDb21tZW50KGNzLCAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChgLi4uICR7Y3N9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKCcuLi4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGRjID0gZG9jLmNvbW1lbnQ7XG4gICAgICAgIGlmIChkYyAmJiBjaG9tcEtlZXApXG4gICAgICAgICAgICBkYyA9IGRjLnJlcGxhY2UoL15cXG4rLywgJycpO1xuICAgICAgICBpZiAoZGMpIHtcbiAgICAgICAgICAgIGlmICgoIWNob21wS2VlcCB8fCBjb250ZW50Q29tbWVudCkgJiYgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0gIT09ICcnKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgbGluZXMucHVzaChpbmRlbnRDb21tZW50KGNvbW1lbnRTdHJpbmcoZGMpLCAnJykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKSArICdcXG4nO1xufVxuXG5leHBvcnQgeyBzdHJpbmdpZnlEb2N1bWVudCB9O1xuIiwiaW1wb3J0IHsgQWxpYXMgfSBmcm9tICcuLi9ub2Rlcy9BbGlhcy5qcyc7XG5pbXBvcnQgeyBpc0VtcHR5UGF0aCwgY29sbGVjdGlvbkZyb21QYXRoIH0gZnJvbSAnLi4vbm9kZXMvQ29sbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBOT0RFX1RZUEUsIERPQywgaXNOb2RlLCBpc0NvbGxlY3Rpb24sIGlzU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgUGFpciB9IGZyb20gJy4uL25vZGVzL1BhaXIuanMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4uL25vZGVzL3RvSlMuanMnO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi4vc2NoZW1hL1NjaGVtYS5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlEb2N1bWVudCB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlEb2N1bWVudC5qcyc7XG5pbXBvcnQgeyBhbmNob3JOYW1lcywgZmluZE5ld0FuY2hvciwgY3JlYXRlTm9kZUFuY2hvcnMgfSBmcm9tICcuL2FuY2hvcnMuanMnO1xuaW1wb3J0IHsgYXBwbHlSZXZpdmVyIH0gZnJvbSAnLi9hcHBseVJldml2ZXIuanMnO1xuaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gJy4vY3JlYXRlTm9kZS5qcyc7XG5pbXBvcnQgeyBEaXJlY3RpdmVzIH0gZnJvbSAnLi9kaXJlY3RpdmVzLmpzJztcblxuY2xhc3MgRG9jdW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCByZXBsYWNlciwgb3B0aW9ucykge1xuICAgICAgICAvKiogQSBjb21tZW50IGJlZm9yZSB0aGlzIERvY3VtZW50ICovXG4gICAgICAgIHRoaXMuY29tbWVudEJlZm9yZSA9IG51bGw7XG4gICAgICAgIC8qKiBBIGNvbW1lbnQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhpcyBEb2N1bWVudCAqL1xuICAgICAgICB0aGlzLmNvbW1lbnQgPSBudWxsO1xuICAgICAgICAvKiogRXJyb3JzIGVuY291bnRlcmVkIGR1cmluZyBwYXJzaW5nLiAqL1xuICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICAvKiogV2FybmluZ3MgZW5jb3VudGVyZWQgZHVyaW5nIHBhcnNpbmcuICovXG4gICAgICAgIHRoaXMud2FybmluZ3MgPSBbXTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIE5PREVfVFlQRSwgeyB2YWx1ZTogRE9DIH0pO1xuICAgICAgICBsZXQgX3JlcGxhY2VyID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJyB8fCBBcnJheS5pc0FycmF5KHJlcGxhY2VyKSkge1xuICAgICAgICAgICAgX3JlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkICYmIHJlcGxhY2VyKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gcmVwbGFjZXI7XG4gICAgICAgICAgICByZXBsYWNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHQgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIGludEFzQmlnSW50OiBmYWxzZSxcbiAgICAgICAgICAgIGtlZXBTb3VyY2VUb2tlbnM6IGZhbHNlLFxuICAgICAgICAgICAgbG9nTGV2ZWw6ICd3YXJuJyxcbiAgICAgICAgICAgIHByZXR0eUVycm9yczogdHJ1ZSxcbiAgICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgIHN0cmluZ0tleXM6IGZhbHNlLFxuICAgICAgICAgICAgdW5pcXVlS2V5czogdHJ1ZSxcbiAgICAgICAgICAgIHZlcnNpb246ICcxLjInXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHQ7XG4gICAgICAgIGxldCB7IHZlcnNpb24gfSA9IG9wdDtcbiAgICAgICAgaWYgKG9wdGlvbnM/Ll9kaXJlY3RpdmVzKSB7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBvcHRpb25zLl9kaXJlY3RpdmVzLmF0RG9jdW1lbnQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGl2ZXMueWFtbC5leHBsaWNpdClcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gdGhpcy5kaXJlY3RpdmVzLnlhbWwudmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBuZXcgRGlyZWN0aXZlcyh7IHZlcnNpb24gfSk7XG4gICAgICAgIHRoaXMuc2V0U2NoZW1hKHZlcnNpb24sIG9wdGlvbnMpO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGNhbid0IHJlYWxseSBrbm93IHRoYXQgdGhpcyBtYXRjaGVzIENvbnRlbnRzLlxuICAgICAgICB0aGlzLmNvbnRlbnRzID1cbiAgICAgICAgICAgIHZhbHVlID09PSB1bmRlZmluZWQgPyBudWxsIDogdGhpcy5jcmVhdGVOb2RlKHZhbHVlLCBfcmVwbGFjZXIsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBkZWVwIGNvcHkgb2YgdGhpcyBEb2N1bWVudCBhbmQgaXRzIGNvbnRlbnRzLlxuICAgICAqXG4gICAgICogQ3VzdG9tIE5vZGUgdmFsdWVzIHRoYXQgaW5oZXJpdCBmcm9tIGBPYmplY3RgIHN0aWxsIHJlZmVyIHRvIHRoZWlyIG9yaWdpbmFsIGluc3RhbmNlcy5cbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IE9iamVjdC5jcmVhdGUoRG9jdW1lbnQucHJvdG90eXBlLCB7XG4gICAgICAgICAgICBbTk9ERV9UWVBFXTogeyB2YWx1ZTogRE9DIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvcHkuY29tbWVudEJlZm9yZSA9IHRoaXMuY29tbWVudEJlZm9yZTtcbiAgICAgICAgY29weS5jb21tZW50ID0gdGhpcy5jb21tZW50O1xuICAgICAgICBjb3B5LmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKCk7XG4gICAgICAgIGNvcHkud2FybmluZ3MgPSB0aGlzLndhcm5pbmdzLnNsaWNlKCk7XG4gICAgICAgIGNvcHkub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGl2ZXMpXG4gICAgICAgICAgICBjb3B5LmRpcmVjdGl2ZXMgPSB0aGlzLmRpcmVjdGl2ZXMuY2xvbmUoKTtcbiAgICAgICAgY29weS5zY2hlbWEgPSB0aGlzLnNjaGVtYS5jbG9uZSgpO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGNhbid0IHJlYWxseSBrbm93IHRoYXQgdGhpcyBtYXRjaGVzIENvbnRlbnRzLlxuICAgICAgICBjb3B5LmNvbnRlbnRzID0gaXNOb2RlKHRoaXMuY29udGVudHMpXG4gICAgICAgICAgICA/IHRoaXMuY29udGVudHMuY2xvbmUoY29weS5zY2hlbWEpXG4gICAgICAgICAgICA6IHRoaXMuY29udGVudHM7XG4gICAgICAgIGlmICh0aGlzLnJhbmdlKVxuICAgICAgICAgICAgY29weS5yYW5nZSA9IHRoaXMucmFuZ2Uuc2xpY2UoKTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxuICAgIC8qKiBBZGRzIGEgdmFsdWUgdG8gdGhlIGRvY3VtZW50LiAqL1xuICAgIGFkZCh2YWx1ZSkge1xuICAgICAgICBpZiAoYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSlcbiAgICAgICAgICAgIHRoaXMuY29udGVudHMuYWRkKHZhbHVlKTtcbiAgICB9XG4gICAgLyoqIEFkZHMgYSB2YWx1ZSB0byB0aGUgZG9jdW1lbnQuICovXG4gICAgYWRkSW4ocGF0aCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGFzc2VydENvbGxlY3Rpb24odGhpcy5jb250ZW50cykpXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzLmFkZEluKHBhdGgsIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBbGlhc2Agbm9kZSwgZW5zdXJpbmcgdGhhdCB0aGUgdGFyZ2V0IGBub2RlYCBoYXMgdGhlIHJlcXVpcmVkIGFuY2hvci5cbiAgICAgKlxuICAgICAqIElmIGBub2RlYCBhbHJlYWR5IGhhcyBhbiBhbmNob3IsIGBuYW1lYCBpcyBpZ25vcmVkLlxuICAgICAqIE90aGVyd2lzZSwgdGhlIGBub2RlLmFuY2hvcmAgdmFsdWUgd2lsbCBiZSBzZXQgdG8gYG5hbWVgLFxuICAgICAqIG9yIGlmIGFuIGFuY2hvciB3aXRoIHRoYXQgbmFtZSBpcyBhbHJlYWR5IHByZXNlbnQgaW4gdGhlIGRvY3VtZW50LFxuICAgICAqIGBuYW1lYCB3aWxsIGJlIHVzZWQgYXMgYSBwcmVmaXggZm9yIGEgbmV3IHVuaXF1ZSBhbmNob3IuXG4gICAgICogSWYgYG5hbWVgIGlzIHVuZGVmaW5lZCwgdGhlIGdlbmVyYXRlZCBhbmNob3Igd2lsbCB1c2UgJ2EnIGFzIGEgcHJlZml4LlxuICAgICAqL1xuICAgIGNyZWF0ZUFsaWFzKG5vZGUsIG5hbWUpIHtcbiAgICAgICAgaWYgKCFub2RlLmFuY2hvcikge1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IGFuY2hvck5hbWVzKHRoaXMpO1xuICAgICAgICAgICAgbm9kZS5hbmNob3IgPVxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW51bGxpc2gtY29hbGVzY2luZ1xuICAgICAgICAgICAgICAgICFuYW1lIHx8IHByZXYuaGFzKG5hbWUpID8gZmluZE5ld0FuY2hvcihuYW1lIHx8ICdhJywgcHJldikgOiBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQWxpYXMobm9kZS5hbmNob3IpO1xuICAgIH1cbiAgICBjcmVhdGVOb2RlKHZhbHVlLCByZXBsYWNlciwgb3B0aW9ucykge1xuICAgICAgICBsZXQgX3JlcGxhY2VyID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHJlcGxhY2VyLmNhbGwoeyAnJzogdmFsdWUgfSwgJycsIHZhbHVlKTtcbiAgICAgICAgICAgIF9yZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVwbGFjZXIpKSB7XG4gICAgICAgICAgICBjb25zdCBrZXlUb1N0ciA9ICh2KSA9PiB0eXBlb2YgdiA9PT0gJ251bWJlcicgfHwgdiBpbnN0YW5jZW9mIFN0cmluZyB8fCB2IGluc3RhbmNlb2YgTnVtYmVyO1xuICAgICAgICAgICAgY29uc3QgYXNTdHIgPSByZXBsYWNlci5maWx0ZXIoa2V5VG9TdHIpLm1hcChTdHJpbmcpO1xuICAgICAgICAgICAgaWYgKGFzU3RyLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgcmVwbGFjZXIgPSByZXBsYWNlci5jb25jYXQoYXNTdHIpO1xuICAgICAgICAgICAgX3JlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkICYmIHJlcGxhY2VyKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gcmVwbGFjZXI7XG4gICAgICAgICAgICByZXBsYWNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGFsaWFzRHVwbGljYXRlT2JqZWN0cywgYW5jaG9yUHJlZml4LCBmbG93LCBrZWVwVW5kZWZpbmVkLCBvblRhZ09iaiwgdGFnIH0gPSBvcHRpb25zID8/IHt9O1xuICAgICAgICBjb25zdCB7IG9uQW5jaG9yLCBzZXRBbmNob3JzLCBzb3VyY2VPYmplY3RzIH0gPSBjcmVhdGVOb2RlQW5jaG9ycyh0aGlzLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItbnVsbGlzaC1jb2FsZXNjaW5nXG4gICAgICAgIGFuY2hvclByZWZpeCB8fCAnYScpO1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBhbGlhc0R1cGxpY2F0ZU9iamVjdHM6IGFsaWFzRHVwbGljYXRlT2JqZWN0cyA/PyB0cnVlLFxuICAgICAgICAgICAga2VlcFVuZGVmaW5lZDoga2VlcFVuZGVmaW5lZCA/PyBmYWxzZSxcbiAgICAgICAgICAgIG9uQW5jaG9yLFxuICAgICAgICAgICAgb25UYWdPYmosXG4gICAgICAgICAgICByZXBsYWNlcjogX3JlcGxhY2VyLFxuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLnNjaGVtYSxcbiAgICAgICAgICAgIHNvdXJjZU9iamVjdHNcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGNyZWF0ZU5vZGUodmFsdWUsIHRhZywgY3R4KTtcbiAgICAgICAgaWYgKGZsb3cgJiYgaXNDb2xsZWN0aW9uKG5vZGUpKVxuICAgICAgICAgICAgbm9kZS5mbG93ID0gdHJ1ZTtcbiAgICAgICAgc2V0QW5jaG9ycygpO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydCBhIGtleSBhbmQgYSB2YWx1ZSBpbnRvIGEgYFBhaXJgIHVzaW5nIHRoZSBjdXJyZW50IHNjaGVtYSxcbiAgICAgKiByZWN1cnNpdmVseSB3cmFwcGluZyBhbGwgdmFsdWVzIGFzIGBTY2FsYXJgIG9yIGBDb2xsZWN0aW9uYCBub2Rlcy5cbiAgICAgKi9cbiAgICBjcmVhdGVQYWlyKGtleSwgdmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBrID0gdGhpcy5jcmVhdGVOb2RlKGtleSwgbnVsbCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLmNyZWF0ZU5vZGUodmFsdWUsIG51bGwsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gbmV3IFBhaXIoaywgdik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSB2YWx1ZSBmcm9tIHRoZSBkb2N1bWVudC5cbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGl0ZW0gd2FzIGZvdW5kIGFuZCByZW1vdmVkLlxuICAgICAqL1xuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGFzc2VydENvbGxlY3Rpb24odGhpcy5jb250ZW50cykgPyB0aGlzLmNvbnRlbnRzLmRlbGV0ZShrZXkpIDogZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSB2YWx1ZSBmcm9tIHRoZSBkb2N1bWVudC5cbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGl0ZW0gd2FzIGZvdW5kIGFuZCByZW1vdmVkLlxuICAgICAqL1xuICAgIGRlbGV0ZUluKHBhdGgpIHtcbiAgICAgICAgaWYgKGlzRW1wdHlQYXRoKHBhdGgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50cyA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgUHJlc3VtZWQgaW1wb3NzaWJsZSBpZiBTdHJpY3QgZXh0ZW5kcyBmYWxzZVxuICAgICAgICAgICAgdGhpcy5jb250ZW50cyA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKVxuICAgICAgICAgICAgPyB0aGlzLmNvbnRlbnRzLmRlbGV0ZUluKHBhdGgpXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGl0ZW0gYXQgYGtleWAsIG9yIGB1bmRlZmluZWRgIGlmIG5vdCBmb3VuZC4gQnkgZGVmYXVsdCB1bndyYXBzXG4gICAgICogc2NhbGFyIHZhbHVlcyBmcm9tIHRoZWlyIHN1cnJvdW5kaW5nIG5vZGU7IHRvIGRpc2FibGUgc2V0IGBrZWVwU2NhbGFyYCB0b1xuICAgICAqIGB0cnVlYCAoY29sbGVjdGlvbnMgYXJlIGFsd2F5cyByZXR1cm5lZCBpbnRhY3QpLlxuICAgICAqL1xuICAgIGdldChrZXksIGtlZXBTY2FsYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzQ29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKVxuICAgICAgICAgICAgPyB0aGlzLmNvbnRlbnRzLmdldChrZXksIGtlZXBTY2FsYXIpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpdGVtIGF0IGBwYXRoYCwgb3IgYHVuZGVmaW5lZGAgaWYgbm90IGZvdW5kLiBCeSBkZWZhdWx0IHVud3JhcHNcbiAgICAgKiBzY2FsYXIgdmFsdWVzIGZyb20gdGhlaXIgc3Vycm91bmRpbmcgbm9kZTsgdG8gZGlzYWJsZSBzZXQgYGtlZXBTY2FsYXJgIHRvXG4gICAgICogYHRydWVgIChjb2xsZWN0aW9ucyBhcmUgYWx3YXlzIHJldHVybmVkIGludGFjdCkuXG4gICAgICovXG4gICAgZ2V0SW4ocGF0aCwga2VlcFNjYWxhcikge1xuICAgICAgICBpZiAoaXNFbXB0eVBhdGgocGF0aCkpXG4gICAgICAgICAgICByZXR1cm4gIWtlZXBTY2FsYXIgJiYgaXNTY2FsYXIodGhpcy5jb250ZW50cylcbiAgICAgICAgICAgICAgICA/IHRoaXMuY29udGVudHMudmFsdWVcbiAgICAgICAgICAgICAgICA6IHRoaXMuY29udGVudHM7XG4gICAgICAgIHJldHVybiBpc0NvbGxlY3Rpb24odGhpcy5jb250ZW50cylcbiAgICAgICAgICAgID8gdGhpcy5jb250ZW50cy5nZXRJbihwYXRoLCBrZWVwU2NhbGFyKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZG9jdW1lbnQgaW5jbHVkZXMgYSB2YWx1ZSB3aXRoIHRoZSBrZXkgYGtleWAuXG4gICAgICovXG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpID8gdGhpcy5jb250ZW50cy5oYXMoa2V5KSA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGRvY3VtZW50IGluY2x1ZGVzIGEgdmFsdWUgYXQgYHBhdGhgLlxuICAgICAqL1xuICAgIGhhc0luKHBhdGgpIHtcbiAgICAgICAgaWYgKGlzRW1wdHlQYXRoKHBhdGgpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGlzQ29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSA/IHRoaXMuY29udGVudHMuaGFzSW4ocGF0aCkgOiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhIHZhbHVlIGluIHRoaXMgZG9jdW1lbnQuIEZvciBgISFzZXRgLCBgdmFsdWVgIG5lZWRzIHRvIGJlIGFcbiAgICAgKiBib29sZWFuIHRvIGFkZC9yZW1vdmUgdGhlIGl0ZW0gZnJvbSB0aGUgc2V0LlxuICAgICAqL1xuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRzID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgY2FuJ3QgcmVhbGx5IGtub3cgdGhhdCB0aGlzIG1hdGNoZXMgQ29udGVudHMuXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzID0gY29sbGVjdGlvbkZyb21QYXRoKHRoaXMuc2NoZW1hLCBba2V5XSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFzc2VydENvbGxlY3Rpb24odGhpcy5jb250ZW50cykpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudHMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSB2YWx1ZSBpbiB0aGlzIGRvY3VtZW50LiBGb3IgYCEhc2V0YCwgYHZhbHVlYCBuZWVkcyB0byBiZSBhXG4gICAgICogYm9vbGVhbiB0byBhZGQvcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIHNldC5cbiAgICAgKi9cbiAgICBzZXRJbihwYXRoLCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNFbXB0eVBhdGgocGF0aCkpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgY2FuJ3QgcmVhbGx5IGtub3cgdGhhdCB0aGlzIG1hdGNoZXMgQ29udGVudHMuXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jb250ZW50cyA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGNhbid0IHJlYWxseSBrbm93IHRoYXQgdGhpcyBtYXRjaGVzIENvbnRlbnRzLlxuICAgICAgICAgICAgdGhpcy5jb250ZW50cyA9IGNvbGxlY3Rpb25Gcm9tUGF0aCh0aGlzLnNjaGVtYSwgQXJyYXkuZnJvbShwYXRoKSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFzc2VydENvbGxlY3Rpb24odGhpcy5jb250ZW50cykpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudHMuc2V0SW4ocGF0aCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgWUFNTCB2ZXJzaW9uIGFuZCBzY2hlbWEgdXNlZCBieSB0aGUgZG9jdW1lbnQuXG4gICAgICogQSBgbnVsbGAgdmVyc2lvbiBkaXNhYmxlcyBzdXBwb3J0IGZvciBkaXJlY3RpdmVzLCBleHBsaWNpdCB0YWdzLCBhbmNob3JzLCBhbmQgYWxpYXNlcy5cbiAgICAgKiBJdCBhbHNvIHJlcXVpcmVzIHRoZSBgc2NoZW1hYCBvcHRpb24gdG8gYmUgZ2l2ZW4gYXMgYSBgU2NoZW1hYCBpbnN0YW5jZSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIE92ZXJyaWRlcyBhbGwgcHJldmlvdXNseSBzZXQgc2NoZW1hIG9wdGlvbnMuXG4gICAgICovXG4gICAgc2V0U2NoZW1hKHZlcnNpb24sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAodHlwZW9mIHZlcnNpb24gPT09ICdudW1iZXInKVxuICAgICAgICAgICAgdmVyc2lvbiA9IFN0cmluZyh2ZXJzaW9uKTtcbiAgICAgICAgbGV0IG9wdDtcbiAgICAgICAgc3dpdGNoICh2ZXJzaW9uKSB7XG4gICAgICAgICAgICBjYXNlICcxLjEnOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGl2ZXMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcy55YW1sLnZlcnNpb24gPSAnMS4xJztcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IG5ldyBEaXJlY3RpdmVzKHsgdmVyc2lvbjogJzEuMScgfSk7XG4gICAgICAgICAgICAgICAgb3B0ID0geyByZXNvbHZlS25vd25UYWdzOiBmYWxzZSwgc2NoZW1hOiAneWFtbC0xLjEnIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICcxLjInOlxuICAgICAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aXZlcylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzLnlhbWwudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBuZXcgRGlyZWN0aXZlcyh7IHZlcnNpb24gfSk7XG4gICAgICAgICAgICAgICAgb3B0ID0geyByZXNvbHZlS25vd25UYWdzOiB0cnVlLCBzY2hlbWE6ICdjb3JlJyB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGl2ZXMpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRpcmVjdGl2ZXM7XG4gICAgICAgICAgICAgICAgb3B0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdiA9IEpTT04uc3RyaW5naWZ5KHZlcnNpb24pO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJzEuMScsICcxLjInIG9yIG51bGwgYXMgZmlyc3QgYXJndW1lbnQsIGJ1dCBmb3VuZDogJHtzdn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBOb3QgdXNpbmcgYGluc3RhbmNlb2YgU2NoZW1hYCB0byBhbGxvdyBmb3IgZHVjayB0eXBpbmdcbiAgICAgICAgaWYgKG9wdGlvbnMuc2NoZW1hIGluc3RhbmNlb2YgT2JqZWN0KVxuICAgICAgICAgICAgdGhpcy5zY2hlbWEgPSBvcHRpb25zLnNjaGVtYTtcbiAgICAgICAgZWxzZSBpZiAob3B0KVxuICAgICAgICAgICAgdGhpcy5zY2hlbWEgPSBuZXcgU2NoZW1hKE9iamVjdC5hc3NpZ24ob3B0LCBvcHRpb25zKSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV2l0aCBhIG51bGwgWUFNTCB2ZXJzaW9uLCB0aGUgeyBzY2hlbWE6IFNjaGVtYSB9IG9wdGlvbiBpcyByZXF1aXJlZGApO1xuICAgIH1cbiAgICAvLyBqc29uICYganNvbkFyZyBhcmUgb25seSB1c2VkIGZyb20gdG9KU09OKClcbiAgICB0b0pTKHsganNvbiwganNvbkFyZywgbWFwQXNNYXAsIG1heEFsaWFzQ291bnQsIG9uQW5jaG9yLCByZXZpdmVyIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBhbmNob3JzOiBuZXcgTWFwKCksXG4gICAgICAgICAgICBkb2M6IHRoaXMsXG4gICAgICAgICAgICBrZWVwOiAhanNvbixcbiAgICAgICAgICAgIG1hcEFzTWFwOiBtYXBBc01hcCA9PT0gdHJ1ZSxcbiAgICAgICAgICAgIG1hcEtleVdhcm5lZDogZmFsc2UsXG4gICAgICAgICAgICBtYXhBbGlhc0NvdW50OiB0eXBlb2YgbWF4QWxpYXNDb3VudCA9PT0gJ251bWJlcicgPyBtYXhBbGlhc0NvdW50IDogMTAwXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IHRvSlModGhpcy5jb250ZW50cywganNvbkFyZyA/PyAnJywgY3R4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBvbkFuY2hvciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBjb3VudCwgcmVzIH0gb2YgY3R4LmFuY2hvcnMudmFsdWVzKCkpXG4gICAgICAgICAgICAgICAgb25BbmNob3IocmVzLCBjb3VudCk7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBhcHBseVJldml2ZXIocmV2aXZlciwgeyAnJzogcmVzIH0sICcnLCByZXMpXG4gICAgICAgICAgICA6IHJlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkb2N1bWVudCBgY29udGVudHNgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGpzb25BcmcgVXNlZCBieSBgSlNPTi5zdHJpbmdpZnlgIHRvIGluZGljYXRlIHRoZSBhcnJheSBpbmRleCBvclxuICAgICAqICAgcHJvcGVydHkgbmFtZS5cbiAgICAgKi9cbiAgICB0b0pTT04oanNvbkFyZywgb25BbmNob3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9KUyh7IGpzb246IHRydWUsIGpzb25BcmcsIG1hcEFzTWFwOiBmYWxzZSwgb25BbmNob3IgfSk7XG4gICAgfVxuICAgIC8qKiBBIFlBTUwgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRvY3VtZW50LiAqL1xuICAgIHRvU3RyaW5nKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5lcnJvcnMubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRG9jdW1lbnQgd2l0aCBlcnJvcnMgY2Fubm90IGJlIHN0cmluZ2lmaWVkJyk7XG4gICAgICAgIGlmICgnaW5kZW50JyBpbiBvcHRpb25zICYmXG4gICAgICAgICAgICAoIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5pbmRlbnQpIHx8IE51bWJlcihvcHRpb25zLmluZGVudCkgPD0gMCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmluZGVudCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiaW5kZW50XCIgb3B0aW9uIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLCBub3QgJHtzfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlEb2N1bWVudCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc3NlcnRDb2xsZWN0aW9uKGNvbnRlbnRzKSB7XG4gICAgaWYgKGlzQ29sbGVjdGlvbihjb250ZW50cykpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYSBZQU1MIGNvbGxlY3Rpb24gYXMgZG9jdW1lbnQgY29udGVudHMnKTtcbn1cblxuZXhwb3J0IHsgRG9jdW1lbnQgfTtcbiIsImNsYXNzIFlBTUxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBwb3MsIGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgfVxufVxuY2xhc3MgWUFNTFBhcnNlRXJyb3IgZXh0ZW5kcyBZQU1MRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHBvcywgY29kZSwgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcignWUFNTFBhcnNlRXJyb3InLCBwb3MsIGNvZGUsIG1lc3NhZ2UpO1xuICAgIH1cbn1cbmNsYXNzIFlBTUxXYXJuaW5nIGV4dGVuZHMgWUFNTEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3MsIGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIoJ1lBTUxXYXJuaW5nJywgcG9zLCBjb2RlLCBtZXNzYWdlKTtcbiAgICB9XG59XG5jb25zdCBwcmV0dGlmeUVycm9yID0gKHNyYywgbGMpID0+IChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvci5wb3NbMF0gPT09IC0xKVxuICAgICAgICByZXR1cm47XG4gICAgZXJyb3IubGluZVBvcyA9IGVycm9yLnBvcy5tYXAocG9zID0+IGxjLmxpbmVQb3MocG9zKSk7XG4gICAgY29uc3QgeyBsaW5lLCBjb2wgfSA9IGVycm9yLmxpbmVQb3NbMF07XG4gICAgZXJyb3IubWVzc2FnZSArPSBgIGF0IGxpbmUgJHtsaW5lfSwgY29sdW1uICR7Y29sfWA7XG4gICAgbGV0IGNpID0gY29sIC0gMTtcbiAgICBsZXQgbGluZVN0ciA9IHNyY1xuICAgICAgICAuc3Vic3RyaW5nKGxjLmxpbmVTdGFydHNbbGluZSAtIDFdLCBsYy5saW5lU3RhcnRzW2xpbmVdKVxuICAgICAgICAucmVwbGFjZSgvW1xcblxccl0rJC8sICcnKTtcbiAgICAvLyBUcmltIHRvIG1heCA4MCBjaGFycywga2VlcGluZyBjb2wgcG9zaXRpb24gbmVhciB0aGUgbWlkZGxlXG4gICAgaWYgKGNpID49IDYwICYmIGxpbmVTdHIubGVuZ3RoID4gODApIHtcbiAgICAgICAgY29uc3QgdHJpbVN0YXJ0ID0gTWF0aC5taW4oY2kgLSAzOSwgbGluZVN0ci5sZW5ndGggLSA3OSk7XG4gICAgICAgIGxpbmVTdHIgPSAn4oCmJyArIGxpbmVTdHIuc3Vic3RyaW5nKHRyaW1TdGFydCk7XG4gICAgICAgIGNpIC09IHRyaW1TdGFydCAtIDE7XG4gICAgfVxuICAgIGlmIChsaW5lU3RyLmxlbmd0aCA+IDgwKVxuICAgICAgICBsaW5lU3RyID0gbGluZVN0ci5zdWJzdHJpbmcoMCwgNzkpICsgJ+KApic7XG4gICAgLy8gSW5jbHVkZSBwcmV2aW91cyBsaW5lIGluIGNvbnRleHQgaWYgcG9pbnRpbmcgYXQgbGluZSBzdGFydFxuICAgIGlmIChsaW5lID4gMSAmJiAvXiAqJC8udGVzdChsaW5lU3RyLnN1YnN0cmluZygwLCBjaSkpKSB7XG4gICAgICAgIC8vIFJlZ2V4cCB3b24ndCBtYXRjaCBpZiBzdGFydCBpcyB0cmltbWVkXG4gICAgICAgIGxldCBwcmV2ID0gc3JjLnN1YnN0cmluZyhsYy5saW5lU3RhcnRzW2xpbmUgLSAyXSwgbGMubGluZVN0YXJ0c1tsaW5lIC0gMV0pO1xuICAgICAgICBpZiAocHJldi5sZW5ndGggPiA4MClcbiAgICAgICAgICAgIHByZXYgPSBwcmV2LnN1YnN0cmluZygwLCA3OSkgKyAn4oCmXFxuJztcbiAgICAgICAgbGluZVN0ciA9IHByZXYgKyBsaW5lU3RyO1xuICAgIH1cbiAgICBpZiAoL1teIF0vLnRlc3QobGluZVN0cikpIHtcbiAgICAgICAgbGV0IGNvdW50ID0gMTtcbiAgICAgICAgY29uc3QgZW5kID0gZXJyb3IubGluZVBvc1sxXTtcbiAgICAgICAgaWYgKGVuZCAmJiBlbmQubGluZSA9PT0gbGluZSAmJiBlbmQuY29sID4gY29sKSB7XG4gICAgICAgICAgICBjb3VudCA9IE1hdGgubWF4KDEsIE1hdGgubWluKGVuZC5jb2wgLSBjb2wsIDgwIC0gY2kpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwb2ludGVyID0gJyAnLnJlcGVhdChjaSkgKyAnXicucmVwZWF0KGNvdW50KTtcbiAgICAgICAgZXJyb3IubWVzc2FnZSArPSBgOlxcblxcbiR7bGluZVN0cn1cXG4ke3BvaW50ZXJ9XFxuYDtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBZQU1MRXJyb3IsIFlBTUxQYXJzZUVycm9yLCBZQU1MV2FybmluZywgcHJldHRpZnlFcnJvciB9O1xuIiwiZnVuY3Rpb24gcmVzb2x2ZVByb3BzKHRva2VucywgeyBmbG93LCBpbmRpY2F0b3IsIG5leHQsIG9mZnNldCwgb25FcnJvciwgcGFyZW50SW5kZW50LCBzdGFydE9uTmV3bGluZSB9KSB7XG4gICAgbGV0IHNwYWNlQmVmb3JlID0gZmFsc2U7XG4gICAgbGV0IGF0TmV3bGluZSA9IHN0YXJ0T25OZXdsaW5lO1xuICAgIGxldCBoYXNTcGFjZSA9IHN0YXJ0T25OZXdsaW5lO1xuICAgIGxldCBjb21tZW50ID0gJyc7XG4gICAgbGV0IGNvbW1lbnRTZXAgPSAnJztcbiAgICBsZXQgaGFzTmV3bGluZSA9IGZhbHNlO1xuICAgIGxldCByZXFTcGFjZSA9IGZhbHNlO1xuICAgIGxldCB0YWIgPSBudWxsO1xuICAgIGxldCBhbmNob3IgPSBudWxsO1xuICAgIGxldCB0YWcgPSBudWxsO1xuICAgIGxldCBuZXdsaW5lQWZ0ZXJQcm9wID0gbnVsbDtcbiAgICBsZXQgY29tbWEgPSBudWxsO1xuICAgIGxldCBmb3VuZCA9IG51bGw7XG4gICAgbGV0IHN0YXJ0ID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xuICAgICAgICBpZiAocmVxU3BhY2UpIHtcbiAgICAgICAgICAgIGlmICh0b2tlbi50eXBlICE9PSAnc3BhY2UnICYmXG4gICAgICAgICAgICAgICAgdG9rZW4udHlwZSAhPT0gJ25ld2xpbmUnICYmXG4gICAgICAgICAgICAgICAgdG9rZW4udHlwZSAhPT0gJ2NvbW1hJylcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLm9mZnNldCwgJ01JU1NJTkdfQ0hBUicsICdUYWdzIGFuZCBhbmNob3JzIG11c3QgYmUgc2VwYXJhdGVkIGZyb20gdGhlIG5leHQgdG9rZW4gYnkgd2hpdGUgc3BhY2UnKTtcbiAgICAgICAgICAgIHJlcVNwYWNlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhYikge1xuICAgICAgICAgICAgaWYgKGF0TmV3bGluZSAmJiB0b2tlbi50eXBlICE9PSAnY29tbWVudCcgJiYgdG9rZW4udHlwZSAhPT0gJ25ld2xpbmUnKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcih0YWIsICdUQUJfQVNfSU5ERU5UJywgJ1RhYnMgYXJlIG5vdCBhbGxvd2VkIGFzIGluZGVudGF0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YWIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgIC8vIEF0IHRoZSBkb2MgbGV2ZWwsIHRhYnMgYXQgbGluZSBzdGFydCBtYXkgYmUgcGFyc2VkXG4gICAgICAgICAgICAgICAgLy8gYXMgbGVhZGluZyB3aGl0ZSBzcGFjZSByYXRoZXIgdGhhbiBpbmRlbnRhdGlvbi5cbiAgICAgICAgICAgICAgICAvLyBJbiBhIGZsb3cgY29sbGVjdGlvbiwgb25seSB0aGUgcGFyc2VyIGhhbmRsZXMgaW5kZW50LlxuICAgICAgICAgICAgICAgIGlmICghZmxvdyAmJlxuICAgICAgICAgICAgICAgICAgICAoaW5kaWNhdG9yICE9PSAnZG9jLXN0YXJ0JyB8fCBuZXh0Py50eXBlICE9PSAnZmxvdy1jb2xsZWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uc291cmNlLmluY2x1ZGVzKCdcXHQnKSkge1xuICAgICAgICAgICAgICAgICAgICB0YWIgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6IHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1NwYWNlKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnTUlTU0lOR19DSEFSJywgJ0NvbW1lbnRzIG11c3QgYmUgc2VwYXJhdGVkIGZyb20gb3RoZXIgdG9rZW5zIGJ5IHdoaXRlIHNwYWNlIGNoYXJhY3RlcnMnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IHRva2VuLnNvdXJjZS5zdWJzdHJpbmcoMSkgfHwgJyAnO1xuICAgICAgICAgICAgICAgIGlmICghY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IGNiO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudCArPSBjb21tZW50U2VwICsgY2I7XG4gICAgICAgICAgICAgICAgY29tbWVudFNlcCA9ICcnO1xuICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgaWYgKGF0TmV3bGluZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgKz0gdG9rZW4uc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFjZUJlZm9yZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudFNlcCArPSB0b2tlbi5zb3VyY2U7XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBoYXNOZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yIHx8IHRhZylcbiAgICAgICAgICAgICAgICAgICAgbmV3bGluZUFmdGVyUHJvcCA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FuY2hvcic6XG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvcilcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ01VTFRJUExFX0FOQ0hPUlMnLCAnQSBub2RlIGNhbiBoYXZlIGF0IG1vc3Qgb25lIGFuY2hvcicpO1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5zb3VyY2UuZW5kc1dpdGgoJzonKSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbi5vZmZzZXQgKyB0b2tlbi5zb3VyY2UubGVuZ3RoIC0gMSwgJ0JBRF9BTElBUycsICdBbmNob3IgZW5kaW5nIGluIDogaXMgYW1iaWd1b3VzJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYW5jaG9yID0gdG9rZW47XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHRva2VuLm9mZnNldDtcbiAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlcVNwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RhZyc6IHtcbiAgICAgICAgICAgICAgICBpZiAodGFnKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnTVVMVElQTEVfVEFHUycsICdBIG5vZGUgY2FuIGhhdmUgYXQgbW9zdCBvbmUgdGFnJyk7XG4gICAgICAgICAgICAgICAgdGFnID0gdG9rZW47XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHRva2VuLm9mZnNldDtcbiAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlcVNwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgaW5kaWNhdG9yOlxuICAgICAgICAgICAgICAgIC8vIENvdWxkIGhlcmUgaGFuZGxlIHByZWNlZGluZyBjb21tZW50cyBkaWZmZXJlbnRseVxuICAgICAgICAgICAgICAgIGlmIChhbmNob3IgfHwgdGFnKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnQkFEX1BST1BfT1JERVInLCBgQW5jaG9ycyBhbmQgdGFncyBtdXN0IGJlIGFmdGVyIHRoZSAke3Rva2VuLnNvdXJjZX0gaW5kaWNhdG9yYCk7XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICR7dG9rZW4uc291cmNlfSBpbiAke2Zsb3cgPz8gJ2NvbGxlY3Rpb24nfWApO1xuICAgICAgICAgICAgICAgIGZvdW5kID0gdG9rZW47XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID1cbiAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yID09PSAnc2VxLWl0ZW0taW5kJyB8fCBpbmRpY2F0b3IgPT09ICdleHBsaWNpdC1rZXktaW5kJztcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29tbWEnOlxuICAgICAgICAgICAgICAgIGlmIChmbG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tYSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgLCBpbiAke2Zsb3d9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbHNlIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgJHt0b2tlbi50eXBlfSB0b2tlbmApO1xuICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGFzdCA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgZW5kID0gbGFzdCA/IGxhc3Qub2Zmc2V0ICsgbGFzdC5zb3VyY2UubGVuZ3RoIDogb2Zmc2V0O1xuICAgIGlmIChyZXFTcGFjZSAmJlxuICAgICAgICBuZXh0ICYmXG4gICAgICAgIG5leHQudHlwZSAhPT0gJ3NwYWNlJyAmJlxuICAgICAgICBuZXh0LnR5cGUgIT09ICduZXdsaW5lJyAmJlxuICAgICAgICBuZXh0LnR5cGUgIT09ICdjb21tYScgJiZcbiAgICAgICAgKG5leHQudHlwZSAhPT0gJ3NjYWxhcicgfHwgbmV4dC5zb3VyY2UgIT09ICcnKSkge1xuICAgICAgICBvbkVycm9yKG5leHQub2Zmc2V0LCAnTUlTU0lOR19DSEFSJywgJ1RhZ3MgYW5kIGFuY2hvcnMgbXVzdCBiZSBzZXBhcmF0ZWQgZnJvbSB0aGUgbmV4dCB0b2tlbiBieSB3aGl0ZSBzcGFjZScpO1xuICAgIH1cbiAgICBpZiAodGFiICYmXG4gICAgICAgICgoYXROZXdsaW5lICYmIHRhYi5pbmRlbnQgPD0gcGFyZW50SW5kZW50KSB8fFxuICAgICAgICAgICAgbmV4dD8udHlwZSA9PT0gJ2Jsb2NrLW1hcCcgfHxcbiAgICAgICAgICAgIG5leHQ/LnR5cGUgPT09ICdibG9jay1zZXEnKSlcbiAgICAgICAgb25FcnJvcih0YWIsICdUQUJfQVNfSU5ERU5UJywgJ1RhYnMgYXJlIG5vdCBhbGxvd2VkIGFzIGluZGVudGF0aW9uJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29tbWEsXG4gICAgICAgIGZvdW5kLFxuICAgICAgICBzcGFjZUJlZm9yZSxcbiAgICAgICAgY29tbWVudCxcbiAgICAgICAgaGFzTmV3bGluZSxcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICB0YWcsXG4gICAgICAgIG5ld2xpbmVBZnRlclByb3AsXG4gICAgICAgIGVuZCxcbiAgICAgICAgc3RhcnQ6IHN0YXJ0ID8/IGVuZFxuICAgIH07XG59XG5cbmV4cG9ydCB7IHJlc29sdmVQcm9wcyB9O1xuIiwiZnVuY3Rpb24gY29udGFpbnNOZXdsaW5lKGtleSkge1xuICAgIGlmICgha2V5KVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBzd2l0Y2ggKGtleS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICBpZiAoa2V5LnNvdXJjZS5pbmNsdWRlcygnXFxuJykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAoa2V5LmVuZClcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIGtleS5lbmQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdC50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzpcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXQgb2Yga2V5Lml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiBpdC5zdGFydClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0LnR5cGUgPT09ICduZXdsaW5lJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgaXQuc2VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0LnR5cGUgPT09ICduZXdsaW5lJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbnNOZXdsaW5lKGl0LmtleSkgfHwgY29udGFpbnNOZXdsaW5lKGl0LnZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGNvbnRhaW5zTmV3bGluZSB9O1xuIiwiaW1wb3J0IHsgY29udGFpbnNOZXdsaW5lIH0gZnJvbSAnLi91dGlsLWNvbnRhaW5zLW5ld2xpbmUuanMnO1xuXG5mdW5jdGlvbiBmbG93SW5kZW50Q2hlY2soaW5kZW50LCBmYywgb25FcnJvcikge1xuICAgIGlmIChmYz8udHlwZSA9PT0gJ2Zsb3ctY29sbGVjdGlvbicpIHtcbiAgICAgICAgY29uc3QgZW5kID0gZmMuZW5kWzBdO1xuICAgICAgICBpZiAoZW5kLmluZGVudCA9PT0gaW5kZW50ICYmXG4gICAgICAgICAgICAoZW5kLnNvdXJjZSA9PT0gJ10nIHx8IGVuZC5zb3VyY2UgPT09ICd9JykgJiZcbiAgICAgICAgICAgIGNvbnRhaW5zTmV3bGluZShmYykpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdGbG93IGVuZCBpbmRpY2F0b3Igc2hvdWxkIGJlIG1vcmUgaW5kZW50ZWQgdGhhbiBwYXJlbnQnO1xuICAgICAgICAgICAgb25FcnJvcihlbmQsICdCQURfSU5ERU5UJywgbXNnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgZmxvd0luZGVudENoZWNrIH07XG4iLCJpbXBvcnQgeyBpc1NjYWxhciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcblxuZnVuY3Rpb24gbWFwSW5jbHVkZXMoY3R4LCBpdGVtcywgc2VhcmNoKSB7XG4gICAgY29uc3QgeyB1bmlxdWVLZXlzIH0gPSBjdHgub3B0aW9ucztcbiAgICBpZiAodW5pcXVlS2V5cyA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBpc0VxdWFsID0gdHlwZW9mIHVuaXF1ZUtleXMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB1bmlxdWVLZXlzXG4gICAgICAgIDogKGEsIGIpID0+IGEgPT09IGIgfHwgKGlzU2NhbGFyKGEpICYmIGlzU2NhbGFyKGIpICYmIGEudmFsdWUgPT09IGIudmFsdWUpO1xuICAgIHJldHVybiBpdGVtcy5zb21lKHBhaXIgPT4gaXNFcXVhbChwYWlyLmtleSwgc2VhcmNoKSk7XG59XG5cbmV4cG9ydCB7IG1hcEluY2x1ZGVzIH07XG4iLCJpbXBvcnQgeyBQYWlyIH0gZnJvbSAnLi4vbm9kZXMvUGFpci5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5pbXBvcnQgeyByZXNvbHZlUHJvcHMgfSBmcm9tICcuL3Jlc29sdmUtcHJvcHMuanMnO1xuaW1wb3J0IHsgY29udGFpbnNOZXdsaW5lIH0gZnJvbSAnLi91dGlsLWNvbnRhaW5zLW5ld2xpbmUuanMnO1xuaW1wb3J0IHsgZmxvd0luZGVudENoZWNrIH0gZnJvbSAnLi91dGlsLWZsb3ctaW5kZW50LWNoZWNrLmpzJztcbmltcG9ydCB7IG1hcEluY2x1ZGVzIH0gZnJvbSAnLi91dGlsLW1hcC1pbmNsdWRlcy5qcyc7XG5cbmNvbnN0IHN0YXJ0Q29sTXNnID0gJ0FsbCBtYXBwaW5nIGl0ZW1zIG11c3Qgc3RhcnQgYXQgdGhlIHNhbWUgY29sdW1uJztcbmZ1bmN0aW9uIHJlc29sdmVCbG9ja01hcCh7IGNvbXBvc2VOb2RlLCBjb21wb3NlRW1wdHlOb2RlIH0sIGN0eCwgYm0sIG9uRXJyb3IsIHRhZykge1xuICAgIGNvbnN0IE5vZGVDbGFzcyA9IHRhZz8ubm9kZUNsYXNzID8/IFlBTUxNYXA7XG4gICAgY29uc3QgbWFwID0gbmV3IE5vZGVDbGFzcyhjdHguc2NoZW1hKTtcbiAgICBpZiAoY3R4LmF0Um9vdClcbiAgICAgICAgY3R4LmF0Um9vdCA9IGZhbHNlO1xuICAgIGxldCBvZmZzZXQgPSBibS5vZmZzZXQ7XG4gICAgbGV0IGNvbW1lbnRFbmQgPSBudWxsO1xuICAgIGZvciAoY29uc3QgY29sbEl0ZW0gb2YgYm0uaXRlbXMpIHtcbiAgICAgICAgY29uc3QgeyBzdGFydCwga2V5LCBzZXAsIHZhbHVlIH0gPSBjb2xsSXRlbTtcbiAgICAgICAgLy8ga2V5IHByb3BlcnRpZXNcbiAgICAgICAgY29uc3Qga2V5UHJvcHMgPSByZXNvbHZlUHJvcHMoc3RhcnQsIHtcbiAgICAgICAgICAgIGluZGljYXRvcjogJ2V4cGxpY2l0LWtleS1pbmQnLFxuICAgICAgICAgICAgbmV4dDoga2V5ID8/IHNlcD8uWzBdLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgIHBhcmVudEluZGVudDogYm0uaW5kZW50LFxuICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGltcGxpY2l0S2V5ID0gIWtleVByb3BzLmZvdW5kO1xuICAgICAgICBpZiAoaW1wbGljaXRLZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5LnR5cGUgPT09ICdibG9jay1zZXEnKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JMT0NLX0FTX0lNUExJQ0lUX0tFWScsICdBIGJsb2NrIHNlcXVlbmNlIG1heSBub3QgYmUgdXNlZCBhcyBhbiBpbXBsaWNpdCBtYXAga2V5Jyk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoJ2luZGVudCcgaW4ga2V5ICYmIGtleS5pbmRlbnQgIT09IGJtLmluZGVudClcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdCQURfSU5ERU5UJywgc3RhcnRDb2xNc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFrZXlQcm9wcy5hbmNob3IgJiYgIWtleVByb3BzLnRhZyAmJiAhc2VwKSB7XG4gICAgICAgICAgICAgICAgY29tbWVudEVuZCA9IGtleVByb3BzLmVuZDtcbiAgICAgICAgICAgICAgICBpZiAoa2V5UHJvcHMuY29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFwLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuY29tbWVudCArPSAnXFxuJyArIGtleVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5jb21tZW50ID0ga2V5UHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V5UHJvcHMubmV3bGluZUFmdGVyUHJvcCB8fCBjb250YWluc05ld2xpbmUoa2V5KSkge1xuICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5ID8/IHN0YXJ0W3N0YXJ0Lmxlbmd0aCAtIDFdLCAnTVVMVElMSU5FX0lNUExJQ0lUX0tFWScsICdJbXBsaWNpdCBrZXlzIG5lZWQgdG8gYmUgb24gYSBzaW5nbGUgbGluZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleVByb3BzLmZvdW5kPy5pbmRlbnQgIT09IGJtLmluZGVudCkge1xuICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdCQURfSU5ERU5UJywgc3RhcnRDb2xNc2cpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGtleSB2YWx1ZVxuICAgICAgICBjdHguYXRLZXkgPSB0cnVlO1xuICAgICAgICBjb25zdCBrZXlTdGFydCA9IGtleVByb3BzLmVuZDtcbiAgICAgICAgY29uc3Qga2V5Tm9kZSA9IGtleVxuICAgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIGtleSwga2V5UHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBrZXlTdGFydCwgc3RhcnQsIG51bGwsIGtleVByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgaWYgKGN0eC5zY2hlbWEuY29tcGF0KVxuICAgICAgICAgICAgZmxvd0luZGVudENoZWNrKGJtLmluZGVudCwga2V5LCBvbkVycm9yKTtcbiAgICAgICAgY3R4LmF0S2V5ID0gZmFsc2U7XG4gICAgICAgIGlmIChtYXBJbmNsdWRlcyhjdHgsIG1hcC5pdGVtcywga2V5Tm9kZSkpXG4gICAgICAgICAgICBvbkVycm9yKGtleVN0YXJ0LCAnRFVQTElDQVRFX0tFWScsICdNYXAga2V5cyBtdXN0IGJlIHVuaXF1ZScpO1xuICAgICAgICAvLyB2YWx1ZSBwcm9wZXJ0aWVzXG4gICAgICAgIGNvbnN0IHZhbHVlUHJvcHMgPSByZXNvbHZlUHJvcHMoc2VwID8/IFtdLCB7XG4gICAgICAgICAgICBpbmRpY2F0b3I6ICdtYXAtdmFsdWUtaW5kJyxcbiAgICAgICAgICAgIG5leHQ6IHZhbHVlLFxuICAgICAgICAgICAgb2Zmc2V0OiBrZXlOb2RlLnJhbmdlWzJdLFxuICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgIHBhcmVudEluZGVudDogYm0uaW5kZW50LFxuICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6ICFrZXkgfHwga2V5LnR5cGUgPT09ICdibG9jay1zY2FsYXInXG4gICAgICAgIH0pO1xuICAgICAgICBvZmZzZXQgPSB2YWx1ZVByb3BzLmVuZDtcbiAgICAgICAgaWYgKHZhbHVlUHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgIGlmIChpbXBsaWNpdEtleSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZT8udHlwZSA9PT0gJ2Jsb2NrLW1hcCcgJiYgIXZhbHVlUHJvcHMuaGFzTmV3bGluZSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdCTE9DS19BU19JTVBMSUNJVF9LRVknLCAnTmVzdGVkIG1hcHBpbmdzIGFyZSBub3QgYWxsb3dlZCBpbiBjb21wYWN0IG1hcHBpbmdzJyk7XG4gICAgICAgICAgICAgICAgaWYgKGN0eC5vcHRpb25zLnN0cmljdCAmJlxuICAgICAgICAgICAgICAgICAgICBrZXlQcm9wcy5zdGFydCA8IHZhbHVlUHJvcHMuZm91bmQub2Zmc2V0IC0gMTAyNClcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihrZXlOb2RlLnJhbmdlLCAnS0VZX09WRVJfMTAyNF9DSEFSUycsICdUaGUgOiBpbmRpY2F0b3IgbXVzdCBiZSBhdCBtb3N0IDEwMjQgY2hhcnMgYWZ0ZXIgdGhlIHN0YXJ0IG9mIGFuIGltcGxpY2l0IGJsb2NrIG1hcHBpbmcga2V5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2YWx1ZSB2YWx1ZVxuICAgICAgICAgICAgY29uc3QgdmFsdWVOb2RlID0gdmFsdWVcbiAgICAgICAgICAgICAgICA/IGNvbXBvc2VOb2RlKGN0eCwgdmFsdWUsIHZhbHVlUHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICAgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwgb2Zmc2V0LCBzZXAsIG51bGwsIHZhbHVlUHJvcHMsIG9uRXJyb3IpO1xuICAgICAgICAgICAgaWYgKGN0eC5zY2hlbWEuY29tcGF0KVxuICAgICAgICAgICAgICAgIGZsb3dJbmRlbnRDaGVjayhibS5pbmRlbnQsIHZhbHVlLCBvbkVycm9yKTtcbiAgICAgICAgICAgIG9mZnNldCA9IHZhbHVlTm9kZS5yYW5nZVsyXTtcbiAgICAgICAgICAgIGNvbnN0IHBhaXIgPSBuZXcgUGFpcihrZXlOb2RlLCB2YWx1ZU5vZGUpO1xuICAgICAgICAgICAgaWYgKGN0eC5vcHRpb25zLmtlZXBTb3VyY2VUb2tlbnMpXG4gICAgICAgICAgICAgICAgcGFpci5zcmNUb2tlbiA9IGNvbGxJdGVtO1xuICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2gocGFpcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBrZXkgd2l0aCBubyB2YWx1ZVxuICAgICAgICAgICAgaWYgKGltcGxpY2l0S2V5KVxuICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5Tm9kZS5yYW5nZSwgJ01JU1NJTkdfQ0hBUicsICdJbXBsaWNpdCBtYXAga2V5cyBuZWVkIHRvIGJlIGZvbGxvd2VkIGJ5IG1hcCB2YWx1ZXMnKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZVByb3BzLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5Tm9kZS5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBrZXlOb2RlLmNvbW1lbnQgKz0gJ1xcbicgKyB2YWx1ZVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBrZXlOb2RlLmNvbW1lbnQgPSB2YWx1ZVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYWlyID0gbmV3IFBhaXIoa2V5Tm9kZSk7XG4gICAgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMua2VlcFNvdXJjZVRva2VucylcbiAgICAgICAgICAgICAgICBwYWlyLnNyY1Rva2VuID0gY29sbEl0ZW07XG4gICAgICAgICAgICBtYXAuaXRlbXMucHVzaChwYWlyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29tbWVudEVuZCAmJiBjb21tZW50RW5kIDwgb2Zmc2V0KVxuICAgICAgICBvbkVycm9yKGNvbW1lbnRFbmQsICdJTVBPU1NJQkxFJywgJ01hcCBjb21tZW50IHdpdGggdHJhaWxpbmcgY29udGVudCcpO1xuICAgIG1hcC5yYW5nZSA9IFtibS5vZmZzZXQsIG9mZnNldCwgY29tbWVudEVuZCA/PyBvZmZzZXRdO1xuICAgIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVCbG9ja01hcCB9O1xuIiwiaW1wb3J0IHsgWUFNTFNlcSB9IGZyb20gJy4uL25vZGVzL1lBTUxTZXEuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVByb3BzIH0gZnJvbSAnLi9yZXNvbHZlLXByb3BzLmpzJztcbmltcG9ydCB7IGZsb3dJbmRlbnRDaGVjayB9IGZyb20gJy4vdXRpbC1mbG93LWluZGVudC1jaGVjay5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVCbG9ja1NlcSh7IGNvbXBvc2VOb2RlLCBjb21wb3NlRW1wdHlOb2RlIH0sIGN0eCwgYnMsIG9uRXJyb3IsIHRhZykge1xuICAgIGNvbnN0IE5vZGVDbGFzcyA9IHRhZz8ubm9kZUNsYXNzID8/IFlBTUxTZXE7XG4gICAgY29uc3Qgc2VxID0gbmV3IE5vZGVDbGFzcyhjdHguc2NoZW1hKTtcbiAgICBpZiAoY3R4LmF0Um9vdClcbiAgICAgICAgY3R4LmF0Um9vdCA9IGZhbHNlO1xuICAgIGlmIChjdHguYXRLZXkpXG4gICAgICAgIGN0eC5hdEtleSA9IGZhbHNlO1xuICAgIGxldCBvZmZzZXQgPSBicy5vZmZzZXQ7XG4gICAgbGV0IGNvbW1lbnRFbmQgPSBudWxsO1xuICAgIGZvciAoY29uc3QgeyBzdGFydCwgdmFsdWUgfSBvZiBicy5pdGVtcykge1xuICAgICAgICBjb25zdCBwcm9wcyA9IHJlc29sdmVQcm9wcyhzdGFydCwge1xuICAgICAgICAgICAgaW5kaWNhdG9yOiAnc2VxLWl0ZW0taW5kJyxcbiAgICAgICAgICAgIG5leHQ6IHZhbHVlLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgIHBhcmVudEluZGVudDogYnMuaW5kZW50LFxuICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgIGlmIChwcm9wcy5hbmNob3IgfHwgcHJvcHMudGFnIHx8IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLnR5cGUgPT09ICdibG9jay1zZXEnKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHByb3BzLmVuZCwgJ0JBRF9JTkRFTlQnLCAnQWxsIHNlcXVlbmNlIGl0ZW1zIG11c3Qgc3RhcnQgYXQgdGhlIHNhbWUgY29sdW1uJyk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ01JU1NJTkdfQ0hBUicsICdTZXF1ZW5jZSBpdGVtIHdpdGhvdXQgLSBpbmRpY2F0b3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRFbmQgPSBwcm9wcy5lbmQ7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIHNlcS5jb21tZW50ID0gcHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub2RlID0gdmFsdWVcbiAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBwcm9wcy5lbmQsIHN0YXJ0LCBudWxsLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgIGlmIChjdHguc2NoZW1hLmNvbXBhdClcbiAgICAgICAgICAgIGZsb3dJbmRlbnRDaGVjayhicy5pbmRlbnQsIHZhbHVlLCBvbkVycm9yKTtcbiAgICAgICAgb2Zmc2V0ID0gbm9kZS5yYW5nZVsyXTtcbiAgICAgICAgc2VxLml0ZW1zLnB1c2gobm9kZSk7XG4gICAgfVxuICAgIHNlcS5yYW5nZSA9IFticy5vZmZzZXQsIG9mZnNldCwgY29tbWVudEVuZCA/PyBvZmZzZXRdO1xuICAgIHJldHVybiBzZXE7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVCbG9ja1NlcSB9O1xuIiwiZnVuY3Rpb24gcmVzb2x2ZUVuZChlbmQsIG9mZnNldCwgcmVxU3BhY2UsIG9uRXJyb3IpIHtcbiAgICBsZXQgY29tbWVudCA9ICcnO1xuICAgIGlmIChlbmQpIHtcbiAgICAgICAgbGV0IGhhc1NwYWNlID0gZmFsc2U7XG4gICAgICAgIGxldCBzZXAgPSAnJztcbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc291cmNlLCB0eXBlIH0gPSB0b2tlbjtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgaGFzU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50Jzoge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxU3BhY2UgJiYgIWhhc1NwYWNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ01JU1NJTkdfQ0hBUicsICdDb21tZW50cyBtdXN0IGJlIHNlcGFyYXRlZCBmcm9tIG90aGVyIHRva2VucyBieSB3aGl0ZSBzcGFjZSBjaGFyYWN0ZXJzJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNiID0gc291cmNlLnN1YnN0cmluZygxKSB8fCAnICc7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBjYjtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudCArPSBzZXAgKyBjYjtcbiAgICAgICAgICAgICAgICAgICAgc2VwID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXAgKz0gc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgJHt0eXBlfSBhdCBub2RlIGVuZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0ICs9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgY29tbWVudCwgb2Zmc2V0IH07XG59XG5cbmV4cG9ydCB7IHJlc29sdmVFbmQgfTtcbiIsImltcG9ydCB7IGlzUGFpciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFBhaXIgfSBmcm9tICcuLi9ub2Rlcy9QYWlyLmpzJztcbmltcG9ydCB7IFlBTUxNYXAgfSBmcm9tICcuLi9ub2Rlcy9ZQU1MTWFwLmpzJztcbmltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi9ub2Rlcy9ZQU1MU2VxLmpzJztcbmltcG9ydCB7IHJlc29sdmVFbmQgfSBmcm9tICcuL3Jlc29sdmUtZW5kLmpzJztcbmltcG9ydCB7IHJlc29sdmVQcm9wcyB9IGZyb20gJy4vcmVzb2x2ZS1wcm9wcy5qcyc7XG5pbXBvcnQgeyBjb250YWluc05ld2xpbmUgfSBmcm9tICcuL3V0aWwtY29udGFpbnMtbmV3bGluZS5qcyc7XG5pbXBvcnQgeyBtYXBJbmNsdWRlcyB9IGZyb20gJy4vdXRpbC1tYXAtaW5jbHVkZXMuanMnO1xuXG5jb25zdCBibG9ja01zZyA9ICdCbG9jayBjb2xsZWN0aW9ucyBhcmUgbm90IGFsbG93ZWQgd2l0aGluIGZsb3cgY29sbGVjdGlvbnMnO1xuY29uc3QgaXNCbG9jayA9ICh0b2tlbikgPT4gdG9rZW4gJiYgKHRva2VuLnR5cGUgPT09ICdibG9jay1tYXAnIHx8IHRva2VuLnR5cGUgPT09ICdibG9jay1zZXEnKTtcbmZ1bmN0aW9uIHJlc29sdmVGbG93Q29sbGVjdGlvbih7IGNvbXBvc2VOb2RlLCBjb21wb3NlRW1wdHlOb2RlIH0sIGN0eCwgZmMsIG9uRXJyb3IsIHRhZykge1xuICAgIGNvbnN0IGlzTWFwID0gZmMuc3RhcnQuc291cmNlID09PSAneyc7XG4gICAgY29uc3QgZmNOYW1lID0gaXNNYXAgPyAnZmxvdyBtYXAnIDogJ2Zsb3cgc2VxdWVuY2UnO1xuICAgIGNvbnN0IE5vZGVDbGFzcyA9ICh0YWc/Lm5vZGVDbGFzcyA/PyAoaXNNYXAgPyBZQU1MTWFwIDogWUFNTFNlcSkpO1xuICAgIGNvbnN0IGNvbGwgPSBuZXcgTm9kZUNsYXNzKGN0eC5zY2hlbWEpO1xuICAgIGNvbGwuZmxvdyA9IHRydWU7XG4gICAgY29uc3QgYXRSb290ID0gY3R4LmF0Um9vdDtcbiAgICBpZiAoYXRSb290KVxuICAgICAgICBjdHguYXRSb290ID0gZmFsc2U7XG4gICAgaWYgKGN0eC5hdEtleSlcbiAgICAgICAgY3R4LmF0S2V5ID0gZmFsc2U7XG4gICAgbGV0IG9mZnNldCA9IGZjLm9mZnNldCArIGZjLnN0YXJ0LnNvdXJjZS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmYy5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBjb2xsSXRlbSA9IGZjLml0ZW1zW2ldO1xuICAgICAgICBjb25zdCB7IHN0YXJ0LCBrZXksIHNlcCwgdmFsdWUgfSA9IGNvbGxJdGVtO1xuICAgICAgICBjb25zdCBwcm9wcyA9IHJlc29sdmVQcm9wcyhzdGFydCwge1xuICAgICAgICAgICAgZmxvdzogZmNOYW1lLFxuICAgICAgICAgICAgaW5kaWNhdG9yOiAnZXhwbGljaXQta2V5LWluZCcsXG4gICAgICAgICAgICBuZXh0OiBrZXkgPz8gc2VwPy5bMF0sXG4gICAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAgICAgcGFyZW50SW5kZW50OiBmYy5pbmRlbnQsXG4gICAgICAgICAgICBzdGFydE9uTmV3bGluZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgIGlmICghcHJvcHMuYW5jaG9yICYmICFwcm9wcy50YWcgJiYgIXNlcCAmJiAhdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCAmJiBwcm9wcy5jb21tYSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihwcm9wcy5jb21tYSwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBlY3RlZCAsIGluICR7ZmNOYW1lfWApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPCBmYy5pdGVtcy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHByb3BzLnN0YXJ0LCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkIGVtcHR5IGl0ZW0gaW4gJHtmY05hbWV9YCk7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGwuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGwuY29tbWVudCArPSAnXFxuJyArIHByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGwuY29tbWVudCA9IHByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHByb3BzLmVuZDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNNYXAgJiYgY3R4Lm9wdGlvbnMuc3RyaWN0ICYmIGNvbnRhaW5zTmV3bGluZShrZXkpKVxuICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5LCAvLyBjaGVja2VkIGJ5IGNvbnRhaW5zTmV3bGluZSgpXG4gICAgICAgICAgICAgICAgJ01VTFRJTElORV9JTVBMSUNJVF9LRVknLCAnSW1wbGljaXQga2V5cyBvZiBmbG93IHNlcXVlbmNlIHBhaXJzIG5lZWQgdG8gYmUgb24gYSBzaW5nbGUgbGluZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBpZiAocHJvcHMuY29tbWEpXG4gICAgICAgICAgICAgICAgb25FcnJvcihwcm9wcy5jb21tYSwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBlY3RlZCAsIGluICR7ZmNOYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFwcm9wcy5jb21tYSlcbiAgICAgICAgICAgICAgICBvbkVycm9yKHByb3BzLnN0YXJ0LCAnTUlTU0lOR19DSEFSJywgYE1pc3NpbmcgLCBiZXR3ZWVuICR7ZmNOYW1lfSBpdGVtc2ApO1xuICAgICAgICAgICAgaWYgKHByb3BzLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJldkl0ZW1Db21tZW50ID0gJyc7XG4gICAgICAgICAgICAgICAgbG9vcDogZm9yIChjb25zdCBzdCBvZiBzdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1hJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZJdGVtQ29tbWVudCA9IHN0LnNvdXJjZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJldkl0ZW1Db21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gY29sbC5pdGVtc1tjb2xsLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNQYWlyKHByZXYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IHByZXYudmFsdWUgPz8gcHJldi5rZXk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2LmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2LmNvbW1lbnQgKz0gJ1xcbicgKyBwcmV2SXRlbUNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYuY29tbWVudCA9IHByZXZJdGVtQ29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuY29tbWVudCA9IHByb3BzLmNvbW1lbnQuc3Vic3RyaW5nKHByZXZJdGVtQ29tbWVudC5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc01hcCAmJiAhc2VwICYmICFwcm9wcy5mb3VuZCkge1xuICAgICAgICAgICAgLy8gaXRlbSBpcyBhIHZhbHVlIGluIGEgc2VxXG4gICAgICAgICAgICAvLyDihpIga2V5ICYgc2VwIGFyZSBlbXB0eSwgc3RhcnQgZG9lcyBub3QgaW5jbHVkZSA/IG9yIDpcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlTm9kZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIHZhbHVlLCBwcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBwcm9wcy5lbmQsIHNlcCwgbnVsbCwgcHJvcHMsIG9uRXJyb3IpO1xuICAgICAgICAgICAgY29sbC5pdGVtcy5wdXNoKHZhbHVlTm9kZSk7XG4gICAgICAgICAgICBvZmZzZXQgPSB2YWx1ZU5vZGUucmFuZ2VbMl07XG4gICAgICAgICAgICBpZiAoaXNCbG9jayh2YWx1ZSkpXG4gICAgICAgICAgICAgICAgb25FcnJvcih2YWx1ZU5vZGUucmFuZ2UsICdCTE9DS19JTl9GTE9XJywgYmxvY2tNc2cpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaXRlbSBpcyBhIGtleSt2YWx1ZSBwYWlyXG4gICAgICAgICAgICAvLyBrZXkgdmFsdWVcbiAgICAgICAgICAgIGN0eC5hdEtleSA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBrZXlTdGFydCA9IHByb3BzLmVuZDtcbiAgICAgICAgICAgIGNvbnN0IGtleU5vZGUgPSBrZXlcbiAgICAgICAgICAgICAgICA/IGNvbXBvc2VOb2RlKGN0eCwga2V5LCBwcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBrZXlTdGFydCwgc3RhcnQsIG51bGwsIHByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGlmIChpc0Jsb2NrKGtleSkpXG4gICAgICAgICAgICAgICAgb25FcnJvcihrZXlOb2RlLnJhbmdlLCAnQkxPQ0tfSU5fRkxPVycsIGJsb2NrTXNnKTtcbiAgICAgICAgICAgIGN0eC5hdEtleSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gdmFsdWUgcHJvcGVydGllc1xuICAgICAgICAgICAgY29uc3QgdmFsdWVQcm9wcyA9IHJlc29sdmVQcm9wcyhzZXAgPz8gW10sIHtcbiAgICAgICAgICAgICAgICBmbG93OiBmY05hbWUsXG4gICAgICAgICAgICAgICAgaW5kaWNhdG9yOiAnbWFwLXZhbHVlLWluZCcsXG4gICAgICAgICAgICAgICAgbmV4dDogdmFsdWUsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBrZXlOb2RlLnJhbmdlWzJdLFxuICAgICAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICAgICAgcGFyZW50SW5kZW50OiBmYy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh2YWx1ZVByb3BzLmZvdW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc01hcCAmJiAhcHJvcHMuZm91bmQgJiYgY3R4Lm9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIHNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdCA9PT0gdmFsdWVQcm9wcy5mb3VuZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0LnR5cGUgPT09ICduZXdsaW5lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHN0LCAnTVVMVElMSU5FX0lNUExJQ0lUX0tFWScsICdJbXBsaWNpdCBrZXlzIG9mIGZsb3cgc2VxdWVuY2UgcGFpcnMgbmVlZCB0byBiZSBvbiBhIHNpbmdsZSBsaW5lJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLnN0YXJ0IDwgdmFsdWVQcm9wcy5mb3VuZC5vZmZzZXQgLSAxMDI0KVxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcih2YWx1ZVByb3BzLmZvdW5kLCAnS0VZX09WRVJfMTAyNF9DSEFSUycsICdUaGUgOiBpbmRpY2F0b3IgbXVzdCBiZSBhdCBtb3N0IDEwMjQgY2hhcnMgYWZ0ZXIgdGhlIHN0YXJ0IG9mIGFuIGltcGxpY2l0IGZsb3cgc2VxdWVuY2Uga2V5Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoJ3NvdXJjZScgaW4gdmFsdWUgJiYgdmFsdWUuc291cmNlICYmIHZhbHVlLnNvdXJjZVswXSA9PT0gJzonKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHZhbHVlLCAnTUlTU0lOR19DSEFSJywgYE1pc3Npbmcgc3BhY2UgYWZ0ZXIgOiBpbiAke2ZjTmFtZX1gKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodmFsdWVQcm9wcy5zdGFydCwgJ01JU1NJTkdfQ0hBUicsIGBNaXNzaW5nICwgb3IgOiBiZXR3ZWVuICR7ZmNOYW1lfSBpdGVtc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmFsdWUgdmFsdWVcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlTm9kZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIHZhbHVlLCB2YWx1ZVByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgICAgIDogdmFsdWVQcm9wcy5mb3VuZFxuICAgICAgICAgICAgICAgICAgICA/IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCB2YWx1ZVByb3BzLmVuZCwgc2VwLCBudWxsLCB2YWx1ZVByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICBpZiAodmFsdWVOb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQmxvY2sodmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHZhbHVlTm9kZS5yYW5nZSwgJ0JMT0NLX0lOX0ZMT1cnLCBibG9ja01zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZVByb3BzLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5Tm9kZS5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBrZXlOb2RlLmNvbW1lbnQgKz0gJ1xcbicgKyB2YWx1ZVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBrZXlOb2RlLmNvbW1lbnQgPSB2YWx1ZVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYWlyID0gbmV3IFBhaXIoa2V5Tm9kZSwgdmFsdWVOb2RlKTtcbiAgICAgICAgICAgIGlmIChjdHgub3B0aW9ucy5rZWVwU291cmNlVG9rZW5zKVxuICAgICAgICAgICAgICAgIHBhaXIuc3JjVG9rZW4gPSBjb2xsSXRlbTtcbiAgICAgICAgICAgIGlmIChpc01hcCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcCA9IGNvbGw7XG4gICAgICAgICAgICAgICAgaWYgKG1hcEluY2x1ZGVzKGN0eCwgbWFwLml0ZW1zLCBrZXlOb2RlKSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihrZXlTdGFydCwgJ0RVUExJQ0FURV9LRVknLCAnTWFwIGtleXMgbXVzdCBiZSB1bmlxdWUnKTtcbiAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaChwYWlyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcCA9IG5ldyBZQU1MTWFwKGN0eC5zY2hlbWEpO1xuICAgICAgICAgICAgICAgIG1hcC5mbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaChwYWlyKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmRSYW5nZSA9ICh2YWx1ZU5vZGUgPz8ga2V5Tm9kZSkucmFuZ2U7XG4gICAgICAgICAgICAgICAgbWFwLnJhbmdlID0gW2tleU5vZGUucmFuZ2VbMF0sIGVuZFJhbmdlWzFdLCBlbmRSYW5nZVsyXV07XG4gICAgICAgICAgICAgICAgY29sbC5pdGVtcy5wdXNoKG1hcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvZmZzZXQgPSB2YWx1ZU5vZGUgPyB2YWx1ZU5vZGUucmFuZ2VbMl0gOiB2YWx1ZVByb3BzLmVuZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBleHBlY3RlZEVuZCA9IGlzTWFwID8gJ30nIDogJ10nO1xuICAgIGNvbnN0IFtjZSwgLi4uZWVdID0gZmMuZW5kO1xuICAgIGxldCBjZVBvcyA9IG9mZnNldDtcbiAgICBpZiAoY2UgJiYgY2Uuc291cmNlID09PSBleHBlY3RlZEVuZClcbiAgICAgICAgY2VQb3MgPSBjZS5vZmZzZXQgKyBjZS5zb3VyY2UubGVuZ3RoO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBuYW1lID0gZmNOYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBmY05hbWUuc3Vic3RyaW5nKDEpO1xuICAgICAgICBjb25zdCBtc2cgPSBhdFJvb3RcbiAgICAgICAgICAgID8gYCR7bmFtZX0gbXVzdCBlbmQgd2l0aCBhICR7ZXhwZWN0ZWRFbmR9YFxuICAgICAgICAgICAgOiBgJHtuYW1lfSBpbiBibG9jayBjb2xsZWN0aW9uIG11c3QgYmUgc3VmZmljaWVudGx5IGluZGVudGVkIGFuZCBlbmQgd2l0aCBhICR7ZXhwZWN0ZWRFbmR9YDtcbiAgICAgICAgb25FcnJvcihvZmZzZXQsIGF0Um9vdCA/ICdNSVNTSU5HX0NIQVInIDogJ0JBRF9JTkRFTlQnLCBtc2cpO1xuICAgICAgICBpZiAoY2UgJiYgY2Uuc291cmNlLmxlbmd0aCAhPT0gMSlcbiAgICAgICAgICAgIGVlLnVuc2hpZnQoY2UpO1xuICAgIH1cbiAgICBpZiAoZWUubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBlbmQgPSByZXNvbHZlRW5kKGVlLCBjZVBvcywgY3R4Lm9wdGlvbnMuc3RyaWN0LCBvbkVycm9yKTtcbiAgICAgICAgaWYgKGVuZC5jb21tZW50KSB7XG4gICAgICAgICAgICBpZiAoY29sbC5jb21tZW50KVxuICAgICAgICAgICAgICAgIGNvbGwuY29tbWVudCArPSAnXFxuJyArIGVuZC5jb21tZW50O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNvbGwuY29tbWVudCA9IGVuZC5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbGwucmFuZ2UgPSBbZmMub2Zmc2V0LCBjZVBvcywgZW5kLm9mZnNldF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb2xsLnJhbmdlID0gW2ZjLm9mZnNldCwgY2VQb3MsIGNlUG9zXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGw7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVGbG93Q29sbGVjdGlvbiB9O1xuIiwiaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IFlBTUxNYXAgfSBmcm9tICcuLi9ub2Rlcy9ZQU1MTWFwLmpzJztcbmltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi9ub2Rlcy9ZQU1MU2VxLmpzJztcbmltcG9ydCB7IHJlc29sdmVCbG9ja01hcCB9IGZyb20gJy4vcmVzb2x2ZS1ibG9jay1tYXAuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUJsb2NrU2VxIH0gZnJvbSAnLi9yZXNvbHZlLWJsb2NrLXNlcS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRmxvd0NvbGxlY3Rpb24gfSBmcm9tICcuL3Jlc29sdmUtZmxvdy1jb2xsZWN0aW9uLmpzJztcblxuZnVuY3Rpb24gcmVzb2x2ZUNvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZ05hbWUsIHRhZykge1xuICAgIGNvbnN0IGNvbGwgPSB0b2tlbi50eXBlID09PSAnYmxvY2stbWFwJ1xuICAgICAgICA/IHJlc29sdmVCbG9ja01hcChDTiwgY3R4LCB0b2tlbiwgb25FcnJvciwgdGFnKVxuICAgICAgICA6IHRva2VuLnR5cGUgPT09ICdibG9jay1zZXEnXG4gICAgICAgICAgICA/IHJlc29sdmVCbG9ja1NlcShDTiwgY3R4LCB0b2tlbiwgb25FcnJvciwgdGFnKVxuICAgICAgICAgICAgOiByZXNvbHZlRmxvd0NvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZyk7XG4gICAgY29uc3QgQ29sbCA9IGNvbGwuY29uc3RydWN0b3I7XG4gICAgLy8gSWYgd2UgZ290IGEgdGFnTmFtZSBtYXRjaGluZyB0aGUgY2xhc3MsIG9yIHRoZSB0YWcgbmFtZSBpcyAnIScsXG4gICAgLy8gdGhlbiB1c2UgdGhlIHRhZ05hbWUgZnJvbSB0aGUgbm9kZSBjbGFzcyB1c2VkIHRvIGNyZWF0ZSBpdC5cbiAgICBpZiAodGFnTmFtZSA9PT0gJyEnIHx8IHRhZ05hbWUgPT09IENvbGwudGFnTmFtZSkge1xuICAgICAgICBjb2xsLnRhZyA9IENvbGwudGFnTmFtZTtcbiAgICAgICAgcmV0dXJuIGNvbGw7XG4gICAgfVxuICAgIGlmICh0YWdOYW1lKVxuICAgICAgICBjb2xsLnRhZyA9IHRhZ05hbWU7XG4gICAgcmV0dXJuIGNvbGw7XG59XG5mdW5jdGlvbiBjb21wb3NlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgcHJvcHMsIG9uRXJyb3IpIHtcbiAgICBjb25zdCB0YWdUb2tlbiA9IHByb3BzLnRhZztcbiAgICBjb25zdCB0YWdOYW1lID0gIXRhZ1Rva2VuXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IGN0eC5kaXJlY3RpdmVzLnRhZ05hbWUodGFnVG9rZW4uc291cmNlLCBtc2cgPT4gb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZykpO1xuICAgIGlmICh0b2tlbi50eXBlID09PSAnYmxvY2stc2VxJykge1xuICAgICAgICBjb25zdCB7IGFuY2hvciwgbmV3bGluZUFmdGVyUHJvcDogbmwgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCBsYXN0UHJvcCA9IGFuY2hvciAmJiB0YWdUb2tlblxuICAgICAgICAgICAgPyBhbmNob3Iub2Zmc2V0ID4gdGFnVG9rZW4ub2Zmc2V0XG4gICAgICAgICAgICAgICAgPyBhbmNob3JcbiAgICAgICAgICAgICAgICA6IHRhZ1Rva2VuXG4gICAgICAgICAgICA6IChhbmNob3IgPz8gdGFnVG9rZW4pO1xuICAgICAgICBpZiAobGFzdFByb3AgJiYgKCFubCB8fCBubC5vZmZzZXQgPCBsYXN0UHJvcC5vZmZzZXQpKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ01pc3NpbmcgbmV3bGluZSBhZnRlciBibG9jayBzZXF1ZW5jZSBwcm9wcyc7XG4gICAgICAgICAgICBvbkVycm9yKGxhc3RQcm9wLCAnTUlTU0lOR19DSEFSJywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXhwVHlwZSA9IHRva2VuLnR5cGUgPT09ICdibG9jay1tYXAnXG4gICAgICAgID8gJ21hcCdcbiAgICAgICAgOiB0b2tlbi50eXBlID09PSAnYmxvY2stc2VxJ1xuICAgICAgICAgICAgPyAnc2VxJ1xuICAgICAgICAgICAgOiB0b2tlbi5zdGFydC5zb3VyY2UgPT09ICd7J1xuICAgICAgICAgICAgICAgID8gJ21hcCdcbiAgICAgICAgICAgICAgICA6ICdzZXEnO1xuICAgIC8vIHNob3J0Y3V0OiBjaGVjayBpZiBpdCdzIGEgZ2VuZXJpYyBZQU1MTWFwIG9yIFlBTUxTZXFcbiAgICAvLyBiZWZvcmUganVtcGluZyBpbnRvIHRoZSBjdXN0b20gdGFnIGxvZ2ljLlxuICAgIGlmICghdGFnVG9rZW4gfHxcbiAgICAgICAgIXRhZ05hbWUgfHxcbiAgICAgICAgdGFnTmFtZSA9PT0gJyEnIHx8XG4gICAgICAgICh0YWdOYW1lID09PSBZQU1MTWFwLnRhZ05hbWUgJiYgZXhwVHlwZSA9PT0gJ21hcCcpIHx8XG4gICAgICAgICh0YWdOYW1lID09PSBZQU1MU2VxLnRhZ05hbWUgJiYgZXhwVHlwZSA9PT0gJ3NlcScpKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgb25FcnJvciwgdGFnTmFtZSk7XG4gICAgfVxuICAgIGxldCB0YWcgPSBjdHguc2NoZW1hLnRhZ3MuZmluZCh0ID0+IHQudGFnID09PSB0YWdOYW1lICYmIHQuY29sbGVjdGlvbiA9PT0gZXhwVHlwZSk7XG4gICAgaWYgKCF0YWcpIHtcbiAgICAgICAgY29uc3Qga3QgPSBjdHguc2NoZW1hLmtub3duVGFnc1t0YWdOYW1lXTtcbiAgICAgICAgaWYgKGt0ICYmIGt0LmNvbGxlY3Rpb24gPT09IGV4cFR5cGUpIHtcbiAgICAgICAgICAgIGN0eC5zY2hlbWEudGFncy5wdXNoKE9iamVjdC5hc3NpZ24oe30sIGt0LCB7IGRlZmF1bHQ6IGZhbHNlIH0pKTtcbiAgICAgICAgICAgIHRhZyA9IGt0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGt0Py5jb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcih0YWdUb2tlbiwgJ0JBRF9DT0xMRUNUSU9OX1RZUEUnLCBgJHtrdC50YWd9IHVzZWQgZm9yICR7ZXhwVHlwZX0gY29sbGVjdGlvbiwgYnV0IGV4cGVjdHMgJHtrdC5jb2xsZWN0aW9ufWAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIGBVbnJlc29sdmVkIHRhZzogJHt0YWdOYW1lfWAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWdOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjb2xsID0gcmVzb2x2ZUNvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZ05hbWUsIHRhZyk7XG4gICAgY29uc3QgcmVzID0gdGFnLnJlc29sdmU/Lihjb2xsLCBtc2cgPT4gb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZyksIGN0eC5vcHRpb25zKSA/PyBjb2xsO1xuICAgIGNvbnN0IG5vZGUgPSBpc05vZGUocmVzKVxuICAgICAgICA/IHJlc1xuICAgICAgICA6IG5ldyBTY2FsYXIocmVzKTtcbiAgICBub2RlLnJhbmdlID0gY29sbC5yYW5nZTtcbiAgICBub2RlLnRhZyA9IHRhZ05hbWU7XG4gICAgaWYgKHRhZz8uZm9ybWF0KVxuICAgICAgICBub2RlLmZvcm1hdCA9IHRhZy5mb3JtYXQ7XG4gICAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydCB7IGNvbXBvc2VDb2xsZWN0aW9uIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlQmxvY2tTY2FsYXIoY3R4LCBzY2FsYXIsIG9uRXJyb3IpIHtcbiAgICBjb25zdCBzdGFydCA9IHNjYWxhci5vZmZzZXQ7XG4gICAgY29uc3QgaGVhZGVyID0gcGFyc2VCbG9ja1NjYWxhckhlYWRlcihzY2FsYXIsIGN0eC5vcHRpb25zLnN0cmljdCwgb25FcnJvcik7XG4gICAgaWYgKCFoZWFkZXIpXG4gICAgICAgIHJldHVybiB7IHZhbHVlOiAnJywgdHlwZTogbnVsbCwgY29tbWVudDogJycsIHJhbmdlOiBbc3RhcnQsIHN0YXJ0LCBzdGFydF0gfTtcbiAgICBjb25zdCB0eXBlID0gaGVhZGVyLm1vZGUgPT09ICc+JyA/IFNjYWxhci5CTE9DS19GT0xERUQgOiBTY2FsYXIuQkxPQ0tfTElURVJBTDtcbiAgICBjb25zdCBsaW5lcyA9IHNjYWxhci5zb3VyY2UgPyBzcGxpdExpbmVzKHNjYWxhci5zb3VyY2UpIDogW107XG4gICAgLy8gZGV0ZXJtaW5lIHRoZSBlbmQgb2YgY29udGVudCAmIHN0YXJ0IG9mIGNob21waW5nXG4gICAgbGV0IGNob21wU3RhcnQgPSBsaW5lcy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IGxpbmVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBsaW5lc1tpXVsxXTtcbiAgICAgICAgaWYgKGNvbnRlbnQgPT09ICcnIHx8IGNvbnRlbnQgPT09ICdcXHInKVxuICAgICAgICAgICAgY2hvbXBTdGFydCA9IGk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBzaG9ydGN1dCBmb3IgZW1wdHkgY29udGVudHNcbiAgICBpZiAoY2hvbXBTdGFydCA9PT0gMCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGhlYWRlci5jaG9tcCA9PT0gJysnICYmIGxpbmVzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gJ1xcbicucmVwZWF0KE1hdGgubWF4KDEsIGxpbmVzLmxlbmd0aCAtIDEpKVxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgbGV0IGVuZCA9IHN0YXJ0ICsgaGVhZGVyLmxlbmd0aDtcbiAgICAgICAgaWYgKHNjYWxhci5zb3VyY2UpXG4gICAgICAgICAgICBlbmQgKz0gc2NhbGFyLnNvdXJjZS5sZW5ndGg7XG4gICAgICAgIHJldHVybiB7IHZhbHVlLCB0eXBlLCBjb21tZW50OiBoZWFkZXIuY29tbWVudCwgcmFuZ2U6IFtzdGFydCwgZW5kLCBlbmRdIH07XG4gICAgfVxuICAgIC8vIGZpbmQgdGhlIGluZGVudGF0aW9uIGxldmVsIHRvIHRyaW0gZnJvbSBzdGFydFxuICAgIGxldCB0cmltSW5kZW50ID0gc2NhbGFyLmluZGVudCArIGhlYWRlci5pbmRlbnQ7XG4gICAgbGV0IG9mZnNldCA9IHNjYWxhci5vZmZzZXQgKyBoZWFkZXIubGVuZ3RoO1xuICAgIGxldCBjb250ZW50U3RhcnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hvbXBTdGFydDsgKytpKSB7XG4gICAgICAgIGNvbnN0IFtpbmRlbnQsIGNvbnRlbnRdID0gbGluZXNbaV07XG4gICAgICAgIGlmIChjb250ZW50ID09PSAnJyB8fCBjb250ZW50ID09PSAnXFxyJykge1xuICAgICAgICAgICAgaWYgKGhlYWRlci5pbmRlbnQgPT09IDAgJiYgaW5kZW50Lmxlbmd0aCA+IHRyaW1JbmRlbnQpXG4gICAgICAgICAgICAgICAgdHJpbUluZGVudCA9IGluZGVudC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaW5kZW50Lmxlbmd0aCA8IHRyaW1JbmRlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ0Jsb2NrIHNjYWxhcnMgd2l0aCBtb3JlLWluZGVudGVkIGxlYWRpbmcgZW1wdHkgbGluZXMgbXVzdCB1c2UgYW4gZXhwbGljaXQgaW5kZW50YXRpb24gaW5kaWNhdG9yJztcbiAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCArIGluZGVudC5sZW5ndGgsICdNSVNTSU5HX0NIQVInLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoZWFkZXIuaW5kZW50ID09PSAwKVxuICAgICAgICAgICAgICAgIHRyaW1JbmRlbnQgPSBpbmRlbnQubGVuZ3RoO1xuICAgICAgICAgICAgY29udGVudFN0YXJ0ID0gaTtcbiAgICAgICAgICAgIGlmICh0cmltSW5kZW50ID09PSAwICYmICFjdHguYXRSb290KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdCbG9jayBzY2FsYXIgdmFsdWVzIGluIGNvbGxlY3Rpb25zIG11c3QgYmUgaW5kZW50ZWQnO1xuICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkFEX0lOREVOVCcsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ICs9IGluZGVudC5sZW5ndGggKyBjb250ZW50Lmxlbmd0aCArIDE7XG4gICAgfVxuICAgIC8vIGluY2x1ZGUgdHJhaWxpbmcgbW9yZS1pbmRlbnRlZCBlbXB0eSBsaW5lcyBpbiBjb250ZW50XG4gICAgZm9yIChsZXQgaSA9IGxpbmVzLmxlbmd0aCAtIDE7IGkgPj0gY2hvbXBTdGFydDsgLS1pKSB7XG4gICAgICAgIGlmIChsaW5lc1tpXVswXS5sZW5ndGggPiB0cmltSW5kZW50KVxuICAgICAgICAgICAgY2hvbXBTdGFydCA9IGkgKyAxO1xuICAgIH1cbiAgICBsZXQgdmFsdWUgPSAnJztcbiAgICBsZXQgc2VwID0gJyc7XG4gICAgbGV0IHByZXZNb3JlSW5kZW50ZWQgPSBmYWxzZTtcbiAgICAvLyBsZWFkaW5nIHdoaXRlc3BhY2UgaXMga2VwdCBpbnRhY3RcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRTdGFydDsgKytpKVxuICAgICAgICB2YWx1ZSArPSBsaW5lc1tpXVswXS5zbGljZSh0cmltSW5kZW50KSArICdcXG4nO1xuICAgIGZvciAobGV0IGkgPSBjb250ZW50U3RhcnQ7IGkgPCBjaG9tcFN0YXJ0OyArK2kpIHtcbiAgICAgICAgbGV0IFtpbmRlbnQsIGNvbnRlbnRdID0gbGluZXNbaV07XG4gICAgICAgIG9mZnNldCArPSBpbmRlbnQubGVuZ3RoICsgY29udGVudC5sZW5ndGggKyAxO1xuICAgICAgICBjb25zdCBjcmxmID0gY29udGVudFtjb250ZW50Lmxlbmd0aCAtIDFdID09PSAnXFxyJztcbiAgICAgICAgaWYgKGNybGYpXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgwLCAtMSk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiBhbHJlYWR5IGNhdWdodCBpbiBsZXhlciAqL1xuICAgICAgICBpZiAoY29udGVudCAmJiBpbmRlbnQubGVuZ3RoIDwgdHJpbUluZGVudCkge1xuICAgICAgICAgICAgY29uc3Qgc3JjID0gaGVhZGVyLmluZGVudFxuICAgICAgICAgICAgICAgID8gJ2V4cGxpY2l0IGluZGVudGF0aW9uIGluZGljYXRvcidcbiAgICAgICAgICAgICAgICA6ICdmaXJzdCBsaW5lJztcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgQmxvY2sgc2NhbGFyIGxpbmVzIG11c3Qgbm90IGJlIGxlc3MgaW5kZW50ZWQgdGhhbiB0aGVpciAke3NyY31gO1xuICAgICAgICAgICAgb25FcnJvcihvZmZzZXQgLSBjb250ZW50Lmxlbmd0aCAtIChjcmxmID8gMiA6IDEpLCAnQkFEX0lOREVOVCcsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgaW5kZW50ID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09IFNjYWxhci5CTE9DS19MSVRFUkFMKSB7XG4gICAgICAgICAgICB2YWx1ZSArPSBzZXAgKyBpbmRlbnQuc2xpY2UodHJpbUluZGVudCkgKyBjb250ZW50O1xuICAgICAgICAgICAgc2VwID0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5kZW50Lmxlbmd0aCA+IHRyaW1JbmRlbnQgfHwgY29udGVudFswXSA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgIC8vIG1vcmUtaW5kZW50ZWQgY29udGVudCB3aXRoaW4gYSBmb2xkZWQgYmxvY2tcbiAgICAgICAgICAgIGlmIChzZXAgPT09ICcgJylcbiAgICAgICAgICAgICAgICBzZXAgPSAnXFxuJztcbiAgICAgICAgICAgIGVsc2UgaWYgKCFwcmV2TW9yZUluZGVudGVkICYmIHNlcCA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgc2VwID0gJ1xcblxcbic7XG4gICAgICAgICAgICB2YWx1ZSArPSBzZXAgKyBpbmRlbnQuc2xpY2UodHJpbUluZGVudCkgKyBjb250ZW50O1xuICAgICAgICAgICAgc2VwID0gJ1xcbic7XG4gICAgICAgICAgICBwcmV2TW9yZUluZGVudGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb250ZW50ID09PSAnJykge1xuICAgICAgICAgICAgLy8gZW1wdHkgbGluZVxuICAgICAgICAgICAgaWYgKHNlcCA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gJ1xcbic7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2VwID0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSArPSBzZXAgKyBjb250ZW50O1xuICAgICAgICAgICAgc2VwID0gJyAnO1xuICAgICAgICAgICAgcHJldk1vcmVJbmRlbnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN3aXRjaCAoaGVhZGVyLmNob21wKSB7XG4gICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJysnOlxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGNob21wU3RhcnQ7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSAnXFxuJyArIGxpbmVzW2ldWzBdLnNsaWNlKHRyaW1JbmRlbnQpO1xuICAgICAgICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdICE9PSAnXFxuJylcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSAnXFxuJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdmFsdWUgKz0gJ1xcbic7XG4gICAgfVxuICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgaGVhZGVyLmxlbmd0aCArIHNjYWxhci5zb3VyY2UubGVuZ3RoO1xuICAgIHJldHVybiB7IHZhbHVlLCB0eXBlLCBjb21tZW50OiBoZWFkZXIuY29tbWVudCwgcmFuZ2U6IFtzdGFydCwgZW5kLCBlbmRdIH07XG59XG5mdW5jdGlvbiBwYXJzZUJsb2NrU2NhbGFySGVhZGVyKHsgb2Zmc2V0LCBwcm9wcyB9LCBzdHJpY3QsIG9uRXJyb3IpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICBpZiAocHJvcHNbMF0udHlwZSAhPT0gJ2Jsb2NrLXNjYWxhci1oZWFkZXInKSB7XG4gICAgICAgIG9uRXJyb3IocHJvcHNbMF0sICdJTVBPU1NJQkxFJywgJ0Jsb2NrIHNjYWxhciBoZWFkZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB7IHNvdXJjZSB9ID0gcHJvcHNbMF07XG4gICAgY29uc3QgbW9kZSA9IHNvdXJjZVswXTtcbiAgICBsZXQgaW5kZW50ID0gMDtcbiAgICBsZXQgY2hvbXAgPSAnJztcbiAgICBsZXQgZXJyb3IgPSAtMTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBjaCA9IHNvdXJjZVtpXTtcbiAgICAgICAgaWYgKCFjaG9tcCAmJiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnKSlcbiAgICAgICAgICAgIGNob21wID0gY2g7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbiA9IE51bWJlcihjaCk7XG4gICAgICAgICAgICBpZiAoIWluZGVudCAmJiBuKVxuICAgICAgICAgICAgICAgIGluZGVudCA9IG47XG4gICAgICAgICAgICBlbHNlIGlmIChlcnJvciA9PT0gLTEpXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBvZmZzZXQgKyBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChlcnJvciAhPT0gLTEpXG4gICAgICAgIG9uRXJyb3IoZXJyb3IsICdVTkVYUEVDVEVEX1RPS0VOJywgYEJsb2NrIHNjYWxhciBoZWFkZXIgaW5jbHVkZXMgZXh0cmEgY2hhcmFjdGVyczogJHtzb3VyY2V9YCk7XG4gICAgbGV0IGhhc1NwYWNlID0gZmFsc2U7XG4gICAgbGV0IGNvbW1lbnQgPSAnJztcbiAgICBsZXQgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHByb3BzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gcHJvcHNbaV07XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBsZW5ndGggKz0gdG9rZW4uc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIWhhc1NwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnQ29tbWVudHMgbXVzdCBiZSBzZXBhcmF0ZWQgZnJvbSBvdGhlciB0b2tlbnMgYnkgd2hpdGUgc3BhY2UgY2hhcmFjdGVycyc7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdNSVNTSU5HX0NIQVInLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGVuZ3RoICs9IHRva2VuLnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgY29tbWVudCA9IHRva2VuLnNvdXJjZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nLCB0b2tlbi5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBsZW5ndGggKz0gdG9rZW4uc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBVbmV4cGVjdGVkIHRva2VuIGluIGJsb2NrIHNjYWxhciBoZWFkZXI6ICR7dG9rZW4udHlwZX1gO1xuICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHMgPSB0b2tlbi5zb3VyY2U7XG4gICAgICAgICAgICAgICAgaWYgKHRzICYmIHR5cGVvZiB0cyA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCArPSB0cy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgbW9kZSwgaW5kZW50LCBjaG9tcCwgY29tbWVudCwgbGVuZ3RoIH07XG59XG4vKiogQHJldHVybnMgQXJyYXkgb2YgbGluZXMgc3BsaXQgdXAgYXMgYFtpbmRlbnQsIGNvbnRlbnRdYCAqL1xuZnVuY3Rpb24gc3BsaXRMaW5lcyhzb3VyY2UpIHtcbiAgICBjb25zdCBzcGxpdCA9IHNvdXJjZS5zcGxpdCgvXFxuKCAqKS8pO1xuICAgIGNvbnN0IGZpcnN0ID0gc3BsaXRbMF07XG4gICAgY29uc3QgbSA9IGZpcnN0Lm1hdGNoKC9eKCAqKS8pO1xuICAgIGNvbnN0IGxpbmUwID0gbT8uWzFdXG4gICAgICAgID8gW21bMV0sIGZpcnN0LnNsaWNlKG1bMV0ubGVuZ3RoKV1cbiAgICAgICAgOiBbJycsIGZpcnN0XTtcbiAgICBjb25zdCBsaW5lcyA9IFtsaW5lMF07XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzcGxpdC5sZW5ndGg7IGkgKz0gMilcbiAgICAgICAgbGluZXMucHVzaChbc3BsaXRbaV0sIHNwbGl0W2kgKyAxXV0pO1xuICAgIHJldHVybiBsaW5lcztcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZUJsb2NrU2NhbGFyIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZCB9IGZyb20gJy4vcmVzb2x2ZS1lbmQuanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlRmxvd1NjYWxhcihzY2FsYXIsIHN0cmljdCwgb25FcnJvcikge1xuICAgIGNvbnN0IHsgb2Zmc2V0LCB0eXBlLCBzb3VyY2UsIGVuZCB9ID0gc2NhbGFyO1xuICAgIGxldCBfdHlwZTtcbiAgICBsZXQgdmFsdWU7XG4gICAgY29uc3QgX29uRXJyb3IgPSAocmVsLCBjb2RlLCBtc2cpID0+IG9uRXJyb3Iob2Zmc2V0ICsgcmVsLCBjb2RlLCBtc2cpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgX3R5cGUgPSBTY2FsYXIuUExBSU47XG4gICAgICAgICAgICB2YWx1ZSA9IHBsYWluVmFsdWUoc291cmNlLCBfb25FcnJvcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgX3R5cGUgPSBTY2FsYXIuUVVPVEVfU0lOR0xFO1xuICAgICAgICAgICAgdmFsdWUgPSBzaW5nbGVRdW90ZWRWYWx1ZShzb3VyY2UsIF9vbkVycm9yKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICBfdHlwZSA9IFNjYWxhci5RVU9URV9ET1VCTEU7XG4gICAgICAgICAgICB2YWx1ZSA9IGRvdWJsZVF1b3RlZFZhbHVlKHNvdXJjZSwgX29uRXJyb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBvbkVycm9yKHNjYWxhciwgJ1VORVhQRUNURURfVE9LRU4nLCBgRXhwZWN0ZWQgYSBmbG93IHNjYWxhciB2YWx1ZSwgYnV0IGZvdW5kOiAke3R5cGV9YCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgICAgICB0eXBlOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvbW1lbnQ6ICcnLFxuICAgICAgICAgICAgICAgIHJhbmdlOiBbb2Zmc2V0LCBvZmZzZXQgKyBzb3VyY2UubGVuZ3RoLCBvZmZzZXQgKyBzb3VyY2UubGVuZ3RoXVxuICAgICAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVFbmQgPSBvZmZzZXQgKyBzb3VyY2UubGVuZ3RoO1xuICAgIGNvbnN0IHJlID0gcmVzb2x2ZUVuZChlbmQsIHZhbHVlRW5kLCBzdHJpY3QsIG9uRXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICB0eXBlOiBfdHlwZSxcbiAgICAgICAgY29tbWVudDogcmUuY29tbWVudCxcbiAgICAgICAgcmFuZ2U6IFtvZmZzZXQsIHZhbHVlRW5kLCByZS5vZmZzZXRdXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBsYWluVmFsdWUoc291cmNlLCBvbkVycm9yKSB7XG4gICAgbGV0IGJhZENoYXIgPSAnJztcbiAgICBzd2l0Y2ggKHNvdXJjZVswXSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICBjYXNlICdcXHQnOlxuICAgICAgICAgICAgYmFkQ2hhciA9ICdhIHRhYiBjaGFyYWN0ZXInO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJywnOlxuICAgICAgICAgICAgYmFkQ2hhciA9ICdmbG93IGluZGljYXRvciBjaGFyYWN0ZXIgLCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnJSc6XG4gICAgICAgICAgICBiYWRDaGFyID0gJ2RpcmVjdGl2ZSBpbmRpY2F0b3IgY2hhcmFjdGVyICUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICBjYXNlICc+Jzoge1xuICAgICAgICAgICAgYmFkQ2hhciA9IGBibG9jayBzY2FsYXIgaW5kaWNhdG9yICR7c291cmNlWzBdfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdAJzpcbiAgICAgICAgY2FzZSAnYCc6IHtcbiAgICAgICAgICAgIGJhZENoYXIgPSBgcmVzZXJ2ZWQgY2hhcmFjdGVyICR7c291cmNlWzBdfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYmFkQ2hhcilcbiAgICAgICAgb25FcnJvcigwLCAnQkFEX1NDQUxBUl9TVEFSVCcsIGBQbGFpbiB2YWx1ZSBjYW5ub3Qgc3RhcnQgd2l0aCAke2JhZENoYXJ9YCk7XG4gICAgcmV0dXJuIGZvbGRMaW5lcyhzb3VyY2UpO1xufVxuZnVuY3Rpb24gc2luZ2xlUXVvdGVkVmFsdWUoc291cmNlLCBvbkVycm9yKSB7XG4gICAgaWYgKHNvdXJjZVtzb3VyY2UubGVuZ3RoIC0gMV0gIT09IFwiJ1wiIHx8IHNvdXJjZS5sZW5ndGggPT09IDEpXG4gICAgICAgIG9uRXJyb3Ioc291cmNlLmxlbmd0aCwgJ01JU1NJTkdfQ0hBUicsIFwiTWlzc2luZyBjbG9zaW5nICdxdW90ZVwiKTtcbiAgICByZXR1cm4gZm9sZExpbmVzKHNvdXJjZS5zbGljZSgxLCAtMSkpLnJlcGxhY2UoLycnL2csIFwiJ1wiKTtcbn1cbmZ1bmN0aW9uIGZvbGRMaW5lcyhzb3VyY2UpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbmVnYXRpdmUgbG9va2JlaGluZCBoZXJlIGFuZCBpbiB0aGUgYHJlYCBSZWdFeHAgaXMgdG9cbiAgICAgKiBwcmV2ZW50IGNhdXNpbmcgYSBwb2x5bm9taWFsIHNlYXJjaCB0aW1lIGluIGNlcnRhaW4gY2FzZXMuXG4gICAgICpcbiAgICAgKiBUaGUgdHJ5LWNhdGNoIGlzIGZvciBTYWZhcmksIHdoaWNoIGRvZXNuJ3Qgc3VwcG9ydCB0aGlzIHlldDpcbiAgICAgKiBodHRwczovL2Nhbml1c2UuY29tL2pzLXJlZ2V4cC1sb29rYmVoaW5kXG4gICAgICovXG4gICAgbGV0IGZpcnN0LCBsaW5lO1xuICAgIHRyeSB7XG4gICAgICAgIGZpcnN0ID0gbmV3IFJlZ0V4cCgnKC4qPykoPzwhWyBcXHRdKVsgXFx0XSpcXHI/XFxuJywgJ3N5Jyk7XG4gICAgICAgIGxpbmUgPSBuZXcgUmVnRXhwKCdbIFxcdF0qKC4qPykoPzooPzwhWyBcXHRdKVsgXFx0XSopP1xccj9cXG4nLCAnc3knKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICBmaXJzdCA9IC8oLio/KVsgXFx0XSpcXHI/XFxuL3N5O1xuICAgICAgICBsaW5lID0gL1sgXFx0XSooLio/KVsgXFx0XSpcXHI/XFxuL3N5O1xuICAgIH1cbiAgICBsZXQgbWF0Y2ggPSBmaXJzdC5leGVjKHNvdXJjZSk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICBsZXQgcmVzID0gbWF0Y2hbMV07XG4gICAgbGV0IHNlcCA9ICcgJztcbiAgICBsZXQgcG9zID0gZmlyc3QubGFzdEluZGV4O1xuICAgIGxpbmUubGFzdEluZGV4ID0gcG9zO1xuICAgIHdoaWxlICgobWF0Y2ggPSBsaW5lLmV4ZWMoc291cmNlKSkpIHtcbiAgICAgICAgaWYgKG1hdGNoWzFdID09PSAnJykge1xuICAgICAgICAgICAgaWYgKHNlcCA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgcmVzICs9IHNlcDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBzZXAgPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcyArPSBzZXAgKyBtYXRjaFsxXTtcbiAgICAgICAgICAgIHNlcCA9ICcgJztcbiAgICAgICAgfVxuICAgICAgICBwb3MgPSBsaW5lLmxhc3RJbmRleDtcbiAgICB9XG4gICAgY29uc3QgbGFzdCA9IC9bIFxcdF0qKC4qKS9zeTtcbiAgICBsYXN0Lmxhc3RJbmRleCA9IHBvcztcbiAgICBtYXRjaCA9IGxhc3QuZXhlYyhzb3VyY2UpO1xuICAgIHJldHVybiByZXMgKyBzZXAgKyAobWF0Y2g/LlsxXSA/PyAnJyk7XG59XG5mdW5jdGlvbiBkb3VibGVRdW90ZWRWYWx1ZShzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICBsZXQgcmVzID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzb3VyY2UubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgICAgIGNvbnN0IGNoID0gc291cmNlW2ldO1xuICAgICAgICBpZiAoY2ggPT09ICdcXHInICYmIHNvdXJjZVtpICsgMV0gPT09ICdcXG4nKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZm9sZCwgb2Zmc2V0IH0gPSBmb2xkTmV3bGluZShzb3VyY2UsIGkpO1xuICAgICAgICAgICAgcmVzICs9IGZvbGQ7XG4gICAgICAgICAgICBpID0gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gc291cmNlWysraV07XG4gICAgICAgICAgICBjb25zdCBjYyA9IGVzY2FwZUNvZGVzW25leHRdO1xuICAgICAgICAgICAgaWYgKGNjKVxuICAgICAgICAgICAgICAgIHJlcyArPSBjYztcbiAgICAgICAgICAgIGVsc2UgaWYgKG5leHQgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgLy8gc2tpcCBlc2NhcGVkIG5ld2xpbmVzLCBidXQgc3RpbGwgdHJpbSB0aGUgZm9sbG93aW5nIGxpbmVcbiAgICAgICAgICAgICAgICBuZXh0ID0gc291cmNlW2kgKyAxXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCA9PT0gJyAnIHx8IG5leHQgPT09ICdcXHQnKVxuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gc291cmNlWysraSArIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV4dCA9PT0gJ1xccicgJiYgc291cmNlW2kgKyAxXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAvLyBza2lwIGVzY2FwZWQgQ1JMRiBuZXdsaW5lcywgYnV0IHN0aWxsIHRyaW0gdGhlIGZvbGxvd2luZyBsaW5lXG4gICAgICAgICAgICAgICAgbmV4dCA9IHNvdXJjZVsrK2kgKyAxXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCA9PT0gJyAnIHx8IG5leHQgPT09ICdcXHQnKVxuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gc291cmNlWysraSArIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV4dCA9PT0gJ3gnIHx8IG5leHQgPT09ICd1JyB8fCBuZXh0ID09PSAnVScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSB7IHg6IDIsIHU6IDQsIFU6IDggfVtuZXh0XTtcbiAgICAgICAgICAgICAgICByZXMgKz0gcGFyc2VDaGFyQ29kZShzb3VyY2UsIGkgKyAxLCBsZW5ndGgsIG9uRXJyb3IpO1xuICAgICAgICAgICAgICAgIGkgKz0gbGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmF3ID0gc291cmNlLnN1YnN0cihpIC0gMSwgMik7XG4gICAgICAgICAgICAgICAgb25FcnJvcihpIC0gMSwgJ0JBRF9EUV9FU0NBUEUnLCBgSW52YWxpZCBlc2NhcGUgc2VxdWVuY2UgJHtyYXd9YCk7XG4gICAgICAgICAgICAgICAgcmVzICs9IHJhdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXFx0Jykge1xuICAgICAgICAgICAgLy8gdHJpbSB0cmFpbGluZyB3aGl0ZXNwYWNlXG4gICAgICAgICAgICBjb25zdCB3c1N0YXJ0ID0gaTtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gc291cmNlW2kgKyAxXTtcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ID09PSAnICcgfHwgbmV4dCA9PT0gJ1xcdCcpXG4gICAgICAgICAgICAgICAgbmV4dCA9IHNvdXJjZVsrK2kgKyAxXTtcbiAgICAgICAgICAgIGlmIChuZXh0ICE9PSAnXFxuJyAmJiAhKG5leHQgPT09ICdcXHInICYmIHNvdXJjZVtpICsgMl0gPT09ICdcXG4nKSlcbiAgICAgICAgICAgICAgICByZXMgKz0gaSA+IHdzU3RhcnQgPyBzb3VyY2Uuc2xpY2Uod3NTdGFydCwgaSArIDEpIDogY2g7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXMgKz0gY2g7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNvdXJjZVtzb3VyY2UubGVuZ3RoIC0gMV0gIT09ICdcIicgfHwgc291cmNlLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgb25FcnJvcihzb3VyY2UubGVuZ3RoLCAnTUlTU0lOR19DSEFSJywgJ01pc3NpbmcgY2xvc2luZyBcInF1b3RlJyk7XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qKlxuICogRm9sZCBhIHNpbmdsZSBuZXdsaW5lIGludG8gYSBzcGFjZSwgbXVsdGlwbGUgbmV3bGluZXMgdG8gTiAtIDEgbmV3bGluZXMuXG4gKiBQcmVzdW1lcyBgc291cmNlW29mZnNldF0gPT09ICdcXG4nYFxuICovXG5mdW5jdGlvbiBmb2xkTmV3bGluZShzb3VyY2UsIG9mZnNldCkge1xuICAgIGxldCBmb2xkID0gJyc7XG4gICAgbGV0IGNoID0gc291cmNlW29mZnNldCArIDFdO1xuICAgIHdoaWxlIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXFx0JyB8fCBjaCA9PT0gJ1xcbicgfHwgY2ggPT09ICdcXHInKSB7XG4gICAgICAgIGlmIChjaCA9PT0gJ1xccicgJiYgc291cmNlW29mZnNldCArIDJdICE9PSAnXFxuJylcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBpZiAoY2ggPT09ICdcXG4nKVxuICAgICAgICAgICAgZm9sZCArPSAnXFxuJztcbiAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgIGNoID0gc291cmNlW29mZnNldCArIDFdO1xuICAgIH1cbiAgICBpZiAoIWZvbGQpXG4gICAgICAgIGZvbGQgPSAnICc7XG4gICAgcmV0dXJuIHsgZm9sZCwgb2Zmc2V0IH07XG59XG5jb25zdCBlc2NhcGVDb2RlcyA9IHtcbiAgICAnMCc6ICdcXDAnLCAvLyBudWxsIGNoYXJhY3RlclxuICAgIGE6ICdcXHgwNycsIC8vIGJlbGwgY2hhcmFjdGVyXG4gICAgYjogJ1xcYicsIC8vIGJhY2tzcGFjZVxuICAgIGU6ICdcXHgxYicsIC8vIGVzY2FwZSBjaGFyYWN0ZXJcbiAgICBmOiAnXFxmJywgLy8gZm9ybSBmZWVkXG4gICAgbjogJ1xcbicsIC8vIGxpbmUgZmVlZFxuICAgIHI6ICdcXHInLCAvLyBjYXJyaWFnZSByZXR1cm5cbiAgICB0OiAnXFx0JywgLy8gaG9yaXpvbnRhbCB0YWJcbiAgICB2OiAnXFx2JywgLy8gdmVydGljYWwgdGFiXG4gICAgTjogJ1xcdTAwODUnLCAvLyBVbmljb2RlIG5leHQgbGluZVxuICAgIF86ICdcXHUwMGEwJywgLy8gVW5pY29kZSBub24tYnJlYWtpbmcgc3BhY2VcbiAgICBMOiAnXFx1MjAyOCcsIC8vIFVuaWNvZGUgbGluZSBzZXBhcmF0b3JcbiAgICBQOiAnXFx1MjAyOScsIC8vIFVuaWNvZGUgcGFyYWdyYXBoIHNlcGFyYXRvclxuICAgICcgJzogJyAnLFxuICAgICdcIic6ICdcIicsXG4gICAgJy8nOiAnLycsXG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgJ1xcdCc6ICdcXHQnXG59O1xuZnVuY3Rpb24gcGFyc2VDaGFyQ29kZShzb3VyY2UsIG9mZnNldCwgbGVuZ3RoLCBvbkVycm9yKSB7XG4gICAgY29uc3QgY2MgPSBzb3VyY2Uuc3Vic3RyKG9mZnNldCwgbGVuZ3RoKTtcbiAgICBjb25zdCBvayA9IGNjLmxlbmd0aCA9PT0gbGVuZ3RoICYmIC9eWzAtOWEtZkEtRl0rJC8udGVzdChjYyk7XG4gICAgY29uc3QgY29kZSA9IG9rID8gcGFyc2VJbnQoY2MsIDE2KSA6IE5hTjtcbiAgICBpZiAoaXNOYU4oY29kZSkpIHtcbiAgICAgICAgY29uc3QgcmF3ID0gc291cmNlLnN1YnN0cihvZmZzZXQgLSAyLCBsZW5ndGggKyAyKTtcbiAgICAgICAgb25FcnJvcihvZmZzZXQgLSAyLCAnQkFEX0RRX0VTQ0FQRScsIGBJbnZhbGlkIGVzY2FwZSBzZXF1ZW5jZSAke3Jhd31gKTtcbiAgICAgICAgcmV0dXJuIHJhdztcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGUpO1xufVxuXG5leHBvcnQgeyByZXNvbHZlRmxvd1NjYWxhciB9O1xuIiwiaW1wb3J0IHsgaXNTY2FsYXIsIFNDQUxBUiB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyByZXNvbHZlQmxvY2tTY2FsYXIgfSBmcm9tICcuL3Jlc29sdmUtYmxvY2stc2NhbGFyLmpzJztcbmltcG9ydCB7IHJlc29sdmVGbG93U2NhbGFyIH0gZnJvbSAnLi9yZXNvbHZlLWZsb3ctc2NhbGFyLmpzJztcblxuZnVuY3Rpb24gY29tcG9zZVNjYWxhcihjdHgsIHRva2VuLCB0YWdUb2tlbiwgb25FcnJvcikge1xuICAgIGNvbnN0IHsgdmFsdWUsIHR5cGUsIGNvbW1lbnQsIHJhbmdlIH0gPSB0b2tlbi50eXBlID09PSAnYmxvY2stc2NhbGFyJ1xuICAgICAgICA/IHJlc29sdmVCbG9ja1NjYWxhcihjdHgsIHRva2VuLCBvbkVycm9yKVxuICAgICAgICA6IHJlc29sdmVGbG93U2NhbGFyKHRva2VuLCBjdHgub3B0aW9ucy5zdHJpY3QsIG9uRXJyb3IpO1xuICAgIGNvbnN0IHRhZ05hbWUgPSB0YWdUb2tlblxuICAgICAgICA/IGN0eC5kaXJlY3RpdmVzLnRhZ05hbWUodGFnVG9rZW4uc291cmNlLCBtc2cgPT4gb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZykpXG4gICAgICAgIDogbnVsbDtcbiAgICBsZXQgdGFnO1xuICAgIGlmIChjdHgub3B0aW9ucy5zdHJpbmdLZXlzICYmIGN0eC5hdEtleSkge1xuICAgICAgICB0YWcgPSBjdHguc2NoZW1hW1NDQUxBUl07XG4gICAgfVxuICAgIGVsc2UgaWYgKHRhZ05hbWUpXG4gICAgICAgIHRhZyA9IGZpbmRTY2FsYXJUYWdCeU5hbWUoY3R4LnNjaGVtYSwgdmFsdWUsIHRhZ05hbWUsIHRhZ1Rva2VuLCBvbkVycm9yKTtcbiAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnc2NhbGFyJylcbiAgICAgICAgdGFnID0gZmluZFNjYWxhclRhZ0J5VGVzdChjdHgsIHZhbHVlLCB0b2tlbiwgb25FcnJvcik7XG4gICAgZWxzZVxuICAgICAgICB0YWcgPSBjdHguc2NoZW1hW1NDQUxBUl07XG4gICAgbGV0IHNjYWxhcjtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXMgPSB0YWcucmVzb2x2ZSh2YWx1ZSwgbXNnID0+IG9uRXJyb3IodGFnVG9rZW4gPz8gdG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2cpLCBjdHgub3B0aW9ucyk7XG4gICAgICAgIHNjYWxhciA9IGlzU2NhbGFyKHJlcykgPyByZXMgOiBuZXcgU2NhbGFyKHJlcyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBtc2cgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcik7XG4gICAgICAgIG9uRXJyb3IodGFnVG9rZW4gPz8gdG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2cpO1xuICAgICAgICBzY2FsYXIgPSBuZXcgU2NhbGFyKHZhbHVlKTtcbiAgICB9XG4gICAgc2NhbGFyLnJhbmdlID0gcmFuZ2U7XG4gICAgc2NhbGFyLnNvdXJjZSA9IHZhbHVlO1xuICAgIGlmICh0eXBlKVxuICAgICAgICBzY2FsYXIudHlwZSA9IHR5cGU7XG4gICAgaWYgKHRhZ05hbWUpXG4gICAgICAgIHNjYWxhci50YWcgPSB0YWdOYW1lO1xuICAgIGlmICh0YWcuZm9ybWF0KVxuICAgICAgICBzY2FsYXIuZm9ybWF0ID0gdGFnLmZvcm1hdDtcbiAgICBpZiAoY29tbWVudClcbiAgICAgICAgc2NhbGFyLmNvbW1lbnQgPSBjb21tZW50O1xuICAgIHJldHVybiBzY2FsYXI7XG59XG5mdW5jdGlvbiBmaW5kU2NhbGFyVGFnQnlOYW1lKHNjaGVtYSwgdmFsdWUsIHRhZ05hbWUsIHRhZ1Rva2VuLCBvbkVycm9yKSB7XG4gICAgaWYgKHRhZ05hbWUgPT09ICchJylcbiAgICAgICAgcmV0dXJuIHNjaGVtYVtTQ0FMQVJdOyAvLyBub24tc3BlY2lmaWMgdGFnXG4gICAgY29uc3QgbWF0Y2hXaXRoVGVzdCA9IFtdO1xuICAgIGZvciAoY29uc3QgdGFnIG9mIHNjaGVtYS50YWdzKSB7XG4gICAgICAgIGlmICghdGFnLmNvbGxlY3Rpb24gJiYgdGFnLnRhZyA9PT0gdGFnTmFtZSkge1xuICAgICAgICAgICAgaWYgKHRhZy5kZWZhdWx0ICYmIHRhZy50ZXN0KVxuICAgICAgICAgICAgICAgIG1hdGNoV2l0aFRlc3QucHVzaCh0YWcpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCB0YWcgb2YgbWF0Y2hXaXRoVGVzdClcbiAgICAgICAgaWYgKHRhZy50ZXN0Py50ZXN0KHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgY29uc3Qga3QgPSBzY2hlbWEua25vd25UYWdzW3RhZ05hbWVdO1xuICAgIGlmIChrdCAmJiAha3QuY29sbGVjdGlvbikge1xuICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUga25vd24gdGFnIGlzIGF2YWlsYWJsZSBmb3Igc3RyaW5naWZ5aW5nLFxuICAgICAgICAvLyBidXQgZG9lcyBub3QgZ2V0IHVzZWQgYnkgZGVmYXVsdC5cbiAgICAgICAgc2NoZW1hLnRhZ3MucHVzaChPYmplY3QuYXNzaWduKHt9LCBrdCwgeyBkZWZhdWx0OiBmYWxzZSwgdGVzdDogdW5kZWZpbmVkIH0pKTtcbiAgICAgICAgcmV0dXJuIGt0O1xuICAgIH1cbiAgICBvbkVycm9yKHRhZ1Rva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgYFVucmVzb2x2ZWQgdGFnOiAke3RhZ05hbWV9YCwgdGFnTmFtZSAhPT0gJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicpO1xuICAgIHJldHVybiBzY2hlbWFbU0NBTEFSXTtcbn1cbmZ1bmN0aW9uIGZpbmRTY2FsYXJUYWdCeVRlc3QoeyBhdEtleSwgZGlyZWN0aXZlcywgc2NoZW1hIH0sIHZhbHVlLCB0b2tlbiwgb25FcnJvcikge1xuICAgIGNvbnN0IHRhZyA9IHNjaGVtYS50YWdzLmZpbmQodGFnID0+ICh0YWcuZGVmYXVsdCA9PT0gdHJ1ZSB8fCAoYXRLZXkgJiYgdGFnLmRlZmF1bHQgPT09ICdrZXknKSkgJiZcbiAgICAgICAgdGFnLnRlc3Q/LnRlc3QodmFsdWUpKSB8fCBzY2hlbWFbU0NBTEFSXTtcbiAgICBpZiAoc2NoZW1hLmNvbXBhdCkge1xuICAgICAgICBjb25zdCBjb21wYXQgPSBzY2hlbWEuY29tcGF0LmZpbmQodGFnID0+IHRhZy5kZWZhdWx0ICYmIHRhZy50ZXN0Py50ZXN0KHZhbHVlKSkgPz9cbiAgICAgICAgICAgIHNjaGVtYVtTQ0FMQVJdO1xuICAgICAgICBpZiAodGFnLnRhZyAhPT0gY29tcGF0LnRhZykge1xuICAgICAgICAgICAgY29uc3QgdHMgPSBkaXJlY3RpdmVzLnRhZ1N0cmluZyh0YWcudGFnKTtcbiAgICAgICAgICAgIGNvbnN0IGNzID0gZGlyZWN0aXZlcy50YWdTdHJpbmcoY29tcGF0LnRhZyk7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgVmFsdWUgbWF5IGJlIHBhcnNlZCBhcyBlaXRoZXIgJHt0c30gb3IgJHtjc31gO1xuICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhZztcbn1cblxuZXhwb3J0IHsgY29tcG9zZVNjYWxhciB9O1xuIiwiZnVuY3Rpb24gZW1wdHlTY2FsYXJQb3NpdGlvbihvZmZzZXQsIGJlZm9yZSwgcG9zKSB7XG4gICAgaWYgKGJlZm9yZSkge1xuICAgICAgICBpZiAocG9zID09PSBudWxsKVxuICAgICAgICAgICAgcG9zID0gYmVmb3JlLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvcyAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICBsZXQgc3QgPSBiZWZvcmVbaV07XG4gICAgICAgICAgICBzd2l0Y2ggKHN0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCAtPSBzdC5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRlY2huaWNhbGx5LCBhbiBlbXB0eSBzY2FsYXIgaXMgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGxhc3Qgbm9uLWVtcHR5XG4gICAgICAgICAgICAvLyBub2RlLCBidXQgaXQncyBtb3JlIHVzZWZ1bCB0byBwbGFjZSBpdCBhZnRlciBhbnkgd2hpdGVzcGFjZS5cbiAgICAgICAgICAgIHN0ID0gYmVmb3JlWysraV07XG4gICAgICAgICAgICB3aGlsZSAoc3Q/LnR5cGUgPT09ICdzcGFjZScpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gc3Quc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBzdCA9IGJlZm9yZVsrK2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldDtcbn1cblxuZXhwb3J0IHsgZW1wdHlTY2FsYXJQb3NpdGlvbiB9O1xuIiwiaW1wb3J0IHsgQWxpYXMgfSBmcm9tICcuLi9ub2Rlcy9BbGlhcy5qcyc7XG5pbXBvcnQgeyBpc1NjYWxhciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IGNvbXBvc2VDb2xsZWN0aW9uIH0gZnJvbSAnLi9jb21wb3NlLWNvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgY29tcG9zZVNjYWxhciB9IGZyb20gJy4vY29tcG9zZS1zY2FsYXIuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZCB9IGZyb20gJy4vcmVzb2x2ZS1lbmQuanMnO1xuaW1wb3J0IHsgZW1wdHlTY2FsYXJQb3NpdGlvbiB9IGZyb20gJy4vdXRpbC1lbXB0eS1zY2FsYXItcG9zaXRpb24uanMnO1xuXG5jb25zdCBDTiA9IHsgY29tcG9zZU5vZGUsIGNvbXBvc2VFbXB0eU5vZGUgfTtcbmZ1bmN0aW9uIGNvbXBvc2VOb2RlKGN0eCwgdG9rZW4sIHByb3BzLCBvbkVycm9yKSB7XG4gICAgY29uc3QgYXRLZXkgPSBjdHguYXRLZXk7XG4gICAgY29uc3QgeyBzcGFjZUJlZm9yZSwgY29tbWVudCwgYW5jaG9yLCB0YWcgfSA9IHByb3BzO1xuICAgIGxldCBub2RlO1xuICAgIGxldCBpc1NyY1Rva2VuID0gdHJ1ZTtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnYWxpYXMnOlxuICAgICAgICAgICAgbm9kZSA9IGNvbXBvc2VBbGlhcyhjdHgsIHRva2VuLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGlmIChhbmNob3IgfHwgdGFnKVxuICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdBTElBU19QUk9QUycsICdBbiBhbGlhcyBub2RlIG11c3Qgbm90IHNwZWNpZnkgYW55IHByb3BlcnRpZXMnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzpcbiAgICAgICAgICAgIG5vZGUgPSBjb21wb3NlU2NhbGFyKGN0eCwgdG9rZW4sIHRhZywgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoYW5jaG9yKVxuICAgICAgICAgICAgICAgIG5vZGUuYW5jaG9yID0gYW5jaG9yLnNvdXJjZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYmxvY2stbWFwJzpcbiAgICAgICAgY2FzZSAnYmxvY2stc2VxJzpcbiAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzpcbiAgICAgICAgICAgIG5vZGUgPSBjb21wb3NlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgcHJvcHMsIG9uRXJyb3IpO1xuICAgICAgICAgICAgaWYgKGFuY2hvcilcbiAgICAgICAgICAgICAgICBub2RlLmFuY2hvciA9IGFuY2hvci5zb3VyY2Uuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0b2tlbi50eXBlID09PSAnZXJyb3InXG4gICAgICAgICAgICAgICAgPyB0b2tlbi5tZXNzYWdlXG4gICAgICAgICAgICAgICAgOiBgVW5zdXBwb3J0ZWQgdG9rZW4gKHR5cGU6ICR7dG9rZW4udHlwZX0pYDtcbiAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgbWVzc2FnZSk7XG4gICAgICAgICAgICBub2RlID0gY29tcG9zZUVtcHR5Tm9kZShjdHgsIHRva2VuLm9mZnNldCwgdW5kZWZpbmVkLCBudWxsLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgICAgICBpc1NyY1Rva2VuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFuY2hvciAmJiBub2RlLmFuY2hvciA9PT0gJycpXG4gICAgICAgIG9uRXJyb3IoYW5jaG9yLCAnQkFEX0FMSUFTJywgJ0FuY2hvciBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG4gICAgaWYgKGF0S2V5ICYmXG4gICAgICAgIGN0eC5vcHRpb25zLnN0cmluZ0tleXMgJiZcbiAgICAgICAgKCFpc1NjYWxhcihub2RlKSB8fFxuICAgICAgICAgICAgdHlwZW9mIG5vZGUudmFsdWUgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAobm9kZS50YWcgJiYgbm9kZS50YWcgIT09ICd0YWc6eWFtbC5vcmcsMjAwMjpzdHInKSkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gJ1dpdGggc3RyaW5nS2V5cywgYWxsIGtleXMgbXVzdCBiZSBzdHJpbmdzJztcbiAgICAgICAgb25FcnJvcih0YWcgPz8gdG9rZW4sICdOT05fU1RSSU5HX0tFWScsIG1zZyk7XG4gICAgfVxuICAgIGlmIChzcGFjZUJlZm9yZSlcbiAgICAgICAgbm9kZS5zcGFjZUJlZm9yZSA9IHRydWU7XG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdzY2FsYXInICYmIHRva2VuLnNvdXJjZSA9PT0gJycpXG4gICAgICAgICAgICBub2RlLmNvbW1lbnQgPSBjb21tZW50O1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBub2RlLmNvbW1lbnRCZWZvcmUgPSBjb21tZW50O1xuICAgIH1cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFR5cGUgY2hlY2tpbmcgbWlzc2VzIG1lYW5pbmcgb2YgaXNTcmNUb2tlblxuICAgIGlmIChjdHgub3B0aW9ucy5rZWVwU291cmNlVG9rZW5zICYmIGlzU3JjVG9rZW4pXG4gICAgICAgIG5vZGUuc3JjVG9rZW4gPSB0b2tlbjtcbiAgICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBvZmZzZXQsIGJlZm9yZSwgcG9zLCB7IHNwYWNlQmVmb3JlLCBjb21tZW50LCBhbmNob3IsIHRhZywgZW5kIH0sIG9uRXJyb3IpIHtcbiAgICBjb25zdCB0b2tlbiA9IHtcbiAgICAgICAgdHlwZTogJ3NjYWxhcicsXG4gICAgICAgIG9mZnNldDogZW1wdHlTY2FsYXJQb3NpdGlvbihvZmZzZXQsIGJlZm9yZSwgcG9zKSxcbiAgICAgICAgaW5kZW50OiAtMSxcbiAgICAgICAgc291cmNlOiAnJ1xuICAgIH07XG4gICAgY29uc3Qgbm9kZSA9IGNvbXBvc2VTY2FsYXIoY3R4LCB0b2tlbiwgdGFnLCBvbkVycm9yKTtcbiAgICBpZiAoYW5jaG9yKSB7XG4gICAgICAgIG5vZGUuYW5jaG9yID0gYW5jaG9yLnNvdXJjZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIGlmIChub2RlLmFuY2hvciA9PT0gJycpXG4gICAgICAgICAgICBvbkVycm9yKGFuY2hvciwgJ0JBRF9BTElBUycsICdBbmNob3IgY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZycpO1xuICAgIH1cbiAgICBpZiAoc3BhY2VCZWZvcmUpXG4gICAgICAgIG5vZGUuc3BhY2VCZWZvcmUgPSB0cnVlO1xuICAgIGlmIChjb21tZW50KSB7XG4gICAgICAgIG5vZGUuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgIG5vZGUucmFuZ2VbMl0gPSBlbmQ7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gY29tcG9zZUFsaWFzKHsgb3B0aW9ucyB9LCB7IG9mZnNldCwgc291cmNlLCBlbmQgfSwgb25FcnJvcikge1xuICAgIGNvbnN0IGFsaWFzID0gbmV3IEFsaWFzKHNvdXJjZS5zdWJzdHJpbmcoMSkpO1xuICAgIGlmIChhbGlhcy5zb3VyY2UgPT09ICcnKVxuICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JBRF9BTElBUycsICdBbGlhcyBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG4gICAgaWYgKGFsaWFzLnNvdXJjZS5lbmRzV2l0aCgnOicpKVxuICAgICAgICBvbkVycm9yKG9mZnNldCArIHNvdXJjZS5sZW5ndGggLSAxLCAnQkFEX0FMSUFTJywgJ0FsaWFzIGVuZGluZyBpbiA6IGlzIGFtYmlndW91cycsIHRydWUpO1xuICAgIGNvbnN0IHZhbHVlRW5kID0gb2Zmc2V0ICsgc291cmNlLmxlbmd0aDtcbiAgICBjb25zdCByZSA9IHJlc29sdmVFbmQoZW5kLCB2YWx1ZUVuZCwgb3B0aW9ucy5zdHJpY3QsIG9uRXJyb3IpO1xuICAgIGFsaWFzLnJhbmdlID0gW29mZnNldCwgdmFsdWVFbmQsIHJlLm9mZnNldF07XG4gICAgaWYgKHJlLmNvbW1lbnQpXG4gICAgICAgIGFsaWFzLmNvbW1lbnQgPSByZS5jb21tZW50O1xuICAgIHJldHVybiBhbGlhcztcbn1cblxuZXhwb3J0IHsgY29tcG9zZUVtcHR5Tm9kZSwgY29tcG9zZU5vZGUgfTtcbiIsImltcG9ydCB7IERvY3VtZW50IH0gZnJvbSAnLi4vZG9jL0RvY3VtZW50LmpzJztcbmltcG9ydCB7IGNvbXBvc2VOb2RlLCBjb21wb3NlRW1wdHlOb2RlIH0gZnJvbSAnLi9jb21wb3NlLW5vZGUuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZCB9IGZyb20gJy4vcmVzb2x2ZS1lbmQuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVByb3BzIH0gZnJvbSAnLi9yZXNvbHZlLXByb3BzLmpzJztcblxuZnVuY3Rpb24gY29tcG9zZURvYyhvcHRpb25zLCBkaXJlY3RpdmVzLCB7IG9mZnNldCwgc3RhcnQsIHZhbHVlLCBlbmQgfSwgb25FcnJvcikge1xuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHsgX2RpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMgfSwgb3B0aW9ucyk7XG4gICAgY29uc3QgZG9jID0gbmV3IERvY3VtZW50KHVuZGVmaW5lZCwgb3B0cyk7XG4gICAgY29uc3QgY3R4ID0ge1xuICAgICAgICBhdEtleTogZmFsc2UsXG4gICAgICAgIGF0Um9vdDogdHJ1ZSxcbiAgICAgICAgZGlyZWN0aXZlczogZG9jLmRpcmVjdGl2ZXMsXG4gICAgICAgIG9wdGlvbnM6IGRvYy5vcHRpb25zLFxuICAgICAgICBzY2hlbWE6IGRvYy5zY2hlbWFcbiAgICB9O1xuICAgIGNvbnN0IHByb3BzID0gcmVzb2x2ZVByb3BzKHN0YXJ0LCB7XG4gICAgICAgIGluZGljYXRvcjogJ2RvYy1zdGFydCcsXG4gICAgICAgIG5leHQ6IHZhbHVlID8/IGVuZD8uWzBdLFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIG9uRXJyb3IsXG4gICAgICAgIHBhcmVudEluZGVudDogMCxcbiAgICAgICAgc3RhcnRPbk5ld2xpbmU6IHRydWVcbiAgICB9KTtcbiAgICBpZiAocHJvcHMuZm91bmQpIHtcbiAgICAgICAgZG9jLmRpcmVjdGl2ZXMuZG9jU3RhcnQgPSB0cnVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgICh2YWx1ZS50eXBlID09PSAnYmxvY2stbWFwJyB8fCB2YWx1ZS50eXBlID09PSAnYmxvY2stc2VxJykgJiZcbiAgICAgICAgICAgICFwcm9wcy5oYXNOZXdsaW5lKVxuICAgICAgICAgICAgb25FcnJvcihwcm9wcy5lbmQsICdNSVNTSU5HX0NIQVInLCAnQmxvY2sgY29sbGVjdGlvbiBjYW5ub3Qgc3RhcnQgb24gc2FtZSBsaW5lIHdpdGggZGlyZWN0aXZlcy1lbmQgbWFya2VyJyk7XG4gICAgfVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSWYgQ29udGVudHMgaXMgc2V0LCBsZXQncyB0cnVzdCB0aGUgdXNlclxuICAgIGRvYy5jb250ZW50cyA9IHZhbHVlXG4gICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgIDogY29tcG9zZUVtcHR5Tm9kZShjdHgsIHByb3BzLmVuZCwgc3RhcnQsIG51bGwsIHByb3BzLCBvbkVycm9yKTtcbiAgICBjb25zdCBjb250ZW50RW5kID0gZG9jLmNvbnRlbnRzLnJhbmdlWzJdO1xuICAgIGNvbnN0IHJlID0gcmVzb2x2ZUVuZChlbmQsIGNvbnRlbnRFbmQsIGZhbHNlLCBvbkVycm9yKTtcbiAgICBpZiAocmUuY29tbWVudClcbiAgICAgICAgZG9jLmNvbW1lbnQgPSByZS5jb21tZW50O1xuICAgIGRvYy5yYW5nZSA9IFtvZmZzZXQsIGNvbnRlbnRFbmQsIHJlLm9mZnNldF07XG4gICAgcmV0dXJuIGRvYztcbn1cblxuZXhwb3J0IHsgY29tcG9zZURvYyB9O1xuIiwiaW1wb3J0IHsgRGlyZWN0aXZlcyB9IGZyb20gJy4uL2RvYy9kaXJlY3RpdmVzLmpzJztcbmltcG9ydCB7IERvY3VtZW50IH0gZnJvbSAnLi4vZG9jL0RvY3VtZW50LmpzJztcbmltcG9ydCB7IFlBTUxXYXJuaW5nLCBZQU1MUGFyc2VFcnJvciB9IGZyb20gJy4uL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBpc0NvbGxlY3Rpb24sIGlzUGFpciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IGNvbXBvc2VEb2MgfSBmcm9tICcuL2NvbXBvc2UtZG9jLmpzJztcbmltcG9ydCB7IHJlc29sdmVFbmQgfSBmcm9tICcuL3Jlc29sdmUtZW5kLmpzJztcblxuZnVuY3Rpb24gZ2V0RXJyb3JQb3Moc3JjKSB7XG4gICAgaWYgKHR5cGVvZiBzcmMgPT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gW3NyYywgc3JjICsgMV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3JjKSlcbiAgICAgICAgcmV0dXJuIHNyYy5sZW5ndGggPT09IDIgPyBzcmMgOiBbc3JjWzBdLCBzcmNbMV1dO1xuICAgIGNvbnN0IHsgb2Zmc2V0LCBzb3VyY2UgfSA9IHNyYztcbiAgICByZXR1cm4gW29mZnNldCwgb2Zmc2V0ICsgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnID8gc291cmNlLmxlbmd0aCA6IDEpXTtcbn1cbmZ1bmN0aW9uIHBhcnNlUHJlbHVkZShwcmVsdWRlKSB7XG4gICAgbGV0IGNvbW1lbnQgPSAnJztcbiAgICBsZXQgYXRDb21tZW50ID0gZmFsc2U7XG4gICAgbGV0IGFmdGVyRW1wdHlMaW5lID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVsdWRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IHByZWx1ZGVbaV07XG4gICAgICAgIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gICAgICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgICAgICBjb21tZW50ICs9XG4gICAgICAgICAgICAgICAgICAgIChjb21tZW50ID09PSAnJyA/ICcnIDogYWZ0ZXJFbXB0eUxpbmUgPyAnXFxuXFxuJyA6ICdcXG4nKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc291cmNlLnN1YnN0cmluZygxKSB8fCAnICcpO1xuICAgICAgICAgICAgICAgIGF0Q29tbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYWZ0ZXJFbXB0eUxpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgICAgIGlmIChwcmVsdWRlW2kgKyAxXT8uWzBdICE9PSAnIycpXG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICBhdENvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBtYXkgYmUgd3JvbmcgYWZ0ZXIgZG9jLWVuZCwgYnV0IGluIHRoYXQgY2FzZSBpdCBkb2Vzbid0IG1hdHRlclxuICAgICAgICAgICAgICAgIGlmICghYXRDb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBhZnRlckVtcHR5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXRDb21tZW50ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgY29tbWVudCwgYWZ0ZXJFbXB0eUxpbmUgfTtcbn1cbi8qKlxuICogQ29tcG9zZSBhIHN0cmVhbSBvZiBDU1Qgbm9kZXMgaW50byBhIHN0cmVhbSBvZiBZQU1MIERvY3VtZW50cy5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgQ29tcG9zZXIsIFBhcnNlciB9IGZyb20gJ3lhbWwnXG4gKlxuICogY29uc3Qgc3JjOiBzdHJpbmcgPSAuLi5cbiAqIGNvbnN0IHRva2VucyA9IG5ldyBQYXJzZXIoKS5wYXJzZShzcmMpXG4gKiBjb25zdCBkb2NzID0gbmV3IENvbXBvc2VyKCkuY29tcG9zZSh0b2tlbnMpXG4gKiBgYGBcbiAqL1xuY2xhc3MgQ29tcG9zZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLmRvYyA9IG51bGw7XG4gICAgICAgIHRoaXMuYXREaXJlY3RpdmVzID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJlbHVkZSA9IFtdO1xuICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICB0aGlzLndhcm5pbmdzID0gW107XG4gICAgICAgIHRoaXMub25FcnJvciA9IChzb3VyY2UsIGNvZGUsIG1lc3NhZ2UsIHdhcm5pbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IGdldEVycm9yUG9zKHNvdXJjZSk7XG4gICAgICAgICAgICBpZiAod2FybmluZylcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2gobmV3IFlBTUxXYXJuaW5nKHBvcywgY29kZSwgbWVzc2FnZSkpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2gobmV3IFlBTUxQYXJzZUVycm9yKHBvcywgY29kZSwgbWVzc2FnZSkpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1udWxsaXNoLWNvYWxlc2NpbmdcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gbmV3IERpcmVjdGl2ZXMoeyB2ZXJzaW9uOiBvcHRpb25zLnZlcnNpb24gfHwgJzEuMicgfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGRlY29yYXRlKGRvYywgYWZ0ZXJEb2MpIHtcbiAgICAgICAgY29uc3QgeyBjb21tZW50LCBhZnRlckVtcHR5TGluZSB9ID0gcGFyc2VQcmVsdWRlKHRoaXMucHJlbHVkZSk7XG4gICAgICAgIC8vY29uc29sZS5sb2coeyBkYzogZG9jLmNvbW1lbnQsIHByZWx1ZGUsIGNvbW1lbnQgfSlcbiAgICAgICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRjID0gZG9jLmNvbnRlbnRzO1xuICAgICAgICAgICAgaWYgKGFmdGVyRG9jKSB7XG4gICAgICAgICAgICAgICAgZG9jLmNvbW1lbnQgPSBkb2MuY29tbWVudCA/IGAke2RvYy5jb21tZW50fVxcbiR7Y29tbWVudH1gIDogY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFmdGVyRW1wdHlMaW5lIHx8IGRvYy5kaXJlY3RpdmVzLmRvY1N0YXJ0IHx8ICFkYykge1xuICAgICAgICAgICAgICAgIGRvYy5jb21tZW50QmVmb3JlID0gY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQ29sbGVjdGlvbihkYykgJiYgIWRjLmZsb3cgJiYgZGMuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBpdCA9IGRjLml0ZW1zWzBdO1xuICAgICAgICAgICAgICAgIGlmIChpc1BhaXIoaXQpKVxuICAgICAgICAgICAgICAgICAgICBpdCA9IGl0LmtleTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IGl0LmNvbW1lbnRCZWZvcmU7XG4gICAgICAgICAgICAgICAgaXQuY29tbWVudEJlZm9yZSA9IGNiID8gYCR7Y29tbWVudH1cXG4ke2NifWAgOiBjb21tZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2IgPSBkYy5jb21tZW50QmVmb3JlO1xuICAgICAgICAgICAgICAgIGRjLmNvbW1lbnRCZWZvcmUgPSBjYiA/IGAke2NvbW1lbnR9XFxuJHtjYn1gIDogY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWZ0ZXJEb2MpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGRvYy5lcnJvcnMsIHRoaXMuZXJyb3JzKTtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGRvYy53YXJuaW5ncywgdGhpcy53YXJuaW5ncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkb2MuZXJyb3JzID0gdGhpcy5lcnJvcnM7XG4gICAgICAgICAgICBkb2Mud2FybmluZ3MgPSB0aGlzLndhcm5pbmdzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJlbHVkZSA9IFtdO1xuICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICB0aGlzLndhcm5pbmdzID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgc3RyZWFtIHN0YXR1cyBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIE1vc3RseSB1c2VmdWwgYXQgdGhlIGVuZCBvZiBpbnB1dCBmb3IgYW4gZW1wdHkgc3RyZWFtLlxuICAgICAqL1xuICAgIHN0cmVhbUluZm8oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21tZW50OiBwYXJzZVByZWx1ZGUodGhpcy5wcmVsdWRlKS5jb21tZW50LFxuICAgICAgICAgICAgZGlyZWN0aXZlczogdGhpcy5kaXJlY3RpdmVzLFxuICAgICAgICAgICAgZXJyb3JzOiB0aGlzLmVycm9ycyxcbiAgICAgICAgICAgIHdhcm5pbmdzOiB0aGlzLndhcm5pbmdzXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXBvc2UgdG9rZW5zIGludG8gZG9jdW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZvcmNlRG9jIC0gSWYgdGhlIHN0cmVhbSBjb250YWlucyBubyBkb2N1bWVudCwgc3RpbGwgZW1pdCBhIGZpbmFsIGRvY3VtZW50IGluY2x1ZGluZyBhbnkgY29tbWVudHMgYW5kIGRpcmVjdGl2ZXMgdGhhdCB3b3VsZCBiZSBhcHBsaWVkIHRvIGEgc3Vic2VxdWVudCBkb2N1bWVudC5cbiAgICAgKiBAcGFyYW0gZW5kT2Zmc2V0IC0gU2hvdWxkIGJlIHNldCBpZiBgZm9yY2VEb2NgIGlzIGFsc28gc2V0LCB0byBzZXQgdGhlIGRvY3VtZW50IHJhbmdlIGVuZCBhbmQgdG8gaW5kaWNhdGUgZXJyb3JzIGNvcnJlY3RseS5cbiAgICAgKi9cbiAgICAqY29tcG9zZSh0b2tlbnMsIGZvcmNlRG9jID0gZmFsc2UsIGVuZE9mZnNldCA9IC0xKSB7XG4gICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKVxuICAgICAgICAgICAgeWllbGQqIHRoaXMubmV4dCh0b2tlbik7XG4gICAgICAgIHlpZWxkKiB0aGlzLmVuZChmb3JjZURvYywgZW5kT2Zmc2V0KTtcbiAgICB9XG4gICAgLyoqIEFkdmFuY2UgdGhlIGNvbXBvc2VyIGJ5IG9uZSBDU1QgdG9rZW4uICovXG4gICAgKm5leHQodG9rZW4pIHtcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdkaXJlY3RpdmUnOlxuICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcy5hZGQodG9rZW4uc291cmNlLCAob2Zmc2V0LCBtZXNzYWdlLCB3YXJuaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IGdldEVycm9yUG9zKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zWzBdICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHBvcywgJ0JBRF9ESVJFQ1RJVkUnLCBtZXNzYWdlLCB3YXJuaW5nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByZWx1ZGUucHVzaCh0b2tlbi5zb3VyY2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXREaXJlY3RpdmVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RvY3VtZW50Jzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvYyA9IGNvbXBvc2VEb2ModGhpcy5vcHRpb25zLCB0aGlzLmRpcmVjdGl2ZXMsIHRva2VuLCB0aGlzLm9uRXJyb3IpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0RGlyZWN0aXZlcyAmJiAhZG9jLmRpcmVjdGl2ZXMuZG9jU3RhcnQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcih0b2tlbiwgJ01JU1NJTkdfQ0hBUicsICdNaXNzaW5nIGRpcmVjdGl2ZXMtZW5kL2RvYy1zdGFydCBpbmRpY2F0b3IgbGluZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoZG9jLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jKVxuICAgICAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmRvYztcbiAgICAgICAgICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAgICAgICAgICAgICB0aGlzLmF0RGlyZWN0aXZlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnYnl0ZS1vcmRlci1tYXJrJzpcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5wcmVsdWRlLnB1c2godG9rZW4uc291cmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IHRva2VuLnNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/IGAke3Rva2VuLm1lc3NhZ2V9OiAke0pTT04uc3RyaW5naWZ5KHRva2VuLnNvdXJjZSl9YFxuICAgICAgICAgICAgICAgICAgICA6IHRva2VuLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWUFNTFBhcnNlRXJyb3IoZ2V0RXJyb3JQb3ModG9rZW4pLCAnVU5FWFBFQ1RFRF9UT0tFTicsIG1zZyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXREaXJlY3RpdmVzIHx8ICF0aGlzLmRvYylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvYy5lcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdkb2MtZW5kJzoge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnID0gJ1VuZXhwZWN0ZWQgZG9jLWVuZCB3aXRob3V0IHByZWNlZGluZyBkb2N1bWVudCc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2gobmV3IFlBTUxQYXJzZUVycm9yKGdldEVycm9yUG9zKHRva2VuKSwgJ1VORVhQRUNURURfVE9LRU4nLCBtc2cpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZG9jLmRpcmVjdGl2ZXMuZG9jRW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSByZXNvbHZlRW5kKHRva2VuLmVuZCwgdG9rZW4ub2Zmc2V0ICsgdG9rZW4uc291cmNlLmxlbmd0aCwgdGhpcy5kb2Mub3B0aW9ucy5zdHJpY3QsIHRoaXMub25FcnJvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWNvcmF0ZSh0aGlzLmRvYywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGVuZC5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRjID0gdGhpcy5kb2MuY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2MuY29tbWVudCA9IGRjID8gYCR7ZGN9XFxuJHtlbmQuY29tbWVudH1gIDogZW5kLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZG9jLnJhbmdlWzJdID0gZW5kLm9mZnNldDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChuZXcgWUFNTFBhcnNlRXJyb3IoZ2V0RXJyb3JQb3ModG9rZW4pLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbnN1cHBvcnRlZCB0b2tlbiAke3Rva2VuLnR5cGV9YCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGwgYXQgZW5kIG9mIGlucHV0IHRvIHlpZWxkIGFueSByZW1haW5pbmcgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9yY2VEb2MgLSBJZiB0aGUgc3RyZWFtIGNvbnRhaW5zIG5vIGRvY3VtZW50LCBzdGlsbCBlbWl0IGEgZmluYWwgZG9jdW1lbnQgaW5jbHVkaW5nIGFueSBjb21tZW50cyBhbmQgZGlyZWN0aXZlcyB0aGF0IHdvdWxkIGJlIGFwcGxpZWQgdG8gYSBzdWJzZXF1ZW50IGRvY3VtZW50LlxuICAgICAqIEBwYXJhbSBlbmRPZmZzZXQgLSBTaG91bGQgYmUgc2V0IGlmIGBmb3JjZURvY2AgaXMgYWxzbyBzZXQsIHRvIHNldCB0aGUgZG9jdW1lbnQgcmFuZ2UgZW5kIGFuZCB0byBpbmRpY2F0ZSBlcnJvcnMgY29ycmVjdGx5LlxuICAgICAqL1xuICAgICplbmQoZm9yY2VEb2MgPSBmYWxzZSwgZW5kT2Zmc2V0ID0gLTEpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9jKSB7XG4gICAgICAgICAgICB0aGlzLmRlY29yYXRlKHRoaXMuZG9jLCB0cnVlKTtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZG9jO1xuICAgICAgICAgICAgdGhpcy5kb2MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZvcmNlRG9jKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7IF9kaXJlY3RpdmVzOiB0aGlzLmRpcmVjdGl2ZXMgfSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGRvYyA9IG5ldyBEb2N1bWVudCh1bmRlZmluZWQsIG9wdHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXREaXJlY3RpdmVzKVxuICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihlbmRPZmZzZXQsICdNSVNTSU5HX0NIQVInLCAnTWlzc2luZyBkaXJlY3RpdmVzLWVuZCBpbmRpY2F0b3IgbGluZScpO1xuICAgICAgICAgICAgZG9jLnJhbmdlID0gWzAsIGVuZE9mZnNldCwgZW5kT2Zmc2V0XTtcbiAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoZG9jLCBmYWxzZSk7XG4gICAgICAgICAgICB5aWVsZCBkb2M7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IENvbXBvc2VyIH07XG4iLCJpbXBvcnQgeyByZXNvbHZlQmxvY2tTY2FsYXIgfSBmcm9tICcuLi9jb21wb3NlL3Jlc29sdmUtYmxvY2stc2NhbGFyLmpzJztcbmltcG9ydCB7IHJlc29sdmVGbG93U2NhbGFyIH0gZnJvbSAnLi4vY29tcG9zZS9yZXNvbHZlLWZsb3ctc2NhbGFyLmpzJztcbmltcG9ydCB7IFlBTUxQYXJzZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeVN0cmluZyB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlTdHJpbmcuanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlQXNTY2FsYXIodG9rZW4sIHN0cmljdCA9IHRydWUsIG9uRXJyb3IpIHtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgY29uc3QgX29uRXJyb3IgPSAocG9zLCBjb2RlLCBtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB0eXBlb2YgcG9zID09PSAnbnVtYmVyJyA/IHBvcyA6IEFycmF5LmlzQXJyYXkocG9zKSA/IHBvc1swXSA6IHBvcy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAob25FcnJvcilcbiAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgY29kZSwgbWVzc2FnZSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFlBTUxQYXJzZUVycm9yKFtvZmZzZXQsIG9mZnNldCArIDFdLCBjb2RlLCBtZXNzYWdlKTtcbiAgICAgICAgfTtcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlRmxvd1NjYWxhcih0b2tlbiwgc3RyaWN0LCBfb25FcnJvcik7XG4gICAgICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlQmxvY2tTY2FsYXIoeyBvcHRpb25zOiB7IHN0cmljdCB9IH0sIHRva2VuLCBfb25FcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBzY2FsYXIgdG9rZW4gd2l0aCBgdmFsdWVgXG4gKlxuICogVmFsdWVzIHRoYXQgcmVwcmVzZW50IGFuIGFjdHVhbCBzdHJpbmcgYnV0IG1heSBiZSBwYXJzZWQgYXMgYSBkaWZmZXJlbnQgdHlwZSBzaG91bGQgdXNlIGEgYHR5cGVgIG90aGVyIHRoYW4gYCdQTEFJTidgLFxuICogYXMgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBzdXBwb3J0IGFueSBzY2hlbWEgb3BlcmF0aW9ucyBhbmQgd29uJ3QgY2hlY2sgZm9yIHN1Y2ggY29uZmxpY3RzLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2YWx1ZSwgd2hpY2ggd2lsbCBoYXZlIGl0cyBjb250ZW50IHByb3Blcmx5IGluZGVudGVkLlxuICogQHBhcmFtIGNvbnRleHQuZW5kIENvbW1lbnRzIGFuZCB3aGl0ZXNwYWNlIGFmdGVyIHRoZSBlbmQgb2YgdGhlIHZhbHVlLCBvciBhZnRlciB0aGUgYmxvY2sgc2NhbGFyIGhlYWRlci4gSWYgdW5kZWZpbmVkLCBhIG5ld2xpbmUgd2lsbCBiZSBhZGRlZC5cbiAqIEBwYXJhbSBjb250ZXh0LmltcGxpY2l0S2V5IEJlaW5nIHdpdGhpbiBhbiBpbXBsaWNpdCBrZXkgbWF5IGFmZmVjdCB0aGUgcmVzb2x2ZWQgdHlwZSBvZiB0aGUgdG9rZW4ncyB2YWx1ZS5cbiAqIEBwYXJhbSBjb250ZXh0LmluZGVudCBUaGUgaW5kZW50IGxldmVsIG9mIHRoZSB0b2tlbi5cbiAqIEBwYXJhbSBjb250ZXh0LmluRmxvdyBJcyB0aGlzIHNjYWxhciB3aXRoaW4gYSBmbG93IGNvbGxlY3Rpb24/IFRoaXMgbWF5IGFmZmVjdCB0aGUgcmVzb2x2ZWQgdHlwZSBvZiB0aGUgdG9rZW4ncyB2YWx1ZS5cbiAqIEBwYXJhbSBjb250ZXh0Lm9mZnNldCBUaGUgb2Zmc2V0IHBvc2l0aW9uIG9mIHRoZSB0b2tlbi5cbiAqIEBwYXJhbSBjb250ZXh0LnR5cGUgVGhlIHByZWZlcnJlZCB0eXBlIG9mIHRoZSBzY2FsYXIgdG9rZW4uIElmIHVuZGVmaW5lZCwgdGhlIHByZXZpb3VzIHR5cGUgb2YgdGhlIGB0b2tlbmAgd2lsbCBiZSB1c2VkLCBkZWZhdWx0aW5nIHRvIGAnUExBSU4nYC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2NhbGFyVG9rZW4odmFsdWUsIGNvbnRleHQpIHtcbiAgICBjb25zdCB7IGltcGxpY2l0S2V5ID0gZmFsc2UsIGluZGVudCwgaW5GbG93ID0gZmFsc2UsIG9mZnNldCA9IC0xLCB0eXBlID0gJ1BMQUlOJyB9ID0gY29udGV4dDtcbiAgICBjb25zdCBzb3VyY2UgPSBzdHJpbmdpZnlTdHJpbmcoeyB0eXBlLCB2YWx1ZSB9LCB7XG4gICAgICAgIGltcGxpY2l0S2V5LFxuICAgICAgICBpbmRlbnQ6IGluZGVudCA+IDAgPyAnICcucmVwZWF0KGluZGVudCkgOiAnJyxcbiAgICAgICAgaW5GbG93LFxuICAgICAgICBvcHRpb25zOiB7IGJsb2NrUXVvdGU6IHRydWUsIGxpbmVXaWR0aDogLTEgfVxuICAgIH0pO1xuICAgIGNvbnN0IGVuZCA9IGNvbnRleHQuZW5kID8/IFtcbiAgICAgICAgeyB0eXBlOiAnbmV3bGluZScsIG9mZnNldDogLTEsIGluZGVudCwgc291cmNlOiAnXFxuJyB9XG4gICAgXTtcbiAgICBzd2l0Y2ggKHNvdXJjZVswXSkge1xuICAgICAgICBjYXNlICd8JzpcbiAgICAgICAgY2FzZSAnPic6IHtcbiAgICAgICAgICAgIGNvbnN0IGhlID0gc291cmNlLmluZGV4T2YoJ1xcbicpO1xuICAgICAgICAgICAgY29uc3QgaGVhZCA9IHNvdXJjZS5zdWJzdHJpbmcoMCwgaGUpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHNvdXJjZS5zdWJzdHJpbmcoaGUgKyAxKSArICdcXG4nO1xuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSBbXG4gICAgICAgICAgICAgICAgeyB0eXBlOiAnYmxvY2stc2NhbGFyLWhlYWRlcicsIG9mZnNldCwgaW5kZW50LCBzb3VyY2U6IGhlYWQgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmICghYWRkRW5kdG9CbG9ja1Byb3BzKHByb3BzLCBlbmQpKVxuICAgICAgICAgICAgICAgIHByb3BzLnB1c2goeyB0eXBlOiAnbmV3bGluZScsIG9mZnNldDogLTEsIGluZGVudCwgc291cmNlOiAnXFxuJyB9KTtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdibG9jay1zY2FsYXInLCBvZmZzZXQsIGluZGVudCwgcHJvcHMsIHNvdXJjZTogYm9keSB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdkb3VibGUtcXVvdGVkLXNjYWxhcicsIG9mZnNldCwgaW5kZW50LCBzb3VyY2UsIGVuZCB9O1xuICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJywgb2Zmc2V0LCBpbmRlbnQsIHNvdXJjZSwgZW5kIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiAnc2NhbGFyJywgb2Zmc2V0LCBpbmRlbnQsIHNvdXJjZSwgZW5kIH07XG4gICAgfVxufVxuLyoqXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGB0b2tlbmAgdG8gdGhlIGdpdmVuIHN0cmluZyBgdmFsdWVgLCBvdmVyd3JpdGluZyBhbnkgcHJldmlvdXMgY29udGVudHMgYW5kIHR5cGUgdGhhdCBpdCBtYXkgaGF2ZS5cbiAqXG4gKiBCZXN0IGVmZm9ydHMgYXJlIG1hZGUgdG8gcmV0YWluIGFueSBjb21tZW50cyBwcmV2aW91c2x5IGFzc29jaWF0ZWQgd2l0aCB0aGUgYHRva2VuYCxcbiAqIHRob3VnaCBhbGwgY29udGVudHMgd2l0aGluIGEgY29sbGVjdGlvbidzIGBpdGVtc2Agd2lsbCBiZSBvdmVyd3JpdHRlbi5cbiAqXG4gKiBWYWx1ZXMgdGhhdCByZXByZXNlbnQgYW4gYWN0dWFsIHN0cmluZyBidXQgbWF5IGJlIHBhcnNlZCBhcyBhIGRpZmZlcmVudCB0eXBlIHNob3VsZCB1c2UgYSBgdHlwZWAgb3RoZXIgdGhhbiBgJ1BMQUlOJ2AsXG4gKiBhcyB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IHN1cHBvcnQgYW55IHNjaGVtYSBvcGVyYXRpb25zIGFuZCB3b24ndCBjaGVjayBmb3Igc3VjaCBjb25mbGljdHMuXG4gKlxuICogQHBhcmFtIHRva2VuIEFueSB0b2tlbi4gSWYgaXQgZG9lcyBub3QgaW5jbHVkZSBhbiBgaW5kZW50YCB2YWx1ZSwgdGhlIHZhbHVlIHdpbGwgYmUgc3RyaW5naWZpZWQgYXMgaWYgaXQgd2VyZSBhbiBpbXBsaWNpdCBrZXkuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmFsdWUsIHdoaWNoIHdpbGwgaGF2ZSBpdHMgY29udGVudCBwcm9wZXJseSBpbmRlbnRlZC5cbiAqIEBwYXJhbSBjb250ZXh0LmFmdGVyS2V5IEluIG1vc3QgY2FzZXMsIHZhbHVlcyBhZnRlciBhIGtleSBzaG91bGQgaGF2ZSBhbiBhZGRpdGlvbmFsIGxldmVsIG9mIGluZGVudGF0aW9uLlxuICogQHBhcmFtIGNvbnRleHQuaW1wbGljaXRLZXkgQmVpbmcgd2l0aGluIGFuIGltcGxpY2l0IGtleSBtYXkgYWZmZWN0IHRoZSByZXNvbHZlZCB0eXBlIG9mIHRoZSB0b2tlbidzIHZhbHVlLlxuICogQHBhcmFtIGNvbnRleHQuaW5GbG93IEJlaW5nIHdpdGhpbiBhIGZsb3cgY29sbGVjdGlvbiBtYXkgYWZmZWN0IHRoZSByZXNvbHZlZCB0eXBlIG9mIHRoZSB0b2tlbidzIHZhbHVlLlxuICogQHBhcmFtIGNvbnRleHQudHlwZSBUaGUgcHJlZmVycmVkIHR5cGUgb2YgdGhlIHNjYWxhciB0b2tlbi4gSWYgdW5kZWZpbmVkLCB0aGUgcHJldmlvdXMgdHlwZSBvZiB0aGUgYHRva2VuYCB3aWxsIGJlIHVzZWQsIGRlZmF1bHRpbmcgdG8gYCdQTEFJTidgLlxuICovXG5mdW5jdGlvbiBzZXRTY2FsYXJWYWx1ZSh0b2tlbiwgdmFsdWUsIGNvbnRleHQgPSB7fSkge1xuICAgIGxldCB7IGFmdGVyS2V5ID0gZmFsc2UsIGltcGxpY2l0S2V5ID0gZmFsc2UsIGluRmxvdyA9IGZhbHNlLCB0eXBlIH0gPSBjb250ZXh0O1xuICAgIGxldCBpbmRlbnQgPSAnaW5kZW50JyBpbiB0b2tlbiA/IHRva2VuLmluZGVudCA6IG51bGw7XG4gICAgaWYgKGFmdGVyS2V5ICYmIHR5cGVvZiBpbmRlbnQgPT09ICdudW1iZXInKVxuICAgICAgICBpbmRlbnQgKz0gMjtcbiAgICBpZiAoIXR5cGUpXG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHR5cGUgPSAnUVVPVEVfU0lOR0xFJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICB0eXBlID0gJ1FVT1RFX0RPVUJMRSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gdG9rZW4ucHJvcHNbMF07XG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlci50eXBlICE9PSAnYmxvY2stc2NhbGFyLWhlYWRlcicpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBibG9jayBzY2FsYXIgaGVhZGVyJyk7XG4gICAgICAgICAgICAgICAgdHlwZSA9IGhlYWRlci5zb3VyY2VbMF0gPT09ICc+JyA/ICdCTE9DS19GT0xERUQnIDogJ0JMT0NLX0xJVEVSQUwnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0eXBlID0gJ1BMQUlOJztcbiAgICAgICAgfVxuICAgIGNvbnN0IHNvdXJjZSA9IHN0cmluZ2lmeVN0cmluZyh7IHR5cGUsIHZhbHVlIH0sIHtcbiAgICAgICAgaW1wbGljaXRLZXk6IGltcGxpY2l0S2V5IHx8IGluZGVudCA9PT0gbnVsbCxcbiAgICAgICAgaW5kZW50OiBpbmRlbnQgIT09IG51bGwgJiYgaW5kZW50ID4gMCA/ICcgJy5yZXBlYXQoaW5kZW50KSA6ICcnLFxuICAgICAgICBpbkZsb3csXG4gICAgICAgIG9wdGlvbnM6IHsgYmxvY2tRdW90ZTogdHJ1ZSwgbGluZVdpZHRoOiAtMSB9XG4gICAgfSk7XG4gICAgc3dpdGNoIChzb3VyY2VbMF0pIHtcbiAgICAgICAgY2FzZSAnfCc6XG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgICAgc2V0QmxvY2tTY2FsYXJWYWx1ZSh0b2tlbiwgc291cmNlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICBzZXRGbG93U2NhbGFyVmFsdWUodG9rZW4sIHNvdXJjZSwgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgIHNldEZsb3dTY2FsYXJWYWx1ZSh0b2tlbiwgc291cmNlLCAnc2luZ2xlLXF1b3RlZC1zY2FsYXInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgc2V0Rmxvd1NjYWxhclZhbHVlKHRva2VuLCBzb3VyY2UsICdzY2FsYXInKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRCbG9ja1NjYWxhclZhbHVlKHRva2VuLCBzb3VyY2UpIHtcbiAgICBjb25zdCBoZSA9IHNvdXJjZS5pbmRleE9mKCdcXG4nKTtcbiAgICBjb25zdCBoZWFkID0gc291cmNlLnN1YnN0cmluZygwLCBoZSk7XG4gICAgY29uc3QgYm9keSA9IHNvdXJjZS5zdWJzdHJpbmcoaGUgKyAxKSArICdcXG4nO1xuICAgIGlmICh0b2tlbi50eXBlID09PSAnYmxvY2stc2NhbGFyJykge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSB0b2tlbi5wcm9wc1swXTtcbiAgICAgICAgaWYgKGhlYWRlci50eXBlICE9PSAnYmxvY2stc2NhbGFyLWhlYWRlcicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYmxvY2sgc2NhbGFyIGhlYWRlcicpO1xuICAgICAgICBoZWFkZXIuc291cmNlID0gaGVhZDtcbiAgICAgICAgdG9rZW4uc291cmNlID0gYm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgb2Zmc2V0IH0gPSB0b2tlbjtcbiAgICAgICAgY29uc3QgaW5kZW50ID0gJ2luZGVudCcgaW4gdG9rZW4gPyB0b2tlbi5pbmRlbnQgOiAtMTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6ICdibG9jay1zY2FsYXItaGVhZGVyJywgb2Zmc2V0LCBpbmRlbnQsIHNvdXJjZTogaGVhZCB9XG4gICAgICAgIF07XG4gICAgICAgIGlmICghYWRkRW5kdG9CbG9ja1Byb3BzKHByb3BzLCAnZW5kJyBpbiB0b2tlbiA/IHRva2VuLmVuZCA6IHVuZGVmaW5lZCkpXG4gICAgICAgICAgICBwcm9wcy5wdXNoKHsgdHlwZTogJ25ld2xpbmUnLCBvZmZzZXQ6IC0xLCBpbmRlbnQsIHNvdXJjZTogJ1xcbicgfSk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRva2VuKSlcbiAgICAgICAgICAgIGlmIChrZXkgIT09ICd0eXBlJyAmJiBrZXkgIT09ICdvZmZzZXQnKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0b2tlbltrZXldO1xuICAgICAgICBPYmplY3QuYXNzaWduKHRva2VuLCB7IHR5cGU6ICdibG9jay1zY2FsYXInLCBpbmRlbnQsIHByb3BzLCBzb3VyY2U6IGJvZHkgfSk7XG4gICAgfVxufVxuLyoqIEByZXR1cm5zIGB0cnVlYCBpZiBsYXN0IHRva2VuIGlzIGEgbmV3bGluZSAqL1xuZnVuY3Rpb24gYWRkRW5kdG9CbG9ja1Byb3BzKHByb3BzLCBlbmQpIHtcbiAgICBpZiAoZW5kKVxuICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIGVuZClcbiAgICAgICAgICAgIHN3aXRjaCAoc3QudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMucHVzaChzdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5wdXNoKHN0KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gc2V0Rmxvd1NjYWxhclZhbHVlKHRva2VuLCBzb3VyY2UsIHR5cGUpIHtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICB0b2tlbi50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIHRva2VuLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOiB7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSB0b2tlbi5wcm9wcy5zbGljZSgxKTtcbiAgICAgICAgICAgIGxldCBvYSA9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAodG9rZW4ucHJvcHNbMF0udHlwZSA9PT0gJ2Jsb2NrLXNjYWxhci1oZWFkZXInKVxuICAgICAgICAgICAgICAgIG9hIC09IHRva2VuLnByb3BzWzBdLnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRvayBvZiBlbmQpXG4gICAgICAgICAgICAgICAgdG9rLm9mZnNldCArPSBvYTtcbiAgICAgICAgICAgIGRlbGV0ZSB0b2tlbi5wcm9wcztcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odG9rZW4sIHsgdHlwZSwgc291cmNlLCBlbmQgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdibG9jay1tYXAnOlxuICAgICAgICBjYXNlICdibG9jay1zZXEnOiB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB0b2tlbi5vZmZzZXQgKyBzb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgbmwgPSB7IHR5cGU6ICduZXdsaW5lJywgb2Zmc2V0LCBpbmRlbnQ6IHRva2VuLmluZGVudCwgc291cmNlOiAnXFxuJyB9O1xuICAgICAgICAgICAgZGVsZXRlIHRva2VuLml0ZW1zO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0b2tlbiwgeyB0eXBlLCBzb3VyY2UsIGVuZDogW25sXSB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGVudCA9ICdpbmRlbnQnIGluIHRva2VuID8gdG9rZW4uaW5kZW50IDogLTE7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSAnZW5kJyBpbiB0b2tlbiAmJiBBcnJheS5pc0FycmF5KHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICA/IHRva2VuLmVuZC5maWx0ZXIoc3QgPT4gc3QudHlwZSA9PT0gJ3NwYWNlJyB8fFxuICAgICAgICAgICAgICAgICAgICBzdC50eXBlID09PSAnY29tbWVudCcgfHxcbiAgICAgICAgICAgICAgICAgICAgc3QudHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0b2tlbikpXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3R5cGUnICYmIGtleSAhPT0gJ29mZnNldCcpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0b2tlbltrZXldO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0b2tlbiwgeyB0eXBlLCBpbmRlbnQsIHNvdXJjZSwgZW5kIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBjcmVhdGVTY2FsYXJUb2tlbiwgcmVzb2x2ZUFzU2NhbGFyLCBzZXRTY2FsYXJWYWx1ZSB9O1xuIiwiLyoqXG4gKiBTdHJpbmdpZnkgYSBDU1QgZG9jdW1lbnQsIHRva2VuLCBvciBjb2xsZWN0aW9uIGl0ZW1cbiAqXG4gKiBGYWlyIHdhcm5pbmc6IFRoaXMgYXBwbGllcyBubyB2YWxpZGF0aW9uIHdoYXRzb2V2ZXIsIGFuZFxuICogc2ltcGx5IGNvbmNhdGVuYXRlcyB0aGUgc291cmNlcyBpbiB0aGVpciBsb2dpY2FsIG9yZGVyLlxuICovXG5jb25zdCBzdHJpbmdpZnkgPSAoY3N0KSA9PiAndHlwZScgaW4gY3N0ID8gc3RyaW5naWZ5VG9rZW4oY3N0KSA6IHN0cmluZ2lmeUl0ZW0oY3N0KTtcbmZ1bmN0aW9uIHN0cmluZ2lmeVRva2VuKHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6IHtcbiAgICAgICAgICAgIGxldCByZXMgPSAnJztcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9rIG9mIHRva2VuLnByb3BzKVxuICAgICAgICAgICAgICAgIHJlcyArPSBzdHJpbmdpZnlUb2tlbih0b2spO1xuICAgICAgICAgICAgcmV0dXJuIHJlcyArIHRva2VuLnNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdibG9jay1tYXAnOlxuICAgICAgICBjYXNlICdibG9jay1zZXEnOiB7XG4gICAgICAgICAgICBsZXQgcmVzID0gJyc7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdG9rZW4uaXRlbXMpXG4gICAgICAgICAgICAgICAgcmVzICs9IHN0cmluZ2lmeUl0ZW0oaXRlbSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlvbic6IHtcbiAgICAgICAgICAgIGxldCByZXMgPSB0b2tlbi5zdGFydC5zb3VyY2U7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdG9rZW4uaXRlbXMpXG4gICAgICAgICAgICAgICAgcmVzICs9IHN0cmluZ2lmeUl0ZW0oaXRlbSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICByZXMgKz0gc3Quc291cmNlO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdkb2N1bWVudCc6IHtcbiAgICAgICAgICAgIGxldCByZXMgPSBzdHJpbmdpZnlJdGVtKHRva2VuKTtcbiAgICAgICAgICAgIGlmICh0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiB0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSBzdC5zb3VyY2U7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGxldCByZXMgPSB0b2tlbi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoJ2VuZCcgaW4gdG9rZW4gJiYgdG9rZW4uZW5kKVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgdG9rZW4uZW5kKVxuICAgICAgICAgICAgICAgICAgICByZXMgKz0gc3Quc291cmNlO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUl0ZW0oeyBzdGFydCwga2V5LCBzZXAsIHZhbHVlIH0pIHtcbiAgICBsZXQgcmVzID0gJyc7XG4gICAgZm9yIChjb25zdCBzdCBvZiBzdGFydClcbiAgICAgICAgcmVzICs9IHN0LnNvdXJjZTtcbiAgICBpZiAoa2V5KVxuICAgICAgICByZXMgKz0gc3RyaW5naWZ5VG9rZW4oa2V5KTtcbiAgICBpZiAoc2VwKVxuICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIHNlcClcbiAgICAgICAgICAgIHJlcyArPSBzdC5zb3VyY2U7XG4gICAgaWYgKHZhbHVlKVxuICAgICAgICByZXMgKz0gc3RyaW5naWZ5VG9rZW4odmFsdWUpO1xuICAgIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCB7IHN0cmluZ2lmeSB9O1xuIiwiY29uc3QgQlJFQUsgPSBTeW1ib2woJ2JyZWFrIHZpc2l0Jyk7XG5jb25zdCBTS0lQID0gU3ltYm9sKCdza2lwIGNoaWxkcmVuJyk7XG5jb25zdCBSRU1PVkUgPSBTeW1ib2woJ3JlbW92ZSBpdGVtJyk7XG4vKipcbiAqIEFwcGx5IGEgdmlzaXRvciB0byBhIENTVCBkb2N1bWVudCBvciBpdGVtLlxuICpcbiAqIFdhbGtzIHRocm91Z2ggdGhlIHRyZWUgKGRlcHRoLWZpcnN0KSBzdGFydGluZyBmcm9tIHRoZSByb290LCBjYWxsaW5nIGFcbiAqIGB2aXNpdG9yYCBmdW5jdGlvbiB3aXRoIHR3byBhcmd1bWVudHMgd2hlbiBlbnRlcmluZyBlYWNoIGl0ZW06XG4gKiAgIC0gYGl0ZW1gOiBUaGUgY3VycmVudCBpdGVtLCB3aGljaCBpbmNsdWRlZCB0aGUgZm9sbG93aW5nIG1lbWJlcnM6XG4gKiAgICAgLSBgc3RhcnQ6IFNvdXJjZVRva2VuW11gIOKAkyBTb3VyY2UgdG9rZW5zIGJlZm9yZSB0aGUga2V5IG9yIHZhbHVlLFxuICogICAgICAgcG9zc2libHkgaW5jbHVkaW5nIGl0cyBhbmNob3Igb3IgdGFnLlxuICogICAgIC0gYGtleT86IFRva2VuIHwgbnVsbGAg4oCTIFNldCBmb3IgcGFpciB2YWx1ZXMuIE1heSB0aGVuIGJlIGBudWxsYCwgaWZcbiAqICAgICAgIHRoZSBrZXkgYmVmb3JlIHRoZSBgOmAgc2VwYXJhdG9yIGlzIGVtcHR5LlxuICogICAgIC0gYHNlcD86IFNvdXJjZVRva2VuW11gIOKAkyBTb3VyY2UgdG9rZW5zIGJldHdlZW4gdGhlIGtleSBhbmQgdGhlIHZhbHVlLFxuICogICAgICAgd2hpY2ggc2hvdWxkIGluY2x1ZGUgdGhlIGA6YCBtYXAgdmFsdWUgaW5kaWNhdG9yIGlmIGB2YWx1ZWAgaXMgc2V0LlxuICogICAgIC0gYHZhbHVlPzogVG9rZW5gIOKAkyBUaGUgdmFsdWUgb2YgYSBzZXF1ZW5jZSBpdGVtLCBvciBvZiBhIG1hcCBwYWlyLlxuICogICAtIGBwYXRoYDogVGhlIHN0ZXBzIGZyb20gdGhlIHJvb3QgdG8gdGhlIGN1cnJlbnQgbm9kZSwgYXMgYW4gYXJyYXkgb2ZcbiAqICAgICBgWydrZXknIHwgJ3ZhbHVlJywgbnVtYmVyXWAgdHVwbGVzLlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHZpc2l0b3IgbWF5IGJlIHVzZWQgdG8gY29udHJvbCB0aGUgdHJhdmVyc2FsOlxuICogICAtIGB1bmRlZmluZWRgIChkZWZhdWx0KTogRG8gbm90aGluZyBhbmQgY29udGludWVcbiAqICAgLSBgdmlzaXQuU0tJUGA6IERvIG5vdCB2aXNpdCB0aGUgY2hpbGRyZW4gb2YgdGhpcyB0b2tlbiwgY29udGludWUgd2l0aFxuICogICAgICBuZXh0IHNpYmxpbmdcbiAqICAgLSBgdmlzaXQuQlJFQUtgOiBUZXJtaW5hdGUgdHJhdmVyc2FsIGNvbXBsZXRlbHlcbiAqICAgLSBgdmlzaXQuUkVNT1ZFYDogUmVtb3ZlIHRoZSBjdXJyZW50IGl0ZW0sIHRoZW4gY29udGludWUgd2l0aCB0aGUgbmV4dCBvbmVcbiAqICAgLSBgbnVtYmVyYDogU2V0IHRoZSBpbmRleCBvZiB0aGUgbmV4dCBzdGVwLiBUaGlzIGlzIHVzZWZ1bCBlc3BlY2lhbGx5IGlmXG4gKiAgICAgdGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IHRva2VuIGhhcyBjaGFuZ2VkLlxuICogICAtIGBmdW5jdGlvbmA6IERlZmluZSB0aGUgbmV4dCB2aXNpdG9yIGZvciB0aGlzIGl0ZW0uIEFmdGVyIHRoZSBvcmlnaW5hbFxuICogICAgIHZpc2l0b3IgaXMgY2FsbGVkIG9uIGl0ZW0gZW50cnksIG5leHQgdmlzaXRvcnMgYXJlIGNhbGxlZCBhZnRlciBoYW5kbGluZ1xuICogICAgIGEgbm9uLWVtcHR5IGBrZXlgIGFuZCB3aGVuIGV4aXRpbmcgdGhlIGl0ZW0uXG4gKi9cbmZ1bmN0aW9uIHZpc2l0KGNzdCwgdmlzaXRvcikge1xuICAgIGlmICgndHlwZScgaW4gY3N0ICYmIGNzdC50eXBlID09PSAnZG9jdW1lbnQnKVxuICAgICAgICBjc3QgPSB7IHN0YXJ0OiBjc3Quc3RhcnQsIHZhbHVlOiBjc3QudmFsdWUgfTtcbiAgICBfdmlzaXQoT2JqZWN0LmZyZWV6ZShbXSksIGNzdCwgdmlzaXRvcik7XG59XG4vLyBXaXRob3V0IHRoZSBgYXMgc3ltYm9sYCBjYXN0cywgVFMgZGVjbGFyZXMgdGhlc2UgaW4gdGhlIGB2aXNpdGBcbi8vIG5hbWVzcGFjZSB1c2luZyBgdmFyYCwgYnV0IHRoZW4gY29tcGxhaW5zIGFib3V0IHRoYXQgYmVjYXVzZVxuLy8gYHVuaXF1ZSBzeW1ib2xgIG11c3QgYmUgYGNvbnN0YC5cbi8qKiBUZXJtaW5hdGUgdmlzaXQgdHJhdmVyc2FsIGNvbXBsZXRlbHkgKi9cbnZpc2l0LkJSRUFLID0gQlJFQUs7XG4vKiogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBpdGVtICovXG52aXNpdC5TS0lQID0gU0tJUDtcbi8qKiBSZW1vdmUgdGhlIGN1cnJlbnQgaXRlbSAqL1xudmlzaXQuUkVNT1ZFID0gUkVNT1ZFO1xuLyoqIEZpbmQgdGhlIGl0ZW0gYXQgYHBhdGhgIGZyb20gYGNzdGAgYXMgdGhlIHJvb3QgKi9cbnZpc2l0Lml0ZW1BdFBhdGggPSAoY3N0LCBwYXRoKSA9PiB7XG4gICAgbGV0IGl0ZW0gPSBjc3Q7XG4gICAgZm9yIChjb25zdCBbZmllbGQsIGluZGV4XSBvZiBwYXRoKSB7XG4gICAgICAgIGNvbnN0IHRvayA9IGl0ZW0/LltmaWVsZF07XG4gICAgICAgIGlmICh0b2sgJiYgJ2l0ZW1zJyBpbiB0b2spIHtcbiAgICAgICAgICAgIGl0ZW0gPSB0b2suaXRlbXNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufTtcbi8qKlxuICogR2V0IHRoZSBpbW1lZGlhdGUgcGFyZW50IGNvbGxlY3Rpb24gb2YgdGhlIGl0ZW0gYXQgYHBhdGhgIGZyb20gYGNzdGAgYXMgdGhlIHJvb3QuXG4gKlxuICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBjb2xsZWN0aW9uIGlzIG5vdCBmb3VuZCwgd2hpY2ggc2hvdWxkIG5ldmVyIGhhcHBlbiBpZiB0aGUgaXRlbSBpdHNlbGYgZXhpc3RzLlxuICovXG52aXNpdC5wYXJlbnRDb2xsZWN0aW9uID0gKGNzdCwgcGF0aCkgPT4ge1xuICAgIGNvbnN0IHBhcmVudCA9IHZpc2l0Lml0ZW1BdFBhdGgoY3N0LCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgY29uc3QgZmllbGQgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV1bMF07XG4gICAgY29uc3QgY29sbCA9IHBhcmVudD8uW2ZpZWxkXTtcbiAgICBpZiAoY29sbCAmJiAnaXRlbXMnIGluIGNvbGwpXG4gICAgICAgIHJldHVybiBjb2xsO1xuICAgIHRocm93IG5ldyBFcnJvcignUGFyZW50IGNvbGxlY3Rpb24gbm90IGZvdW5kJyk7XG59O1xuZnVuY3Rpb24gX3Zpc2l0KHBhdGgsIGl0ZW0sIHZpc2l0b3IpIHtcbiAgICBsZXQgY3RybCA9IHZpc2l0b3IoaXRlbSwgcGF0aCk7XG4gICAgaWYgKHR5cGVvZiBjdHJsID09PSAnc3ltYm9sJylcbiAgICAgICAgcmV0dXJuIGN0cmw7XG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiBbJ2tleScsICd2YWx1ZSddKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gaXRlbVtmaWVsZF07XG4gICAgICAgIGlmICh0b2tlbiAmJiAnaXRlbXMnIGluIHRva2VuKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2VuLml0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2kgPSBfdmlzaXQoT2JqZWN0LmZyZWV6ZShwYXRoLmNvbmNhdChbW2ZpZWxkLCBpXV0pKSwgdG9rZW4uaXRlbXNbaV0sIHZpc2l0b3IpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2kgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICBpID0gY2kgLSAxO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNpID09PSBCUkVBSylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNpID09PSBSRU1PVkUpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uaXRlbXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdHJsID09PSAnZnVuY3Rpb24nICYmIGZpZWxkID09PSAna2V5JylcbiAgICAgICAgICAgICAgICBjdHJsID0gY3RybChpdGVtLCBwYXRoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIGN0cmwgPT09ICdmdW5jdGlvbicgPyBjdHJsKGl0ZW0sIHBhdGgpIDogY3RybDtcbn1cblxuZXhwb3J0IHsgdmlzaXQgfTtcbiIsImV4cG9ydCB7IGNyZWF0ZVNjYWxhclRva2VuLCByZXNvbHZlQXNTY2FsYXIsIHNldFNjYWxhclZhbHVlIH0gZnJvbSAnLi9jc3Qtc2NhbGFyLmpzJztcbmV4cG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gJy4vY3N0LXN0cmluZ2lmeS5qcyc7XG5leHBvcnQgeyB2aXNpdCB9IGZyb20gJy4vY3N0LXZpc2l0LmpzJztcblxuLyoqIFRoZSBieXRlIG9yZGVyIG1hcmsgKi9cbmNvbnN0IEJPTSA9ICdcXHV7RkVGRn0nO1xuLyoqIFN0YXJ0IG9mIGRvYy1tb2RlICovXG5jb25zdCBET0NVTUVOVCA9ICdcXHgwMic7IC8vIEMwOiBTdGFydCBvZiBUZXh0XG4vKiogVW5leHBlY3RlZCBlbmQgb2YgZmxvdy1tb2RlICovXG5jb25zdCBGTE9XX0VORCA9ICdcXHgxOCc7IC8vIEMwOiBDYW5jZWxcbi8qKiBOZXh0IHRva2VuIGlzIGEgc2NhbGFyIHZhbHVlICovXG5jb25zdCBTQ0FMQVIgPSAnXFx4MWYnOyAvLyBDMDogVW5pdCBTZXBhcmF0b3Jcbi8qKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYHRva2VuYCBpcyBhIGZsb3cgb3IgYmxvY2sgY29sbGVjdGlvbiAqL1xuY29uc3QgaXNDb2xsZWN0aW9uID0gKHRva2VuKSA9PiAhIXRva2VuICYmICdpdGVtcycgaW4gdG9rZW47XG4vKiogQHJldHVybnMgYHRydWVgIGlmIGB0b2tlbmAgaXMgYSBmbG93IG9yIGJsb2NrIHNjYWxhcjsgbm90IGFuIGFsaWFzICovXG5jb25zdCBpc1NjYWxhciA9ICh0b2tlbikgPT4gISF0b2tlbiAmJlxuICAgICh0b2tlbi50eXBlID09PSAnc2NhbGFyJyB8fFxuICAgICAgICB0b2tlbi50eXBlID09PSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInIHx8XG4gICAgICAgIHRva2VuLnR5cGUgPT09ICdkb3VibGUtcXVvdGVkLXNjYWxhcicgfHxcbiAgICAgICAgdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNjYWxhcicpO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKiBHZXQgYSBwcmludGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBsZXhlciB0b2tlbiAqL1xuZnVuY3Rpb24gcHJldHR5VG9rZW4odG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgQk9NOlxuICAgICAgICAgICAgcmV0dXJuICc8Qk9NPic7XG4gICAgICAgIGNhc2UgRE9DVU1FTlQ6XG4gICAgICAgICAgICByZXR1cm4gJzxET0M+JztcbiAgICAgICAgY2FzZSBGTE9XX0VORDpcbiAgICAgICAgICAgIHJldHVybiAnPEZMT1dfRU5EPic7XG4gICAgICAgIGNhc2UgU0NBTEFSOlxuICAgICAgICAgICAgcmV0dXJuICc8U0NBTEFSPic7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodG9rZW4pO1xuICAgIH1cbn1cbi8qKiBJZGVudGlmeSB0aGUgdHlwZSBvZiBhIGxleGVyIHRva2VuLiBNYXkgcmV0dXJuIGBudWxsYCBmb3IgdW5rbm93biB0b2tlbnMuICovXG5mdW5jdGlvbiB0b2tlblR5cGUoc291cmNlKSB7XG4gICAgc3dpdGNoIChzb3VyY2UpIHtcbiAgICAgICAgY2FzZSBCT006XG4gICAgICAgICAgICByZXR1cm4gJ2J5dGUtb3JkZXItbWFyayc7XG4gICAgICAgIGNhc2UgRE9DVU1FTlQ6XG4gICAgICAgICAgICByZXR1cm4gJ2RvYy1tb2RlJztcbiAgICAgICAgY2FzZSBGTE9XX0VORDpcbiAgICAgICAgICAgIHJldHVybiAnZmxvdy1lcnJvci1lbmQnO1xuICAgICAgICBjYXNlIFNDQUxBUjpcbiAgICAgICAgICAgIHJldHVybiAnc2NhbGFyJztcbiAgICAgICAgY2FzZSAnLS0tJzpcbiAgICAgICAgICAgIHJldHVybiAnZG9jLXN0YXJ0JztcbiAgICAgICAgY2FzZSAnLi4uJzpcbiAgICAgICAgICAgIHJldHVybiAnZG9jLWVuZCc7XG4gICAgICAgIGNhc2UgJyc6XG4gICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgIGNhc2UgJ1xcclxcbic6XG4gICAgICAgICAgICByZXR1cm4gJ25ld2xpbmUnO1xuICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICAgIHJldHVybiAnc2VxLWl0ZW0taW5kJztcbiAgICAgICAgY2FzZSAnPyc6XG4gICAgICAgICAgICByZXR1cm4gJ2V4cGxpY2l0LWtleS1pbmQnO1xuICAgICAgICBjYXNlICc6JzpcbiAgICAgICAgICAgIHJldHVybiAnbWFwLXZhbHVlLWluZCc7XG4gICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LW1hcC1zdGFydCc7XG4gICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LW1hcC1lbmQnO1xuICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICAgIHJldHVybiAnZmxvdy1zZXEtc3RhcnQnO1xuICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAgIHJldHVybiAnZmxvdy1zZXEtZW5kJztcbiAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICByZXR1cm4gJ2NvbW1hJztcbiAgICB9XG4gICAgc3dpdGNoIChzb3VyY2VbMF0pIHtcbiAgICAgICAgY2FzZSAnICc6XG4gICAgICAgIGNhc2UgJ1xcdCc6XG4gICAgICAgICAgICByZXR1cm4gJ3NwYWNlJztcbiAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgICAgICByZXR1cm4gJ2NvbW1lbnQnO1xuICAgICAgICBjYXNlICclJzpcbiAgICAgICAgICAgIHJldHVybiAnZGlyZWN0aXZlLWxpbmUnO1xuICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICAgIHJldHVybiAnYWxpYXMnO1xuICAgICAgICBjYXNlICcmJzpcbiAgICAgICAgICAgIHJldHVybiAnYW5jaG9yJztcbiAgICAgICAgY2FzZSAnISc6XG4gICAgICAgICAgICByZXR1cm4gJ3RhZyc7XG4gICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICByZXR1cm4gJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJztcbiAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgcmV0dXJuICdkb3VibGUtcXVvdGVkLXNjYWxhcic7XG4gICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgIHJldHVybiAnYmxvY2stc2NhbGFyLWhlYWRlcic7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgeyBCT00sIERPQ1VNRU5ULCBGTE9XX0VORCwgU0NBTEFSLCBpc0NvbGxlY3Rpb24sIGlzU2NhbGFyLCBwcmV0dHlUb2tlbiwgdG9rZW5UeXBlIH07XG4iLCJpbXBvcnQgeyBCT00sIERPQ1VNRU5ULCBGTE9XX0VORCwgU0NBTEFSIH0gZnJvbSAnLi9jc3QuanMnO1xuXG4vKlxuU1RBUlQgLT4gc3RyZWFtXG5cbnN0cmVhbVxuICBkaXJlY3RpdmUgLT4gbGluZS1lbmQgLT4gc3RyZWFtXG4gIGluZGVudCArIGxpbmUtZW5kIC0+IHN0cmVhbVxuICBbZWxzZV0gLT4gbGluZS1zdGFydFxuXG5saW5lLWVuZFxuICBjb21tZW50IC0+IGxpbmUtZW5kXG4gIG5ld2xpbmUgLT4gLlxuICBpbnB1dC1lbmQgLT4gRU5EXG5cbmxpbmUtc3RhcnRcbiAgZG9jLXN0YXJ0IC0+IGRvY1xuICBkb2MtZW5kIC0+IHN0cmVhbVxuICBbZWxzZV0gLT4gaW5kZW50IC0+IGJsb2NrLXN0YXJ0XG5cbmJsb2NrLXN0YXJ0XG4gIHNlcS1pdGVtLXN0YXJ0IC0+IGJsb2NrLXN0YXJ0XG4gIGV4cGxpY2l0LWtleS1zdGFydCAtPiBibG9jay1zdGFydFxuICBtYXAtdmFsdWUtc3RhcnQgLT4gYmxvY2stc3RhcnRcbiAgW2Vsc2VdIC0+IGRvY1xuXG5kb2NcbiAgbGluZS1lbmQgLT4gbGluZS1zdGFydFxuICBzcGFjZXMgLT4gZG9jXG4gIGFuY2hvciAtPiBkb2NcbiAgdGFnIC0+IGRvY1xuICBmbG93LXN0YXJ0IC0+IGZsb3cgLT4gZG9jXG4gIGZsb3ctZW5kIC0+IGVycm9yIC0+IGRvY1xuICBzZXEtaXRlbS1zdGFydCAtPiBlcnJvciAtPiBkb2NcbiAgZXhwbGljaXQta2V5LXN0YXJ0IC0+IGVycm9yIC0+IGRvY1xuICBtYXAtdmFsdWUtc3RhcnQgLT4gZG9jXG4gIGFsaWFzIC0+IGRvY1xuICBxdW90ZS1zdGFydCAtPiBxdW90ZWQtc2NhbGFyIC0+IGRvY1xuICBibG9jay1zY2FsYXItaGVhZGVyIC0+IGxpbmUtZW5kIC0+IGJsb2NrLXNjYWxhcihtaW4pIC0+IGxpbmUtc3RhcnRcbiAgW2Vsc2VdIC0+IHBsYWluLXNjYWxhcihmYWxzZSwgbWluKSAtPiBkb2NcblxuZmxvd1xuICBsaW5lLWVuZCAtPiBmbG93XG4gIHNwYWNlcyAtPiBmbG93XG4gIGFuY2hvciAtPiBmbG93XG4gIHRhZyAtPiBmbG93XG4gIGZsb3ctc3RhcnQgLT4gZmxvdyAtPiBmbG93XG4gIGZsb3ctZW5kIC0+IC5cbiAgc2VxLWl0ZW0tc3RhcnQgLT4gZXJyb3IgLT4gZmxvd1xuICBleHBsaWNpdC1rZXktc3RhcnQgLT4gZmxvd1xuICBtYXAtdmFsdWUtc3RhcnQgLT4gZmxvd1xuICBhbGlhcyAtPiBmbG93XG4gIHF1b3RlLXN0YXJ0IC0+IHF1b3RlZC1zY2FsYXIgLT4gZmxvd1xuICBjb21tYSAtPiBmbG93XG4gIFtlbHNlXSAtPiBwbGFpbi1zY2FsYXIodHJ1ZSwgMCkgLT4gZmxvd1xuXG5xdW90ZWQtc2NhbGFyXG4gIHF1b3RlLWVuZCAtPiAuXG4gIFtlbHNlXSAtPiBxdW90ZWQtc2NhbGFyXG5cbmJsb2NrLXNjYWxhcihtaW4pXG4gIG5ld2xpbmUgKyBwZWVrKGluZGVudCA8IG1pbikgLT4gLlxuICBbZWxzZV0gLT4gYmxvY2stc2NhbGFyKG1pbilcblxucGxhaW4tc2NhbGFyKGlzLWZsb3csIG1pbilcbiAgc2NhbGFyLWVuZChpcy1mbG93KSAtPiAuXG4gIHBlZWsobmV3bGluZSArIChpbmRlbnQgPCBtaW4pKSAtPiAuXG4gIFtlbHNlXSAtPiBwbGFpbi1zY2FsYXIobWluKVxuKi9cbmZ1bmN0aW9uIGlzRW1wdHkoY2gpIHtcbiAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgY2FzZSAnXFxyJzpcbiAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmNvbnN0IGhleERpZ2l0cyA9IG5ldyBTZXQoJzAxMjM0NTY3ODlBQkNERUZhYmNkZWYnKTtcbmNvbnN0IHRhZ0NoYXJzID0gbmV3IFNldChcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LSM7Lz86QCY9KyRfLiF+KicoKVwiKTtcbmNvbnN0IGZsb3dJbmRpY2F0b3JDaGFycyA9IG5ldyBTZXQoJyxbXXt9Jyk7XG5jb25zdCBpbnZhbGlkQW5jaG9yQ2hhcnMgPSBuZXcgU2V0KCcgLFtde31cXG5cXHJcXHQnKTtcbmNvbnN0IGlzTm90QW5jaG9yQ2hhciA9IChjaCkgPT4gIWNoIHx8IGludmFsaWRBbmNob3JDaGFycy5oYXMoY2gpO1xuLyoqXG4gKiBTcGxpdHMgYW4gaW5wdXQgc3RyaW5nIGludG8gbGV4aWNhbCB0b2tlbnMsIGkuZS4gc21hbGxlciBzdHJpbmdzIHRoYXQgYXJlXG4gKiBlYXNpbHkgaWRlbnRpZmlhYmxlIGJ5IGB0b2tlbnMudG9rZW5UeXBlKClgLlxuICpcbiAqIExleGluZyBzdGFydHMgYWx3YXlzIGluIGEgXCJzdHJlYW1cIiBjb250ZXh0LiBJbmNvbXBsZXRlIGlucHV0IG1heSBiZSBidWZmZXJlZFxuICogdW50aWwgYSBjb21wbGV0ZSB0b2tlbiBjYW4gYmUgZW1pdHRlZC5cbiAqXG4gKiBJbiBhZGRpdGlvbiB0byBzbGljZXMgb2YgdGhlIG9yaWdpbmFsIGlucHV0LCB0aGUgZm9sbG93aW5nIGNvbnRyb2wgY2hhcmFjdGVyc1xuICogbWF5IGFsc28gYmUgZW1pdHRlZDpcbiAqXG4gKiAtIGBcXHgwMmAgKFN0YXJ0IG9mIFRleHQpOiBBIGRvY3VtZW50IHN0YXJ0cyB3aXRoIHRoZSBuZXh0IHRva2VuXG4gKiAtIGBcXHgxOGAgKENhbmNlbCk6IFVuZXhwZWN0ZWQgZW5kIG9mIGZsb3ctbW9kZSAoaW5kaWNhdGVzIGFuIGVycm9yKVxuICogLSBgXFx4MWZgIChVbml0IFNlcGFyYXRvcik6IE5leHQgdG9rZW4gaXMgYSBzY2FsYXIgdmFsdWVcbiAqIC0gYFxcdXtGRUZGfWAgKEJ5dGUgb3JkZXIgbWFyayk6IEVtaXR0ZWQgc2VwYXJhdGVseSBvdXRzaWRlIGRvY3VtZW50c1xuICovXG5jbGFzcyBMZXhlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGJ1ZmZlciBtYXJrcyB0aGUgZW5kIG9mXG4gICAgICAgICAqIGFsbCBpbnB1dFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hdEVuZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogRXhwbGljaXQgaW5kZW50IHNldCBpbiBibG9jayBzY2FsYXIgaGVhZGVyLCBhcyBhbiBvZmZzZXQgZnJvbSB0aGUgY3VycmVudFxuICAgICAgICAgKiBtaW5pbXVtIGluZGVudCwgc28gZS5nLiBzZXQgdG8gMSBmcm9tIGEgaGVhZGVyIGB8MitgLiBTZXQgdG8gLTEgaWYgbm90XG4gICAgICAgICAqIGV4cGxpY2l0bHkgc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ibG9ja1NjYWxhckluZGVudCA9IC0xO1xuICAgICAgICAvKipcbiAgICAgICAgICogQmxvY2sgc2NhbGFycyB0aGF0IGluY2x1ZGUgYSArIChrZWVwKSBjaG9tcGluZyBpbmRpY2F0b3IgaW4gdGhlaXIgaGVhZGVyXG4gICAgICAgICAqIGluY2x1ZGUgdHJhaWxpbmcgZW1wdHkgbGluZXMsIHdoaWNoIGFyZSBvdGhlcndpc2UgZXhjbHVkZWQgZnJvbSB0aGVcbiAgICAgICAgICogc2NhbGFyJ3MgY29udGVudHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJsb2NrU2NhbGFyS2VlcCA9IGZhbHNlO1xuICAgICAgICAvKiogQ3VycmVudCBpbnB1dCAqL1xuICAgICAgICB0aGlzLmJ1ZmZlciA9ICcnO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmxhZyBub3Rpbmcgd2hldGhlciB0aGUgbWFwIHZhbHVlIGluZGljYXRvciA6IGNhbiBpbW1lZGlhdGVseSBmb2xsb3cgdGhpc1xuICAgICAgICAgKiBub2RlIHdpdGhpbiBhIGZsb3cgY29udGV4dC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICAvKiogQ291bnQgb2Ygc3Vycm91bmRpbmcgZmxvdyBjb2xsZWN0aW9uIGxldmVscy4gKi9cbiAgICAgICAgdGhpcy5mbG93TGV2ZWwgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogTWluaW11bSBsZXZlbCBvZiBpbmRlbnRhdGlvbiByZXF1aXJlZCBmb3IgbmV4dCBsaW5lcyB0byBiZSBwYXJzZWQgYXMgYVxuICAgICAgICAgKiBwYXJ0IG9mIHRoZSBjdXJyZW50IHNjYWxhciB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IDA7XG4gICAgICAgIC8qKiBJbmRlbnRhdGlvbiBsZXZlbCBvZiB0aGUgY3VycmVudCBsaW5lLiAqL1xuICAgICAgICB0aGlzLmluZGVudFZhbHVlID0gMDtcbiAgICAgICAgLyoqIFBvc2l0aW9uIG9mIHRoZSBuZXh0IFxcbiBjaGFyYWN0ZXIuICovXG4gICAgICAgIHRoaXMubGluZUVuZFBvcyA9IG51bGw7XG4gICAgICAgIC8qKiBTdG9yZXMgdGhlIHN0YXRlIG9mIHRoZSBsZXhlciBpZiByZWFjaGluZyB0aGUgZW5kIG9mIGluY3BvbXBsZXRlIGlucHV0ICovXG4gICAgICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgICAgIC8qKiBBIHBvaW50ZXIgdG8gYGJ1ZmZlcmA7IHRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSBsZXhlci4gKi9cbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBZQU1MIHRva2VucyBmcm9tIHRoZSBgc291cmNlYCBzdHJpbmcuIElmIGBpbmNvbXBsZXRlYCxcbiAgICAgKiBhIHBhcnQgb2YgdGhlIGxhc3QgbGluZSBtYXkgYmUgbGVmdCBhcyBhIGJ1ZmZlciBmb3IgdGhlIG5leHQgY2FsbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgZ2VuZXJhdG9yIG9mIGxleGljYWwgdG9rZW5zXG4gICAgICovXG4gICAgKmxleChzb3VyY2UsIGluY29tcGxldGUgPSBmYWxzZSkge1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdzb3VyY2UgaXMgbm90IGEgc3RyaW5nJyk7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyID8gdGhpcy5idWZmZXIgKyBzb3VyY2UgOiBzb3VyY2U7XG4gICAgICAgICAgICB0aGlzLmxpbmVFbmRQb3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXRFbmQgPSAhaW5jb21wbGV0ZTtcbiAgICAgICAgbGV0IG5leHQgPSB0aGlzLm5leHQgPz8gJ3N0cmVhbSc7XG4gICAgICAgIHdoaWxlIChuZXh0ICYmIChpbmNvbXBsZXRlIHx8IHRoaXMuaGFzQ2hhcnMoMSkpKVxuICAgICAgICAgICAgbmV4dCA9IHlpZWxkKiB0aGlzLnBhcnNlTmV4dChuZXh0KTtcbiAgICB9XG4gICAgYXRMaW5lRW5kKCkge1xuICAgICAgICBsZXQgaSA9IHRoaXMucG9zO1xuICAgICAgICBsZXQgY2ggPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgICAgd2hpbGUgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKVxuICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICBpZiAoIWNoIHx8IGNoID09PSAnIycgfHwgY2ggPT09ICdcXG4nKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChjaCA9PT0gJ1xccicpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJbaSArIDFdID09PSAnXFxuJztcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjaGFyQXQobikge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJbdGhpcy5wb3MgKyBuXTtcbiAgICB9XG4gICAgY29udGludWVTY2FsYXIob2Zmc2V0KSB7XG4gICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW29mZnNldF07XG4gICAgICAgIGlmICh0aGlzLmluZGVudE5leHQgPiAwKSB7XG4gICAgICAgICAgICBsZXQgaW5kZW50ID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChjaCA9PT0gJyAnKVxuICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpbmRlbnQgKyBvZmZzZXRdO1xuICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLmJ1ZmZlcltpbmRlbnQgKyBvZmZzZXQgKyAxXTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCA9PT0gJ1xcbicgfHwgKCFuZXh0ICYmICF0aGlzLmF0RW5kKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mZnNldCArIGluZGVudCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2ggPT09ICdcXG4nIHx8IGluZGVudCA+PSB0aGlzLmluZGVudE5leHQgfHwgKCFjaCAmJiAhdGhpcy5hdEVuZClcbiAgICAgICAgICAgICAgICA/IG9mZnNldCArIGluZGVudFxuICAgICAgICAgICAgICAgIDogLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoID09PSAnLScgfHwgY2ggPT09ICcuJykge1xuICAgICAgICAgICAgY29uc3QgZHQgPSB0aGlzLmJ1ZmZlci5zdWJzdHIob2Zmc2V0LCAzKTtcbiAgICAgICAgICAgIGlmICgoZHQgPT09ICctLS0nIHx8IGR0ID09PSAnLi4uJykgJiYgaXNFbXB0eSh0aGlzLmJ1ZmZlcltvZmZzZXQgKyAzXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuICAgIGdldExpbmUoKSB7XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLmxpbmVFbmRQb3M7XG4gICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCAoZW5kICE9PSAtMSAmJiBlbmQgPCB0aGlzLnBvcykpIHtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuYnVmZmVyLmluZGV4T2YoJ1xcbicsIHRoaXMucG9zKTtcbiAgICAgICAgICAgIHRoaXMubGluZUVuZFBvcyA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kID09PSAtMSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF0RW5kID8gdGhpcy5idWZmZXIuc3Vic3RyaW5nKHRoaXMucG9zKSA6IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlcltlbmQgLSAxXSA9PT0gJ1xccicpXG4gICAgICAgICAgICBlbmQgLT0gMTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnBvcywgZW5kKTtcbiAgICB9XG4gICAgaGFzQ2hhcnMobikge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3MgKyBuIDw9IHRoaXMuYnVmZmVyLmxlbmd0aDtcbiAgICB9XG4gICAgc2V0TmV4dChzdGF0ZSkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnBvcyk7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgdGhpcy5saW5lRW5kUG9zID0gbnVsbDtcbiAgICAgICAgdGhpcy5uZXh0ID0gc3RhdGU7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBwZWVrKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnN1YnN0cih0aGlzLnBvcywgbik7XG4gICAgfVxuICAgICpwYXJzZU5leHQobmV4dCkge1xuICAgICAgICBzd2l0Y2ggKG5leHQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmVhbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlU3RyZWFtKCk7XG4gICAgICAgICAgICBjYXNlICdsaW5lLXN0YXJ0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VMaW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXN0YXJ0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VCbG9ja1N0YXJ0KCk7XG4gICAgICAgICAgICBjYXNlICdkb2MnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZURvY3VtZW50KCk7XG4gICAgICAgICAgICBjYXNlICdmbG93JzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VGbG93Q29sbGVjdGlvbigpO1xuICAgICAgICAgICAgY2FzZSAncXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlUXVvdGVkU2NhbGFyKCk7XG4gICAgICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUJsb2NrU2NhbGFyKCk7XG4gICAgICAgICAgICBjYXNlICdwbGFpbi1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVBsYWluU2NhbGFyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnBhcnNlU3RyZWFtKCkge1xuICAgICAgICBsZXQgbGluZSA9IHRoaXMuZ2V0TGluZSgpO1xuICAgICAgICBpZiAobGluZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ3N0cmVhbScpO1xuICAgICAgICBpZiAobGluZVswXSA9PT0gQk9NKSB7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICBsaW5lID0gbGluZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbmVbMF0gPT09ICclJykge1xuICAgICAgICAgICAgbGV0IGRpckVuZCA9IGxpbmUubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGNzID0gbGluZS5pbmRleE9mKCcjJyk7XG4gICAgICAgICAgICB3aGlsZSAoY3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2ggPSBsaW5lW2NzIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpckVuZCA9IGNzIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjcyA9IGxpbmUuaW5kZXhPZignIycsIGNzICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaCA9IGxpbmVbZGlyRW5kIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKVxuICAgICAgICAgICAgICAgICAgICBkaXJFbmQgLT0gMTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbiA9ICh5aWVsZCogdGhpcy5wdXNoQ291bnQoZGlyRW5kKSkgKyAoeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKSk7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndGggLSBuKTsgLy8gcG9zc2libGUgY29tbWVudFxuICAgICAgICAgICAgdGhpcy5wdXNoTmV3bGluZSgpO1xuICAgICAgICAgICAgcmV0dXJuICdzdHJlYW0nO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmF0TGluZUVuZCgpKSB7XG4gICAgICAgICAgICBjb25zdCBzcCA9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndGggLSBzcCk7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoTmV3bGluZSgpO1xuICAgICAgICAgICAgcmV0dXJuICdzdHJlYW0nO1xuICAgICAgICB9XG4gICAgICAgIHlpZWxkIERPQ1VNRU5UO1xuICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VMaW5lU3RhcnQoKTtcbiAgICB9XG4gICAgKnBhcnNlTGluZVN0YXJ0KCkge1xuICAgICAgICBjb25zdCBjaCA9IHRoaXMuY2hhckF0KDApO1xuICAgICAgICBpZiAoIWNoICYmICF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnbGluZS1zdGFydCcpO1xuICAgICAgICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJy4nKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXRFbmQgJiYgIXRoaXMuaGFzQ2hhcnMoNCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnbGluZS1zdGFydCcpO1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMucGVlaygzKTtcbiAgICAgICAgICAgIGlmICgocyA9PT0gJy0tLScgfHwgcyA9PT0gJy4uLicpICYmIGlzRW1wdHkodGhpcy5jaGFyQXQoMykpKSB7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDMpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50VmFsdWUgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMgPT09ICctLS0nID8gJ2RvYycgOiAnc3RyZWFtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZGVudFZhbHVlID0geWllbGQqIHRoaXMucHVzaFNwYWNlcyhmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLmluZGVudE5leHQgPiB0aGlzLmluZGVudFZhbHVlICYmICFpc0VtcHR5KHRoaXMuY2hhckF0KDEpKSlcbiAgICAgICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IHRoaXMuaW5kZW50VmFsdWU7XG4gICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUJsb2NrU3RhcnQoKTtcbiAgICB9XG4gICAgKnBhcnNlQmxvY2tTdGFydCgpIHtcbiAgICAgICAgY29uc3QgW2NoMCwgY2gxXSA9IHRoaXMucGVlaygyKTtcbiAgICAgICAgaWYgKCFjaDEgJiYgIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdibG9jay1zdGFydCcpO1xuICAgICAgICBpZiAoKGNoMCA9PT0gJy0nIHx8IGNoMCA9PT0gJz8nIHx8IGNoMCA9PT0gJzonKSAmJiBpc0VtcHR5KGNoMSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSAoeWllbGQqIHRoaXMucHVzaENvdW50KDEpKSArICh5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpKTtcbiAgICAgICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IHRoaXMuaW5kZW50VmFsdWUgKyAxO1xuICAgICAgICAgICAgdGhpcy5pbmRlbnRWYWx1ZSArPSBuO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlQmxvY2tTdGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnZG9jJztcbiAgICB9XG4gICAgKnBhcnNlRG9jdW1lbnQoKSB7XG4gICAgICAgIHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLmdldExpbmUoKTtcbiAgICAgICAgaWYgKGxpbmUgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdkb2MnKTtcbiAgICAgICAgbGV0IG4gPSB5aWVsZCogdGhpcy5wdXNoSW5kaWNhdG9ycygpO1xuICAgICAgICBzd2l0Y2ggKGxpbmVbbl0pIHtcbiAgICAgICAgICAgIGNhc2UgJyMnOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudChsaW5lLmxlbmd0aCAtIG4pO1xuICAgICAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hOZXdsaW5lKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlTGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBjYXNlICd7JzpcbiAgICAgICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZXZlbCA9IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgICAgY2FzZSAnXSc6XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbiBlcnJvclxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RvYyc7XG4gICAgICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoVW50aWwoaXNOb3RBbmNob3JDaGFyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RvYyc7XG4gICAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVF1b3RlZFNjYWxhcigpO1xuICAgICAgICAgICAgY2FzZSAnfCc6XG4gICAgICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgICAgICBuICs9IHlpZWxkKiB0aGlzLnBhcnNlQmxvY2tTY2FsYXJIZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBuICs9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KGxpbmUubGVuZ3RoIC0gbik7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaE5ld2xpbmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VCbG9ja1NjYWxhcigpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VQbGFpblNjYWxhcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgICpwYXJzZUZsb3dDb2xsZWN0aW9uKCkge1xuICAgICAgICBsZXQgbmwsIHNwO1xuICAgICAgICBsZXQgaW5kZW50ID0gLTE7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIG5sID0geWllbGQqIHRoaXMucHVzaE5ld2xpbmUoKTtcbiAgICAgICAgICAgIGlmIChubCA+IDApIHtcbiAgICAgICAgICAgICAgICBzcCA9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXMoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50VmFsdWUgPSBpbmRlbnQgPSBzcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNwICs9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgIH0gd2hpbGUgKG5sICsgc3AgPiAwKTtcbiAgICAgICAgY29uc3QgbGluZSA9IHRoaXMuZ2V0TGluZSgpO1xuICAgICAgICBpZiAobGluZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2Zsb3cnKTtcbiAgICAgICAgaWYgKChpbmRlbnQgIT09IC0xICYmIGluZGVudCA8IHRoaXMuaW5kZW50TmV4dCAmJiBsaW5lWzBdICE9PSAnIycpIHx8XG4gICAgICAgICAgICAoaW5kZW50ID09PSAwICYmXG4gICAgICAgICAgICAgICAgKGxpbmUuc3RhcnRzV2l0aCgnLS0tJykgfHwgbGluZS5zdGFydHNXaXRoKCcuLi4nKSkgJiZcbiAgICAgICAgICAgICAgICBpc0VtcHR5KGxpbmVbM10pKSkge1xuICAgICAgICAgICAgLy8gQWxsb3dpbmcgZm9yIHRoZSB0ZXJtaW5hbCBdIG9yIH0gYXQgdGhlIHNhbWUgKHJhdGhlciB0aGFuIGdyZWF0ZXIpXG4gICAgICAgICAgICAvLyBpbmRlbnQgbGV2ZWwgYXMgdGhlIGluaXRpYWwgWyBvciB7IGlzIHRlY2huaWNhbGx5IGludmFsaWQsIGJ1dFxuICAgICAgICAgICAgLy8gZmFpbGluZyBoZXJlIHdvdWxkIGJlIHN1cnByaXNpbmcgdG8gdXNlcnMuXG4gICAgICAgICAgICBjb25zdCBhdEZsb3dFbmRNYXJrZXIgPSBpbmRlbnQgPT09IHRoaXMuaW5kZW50TmV4dCAtIDEgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZXZlbCA9PT0gMSAmJlxuICAgICAgICAgICAgICAgIChsaW5lWzBdID09PSAnXScgfHwgbGluZVswXSA9PT0gJ30nKTtcbiAgICAgICAgICAgIGlmICghYXRGbG93RW5kTWFya2VyKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbiBlcnJvclxuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0xldmVsID0gMDtcbiAgICAgICAgICAgICAgICB5aWVsZCBGTE9XX0VORDtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VMaW5lU3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbiA9IDA7XG4gICAgICAgIHdoaWxlIChsaW5lW25dID09PSAnLCcpIHtcbiAgICAgICAgICAgIG4gKz0geWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAgICAgbiArPSB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbiArPSB5aWVsZCogdGhpcy5wdXNoSW5kaWNhdG9ycygpO1xuICAgICAgICBzd2l0Y2ggKGxpbmVbbl0pIHtcbiAgICAgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZmxvdyc7XG4gICAgICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndGggLSBuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93TGV2ZWwgKz0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZXZlbCAtPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZsb3dMZXZlbCA/ICdmbG93JyA6ICdkb2MnO1xuICAgICAgICAgICAgY2FzZSAnKic6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaFVudGlsKGlzTm90QW5jaG9yQ2hhcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VRdW90ZWRTY2FsYXIoKTtcbiAgICAgICAgICAgIGNhc2UgJzonOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuY2hhckF0KDEpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZsb3dLZXkgfHwgaXNFbXB0eShuZXh0KSB8fCBuZXh0ID09PSAnLCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VQbGFpblNjYWxhcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgICpwYXJzZVF1b3RlZFNjYWxhcigpIHtcbiAgICAgICAgY29uc3QgcXVvdGUgPSB0aGlzLmNoYXJBdCgwKTtcbiAgICAgICAgbGV0IGVuZCA9IHRoaXMuYnVmZmVyLmluZGV4T2YocXVvdGUsIHRoaXMucG9zICsgMSk7XG4gICAgICAgIGlmIChxdW90ZSA9PT0gXCInXCIpIHtcbiAgICAgICAgICAgIHdoaWxlIChlbmQgIT09IC0xICYmIHRoaXMuYnVmZmVyW2VuZCArIDFdID09PSBcIidcIilcbiAgICAgICAgICAgICAgICBlbmQgPSB0aGlzLmJ1ZmZlci5pbmRleE9mKFwiJ1wiLCBlbmQgKyAyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRvdWJsZS1xdW90ZVxuICAgICAgICAgICAgd2hpbGUgKGVuZCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsZXQgbiA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuYnVmZmVyW2VuZCAtIDEgLSBuXSA9PT0gJ1xcXFwnKVxuICAgICAgICAgICAgICAgICAgICBuICs9IDE7XG4gICAgICAgICAgICAgICAgaWYgKG4gJSAyID09PSAwKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBlbmQgPSB0aGlzLmJ1ZmZlci5pbmRleE9mKCdcIicsIGVuZCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE9ubHkgbG9va2luZyBmb3IgbmV3bGluZXMgd2l0aGluIHRoZSBxdW90ZXNcbiAgICAgICAgY29uc3QgcWIgPSB0aGlzLmJ1ZmZlci5zdWJzdHJpbmcoMCwgZW5kKTtcbiAgICAgICAgbGV0IG5sID0gcWIuaW5kZXhPZignXFxuJywgdGhpcy5wb3MpO1xuICAgICAgICBpZiAobmwgIT09IC0xKSB7XG4gICAgICAgICAgICB3aGlsZSAobmwgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3MgPSB0aGlzLmNvbnRpbnVlU2NhbGFyKG5sICsgMSk7XG4gICAgICAgICAgICAgICAgaWYgKGNzID09PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgbmwgPSBxYi5pbmRleE9mKCdcXG4nLCBjcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmwgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbiBlcnJvciBjYXVzZWQgYnkgYW4gdW5leHBlY3RlZCB1bmluZGVudFxuICAgICAgICAgICAgICAgIGVuZCA9IG5sIC0gKHFiW25sIC0gMV0gPT09ICdcXHInID8gMiA6IDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgncXVvdGVkLXNjYWxhcicpO1xuICAgICAgICAgICAgZW5kID0gdGhpcy5idWZmZXIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHlpZWxkKiB0aGlzLnB1c2hUb0luZGV4KGVuZCArIDEsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxvd0xldmVsID8gJ2Zsb3cnIDogJ2RvYyc7XG4gICAgfVxuICAgICpwYXJzZUJsb2NrU2NhbGFySGVhZGVyKCkge1xuICAgICAgICB0aGlzLmJsb2NrU2NhbGFySW5kZW50ID0gLTE7XG4gICAgICAgIHRoaXMuYmxvY2tTY2FsYXJLZWVwID0gZmFsc2U7XG4gICAgICAgIGxldCBpID0gdGhpcy5wb3M7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgICAgICBpZiAoY2ggPT09ICcrJylcbiAgICAgICAgICAgICAgICB0aGlzLmJsb2NrU2NhbGFyS2VlcCA9IHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChjaCA+ICcwJyAmJiBjaCA8PSAnOScpXG4gICAgICAgICAgICAgICAgdGhpcy5ibG9ja1NjYWxhckluZGVudCA9IE51bWJlcihjaCkgLSAxO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2ggIT09ICctJylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucHVzaFVudGlsKGNoID0+IGlzRW1wdHkoY2gpIHx8IGNoID09PSAnIycpO1xuICAgIH1cbiAgICAqcGFyc2VCbG9ja1NjYWxhcigpIHtcbiAgICAgICAgbGV0IG5sID0gdGhpcy5wb3MgLSAxOyAvLyBtYXkgYmUgLTEgaWYgdGhpcy5wb3MgPT09IDBcbiAgICAgICAgbGV0IGluZGVudCA9IDA7XG4gICAgICAgIGxldCBjaDtcbiAgICAgICAgbG9vcDogZm9yIChsZXQgaSA9IHRoaXMucG9zOyAoY2ggPSB0aGlzLmJ1ZmZlcltpXSk7ICsraSkge1xuICAgICAgICAgICAgc3dpdGNoIChjaCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJyAnOlxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgICAgICAgICAgbmwgPSBpO1xuICAgICAgICAgICAgICAgICAgICBpbmRlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdcXHInOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLmJ1ZmZlcltpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dCAmJiAhdGhpcy5hdEVuZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2Jsb2NrLXNjYWxhcicpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IC8vIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNoICYmICF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnYmxvY2stc2NhbGFyJyk7XG4gICAgICAgIGlmIChpbmRlbnQgPj0gdGhpcy5pbmRlbnROZXh0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ibG9ja1NjYWxhckluZGVudCA9PT0gLTEpXG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gaW5kZW50O1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibG9ja1NjYWxhckluZGVudCArICh0aGlzLmluZGVudE5leHQgPT09IDAgPyAxIDogdGhpcy5pbmRlbnROZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjcyA9IHRoaXMuY29udGludWVTY2FsYXIobmwgKyAxKTtcbiAgICAgICAgICAgICAgICBpZiAoY3MgPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBubCA9IHRoaXMuYnVmZmVyLmluZGV4T2YoJ1xcbicsIGNzKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKG5sICE9PSAtMSk7XG4gICAgICAgICAgICBpZiAobmwgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdibG9jay1zY2FsYXInKTtcbiAgICAgICAgICAgICAgICBubCA9IHRoaXMuYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUcmFpbGluZyBpbnN1ZmZpY2llbnRseSBpbmRlbnRlZCB0YWJzIGFyZSBpbnZhbGlkLlxuICAgICAgICAvLyBUbyBjYXRjaCB0aGF0IGR1cmluZyBwYXJzaW5nLCB3ZSBpbmNsdWRlIHRoZW0gaW4gdGhlIGJsb2NrIHNjYWxhciB2YWx1ZS5cbiAgICAgICAgbGV0IGkgPSBubCArIDE7XG4gICAgICAgIGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgIHdoaWxlIChjaCA9PT0gJyAnKVxuICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICBpZiAoY2ggPT09ICdcXHQnKSB7XG4gICAgICAgICAgICB3aGlsZSAoY2ggPT09ICdcXHQnIHx8IGNoID09PSAnICcgfHwgY2ggPT09ICdcXHInIHx8IGNoID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgICAgICBubCA9IGkgLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLmJsb2NrU2NhbGFyS2VlcCkge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGxldCBpID0gbmwgLSAxO1xuICAgICAgICAgICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xccicpXG4gICAgICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbLS1pXTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0Q2hhciA9IGk7IC8vIERyb3AgdGhlIGxpbmUgaWYgbGFzdCBjaGFyIG5vdCBtb3JlIGluZGVudGVkXG4gICAgICAgICAgICAgICAgd2hpbGUgKGNoID09PSAnICcpXG4gICAgICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbLS1pXTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXG4nICYmIGkgPj0gdGhpcy5wb3MgJiYgaSArIDEgKyBpbmRlbnQgPiBsYXN0Q2hhcilcbiAgICAgICAgICAgICAgICAgICAgbmwgPSBpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB5aWVsZCBTQ0FMQVI7XG4gICAgICAgIHlpZWxkKiB0aGlzLnB1c2hUb0luZGV4KG5sICsgMSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUxpbmVTdGFydCgpO1xuICAgIH1cbiAgICAqcGFyc2VQbGFpblNjYWxhcigpIHtcbiAgICAgICAgY29uc3QgaW5GbG93ID0gdGhpcy5mbG93TGV2ZWwgPiAwO1xuICAgICAgICBsZXQgZW5kID0gdGhpcy5wb3MgLSAxO1xuICAgICAgICBsZXQgaSA9IHRoaXMucG9zIC0gMTtcbiAgICAgICAgbGV0IGNoO1xuICAgICAgICB3aGlsZSAoKGNoID0gdGhpcy5idWZmZXJbKytpXSkpIHtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJzonKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuYnVmZmVyW2kgKyAxXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eShuZXh0KSB8fCAoaW5GbG93ICYmIGZsb3dJbmRpY2F0b3JDaGFycy5oYXMobmV4dCkpKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNFbXB0eShjaCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHRoaXMuYnVmZmVyW2kgKyAxXTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2ggPSAnXFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSB0aGlzLmJ1ZmZlcltpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgPT09ICcjJyB8fCAoaW5GbG93ICYmIGZsb3dJbmRpY2F0b3JDaGFycy5oYXMobmV4dCkpKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNzID0gdGhpcy5jb250aW51ZVNjYWxhcihpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjcyA9PT0gLTEpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgaSA9IE1hdGgubWF4KGksIGNzIC0gMik7IC8vIHRvIGFkdmFuY2UsIGJ1dCBzdGlsbCBhY2NvdW50IGZvciAnICMnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGluRmxvdyAmJiBmbG93SW5kaWNhdG9yQ2hhcnMuaGFzKGNoKSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNoICYmICF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgncGxhaW4tc2NhbGFyJyk7XG4gICAgICAgIHlpZWxkIFNDQUxBUjtcbiAgICAgICAgeWllbGQqIHRoaXMucHVzaFRvSW5kZXgoZW5kICsgMSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBpbkZsb3cgPyAnZmxvdycgOiAnZG9jJztcbiAgICB9XG4gICAgKnB1c2hDb3VudChuKSB7XG4gICAgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5idWZmZXIuc3Vic3RyKHRoaXMucG9zLCBuKTtcbiAgICAgICAgICAgIHRoaXMucG9zICs9IG47XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgKnB1c2hUb0luZGV4KGksIGFsbG93RW1wdHkpIHtcbiAgICAgICAgY29uc3QgcyA9IHRoaXMuYnVmZmVyLnNsaWNlKHRoaXMucG9zLCBpKTtcbiAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgIHlpZWxkIHM7XG4gICAgICAgICAgICB0aGlzLnBvcyArPSBzLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiBzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhbGxvd0VtcHR5KVxuICAgICAgICAgICAgeWllbGQgJyc7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAqcHVzaEluZGljYXRvcnMoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgIGNhc2UgJyEnOlxuICAgICAgICAgICAgICAgIHJldHVybiAoKHlpZWxkKiB0aGlzLnB1c2hUYWcoKSkgK1xuICAgICAgICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKSkgK1xuICAgICAgICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaEluZGljYXRvcnMoKSkpO1xuICAgICAgICAgICAgY2FzZSAnJic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoeWllbGQqIHRoaXMucHVzaFVudGlsKGlzTm90QW5jaG9yQ2hhcikpICtcbiAgICAgICAgICAgICAgICAgICAgKHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSkpICtcbiAgICAgICAgICAgICAgICAgICAgKHlpZWxkKiB0aGlzLnB1c2hJbmRpY2F0b3JzKCkpKTtcbiAgICAgICAgICAgIGNhc2UgJy0nOiAvLyB0aGlzIGlzIGFuIGVycm9yXG4gICAgICAgICAgICBjYXNlICc/JzogLy8gdGhpcyBpcyBhbiBlcnJvciBvdXRzaWRlIGZsb3cgY29sbGVjdGlvbnNcbiAgICAgICAgICAgIGNhc2UgJzonOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5GbG93ID0gdGhpcy5mbG93TGV2ZWwgPiAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoMSA9IHRoaXMuY2hhckF0KDEpO1xuICAgICAgICAgICAgICAgIGlmIChpc0VtcHR5KGNoMSkgfHwgKGluRmxvdyAmJiBmbG93SW5kaWNhdG9yQ2hhcnMuaGFzKGNoMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5GbG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gdGhpcy5pbmRlbnRWYWx1ZSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuZmxvd0tleSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh5aWVsZCogdGhpcy5wdXNoQ291bnQoMSkpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICh5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaEluZGljYXRvcnMoKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgKnB1c2hUYWcoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYXJBdCgxKSA9PT0gJzwnKSB7XG4gICAgICAgICAgICBsZXQgaSA9IHRoaXMucG9zICsgMjtcbiAgICAgICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICAgICAgd2hpbGUgKCFpc0VtcHR5KGNoKSAmJiBjaCAhPT0gJz4nKVxuICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoVG9JbmRleChjaCA9PT0gJz4nID8gaSArIDEgOiBpLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgaSA9IHRoaXMucG9zICsgMTtcbiAgICAgICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICAgICAgd2hpbGUgKGNoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhZ0NoYXJzLmhhcyhjaCkpXG4gICAgICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaCA9PT0gJyUnICYmXG4gICAgICAgICAgICAgICAgICAgIGhleERpZ2l0cy5oYXModGhpcy5idWZmZXJbaSArIDFdKSAmJlxuICAgICAgICAgICAgICAgICAgICBoZXhEaWdpdHMuaGFzKHRoaXMuYnVmZmVyW2kgKyAyXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsoaSArPSAzKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucHVzaFRvSW5kZXgoaSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgICpwdXNoTmV3bGluZSgpIHtcbiAgICAgICAgY29uc3QgY2ggPSB0aGlzLmJ1ZmZlclt0aGlzLnBvc107XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcbicpXG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJ1xccicgJiYgdGhpcy5jaGFyQXQoMSkgPT09ICdcXG4nKVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgyKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgICpwdXNoU3BhY2VzKGFsbG93VGFicykge1xuICAgICAgICBsZXQgaSA9IHRoaXMucG9zIC0gMTtcbiAgICAgICAgbGV0IGNoO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgIH0gd2hpbGUgKGNoID09PSAnICcgfHwgKGFsbG93VGFicyAmJiBjaCA9PT0gJ1xcdCcpKTtcbiAgICAgICAgY29uc3QgbiA9IGkgLSB0aGlzLnBvcztcbiAgICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmJ1ZmZlci5zdWJzdHIodGhpcy5wb3MsIG4pO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuO1xuICAgIH1cbiAgICAqcHVzaFVudGlsKHRlc3QpIHtcbiAgICAgICAgbGV0IGkgPSB0aGlzLnBvcztcbiAgICAgICAgbGV0IGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgIHdoaWxlICghdGVzdChjaCkpXG4gICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoVG9JbmRleChpLCBmYWxzZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBMZXhlciB9O1xuIiwiLyoqXG4gKiBUcmFja3MgbmV3bGluZXMgZHVyaW5nIHBhcnNpbmcgaW4gb3JkZXIgdG8gcHJvdmlkZSBhbiBlZmZpY2llbnQgQVBJIGZvclxuICogZGV0ZXJtaW5pbmcgdGhlIG9uZS1pbmRleGVkIGB7IGxpbmUsIGNvbCB9YCBwb3NpdGlvbiBmb3IgYW55IG9mZnNldFxuICogd2l0aGluIHRoZSBpbnB1dC5cbiAqL1xuY2xhc3MgTGluZUNvdW50ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxpbmVTdGFydHMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3VsZCBiZSBjYWxsZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIGNhbGxcbiAgICAgICAgICogYGxpbmVDb3VudGVyLmxpbmVTdGFydHMuc29ydCgpYCBiZWZvcmUgY2FsbGluZyBgbGluZVBvcygpYC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWRkTmV3TGluZSA9IChvZmZzZXQpID0+IHRoaXMubGluZVN0YXJ0cy5wdXNoKG9mZnNldCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggYW5kIHJldHVybnMgdGhlIDEtaW5kZXhlZCB7IGxpbmUsIGNvbCB9XG4gICAgICAgICAqIHBvc2l0aW9uIG9mIGBvZmZzZXRgLiBJZiBgbGluZSA9PT0gMGAsIGBhZGROZXdMaW5lYCBoYXMgbmV2ZXIgYmVlblxuICAgICAgICAgKiBjYWxsZWQgb3IgYG9mZnNldGAgaXMgYmVmb3JlIHRoZSBmaXJzdCBrbm93biBuZXdsaW5lLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5saW5lUG9zID0gKG9mZnNldCkgPT4ge1xuICAgICAgICAgICAgbGV0IGxvdyA9IDA7XG4gICAgICAgICAgICBsZXQgaGlnaCA9IHRoaXMubGluZVN0YXJ0cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pZCA9IChsb3cgKyBoaWdoKSA+PiAxOyAvLyBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGluZVN0YXJ0c1ttaWRdIDwgb2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxpbmVTdGFydHNbbG93XSA9PT0gb2Zmc2V0KVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGxpbmU6IGxvdyArIDEsIGNvbDogMSB9O1xuICAgICAgICAgICAgaWYgKGxvdyA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4geyBsaW5lOiAwLCBjb2w6IG9mZnNldCB9O1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLmxpbmVTdGFydHNbbG93IC0gMV07XG4gICAgICAgICAgICByZXR1cm4geyBsaW5lOiBsb3csIGNvbDogb2Zmc2V0IC0gc3RhcnQgKyAxIH07XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgeyBMaW5lQ291bnRlciB9O1xuIiwiaW1wb3J0IHsgdG9rZW5UeXBlIH0gZnJvbSAnLi9jc3QuanMnO1xuaW1wb3J0IHsgTGV4ZXIgfSBmcm9tICcuL2xleGVyLmpzJztcblxuZnVuY3Rpb24gaW5jbHVkZXNUb2tlbihsaXN0LCB0eXBlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKVxuICAgICAgICBpZiAobGlzdFtpXS50eXBlID09PSB0eXBlKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZmluZE5vbkVtcHR5SW5kZXgobGlzdCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICBzd2l0Y2ggKGxpc3RbaV0udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gaXNGbG93VG9rZW4odG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuPy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlvbic6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRQcmV2UHJvcHMocGFyZW50KSB7XG4gICAgc3dpdGNoIChwYXJlbnQudHlwZSkge1xuICAgICAgICBjYXNlICdkb2N1bWVudCc6XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LnN0YXJ0O1xuICAgICAgICBjYXNlICdibG9jay1tYXAnOiB7XG4gICAgICAgICAgICBjb25zdCBpdCA9IHBhcmVudC5pdGVtc1twYXJlbnQuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICByZXR1cm4gaXQuc2VwID8/IGl0LnN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50Lml0ZW1zW3BhcmVudC5pdGVtcy5sZW5ndGggLSAxXS5zdGFydDtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG4vKiogTm90ZTogTWF5IG1vZGlmeSBpbnB1dCBhcnJheSAqL1xuZnVuY3Rpb24gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKHByZXYpIHtcbiAgICBpZiAocHJldi5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiBbXTtcbiAgICBsZXQgaSA9IHByZXYubGVuZ3RoO1xuICAgIGxvb3A6IHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICBzd2l0Y2ggKHByZXZbaV0udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZG9jLXN0YXJ0JzpcbiAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOlxuICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICBjYXNlICdzZXEtaXRlbS1pbmQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAocHJldlsrK2ldPy50eXBlID09PSAnc3BhY2UnKSB7XG4gICAgICAgIC8qIGxvb3AgKi9cbiAgICB9XG4gICAgcmV0dXJuIHByZXYuc3BsaWNlKGksIHByZXYubGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGZpeEZsb3dTZXFJdGVtcyhmYykge1xuICAgIGlmIChmYy5zdGFydC50eXBlID09PSAnZmxvdy1zZXEtc3RhcnQnKSB7XG4gICAgICAgIGZvciAoY29uc3QgaXQgb2YgZmMuaXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpdC5zZXAgJiZcbiAgICAgICAgICAgICAgICAhaXQudmFsdWUgJiZcbiAgICAgICAgICAgICAgICAhaW5jbHVkZXNUb2tlbihpdC5zdGFydCwgJ2V4cGxpY2l0LWtleS1pbmQnKSAmJlxuICAgICAgICAgICAgICAgICFpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ21hcC12YWx1ZS1pbmQnKSkge1xuICAgICAgICAgICAgICAgIGlmIChpdC5rZXkpXG4gICAgICAgICAgICAgICAgICAgIGl0LnZhbHVlID0gaXQua2V5O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBpdC5rZXk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRmxvd1Rva2VuKGl0LnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUuZW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoaXQudmFsdWUuZW5kLCBpdC5zZXApO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC52YWx1ZS5lbmQgPSBpdC5zZXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoaXQuc3RhcnQsIGl0LnNlcCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGl0LnNlcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQSBZQU1MIGNvbmNyZXRlIHN5bnRheCB0cmVlIChDU1QpIHBhcnNlclxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBzcmM6IHN0cmluZyA9IC4uLlxuICogZm9yIChjb25zdCB0b2tlbiBvZiBuZXcgUGFyc2VyKCkucGFyc2Uoc3JjKSkge1xuICogICAvLyB0b2tlbjogVG9rZW5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRvIHVzZSB0aGUgcGFyc2VyIHdpdGggYSB1c2VyLXByb3ZpZGVkIGxleGVyOlxuICpcbiAqIGBgYHRzXG4gKiBmdW5jdGlvbiogcGFyc2Uoc291cmNlOiBzdHJpbmcsIGxleGVyOiBMZXhlcikge1xuICogICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKClcbiAqICAgZm9yIChjb25zdCBsZXhlbWUgb2YgbGV4ZXIubGV4KHNvdXJjZSkpXG4gKiAgICAgeWllbGQqIHBhcnNlci5uZXh0KGxleGVtZSlcbiAqICAgeWllbGQqIHBhcnNlci5lbmQoKVxuICogfVxuICpcbiAqIGNvbnN0IHNyYzogc3RyaW5nID0gLi4uXG4gKiBjb25zdCBsZXhlciA9IG5ldyBMZXhlcigpXG4gKiBmb3IgKGNvbnN0IHRva2VuIG9mIHBhcnNlKHNyYywgbGV4ZXIpKSB7XG4gKiAgIC8vIHRva2VuOiBUb2tlblxuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIFBhcnNlciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG9uTmV3TGluZSAtIElmIGRlZmluZWQsIGNhbGxlZCBzZXBhcmF0ZWx5IHdpdGggdGhlIHN0YXJ0IHBvc2l0aW9uIG9mXG4gICAgICogICBlYWNoIG5ldyBsaW5lIChpbiBgcGFyc2UoKWAsIGluY2x1ZGluZyB0aGUgc3RhcnQgb2YgaW5wdXQpLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9uTmV3TGluZSkge1xuICAgICAgICAvKiogSWYgdHJ1ZSwgc3BhY2UgYW5kIHNlcXVlbmNlIGluZGljYXRvcnMgY291bnQgYXMgaW5kZW50YXRpb24gKi9cbiAgICAgICAgdGhpcy5hdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICAvKiogSWYgdHJ1ZSwgbmV4dCB0b2tlbiBpcyBhIHNjYWxhciB2YWx1ZSAqL1xuICAgICAgICB0aGlzLmF0U2NhbGFyID0gZmFsc2U7XG4gICAgICAgIC8qKiBDdXJyZW50IGluZGVudGF0aW9uIGxldmVsICovXG4gICAgICAgIHRoaXMuaW5kZW50ID0gMDtcbiAgICAgICAgLyoqIEN1cnJlbnQgb2Zmc2V0IHNpbmNlIHRoZSBzdGFydCBvZiBwYXJzaW5nICovXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgLyoqIE9uIHRoZSBzYW1lIGxpbmUgd2l0aCBhIGJsb2NrIG1hcCBrZXkgKi9cbiAgICAgICAgdGhpcy5vbktleUxpbmUgPSBmYWxzZTtcbiAgICAgICAgLyoqIFRvcCBpbmRpY2F0ZXMgdGhlIG5vZGUgdGhhdCdzIGN1cnJlbnRseSBiZWluZyBidWlsdCAqL1xuICAgICAgICB0aGlzLnN0YWNrID0gW107XG4gICAgICAgIC8qKiBUaGUgc291cmNlIG9mIHRoZSBjdXJyZW50IHRva2VuLCBzZXQgaW4gcGFyc2UoKSAqL1xuICAgICAgICB0aGlzLnNvdXJjZSA9ICcnO1xuICAgICAgICAvKiogVGhlIHR5cGUgb2YgdGhlIGN1cnJlbnQgdG9rZW4sIHNldCBpbiBwYXJzZSgpICovXG4gICAgICAgIHRoaXMudHlwZSA9ICcnO1xuICAgICAgICAvLyBNdXN0IGJlIGRlZmluZWQgYWZ0ZXIgYG5leHQoKWBcbiAgICAgICAgdGhpcy5sZXhlciA9IG5ldyBMZXhlcigpO1xuICAgICAgICB0aGlzLm9uTmV3TGluZSA9IG9uTmV3TGluZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgYHNvdXJjZWAgYXMgYSBZQU1MIHN0cmVhbS5cbiAgICAgKiBJZiBgaW5jb21wbGV0ZWAsIGEgcGFydCBvZiB0aGUgbGFzdCBsaW5lIG1heSBiZSBsZWZ0IGFzIGEgYnVmZmVyIGZvciB0aGUgbmV4dCBjYWxsLlxuICAgICAqXG4gICAgICogRXJyb3JzIGFyZSBub3QgdGhyb3duLCBidXQgeWllbGRlZCBhcyBgeyB0eXBlOiAnZXJyb3InLCBtZXNzYWdlIH1gIHRva2Vucy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgZ2VuZXJhdG9yIG9mIHRva2VucyByZXByZXNlbnRpbmcgZWFjaCBkaXJlY3RpdmUsIGRvY3VtZW50LCBhbmQgb3RoZXIgc3RydWN0dXJlLlxuICAgICAqL1xuICAgICpwYXJzZShzb3VyY2UsIGluY29tcGxldGUgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5vbk5ld0xpbmUgJiYgdGhpcy5vZmZzZXQgPT09IDApXG4gICAgICAgICAgICB0aGlzLm9uTmV3TGluZSgwKTtcbiAgICAgICAgZm9yIChjb25zdCBsZXhlbWUgb2YgdGhpcy5sZXhlci5sZXgoc291cmNlLCBpbmNvbXBsZXRlKSlcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLm5leHQobGV4ZW1lKTtcbiAgICAgICAgaWYgKCFpbmNvbXBsZXRlKVxuICAgICAgICAgICAgeWllbGQqIHRoaXMuZW5kKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkdmFuY2UgdGhlIHBhcnNlciBieSB0aGUgYHNvdXJjZWAgb2Ygb25lIGxleGljYWwgdG9rZW4uXG4gICAgICovXG4gICAgKm5leHQoc291cmNlKSB7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBpZiAodGhpcy5hdFNjYWxhcikge1xuICAgICAgICAgICAgdGhpcy5hdFNjYWxhciA9IGZhbHNlO1xuICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eXBlID0gdG9rZW5UeXBlKHNvdXJjZSk7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBOb3QgYSBZQU1MIHRva2VuOiAke3NvdXJjZX1gO1xuICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKHsgdHlwZTogJ2Vycm9yJywgb2Zmc2V0OiB0aGlzLm9mZnNldCwgbWVzc2FnZSwgc291cmNlIH0pO1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnc2NhbGFyJykge1xuICAgICAgICAgICAgdGhpcy5hdE5ld0xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuYXRTY2FsYXIgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy50eXBlID0gJ3NjYWxhcic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXROZXdMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbk5ld0xpbmUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uTmV3TGluZSh0aGlzLm9mZnNldCArIHNvdXJjZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0TmV3TGluZSAmJiBzb3VyY2VbMF0gPT09ICcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50ICs9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21hcC12YWx1ZS1pbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NlcS1pdGVtLWluZCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0TmV3TGluZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50ICs9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RvYy1tb2RlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdmbG93LWVycm9yLWVuZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0TmV3TGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQ2FsbCBhdCBlbmQgb2YgaW5wdXQgdG8gcHVzaCBvdXQgYW55IHJlbWFpbmluZyBjb25zdHJ1Y3Rpb25zICovXG4gICAgKmVuZCgpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuc3RhY2subGVuZ3RoID4gMClcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgIH1cbiAgICBnZXQgc291cmNlVG9rZW4oKSB7XG4gICAgICAgIGNvbnN0IHN0ID0ge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzdDtcbiAgICB9XG4gICAgKnN0ZXAoKSB7XG4gICAgICAgIGNvbnN0IHRvcCA9IHRoaXMucGVlaygxKTtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2RvYy1lbmQnICYmICghdG9wIHx8IHRvcC50eXBlICE9PSAnZG9jLWVuZCcpKSB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5zdGFjay5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZG9jLWVuZCcsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRvcClcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5zdHJlYW0oKTtcbiAgICAgICAgc3dpdGNoICh0b3AudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5kb2N1bWVudCh0b3ApO1xuICAgICAgICAgICAgY2FzZSAnYWxpYXMnOlxuICAgICAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuc2NhbGFyKHRvcCk7XG4gICAgICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5ibG9ja1NjYWxhcih0b3ApO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stbWFwJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuYmxvY2tNYXAodG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmJsb2NrU2VxdWVuY2UodG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlvbic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmZsb3dDb2xsZWN0aW9uKHRvcCk7XG4gICAgICAgICAgICBjYXNlICdkb2MtZW5kJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuZG9jdW1lbnRFbmQodG9wKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICB9XG4gICAgcGVlayhuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gbl07XG4gICAgfVxuICAgICpwb3AoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBlcnJvciA/PyB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdUcmllZCB0byBwb3AgYW4gZW1wdHkgc3RhY2snO1xuICAgICAgICAgICAgeWllbGQgeyB0eXBlOiAnZXJyb3InLCBvZmZzZXQ6IHRoaXMub2Zmc2V0LCBzb3VyY2U6ICcnLCBtZXNzYWdlIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHlpZWxkIHRva2VuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdG9wID0gdGhpcy5wZWVrKDEpO1xuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdibG9jay1zY2FsYXInKSB7XG4gICAgICAgICAgICAgICAgLy8gQmxvY2sgc2NhbGFycyB1c2UgdGhlaXIgcGFyZW50IHJhdGhlciB0aGFuIGhlYWRlciBpbmRlbnRcbiAgICAgICAgICAgICAgICB0b2tlbi5pbmRlbnQgPSAnaW5kZW50JyBpbiB0b3AgPyB0b3AuaW5kZW50IDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdmbG93LWNvbGxlY3Rpb24nICYmIHRvcC50eXBlID09PSAnZG9jdW1lbnQnKSB7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIGFsbCBpbmRlbnQgZm9yIHRvcC1sZXZlbCBmbG93IGNvbGxlY3Rpb25zXG4gICAgICAgICAgICAgICAgdG9rZW4uaW5kZW50ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAnZmxvdy1jb2xsZWN0aW9uJylcbiAgICAgICAgICAgICAgICBmaXhGbG93U2VxSXRlbXModG9rZW4pO1xuICAgICAgICAgICAgc3dpdGNoICh0b3AudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RvY3VtZW50JzpcbiAgICAgICAgICAgICAgICAgICAgdG9wLnZhbHVlID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgICAgIHRvcC5wcm9wcy5wdXNoKHRva2VuKTsgLy8gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYmxvY2stbWFwJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdCA9IHRvcC5pdGVtc1t0b3AuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wLml0ZW1zLnB1c2goeyBzdGFydDogW10sIGtleTogdG9rZW4sIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC52YWx1ZSA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IHRva2VuLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSAhaXQuZXhwbGljaXRLZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXQgPSB0b3AuaXRlbXNbdG9wLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwgdmFsdWU6IHRva2VuIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC52YWx1ZSA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdCA9IHRvcC5pdGVtc1t0b3AuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXQgfHwgaXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwga2V5OiB0b2tlbiwgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQudmFsdWUgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IHRva2VuLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRvcC50eXBlID09PSAnZG9jdW1lbnQnIHx8XG4gICAgICAgICAgICAgICAgdG9wLnR5cGUgPT09ICdibG9jay1tYXAnIHx8XG4gICAgICAgICAgICAgICAgdG9wLnR5cGUgPT09ICdibG9jay1zZXEnKSAmJlxuICAgICAgICAgICAgICAgICh0b2tlbi50eXBlID09PSAnYmxvY2stbWFwJyB8fCB0b2tlbi50eXBlID09PSAnYmxvY2stc2VxJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gdG9rZW4uaXRlbXNbdG9rZW4uaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGxhc3QgJiZcbiAgICAgICAgICAgICAgICAgICAgIWxhc3Quc2VwICYmXG4gICAgICAgICAgICAgICAgICAgICFsYXN0LnZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgIGxhc3Quc3RhcnQubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmaW5kTm9uRW1wdHlJbmRleChsYXN0LnN0YXJ0KSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgKHRva2VuLmluZGVudCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdC5zdGFydC5ldmVyeShzdCA9PiBzdC50eXBlICE9PSAnY29tbWVudCcgfHwgc3QuaW5kZW50IDwgdG9rZW4uaW5kZW50KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvcC50eXBlID09PSAnZG9jdW1lbnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wLmVuZCA9IGxhc3Quc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcC5pdGVtcy5wdXNoKHsgc3RhcnQ6IGxhc3Quc3RhcnQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuLml0ZW1zLnNwbGljZSgtMSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgICpzdHJlYW0oKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdkaXJlY3RpdmUtbGluZSc6XG4gICAgICAgICAgICAgICAgeWllbGQgeyB0eXBlOiAnZGlyZWN0aXZlJywgb2Zmc2V0OiB0aGlzLm9mZnNldCwgc291cmNlOiB0aGlzLnNvdXJjZSB9O1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ2J5dGUtb3JkZXItbWFyayc6XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuc291cmNlVG9rZW47XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnZG9jLW1vZGUnOlxuICAgICAgICAgICAgY2FzZSAnZG9jLXN0YXJ0Jzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RvY3VtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50eXBlID09PSAnZG9jLXN0YXJ0JylcbiAgICAgICAgICAgICAgICAgICAgZG9jLnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGRvYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHlpZWxkIHtcbiAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgbWVzc2FnZTogYFVuZXhwZWN0ZWQgJHt0aGlzLnR5cGV9IHRva2VuIGluIFlBTUwgc3RyZWFtYCxcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2VcbiAgICAgICAgfTtcbiAgICB9XG4gICAgKmRvY3VtZW50KGRvYykge1xuICAgICAgICBpZiAoZG9jLnZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmxpbmVFbmQoZG9jKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2RvYy1zdGFydCc6IHtcbiAgICAgICAgICAgICAgICBpZiAoZmluZE5vbkVtcHR5SW5kZXgoZG9jLnN0YXJ0KSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkb2Muc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdhbmNob3InOlxuICAgICAgICAgICAgY2FzZSAndGFnJzpcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgZG9jLnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ2ID0gdGhpcy5zdGFydEJsb2NrVmFsdWUoZG9jKTtcbiAgICAgICAgaWYgKGJ2KVxuICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGJ2KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB5aWVsZCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBVbmV4cGVjdGVkICR7dGhpcy50eXBlfSB0b2tlbiBpbiBZQU1MIGRvY3VtZW50YCxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgICpzY2FsYXIoc2NhbGFyKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdtYXAtdmFsdWUtaW5kJykge1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IGdldFByZXZQcm9wcyh0aGlzLnBlZWsoMikpO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBnZXRGaXJzdEtleVN0YXJ0UHJvcHMocHJldik7XG4gICAgICAgICAgICBsZXQgc2VwO1xuICAgICAgICAgICAgaWYgKHNjYWxhci5lbmQpIHtcbiAgICAgICAgICAgICAgICBzZXAgPSBzY2FsYXIuZW5kO1xuICAgICAgICAgICAgICAgIHNlcC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzY2FsYXIuZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHNlcCA9IFt0aGlzLnNvdXJjZVRva2VuXTtcbiAgICAgICAgICAgIGNvbnN0IG1hcCA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHNjYWxhci5vZmZzZXQsXG4gICAgICAgICAgICAgICAgaW5kZW50OiBzY2FsYXIuaW5kZW50LFxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5OiBzY2FsYXIsIHNlcCB9XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXSA9IG1hcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB5aWVsZCogdGhpcy5saW5lRW5kKHNjYWxhcik7XG4gICAgfVxuICAgICpibG9ja1NjYWxhcihzY2FsYXIpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgc2NhbGFyLnByb3BzLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgICAgICBzY2FsYXIuc291cmNlID0gdGhpcy5zb3VyY2U7XG4gICAgICAgICAgICAgICAgLy8gYmxvY2stc2NhbGFyIHNvdXJjZSBpbmNsdWRlcyB0cmFpbGluZyBuZXdsaW5lXG4gICAgICAgICAgICAgICAgdGhpcy5hdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50ID0gMDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbk5ld0xpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5sID0gdGhpcy5zb3VyY2UuaW5kZXhPZignXFxuJykgKyAxO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmwgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25OZXdMaW5lKHRoaXMub2Zmc2V0ICsgbmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmwgPSB0aGlzLnNvdXJjZS5pbmRleE9mKCdcXG4nLCBubCkgKyAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgICpibG9ja01hcChtYXApIHtcbiAgICAgICAgY29uc3QgaXQgPSBtYXAuaXRlbXNbbWFwLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAvLyBpdC5zZXAgaXMgdHJ1ZS1pc2ggaWYgcGFpciBhbHJlYWR5IGhhcyBrZXkgb3IgOiBzZXBhcmF0b3JcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9ICdlbmQnIGluIGl0LnZhbHVlID8gaXQudmFsdWUuZW5kIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gQXJyYXkuaXNBcnJheShlbmQpID8gZW5kW2VuZC5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3Q/LnR5cGUgPT09ICdjb21tZW50JylcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZD8ucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdEluZGVudGVkQ29tbWVudChpdC5zdGFydCwgbWFwLmluZGVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBtYXAuaXRlbXNbbWFwLml0ZW1zLmxlbmd0aCAtIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gcHJldj8udmFsdWU/LmVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVuZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShlbmQsIGl0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmRlbnQgPj0gbWFwLmluZGVudCkge1xuICAgICAgICAgICAgY29uc3QgYXRNYXBJbmRlbnQgPSAhdGhpcy5vbktleUxpbmUgJiYgdGhpcy5pbmRlbnQgPT09IG1hcC5pbmRlbnQ7XG4gICAgICAgICAgICBjb25zdCBhdE5leHRJdGVtID0gYXRNYXBJbmRlbnQgJiZcbiAgICAgICAgICAgICAgICAoaXQuc2VwIHx8IGl0LmV4cGxpY2l0S2V5KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMudHlwZSAhPT0gJ3NlcS1pdGVtLWluZCc7XG4gICAgICAgICAgICAvLyBGb3IgZW1wdHkgbm9kZXMsIGFzc2lnbiBuZXdsaW5lLXNlcGFyYXRlZCBub3QgaW5kZW50ZWQgZW1wdHkgdG9rZW5zIHRvIGZvbGxvd2luZyBub2RlXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBbXTtcbiAgICAgICAgICAgIGlmIChhdE5leHRJdGVtICYmIGl0LnNlcCAmJiAhaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBubCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXQuc2VwLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0ID0gaXQuc2VwW2ldO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5sLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3QuaW5kZW50ID4gbWFwLmluZGVudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmwubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmwubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmwubGVuZ3RoID49IDIpXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaXQuc2VwLnNwbGljZShubFsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FuY2hvcic6XG4gICAgICAgICAgICAgICAgY2FzZSAndGFnJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0TmV4dEl0ZW0gfHwgaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlICdleHBsaWNpdC1rZXktaW5kJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdC5zZXAgJiYgIWl0LmV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQuZXhwbGljaXRLZXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGF0TmV4dEl0ZW0gfHwgaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0LCBleHBsaWNpdEtleTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dLCBleHBsaWNpdEtleTogdHJ1ZSB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC5leHBsaWNpdEtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZXNUb2tlbihpdC5zdGFydCwgJ25ld2xpbmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhpdC5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydDogW10sIGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ21hcC12YWx1ZS1pbmQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzRmxvd1Rva2VuKGl0LmtleSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaW5jbHVkZXNUb2tlbihpdC5zZXAsICduZXdsaW5lJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhpdC5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gaXQua2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlcCA9IGl0LnNlcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHR5cGUgZ3VhcmQgaXMgd3JvbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBpdC5rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0eXBlIGd1YXJkIGlzIHdyb25nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaXQuc2VwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGtleSwgc2VwIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGFydC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90IGFjdHVhbGx5IGF0IG5leHQgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0LnNlcCA9IGl0LnNlcC5jb25jYXQoc3RhcnQsIHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnZhbHVlIHx8IGF0TmV4dEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0LCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5jbHVkZXNUb2tlbihpdC5zZXAsICdtYXAtdmFsdWUtaW5kJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0OiBbXSwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnYWxpYXMnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcyA9IHRoaXMuZmxvd1NjYWxhcih0aGlzLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXROZXh0SXRlbSB8fCBpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydCwga2V5OiBmcywgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChmcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogZnMsIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ2ID0gdGhpcy5zdGFydEJsb2NrVmFsdWUobWFwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXRNYXBJbmRlbnQgJiYgYnYudHlwZSAhPT0gJ2Jsb2NrLXNlcScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGJ2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgIH1cbiAgICAqYmxvY2tTZXF1ZW5jZShzZXEpIHtcbiAgICAgICAgY29uc3QgaXQgPSBzZXEuaXRlbXNbc2VxLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9ICdlbmQnIGluIGl0LnZhbHVlID8gaXQudmFsdWUuZW5kIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gQXJyYXkuaXNBcnJheShlbmQpID8gZW5kW2VuZC5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3Q/LnR5cGUgPT09ICdjb21tZW50JylcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZD8ucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBzZXEuaXRlbXMucHVzaCh7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0SW5kZW50ZWRDb21tZW50KGl0LnN0YXJ0LCBzZXEuaW5kZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IHNlcS5pdGVtc1tzZXEuaXRlbXMubGVuZ3RoIC0gMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBwcmV2Py52YWx1ZT8uZW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZW5kKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVuZCwgaXQuc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcS5pdGVtcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnYW5jaG9yJzpcbiAgICAgICAgICAgIGNhc2UgJ3RhZyc6XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlIHx8IHRoaXMuaW5kZW50IDw9IHNlcS5pbmRlbnQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnc2VxLWl0ZW0taW5kJzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmRlbnQgIT09IHNlcS5pbmRlbnQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSB8fCBpbmNsdWRlc1Rva2VuKGl0LnN0YXJ0LCAnc2VxLWl0ZW0taW5kJykpXG4gICAgICAgICAgICAgICAgICAgIHNlcS5pdGVtcy5wdXNoKHsgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluZGVudCA+IHNlcS5pbmRlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ2ID0gdGhpcy5zdGFydEJsb2NrVmFsdWUoc2VxKTtcbiAgICAgICAgICAgIGlmIChidikge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChidik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgfVxuICAgICpmbG93Q29sbGVjdGlvbihmYykge1xuICAgICAgICBjb25zdCBpdCA9IGZjLml0ZW1zW2ZjLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnZmxvdy1lcnJvci1lbmQnKSB7XG4gICAgICAgICAgICBsZXQgdG9wO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHRvcCA9IHRoaXMucGVlaygxKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKHRvcCAmJiB0b3AudHlwZSA9PT0gJ2Zsb3ctY29sbGVjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZjLmVuZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tbWEnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWl0IHx8IGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgICAgIGZjLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXQgfHwgaXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBmYy5pdGVtcy5wdXNoKHsgc3RhcnQ6IFtdLCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2FuY2hvcic6XG4gICAgICAgICAgICAgICAgY2FzZSAndGFnJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdCB8fCBpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZjLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnMgPSB0aGlzLmZsb3dTY2FsYXIodGhpcy50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdCB8fCBpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZjLml0ZW1zLnB1c2goeyBzdGFydDogW10sIGtleTogZnMsIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChmcyk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiBmcywgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdmbG93LW1hcC1lbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb3ctc2VxLWVuZCc6XG4gICAgICAgICAgICAgICAgICAgIGZjLmVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBidiA9IHRoaXMuc3RhcnRCbG9ja1ZhbHVlKGZjKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlIHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgICAgICBpZiAoYnYpXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGJ2KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMucGVlaygyKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ2Jsb2NrLW1hcCcgJiZcbiAgICAgICAgICAgICAgICAoKHRoaXMudHlwZSA9PT0gJ21hcC12YWx1ZS1pbmQnICYmIHBhcmVudC5pbmRlbnQgPT09IGZjLmluZGVudCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMudHlwZSA9PT0gJ25ld2xpbmUnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhcGFyZW50Lml0ZW1zW3BhcmVudC5pdGVtcy5sZW5ndGggLSAxXS5zZXApKSkge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ21hcC12YWx1ZS1pbmQnICYmXG4gICAgICAgICAgICAgICAgcGFyZW50LnR5cGUgIT09ICdmbG93LWNvbGxlY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IGdldFByZXZQcm9wcyhwYXJlbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKHByZXYpO1xuICAgICAgICAgICAgICAgIGZpeEZsb3dTZXFJdGVtcyhmYyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VwID0gZmMuZW5kLnNwbGljZSgxLCBmYy5lbmQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBzZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IGZjLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50OiBmYy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5OiBmYywgc2VwIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdID0gbWFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMubGluZUVuZChmYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmxvd1NjYWxhcih0eXBlKSB7XG4gICAgICAgIGlmICh0aGlzLm9uTmV3TGluZSkge1xuICAgICAgICAgICAgbGV0IG5sID0gdGhpcy5zb3VyY2UuaW5kZXhPZignXFxuJykgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKG5sICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbk5ld0xpbmUodGhpcy5vZmZzZXQgKyBubCk7XG4gICAgICAgICAgICAgICAgbmwgPSB0aGlzLnNvdXJjZS5pbmRleE9mKCdcXG4nLCBubCkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXJ0QmxvY2tWYWx1ZShwYXJlbnQpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1NjYWxhcih0aGlzLnR5cGUpO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyLWhlYWRlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLXNjYWxhcicsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIHByb3BzOiBbdGhpcy5zb3VyY2VUb2tlbl0sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJydcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnZmxvdy1tYXAtc3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnZmxvdy1zZXEtc3RhcnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmbG93LWNvbGxlY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5zb3VyY2VUb2tlbixcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ3NlcS1pdGVtLWluZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLXNlcScsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBnZXRQcmV2UHJvcHMocGFyZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhwcmV2KTtcbiAgICAgICAgICAgICAgICBzdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGV4cGxpY2l0S2V5OiB0cnVlIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ21hcC12YWx1ZS1pbmQnOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBnZXRQcmV2UHJvcHMocGFyZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhwcmV2KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXRJbmRlbnRlZENvbW1lbnQoc3RhcnQsIGluZGVudCkge1xuICAgICAgICBpZiAodGhpcy50eXBlICE9PSAnY29tbWVudCcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmluZGVudCA8PSBpbmRlbnQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBzdGFydC5ldmVyeShzdCA9PiBzdC50eXBlID09PSAnbmV3bGluZScgfHwgc3QudHlwZSA9PT0gJ3NwYWNlJyk7XG4gICAgfVxuICAgICpkb2N1bWVudEVuZChkb2NFbmQpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ2RvYy1tb2RlJykge1xuICAgICAgICAgICAgaWYgKGRvY0VuZC5lbmQpXG4gICAgICAgICAgICAgICAgZG9jRW5kLmVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRvY0VuZC5lbmQgPSBbdGhpcy5zb3VyY2VUb2tlbl07XG4gICAgICAgICAgICBpZiAodGhpcy50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKmxpbmVFbmQodG9rZW4pIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1hJzpcbiAgICAgICAgICAgIGNhc2UgJ2RvYy1zdGFydCc6XG4gICAgICAgICAgICBjYXNlICdkb2MtZW5kJzpcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3ctc2VxLWVuZCc6XG4gICAgICAgICAgICBjYXNlICdmbG93LW1hcC1lbmQnOlxuICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gYWxsIG90aGVyIHZhbHVlcyBhcmUgZXJyb3JzXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uZW5kLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0b2tlbi5lbmQgPSBbdGhpcy5zb3VyY2VUb2tlbl07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgUGFyc2VyIH07XG4iLCJpbXBvcnQgeyBDb21wb3NlciB9IGZyb20gJy4vY29tcG9zZS9jb21wb3Nlci5qcyc7XG5pbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gJy4vZG9jL0RvY3VtZW50LmpzJztcbmltcG9ydCB7IHByZXR0aWZ5RXJyb3IsIFlBTUxQYXJzZUVycm9yIH0gZnJvbSAnLi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4vbG9nLmpzJztcbmltcG9ydCB7IGlzRG9jdW1lbnQgfSBmcm9tICcuL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IExpbmVDb3VudGVyIH0gZnJvbSAnLi9wYXJzZS9saW5lLWNvdW50ZXIuanMnO1xuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSAnLi9wYXJzZS9wYXJzZXIuanMnO1xuXG5mdW5jdGlvbiBwYXJzZU9wdGlvbnMob3B0aW9ucykge1xuICAgIGNvbnN0IHByZXR0eUVycm9ycyA9IG9wdGlvbnMucHJldHR5RXJyb3JzICE9PSBmYWxzZTtcbiAgICBjb25zdCBsaW5lQ291bnRlciA9IG9wdGlvbnMubGluZUNvdW50ZXIgfHwgKHByZXR0eUVycm9ycyAmJiBuZXcgTGluZUNvdW50ZXIoKSkgfHwgbnVsbDtcbiAgICByZXR1cm4geyBsaW5lQ291bnRlciwgcHJldHR5RXJyb3JzIH07XG59XG4vKipcbiAqIFBhcnNlIHRoZSBpbnB1dCBhcyBhIHN0cmVhbSBvZiBZQU1MIGRvY3VtZW50cy5cbiAqXG4gKiBEb2N1bWVudHMgc2hvdWxkIGJlIHNlcGFyYXRlZCBmcm9tIGVhY2ggb3RoZXIgYnkgYC4uLmAgb3IgYC0tLWAgbWFya2VyIGxpbmVzLlxuICpcbiAqIEByZXR1cm5zIElmIGFuIGVtcHR5IGBkb2NzYCBhcnJheSBpcyByZXR1cm5lZCwgaXQgd2lsbCBiZSBvZiB0eXBlXG4gKiAgIEVtcHR5U3RyZWFtIGFuZCBjb250YWluIGFkZGl0aW9uYWwgc3RyZWFtIGluZm9ybWF0aW9uLiBJblxuICogICBUeXBlU2NyaXB0LCB5b3Ugc2hvdWxkIHVzZSBgJ2VtcHR5JyBpbiBkb2NzYCBhcyBhIHR5cGUgZ3VhcmQgZm9yIGl0LlxuICovXG5mdW5jdGlvbiBwYXJzZUFsbERvY3VtZW50cyhzb3VyY2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgbGluZUNvdW50ZXIsIHByZXR0eUVycm9ycyB9ID0gcGFyc2VPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIobGluZUNvdW50ZXI/LmFkZE5ld0xpbmUpO1xuICAgIGNvbnN0IGNvbXBvc2VyID0gbmV3IENvbXBvc2VyKG9wdGlvbnMpO1xuICAgIGNvbnN0IGRvY3MgPSBBcnJheS5mcm9tKGNvbXBvc2VyLmNvbXBvc2UocGFyc2VyLnBhcnNlKHNvdXJjZSkpKTtcbiAgICBpZiAocHJldHR5RXJyb3JzICYmIGxpbmVDb3VudGVyKVxuICAgICAgICBmb3IgKGNvbnN0IGRvYyBvZiBkb2NzKSB7XG4gICAgICAgICAgICBkb2MuZXJyb3JzLmZvckVhY2gocHJldHRpZnlFcnJvcihzb3VyY2UsIGxpbmVDb3VudGVyKSk7XG4gICAgICAgICAgICBkb2Mud2FybmluZ3MuZm9yRWFjaChwcmV0dGlmeUVycm9yKHNvdXJjZSwgbGluZUNvdW50ZXIpKTtcbiAgICAgICAgfVxuICAgIGlmIChkb2NzLmxlbmd0aCA+IDApXG4gICAgICAgIHJldHVybiBkb2NzO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFtdLCB7IGVtcHR5OiB0cnVlIH0sIGNvbXBvc2VyLnN0cmVhbUluZm8oKSk7XG59XG4vKiogUGFyc2UgYW4gaW5wdXQgc3RyaW5nIGludG8gYSBzaW5nbGUgWUFNTC5Eb2N1bWVudCAqL1xuZnVuY3Rpb24gcGFyc2VEb2N1bWVudChzb3VyY2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgbGluZUNvdW50ZXIsIHByZXR0eUVycm9ycyB9ID0gcGFyc2VPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIobGluZUNvdW50ZXI/LmFkZE5ld0xpbmUpO1xuICAgIGNvbnN0IGNvbXBvc2VyID0gbmV3IENvbXBvc2VyKG9wdGlvbnMpO1xuICAgIC8vIGBkb2NgIGlzIGFsd2F5cyBzZXQgYnkgY29tcG9zZS5lbmQodHJ1ZSkgYXQgdGhlIHZlcnkgbGF0ZXN0XG4gICAgbGV0IGRvYyA9IG51bGw7XG4gICAgZm9yIChjb25zdCBfZG9jIG9mIGNvbXBvc2VyLmNvbXBvc2UocGFyc2VyLnBhcnNlKHNvdXJjZSksIHRydWUsIHNvdXJjZS5sZW5ndGgpKSB7XG4gICAgICAgIGlmICghZG9jKVxuICAgICAgICAgICAgZG9jID0gX2RvYztcbiAgICAgICAgZWxzZSBpZiAoZG9jLm9wdGlvbnMubG9nTGV2ZWwgIT09ICdzaWxlbnQnKSB7XG4gICAgICAgICAgICBkb2MuZXJyb3JzLnB1c2gobmV3IFlBTUxQYXJzZUVycm9yKF9kb2MucmFuZ2Uuc2xpY2UoMCwgMiksICdNVUxUSVBMRV9ET0NTJywgJ1NvdXJjZSBjb250YWlucyBtdWx0aXBsZSBkb2N1bWVudHM7IHBsZWFzZSB1c2UgWUFNTC5wYXJzZUFsbERvY3VtZW50cygpJykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByZXR0eUVycm9ycyAmJiBsaW5lQ291bnRlcikge1xuICAgICAgICBkb2MuZXJyb3JzLmZvckVhY2gocHJldHRpZnlFcnJvcihzb3VyY2UsIGxpbmVDb3VudGVyKSk7XG4gICAgICAgIGRvYy53YXJuaW5ncy5mb3JFYWNoKHByZXR0aWZ5RXJyb3Ioc291cmNlLCBsaW5lQ291bnRlcikpO1xuICAgIH1cbiAgICByZXR1cm4gZG9jO1xufVxuZnVuY3Rpb24gcGFyc2Uoc3JjLCByZXZpdmVyLCBvcHRpb25zKSB7XG4gICAgbGV0IF9yZXZpdmVyID0gdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBfcmV2aXZlciA9IHJldml2ZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiByZXZpdmVyICYmIHR5cGVvZiByZXZpdmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRpb25zID0gcmV2aXZlcjtcbiAgICB9XG4gICAgY29uc3QgZG9jID0gcGFyc2VEb2N1bWVudChzcmMsIG9wdGlvbnMpO1xuICAgIGlmICghZG9jKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBkb2Mud2FybmluZ3MuZm9yRWFjaCh3YXJuaW5nID0+IHdhcm4oZG9jLm9wdGlvbnMubG9nTGV2ZWwsIHdhcm5pbmcpKTtcbiAgICBpZiAoZG9jLmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChkb2Mub3B0aW9ucy5sb2dMZXZlbCAhPT0gJ3NpbGVudCcpXG4gICAgICAgICAgICB0aHJvdyBkb2MuZXJyb3JzWzBdO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBkb2MuZXJyb3JzID0gW107XG4gICAgfVxuICAgIHJldHVybiBkb2MudG9KUyhPYmplY3QuYXNzaWduKHsgcmV2aXZlcjogX3Jldml2ZXIgfSwgb3B0aW9ucykpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlLCByZXBsYWNlciwgb3B0aW9ucykge1xuICAgIGxldCBfcmVwbGFjZXIgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicgfHwgQXJyYXkuaXNBcnJheShyZXBsYWNlcikpIHtcbiAgICAgICAgX3JlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiByZXBsYWNlcikge1xuICAgICAgICBvcHRpb25zID0gcmVwbGFjZXI7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zLmxlbmd0aDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbnN0IGluZGVudCA9IE1hdGgucm91bmQob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMgPSBpbmRlbnQgPCAxID8gdW5kZWZpbmVkIDogaW5kZW50ID4gOCA/IHsgaW5kZW50OiA4IH0gOiB7IGluZGVudCB9O1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCB7IGtlZXBVbmRlZmluZWQgfSA9IG9wdGlvbnMgPz8gcmVwbGFjZXIgPz8ge307XG4gICAgICAgIGlmICgha2VlcFVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc0RvY3VtZW50KHZhbHVlKSAmJiAhX3JlcGxhY2VyKVxuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBEb2N1bWVudCh2YWx1ZSwgX3JlcGxhY2VyLCBvcHRpb25zKS50b1N0cmluZyhvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgcGFyc2UsIHBhcnNlQWxsRG9jdW1lbnRzLCBwYXJzZURvY3VtZW50LCBzdHJpbmdpZnkgfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMi8jcm9sZV9kZWZpbml0aW9uc1xuXG5leHBvcnQgdHlwZSBBcmlhUm9sZSA9ICdhbGVydCcgfCAnYWxlcnRkaWFsb2cnIHwgJ2FwcGxpY2F0aW9uJyB8ICdhcnRpY2xlJyB8ICdiYW5uZXInIHwgJ2Jsb2NrcXVvdGUnIHwgJ2J1dHRvbicgfCAnY2FwdGlvbicgfCAnY2VsbCcgfCAnY2hlY2tib3gnIHwgJ2NvZGUnIHwgJ2NvbHVtbmhlYWRlcicgfCAnY29tYm9ib3gnIHxcbiAgJ2NvbXBsZW1lbnRhcnknIHwgJ2NvbnRlbnRpbmZvJyB8ICdkZWZpbml0aW9uJyB8ICdkZWxldGlvbicgfCAnZGlhbG9nJyB8ICdkaXJlY3RvcnknIHwgJ2RvY3VtZW50JyB8ICdlbXBoYXNpcycgfCAnZmVlZCcgfCAnZmlndXJlJyB8ICdmb3JtJyB8ICdnZW5lcmljJyB8ICdncmlkJyB8XG4gICdncmlkY2VsbCcgfCAnZ3JvdXAnIHwgJ2hlYWRpbmcnIHwgJ2ltZycgfCAnaW5zZXJ0aW9uJyB8ICdsaW5rJyB8ICdsaXN0JyB8ICdsaXN0Ym94JyB8ICdsaXN0aXRlbScgfCAnbG9nJyB8ICdtYWluJyB8ICdtYXJrJyB8ICdtYXJxdWVlJyB8ICdtYXRoJyB8ICdtZXRlcicgfCAnbWVudScgfFxuICAnbWVudWJhcicgfCAnbWVudWl0ZW0nIHwgJ21lbnVpdGVtY2hlY2tib3gnIHwgJ21lbnVpdGVtcmFkaW8nIHwgJ25hdmlnYXRpb24nIHwgJ25vbmUnIHwgJ25vdGUnIHwgJ29wdGlvbicgfCAncGFyYWdyYXBoJyB8ICdwcmVzZW50YXRpb24nIHwgJ3Byb2dyZXNzYmFyJyB8ICdyYWRpbycgfCAncmFkaW9ncm91cCcgfFxuICAncmVnaW9uJyB8ICdyb3cnIHwgJ3Jvd2dyb3VwJyB8ICdyb3doZWFkZXInIHwgJ3Njcm9sbGJhcicgfCAnc2VhcmNoJyB8ICdzZWFyY2hib3gnIHwgJ3NlcGFyYXRvcicgfCAnc2xpZGVyJyB8XG4gICdzcGluYnV0dG9uJyB8ICdzdGF0dXMnIHwgJ3N0cm9uZycgfCAnc3Vic2NyaXB0JyB8ICdzdXBlcnNjcmlwdCcgfCAnc3dpdGNoJyB8ICd0YWInIHwgJ3RhYmxlJyB8ICd0YWJsaXN0JyB8ICd0YWJwYW5lbCcgfCAndGVybScgfCAndGV4dGJveCcgfCAndGltZScgfCAndGltZXInIHxcbiAgJ3Rvb2xiYXInIHwgJ3Rvb2x0aXAnIHwgJ3RyZWUnIHwgJ3RyZWVncmlkJyB8ICd0cmVlaXRlbSc7XG5cbmV4cG9ydCB0eXBlIEFyaWFQcm9wcyA9IHtcbiAgY2hlY2tlZD86IGJvb2xlYW4gfCAnbWl4ZWQnO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGV4cGFuZGVkPzogYm9vbGVhbjtcbiAgYWN0aXZlPzogYm9vbGVhbjtcbiAgbGV2ZWw/OiBudW1iZXI7XG4gIHByZXNzZWQ/OiBib29sZWFuIHwgJ21peGVkJztcbiAgc2VsZWN0ZWQ/OiBib29sZWFuO1xufTtcblxuLy8gV2UgcGFzcyBwYXJzZWQgdGVtcGxhdGUgYmV0d2VlbiB3b3JsZHMgdXNpbmcgSlNPTiwgbWFrZSBpdCBlYXN5LlxuZXhwb3J0IHR5cGUgQXJpYVJlZ2V4ID0geyBwYXR0ZXJuOiBzdHJpbmcgfTtcblxuZXhwb3J0IHR5cGUgQXJpYVRlbXBsYXRlVGV4dE5vZGUgPSB7XG4gIGtpbmQ6ICd0ZXh0JztcbiAgdGV4dDogQXJpYVJlZ2V4IHwgc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgQXJpYVRlbXBsYXRlUm9sZU5vZGUgPSBBcmlhUHJvcHMgJiB7XG4gIGtpbmQ6ICdyb2xlJztcbiAgcm9sZTogQXJpYVJvbGUgfCAnZnJhZ21lbnQnO1xuICBuYW1lPzogQXJpYVJlZ2V4IHwgc3RyaW5nO1xuICBjaGlsZHJlbj86IEFyaWFUZW1wbGF0ZU5vZGVbXTtcbiAgcHJvcHM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBBcmlhUmVnZXg+O1xuICBjb250YWluZXJNb2RlPzogJ2NvbnRhaW4nIHwgJ2VxdWFsJyB8ICdkZWVwLWVxdWFsJztcbn07XG5cbmV4cG9ydCB0eXBlIEFyaWFUZW1wbGF0ZU5vZGUgPSBBcmlhVGVtcGxhdGVSb2xlTm9kZSB8IEFyaWFUZW1wbGF0ZVRleHROb2RlO1xuXG5pbXBvcnQgdHlwZSAqIGFzIHlhbWxUeXBlcyBmcm9tICd5YW1sJztcblxudHlwZSBZYW1sTGlicmFyeSA9IHtcbiAgcGFyc2VEb2N1bWVudDogdHlwZW9mIHlhbWxUeXBlcy5wYXJzZURvY3VtZW50O1xuICBTY2FsYXI6IHR5cGVvZiB5YW1sVHlwZXMuU2NhbGFyO1xuICBZQU1MTWFwOiB0eXBlb2YgeWFtbFR5cGVzLllBTUxNYXA7XG4gIFlBTUxTZXE6IHR5cGVvZiB5YW1sVHlwZXMuWUFNTFNlcTtcbiAgTGluZUNvdW50ZXI6IHR5cGVvZiB5YW1sVHlwZXMuTGluZUNvdW50ZXI7XG59O1xuXG50eXBlIFBhcnNlZFlhbWxQb3NpdGlvbiA9IHsgbGluZTogbnVtYmVyOyBjb2w6IG51bWJlcjsgfTtcbnR5cGUgUGFyc2luZ09wdGlvbnMgPSB5YW1sVHlwZXMuUGFyc2VPcHRpb25zO1xuXG5leHBvcnQgdHlwZSBQYXJzZWRZYW1sRXJyb3IgPSB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgcmFuZ2U6IFtQYXJzZWRZYW1sUG9zaXRpb24sIFBhcnNlZFlhbWxQb3NpdGlvbl07XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcmlhU25hcHNob3RVbnNhZmUoeWFtbDogWWFtbExpYnJhcnksIHRleHQ6IHN0cmluZywgb3B0aW9uczogUGFyc2luZ09wdGlvbnMgPSB7fSk6IEFyaWFUZW1wbGF0ZU5vZGUge1xuICBjb25zdCByZXN1bHQgPSBwYXJzZUFyaWFTbmFwc2hvdCh5YW1sLCB0ZXh0LCBvcHRpb25zKTtcbiAgaWYgKHJlc3VsdC5lcnJvcnMubGVuZ3RoKVxuICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuZXJyb3JzWzBdLm1lc3NhZ2UpO1xuICByZXR1cm4gcmVzdWx0LmZyYWdtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcmlhU25hcHNob3QoeWFtbDogWWFtbExpYnJhcnksIHRleHQ6IHN0cmluZywgb3B0aW9uczogUGFyc2luZ09wdGlvbnMgPSB7fSk6IHsgZnJhZ21lbnQ6IEFyaWFUZW1wbGF0ZU5vZGUsIGVycm9yczogUGFyc2VkWWFtbEVycm9yW10gfSB7XG4gIGNvbnN0IGxpbmVDb3VudGVyID0gbmV3IHlhbWwuTGluZUNvdW50ZXIoKTtcbiAgY29uc3QgcGFyc2VPcHRpb25zOiBQYXJzaW5nT3B0aW9ucyA9IHtcbiAgICBrZWVwU291cmNlVG9rZW5zOiB0cnVlLFxuICAgIGxpbmVDb3VudGVyLFxuICAgIC4uLm9wdGlvbnMsXG4gIH07XG4gIGNvbnN0IHlhbWxEb2MgPSB5YW1sLnBhcnNlRG9jdW1lbnQodGV4dCwgcGFyc2VPcHRpb25zKTtcbiAgY29uc3QgZXJyb3JzOiBQYXJzZWRZYW1sRXJyb3JbXSA9IFtdO1xuXG4gIGNvbnN0IGNvbnZlcnRSYW5nZSA9IChyYW5nZTogW251bWJlciwgbnVtYmVyXSB8IHlhbWxUeXBlcy5SYW5nZSk6IFtQYXJzZWRZYW1sUG9zaXRpb24sIFBhcnNlZFlhbWxQb3NpdGlvbl0gPT4ge1xuICAgIHJldHVybiBbbGluZUNvdW50ZXIubGluZVBvcyhyYW5nZVswXSksIGxpbmVDb3VudGVyLmxpbmVQb3MocmFuZ2VbMV0pXTtcbiAgfTtcblxuICBjb25zdCBhZGRFcnJvciA9IChlcnJvcjogeWFtbFR5cGVzLllBTUxFcnJvcikgPT4ge1xuICAgIGVycm9ycy5wdXNoKHtcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICByYW5nZTogW2xpbmVDb3VudGVyLmxpbmVQb3MoZXJyb3IucG9zWzBdKSwgbGluZUNvdW50ZXIubGluZVBvcyhlcnJvci5wb3NbMV0pXSxcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBjb252ZXJ0U2VxID0gKGNvbnRhaW5lcjogQXJpYVRlbXBsYXRlUm9sZU5vZGUsIHNlcTogeWFtbFR5cGVzLllBTUxTZXEpID0+IHtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc2VxLml0ZW1zKSB7XG4gICAgICBjb25zdCBpdGVtSXNTdHJpbmcgPSBpdGVtIGluc3RhbmNlb2YgeWFtbC5TY2FsYXIgJiYgdHlwZW9mIGl0ZW0udmFsdWUgPT09ICdzdHJpbmcnO1xuICAgICAgaWYgKGl0ZW1Jc1N0cmluZykge1xuICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBLZXlQYXJzZXIucGFyc2UoaXRlbSwgcGFyc2VPcHRpb25zLCBlcnJvcnMpO1xuICAgICAgICBpZiAoY2hpbGROb2RlKSB7XG4gICAgICAgICAgY29udGFpbmVyLmNoaWxkcmVuID0gY29udGFpbmVyLmNoaWxkcmVuIHx8IFtdO1xuICAgICAgICAgIGNvbnRhaW5lci5jaGlsZHJlbi5wdXNoKGNoaWxkTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBpdGVtSXNNYXAgPSBpdGVtIGluc3RhbmNlb2YgeWFtbC5ZQU1MTWFwO1xuICAgICAgaWYgKGl0ZW1Jc01hcCkge1xuICAgICAgICBjb252ZXJ0TWFwKGNvbnRhaW5lciwgaXRlbSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICBtZXNzYWdlOiAnU2VxdWVuY2UgaXRlbXMgc2hvdWxkIGJlIHN0cmluZ3Mgb3IgbWFwcycsXG4gICAgICAgIHJhbmdlOiBjb252ZXJ0UmFuZ2UoKGl0ZW0gYXMgYW55KS5yYW5nZSB8fCBzZXEucmFuZ2UpLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNvbnZlcnRNYXAgPSAoY29udGFpbmVyOiBBcmlhVGVtcGxhdGVSb2xlTm9kZSwgbWFwOiB5YW1sVHlwZXMuWUFNTE1hcCkgPT4ge1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgbWFwLml0ZW1zKSB7XG4gICAgICBjb250YWluZXIuY2hpbGRyZW4gPSBjb250YWluZXIuY2hpbGRyZW4gfHwgW107XG4gICAgICAvLyBLZXkgbXVzdCBieSBhIHN0cmluZ1xuICAgICAgY29uc3Qga2V5SXNTdHJpbmcgPSBlbnRyeS5rZXkgaW5zdGFuY2VvZiB5YW1sLlNjYWxhciAmJiB0eXBlb2YgZW50cnkua2V5LnZhbHVlID09PSAnc3RyaW5nJztcbiAgICAgIGlmICgha2V5SXNTdHJpbmcpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgIG1lc3NhZ2U6ICdPbmx5IHN0cmluZyBrZXlzIGFyZSBzdXBwb3J0ZWQnLFxuICAgICAgICAgIHJhbmdlOiBjb252ZXJ0UmFuZ2UoKGVudHJ5LmtleSBhcyBhbnkpLnJhbmdlIHx8IG1hcC5yYW5nZSksXG4gICAgICAgIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5OiB5YW1sVHlwZXMuU2NhbGFyPHN0cmluZz4gPSBlbnRyeS5rZXkgYXMgeWFtbFR5cGVzLlNjYWxhcjxzdHJpbmc+O1xuICAgICAgY29uc3QgdmFsdWUgPSBlbnRyeS52YWx1ZTtcblxuICAgICAgLy8gLSB0ZXh0OiBcInRleHRcIlxuICAgICAgaWYgKGtleS52YWx1ZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlSXNTdHJpbmcgPSB2YWx1ZSBpbnN0YW5jZW9mIHlhbWwuU2NhbGFyICYmIHR5cGVvZiB2YWx1ZS52YWx1ZSA9PT0gJ3N0cmluZyc7XG4gICAgICAgIGlmICghdmFsdWVJc1N0cmluZykge1xuICAgICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUZXh0IHZhbHVlIHNob3VsZCBiZSBhIHN0cmluZycsXG4gICAgICAgICAgICByYW5nZTogY29udmVydFJhbmdlKCgoZW50cnkudmFsdWUgYXMgYW55KS5yYW5nZSB8fCBtYXAucmFuZ2UpKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb250YWluZXIuY2hpbGRyZW4ucHVzaCh7XG4gICAgICAgICAga2luZDogJ3RleHQnLFxuICAgICAgICAgIHRleHQ6IHZhbHVlT3JSZWdleCh2YWx1ZS52YWx1ZSlcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyAtIC9jaGlsZHJlbjogZXF1YWxcbiAgICAgIGlmIChrZXkudmFsdWUgPT09ICcvY2hpbGRyZW4nKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlSXNTdHJpbmcgPSB2YWx1ZSBpbnN0YW5jZW9mIHlhbWwuU2NhbGFyICYmIHR5cGVvZiB2YWx1ZS52YWx1ZSA9PT0gJ3N0cmluZyc7XG4gICAgICAgIGlmICghdmFsdWVJc1N0cmluZyB8fCAodmFsdWUudmFsdWUgIT09ICdjb250YWluJyAmJiB2YWx1ZS52YWx1ZSAhPT0gJ2VxdWFsJyAmJiB2YWx1ZS52YWx1ZSAhPT0gJ2RlZXAtZXF1YWwnKSkge1xuICAgICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdTdHJpY3QgdmFsdWUgc2hvdWxkIGJlIFwiY29udGFpblwiLCBcImVxdWFsXCIgb3IgXCJkZWVwLWVxdWFsXCInLFxuICAgICAgICAgICAgcmFuZ2U6IGNvbnZlcnRSYW5nZSgoKGVudHJ5LnZhbHVlIGFzIGFueSkucmFuZ2UgfHwgbWFwLnJhbmdlKSksXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29udGFpbmVyLmNvbnRhaW5lck1vZGUgPSB2YWx1ZS52YWx1ZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIC0gL3VybDogXCJhYm91dDpibGFua1wiXG4gICAgICBpZiAoa2V5LnZhbHVlLnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgICBjb25zdCB2YWx1ZUlzU3RyaW5nID0gdmFsdWUgaW5zdGFuY2VvZiB5YW1sLlNjYWxhciAmJiB0eXBlb2YgdmFsdWUudmFsdWUgPT09ICdzdHJpbmcnO1xuICAgICAgICBpZiAoIXZhbHVlSXNTdHJpbmcpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICBtZXNzYWdlOiAnUHJvcGVydHkgdmFsdWUgc2hvdWxkIGJlIGEgc3RyaW5nJyxcbiAgICAgICAgICAgIHJhbmdlOiBjb252ZXJ0UmFuZ2UoKChlbnRyeS52YWx1ZSBhcyBhbnkpLnJhbmdlIHx8IG1hcC5yYW5nZSkpLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5wcm9wcyA9IGNvbnRhaW5lci5wcm9wcyA/PyB7fTtcbiAgICAgICAgY29udGFpbmVyLnByb3BzW2tleS52YWx1ZS5zbGljZSgxKV0gPSB2YWx1ZU9yUmVnZXgodmFsdWUudmFsdWUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gcm9sZSBcIm5hbWVcIjogLi4uXG4gICAgICBjb25zdCBjaGlsZE5vZGUgPSBLZXlQYXJzZXIucGFyc2Uoa2V5LCBwYXJzZU9wdGlvbnMsIGVycm9ycyk7XG4gICAgICBpZiAoIWNoaWxkTm9kZSlcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIC8vIC0gcm9sZSBcIm5hbWVcIjogXCJ0ZXh0XCJcbiAgICAgIGNvbnN0IHZhbHVlSXNTY2FsYXIgPSB2YWx1ZSBpbnN0YW5jZW9mIHlhbWwuU2NhbGFyO1xuICAgICAgaWYgKHZhbHVlSXNTY2FsYXIpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZS52YWx1ZTtcbiAgICAgICAgaWYgKHR5cGUgIT09ICdzdHJpbmcnICYmIHR5cGUgIT09ICdudW1iZXInICYmIHR5cGUgIT09ICdib29sZWFuJykge1xuICAgICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdOb2RlIHZhbHVlIHNob3VsZCBiZSBhIHN0cmluZyBvciBhIHNlcXVlbmNlJyxcbiAgICAgICAgICAgIHJhbmdlOiBjb252ZXJ0UmFuZ2UoKChlbnRyeS52YWx1ZSBhcyBhbnkpLnJhbmdlIHx8IG1hcC5yYW5nZSkpLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGFpbmVyLmNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgIC4uLmNoaWxkTm9kZSxcbiAgICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgIGtpbmQ6ICd0ZXh0JyxcbiAgICAgICAgICAgIHRleHQ6IHZhbHVlT3JSZWdleChTdHJpbmcodmFsdWUudmFsdWUpKVxuICAgICAgICAgIH1dXG4gICAgICAgIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gLSByb2xlIFwibmFtZVwiOlxuICAgICAgLy8gICAtIGNoaWxkXG4gICAgICBjb25zdCB2YWx1ZUlzU2VxdWVuY2UgPSB2YWx1ZSBpbnN0YW5jZW9mIHlhbWwuWUFNTFNlcTtcbiAgICAgIGlmICh2YWx1ZUlzU2VxdWVuY2UpIHtcbiAgICAgICAgY29udGFpbmVyLmNoaWxkcmVuLnB1c2goY2hpbGROb2RlKTtcbiAgICAgICAgY29udmVydFNlcShjaGlsZE5vZGUsIHZhbHVlIGFzIHlhbWxUeXBlcy5ZQU1MU2VxKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgbWVzc2FnZTogJ01hcCB2YWx1ZXMgc2hvdWxkIGJlIHN0cmluZ3Mgb3Igc2VxdWVuY2VzJyxcbiAgICAgICAgcmFuZ2U6IGNvbnZlcnRSYW5nZSgoZW50cnkudmFsdWUgYXMgYW55KS5yYW5nZSB8fCBtYXAucmFuZ2UpLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGZyYWdtZW50OiBBcmlhVGVtcGxhdGVOb2RlID0geyBraW5kOiAncm9sZScsIHJvbGU6ICdmcmFnbWVudCcgfTtcblxuICB5YW1sRG9jLmVycm9ycy5mb3JFYWNoKGFkZEVycm9yKTtcbiAgaWYgKGVycm9ycy5sZW5ndGgpXG4gICAgcmV0dXJuIHsgZXJyb3JzLCBmcmFnbWVudCB9O1xuXG4gIGlmICghKHlhbWxEb2MuY29udGVudHMgaW5zdGFuY2VvZiB5YW1sLllBTUxTZXEpKSB7XG4gICAgZXJyb3JzLnB1c2goe1xuICAgICAgbWVzc2FnZTogJ0FyaWEgc25hcHNob3QgbXVzdCBiZSBhIFlBTUwgc2VxdWVuY2UsIGVsZW1lbnRzIHN0YXJ0aW5nIHdpdGggXCIgLVwiJyxcbiAgICAgIHJhbmdlOiB5YW1sRG9jLmNvbnRlbnRzID8gY29udmVydFJhbmdlKHlhbWxEb2MuY29udGVudHMhLnJhbmdlKSA6IFt7IGxpbmU6IDAsIGNvbDogMCB9LCB7IGxpbmU6IDAsIGNvbDogMCB9XSxcbiAgICB9KTtcbiAgfVxuICBpZiAoZXJyb3JzLmxlbmd0aClcbiAgICByZXR1cm4geyBlcnJvcnMsIGZyYWdtZW50IH07XG5cbiAgY29udmVydFNlcShmcmFnbWVudCwgeWFtbERvYy5jb250ZW50cyBhcyB5YW1sVHlwZXMuWUFNTFNlcSk7XG4gIGlmIChlcnJvcnMubGVuZ3RoKVxuICAgIHJldHVybiB7IGVycm9ycywgZnJhZ21lbnQ6IGVtcHR5RnJhZ21lbnQgfTtcbiAgLy8gYC0gYnV0dG9uYCBzaG91bGQgdGFyZ2V0IHRoZSBidXR0b24sIG5vdCBpdHMgcGFyZW50LlxuICBpZiAoZnJhZ21lbnQuY2hpbGRyZW4/Lmxlbmd0aCA9PT0gMSAmJiAoIWZyYWdtZW50LmNvbnRhaW5lck1vZGUgfHwgZnJhZ21lbnQuY29udGFpbmVyTW9kZSA9PT0gJ2NvbnRhaW4nKSlcbiAgICByZXR1cm4geyBmcmFnbWVudDogZnJhZ21lbnQuY2hpbGRyZW5bMF0sIGVycm9yczogW10gfTtcbiAgcmV0dXJuIHsgZnJhZ21lbnQsIGVycm9yczogW10gfTtcbn1cblxuY29uc3QgZW1wdHlGcmFnbWVudDogQXJpYVRlbXBsYXRlUm9sZU5vZGUgPSB7IGtpbmQ6ICdyb2xlJywgcm9sZTogJ2ZyYWdtZW50JyB9O1xuXG5mdW5jdGlvbiBub3JtYWxpemVXaGl0ZXNwYWNlKHRleHQ6IHN0cmluZykge1xuICAvLyBUT0RPOiB3aHkgaXMgdGhpcyBkaWZmZXJlbnQgZnJvbSBub3JtYWxpemVXaGl0ZXNwYWNlIGluIHN0cmluZ1V0aWxzLnRzP1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKC9bXFx1MjAwYlxcdTAwYWRdL2csICcnKS5yZXBsYWNlKC9bXFxyXFxuXFxzXFx0XSsvZywgJyAnKS50cmltKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZU9yUmVnZXgodmFsdWU6IHN0cmluZyk6IHN0cmluZyB8IEFyaWFSZWdleCB7XG4gIHJldHVybiB2YWx1ZS5zdGFydHNXaXRoKCcvJykgJiYgdmFsdWUuZW5kc1dpdGgoJy8nKSAmJiB2YWx1ZS5sZW5ndGggPiAxID8geyBwYXR0ZXJuOiB2YWx1ZS5zbGljZSgxLCAtMSkgfSA6IG5vcm1hbGl6ZVdoaXRlc3BhY2UodmFsdWUpO1xufVxuXG5leHBvcnQgY2xhc3MgS2V5UGFyc2VyIHtcbiAgcHJpdmF0ZSBfaW5wdXQ6IHN0cmluZztcbiAgcHJpdmF0ZSBfcG9zOiBudW1iZXI7XG4gIHByaXZhdGUgX2xlbmd0aDogbnVtYmVyO1xuICBwcml2YXRlIF9vcHRpb25zOiBQYXJzaW5nT3B0aW9ucztcblxuICBzdGF0aWMgcGFyc2UodGV4dDogeWFtbFR5cGVzLlNjYWxhcjxzdHJpbmc+LCBvcHRpb25zOiBQYXJzaW5nT3B0aW9ucywgZXJyb3JzOiBQYXJzZWRZYW1sRXJyb3JbXSk6IEFyaWFUZW1wbGF0ZVJvbGVOb2RlIHwgbnVsbCB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgS2V5UGFyc2VyKHRleHQudmFsdWUsIG9wdGlvbnMpLl9wYXJzZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgUGFyc2VyRXJyb3IpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG9wdGlvbnMucHJldHR5RXJyb3JzID09PSBmYWxzZSA/IGUubWVzc2FnZSA6IGUubWVzc2FnZSArICc6XFxuXFxuJyArIHRleHQudmFsdWUgKyAnXFxuJyArICcgJy5yZXBlYXQoZS5wb3MpICsgJ15cXG4nO1xuICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICByYW5nZTogW29wdGlvbnMubGluZUNvdW50ZXIhLmxpbmVQb3ModGV4dC5yYW5nZSFbMF0pLCBvcHRpb25zLmxpbmVDb3VudGVyIS5saW5lUG9zKHRleHQucmFuZ2UhWzBdICsgZS5wb3MpXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihpbnB1dDogc3RyaW5nLCBvcHRpb25zOiBQYXJzaW5nT3B0aW9ucykge1xuICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5fcG9zID0gMDtcbiAgICB0aGlzLl9sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICBwcml2YXRlIF9wZWVrKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnB1dFt0aGlzLl9wb3NdIHx8ICcnO1xuICB9XG5cbiAgcHJpdmF0ZSBfbmV4dCgpIHtcbiAgICBpZiAodGhpcy5fcG9zIDwgdGhpcy5fbGVuZ3RoKVxuICAgICAgcmV0dXJuIHRoaXMuX2lucHV0W3RoaXMuX3BvcysrXTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgX2VvZigpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zID49IHRoaXMuX2xlbmd0aDtcbiAgfVxuXG4gIHByaXZhdGUgX2lzV2hpdGVzcGFjZSgpIHtcbiAgICByZXR1cm4gIXRoaXMuX2VvZigpICYmIC9cXHMvLnRlc3QodGhpcy5fcGVlaygpKTtcbiAgfVxuXG4gIHByaXZhdGUgX3NraXBXaGl0ZXNwYWNlKCkge1xuICAgIHdoaWxlICh0aGlzLl9pc1doaXRlc3BhY2UoKSlcbiAgICAgIHRoaXMuX3BvcysrO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVhZElkZW50aWZpZXIodHlwZTogJ3JvbGUnIHwgJ2F0dHJpYnV0ZScpOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLl9lb2YoKSlcbiAgICAgIHRoaXMuX3Rocm93RXJyb3IoYFVuZXhwZWN0ZWQgZW5kIG9mIGlucHV0IHdoZW4gZXhwZWN0aW5nICR7dHlwZX1gKTtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX3BvcztcbiAgICB3aGlsZSAoIXRoaXMuX2VvZigpICYmIC9bYS16QS1aXS8udGVzdCh0aGlzLl9wZWVrKCkpKVxuICAgICAgdGhpcy5fcG9zKys7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0LnNsaWNlKHN0YXJ0LCB0aGlzLl9wb3MpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVhZFN0cmluZygpOiBzdHJpbmcge1xuICAgIGxldCByZXN1bHQgPSAnJztcbiAgICBsZXQgZXNjYXBlZCA9IGZhbHNlO1xuICAgIHdoaWxlICghdGhpcy5fZW9mKCkpIHtcbiAgICAgIGNvbnN0IGNoID0gdGhpcy5fbmV4dCgpO1xuICAgICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgICAgcmVzdWx0ICs9IGNoO1xuICAgICAgICBlc2NhcGVkID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGNoID09PSAnXFxcXCcpIHtcbiAgICAgICAgZXNjYXBlZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNoID09PSAnXCInKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgKz0gY2g7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3Rocm93RXJyb3IoJ1VudGVybWluYXRlZCBzdHJpbmcnKTtcbiAgfVxuXG4gIHByaXZhdGUgX3Rocm93RXJyb3IobWVzc2FnZTogc3RyaW5nLCBvZmZzZXQ6IG51bWJlciA9IDApOiBuZXZlciB7XG4gICAgdGhyb3cgbmV3IFBhcnNlckVycm9yKG1lc3NhZ2UsIG9mZnNldCB8fCB0aGlzLl9wb3MpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVhZFJlZ2V4KCk6IEFyaWFSZWdleCB7XG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIGxldCBlc2NhcGVkID0gZmFsc2U7XG4gICAgbGV0IGluc2lkZUNsYXNzID0gZmFsc2U7XG4gICAgd2hpbGUgKCF0aGlzLl9lb2YoKSkge1xuICAgICAgY29uc3QgY2ggPSB0aGlzLl9uZXh0KCk7XG4gICAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgICByZXN1bHQgKz0gY2g7XG4gICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xuICAgICAgICBlc2NhcGVkID0gdHJ1ZTtcbiAgICAgICAgcmVzdWx0ICs9IGNoO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJy8nICYmICFpbnNpZGVDbGFzcykge1xuICAgICAgICByZXR1cm4geyBwYXR0ZXJuOiByZXN1bHQgfTtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdbJykge1xuICAgICAgICBpbnNpZGVDbGFzcyA9IHRydWU7XG4gICAgICAgIHJlc3VsdCArPSBjaDtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICddJyAmJiBpbnNpZGVDbGFzcykge1xuICAgICAgICByZXN1bHQgKz0gY2g7XG4gICAgICAgIGluc2lkZUNsYXNzID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgKz0gY2g7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3Rocm93RXJyb3IoJ1VudGVybWluYXRlZCByZWdleCcpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVhZFN0cmluZ09yUmVnZXgoKTogc3RyaW5nIHwgQXJpYVJlZ2V4IHwgbnVsbCB7XG4gICAgY29uc3QgY2ggPSB0aGlzLl9wZWVrKCk7XG4gICAgaWYgKGNoID09PSAnXCInKSB7XG4gICAgICB0aGlzLl9uZXh0KCk7XG4gICAgICByZXR1cm4gbm9ybWFsaXplV2hpdGVzcGFjZSh0aGlzLl9yZWFkU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIGlmIChjaCA9PT0gJy8nKSB7XG4gICAgICB0aGlzLl9uZXh0KCk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFJlZ2V4KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIF9yZWFkQXR0cmlidXRlcyhyZXN1bHQ6IEFyaWFUZW1wbGF0ZVJvbGVOb2RlKSB7XG4gICAgbGV0IGVycm9yUG9zID0gdGhpcy5fcG9zO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICB0aGlzLl9za2lwV2hpdGVzcGFjZSgpO1xuICAgICAgaWYgKHRoaXMuX3BlZWsoKSA9PT0gJ1snKSB7XG4gICAgICAgIHRoaXMuX25leHQoKTtcbiAgICAgICAgdGhpcy5fc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgICAgZXJyb3JQb3MgPSB0aGlzLl9wb3M7XG4gICAgICAgIGNvbnN0IGZsYWdOYW1lID0gdGhpcy5fcmVhZElkZW50aWZpZXIoJ2F0dHJpYnV0ZScpO1xuICAgICAgICB0aGlzLl9za2lwV2hpdGVzcGFjZSgpO1xuICAgICAgICBsZXQgZmxhZ1ZhbHVlID0gJyc7XG4gICAgICAgIGlmICh0aGlzLl9wZWVrKCkgPT09ICc9Jykge1xuICAgICAgICAgIHRoaXMuX25leHQoKTtcbiAgICAgICAgICB0aGlzLl9za2lwV2hpdGVzcGFjZSgpO1xuICAgICAgICAgIGVycm9yUG9zID0gdGhpcy5fcG9zO1xuICAgICAgICAgIHdoaWxlICh0aGlzLl9wZWVrKCkgIT09ICddJyAmJiAhdGhpcy5faXNXaGl0ZXNwYWNlKCkgJiYgIXRoaXMuX2VvZigpKVxuICAgICAgICAgICAgZmxhZ1ZhbHVlICs9IHRoaXMuX25leHQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9za2lwV2hpdGVzcGFjZSgpO1xuICAgICAgICBpZiAodGhpcy5fcGVlaygpICE9PSAnXScpXG4gICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcignRXhwZWN0ZWQgXScpO1xuXG4gICAgICAgIHRoaXMuX25leHQoKTsgLy8gQ29uc3VtZSAnXSdcbiAgICAgICAgdGhpcy5fYXBwbHlBdHRyaWJ1dGUocmVzdWx0LCBmbGFnTmFtZSwgZmxhZ1ZhbHVlIHx8ICd0cnVlJywgZXJyb3JQb3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3BhcnNlKCk6IEFyaWFUZW1wbGF0ZVJvbGVOb2RlIHtcbiAgICB0aGlzLl9za2lwV2hpdGVzcGFjZSgpO1xuXG4gICAgY29uc3Qgcm9sZSA9IHRoaXMuX3JlYWRJZGVudGlmaWVyKCdyb2xlJykgYXMgQXJpYVRlbXBsYXRlUm9sZU5vZGVbJ3JvbGUnXTtcbiAgICB0aGlzLl9za2lwV2hpdGVzcGFjZSgpO1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLl9yZWFkU3RyaW5nT3JSZWdleCgpIHx8ICcnO1xuICAgIGNvbnN0IHJlc3VsdDogQXJpYVRlbXBsYXRlUm9sZU5vZGUgPSB7IGtpbmQ6ICdyb2xlJywgcm9sZSwgbmFtZSB9O1xuICAgIHRoaXMuX3JlYWRBdHRyaWJ1dGVzKHJlc3VsdCk7XG4gICAgdGhpcy5fc2tpcFdoaXRlc3BhY2UoKTtcbiAgICBpZiAoIXRoaXMuX2VvZigpKVxuICAgICAgdGhpcy5fdGhyb3dFcnJvcignVW5leHBlY3RlZCBpbnB1dCcpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIF9hcHBseUF0dHJpYnV0ZShub2RlOiBBcmlhVGVtcGxhdGVSb2xlTm9kZSwga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGVycm9yUG9zOiBudW1iZXIpIHtcbiAgICBpZiAoa2V5ID09PSAnY2hlY2tlZCcpIHtcbiAgICAgIHRoaXMuX2Fzc2VydCh2YWx1ZSA9PT0gJ3RydWUnIHx8IHZhbHVlID09PSAnZmFsc2UnIHx8IHZhbHVlID09PSAnbWl4ZWQnLCAnVmFsdWUgb2YgXCJjaGVja2VkXFxcIiBhdHRyaWJ1dGUgbXVzdCBiZSBhIGJvb2xlYW4gb3IgXCJtaXhlZFwiJywgZXJyb3JQb3MpO1xuICAgICAgbm9kZS5jaGVja2VkID0gdmFsdWUgPT09ICd0cnVlJyA/IHRydWUgOiB2YWx1ZSA9PT0gJ2ZhbHNlJyA/IGZhbHNlIDogJ21peGVkJztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGtleSA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgdGhpcy5fYXNzZXJ0KHZhbHVlID09PSAndHJ1ZScgfHwgdmFsdWUgPT09ICdmYWxzZScsICdWYWx1ZSBvZiBcImRpc2FibGVkXCIgYXR0cmlidXRlIG11c3QgYmUgYSBib29sZWFuJywgZXJyb3JQb3MpO1xuICAgICAgbm9kZS5kaXNhYmxlZCA9IHZhbHVlID09PSAndHJ1ZSc7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChrZXkgPT09ICdleHBhbmRlZCcpIHtcbiAgICAgIHRoaXMuX2Fzc2VydCh2YWx1ZSA9PT0gJ3RydWUnIHx8IHZhbHVlID09PSAnZmFsc2UnLCAnVmFsdWUgb2YgXCJleHBhbmRlZFwiIGF0dHJpYnV0ZSBtdXN0IGJlIGEgYm9vbGVhbicsIGVycm9yUG9zKTtcbiAgICAgIG5vZGUuZXhwYW5kZWQgPSB2YWx1ZSA9PT0gJ3RydWUnO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAnYWN0aXZlJykge1xuICAgICAgdGhpcy5fYXNzZXJ0KHZhbHVlID09PSAndHJ1ZScgfHwgdmFsdWUgPT09ICdmYWxzZScsICdWYWx1ZSBvZiBcImFjdGl2ZVwiIGF0dHJpYnV0ZSBtdXN0IGJlIGEgYm9vbGVhbicsIGVycm9yUG9zKTtcbiAgICAgIG5vZGUuYWN0aXZlID0gdmFsdWUgPT09ICd0cnVlJztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGtleSA9PT0gJ2xldmVsJykge1xuICAgICAgdGhpcy5fYXNzZXJ0KCFpc05hTihOdW1iZXIodmFsdWUpKSwgJ1ZhbHVlIG9mIFwibGV2ZWxcIiBhdHRyaWJ1dGUgbXVzdCBiZSBhIG51bWJlcicsIGVycm9yUG9zKTtcbiAgICAgIG5vZGUubGV2ZWwgPSBOdW1iZXIodmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAncHJlc3NlZCcpIHtcbiAgICAgIHRoaXMuX2Fzc2VydCh2YWx1ZSA9PT0gJ3RydWUnIHx8IHZhbHVlID09PSAnZmFsc2UnIHx8IHZhbHVlID09PSAnbWl4ZWQnLCAnVmFsdWUgb2YgXCJwcmVzc2VkXCIgYXR0cmlidXRlIG11c3QgYmUgYSBib29sZWFuIG9yIFwibWl4ZWRcIicsIGVycm9yUG9zKTtcbiAgICAgIG5vZGUucHJlc3NlZCA9IHZhbHVlID09PSAndHJ1ZScgPyB0cnVlIDogdmFsdWUgPT09ICdmYWxzZScgPyBmYWxzZSA6ICdtaXhlZCc7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChrZXkgPT09ICdzZWxlY3RlZCcpIHtcbiAgICAgIHRoaXMuX2Fzc2VydCh2YWx1ZSA9PT0gJ3RydWUnIHx8IHZhbHVlID09PSAnZmFsc2UnLCAnVmFsdWUgb2YgXCJzZWxlY3RlZFwiIGF0dHJpYnV0ZSBtdXN0IGJlIGEgYm9vbGVhbicsIGVycm9yUG9zKTtcbiAgICAgIG5vZGUuc2VsZWN0ZWQgPSB2YWx1ZSA9PT0gJ3RydWUnO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9hc3NlcnQoZmFsc2UsIGBVbnN1cHBvcnRlZCBhdHRyaWJ1dGUgWyR7a2V5fV1gLCBlcnJvclBvcyk7XG4gIH1cblxuICBwcml2YXRlIF9hc3NlcnQodmFsdWU6IGFueSwgbWVzc2FnZTogc3RyaW5nLCB2YWx1ZVBvczogbnVtYmVyKTogYXNzZXJ0cyB2YWx1ZSB7XG4gICAgaWYgKCF2YWx1ZSlcbiAgICAgIHRoaXMuX3Rocm93RXJyb3IobWVzc2FnZSB8fCAnQXNzZXJ0aW9uIGVycm9yJywgdmFsdWVQb3MpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXJzZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgcmVhZG9ubHkgcG9zOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBwb3M6IG51bWJlcikge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMucG9zID0gcG9zO1xuICB9XG59XG4iLCIvKlxuICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUb29sYmFyQnV0dG9uIH0gZnJvbSAnLi90b29sYmFyQnV0dG9uJztcblxuZXhwb3J0IGludGVyZmFjZSBEaWFsb2dQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xuICBvcGVuOiBib29sZWFuO1xuICBpc01vZGFsPzogYm9vbGVhbjtcbiAgd2lkdGg/OiBudW1iZXI7XG4gIHZlcnRpY2FsT2Zmc2V0PzogbnVtYmVyO1xuICByZXF1ZXN0Q2xvc2U/OiAoKSA9PiB2b2lkO1xuICBhbmNob3I/OiBSZWFjdC5SZWZPYmplY3Q8SFRNTEVsZW1lbnQ+O1xuICBkYXRhVGVzdElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgRGlhbG9nOiBSZWFjdC5GQzxSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjxEaWFsb2dQcm9wcz4+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBzdHlsZTogZXh0ZXJuYWxTdHlsZSxcbiAgb3BlbixcbiAgaXNNb2RhbCxcbiAgd2lkdGgsXG4gIHZlcnRpY2FsT2Zmc2V0LFxuICByZXF1ZXN0Q2xvc2UsXG4gIGFuY2hvcixcbiAgZGF0YVRlc3RJZCxcbiAgY2hpbGRyZW4sXG59KSA9PiB7XG4gIGNvbnN0IGRpYWxvZ1JlZiA9IFJlYWN0LnVzZVJlZjxIVE1MRGlhbG9nRWxlbWVudD4obnVsbCk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBjb25zdCBbXywgc2V0UmVjYWxjdWxhdGVEaW1lbnNpb25zQ291bnRdID0gUmVhY3QudXNlU3RhdGUoMCk7XG5cbiAgbGV0IHN0eWxlOiBSZWFjdC5DU1NQcm9wZXJ0aWVzIHwgdW5kZWZpbmVkID0gZXh0ZXJuYWxTdHlsZTtcblxuICBpZiAoYW5jaG9yPy5jdXJyZW50KSB7XG4gICAgY29uc3QgYm91bmRzID0gYW5jaG9yLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBzdHlsZSA9IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgdG9wOiBib3VuZHMuYm90dG9tICsgKHZlcnRpY2FsT2Zmc2V0ID8/IDApLFxuICAgICAgbGVmdDogYnVpbGRUb3BMZWZ0Q29vcmQoYm91bmRzLCB3aWR0aCA/PyAwKSxcbiAgICAgIHdpZHRoLFxuICAgICAgekluZGV4OiAxMDAsXG4gICAgICAuLi5leHRlcm5hbFN0eWxlXG4gICAgfTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgb25DbGljayA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgaWYgKCFkaWFsb2dSZWYuY3VycmVudCB8fCAhKGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIE5vZGUpKVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIGlmICghZGlhbG9nUmVmLmN1cnJlbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSlcbiAgICAgICAgcmVxdWVzdENsb3NlPy4oKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb25LZXlEb3duID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJylcbiAgICAgICAgcmVxdWVzdENsb3NlPy4oKTtcbiAgICB9O1xuXG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uQ2xpY2spO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5RG93bik7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uQ2xpY2spO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlEb3duKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHt9O1xuICB9LCBbb3BlbiwgcmVxdWVzdENsb3NlXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBvblJlc2l6ZSA9ICgpID0+IHNldFJlY2FsY3VsYXRlRGltZW5zaW9uc0NvdW50KGNvdW50ID0+IGNvdW50ICsgMSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25SZXNpemUpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFkaWFsb2dSZWYuY3VycmVudClcbiAgICAgIHJldHVybjtcblxuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAoaXNNb2RhbClcbiAgICAgICAgZGlhbG9nUmVmLmN1cnJlbnQuc2hvd01vZGFsKCk7XG4gICAgICBlbHNlXG4gICAgICAgIGRpYWxvZ1JlZi5jdXJyZW50LnNob3coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlhbG9nUmVmLmN1cnJlbnQuY2xvc2UoKTtcbiAgICB9XG4gIH0sIFtvcGVuLCBpc01vZGFsXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGlhbG9nIHJlZj17ZGlhbG9nUmVmfSBzdHlsZT17c3R5bGV9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBkYXRhLXRlc3RpZD17ZGF0YVRlc3RJZH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaWFsb2c+XG4gICk7XG59O1xuXG5jb25zdCBidWlsZFRvcExlZnRDb29yZCA9IChib3VuZHM6IERPTVJlY3QsIHdpZHRoOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICBjb25zdCBsZWZ0QWxpZ25Db29yZCA9IGJ1aWxkVG9wTGVmdENvb3JkV2l0aEFsaWdubWVudChib3VuZHMsIHdpZHRoLCAnbGVmdCcpO1xuXG4gIGlmIChsZWZ0QWxpZ25Db29yZC5pbkJvdW5kcylcbiAgICByZXR1cm4gbGVmdEFsaWduQ29vcmQudmFsdWU7XG5cbiAgY29uc3QgcmlnaHRBbGlnbkNvb3JkID0gYnVpbGRUb3BMZWZ0Q29vcmRXaXRoQWxpZ25tZW50KFxuICAgICAgYm91bmRzLFxuICAgICAgd2lkdGgsXG4gICAgICAncmlnaHQnXG4gICk7XG5cbiAgaWYgKHJpZ2h0QWxpZ25Db29yZC5pbkJvdW5kcylcbiAgICByZXR1cm4gcmlnaHRBbGlnbkNvb3JkLnZhbHVlO1xuXG4gIHJldHVybiBsZWZ0QWxpZ25Db29yZC52YWx1ZTtcbn07XG5cbmNvbnN0IGJ1aWxkVG9wTGVmdENvb3JkV2l0aEFsaWdubWVudCA9IChcbiAgYm91bmRzOiBET01SZWN0LFxuICB3aWR0aDogbnVtYmVyLFxuICBhbGlnbm1lbnQ6ICdsZWZ0JyB8ICdyaWdodCdcbik6IHtcbiAgdmFsdWU6IG51bWJlcjtcbiAgaW5Cb3VuZHM6IGJvb2xlYW47XG59ID0+IHtcbiAgY29uc3QgbWF4TGVmdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcblxuICBpZiAoYWxpZ25tZW50ID09PSAnbGVmdCcpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGJvdW5kcy5sZWZ0O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlLFxuICAgICAgaW5Cb3VuZHM6IHZhbHVlICsgd2lkdGggPD0gbWF4TGVmdCxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHZhbHVlID0gYm91bmRzLnJpZ2h0IC0gd2lkdGg7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWUsXG4gICAgICBpbkJvdW5kczogYm91bmRzLnJpZ2h0IC0gd2lkdGggPj0gMCxcbiAgICB9O1xuICB9XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIERpYWxvZ1Rvb2xiYXJCdXR0b25Qcm9wcyB7XG4gIHRpdGxlPzogc3RyaW5nO1xuICBpY29uPzogc3RyaW5nO1xuICBkaWFsb2dEYXRhVGVzdElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgRGlhbG9nVG9vbGJhckJ1dHRvbjogUmVhY3QuRkM8UmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48RGlhbG9nVG9vbGJhckJ1dHRvblByb3BzPj4gPSAoeyB0aXRsZSwgaWNvbiwgZGlhbG9nRGF0YVRlc3RJZCwgY2hpbGRyZW4gfSkgPT4ge1xuICBjb25zdCBob3N0aW5nUmVmID0gUmVhY3QudXNlUmVmPEhUTUxCdXR0b25FbGVtZW50PihudWxsKTtcbiAgY29uc3QgW29wZW4sIHNldE9wZW5dID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICByZWY9e2hvc3RpbmdSZWZ9XG4gICAgICAgIGljb249e2ljb259XG4gICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgb25DbGljaz17KCkgPT4gc2V0T3BlbihjdXJyZW50ID0+ICFjdXJyZW50KX1cbiAgICAgIC8+XG4gICAgICA8RGlhbG9nXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tdnNjb2RlLXNpZGVCYXItYmFja2dyb3VuZCknLFxuICAgICAgICAgIHBhZGRpbmc6ICc0cHggOHB4J1xuICAgICAgICB9fVxuICAgICAgICBvcGVuPXtvcGVufVxuICAgICAgICB3aWR0aD17MjAwfVxuICAgICAgICAvLyBUT0RPOiBUZW1wb3Jhcnkgc3BhY2luZyB1bnRpbCBkZXNpZ24gb2YgdG9vbGJhciBidXR0b25zIGlzIHJldmlzaXRlZFxuICAgICAgICB2ZXJ0aWNhbE9mZnNldD17OH1cbiAgICAgICAgcmVxdWVzdENsb3NlPXsoKSA9PiBzZXRPcGVuKGZhbHNlKX1cbiAgICAgICAgYW5jaG9yPXtob3N0aW5nUmVmfVxuICAgICAgICBkYXRhVGVzdElkPXtkaWFsb2dEYXRhVGVzdElkfVxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L0RpYWxvZz5cbiAgICA8Lz5cbiAgKTtcbn07XG4iLCIvKlxuICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgdHlwZSB7IENhbGxMb2csIEVsZW1lbnRJbmZvLCBNb2RlLCBTb3VyY2UgfSBmcm9tICcuL3JlY29yZGVyVHlwZXMnO1xuaW1wb3J0IHsgQ29kZU1pcnJvcldyYXBwZXIgfSBmcm9tICdAd2ViL2NvbXBvbmVudHMvY29kZU1pcnJvcldyYXBwZXInO1xuaW1wb3J0IHR5cGUgeyBTb3VyY2VIaWdobGlnaHQgfSBmcm9tICdAd2ViL2NvbXBvbmVudHMvY29kZU1pcnJvcldyYXBwZXInO1xuaW1wb3J0IHsgU3BsaXRWaWV3IH0gZnJvbSAnQHdlYi9jb21wb25lbnRzL3NwbGl0Vmlldyc7XG5pbXBvcnQgeyBUYWJiZWRQYW5lIH0gZnJvbSAnQHdlYi9jb21wb25lbnRzL3RhYmJlZFBhbmUnO1xuaW1wb3J0IHsgVG9vbGJhciB9IGZyb20gJ0B3ZWIvY29tcG9uZW50cy90b29sYmFyJztcbmltcG9ydCB7IGVtcHR5U291cmNlLCBTb3VyY2VDaG9vc2VyIH0gZnJvbSAnQHdlYi9jb21wb25lbnRzL3NvdXJjZUNob29zZXInO1xuaW1wb3J0IHsgVG9vbGJhckJ1dHRvbiwgVG9vbGJhclNlcGFyYXRvciB9IGZyb20gJ0B3ZWIvY29tcG9uZW50cy90b29sYmFyQnV0dG9uJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENhbGxMb2dWaWV3IH0gZnJvbSAnLi9jYWxsTG9nJztcbmltcG9ydCAnLi9yZWNvcmRlci5jc3MnO1xuaW1wb3J0IHsgYXNMb2NhdG9yIH0gZnJvbSAnQGlzb21vcnBoaWMvbG9jYXRvckdlbmVyYXRvcnMnO1xuaW1wb3J0IHsgdXNlRGFya01vZGVTZXR0aW5nIH0gZnJvbSAnQHdlYi90aGVtZSc7XG5pbXBvcnQgeyBjb3B5LCB1c2VTZXR0aW5nIH0gZnJvbSAnQHdlYi91aVV0aWxzJztcbmltcG9ydCB5YW1sIGZyb20gJ3lhbWwnO1xuaW1wb3J0IHsgcGFyc2VBcmlhU25hcHNob3QgfSBmcm9tICdAaXNvbW9ycGhpYy9hcmlhU25hcHNob3QnO1xuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSAnQHdlYi9jb21wb25lbnRzL2RpYWxvZyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjb3JkZXJQcm9wcyB7XG4gIHNvdXJjZXM6IFNvdXJjZVtdLFxuICBwYXVzZWQ6IGJvb2xlYW4sXG4gIGxvZzogTWFwPHN0cmluZywgQ2FsbExvZz4sXG4gIG1vZGU6IE1vZGUsXG59XG5cbmV4cG9ydCBjb25zdCBSZWNvcmRlcjogUmVhY3QuRkM8UmVjb3JkZXJQcm9wcz4gPSAoe1xuICBzb3VyY2VzLFxuICBwYXVzZWQsXG4gIGxvZyxcbiAgbW9kZSxcbn0pID0+IHtcbiAgY29uc3QgW3NlbGVjdGVkRmlsZUlkLCBzZXRTZWxlY3RlZEZpbGVJZF0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmcgfCB1bmRlZmluZWQ+KCk7XG4gIGNvbnN0IFtzZWxlY3RlZFRhYiwgc2V0U2VsZWN0ZWRUYWJdID0gdXNlU2V0dGluZzxzdHJpbmc+KCdyZWNvcmRlclByb3BlcnRpZXNUYWInLCAnbG9nJyk7XG4gIGNvbnN0IFthcmlhU25hcHNob3QsIHNldEFyaWFTbmFwc2hvdF0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmcgfCB1bmRlZmluZWQ+KCk7XG4gIGNvbnN0IFthcmlhU25hcHNob3RFcnJvcnMsIHNldEFyaWFTbmFwc2hvdEVycm9yc10gPSBSZWFjdC51c2VTdGF0ZTxTb3VyY2VIaWdobGlnaHRbXT4oKTtcbiAgY29uc3QgW3NldHRpbmdzT3Blbiwgc2V0U2V0dGluZ3NPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2RhcmtNb2RlLCBzZXREYXJrTW9kZV0gPSB1c2VEYXJrTW9kZVNldHRpbmcoKTtcbiAgY29uc3QgW2F1dG9FeHBlY3QsIHNldEF1dG9FeHBlY3RdID0gdXNlU2V0dGluZzxib29sZWFuPignYXV0b0V4cGVjdCcsIGZhbHNlKTtcbiAgY29uc3Qgc2V0dGluZ3NCdXR0b25SZWYgPSBSZWFjdC51c2VSZWY8SFRNTEJ1dHRvbkVsZW1lbnQ+KG51bGwpO1xuICB3aW5kb3cucGxheXdyaWdodFNlbGVjdFNvdXJjZSA9IHNlbGVjdGVkU291cmNlSWQgPT4gc2V0U2VsZWN0ZWRGaWxlSWQoc2VsZWN0ZWRTb3VyY2VJZCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuZGlzcGF0Y2goeyBldmVudDogJ3NldEF1dG9FeHBlY3QnLCBwYXJhbXM6IHsgYXV0b0V4cGVjdCB9IH0pO1xuICB9LCBbYXV0b0V4cGVjdF0pO1xuXG4gIGNvbnN0IHNvdXJjZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXMuZmluZChzID0+IHMuaWQgPT09IHNlbGVjdGVkRmlsZUlkKTtcbiAgICByZXR1cm4gc291cmNlID8/IGVtcHR5U291cmNlKCk7XG4gIH0sIFtzb3VyY2VzLCBzZWxlY3RlZEZpbGVJZF0pO1xuXG4gIGNvbnN0IFtsb2NhdG9yLCBzZXRMb2NhdG9yXSA9IFJlYWN0LnVzZVN0YXRlKCcnKTtcbiAgd2luZG93LnBsYXl3cmlnaHRFbGVtZW50UGlja2VkID0gKGVsZW1lbnRJbmZvOiBFbGVtZW50SW5mbywgdXNlckdlc3R1cmU/OiBib29sZWFuKSA9PiB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBzb3VyY2UubGFuZ3VhZ2U7XG4gICAgc2V0TG9jYXRvcihhc0xvY2F0b3IobGFuZ3VhZ2UsIGVsZW1lbnRJbmZvLnNlbGVjdG9yKSk7XG4gICAgc2V0QXJpYVNuYXBzaG90KGVsZW1lbnRJbmZvLmFyaWFTbmFwc2hvdCk7XG4gICAgc2V0QXJpYVNuYXBzaG90RXJyb3JzKFtdKTtcbiAgICBpZiAodXNlckdlc3R1cmUgJiYgc2VsZWN0ZWRUYWIgIT09ICdsb2NhdG9yJyAmJiBzZWxlY3RlZFRhYiAhPT0gJ2FyaWEnKVxuICAgICAgc2V0U2VsZWN0ZWRUYWIoJ2xvY2F0b3InKTtcblxuICAgIGlmIChtb2RlID09PSAnaW5zcGVjdGluZycgJiYgc2VsZWN0ZWRUYWIgPT09ICdhcmlhJykge1xuICAgICAgLy8gS2VlcCBleHBsb3JpbmcgYXJpYS5cbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmRpc3BhdGNoKHsgZXZlbnQ6ICdzZXRNb2RlJywgcGFyYW1zOiB7IG1vZGU6IG1vZGUgPT09ICdpbnNwZWN0aW5nJyA/ICdzdGFuZGJ5JyA6ICdyZWNvcmRpbmcnIH0gfSkuY2F0Y2goKCkgPT4geyB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgbWVzc2FnZXNFbmRSZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIG1lc3NhZ2VzRW5kUmVmLmN1cnJlbnQ/LnNjcm9sbEludG9WaWV3KHsgYmxvY2s6ICdjZW50ZXInLCBpbmxpbmU6ICduZWFyZXN0JyB9KTtcbiAgfSwgW21lc3NhZ2VzRW5kUmVmXSk7XG5cblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUtleURvd24gPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgIGNhc2UgJ0Y4JzpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGlmIChwYXVzZWQpXG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2goeyBldmVudDogJ3Jlc3VtZScgfSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoKHsgZXZlbnQ6ICdwYXVzZScgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0YxMCc6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBpZiAocGF1c2VkKVxuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoKHsgZXZlbnQ6ICdzdGVwJyB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICByZXR1cm4gKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pO1xuICB9LCBbcGF1c2VkXSk7XG5cbiAgY29uc3Qgb25FZGl0b3JDaGFuZ2UgPSBSZWFjdC51c2VDYWxsYmFjaygoc2VsZWN0b3I6IHN0cmluZykgPT4ge1xuICAgIGlmIChtb2RlID09PSAnbm9uZScgfHwgbW9kZSA9PT0gJ2luc3BlY3RpbmcnKVxuICAgICAgd2luZG93LmRpc3BhdGNoKHsgZXZlbnQ6ICdzZXRNb2RlJywgcGFyYW1zOiB7IG1vZGU6ICdzdGFuZGJ5JyB9IH0pO1xuICAgIHNldExvY2F0b3Ioc2VsZWN0b3IpO1xuICAgIHdpbmRvdy5kaXNwYXRjaCh7IGV2ZW50OiAnaGlnaGxpZ2h0UmVxdWVzdGVkJywgcGFyYW1zOiB7IHNlbGVjdG9yIH0gfSk7XG4gIH0sIFttb2RlXSk7XG5cbiAgY29uc3Qgb25BcmlhRWRpdG9yQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soKGFyaWFTbmFwc2hvdDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKG1vZGUgPT09ICdub25lJyB8fCBtb2RlID09PSAnaW5zcGVjdGluZycpXG4gICAgICB3aW5kb3cuZGlzcGF0Y2goeyBldmVudDogJ3NldE1vZGUnLCBwYXJhbXM6IHsgbW9kZTogJ3N0YW5kYnknIH0gfSk7XG4gICAgY29uc3QgeyBmcmFnbWVudCwgZXJyb3JzIH0gPSBwYXJzZUFyaWFTbmFwc2hvdCh5YW1sLCBhcmlhU25hcHNob3QsIHsgcHJldHR5RXJyb3JzOiBmYWxzZSB9KTtcbiAgICBjb25zdCBoaWdobGlnaHRzID0gZXJyb3JzLm1hcChlcnJvciA9PiB7XG4gICAgICBjb25zdCBoaWdobGlnaHQ6IFNvdXJjZUhpZ2hsaWdodCA9IHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgbGluZTogZXJyb3IucmFuZ2VbMV0ubGluZSxcbiAgICAgICAgY29sdW1uOiBlcnJvci5yYW5nZVsxXS5jb2wsXG4gICAgICAgIHR5cGU6ICdzdWJ0bGUtZXJyb3InLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBoaWdobGlnaHQ7XG4gICAgfSk7XG4gICAgc2V0QXJpYVNuYXBzaG90RXJyb3JzKGhpZ2hsaWdodHMpO1xuICAgIHNldEFyaWFTbmFwc2hvdChhcmlhU25hcHNob3QpO1xuICAgIGlmICghZXJyb3JzLmxlbmd0aClcbiAgICAgIHdpbmRvdy5kaXNwYXRjaCh7IGV2ZW50OiAnaGlnaGxpZ2h0UmVxdWVzdGVkJywgcGFyYW1zOiB7IGFyaWFUZW1wbGF0ZTogZnJhZ21lbnQgfSB9KTtcbiAgfSwgW21vZGVdKTtcblxuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J3JlY29yZGVyJz5cbiAgICA8VG9vbGJhcj5cbiAgICAgIDxUb29sYmFyQnV0dG9uIGljb249J2NpcmNsZS1sYXJnZS1maWxsZWQnIHRpdGxlPSdSZWNvcmQnIHRvZ2dsZWQ9e21vZGUgPT09ICdyZWNvcmRpbmcnIHx8IG1vZGUgPT09ICdyZWNvcmRpbmctaW5zcGVjdGluZycgfHwgbW9kZSA9PT0gJ2Fzc2VydGluZ1RleHQnIHx8IG1vZGUgPT09ICdhc3NlcnRpbmdWaXNpYmlsaXR5J30gb25DbGljaz17KCkgPT4ge1xuICAgICAgICB3aW5kb3cuZGlzcGF0Y2goeyBldmVudDogJ3NldE1vZGUnLCBwYXJhbXM6IHsgbW9kZTogbW9kZSA9PT0gJ25vbmUnIHx8IG1vZGUgPT09ICdzdGFuZGJ5JyB8fCBtb2RlID09PSAnaW5zcGVjdGluZycgPyAncmVjb3JkaW5nJyA6ICdzdGFuZGJ5JyB9IH0pO1xuICAgICAgfX0+UmVjb3JkPC9Ub29sYmFyQnV0dG9uPlxuICAgICAgPFRvb2xiYXJTZXBhcmF0b3IgLz5cbiAgICAgIDxUb29sYmFyQnV0dG9uIGljb249J2luc3BlY3QnIHRpdGxlPSdQaWNrIGxvY2F0b3InIHRvZ2dsZWQ9e21vZGUgPT09ICdpbnNwZWN0aW5nJyB8fCBtb2RlID09PSAncmVjb3JkaW5nLWluc3BlY3RpbmcnfSBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld01vZGUgPSB7XG4gICAgICAgICAgJ2luc3BlY3RpbmcnOiAnc3RhbmRieScsXG4gICAgICAgICAgJ25vbmUnOiAnaW5zcGVjdGluZycsXG4gICAgICAgICAgJ3N0YW5kYnknOiAnaW5zcGVjdGluZycsXG4gICAgICAgICAgJ3JlY29yZGluZyc6ICdyZWNvcmRpbmctaW5zcGVjdGluZycsXG4gICAgICAgICAgJ3JlY29yZGluZy1pbnNwZWN0aW5nJzogJ3JlY29yZGluZycsXG4gICAgICAgICAgJ2Fzc2VydGluZ1RleHQnOiAncmVjb3JkaW5nLWluc3BlY3RpbmcnLFxuICAgICAgICAgICdhc3NlcnRpbmdWaXNpYmlsaXR5JzogJ3JlY29yZGluZy1pbnNwZWN0aW5nJyxcbiAgICAgICAgICAnYXNzZXJ0aW5nVmFsdWUnOiAncmVjb3JkaW5nLWluc3BlY3RpbmcnLFxuICAgICAgICAgICdhc3NlcnRpbmdTbmFwc2hvdCc6ICdyZWNvcmRpbmctaW5zcGVjdGluZycsXG4gICAgICAgIH1bbW9kZV07XG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaCh7IGV2ZW50OiAnc2V0TW9kZScsIHBhcmFtczogeyBtb2RlOiBuZXdNb2RlIH0gfSkuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAgIH19PjwvVG9vbGJhckJ1dHRvbj5cbiAgICAgIDxUb29sYmFyQnV0dG9uIGljb249J2V5ZScgdGl0bGU9J0Fzc2VydCB2aXNpYmlsaXR5JyB0b2dnbGVkPXttb2RlID09PSAnYXNzZXJ0aW5nVmlzaWJpbGl0eSd9IGRpc2FibGVkPXttb2RlID09PSAnbm9uZScgfHwgbW9kZSA9PT0gJ3N0YW5kYnknIHx8IG1vZGUgPT09ICdpbnNwZWN0aW5nJ30gb25DbGljaz17KCkgPT4ge1xuICAgICAgICB3aW5kb3cuZGlzcGF0Y2goeyBldmVudDogJ3NldE1vZGUnLCBwYXJhbXM6IHsgbW9kZTogbW9kZSA9PT0gJ2Fzc2VydGluZ1Zpc2liaWxpdHknID8gJ3JlY29yZGluZycgOiAnYXNzZXJ0aW5nVmlzaWJpbGl0eScgfSB9KTtcbiAgICAgIH19PjwvVG9vbGJhckJ1dHRvbj5cbiAgICAgIDxUb29sYmFyQnV0dG9uIGljb249J3dob2xlLXdvcmQnIHRpdGxlPSdBc3NlcnQgdGV4dCcgdG9nZ2xlZD17bW9kZSA9PT0gJ2Fzc2VydGluZ1RleHQnfSBkaXNhYmxlZD17bW9kZSA9PT0gJ25vbmUnIHx8IG1vZGUgPT09ICdzdGFuZGJ5JyB8fCBtb2RlID09PSAnaW5zcGVjdGluZyd9IG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgd2luZG93LmRpc3BhdGNoKHsgZXZlbnQ6ICdzZXRNb2RlJywgcGFyYW1zOiB7IG1vZGU6IG1vZGUgPT09ICdhc3NlcnRpbmdUZXh0JyA/ICdyZWNvcmRpbmcnIDogJ2Fzc2VydGluZ1RleHQnIH0gfSk7XG4gICAgICB9fT48L1Rvb2xiYXJCdXR0b24+XG4gICAgICA8VG9vbGJhckJ1dHRvbiBpY29uPSdzeW1ib2wtY29uc3RhbnQnIHRpdGxlPSdBc3NlcnQgdmFsdWUnIHRvZ2dsZWQ9e21vZGUgPT09ICdhc3NlcnRpbmdWYWx1ZSd9IGRpc2FibGVkPXttb2RlID09PSAnbm9uZScgfHwgbW9kZSA9PT0gJ3N0YW5kYnknIHx8IG1vZGUgPT09ICdpbnNwZWN0aW5nJ30gb25DbGljaz17KCkgPT4ge1xuICAgICAgICB3aW5kb3cuZGlzcGF0Y2goeyBldmVudDogJ3NldE1vZGUnLCBwYXJhbXM6IHsgbW9kZTogbW9kZSA9PT0gJ2Fzc2VydGluZ1ZhbHVlJyA/ICdyZWNvcmRpbmcnIDogJ2Fzc2VydGluZ1ZhbHVlJyB9IH0pO1xuICAgICAgfX0+PC9Ub29sYmFyQnV0dG9uPlxuICAgICAgPFRvb2xiYXJCdXR0b24gaWNvbj0nZ2lzdCcgdGl0bGU9J0Fzc2VydCBzbmFwc2hvdCcgdG9nZ2xlZD17bW9kZSA9PT0gJ2Fzc2VydGluZ1NuYXBzaG90J30gZGlzYWJsZWQ9e21vZGUgPT09ICdub25lJyB8fCBtb2RlID09PSAnc3RhbmRieScgfHwgbW9kZSA9PT0gJ2luc3BlY3RpbmcnfSBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaCh7IGV2ZW50OiAnc2V0TW9kZScsIHBhcmFtczogeyBtb2RlOiBtb2RlID09PSAnYXNzZXJ0aW5nU25hcHNob3QnID8gJ3JlY29yZGluZycgOiAnYXNzZXJ0aW5nU25hcHNob3QnIH0gfSk7XG4gICAgICB9fT48L1Rvb2xiYXJCdXR0b24+XG4gICAgICA8VG9vbGJhclNlcGFyYXRvciAvPlxuICAgICAgPFRvb2xiYXJCdXR0b24gaWNvbj0nZmlsZXMnIHRpdGxlPSdDb3B5JyBkaXNhYmxlZD17IXNvdXJjZSB8fCAhc291cmNlLnRleHR9IG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgY29weShzb3VyY2UudGV4dCk7XG4gICAgICB9fT48L1Rvb2xiYXJCdXR0b24+XG4gICAgICA8VG9vbGJhckJ1dHRvbiBpY29uPSdkZWJ1Zy1jb250aW51ZScgdGl0bGU9J1Jlc3VtZSAoRjgpJyBhcmlhTGFiZWw9J1Jlc3VtZScgZGlzYWJsZWQ9eyFwYXVzZWR9IG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgd2luZG93LmRpc3BhdGNoKHsgZXZlbnQ6ICdyZXN1bWUnIH0pO1xuICAgICAgfX0+PC9Ub29sYmFyQnV0dG9uPlxuICAgICAgPFRvb2xiYXJCdXR0b24gaWNvbj0nZGVidWctcGF1c2UnIHRpdGxlPSdQYXVzZSAoRjgpJyBhcmlhTGFiZWw9J1BhdXNlJyBkaXNhYmxlZD17cGF1c2VkfSBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaCh7IGV2ZW50OiAncGF1c2UnIH0pO1xuICAgICAgfX0+PC9Ub29sYmFyQnV0dG9uPlxuICAgICAgPFRvb2xiYXJCdXR0b24gaWNvbj0nZGVidWctc3RlcC1vdmVyJyB0aXRsZT0nU3RlcCBvdmVyIChGMTApJyBhcmlhTGFiZWw9J1N0ZXAgb3ZlcicgZGlzYWJsZWQ9eyFwYXVzZWR9IG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgd2luZG93LmRpc3BhdGNoKHsgZXZlbnQ6ICdzdGVwJyB9KTtcbiAgICAgIH19PjwvVG9vbGJhckJ1dHRvbj5cbiAgICAgIDxkaXYgc3R5bGU9e3sgZmxleDogJ2F1dG8nIH19PjwvZGl2PlxuICAgICAgPGRpdj5UYXJnZXQ6PC9kaXY+XG4gICAgICA8U291cmNlQ2hvb3NlciBmaWxlSWQ9e3NvdXJjZS5pZH0gc291cmNlcz17c291cmNlc30gc2V0RmlsZUlkPXtmaWxlSWQgPT4ge1xuICAgICAgICBzZXRTZWxlY3RlZEZpbGVJZChmaWxlSWQpO1xuICAgICAgICB3aW5kb3cuZGlzcGF0Y2goeyBldmVudDogJ2ZpbGVDaGFuZ2VkJywgcGFyYW1zOiB7IGZpbGVJZCB9IH0pO1xuICAgICAgfX0gLz5cbiAgICAgIDxUb29sYmFyQnV0dG9uIGljb249J2NsZWFyLWFsbCcgdGl0bGU9J0NsZWFyJyBkaXNhYmxlZD17IXNvdXJjZSB8fCAhc291cmNlLnRleHR9IG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgd2luZG93LmRpc3BhdGNoKHsgZXZlbnQ6ICdjbGVhcicgfSk7XG4gICAgICB9fT48L1Rvb2xiYXJCdXR0b24+XG4gICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICByZWY9e3NldHRpbmdzQnV0dG9uUmVmfVxuICAgICAgICBpY29uPSdzZXR0aW5ncy1nZWFyJ1xuICAgICAgICB0aXRsZT0nU2V0dGluZ3MnXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNldHRpbmdzT3BlbihjdXJyZW50ID0+ICFjdXJyZW50KX1cbiAgICAgIC8+XG4gICAgICA8RGlhbG9nXG4gICAgICAgIHN0eWxlPXt7IHBhZGRpbmc6ICc0cHggOHB4JyB9fVxuICAgICAgICBvcGVuPXtzZXR0aW5nc09wZW59XG4gICAgICAgIHdpZHRoPXsyMDB9XG4gICAgICAgIHZlcnRpY2FsT2Zmc2V0PXs4fVxuICAgICAgICByZXF1ZXN0Q2xvc2U9eygpID0+IHNldFNldHRpbmdzT3BlbihmYWxzZSl9XG4gICAgICAgIGFuY2hvcj17c2V0dGluZ3NCdXR0b25SZWZ9XG4gICAgICAgIGRhdGFUZXN0SWQ9J3NldHRpbmdzLWRpYWxvZydcbiAgICAgID5cbiAgICAgICAgPGRpdiBrZXk9J2RhcmstbW9kZS1zZXR0aW5nJyBjbGFzc05hbWU9J3NldHRpbmcnPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPSdjaGVja2JveCcgaWQ9J2RhcmstbW9kZS1zZXR0aW5nJyBjaGVja2VkPXtkYXJrTW9kZX0gb25DaGFuZ2U9eygpID0+IHNldERhcmtNb2RlKCFkYXJrTW9kZSl9IC8+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9J2RhcmstbW9kZS1zZXR0aW5nJz5EYXJrIG1vZGU8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBrZXk9J2F1dG8tZXhwZWN0LXNldHRpbmcnIGNsYXNzTmFtZT0nc2V0dGluZycgdGl0bGU9J0F1dG9tYXRpY2FsbHkgZ2VuZXJhdGUgYXNzZXJ0aW9ucyB3aGlsZSByZWNvcmRpbmcnPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPSdjaGVja2JveCcgaWQ9J2F1dG8tZXhwZWN0LXNldHRpbmcnIGNoZWNrZWQ9e2F1dG9FeHBlY3R9IG9uQ2hhbmdlPXsoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2goeyBldmVudDogJ3NldEF1dG9FeHBlY3QnLCBwYXJhbXM6IHsgYXV0b0V4cGVjdDogIWF1dG9FeHBlY3QgfSB9KTtcbiAgICAgICAgICAgIHNldEF1dG9FeHBlY3QoIWF1dG9FeHBlY3QpO1xuICAgICAgICAgIH19IC8+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9J2F1dG8tZXhwZWN0LXNldHRpbmcnPkdlbmVyYXRlIGFzc2VydGlvbnM8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRGlhbG9nPlxuICAgIDwvVG9vbGJhcj5cbiAgICA8U3BsaXRWaWV3XG4gICAgICBzaWRlYmFyU2l6ZT17MjAwfVxuICAgICAgbWFpbj17PENvZGVNaXJyb3JXcmFwcGVyIHRleHQ9e3NvdXJjZS50ZXh0fSBoaWdobGlnaHRlcj17c291cmNlLmxhbmd1YWdlfSBoaWdobGlnaHQ9e3NvdXJjZS5oaWdobGlnaHR9IHJldmVhbExpbmU9e3NvdXJjZS5yZXZlYWxMaW5lfSByZWFkT25seT17dHJ1ZX0gbGluZU51bWJlcnM9e3RydWV9IC8+fVxuICAgICAgc2lkZWJhcj17PFRhYmJlZFBhbmVcbiAgICAgICAgcmlnaHRUb29sYmFyPXtzZWxlY3RlZFRhYiA9PT0gJ2xvY2F0b3InIHx8IHNlbGVjdGVkVGFiID09PSAnYXJpYScgPyBbPFRvb2xiYXJCdXR0b24ga2V5PXsxfSBpY29uPSdmaWxlcycgdGl0bGU9J0NvcHknIG9uQ2xpY2s9eygpID0+IGNvcHkoKHNlbGVjdGVkVGFiID09PSAnbG9jYXRvcicgPyBsb2NhdG9yIDogYXJpYVNuYXBzaG90KSB8fCAnJyl9IC8+XSA6IFtdfVxuICAgICAgICB0YWJzPXtbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdsb2NhdG9yJyxcbiAgICAgICAgICAgIHRpdGxlOiAnTG9jYXRvcicsXG4gICAgICAgICAgICByZW5kZXI6ICgpID0+IDxDb2RlTWlycm9yV3JhcHBlciB0ZXh0PXtsb2NhdG9yfSBwbGFjZWhvbGRlcj0nVHlwZSBsb2NhdG9yIHRvIGluc3BlY3QnIGhpZ2hsaWdodGVyPXtzb3VyY2UubGFuZ3VhZ2V9IGZvY3VzT25DaGFuZ2U9e3RydWV9IG9uQ2hhbmdlPXtvbkVkaXRvckNoYW5nZX0gd3JhcExpbmVzPXt0cnVlfSAvPlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdsb2cnLFxuICAgICAgICAgICAgdGl0bGU6ICdMb2cnLFxuICAgICAgICAgICAgcmVuZGVyOiAoKSA9PiA8Q2FsbExvZ1ZpZXcgbGFuZ3VhZ2U9e3NvdXJjZS5sYW5ndWFnZX0gbG9nPXtBcnJheS5mcm9tKGxvZy52YWx1ZXMoKSl9IC8+XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ2FyaWEnLFxuICAgICAgICAgICAgdGl0bGU6ICdBcmlhJyxcbiAgICAgICAgICAgIHJlbmRlcjogKCkgPT4gPENvZGVNaXJyb3JXcmFwcGVyIHRleHQ9e2FyaWFTbmFwc2hvdCB8fCAnJ30gcGxhY2Vob2xkZXI9J1R5cGUgYXJpYSB0ZW1wbGF0ZSB0byBtYXRjaCcgaGlnaGxpZ2h0ZXI9eyd5YW1sJ30gb25DaGFuZ2U9e29uQXJpYUVkaXRvckNoYW5nZX0gaGlnaGxpZ2h0PXthcmlhU25hcHNob3RFcnJvcnN9IHdyYXBMaW5lcz17dHJ1ZX0gLz5cbiAgICAgICAgICB9LFxuICAgICAgICBdfVxuICAgICAgICBzZWxlY3RlZFRhYj17c2VsZWN0ZWRUYWJ9XG4gICAgICAgIHNldFNlbGVjdGVkVGFiPXtzZXRTZWxlY3RlZFRhYn1cbiAgICAgIC8+fVxuICAgIC8+XG4gIDwvZGl2Pjtcbn07XG4iLCIvKlxuICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgdHlwZSB7IENhbGxMb2csIE1vZGUsIFNvdXJjZSB9IGZyb20gJy4vcmVjb3JkZXJUeXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWNvcmRlciB9IGZyb20gJy4vcmVjb3JkZXInO1xuaW1wb3J0ICcuL3JlY29yZGVyLmNzcyc7XG5cbmV4cG9ydCBjb25zdCBNYWluOiBSZWFjdC5GQyA9ICh7fSkgPT4ge1xuICBjb25zdCBbc291cmNlcywgc2V0U291cmNlc10gPSBSZWFjdC51c2VTdGF0ZTxTb3VyY2VbXT4oW10pO1xuICBjb25zdCBbcGF1c2VkLCBzZXRQYXVzZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbbG9nLCBzZXRMb2ddID0gUmVhY3QudXNlU3RhdGUobmV3IE1hcDxzdHJpbmcsIENhbGxMb2c+KCkpO1xuICBjb25zdCBbbW9kZSwgc2V0TW9kZV0gPSBSZWFjdC51c2VTdGF0ZTxNb2RlPignbm9uZScpO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93LnBsYXl3cmlnaHRTZXRNb2RlID0gc2V0TW9kZTtcbiAgICB3aW5kb3cucGxheXdyaWdodFNldFNvdXJjZXMgPSBzb3VyY2VzID0+IHtcbiAgICAgIHNldFNvdXJjZXMoc291cmNlcyk7XG4gICAgICB3aW5kb3cucGxheXdyaWdodFNvdXJjZXNFY2hvRm9yVGVzdCA9IHNvdXJjZXM7XG4gICAgfTtcbiAgICB3aW5kb3cucGxheXdyaWdodFNldFBhZ2VVUkwgPSB1cmwgPT4ge1xuICAgICAgZG9jdW1lbnQudGl0bGUgPSB1cmxcbiAgICAgICAgPyBgUGxheXdyaWdodCBJbnNwZWN0b3IgLSAke3VybH1gXG4gICAgICAgIDogYFBsYXl3cmlnaHQgSW5zcGVjdG9yYDtcbiAgICB9O1xuICAgIHdpbmRvdy5wbGF5d3JpZ2h0U2V0UGF1c2VkID0gc2V0UGF1c2VkO1xuICAgIHdpbmRvdy5wbGF5d3JpZ2h0VXBkYXRlTG9ncyA9IGNhbGxMb2dzID0+IHtcbiAgICAgIHNldExvZyhsb2cgPT4ge1xuICAgICAgICBjb25zdCBuZXdMb2cgPSBuZXcgTWFwPHN0cmluZywgQ2FsbExvZz4obG9nKTtcbiAgICAgICAgZm9yIChjb25zdCBjYWxsTG9nIG9mIGNhbGxMb2dzKSB7XG4gICAgICAgICAgY2FsbExvZy5yZXZlYWwgPSAhbG9nLmhhcyhjYWxsTG9nLmlkKTtcbiAgICAgICAgICBuZXdMb2cuc2V0KGNhbGxMb2cuaWQsIGNhbGxMb2cpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdMb2c7XG4gICAgICB9KTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIDxSZWNvcmRlciBzb3VyY2VzPXtzb3VyY2VzfSBwYXVzZWQ9e3BhdXNlZH0gbG9nPXtsb2d9IG1vZGU9e21vZGV9IC8+O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAnQHdlYi9jb21tb24uY3NzJztcbmltcG9ydCB7IGFwcGx5VGhlbWUgfSBmcm9tICdAd2ViL3RoZW1lJztcbmltcG9ydCAnQHdlYi90aGlyZF9wYXJ0eS92c2NvZGUvY29kaWNvbi5jc3MnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tL2NsaWVudCc7XG5pbXBvcnQgeyBNYWluIH0gZnJvbSAnLi9tYWluJztcblxuKGFzeW5jICgpID0+IHtcbiAgYXBwbHlUaGVtZSgpO1xuICBSZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyb290JykhKS5yZW5kZXIoPE1haW4vPik7XG59KSgpO1xuIl0sImZpbGUiOiJhc3NldHMvaW5kZXgtQk5OQnREcU8uanMifQ==