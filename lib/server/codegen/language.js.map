{
  "version": 3,
  "sources": ["../../../src/server/codegen/language.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BrowserContextOptions } from '../../..';\nimport type * as types from '../types';\nimport type { LanguageGenerator, LanguageGeneratorOptions } from './types';\nimport type * as actions from '@recorder/actions';\n\nexport function generateCode(actions: actions.ActionInContext[], languageGenerator: LanguageGenerator, options: LanguageGeneratorOptions) {\n  const header = languageGenerator.generateHeader(options);\n  const footer = languageGenerator.generateFooter(options.saveStorage);\n  const actionTexts = actions.map(a => generateActionText(languageGenerator, a, !!options.generateAutoExpect)).filter(Boolean) as string[];\n  const text = [header, ...actionTexts, footer].join('\\n');\n  return { header, footer, actionTexts, text };\n}\n\nfunction generateActionText(generator: LanguageGenerator, action: actions.ActionInContext, generateAutoExpect: boolean): string | undefined {\n  let text = generator.generateAction(action);\n  if (!text)\n    return;\n  if (generateAutoExpect && action.action.preconditionSelector) {\n    const expectAction: actions.ActionInContext = {\n      frame: action.frame,\n      startTime: action.startTime,\n      endTime: action.startTime,\n      action: {\n        name: 'assertVisible',\n        selector: action.action.preconditionSelector,\n        signals: [],\n      },\n    };\n    const expectText = generator.generateAction(expectAction);\n    if (expectText)\n      text = expectText + '\\n\\n' + text;\n  }\n  return text;\n}\n\nexport function sanitizeDeviceOptions(device: any, options: BrowserContextOptions): BrowserContextOptions {\n  // Filter out all the properties from the device descriptor.\n  const cleanedOptions: Record<string, any> = {};\n  for (const property in options) {\n    if (JSON.stringify(device[property]) !== JSON.stringify((options as any)[property]))\n      cleanedOptions[property] = (options as any)[property];\n  }\n  return cleanedOptions;\n}\n\nexport function toSignalMap(action: actions.Action) {\n  let popup: actions.PopupSignal | undefined;\n  let download: actions.DownloadSignal | undefined;\n  let dialog: actions.DialogSignal | undefined;\n  for (const signal of action.signals) {\n    if (signal.name === 'popup')\n      popup = signal;\n    else if (signal.name === 'download')\n      download = signal;\n    else if (signal.name === 'dialog')\n      dialog = signal;\n  }\n  return {\n    popup,\n    download,\n    dialog,\n  };\n}\n\nexport function toKeyboardModifiers(modifiers: number): types.SmartKeyboardModifier[] {\n  const result: types.SmartKeyboardModifier[] = [];\n  if (modifiers & 1)\n    result.push('Alt');\n  if (modifiers & 2)\n    result.push('ControlOrMeta');\n  if (modifiers & 4)\n    result.push('ControlOrMeta');\n  if (modifiers & 8)\n    result.push('Shift');\n  return result;\n}\n\nexport function fromKeyboardModifiers(modifiers?: types.SmartKeyboardModifier[]): number {\n  let result = 0;\n  if (!modifiers)\n    return result;\n  if (modifiers.includes('Alt'))\n    result |= 1;\n  if (modifiers.includes('Control'))\n    result |= 2;\n  if (modifiers.includes('ControlOrMeta'))\n    result |= 2;\n  if (modifiers.includes('Meta'))\n    result |= 4;\n  if (modifiers.includes('Shift'))\n    result |= 8;\n  return result;\n}\n\nexport function toClickOptionsForSourceCode(action: actions.ClickAction): types.MouseClickOptions {\n  const modifiers = toKeyboardModifiers(action.modifiers);\n  const options: types.MouseClickOptions = {};\n  if (action.button !== 'left')\n    options.button = action.button;\n  if (modifiers.length)\n    options.modifiers = modifiers;\n  // Do not render clickCount === 2 for dblclick.\n  if (action.clickCount > 2)\n    options.clickCount = action.clickCount;\n  if (action.position)\n    options.position = action.position;\n  return options;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBO,SAAS,aAAa,SAAoC,mBAAsC,SAAmC;AACxI,QAAM,SAAS,kBAAkB,eAAe,OAAO;AACvD,QAAM,SAAS,kBAAkB,eAAe,QAAQ,WAAW;AACnE,QAAM,cAAc,QAAQ,IAAI,OAAK,mBAAmB,mBAAmB,GAAG,CAAC,CAAC,QAAQ,kBAAkB,CAAC,EAAE,OAAO,OAAO;AAC3H,QAAM,OAAO,CAAC,QAAQ,GAAG,aAAa,MAAM,EAAE,KAAK,IAAI;AACvD,SAAO,EAAE,QAAQ,QAAQ,aAAa,KAAK;AAC7C;AAEA,SAAS,mBAAmB,WAA8B,QAAiC,oBAAiD;AAC1I,MAAI,OAAO,UAAU,eAAe,MAAM;AAC1C,MAAI,CAAC;AACH;AACF,MAAI,sBAAsB,OAAO,OAAO,sBAAsB;AAC5D,UAAM,eAAwC;AAAA,MAC5C,OAAO,OAAO;AAAA,MACd,WAAW,OAAO;AAAA,MAClB,SAAS,OAAO;AAAA,MAChB,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,UAAU,OAAO,OAAO;AAAA,QACxB,SAAS,CAAC;AAAA,MACZ;AAAA,IACF;AACA,UAAM,aAAa,UAAU,eAAe,YAAY;AACxD,QAAI;AACF,aAAO,aAAa,SAAS;AAAA,EACjC;AACA,SAAO;AACT;AAEO,SAAS,sBAAsB,QAAa,SAAuD;AAExG,QAAM,iBAAsC,CAAC;AAC7C,aAAW,YAAY,SAAS;AAC9B,QAAI,KAAK,UAAU,OAAO,QAAQ,CAAC,MAAM,KAAK,UAAW,QAAgB,QAAQ,CAAC;AAChF,qBAAe,QAAQ,IAAK,QAAgB,QAAQ;AAAA,EACxD;AACA,SAAO;AACT;AAEO,SAAS,YAAY,QAAwB;AAClD,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,aAAW,UAAU,OAAO,SAAS;AACnC,QAAI,OAAO,SAAS;AAClB,cAAQ;AAAA,aACD,OAAO,SAAS;AACvB,iBAAW;AAAA,aACJ,OAAO,SAAS;AACvB,eAAS;AAAA,EACb;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEO,SAAS,oBAAoB,WAAkD;AACpF,QAAM,SAAwC,CAAC;AAC/C,MAAI,YAAY;AACd,WAAO,KAAK,KAAK;AACnB,MAAI,YAAY;AACd,WAAO,KAAK,eAAe;AAC7B,MAAI,YAAY;AACd,WAAO,KAAK,eAAe;AAC7B,MAAI,YAAY;AACd,WAAO,KAAK,OAAO;AACrB,SAAO;AACT;AAEO,SAAS,sBAAsB,WAAmD;AACvF,MAAI,SAAS;AACb,MAAI,CAAC;AACH,WAAO;AACT,MAAI,UAAU,SAAS,KAAK;AAC1B,cAAU;AACZ,MAAI,UAAU,SAAS,SAAS;AAC9B,cAAU;AACZ,MAAI,UAAU,SAAS,eAAe;AACpC,cAAU;AACZ,MAAI,UAAU,SAAS,MAAM;AAC3B,cAAU;AACZ,MAAI,UAAU,SAAS,OAAO;AAC5B,cAAU;AACZ,SAAO;AACT;AAEO,SAAS,4BAA4B,QAAsD;AAChG,QAAM,YAAY,oBAAoB,OAAO,SAAS;AACtD,QAAM,UAAmC,CAAC;AAC1C,MAAI,OAAO,WAAW;AACpB,YAAQ,SAAS,OAAO;AAC1B,MAAI,UAAU;AACZ,YAAQ,YAAY;AAEtB,MAAI,OAAO,aAAa;AACtB,YAAQ,aAAa,OAAO;AAC9B,MAAI,OAAO;AACT,YAAQ,WAAW,OAAO;AAC5B,SAAO;AACT;",
  "names": []
}
