{
  "version": 3,
  "sources": ["../../../src/server/codegen/python.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { sanitizeDeviceOptions, toClickOptionsForSourceCode, toKeyboardModifiers, toSignalMap } from './language';\nimport { asLocator, escapeWithQuotes, toSnakeCase } from '../../utils';\nimport { deviceDescriptors } from '../deviceDescriptors';\n\nimport type { Language, LanguageGenerator, LanguageGeneratorOptions } from './types';\nimport type { BrowserContextOptions } from '../../../types/types';\nimport type * as actions from '@recorder/actions';\n\nexport class PythonLanguageGenerator implements LanguageGenerator {\n  id: string;\n  groupName = 'Python';\n  name: string;\n  highlighter = 'python' as Language;\n\n  private _awaitPrefix: '' | 'await ';\n  private _asyncPrefix: '' | 'async ';\n  private _isAsync: boolean;\n  private _isPyTest: boolean;\n\n  constructor(isAsync: boolean, isPyTest: boolean) {\n    this.id = isPyTest ? 'python-pytest' : (isAsync ? 'python-async' : 'python');\n    this.name = isPyTest ? 'Pytest' : (isAsync ? 'Library Async' : 'Library');\n    this._isAsync = isAsync;\n    this._isPyTest = isPyTest;\n    this._awaitPrefix = isAsync ? 'await ' : '';\n    this._asyncPrefix = isAsync ? 'async ' : '';\n  }\n\n  generateAction(actionInContext: actions.ActionInContext): string {\n    const action = actionInContext.action;\n    if (this._isPyTest && (action.name === 'openPage' || action.name === 'closePage'))\n      return '';\n\n    const pageAlias = actionInContext.frame.pageAlias;\n    const formatter = new PythonFormatter(4);\n\n    if (action.name === 'openPage') {\n      formatter.add(`${pageAlias} = ${this._awaitPrefix}context.new_page()`);\n      if (action.url && action.url !== 'about:blank' && action.url !== 'chrome://newtab/')\n        formatter.add(`${this._awaitPrefix}${pageAlias}.goto(${quote(action.url)})`);\n      return formatter.format();\n    }\n\n    const locators = actionInContext.frame.framePath.map(selector => `.${this._asLocator(selector)}.content_frame`);\n    const subject = `${pageAlias}${locators.join('')}`;\n    const signals = toSignalMap(action);\n\n    if (signals.dialog)\n      formatter.add(`  ${pageAlias}.once(\"dialog\", lambda dialog: dialog.dismiss())`);\n\n    let code = `${this._awaitPrefix}${this._generateActionCall(subject, actionInContext)}`;\n\n    if (signals.popup) {\n      code = `${this._asyncPrefix}with ${pageAlias}.expect_popup() as ${signals.popup.popupAlias}_info {\n        ${code}\n      }\n      ${signals.popup.popupAlias} = ${this._awaitPrefix}${signals.popup.popupAlias}_info.value`;\n    }\n\n    if (signals.download) {\n      code = `${this._asyncPrefix}with ${pageAlias}.expect_download() as download${signals.download.downloadAlias}_info {\n        ${code}\n      }\n      download${signals.download.downloadAlias} = ${this._awaitPrefix}download${signals.download.downloadAlias}_info.value`;\n    }\n\n    formatter.add(code);\n\n    return formatter.format();\n  }\n\n  private _generateActionCall(subject: string, actionInContext: actions.ActionInContext): string {\n    const action = actionInContext.action;\n    switch (action.name) {\n      case 'openPage':\n        throw Error('Not reached');\n      case 'closePage':\n        return `${subject}.close()`;\n      case 'click': {\n        let method = 'click';\n        if (action.clickCount === 2)\n          method = 'dblclick';\n        const options = toClickOptionsForSourceCode(action);\n        const optionsString = formatOptions(options, false);\n        return `${subject}.${this._asLocator(action.selector)}.${method}(${optionsString})`;\n      }\n      case 'check':\n        return `${subject}.${this._asLocator(action.selector)}.check()`;\n      case 'uncheck':\n        return `${subject}.${this._asLocator(action.selector)}.uncheck()`;\n      case 'fill':\n        return `${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)})`;\n      case 'setInputFiles':\n        return `${subject}.${this._asLocator(action.selector)}.set_input_files(${formatValue(action.files.length === 1 ? action.files[0] : action.files)})`;\n      case 'press': {\n        const modifiers = toKeyboardModifiers(action.modifiers);\n        const shortcut = [...modifiers, action.key].join('+');\n        return `${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)})`;\n      }\n      case 'navigate':\n        return `${subject}.goto(${quote(action.url)})`;\n      case 'select':\n        return `${subject}.${this._asLocator(action.selector)}.select_option(${formatValue(action.options.length === 1 ? action.options[0] : action.options)})`;\n      case 'assertText':\n        return `expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? 'to_contain_text' : 'to_have_text'}(${quote(action.text)})`;\n      case 'assertChecked':\n        return `expect(${subject}.${this._asLocator(action.selector)}).${action.checked ? 'to_be_checked()' : 'not_to_be_checked()'}`;\n      case 'assertVisible':\n        return `expect(${subject}.${this._asLocator(action.selector)}).to_be_visible()`;\n      case 'assertValue': {\n        const assertion = action.value ? `to_have_value(${quote(action.value)})` : `to_be_empty()`;\n        return `expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;\n      }\n      case 'assertSnapshot':\n        return `expect(${subject}.${this._asLocator(action.selector)}).to_match_aria_snapshot(${quote(action.ariaSnapshot)})`;\n    }\n  }\n\n  private _asLocator(selector: string) {\n    return asLocator('python', selector);\n  }\n\n  generateHeader(options: LanguageGeneratorOptions): string {\n    const formatter = new PythonFormatter();\n    const recordHar = options.contextOptions.recordHar;\n    if (this._isPyTest) {\n      const contextOptions = formatContextOptions(options.contextOptions, options.deviceName, true /* asDict */);\n      const fixture = contextOptions ? `\n\n@pytest.fixture(scope=\"session\")\ndef browser_context_args(browser_context_args, playwright) {\n    return {${contextOptions}}\n}\n` : '';\n      formatter.add(`${options.deviceName || contextOptions ? 'import pytest\\n' : ''}import re\nfrom playwright.sync_api import Page, expect\n${fixture}\n\ndef test_example(page: Page) -> None {`);\n      if (recordHar)\n        formatter.add(`    page.route_from_har(${quote(recordHar.path)}${typeof recordHar.urlFilter === 'string' ? `, url=${quote(recordHar.urlFilter)}` : ''})`);\n    } else if (this._isAsync) {\n      formatter.add(`\nimport asyncio\nimport re\nfrom playwright.async_api import Playwright, async_playwright, expect\n\n\nasync def run(playwright: Playwright) -> None {\n    browser = await playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})\n    context = await browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);\n      if (recordHar)\n        formatter.add(`    await context.route_from_har(${quote(recordHar.path)}${typeof recordHar.urlFilter === 'string' ? `, url=${quote(recordHar.urlFilter)}` : ''})`);\n    } else {\n      formatter.add(`\nimport re\nfrom playwright.sync_api import Playwright, sync_playwright, expect\n\n\ndef run(playwright: Playwright) -> None {\n    browser = playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})\n    context = browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);\n      if (recordHar)\n        formatter.add(`    context.route_from_har(${quote(recordHar.path)}${typeof recordHar.urlFilter === 'string' ? `, url=${quote(recordHar.urlFilter)}` : ''})`);\n    }\n    return formatter.format();\n  }\n\n  generateFooter(saveStorage: string | undefined): string {\n    if (this._isPyTest) {\n      return '';\n    } else if (this._isAsync) {\n      const storageStateLine = saveStorage ? `\\n    await context.storage_state(path=${quote(saveStorage)})` : '';\n      return `\\n    # ---------------------${storageStateLine}\n    await context.close()\n    await browser.close()\n\n\nasync def main() -> None:\n    async with async_playwright() as playwright:\n        await run(playwright)\n\n\nasyncio.run(main())\n`;\n    } else {\n      const storageStateLine = saveStorage ? `\\n    context.storage_state(path=${quote(saveStorage)})` : '';\n      return `\\n    # ---------------------${storageStateLine}\n    context.close()\n    browser.close()\n\n\nwith sync_playwright() as playwright:\n    run(playwright)\n`;\n    }\n  }\n}\n\nfunction formatValue(value: any): string {\n  if (value === false)\n    return 'False';\n  if (value === true)\n    return 'True';\n  if (value === undefined)\n    return 'None';\n  if (Array.isArray(value))\n    return `[${value.map(formatValue).join(', ')}]`;\n  if (typeof value === 'string')\n    return quote(value);\n  if (typeof value === 'object')\n    return JSON.stringify(value);\n  return String(value);\n}\n\nfunction formatOptions(value: any, hasArguments: boolean, asDict?: boolean): string {\n  const keys = Object.keys(value).filter(key => value[key] !== undefined).sort();\n  if (!keys.length)\n    return '';\n  return (hasArguments ? ', ' : '') + keys.map(key => {\n    if (asDict)\n      return `\"${toSnakeCase(key)}\": ${formatValue(value[key])}`;\n    return `${toSnakeCase(key)}=${formatValue(value[key])}`;\n  }).join(', ');\n}\n\nfunction formatContextOptions(options: BrowserContextOptions, deviceName: string | undefined, asDict?: boolean): string {\n  // recordHAR is replaced with routeFromHAR in the generated code.\n  options = { ...options, recordHar: undefined };\n  const device = deviceName && deviceDescriptors[deviceName];\n  if (!device)\n    return formatOptions(options, false, asDict);\n  return `**playwright.devices[${quote(deviceName!)}]` + formatOptions(sanitizeDeviceOptions(device, options), true, asDict);\n}\n\nclass PythonFormatter {\n  private _baseIndent: string;\n  private _baseOffset: string;\n  private _lines: string[] = [];\n\n  constructor(offset = 0) {\n    this._baseIndent = ' '.repeat(4);\n    this._baseOffset = ' '.repeat(offset);\n  }\n\n  prepend(text: string) {\n    this._lines = text.trim().split('\\n').map(line => line.trim()).concat(this._lines);\n  }\n\n  add(text: string) {\n    this._lines.push(...text.trim().split('\\n').map(line => line.trim()));\n  }\n\n  newLine() {\n    this._lines.push('');\n  }\n\n  format(): string {\n    let spaces = '';\n    const lines: string[] = [];\n    this._lines.forEach((line: string) => {\n      if (line === '')\n        return lines.push(line);\n      if (line === '}') {\n        spaces = spaces.substring(this._baseIndent.length);\n        return;\n      }\n\n      line = spaces  + line;\n      if (line.endsWith('{')) {\n        spaces += this._baseIndent;\n        line = line.substring(0, line.length - 1).trimEnd() + ':';\n      }\n      return lines.push(this._baseOffset + line);\n    });\n    return lines.join('\\n');\n  }\n}\n\nfunction quote(text: string) {\n  return escapeWithQuotes(text, '\\\"');\n}\n"],
  "mappings": "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",
  "names": []
}
