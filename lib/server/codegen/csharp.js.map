{
  "version": 3,
  "sources": ["../../../src/server/codegen/csharp.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { sanitizeDeviceOptions, toClickOptionsForSourceCode, toKeyboardModifiers, toSignalMap } from './language';\nimport { asLocator, escapeWithQuotes } from '../../utils';\nimport { deviceDescriptors } from '../deviceDescriptors';\n\nimport type { Language, LanguageGenerator, LanguageGeneratorOptions } from './types';\nimport type { BrowserContextOptions } from '../../../types/types';\nimport type * as actions from '@recorder/actions';\n\ntype CSharpLanguageMode = 'library' | 'mstest' | 'nunit';\n\nexport class CSharpLanguageGenerator implements LanguageGenerator {\n  id: string;\n  groupName = '.NET C#';\n  name: string;\n  highlighter = 'csharp' as Language;\n  _mode: CSharpLanguageMode;\n\n  constructor(mode: CSharpLanguageMode) {\n    if (mode === 'library') {\n      this.name = 'Library';\n      this.id = 'csharp';\n    } else if (mode === 'mstest') {\n      this.name = 'MSTest';\n      this.id = 'csharp-mstest';\n    } else if (mode === 'nunit') {\n      this.name = 'NUnit';\n      this.id = 'csharp-nunit';\n    } else {\n      throw new Error(`Unknown C# language mode: ${mode}`);\n    }\n    this._mode = mode;\n  }\n\n  generateAction(actionInContext: actions.ActionInContext): string {\n    const action = this._generateActionInner(actionInContext);\n    if (action)\n      return action;\n    return '';\n  }\n\n  _generateActionInner(actionInContext: actions.ActionInContext): string {\n    const action = actionInContext.action;\n    if (this._mode !== 'library' && (action.name === 'openPage' || action.name === 'closePage'))\n      return '';\n    const  pageAlias = this._formatPageAlias(actionInContext.frame.pageAlias);\n    const formatter = new CSharpFormatter(this._mode === 'library' ? 0 : 8);\n\n    if (action.name === 'openPage') {\n      formatter.add(`var ${pageAlias} = await context.NewPageAsync();`);\n      if (action.url && action.url !== 'about:blank' && action.url !== 'chrome://newtab/')\n        formatter.add(`await ${pageAlias}.GotoAsync(${quote(action.url)});`);\n      return formatter.format();\n    }\n\n    const locators = actionInContext.frame.framePath.map(selector => `.${this._asLocator(selector)}.ContentFrame`);\n    const subject = `${pageAlias}${locators.join('')}`;\n    const signals = toSignalMap(action);\n\n    if (signals.dialog) {\n      formatter.add(`    void ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler(object sender, IDialog dialog)\n      {\n          Console.WriteLine($\"Dialog message: {dialog.Message}\");\n          dialog.DismissAsync();\n          ${pageAlias}.Dialog -= ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;\n      }\n      ${pageAlias}.Dialog += ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;`);\n    }\n\n    const lines: string[] = [];\n    lines.push(this._generateActionCall(subject, actionInContext));\n\n    if (signals.download) {\n      lines.unshift(`var download${signals.download.downloadAlias} = await ${pageAlias}.RunAndWaitForDownloadAsync(async () =>\\n{`);\n      lines.push(`});`);\n    }\n\n    if (signals.popup) {\n      lines.unshift(`var ${this._formatPageAlias(signals.popup.popupAlias)} = await ${pageAlias}.RunAndWaitForPopupAsync(async () =>\\n{`);\n      lines.push(`});`);\n    }\n\n    for (const line of lines)\n      formatter.add(line);\n\n    return formatter.format();\n  }\n\n  private _formatPageAlias(pageAlias: string): string {\n    if (this._mode === 'library')\n      return pageAlias;\n\n    if (pageAlias === 'page')\n      return 'Page'; // first page is class member\n\n    // other pages are local variables\n    return pageAlias;\n  }\n\n  private _generateActionCall(subject: string, actionInContext: actions.ActionInContext): string {\n    const action = actionInContext.action;\n    switch (action.name) {\n      case 'openPage':\n        throw Error('Not reached');\n      case 'closePage':\n        return `await ${subject}.CloseAsync();`;\n      case 'click': {\n        let method = 'Click';\n        if (action.clickCount === 2)\n          method = 'DblClick';\n        const options = toClickOptionsForSourceCode(action);\n        if (!Object.entries(options).length)\n          return `await ${subject}.${this._asLocator(action.selector)}.${method}Async();`;\n        const optionsString = formatObject(options, '    ', 'Locator' + method + 'Options');\n        return `await ${subject}.${this._asLocator(action.selector)}.${method}Async(${optionsString});`;\n      }\n      case 'check':\n        return `await ${subject}.${this._asLocator(action.selector)}.CheckAsync();`;\n      case 'uncheck':\n        return `await ${subject}.${this._asLocator(action.selector)}.UncheckAsync();`;\n      case 'fill':\n        return `await ${subject}.${this._asLocator(action.selector)}.FillAsync(${quote(action.text)});`;\n      case 'setInputFiles':\n        return `await ${subject}.${this._asLocator(action.selector)}.SetInputFilesAsync(${formatObject(action.files)});`;\n      case 'press': {\n        const modifiers = toKeyboardModifiers(action.modifiers);\n        const shortcut = [...modifiers, action.key].join('+');\n        return `await ${subject}.${this._asLocator(action.selector)}.PressAsync(${quote(shortcut)});`;\n      }\n      case 'navigate':\n        return `await ${subject}.GotoAsync(${quote(action.url)});`;\n      case 'select':\n        return `await ${subject}.${this._asLocator(action.selector)}.SelectOptionAsync(${formatObject(action.options)});`;\n      case 'assertText':\n        return `await Expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? 'ToContainTextAsync' : 'ToHaveTextAsync'}(${quote(action.text)});`;\n      case 'assertChecked':\n        return `await Expect(${subject}.${this._asLocator(action.selector)})${action.checked ? '' : '.Not'}.ToBeCheckedAsync();`;\n      case 'assertVisible':\n        return `await Expect(${subject}.${this._asLocator(action.selector)}).ToBeVisibleAsync();`;\n      case 'assertValue': {\n        const assertion = action.value ? `ToHaveValueAsync(${quote(action.value)})` : `ToBeEmptyAsync()`;\n        return `await Expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;\n      }\n      case 'assertSnapshot':\n        return `await Expect(${subject}.${this._asLocator(action.selector)}).ToMatchAriaSnapshotAsync(${quote(action.ariaSnapshot)});`;\n    }\n  }\n\n  private _asLocator(selector: string) {\n    return asLocator('csharp', selector);\n  }\n\n  generateHeader(options: LanguageGeneratorOptions): string {\n    if (this._mode === 'library')\n      return this.generateStandaloneHeader(options);\n    return this.generateTestRunnerHeader(options);\n  }\n\n  generateStandaloneHeader(options: LanguageGeneratorOptions): string {\n    const formatter = new CSharpFormatter(0);\n    formatter.add(`\n      using Microsoft.Playwright;\n      using System;\n      using System.Threading.Tasks;\n\n      using var playwright = await Playwright.CreateAsync();\n      await using var browser = await playwright.${toPascal(options.browserName)}.LaunchAsync(${formatObject(options.launchOptions, '    ', 'BrowserTypeLaunchOptions')});\n      var context = await browser.NewContextAsync(${formatContextOptions(options.contextOptions, options.deviceName)});`);\n    if (options.contextOptions.recordHar) {\n      const url = options.contextOptions.recordHar.urlFilter;\n      formatter.add(`      await context.RouteFromHARAsync(${quote(options.contextOptions.recordHar.path)}${url ? `, ${formatObject({ url }, '    ', 'BrowserContextRouteFromHAROptions')}` : ''});`);\n    }\n    formatter.newLine();\n    return formatter.format();\n  }\n\n  generateTestRunnerHeader(options: LanguageGeneratorOptions): string {\n    const formatter = new CSharpFormatter(0);\n    formatter.add(`\n      using Microsoft.Playwright.${this._mode === 'nunit' ? 'NUnit' : 'MSTest'};\n      using Microsoft.Playwright;\n\n      ${this._mode === 'nunit' ? `[Parallelizable(ParallelScope.Self)]\n      [TestFixture]` : '[TestClass]'}\n      public class Tests : PageTest\n      {`);\n    const formattedContextOptions = formatContextOptions(options.contextOptions, options.deviceName);\n    if (formattedContextOptions) {\n      formatter.add(`public override BrowserNewContextOptions ContextOptions()\n      {\n          return ${formattedContextOptions};\n      }`);\n      formatter.newLine();\n    }\n    formatter.add(`    [${this._mode === 'nunit' ? 'Test' : 'TestMethod'}]\n    public async Task MyTest()\n    {`);\n    if (options.contextOptions.recordHar) {\n      const url = options.contextOptions.recordHar.urlFilter;\n      formatter.add(`    await Context.RouteFromHARAsync(${quote(options.contextOptions.recordHar.path)}${url ? `, ${formatObject({ url }, '    ', 'BrowserContextRouteFromHAROptions')}` : ''});`);\n    }\n    return formatter.format();\n  }\n\n  generateFooter(saveStorage: string | undefined): string {\n    const offset = this._mode === 'library' ? '' : '        ';\n    let storageStateLine = saveStorage ? `\\n${offset}await context.StorageStateAsync(new BrowserContextStorageStateOptions\\n${offset}{\\n${offset}    Path = ${quote(saveStorage)}\\n${offset}});\\n` : '';\n    if (this._mode !== 'library')\n      storageStateLine += `    }\\n}\\n`;\n    return storageStateLine;\n  }\n}\n\nfunction formatObject(value: any, indent = '    ', name = ''): string {\n  if (typeof value === 'string') {\n    if (['permissions', 'colorScheme', 'modifiers', 'button', 'recordHarContent', 'recordHarMode', 'serviceWorkers'].includes(name))\n      return `${getClassName(name)}.${toPascal(value)}`;\n    return quote(value);\n  }\n  if (Array.isArray(value))\n    return `new[] { ${value.map(o => formatObject(o, indent, name)).join(', ')} }`;\n  if (typeof value === 'object') {\n    const keys = Object.keys(value).filter(key => value[key] !== undefined).sort();\n    if (!keys.length)\n      return name ? `new ${getClassName(name)}` : '';\n    const tokens: string[] = [];\n    for (const key of keys) {\n      const property = getPropertyName(key);\n      tokens.push(`${property} = ${formatObject(value[key], indent, key)},`);\n    }\n    if (name)\n      return `new ${getClassName(name)}\\n{\\n${indent}${tokens.join(`\\n${indent}`)}\\n${indent}}`;\n    return `{\\n${indent}${tokens.join(`\\n${indent}`)}\\n${indent}}`;\n  }\n  if (name === 'latitude' || name === 'longitude')\n    return String(value) + 'm';\n\n  return String(value);\n}\n\nfunction getClassName(value: string): string {\n  switch (value) {\n    case 'viewport': return 'ViewportSize';\n    case 'proxy': return 'ProxySettings';\n    case 'permissions': return 'ContextPermission';\n    case 'modifiers': return 'KeyboardModifier';\n    case 'button': return 'MouseButton';\n    case 'recordHarMode': return 'HarMode';\n    case 'recordHarContent': return 'HarContentPolicy';\n    case 'serviceWorkers': return 'ServiceWorkerPolicy';\n    default: return toPascal(value);\n  }\n}\n\nfunction getPropertyName(key: string): string {\n  switch (key) {\n    case 'storageState': return 'StorageStatePath';\n    case 'viewport': return 'ViewportSize';\n    default: return toPascal(key);\n  }\n}\n\nfunction toPascal(value: string): string {\n  return value[0].toUpperCase() + value.slice(1);\n}\n\nfunction formatContextOptions(contextOptions: BrowserContextOptions, deviceName: string | undefined): string {\n  let options = { ...contextOptions };\n  // recordHAR is replaced with routeFromHAR in the generated code.\n  delete options.recordHar;\n  const device = deviceName && deviceDescriptors[deviceName];\n  if (!device) {\n    if (!Object.entries(options).length)\n      return '';\n    return formatObject(options, '    ', 'BrowserNewContextOptions');\n  }\n\n  options = sanitizeDeviceOptions(device, options);\n  if (!Object.entries(options).length)\n    return `playwright.Devices[${quote(deviceName!)}]`;\n\n  return formatObject(options, '    ', `BrowserNewContextOptions(playwright.Devices[${quote(deviceName!)}])`);\n}\n\nclass CSharpFormatter {\n  private _baseIndent: string;\n  private _baseOffset: string;\n  private _lines: string[] = [];\n\n  constructor(offset = 0) {\n    this._baseIndent = ' '.repeat(4);\n    this._baseOffset = ' '.repeat(offset);\n  }\n\n  prepend(text: string) {\n    this._lines = text.trim().split('\\n').map(line => line.trim()).concat(this._lines);\n  }\n\n  add(text: string) {\n    this._lines.push(...text.trim().split('\\n').map(line => line.trim()));\n  }\n\n  newLine() {\n    this._lines.push('');\n  }\n\n  format(): string {\n    let spaces = '';\n    let previousLine = '';\n    return this._lines.map((line: string) => {\n      if (line === '')\n        return line;\n      if (line.startsWith('}') || line.startsWith(']') || line.includes('});') || line === ');')\n        spaces = spaces.substring(this._baseIndent.length);\n\n      const extraSpaces = /^(for|while|if).*\\(.*\\)$/.test(previousLine) ? this._baseIndent : '';\n      previousLine = line;\n\n      line = spaces + extraSpaces + line;\n      if (line.endsWith('{') || line.endsWith('[') || line.endsWith('('))\n        spaces += this._baseIndent;\n      if (line.endsWith('));'))\n        spaces = spaces.substring(this._baseIndent.length);\n\n      return this._baseOffset + line;\n    }).join('\\n');\n  }\n}\n\nfunction quote(text: string) {\n  return escapeWithQuotes(text, '\\\"');\n}\n"],
  "mappings": "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",
  "names": []
}
