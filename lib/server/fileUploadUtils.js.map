{
  "version": 3,
  "sources": ["../../src/server/fileUploadUtils.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { assert } from '../utils/isomorphic/assert';\nimport { mime } from '../utilsBundle';\n\nimport type { WritableStreamDispatcher } from './dispatchers/writableStreamDispatcher';\nimport type { InputFilesItems } from './dom';\nimport type { Frame } from './frames';\nimport type * as types from './types';\nimport type * as channels from '@protocol/channels';\n\n// Keep in sync with the client.\nexport const fileUploadSizeLimit = 50 * 1024 * 1024;\n\nasync function filesExceedUploadLimit(files: string[]) {\n  const sizes = await Promise.all(files.map(async file => (await fs.promises.stat(file)).size));\n  return sizes.reduce((total, size) => total + size, 0) >= fileUploadSizeLimit;\n}\n\nexport async function prepareFilesForUpload(frame: Frame, params: Omit<channels.ElementHandleSetInputFilesParams, 'timeout'>): Promise<InputFilesItems> {\n  const { payloads, streams, directoryStream } = params;\n  let { localPaths, localDirectory } = params;\n\n  if ([payloads, localPaths, localDirectory, streams, directoryStream].filter(Boolean).length !== 1)\n    throw new Error('Exactly one of payloads, localPaths and streams must be provided');\n\n  if (streams)\n    localPaths = streams.map(c => (c as WritableStreamDispatcher).path());\n  if (directoryStream)\n    localDirectory = (directoryStream as WritableStreamDispatcher).path();\n\n  if (localPaths) {\n    for (const p of localPaths)\n      assert(path.isAbsolute(p) && path.resolve(p) === p, 'Paths provided to localPaths must be absolute and fully resolved.');\n  }\n\n  let fileBuffers: {\n    name: string,\n    mimeType?: string,\n    buffer: Buffer,\n    lastModifiedMs?: number,\n  }[] | undefined = payloads;\n\n  if (!frame._page.browserContext._browser._isCollocatedWithServer) {\n    // If the browser is on a different machine read files into buffers.\n    if (localPaths) {\n      if (await filesExceedUploadLimit(localPaths))\n        throw new Error('Cannot transfer files larger than 50Mb to a browser not co-located with the server');\n      fileBuffers = await Promise.all(localPaths.map(async item => {\n        return {\n          name: path.basename(item),\n          buffer: await fs.promises.readFile(item),\n          lastModifiedMs: (await fs.promises.stat(item)).mtimeMs,\n        };\n      }));\n      localPaths = undefined;\n    }\n  }\n\n  const filePayloads: types.FilePayload[] | undefined = fileBuffers?.map(payload => ({\n    name: payload.name,\n    mimeType: payload.mimeType || mime.getType(payload.name) || 'application/octet-stream',\n    buffer: payload.buffer.toString('base64'),\n    lastModifiedMs: payload.lastModifiedMs\n  }));\n\n  return { localPaths, localDirectory, filePayloads };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,gBAAe;AACf,kBAAiB;AAEjB,oBAAuB;AACvB,yBAAqB;AASd,MAAM,sBAAsB,KAAK,OAAO;AAE/C,eAAe,uBAAuB,OAAiB;AACrD,QAAM,QAAQ,MAAM,QAAQ,IAAI,MAAM,IAAI,OAAM,UAAS,MAAM,UAAAA,QAAG,SAAS,KAAK,IAAI,GAAG,IAAI,CAAC;AAC5F,SAAO,MAAM,OAAO,CAAC,OAAO,SAAS,QAAQ,MAAM,CAAC,KAAK;AAC3D;AAEA,eAAsB,sBAAsB,OAAc,QAA8F;AACtJ,QAAM,EAAE,UAAU,SAAS,gBAAgB,IAAI;AAC/C,MAAI,EAAE,YAAY,eAAe,IAAI;AAErC,MAAI,CAAC,UAAU,YAAY,gBAAgB,SAAS,eAAe,EAAE,OAAO,OAAO,EAAE,WAAW;AAC9F,UAAM,IAAI,MAAM,kEAAkE;AAEpF,MAAI;AACF,iBAAa,QAAQ,IAAI,OAAM,EAA+B,KAAK,CAAC;AACtE,MAAI;AACF,qBAAkB,gBAA6C,KAAK;AAEtE,MAAI,YAAY;AACd,eAAW,KAAK;AACd,gCAAO,YAAAC,QAAK,WAAW,CAAC,KAAK,YAAAA,QAAK,QAAQ,CAAC,MAAM,GAAG,mEAAmE;AAAA,EAC3H;AAEA,MAAI,cAKc;AAElB,MAAI,CAAC,MAAM,MAAM,eAAe,SAAS,yBAAyB;AAEhE,QAAI,YAAY;AACd,UAAI,MAAM,uBAAuB,UAAU;AACzC,cAAM,IAAI,MAAM,oFAAoF;AACtG,oBAAc,MAAM,QAAQ,IAAI,WAAW,IAAI,OAAM,SAAQ;AAC3D,eAAO;AAAA,UACL,MAAM,YAAAA,QAAK,SAAS,IAAI;AAAA,UACxB,QAAQ,MAAM,UAAAD,QAAG,SAAS,SAAS,IAAI;AAAA,UACvC,iBAAiB,MAAM,UAAAA,QAAG,SAAS,KAAK,IAAI,GAAG;AAAA,QACjD;AAAA,MACF,CAAC,CAAC;AACF,mBAAa;AAAA,IACf;AAAA,EACF;AAEA,QAAM,eAAgD,aAAa,IAAI,cAAY;AAAA,IACjF,MAAM,QAAQ;AAAA,IACd,UAAU,QAAQ,YAAY,wBAAK,QAAQ,QAAQ,IAAI,KAAK;AAAA,IAC5D,QAAQ,QAAQ,OAAO,SAAS,QAAQ;AAAA,IACxC,gBAAgB,QAAQ;AAAA,EAC1B,EAAE;AAEF,SAAO,EAAE,YAAY,gBAAgB,aAAa;AACpD;",
  "names": ["fs", "path"]
}
