{
  "version": 3,
  "sources": ["../../src/server/recorder.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport fs from 'fs';\n\nimport { isUnderTest } from '../utils';\nimport { BrowserContext } from './browserContext';\nimport { Debugger } from './debugger';\nimport { buildFullSelector, generateFrameSelector, metadataToCallLog } from './recorder/recorderUtils';\nimport { locatorOrSelectorAsSelector } from '../utils/isomorphic/locatorParser';\nimport { stringifySelector } from '../utils/isomorphic/selectorParser';\nimport { ProgressController } from './progress';\nimport { RecorderSignalProcessor } from './recorder/recorderSignalProcessor';\nimport * as rawRecorderSource from './../generated/pollingRecorderSource';\nimport { eventsHelper, monotonicTime } from './../utils';\nimport { Frame } from './frames';\nimport { Page } from './page';\nimport { performAction } from './recorder/recorderRunner';\n\nimport type { Language } from './codegen/types';\nimport type { CallMetadata, InstrumentationListener, SdkObject } from './instrumentation';\nimport type { Point } from '../utils/isomorphic/types';\nimport type { AriaTemplateNode } from '@isomorphic/ariaSnapshot';\nimport type * as channels from '@protocol/channels';\nimport type * as actions from '@recorder/actions';\nimport type { CallLog, CallLogStatus, ElementInfo, Mode, OverlayState, Source, UIState } from '@recorder/recorderTypes';\nimport type { RegisteredListener } from '../utils';\n\nconst recorderSymbol = Symbol('recorderSymbol');\n\ntype BindingSource = { frame: Frame, page: Page };\n\nexport const RecorderEvent = {\n  PausedStateChanged: 'pausedStateChanged',\n  ModeChanged: 'modeChanged',\n  ElementPicked: 'elementPicked',\n  CallLogsUpdated: 'callLogsUpdated',\n  UserSourcesChanged: 'userSourcesChanged',\n  ActionAdded: 'actionAdded',\n  SignalAdded: 'signalAdded',\n  PageNavigated: 'pageNavigated',\n  ContextClosed: 'contextClosed',\n} as const;\n\nexport type RecorderEventMap = {\n  [RecorderEvent.PausedStateChanged]: [paused: boolean];\n  [RecorderEvent.ModeChanged]: [mode: Mode];\n  [RecorderEvent.ElementPicked]: [elementInfo: ElementInfo, userGesture?: boolean];\n  [RecorderEvent.CallLogsUpdated]: [callLogs: CallLog[]];\n  [RecorderEvent.UserSourcesChanged]: [sources: Source[], pausedSourceId?: string];\n  [RecorderEvent.ActionAdded]: [action: actions.ActionInContext];\n  [RecorderEvent.SignalAdded]: [signal: actions.SignalInContext];\n  [RecorderEvent.PageNavigated]: [url: string];\n  [RecorderEvent.ContextClosed]: [];\n};\n\nexport class Recorder extends EventEmitter<RecorderEventMap> implements InstrumentationListener {\n  readonly handleSIGINT: boolean | undefined;\n  private _context: BrowserContext;\n  private _params: channels.BrowserContextEnableRecorderParams;\n  private _mode: Mode;\n  private _highlightedElement: { selector?: string, ariaTemplate?: AriaTemplateNode } = {};\n  private _overlayState: OverlayState = { offsetX: 0 };\n  private _currentCallsMetadata = new Map<CallMetadata, SdkObject>();\n  private _userSources = new Map<string, Source>();\n  private _debugger: Debugger;\n  private _omitCallTracking = false;\n  private _currentLanguage: Language = 'javascript';\n  private _recorderMode: 'default' | 'api';\n\n  private _signalProcessor: RecorderSignalProcessor;\n  private _pageAliases = new Map<Page, string>();\n  private _lastPopupOrdinal = 0;\n  private _lastDialogOrdinal = -1;\n  private _lastDownloadOrdinal = -1;\n  private _listeners: RegisteredListener[] = [];\n  private _enabled: boolean = false;\n  private _callLogs: CallLog[] = [];\n\n  static forContext(context: BrowserContext, params: channels.BrowserContextEnableRecorderParams): Promise<Recorder> {\n    let recorderPromise = (context as any)[recorderSymbol] as Promise<Recorder>;\n    if (!recorderPromise) {\n      recorderPromise = Recorder._create(context, params);\n      (context as any)[recorderSymbol] = recorderPromise;\n    }\n    return recorderPromise;\n  }\n\n  static existingForContext(context: BrowserContext): Recorder | undefined {\n    return (context as any)[recorderSymbol] as Recorder;\n  }\n\n  private static async _create(context: BrowserContext, params: channels.BrowserContextEnableRecorderParams = {}): Promise<Recorder> {\n    const recorder = new Recorder(context, params);\n    await recorder._install();\n    return recorder;\n  }\n\n  constructor(context: BrowserContext, params: channels.BrowserContextEnableRecorderParams) {\n    super();\n    this._context = context;\n    this._params = params;\n    this._mode = params.mode || 'none';\n    this._recorderMode = params.recorderMode ?? 'default';\n    this.handleSIGINT = params.handleSIGINT;\n\n    this._signalProcessor = new RecorderSignalProcessor({\n      addAction: (actionInContext: actions.ActionInContext) => {\n        if (this._enabled)\n          this.emit(RecorderEvent.ActionAdded, actionInContext);\n      },\n      addSignal: (signal: actions.SignalInContext) => {\n        if (this._enabled)\n          this.emit(RecorderEvent.SignalAdded, signal);\n      },\n    });\n\n    context.on(BrowserContext.Events.BeforeClose, () => {\n      this.emit(RecorderEvent.ContextClosed);\n    });\n    this._listeners.push(eventsHelper.addEventListener(process, 'exit', () => {\n      this.emit(RecorderEvent.ContextClosed);\n    }));\n\n    this._setEnabled(params.mode === 'recording');\n\n    this._omitCallTracking = !!params.omitCallTracking;\n    this._debugger = context.debugger();\n    context.instrumentation.addListener(this, context);\n\n    if (isUnderTest()) {\n      // Most of our tests put elements at the top left, so get out of the way.\n      this._overlayState.offsetX = 200;\n    }\n  }\n\n  private async _install() {\n    this.emit(RecorderEvent.ModeChanged, this._mode);\n    this.emit(RecorderEvent.PausedStateChanged, this._debugger.isPaused());\n\n    this._context.once(BrowserContext.Events.Close, () => {\n      eventsHelper.removeEventListeners(this._listeners);\n      this._context.instrumentation.removeListener(this);\n      this.emit(RecorderEvent.ContextClosed);\n    });\n\n    const controller = new ProgressController();\n    await controller.run(async progress => {\n      await this._context.exposeBinding(progress, '__pw_recorderState', false, async source => {\n        let actionSelector: string | undefined;\n        let actionPoint: Point | undefined;\n        const hasActiveScreenshotCommand = [...this._currentCallsMetadata.keys()].some(isScreenshotCommand);\n        if (!hasActiveScreenshotCommand) {\n          actionSelector = await this._scopeHighlightedSelectorToFrame(source.frame);\n          for (const [metadata, sdkObject] of this._currentCallsMetadata) {\n            if (source.page === sdkObject.attribution.page) {\n              actionPoint = metadata.point || actionPoint;\n              actionSelector = actionSelector || metadata.params.selector;\n            }\n          }\n        }\n        const uiState: UIState = {\n          mode: this._mode,\n          actionPoint,\n          actionSelector,\n          ariaTemplate: this._highlightedElement.ariaTemplate,\n          language: this._currentLanguage,\n          testIdAttributeName: this._testIdAttributeName(),\n          overlay: this._overlayState,\n        };\n        return uiState;\n      });\n\n      await this._context.exposeBinding(progress, '__pw_recorderElementPicked', false, async ({ frame }, elementInfo: ElementInfo) => {\n        const selectorChain = await generateFrameSelector(frame);\n        this.emit(RecorderEvent.ElementPicked, { selector: buildFullSelector(selectorChain, elementInfo.selector), ariaSnapshot: elementInfo.ariaSnapshot }, true);\n      });\n\n      await this._context.exposeBinding(progress, '__pw_recorderSetMode', false, async ({ frame }, mode: Mode) => {\n        if (frame.parentFrame())\n          return;\n        this.setMode(mode);\n      });\n\n      await this._context.exposeBinding(progress, '__pw_recorderSetOverlayState', false, async ({ frame }, state: OverlayState) => {\n        if (frame.parentFrame())\n          return;\n        this._overlayState = state;\n      });\n\n      await this._context.exposeBinding(progress, '__pw_resume', false, () => {\n        this._debugger.resume(false);\n      });\n\n      this._context.on(BrowserContext.Events.Page, (page: Page) => this._onPage(page));\n      for (const page of this._context.pages())\n        this._onPage(page);\n      this._context.dialogManager.addDialogHandler(dialog => {\n        this._onDialog(dialog.page());\n        // Not handling the dialog, let it automatically close.\n        return false;\n      });\n\n      // Input actions that potentially lead to navigation are intercepted on the page and are\n      // performed by the Playwright.\n      await this._context.exposeBinding(progress, '__pw_recorderPerformAction', false,\n          (source: BindingSource, action: actions.PerformOnRecordAction) => this._performAction(source.frame, action));\n\n      // Other non-essential actions are simply being recorded.\n      await this._context.exposeBinding(progress, '__pw_recorderRecordAction', false,\n          (source: BindingSource, action: actions.Action) => this._recordAction(source.frame, action));\n\n      await this._context.extendInjectedScript(rawRecorderSource.source, { recorderMode: this._recorderMode });\n    });\n\n    if (this._debugger.isPaused())\n      this._pausedStateChanged();\n    this._debugger.on(Debugger.Events.PausedStateChanged, () => this._pausedStateChanged());\n  }\n\n  private _pausedStateChanged() {\n    // If we are called upon page.pause, we don't have metadatas, populate them.\n    for (const { metadata, sdkObject } of this._debugger.pausedDetails()) {\n      if (!this._currentCallsMetadata.has(metadata))\n        this.onBeforeCall(sdkObject, metadata);\n    }\n    this.emit(RecorderEvent.PausedStateChanged, this._debugger.isPaused());\n    this._updateUserSources();\n    this.updateCallLog([...this._currentCallsMetadata.keys()]);\n  }\n\n  mode() {\n    return this._mode;\n  }\n\n  setMode(mode: Mode) {\n    if (this._mode === mode)\n      return;\n    this._highlightedElement = {};\n    this._mode = mode;\n    this.emit(RecorderEvent.ModeChanged, this._mode);\n    this._setEnabled(this._isRecording());\n    this._debugger.setMuted(this._isRecording());\n    if (this._mode !== 'none' && this._mode !== 'standby' && this._context.pages().length === 1)\n      this._context.pages()[0].bringToFront().catch(() => {});\n    this._refreshOverlay();\n  }\n\n  url(): string | undefined {\n    const page = this._context.pages()[0];\n    return page?.mainFrame().url();\n  }\n\n  setHighlightedSelector(selector: string) {\n    this._highlightedElement = { selector: locatorOrSelectorAsSelector(this._currentLanguage, selector, this._context.selectors().testIdAttributeName()) };\n    this._refreshOverlay();\n  }\n\n  setHighlightedAriaTemplate(ariaTemplate: AriaTemplateNode) {\n    this._highlightedElement = { ariaTemplate };\n    this._refreshOverlay();\n  }\n\n  step() {\n    this._debugger.resume(true);\n  }\n\n  setLanguage(language: Language) {\n    this._currentLanguage = language;\n    this._refreshOverlay();\n  }\n\n  resume() {\n    this._debugger.resume(false);\n  }\n\n  pause() {\n    this._debugger.pauseOnNextStatement();\n  }\n\n  paused() {\n    return this._debugger.isPaused();\n  }\n\n  close() {\n    this._debugger.resume(false);\n  }\n\n  hideHighlightedSelector() {\n    this._highlightedElement = {};\n    this._refreshOverlay();\n  }\n\n  pausedSourceId() {\n    for (const { metadata } of this._debugger.pausedDetails()) {\n      if (!metadata.location)\n        continue;\n      const source = this._userSources.get(metadata.location.file);\n      if (!source)\n        continue;\n      return source.id;\n    }\n  }\n\n  userSources() {\n    return [...this._userSources.values()];\n  }\n\n  callLog(): CallLog[] {\n    return this._callLogs;\n  }\n\n  private async _scopeHighlightedSelectorToFrame(frame: Frame): Promise<string | undefined> {\n    if (!this._highlightedElement.selector)\n      return;\n    try {\n      const mainFrame = frame._page.mainFrame();\n      const resolved = await mainFrame.selectors.resolveFrameForSelector(this._highlightedElement.selector);\n      // selector couldn't be found, don't highlight anything\n      if (!resolved)\n        return '';\n\n      // selector points to no specific frame, highlight in all frames\n      if (resolved?.frame === mainFrame)\n        return stringifySelector(resolved.info.parsed);\n\n      // selector points to this frame, highlight it\n      if (resolved?.frame === frame)\n        return stringifySelector(resolved.info.parsed);\n\n      // selector points to a different frame, highlight nothing\n      return '';\n    } catch {\n      return '';\n    }\n  }\n\n  private _refreshOverlay() {\n    for (const page of this._context.pages()) {\n      for (const frame of page.frames())\n        frame.evaluateExpression('window.__pw_refreshOverlay()').catch(() => {});\n    }\n  }\n\n  async onBeforeCall(sdkObject: SdkObject, metadata: CallMetadata) {\n    if (this._omitCallTracking || this._isRecording())\n      return;\n    this._currentCallsMetadata.set(metadata, sdkObject);\n    this._updateUserSources();\n    this.updateCallLog([metadata]);\n    if (isScreenshotCommand(metadata))\n      this.hideHighlightedSelector();\n    else if (metadata.params && metadata.params.selector)\n      this._highlightedElement = { selector: metadata.params.selector };\n  }\n\n  async onAfterCall(sdkObject: SdkObject, metadata: CallMetadata) {\n    if (this._omitCallTracking || this._isRecording())\n      return;\n    if (!metadata.error)\n      this._currentCallsMetadata.delete(metadata);\n    this._updateUserSources();\n    this.updateCallLog([metadata]);\n  }\n\n  private _updateUserSources() {\n    // Remove old decorations.\n    for (const source of this._userSources.values()) {\n      source.highlight = [];\n      source.revealLine = undefined;\n    }\n\n    // Apply new decorations.\n    for (const metadata of this._currentCallsMetadata.keys()) {\n      if (!metadata.location)\n        continue;\n      const { file, line } = metadata.location;\n      let source = this._userSources.get(file);\n      if (!source) {\n        source = { isRecorded: false, label: file, id: file, text: this._readSource(file), highlight: [], language: languageForFile(file) };\n        this._userSources.set(file, source);\n      }\n      if (line) {\n        const paused = this._debugger.isPaused(metadata);\n        source.highlight.push({ line, type: metadata.error ? 'error' : (paused ? 'paused' : 'running') });\n        source.revealLine = line;\n      }\n    }\n    this.emit(RecorderEvent.UserSourcesChanged, this.userSources(), this.pausedSourceId());\n  }\n\n  async onBeforeInputAction(sdkObject: SdkObject, metadata: CallMetadata) {\n  }\n\n  async onCallLog(sdkObject: SdkObject, metadata: CallMetadata, logName: string, message: string): Promise<void> {\n    this.updateCallLog([metadata]);\n  }\n\n  updateCallLog(metadatas: CallMetadata[]) {\n    if (this._isRecording())\n      return;\n    const logs: CallLog[] = [];\n    for (const metadata of metadatas) {\n      if (!metadata.method || metadata.internal)\n        continue;\n      let status: CallLogStatus = 'done';\n      if (this._currentCallsMetadata.has(metadata))\n        status = 'in-progress';\n      if (this._debugger.isPaused(metadata))\n        status = 'paused';\n      logs.push(metadataToCallLog(metadata, status));\n    }\n    this._callLogs = logs;\n    this.emit(RecorderEvent.CallLogsUpdated, logs);\n  }\n\n  private _isRecording() {\n    return ['recording', 'assertingText', 'assertingVisibility', 'assertingValue', 'assertingSnapshot'].includes(this._mode);\n  }\n\n  private _readSource(fileName: string): string {\n    try {\n      return fs.readFileSync(fileName, 'utf-8');\n    } catch (e) {\n      return '// No source available';\n    }\n  }\n\n  private _setEnabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  private async _onPage(page: Page) {\n    // First page is called page, others are called popup1, popup2, etc.\n    const frame = page.mainFrame();\n    page.on(Page.Events.Close, () => {\n      this._signalProcessor.addAction({\n        frame: this._describeMainFrame(page),\n        action: {\n          name: 'closePage',\n          signals: [],\n        },\n        startTime: monotonicTime()\n      });\n      this._pageAliases.delete(page);\n      this._filePrimaryURLChanged();\n    });\n    frame.on(Frame.Events.InternalNavigation, event => {\n      if (event.isPublic) {\n        this._onFrameNavigated(frame, page);\n        this._filePrimaryURLChanged();\n      }\n    });\n    page.on(Page.Events.Download, () => this._onDownload(page));\n    const suffix = this._pageAliases.size ? String(++this._lastPopupOrdinal) : '';\n    const pageAlias = 'page' + suffix;\n    this._pageAliases.set(page, pageAlias);\n\n    if (page.opener()) {\n      this._onPopup(page.opener()!, page);\n    } else {\n      this._signalProcessor.addAction({\n        frame: this._describeMainFrame(page),\n        action: {\n          name: 'openPage',\n          url: page.mainFrame().url(),\n          signals: [],\n        },\n        startTime: monotonicTime()\n      });\n    }\n    this._filePrimaryURLChanged();\n  }\n\n  private _filePrimaryURLChanged() {\n    const page = this._context.pages()[0];\n    this.emit(RecorderEvent.PageNavigated, page?.mainFrame().url());\n  }\n\n  clear(): void {\n    if (this._params.mode === 'recording') {\n      for (const page of this._context.pages())\n        this._onFrameNavigated(page.mainFrame(), page);\n    }\n  }\n\n  private _describeMainFrame(page: Page): actions.FrameDescription {\n    return {\n      pageGuid: page.guid,\n      pageAlias: this._pageAliases.get(page)!,\n      framePath: [],\n    };\n  }\n\n  private async _describeFrame(frame: Frame): Promise<actions.FrameDescription> {\n    return {\n      pageGuid: frame._page.guid,\n      pageAlias: this._pageAliases.get(frame._page)!,\n      framePath: await generateFrameSelector(frame),\n    };\n  }\n\n  private _testIdAttributeName(): string {\n    return this._params.testIdAttributeName || this._context.selectors().testIdAttributeName() || 'data-testid';\n  }\n\n  private async _createActionInContext(frame: Frame, action: actions.Action): Promise<actions.ActionInContext> {\n    const frameDescription = await this._describeFrame(frame);\n    const actionInContext: actions.ActionInContext = {\n      frame: frameDescription,\n      action,\n      description: undefined,\n      startTime: monotonicTime(),\n    };\n    return actionInContext;\n  }\n\n  private async _performAction(frame: Frame, action: actions.PerformOnRecordAction) {\n    const actionInContext = await this._createActionInContext(frame, action);\n    this._signalProcessor.addAction(actionInContext);\n    if (actionInContext.action.name !== 'openPage' && actionInContext.action.name !== 'closePage')\n      await performAction(this._pageAliases, actionInContext);\n    actionInContext.endTime = monotonicTime();\n  }\n\n  private async _recordAction(frame: Frame, action: actions.Action) {\n    const actionInContext = await this._createActionInContext(frame, action);\n    this._signalProcessor.addAction(actionInContext);\n  }\n\n  private _onFrameNavigated(frame: Frame, page: Page) {\n    const pageAlias = this._pageAliases.get(page);\n    this._signalProcessor.signal(pageAlias!, frame, { name: 'navigation', url: frame.url() });\n  }\n\n  private _onPopup(page: Page, popup: Page) {\n    const pageAlias = this._pageAliases.get(page)!;\n    const popupAlias = this._pageAliases.get(popup)!;\n    this._signalProcessor.signal(pageAlias, page.mainFrame(), { name: 'popup', popupAlias });\n  }\n\n  private _onDownload(page: Page) {\n    const pageAlias = this._pageAliases.get(page)!;\n    ++this._lastDownloadOrdinal;\n    this._signalProcessor.signal(pageAlias, page.mainFrame(), { name: 'download', downloadAlias: this._lastDownloadOrdinal ? String(this._lastDownloadOrdinal) : '' });\n  }\n\n  private _onDialog(page: Page) {\n    const pageAlias = this._pageAliases.get(page)!;\n    ++this._lastDialogOrdinal;\n    this._signalProcessor.signal(pageAlias, page.mainFrame(), { name: 'dialog', dialogAlias: this._lastDialogOrdinal ? String(this._lastDialogOrdinal) : '' });\n  }\n}\n\nfunction isScreenshotCommand(metadata: CallMetadata) {\n  return metadata.method.toLowerCase().includes('screenshot');\n}\n\nfunction languageForFile(file: string): Language {\n  if (file.endsWith('.py'))\n    return 'python';\n  if (file.endsWith('.java'))\n    return 'java';\n  if (file.endsWith('.cs'))\n    return 'csharp';\n  return 'javascript';\n}\n"],
  "mappings": "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",
  "names": ["import_utils", "EventEmitter", "fs"]
}
