{
  "version": 3,
  "sources": ["../../../../src/server/bidi/third_party/bidiDeserializer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2024 Google Inc.\n * Modifications copyright (c) Microsoft Corporation.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Copied from upstream: https://github.com/puppeteer/puppeteer/blob/main/packages/puppeteer-core/src/bidi/Deserializer.ts\n\nimport type * as Bidi from './bidiProtocol';\n\n/* eslint-disable object-curly-spacing */\n\n/**\n * @internal\n */\nexport class BidiDeserializer {\n  static deserialize(result: Bidi.Script.RemoteValue): any {\n    if (!result)\n      return undefined;\n\n    switch (result.type) {\n      case 'array':\n        return result.value?.map(value => {\n          return BidiDeserializer.deserialize(value);\n        });\n      case 'set':\n        return result.value?.reduce((acc: Set<unknown>, value) => {\n          return acc.add(BidiDeserializer.deserialize(value));\n        }, new Set());\n      case 'object':\n        return result.value?.reduce((acc: Record<any, unknown>, tuple) => {\n          const {key, value} = BidiDeserializer._deserializeTuple(tuple);\n          acc[key as any] = value;\n          return acc;\n        }, {});\n      case 'map':\n        return result.value?.reduce((acc: Map<unknown, unknown>, tuple) => {\n          const {key, value} = BidiDeserializer._deserializeTuple(tuple);\n          return acc.set(key, value);\n        }, new Map());\n      case 'promise':\n        return {};\n      case 'regexp':\n        return new RegExp(result.value.pattern, result.value.flags);\n      case 'date':\n        return new Date(result.value);\n      case 'undefined':\n        return undefined;\n      case 'null':\n        return null;\n      case 'number':\n        return BidiDeserializer._deserializeNumber(result.value);\n      case 'bigint':\n        return BigInt(result.value);\n      case 'boolean':\n        return Boolean(result.value);\n      case 'string':\n        return result.value;\n    }\n\n    throw new Error(`Deserialization of type ${result.type} not supported.`);\n  }\n\n  static _deserializeNumber(value: Bidi.Script.SpecialNumber | number): number {\n    switch (value) {\n      case '-0':\n        return -0;\n      case 'NaN':\n        return NaN;\n      case 'Infinity':\n        return Infinity;\n      case '-Infinity':\n        return -Infinity;\n      default:\n        return value;\n    }\n  }\n\n  static _deserializeTuple([serializedKey, serializedValue]: [\n    Bidi.Script.RemoteValue | string,\n    Bidi.Script.RemoteValue,\n  ]): {key: unknown; value: unknown} {\n    const key =\n      typeof serializedKey === 'string'\n        ? serializedKey\n        : BidiDeserializer.deserialize(serializedKey);\n    const value = BidiDeserializer.deserialize(serializedValue);\n\n    return {key, value};\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBO,MAAM,iBAAiB;AAAA,EAC5B,OAAO,YAAY,QAAsC;AACvD,QAAI,CAAC;AACH,aAAO;AAET,YAAQ,OAAO,MAAM;AAAA,MACnB,KAAK;AACH,eAAO,OAAO,OAAO,IAAI,WAAS;AAChC,iBAAO,iBAAiB,YAAY,KAAK;AAAA,QAC3C,CAAC;AAAA,MACH,KAAK;AACH,eAAO,OAAO,OAAO,OAAO,CAAC,KAAmB,UAAU;AACxD,iBAAO,IAAI,IAAI,iBAAiB,YAAY,KAAK,CAAC;AAAA,QACpD,GAAG,oBAAI,IAAI,CAAC;AAAA,MACd,KAAK;AACH,eAAO,OAAO,OAAO,OAAO,CAAC,KAA2B,UAAU;AAChE,gBAAM,EAAC,KAAK,MAAK,IAAI,iBAAiB,kBAAkB,KAAK;AAC7D,cAAI,GAAU,IAAI;AAClB,iBAAO;AAAA,QACT,GAAG,CAAC,CAAC;AAAA,MACP,KAAK;AACH,eAAO,OAAO,OAAO,OAAO,CAAC,KAA4B,UAAU;AACjE,gBAAM,EAAC,KAAK,MAAK,IAAI,iBAAiB,kBAAkB,KAAK;AAC7D,iBAAO,IAAI,IAAI,KAAK,KAAK;AAAA,QAC3B,GAAG,oBAAI,IAAI,CAAC;AAAA,MACd,KAAK;AACH,eAAO,CAAC;AAAA,MACV,KAAK;AACH,eAAO,IAAI,OAAO,OAAO,MAAM,SAAS,OAAO,MAAM,KAAK;AAAA,MAC5D,KAAK;AACH,eAAO,IAAI,KAAK,OAAO,KAAK;AAAA,MAC9B,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO,iBAAiB,mBAAmB,OAAO,KAAK;AAAA,MACzD,KAAK;AACH,eAAO,OAAO,OAAO,KAAK;AAAA,MAC5B,KAAK;AACH,eAAO,QAAQ,OAAO,KAAK;AAAA,MAC7B,KAAK;AACH,eAAO,OAAO;AAAA,IAClB;AAEA,UAAM,IAAI,MAAM,2BAA2B,OAAO,IAAI,iBAAiB;AAAA,EACzE;AAAA,EAEA,OAAO,mBAAmB,OAAmD;AAC3E,YAAQ,OAAO;AAAA,MACb,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT;AACE,eAAO;AAAA,IACX;AAAA,EACF;AAAA,EAEA,OAAO,kBAAkB,CAAC,eAAe,eAAe,GAGrB;AACjC,UAAM,MACJ,OAAO,kBAAkB,WACrB,gBACA,iBAAiB,YAAY,aAAa;AAChD,UAAM,QAAQ,iBAAiB,YAAY,eAAe;AAE1D,WAAO,EAAC,KAAK,MAAK;AAAA,EACpB;AACF;",
  "names": []
}
