{
  "version": 3,
  "sources": ["../../../../src/server/bidi/third_party/bidiSerializer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2024 Google Inc.\n * Modifications copyright (c) Microsoft Corporation.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Copied from upstream: https://github.com/puppeteer/puppeteer/blob/main/packages/puppeteer-core/src/bidi/Serializer.ts\n\nimport type * as Bidi from './bidiProtocol';\n\n/* eslint-disable curly */\n\n/**\n * @internal\n */\nclass UnserializableError extends Error {}\n\n/**\n * @internal\n */\nexport class BidiSerializer {\n  static serialize(arg: unknown): Bidi.Script.LocalValue {\n    switch (typeof arg) {\n      case 'symbol':\n      case 'function':\n        throw new UnserializableError(`Unable to serializable ${typeof arg}`);\n      case 'object':\n        return BidiSerializer._serializeObject(arg);\n\n      case 'undefined':\n        return {\n          type: 'undefined',\n        };\n      case 'number':\n        return BidiSerializer._serializeNumber(arg);\n      case 'bigint':\n        return {\n          type: 'bigint',\n          value: arg.toString(),\n        };\n      case 'string':\n        return {\n          type: 'string',\n          value: arg,\n        };\n      case 'boolean':\n        return {\n          type: 'boolean',\n          value: arg,\n        };\n    }\n  }\n\n  static _serializeNumber(arg: number): Bidi.Script.LocalValue {\n    let value: Bidi.Script.SpecialNumber | number;\n    if (Object.is(arg, -0)) {\n      value = '-0';\n    } else if (Object.is(arg, Infinity)) {\n      value = 'Infinity';\n    } else if (Object.is(arg, -Infinity)) {\n      value = '-Infinity';\n    } else if (Object.is(arg, NaN)) {\n      value = 'NaN';\n    } else {\n      value = arg;\n    }\n    return {\n      type: 'number',\n      value,\n    };\n  }\n\n  static _serializeObject(arg: object | null): Bidi.Script.LocalValue {\n    if (arg === null) {\n      return {\n        type: 'null',\n      };\n    } else if (Array.isArray(arg)) {\n      const parsedArray = arg.map(subArg => {\n        return BidiSerializer.serialize(subArg);\n      });\n\n      return {\n        type: 'array',\n        value: parsedArray,\n      };\n    } else if (isPlainObject(arg)) {\n      try {\n        JSON.stringify(arg);\n      } catch (error) {\n        if (\n          error instanceof TypeError &&\n          error.message.startsWith('Converting circular structure to JSON')\n        ) {\n          error.message += ' Recursive objects are not allowed.';\n        }\n        throw error;\n      }\n\n      const parsedObject: Bidi.Script.MappingLocalValue = [];\n      for (const key in arg) {\n        parsedObject.push([BidiSerializer.serialize(key), BidiSerializer.serialize(arg[key])]);\n      }\n\n      return {\n        type: 'object',\n        value: parsedObject,\n      };\n    } else if (isRegExp(arg)) {\n      return {\n        type: 'regexp',\n        value: {\n          pattern: arg.source,\n          flags: arg.flags,\n        },\n      };\n    } else if (isDate(arg)) {\n      return {\n        type: 'date',\n        value: arg.toISOString(),\n      };\n    }\n\n    throw new UnserializableError(\n        'Custom object serialization not possible. Use plain objects instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport const isPlainObject = (obj: unknown): obj is Record<any, unknown> => {\n  return typeof obj === 'object' && obj?.constructor === Object;\n};\n\n/**\n * @internal\n */\nexport const isRegExp = (obj: unknown): obj is RegExp => {\n  return typeof obj === 'object' && obj?.constructor === RegExp;\n};\n\n/**\n * @internal\n */\nexport const isDate = (obj: unknown): obj is Date => {\n  return typeof obj === 'object' && obj?.constructor === Date;\n};\n"],
  "mappings": "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",
  "names": []
}
