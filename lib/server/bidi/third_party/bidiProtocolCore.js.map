{
  "version": 3,
  "sources": ["../../../../src/server/bidi/third_party/bidiProtocolCore.ts"],
  "sourcesContent": ["/**\n * Copyright 2024 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Copied from upstream: https://github.com/GoogleChromeLabs/chromium-bidi/blob/main/src/protocol/generated/webdriver-bidi.ts\n\n/**\n * THIS FILE IS AUTOGENERATED by cddlconv 0.1.6.\n * Run `node tools/generate-bidi-types.mjs` to regenerate.\n * @see https://github.com/w3c/webdriver-bidi/blob/master/index.bs\n */\n\nexport type Event = {\n  type: 'event';\n} & EventData &\n  Extensible;\nexport type Command = {\n  id: JsUint;\n} & CommandData &\n  Extensible;\nexport type CommandResponse = {\n  type: 'success';\n  id: JsUint;\n  result: ResultData;\n} & Extensible;\nexport type EventData =\n  | BrowsingContextEvent\n  | InputEvent\n  | LogEvent\n  | NetworkEvent\n  | ScriptEvent;\nexport type CommandData =\n  | BrowserCommand\n  | BrowsingContextCommand\n  | EmulationCommand\n  | InputCommand\n  | NetworkCommand\n  | ScriptCommand\n  | SessionCommand\n  | StorageCommand\n  | WebExtensionCommand;\nexport type ResultData =\n  | BrowsingContextResult\n  | EmptyResult\n  | NetworkResult\n  | ScriptResult\n  | SessionResult\n  | StorageResult\n  | WebExtensionResult;\nexport type EmptyParams = Extensible;\nexport type Message = CommandResponse | ErrorResponse | Event;\nexport type ErrorResponse = {\n  type: 'error';\n  id: JsUint | null;\n  error: ErrorCode;\n  message: string;\n  stacktrace?: string;\n} & Extensible;\nexport type EmptyResult = Extensible;\nexport type Extensible = {\n  [key: string]: any;\n};\n\n/**\n * Must be between `-9007199254740991` and `9007199254740991`, inclusive.\n */\nexport type JsInt = number;\n\n/**\n * Must be between `0` and `9007199254740991`, inclusive.\n */\nexport type JsUint = number;\nexport const enum ErrorCode {\n  InvalidArgument = 'invalid argument',\n  InvalidSelector = 'invalid selector',\n  InvalidSessionId = 'invalid session id',\n  InvalidWebExtension = 'invalid web extension',\n  MoveTargetOutOfBounds = 'move target out of bounds',\n  NoSuchAlert = 'no such alert',\n  NoSuchNetworkCollector = 'no such network collector',\n  NoSuchElement = 'no such element',\n  NoSuchFrame = 'no such frame',\n  NoSuchHandle = 'no such handle',\n  NoSuchHistoryEntry = 'no such history entry',\n  NoSuchIntercept = 'no such intercept',\n  NoSuchNetworkData = 'no such network data',\n  NoSuchNode = 'no such node',\n  NoSuchRequest = 'no such request',\n  NoSuchScript = 'no such script',\n  NoSuchStoragePartition = 'no such storage partition',\n  NoSuchUserContext = 'no such user context',\n  NoSuchWebExtension = 'no such web extension',\n  SessionNotCreated = 'session not created',\n  UnableToCaptureScreen = 'unable to capture screen',\n  UnableToCloseBrowser = 'unable to close browser',\n  UnableToSetCookie = 'unable to set cookie',\n  UnableToSetFileInput = 'unable to set file input',\n  UnavailableNetworkData = 'unavailable network data',\n  UnderspecifiedStoragePartition = 'underspecified storage partition',\n  UnknownCommand = 'unknown command',\n  UnknownError = 'unknown error',\n  UnsupportedOperation = 'unsupported operation',\n}\nexport type SessionCommand =\n  | Session.End\n  | Session.New\n  | Session.Status\n  | Session.Subscribe\n  | Session.Unsubscribe;\nexport namespace Session {\n  export type ProxyConfiguration =\n    | Session.AutodetectProxyConfiguration\n    | Session.DirectProxyConfiguration\n    | Session.ManualProxyConfiguration\n    | Session.PacProxyConfiguration\n    | Session.SystemProxyConfiguration;\n}\nexport type SessionResult =\n  | Session.NewResult\n  | Session.StatusResult\n  | Session.SubscribeResult;\nexport namespace Session {\n  export type CapabilitiesRequest = {\n    alwaysMatch?: Session.CapabilityRequest;\n    firstMatch?: [...Session.CapabilityRequest[]];\n  };\n}\nexport namespace Session {\n  export type CapabilityRequest = {\n    acceptInsecureCerts?: boolean;\n    browserName?: string;\n    browserVersion?: string;\n    platformName?: string;\n    proxy?: Session.ProxyConfiguration;\n    unhandledPromptBehavior?: Session.UserPromptHandler;\n  } & Extensible;\n}\nexport namespace Session {\n  export type AutodetectProxyConfiguration = {\n    proxyType: 'autodetect';\n  } & Extensible;\n}\nexport namespace Session {\n  export type DirectProxyConfiguration = {\n    proxyType: 'direct';\n  } & Extensible;\n}\nexport namespace Session {\n  export type ManualProxyConfiguration = {\n    proxyType: 'manual';\n    httpProxy?: string;\n    sslProxy?: string;\n  } & ({} | Session.SocksProxyConfiguration) & {\n    noProxy?: [...string[]];\n  } & Extensible;\n}\nexport namespace Session {\n  export type SocksProxyConfiguration = {\n    socksProxy: string;\n    /**\n     * Must be between `0` and `255`, inclusive.\n     */\n    socksVersion: number;\n  };\n}\nexport namespace Session {\n  export type PacProxyConfiguration = {\n    proxyType: 'pac';\n    proxyAutoconfigUrl: string;\n  } & Extensible;\n}\nexport namespace Session {\n  export type SystemProxyConfiguration = {\n    proxyType: 'system';\n  } & Extensible;\n}\nexport namespace Session {\n  export type UserPromptHandler = {\n    alert?: Session.UserPromptHandlerType;\n    beforeUnload?: Session.UserPromptHandlerType;\n    confirm?: Session.UserPromptHandlerType;\n    default?: Session.UserPromptHandlerType;\n    file?: Session.UserPromptHandlerType;\n    prompt?: Session.UserPromptHandlerType;\n  };\n}\nexport namespace Session {\n  export const enum UserPromptHandlerType {\n    Accept = 'accept',\n    Dismiss = 'dismiss',\n    Ignore = 'ignore',\n  }\n}\nexport namespace Session {\n  export type Subscription = string;\n}\nexport namespace Session {\n  export type SubscriptionRequest = {\n    events: [string, ...string[]];\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n    userContexts?: [Browser.UserContext, ...Browser.UserContext[]];\n  };\n}\nexport namespace Session {\n  export type UnsubscribeByIdRequest = {\n    subscriptions: [Session.Subscription, ...Session.Subscription[]];\n  };\n}\nexport namespace Session {\n  export type UnsubscribeByAttributesRequest = {\n    events: [string, ...string[]];\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n  };\n}\nexport namespace Session {\n  export type Status = {\n    method: 'session.status';\n    params: EmptyParams;\n  };\n}\nexport namespace Session {\n  export type StatusResult = {\n    ready: boolean;\n    message: string;\n  };\n}\nexport namespace Session {\n  export type New = {\n    method: 'session.new';\n    params: Session.NewParameters;\n  };\n}\nexport namespace Session {\n  export type NewParameters = {\n    capabilities: Session.CapabilitiesRequest;\n  };\n}\nexport namespace Session {\n  export type NewResult = {\n    sessionId: string;\n    capabilities: {\n      acceptInsecureCerts: boolean;\n      browserName: string;\n      browserVersion: string;\n      platformName: string;\n      setWindowRect: boolean;\n      userAgent: string;\n      proxy?: Session.ProxyConfiguration;\n      unhandledPromptBehavior?: Session.UserPromptHandler;\n      webSocketUrl?: string;\n    } & Extensible;\n  };\n}\nexport namespace Session {\n  export type End = {\n    method: 'session.end';\n    params: EmptyParams;\n  };\n}\nexport namespace Session {\n  export type Subscribe = {\n    method: 'session.subscribe';\n    params: Session.SubscriptionRequest;\n  };\n}\nexport namespace Session {\n  export type SubscribeResult = {\n    subscription: Session.Subscription;\n  };\n}\nexport namespace Session {\n  export type Unsubscribe = {\n    method: 'session.unsubscribe';\n    params: Session.UnsubscribeParameters;\n  };\n}\nexport namespace Session {\n  export type UnsubscribeParameters =\n    | Session.UnsubscribeByAttributesRequest\n    | Session.UnsubscribeByIdRequest;\n}\nexport type BrowserCommand =\n  | Browser.Close\n  | Browser.CreateUserContext\n  | Browser.GetClientWindows\n  | Browser.GetUserContexts\n  | Browser.RemoveUserContext\n  | Browser.SetClientWindowState;\nexport type BrowserResult =\n  | Browser.CreateUserContextResult\n  | Browser.GetUserContextsResult;\nexport namespace Browser {\n  export type ClientWindow = string;\n}\nexport namespace Browser {\n  export type ClientWindowInfo = {\n    active: boolean;\n    clientWindow: Browser.ClientWindow;\n    height: JsUint;\n    state: 'fullscreen' | 'maximized' | 'minimized' | 'normal';\n    width: JsUint;\n    x: JsInt;\n    y: JsInt;\n  };\n}\nexport namespace Browser {\n  export type UserContext = string;\n}\nexport namespace Browser {\n  export type UserContextInfo = {\n    userContext: Browser.UserContext;\n  };\n}\nexport namespace Browser {\n  export type Close = {\n    method: 'browser.close';\n    params: EmptyParams;\n  };\n}\nexport namespace Browser {\n  export type CreateUserContext = {\n    method: 'browser.createUserContext';\n    params: Browser.CreateUserContextParameters;\n  };\n}\nexport namespace Browser {\n  export type CreateUserContextParameters = {\n    acceptInsecureCerts?: boolean;\n    proxy?: Session.ProxyConfiguration;\n    unhandledPromptBehavior?: Session.UserPromptHandler;\n  };\n}\nexport namespace Browser {\n  export type CreateUserContextResult = Browser.UserContextInfo;\n}\nexport namespace Browser {\n  export type GetClientWindows = {\n    method: 'browser.getClientWindows';\n    params: EmptyParams;\n  };\n}\nexport namespace Browser {\n  export type GetClientWindowsResult = {\n    clientWindows: [...Browser.ClientWindowInfo[]];\n  };\n}\nexport namespace Browser {\n  export type GetUserContexts = {\n    method: 'browser.getUserContexts';\n    params: EmptyParams;\n  };\n}\nexport namespace Browser {\n  export type GetUserContextsResult = {\n    userContexts: [Browser.UserContextInfo, ...Browser.UserContextInfo[]];\n  };\n}\nexport namespace Browser {\n  export type RemoveUserContext = {\n    method: 'browser.removeUserContext';\n    params: Browser.RemoveUserContextParameters;\n  };\n}\nexport namespace Browser {\n  export type RemoveUserContextParameters = {\n    userContext: Browser.UserContext;\n  };\n}\nexport namespace Browser {\n  export type SetClientWindowState = {\n    method: 'browser.setClientWindowState';\n    params: Browser.SetClientWindowStateParameters;\n  };\n}\nexport namespace Browser {\n  export type SetClientWindowStateParameters = {\n    clientWindow: Browser.ClientWindow;\n  } & (Browser.ClientWindowNamedState | Browser.ClientWindowRectState);\n}\nexport namespace Browser {\n  export type ClientWindowNamedState = {\n    state: 'fullscreen' | 'maximized' | 'minimized';\n  };\n}\nexport namespace Browser {\n  export type ClientWindowRectState = {\n    state: 'normal';\n    width?: JsUint;\n    height?: JsUint;\n    x?: JsInt;\n    y?: JsInt;\n  };\n}\nexport type BrowsingContextCommand =\n  | BrowsingContext.Activate\n  | BrowsingContext.CaptureScreenshot\n  | BrowsingContext.Close\n  | BrowsingContext.Create\n  | BrowsingContext.GetTree\n  | BrowsingContext.HandleUserPrompt\n  | BrowsingContext.LocateNodes\n  | BrowsingContext.Navigate\n  | BrowsingContext.Print\n  | BrowsingContext.Reload\n  | BrowsingContext.SetViewport\n  | BrowsingContext.TraverseHistory;\nexport type BrowsingContextEvent =\n  | BrowsingContext.ContextCreated\n  | BrowsingContext.ContextDestroyed\n  | BrowsingContext.DomContentLoaded\n  | BrowsingContext.DownloadEnd\n  | BrowsingContext.DownloadWillBegin\n  | BrowsingContext.FragmentNavigated\n  | BrowsingContext.HistoryUpdated\n  | BrowsingContext.Load\n  | BrowsingContext.NavigationAborted\n  | BrowsingContext.NavigationCommitted\n  | BrowsingContext.NavigationFailed\n  | BrowsingContext.NavigationStarted\n  | BrowsingContext.UserPromptClosed\n  | BrowsingContext.UserPromptOpened;\nexport type BrowsingContextResult =\n  | BrowsingContext.CaptureScreenshotResult\n  | BrowsingContext.CreateResult\n  | BrowsingContext.GetTreeResult\n  | BrowsingContext.LocateNodesResult\n  | BrowsingContext.NavigateResult\n  | BrowsingContext.PrintResult\n  | BrowsingContext.TraverseHistoryResult;\nexport namespace BrowsingContext {\n  export type BrowsingContext = string;\n}\nexport namespace BrowsingContext {\n  export type InfoList = [...BrowsingContext.Info[]];\n}\nexport namespace BrowsingContext {\n  export type Info = {\n    children: BrowsingContext.InfoList | null;\n    clientWindow: Browser.ClientWindow;\n    context: BrowsingContext.BrowsingContext;\n    originalOpener: BrowsingContext.BrowsingContext | null;\n    url: string;\n    userContext: Browser.UserContext;\n    parent?: BrowsingContext.BrowsingContext | null;\n  };\n}\nexport namespace BrowsingContext {\n  export type Locator =\n    | BrowsingContext.AccessibilityLocator\n    | BrowsingContext.CssLocator\n    | BrowsingContext.ContextLocator\n    | BrowsingContext.InnerTextLocator\n    | BrowsingContext.XPathLocator;\n}\nexport namespace BrowsingContext {\n  export type AccessibilityLocator = {\n    type: 'accessibility';\n    value: {\n      name?: string;\n      role?: string;\n    };\n  };\n}\nexport namespace BrowsingContext {\n  export type CssLocator = {\n    type: 'css';\n    value: string;\n  };\n}\nexport namespace BrowsingContext {\n  export type ContextLocator = {\n    type: 'context';\n    value: {\n      context: BrowsingContext.BrowsingContext;\n    };\n  };\n}\nexport namespace BrowsingContext {\n  export type InnerTextLocator = {\n    type: 'innerText';\n    value: string;\n    ignoreCase?: boolean;\n    matchType?: 'full' | 'partial';\n    maxDepth?: JsUint;\n  };\n}\nexport namespace BrowsingContext {\n  export type XPathLocator = {\n    type: 'xpath';\n    value: string;\n  };\n}\nexport namespace BrowsingContext {\n  export type Navigation = string;\n}\nexport namespace BrowsingContext {\n  export type BaseNavigationInfo = {\n    context: BrowsingContext.BrowsingContext;\n    navigation: BrowsingContext.Navigation | null;\n    timestamp: JsUint;\n    url: string;\n  };\n}\nexport namespace BrowsingContext {\n  export type NavigationInfo = BrowsingContext.BaseNavigationInfo;\n}\nexport namespace BrowsingContext {\n  export const enum ReadinessState {\n    None = 'none',\n    Interactive = 'interactive',\n    Complete = 'complete',\n  }\n}\nexport namespace BrowsingContext {\n  export const enum UserPromptType {\n    Alert = 'alert',\n    Beforeunload = 'beforeunload',\n    Confirm = 'confirm',\n    Prompt = 'prompt',\n  }\n}\nexport namespace BrowsingContext {\n  export type Activate = {\n    method: 'browsingContext.activate';\n    params: BrowsingContext.ActivateParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type ActivateParameters = {\n    context: BrowsingContext.BrowsingContext;\n  };\n}\nexport namespace BrowsingContext {\n  export type CaptureScreenshotParameters = {\n    context: BrowsingContext.BrowsingContext;\n    /**\n     * @defaultValue `\"viewport\"`\n     */\n    origin?: 'viewport' | 'document';\n    format?: BrowsingContext.ImageFormat;\n    clip?: BrowsingContext.ClipRectangle;\n  };\n}\nexport namespace BrowsingContext {\n  export type CaptureScreenshot = {\n    method: 'browsingContext.captureScreenshot';\n    params: BrowsingContext.CaptureScreenshotParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type ImageFormat = {\n    type: string;\n    /**\n     * Must be between `0` and `1`, inclusive.\n     */\n    quality?: number;\n  };\n}\nexport namespace BrowsingContext {\n  export type ClipRectangle =\n    | BrowsingContext.BoxClipRectangle\n    | BrowsingContext.ElementClipRectangle;\n}\nexport namespace BrowsingContext {\n  export type ElementClipRectangle = {\n    type: 'element';\n    element: Script.SharedReference;\n  };\n}\nexport namespace BrowsingContext {\n  export type BoxClipRectangle = {\n    type: 'box';\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\nexport namespace BrowsingContext {\n  export type CaptureScreenshotResult = {\n    data: string;\n  };\n}\nexport namespace BrowsingContext {\n  export type Close = {\n    method: 'browsingContext.close';\n    params: BrowsingContext.CloseParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type CloseParameters = {\n    context: BrowsingContext.BrowsingContext;\n    /**\n     * @defaultValue `false`\n     */\n    promptUnload?: boolean;\n  };\n}\nexport namespace BrowsingContext {\n  export type Create = {\n    method: 'browsingContext.create';\n    params: BrowsingContext.CreateParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export const enum CreateType {\n    Tab = 'tab',\n    Window = 'window',\n  }\n}\nexport namespace BrowsingContext {\n  export type CreateParameters = {\n    type: BrowsingContext.CreateType;\n    referenceContext?: BrowsingContext.BrowsingContext;\n    /**\n     * @defaultValue `false`\n     */\n    background?: boolean;\n    userContext?: Browser.UserContext;\n  };\n}\nexport namespace BrowsingContext {\n  export type CreateResult = {\n    context: BrowsingContext.BrowsingContext;\n  };\n}\nexport namespace BrowsingContext {\n  export type GetTree = {\n    method: 'browsingContext.getTree';\n    params: BrowsingContext.GetTreeParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type GetTreeParameters = {\n    maxDepth?: JsUint;\n    root?: BrowsingContext.BrowsingContext;\n  };\n}\nexport namespace BrowsingContext {\n  export type GetTreeResult = {\n    contexts: BrowsingContext.InfoList;\n  };\n}\nexport namespace BrowsingContext {\n  export type HandleUserPrompt = {\n    method: 'browsingContext.handleUserPrompt';\n    params: BrowsingContext.HandleUserPromptParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type HandleUserPromptParameters = {\n    context: BrowsingContext.BrowsingContext;\n    accept?: boolean;\n    userText?: string;\n  };\n}\nexport namespace BrowsingContext {\n  export type LocateNodesParameters = {\n    context: BrowsingContext.BrowsingContext;\n    locator: BrowsingContext.Locator;\n    /**\n     * Must be greater than or equal to `1`.\n     */\n    maxNodeCount?: JsUint;\n    serializationOptions?: Script.SerializationOptions;\n    startNodes?: [Script.SharedReference, ...Script.SharedReference[]];\n  };\n}\nexport namespace BrowsingContext {\n  export type LocateNodes = {\n    method: 'browsingContext.locateNodes';\n    params: BrowsingContext.LocateNodesParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type LocateNodesResult = {\n    nodes: [...Script.NodeRemoteValue[]];\n  };\n}\nexport namespace BrowsingContext {\n  export type Navigate = {\n    method: 'browsingContext.navigate';\n    params: BrowsingContext.NavigateParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type NavigateParameters = {\n    context: BrowsingContext.BrowsingContext;\n    url: string;\n    wait?: BrowsingContext.ReadinessState;\n  };\n}\nexport namespace BrowsingContext {\n  export type NavigateResult = {\n    navigation: BrowsingContext.Navigation | null;\n    url: string;\n  };\n}\nexport namespace BrowsingContext {\n  export type Print = {\n    method: 'browsingContext.print';\n    params: BrowsingContext.PrintParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type PrintParameters = {\n    context: BrowsingContext.BrowsingContext;\n    /**\n     * @defaultValue `false`\n     */\n    background?: boolean;\n    margin?: BrowsingContext.PrintMarginParameters;\n    /**\n     * @defaultValue `\"portrait\"`\n     */\n    orientation?: 'portrait' | 'landscape';\n    page?: BrowsingContext.PrintPageParameters;\n    pageRanges?: [...(JsUint | string)[]];\n    /**\n     * Must be between `0.1` and `2`, inclusive.\n     *\n     * @defaultValue `1`\n     */\n    scale?: number;\n    /**\n     * @defaultValue `true`\n     */\n    shrinkToFit?: boolean;\n  };\n}\nexport namespace BrowsingContext {\n  export type PrintMarginParameters = {\n    /**\n     * Must be greater than or equal to `0`.\n     *\n     * @defaultValue `1`\n     */\n    bottom?: number;\n    /**\n     * Must be greater than or equal to `0`.\n     *\n     * @defaultValue `1`\n     */\n    left?: number;\n    /**\n     * Must be greater than or equal to `0`.\n     *\n     * @defaultValue `1`\n     */\n    right?: number;\n    /**\n     * Must be greater than or equal to `0`.\n     *\n     * @defaultValue `1`\n     */\n    top?: number;\n  };\n}\nexport namespace BrowsingContext {\n  export type PrintPageParameters = {\n    /**\n     * Must be greater than or equal to `0.0352`.\n     *\n     * @defaultValue `27.94`\n     */\n    height?: number;\n    /**\n     * Must be greater than or equal to `0.0352`.\n     *\n     * @defaultValue `21.59`\n     */\n    width?: number;\n  };\n}\nexport namespace BrowsingContext {\n  export type PrintResult = {\n    data: string;\n  };\n}\nexport namespace BrowsingContext {\n  export type Reload = {\n    method: 'browsingContext.reload';\n    params: BrowsingContext.ReloadParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type ReloadParameters = {\n    context: BrowsingContext.BrowsingContext;\n    ignoreCache?: boolean;\n    wait?: BrowsingContext.ReadinessState;\n  };\n}\nexport namespace BrowsingContext {\n  export type SetViewport = {\n    method: 'browsingContext.setViewport';\n    params: BrowsingContext.SetViewportParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type SetViewportParameters = {\n    context?: BrowsingContext.BrowsingContext;\n    viewport?: BrowsingContext.Viewport | null;\n    /**\n     * Must be greater than `0`.\n     */\n    devicePixelRatio?: number | null;\n    userContexts?: [Browser.UserContext, ...Browser.UserContext[]];\n  };\n}\nexport namespace BrowsingContext {\n  export type Viewport = {\n    width: JsUint;\n    height: JsUint;\n  };\n}\nexport namespace BrowsingContext {\n  export type TraverseHistory = {\n    method: 'browsingContext.traverseHistory';\n    params: BrowsingContext.TraverseHistoryParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type TraverseHistoryParameters = {\n    context: BrowsingContext.BrowsingContext;\n    delta: JsInt;\n  };\n}\nexport namespace BrowsingContext {\n  export type TraverseHistoryResult = Record<string, never>;\n}\nexport namespace BrowsingContext {\n  export type ContextCreated = {\n    method: 'browsingContext.contextCreated';\n    params: BrowsingContext.Info;\n  };\n}\nexport namespace BrowsingContext {\n  export type ContextDestroyed = {\n    method: 'browsingContext.contextDestroyed';\n    params: BrowsingContext.Info;\n  };\n}\nexport namespace BrowsingContext {\n  export type NavigationStarted = {\n    method: 'browsingContext.navigationStarted';\n    params: BrowsingContext.NavigationInfo;\n  };\n}\nexport namespace BrowsingContext {\n  export type FragmentNavigated = {\n    method: 'browsingContext.fragmentNavigated';\n    params: BrowsingContext.NavigationInfo;\n  };\n}\nexport namespace BrowsingContext {\n  export type HistoryUpdated = {\n    method: 'browsingContext.historyUpdated';\n    params: BrowsingContext.HistoryUpdatedParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type HistoryUpdatedParameters = {\n    context: BrowsingContext.BrowsingContext;\n    timestamp: JsUint;\n    url: string;\n  };\n}\nexport namespace BrowsingContext {\n  export type DomContentLoaded = {\n    method: 'browsingContext.domContentLoaded';\n    params: BrowsingContext.NavigationInfo;\n  };\n}\nexport namespace BrowsingContext {\n  export type Load = {\n    method: 'browsingContext.load';\n    params: BrowsingContext.NavigationInfo;\n  };\n}\nexport namespace BrowsingContext {\n  export type DownloadWillBegin = {\n    method: 'browsingContext.downloadWillBegin';\n    params: BrowsingContext.DownloadWillBeginParams;\n  };\n}\nexport namespace BrowsingContext {\n  export type DownloadWillBeginParams = {\n    suggestedFilename: string;\n  } & BrowsingContext.BaseNavigationInfo;\n}\nexport namespace BrowsingContext {\n  export type DownloadEnd = {\n    method: 'browsingContext.downloadEnd';\n    params: BrowsingContext.DownloadEndParams;\n  };\n}\nexport namespace BrowsingContext {\n  export type DownloadEndParams =\n    | BrowsingContext.DownloadCanceledParams\n    | BrowsingContext.DownloadCompleteParams;\n}\nexport namespace BrowsingContext {\n  export type DownloadCanceledParams = {\n    status: 'canceled';\n  } & BrowsingContext.BaseNavigationInfo;\n}\nexport namespace BrowsingContext {\n  export type DownloadCompleteParams = {\n    status: 'complete';\n    filepath: string | null;\n  } & BrowsingContext.BaseNavigationInfo;\n}\nexport namespace BrowsingContext {\n  export type NavigationAborted = {\n    method: 'browsingContext.navigationAborted';\n    params: BrowsingContext.NavigationInfo;\n  };\n}\nexport namespace BrowsingContext {\n  export type NavigationCommitted = {\n    method: 'browsingContext.navigationCommitted';\n    params: BrowsingContext.NavigationInfo;\n  };\n}\nexport namespace BrowsingContext {\n  export type NavigationFailed = {\n    method: 'browsingContext.navigationFailed';\n    params: BrowsingContext.NavigationInfo;\n  };\n}\nexport namespace BrowsingContext {\n  export type UserPromptClosed = {\n    method: 'browsingContext.userPromptClosed';\n    params: BrowsingContext.UserPromptClosedParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type UserPromptClosedParameters = {\n    context: BrowsingContext.BrowsingContext;\n    accepted: boolean;\n    type: BrowsingContext.UserPromptType;\n    userText?: string;\n  };\n}\nexport namespace BrowsingContext {\n  export type UserPromptOpened = {\n    method: 'browsingContext.userPromptOpened';\n    params: BrowsingContext.UserPromptOpenedParameters;\n  };\n}\nexport namespace BrowsingContext {\n  export type UserPromptOpenedParameters = {\n    context: BrowsingContext.BrowsingContext;\n    handler: Session.UserPromptHandlerType;\n    message: string;\n    type: BrowsingContext.UserPromptType;\n    defaultValue?: string;\n  };\n}\nexport type EmulationCommand =\n  | Emulation.SetForcedColorsModeThemeOverride\n  | Emulation.SetGeolocationOverride\n  | Emulation.SetLocaleOverride\n  | Emulation.SetScreenOrientationOverride\n  | Emulation.SetTimezoneOverride;\nexport namespace Emulation {\n  export type SetForcedColorsModeThemeOverride = {\n    method: 'emulation.setForcedColorsModeThemeOverride';\n    params: Emulation.SetForcedColorsModeThemeOverrideParameters;\n  };\n}\nexport namespace Emulation {\n  export type SetForcedColorsModeThemeOverrideParameters = {\n    theme: Emulation.ForcedColorsModeTheme | null;\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n    userContexts?: [Browser.UserContext, ...Browser.UserContext[]];\n  };\n}\nexport namespace Emulation {\n  export const enum ForcedColorsModeTheme {\n    Light = 'light',\n    Dark = 'dark',\n  }\n}\nexport namespace Emulation {\n  export type SetGeolocationOverride = {\n    method: 'emulation.setGeolocationOverride';\n    params: Emulation.SetGeolocationOverrideParameters;\n  };\n}\nexport namespace Emulation {\n  export type SetGeolocationOverrideParameters = (\n    | {\n      coordinates: Emulation.GeolocationCoordinates | null;\n    }\n    | {\n      error: Emulation.GeolocationPositionError;\n    }\n  ) & {\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n    userContexts?: [Browser.UserContext, ...Browser.UserContext[]];\n  };\n}\nexport namespace Emulation {\n  export type GeolocationCoordinates = {\n    /**\n     * Must be between `-90` and `90`, inclusive.\n     */\n    latitude: number;\n    /**\n     * Must be between `-180` and `180`, inclusive.\n     */\n    longitude: number;\n    /**\n     * Must be greater than or equal to `0`.\n     *\n     * @defaultValue `1`\n     */\n    accuracy?: number;\n    /**\n     * @defaultValue `null`\n     */\n    altitude?: number | null;\n    /**\n     * Must be greater than or equal to `0`.\n     *\n     * @defaultValue `null`\n     */\n    altitudeAccuracy?: number | null;\n    /**\n     * Must be between `0` and `360`.\n     *\n     * @defaultValue `null`\n     */\n    heading?: number | null;\n    /**\n     * Must be greater than or equal to `0`.\n     *\n     * @defaultValue `null`\n     */\n    speed?: number | null;\n  };\n}\nexport namespace Emulation {\n  export type GeolocationPositionError = {\n    type: 'positionUnavailable';\n  };\n}\nexport namespace Emulation {\n  export type SetLocaleOverride = {\n    method: 'emulation.setLocaleOverride';\n    params: Emulation.SetLocaleOverrideParameters;\n  };\n}\nexport namespace Emulation {\n  export type SetLocaleOverrideParameters = {\n    locale: string | null;\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n    userContexts?: [Browser.UserContext, ...Browser.UserContext[]];\n  };\n}\nexport namespace Emulation {\n  export type SetScreenOrientationOverride = {\n    method: 'emulation.setScreenOrientationOverride';\n    params: Emulation.SetScreenOrientationOverrideParameters;\n  };\n}\nexport namespace Emulation {\n  export const enum ScreenOrientationNatural {\n    Portrait = 'portrait',\n    Landscape = 'landscape',\n  }\n}\nexport namespace Emulation {\n  export type ScreenOrientationType =\n    | 'portrait-primary'\n    | 'portrait-secondary'\n    | 'landscape-primary'\n    | 'landscape-secondary';\n}\nexport namespace Emulation {\n  export type ScreenOrientation = {\n    natural: Emulation.ScreenOrientationNatural;\n    type: Emulation.ScreenOrientationType;\n  };\n}\nexport namespace Emulation {\n  export type SetScreenOrientationOverrideParameters = {\n    screenOrientation: Emulation.ScreenOrientation | null;\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n    userContexts?: [Browser.UserContext, ...Browser.UserContext[]];\n  };\n}\nexport namespace Emulation {\n  export type SetTimezoneOverride = {\n    method: 'emulation.setTimezoneOverride';\n    params: Emulation.SetTimezoneOverrideParameters;\n  };\n}\nexport namespace Emulation {\n  export type SetTimezoneOverrideParameters = {\n    timezone: string | null;\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n    userContexts?: [Browser.UserContext, ...Browser.UserContext[]];\n  };\n}\nexport type NetworkCommand =\n  | Network.AddDataCollector\n  | Network.AddIntercept\n  | Network.ContinueRequest\n  | Network.ContinueResponse\n  | Network.ContinueWithAuth\n  | Network.DisownData\n  | Network.FailRequest\n  | Network.GetData\n  | Network.ProvideResponse\n  | Network.RemoveDataCollector\n  | Network.RemoveIntercept\n  | Network.SetCacheBehavior\n  | Network.SetExtraHeaders;\nexport type NetworkEvent =\n  | Network.AuthRequired\n  | Network.BeforeRequestSent\n  | Network.FetchError\n  | Network.ResponseCompleted\n  | Network.ResponseStarted;\nexport type NetworkResult = Network.AddInterceptResult;\nexport namespace Network {\n  export type AuthChallenge = {\n    scheme: string;\n    realm: string;\n  };\n}\nexport namespace Network {\n  export type AuthCredentials = {\n    type: 'password';\n    username: string;\n    password: string;\n  };\n}\nexport namespace Network {\n  export type BaseParameters = {\n    context: BrowsingContext.BrowsingContext | null;\n    isBlocked: boolean;\n    navigation: BrowsingContext.Navigation | null;\n    redirectCount: JsUint;\n    request: Network.RequestData;\n    timestamp: JsUint;\n    intercepts?: [Network.Intercept, ...Network.Intercept[]];\n  };\n}\nexport namespace Network {\n  export type BytesValue = Network.StringValue | Network.Base64Value;\n}\nexport namespace Network {\n  export type StringValue = {\n    type: 'string';\n    value: string;\n  };\n}\nexport namespace Network {\n  export type Base64Value = {\n    type: 'base64';\n    value: string;\n  };\n}\nexport namespace Network {\n  export type Collector = string;\n}\nexport namespace Network {\n  export const enum CollectorType {\n    Blob = 'blob',\n  }\n}\nexport namespace Network {\n  export const enum SameSite {\n    Strict = 'strict',\n    Lax = 'lax',\n    None = 'none',\n    Default = 'default',\n  }\n}\nexport namespace Network {\n  export type Cookie = {\n    name: string;\n    value: Network.BytesValue;\n    domain: string;\n    path: string;\n    size: JsUint;\n    httpOnly: boolean;\n    secure: boolean;\n    sameSite: Network.SameSite;\n    expiry?: JsUint;\n  } & Extensible;\n}\nexport namespace Network {\n  export type CookieHeader = {\n    name: string;\n    value: Network.BytesValue;\n  };\n}\nexport namespace Network {\n  export const enum DataType {\n    Response = 'response',\n  }\n}\nexport namespace Network {\n  export type FetchTimingInfo = {\n    timeOrigin: number;\n    requestTime: number;\n    redirectStart: number;\n    redirectEnd: number;\n    fetchStart: number;\n    dnsStart: number;\n    dnsEnd: number;\n    connectStart: number;\n    connectEnd: number;\n    tlsStart: number;\n    requestStart: number;\n    responseStart: number;\n    responseEnd: number;\n  };\n}\nexport namespace Network {\n  export type Header = {\n    name: string;\n    value: Network.BytesValue;\n  };\n}\nexport namespace Network {\n  export type Initiator = {\n    columnNumber?: JsUint;\n    lineNumber?: JsUint;\n    request?: Network.Request;\n    stackTrace?: Script.StackTrace;\n    type?: 'parser' | 'script' | 'preflight' | 'other';\n  };\n}\nexport namespace Network {\n  export type Intercept = string;\n}\nexport namespace Network {\n  export type Request = string;\n}\nexport namespace Network {\n  export type RequestData = {\n    request: Network.Request;\n    url: string;\n    method: string;\n    headers: [...Network.Header[]];\n    cookies: [...Network.Cookie[]];\n    headersSize: JsUint;\n    bodySize: JsUint | null;\n    destination: string;\n    initiatorType: string | null;\n    timings: Network.FetchTimingInfo;\n  };\n}\nexport namespace Network {\n  export type ResponseContent = {\n    size: JsUint;\n  };\n}\nexport namespace Network {\n  export type ResponseData = {\n    url: string;\n    protocol: string;\n    status: JsUint;\n    statusText: string;\n    fromCache: boolean;\n    headers: [...Network.Header[]];\n    mimeType: string;\n    bytesReceived: JsUint;\n    headersSize: JsUint | null;\n    bodySize: JsUint | null;\n    content: Network.ResponseContent;\n    authChallenges?: [...Network.AuthChallenge[]];\n  };\n}\nexport namespace Network {\n  export type SetCookieHeader = {\n    name: string;\n    value: Network.BytesValue;\n    domain?: string;\n    httpOnly?: boolean;\n    expiry?: string;\n    maxAge?: JsInt;\n    path?: string;\n    sameSite?: Network.SameSite;\n    secure?: boolean;\n  };\n}\nexport namespace Network {\n  export type UrlPattern = Network.UrlPatternPattern | Network.UrlPatternString;\n}\nexport namespace Network {\n  export type UrlPatternPattern = {\n    type: 'pattern';\n    protocol?: string;\n    hostname?: string;\n    port?: string;\n    pathname?: string;\n    search?: string;\n  };\n}\nexport namespace Network {\n  export type UrlPatternString = {\n    type: 'string';\n    pattern: string;\n  };\n}\nexport namespace Network {\n  export type AddDataCollector = {\n    method: 'network.addDataCollector';\n    params: Network.AddDataCollectorParameters;\n  };\n}\nexport namespace Network {\n  export type AddDataCollectorParameters = {\n    dataTypes: [Network.DataType, ...Network.DataType[]];\n    maxEncodedDataSize: JsUint;\n    /**\n     * @defaultValue `\"blob\"`\n     */\n    collectorType?: Network.CollectorType;\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n    userContexts?: [Browser.UserContext, ...Browser.UserContext[]];\n  };\n}\nexport namespace Network {\n  export type AddDataCollectorResult = {\n    collector: Network.Collector;\n  };\n}\nexport namespace Network {\n  export type AddInterceptParameters = {\n    phases: [Network.InterceptPhase, ...Network.InterceptPhase[]];\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n    urlPatterns?: [...Network.UrlPattern[]];\n  };\n}\nexport namespace Network {\n  export type AddIntercept = {\n    method: 'network.addIntercept';\n    params: Network.AddInterceptParameters;\n  };\n}\nexport namespace Network {\n  export const enum InterceptPhase {\n    BeforeRequestSent = 'beforeRequestSent',\n    ResponseStarted = 'responseStarted',\n    AuthRequired = 'authRequired',\n  }\n}\nexport namespace Network {\n  export type AddInterceptResult = {\n    intercept: Network.Intercept;\n  };\n}\nexport namespace Network {\n  export type ContinueRequest = {\n    method: 'network.continueRequest';\n    params: Network.ContinueRequestParameters;\n  };\n}\nexport namespace Network {\n  export type ContinueRequestParameters = {\n    request: Network.Request;\n    body?: Network.BytesValue;\n    cookies?: [...Network.CookieHeader[]];\n    headers?: [...Network.Header[]];\n    method?: string;\n    url?: string;\n  };\n}\nexport namespace Network {\n  export type ContinueResponse = {\n    method: 'network.continueResponse';\n    params: Network.ContinueResponseParameters;\n  };\n}\nexport namespace Network {\n  export type ContinueResponseParameters = {\n    request: Network.Request;\n    cookies?: [...Network.SetCookieHeader[]];\n    credentials?: Network.AuthCredentials;\n    headers?: [...Network.Header[]];\n    reasonPhrase?: string;\n    statusCode?: JsUint;\n  };\n}\nexport namespace Network {\n  export type ContinueWithAuth = {\n    method: 'network.continueWithAuth';\n    params: Network.ContinueWithAuthParameters;\n  };\n}\nexport namespace Network {\n  export type ContinueWithAuthParameters = {\n    request: Network.Request;\n  } & (\n    | Network.ContinueWithAuthCredentials\n    | Network.ContinueWithAuthNoCredentials\n  );\n}\nexport namespace Network {\n  export type ContinueWithAuthCredentials = {\n    action: 'provideCredentials';\n    credentials: Network.AuthCredentials;\n  };\n}\nexport namespace Network {\n  export type ContinueWithAuthNoCredentials = {\n    action: 'default' | 'cancel';\n  };\n}\nexport namespace Network {\n  export type DisownData = {\n    method: 'network.disownData';\n    params: Network.DisownDataParameters;\n  };\n}\nexport namespace Network {\n  export type DisownDataParameters = {\n    dataType: Network.DataType;\n    collector: Network.Collector;\n    request: Network.Request;\n  };\n}\nexport namespace Network {\n  export type FailRequest = {\n    method: 'network.failRequest';\n    params: Network.FailRequestParameters;\n  };\n}\nexport namespace Network {\n  export type FailRequestParameters = {\n    request: Network.Request;\n  };\n}\nexport namespace Network {\n  export type GetData = {\n    method: 'network.getData';\n    params: Network.GetDataParameters;\n  };\n}\nexport namespace Network {\n  export type GetDataParameters = {\n    dataType: Network.DataType;\n    collector?: Network.Collector;\n    /**\n     * @defaultValue `false`\n     */\n    disown?: boolean;\n    request: Network.Request;\n  };\n}\nexport namespace Network {\n  export type GetDataResult = {\n    bytes: Network.BytesValue;\n  };\n}\nexport namespace Network {\n  export type ProvideResponse = {\n    method: 'network.provideResponse';\n    params: Network.ProvideResponseParameters;\n  };\n}\nexport namespace Network {\n  export type ProvideResponseParameters = {\n    request: Network.Request;\n    body?: Network.BytesValue;\n    cookies?: [...Network.SetCookieHeader[]];\n    headers?: [...Network.Header[]];\n    reasonPhrase?: string;\n    statusCode?: JsUint;\n  };\n}\nexport namespace Network {\n  export type RemoveDataCollector = {\n    method: 'network.removeDataCollector';\n    params: Network.RemoveDataCollectorParameters;\n  };\n}\nexport namespace Network {\n  export type RemoveDataCollectorParameters = {\n    collector: Network.Collector;\n  };\n}\nexport namespace Network {\n  export type RemoveIntercept = {\n    method: 'network.removeIntercept';\n    params: Network.RemoveInterceptParameters;\n  };\n}\nexport namespace Network {\n  export type RemoveInterceptParameters = {\n    intercept: Network.Intercept;\n  };\n}\nexport namespace Network {\n  export type SetCacheBehavior = {\n    method: 'network.setCacheBehavior';\n    params: Network.SetCacheBehaviorParameters;\n  };\n}\nexport namespace Network {\n  export type SetCacheBehaviorParameters = {\n    cacheBehavior: 'default' | 'bypass';\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n  };\n}\nexport namespace Network {\n  export type SetExtraHeaders = {\n    method: 'network.setExtraHeaders';\n    params: Network.SetExtraHeadersParameters;\n  };\n}\nexport namespace Network {\n  export type SetExtraHeadersParameters = {\n    headers: [Network.Header, ...Network.Header[]];\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n    userContexts?: [Browser.UserContext, ...Browser.UserContext[]];\n  };\n}\nexport type ScriptEvent =\n  | Script.Message\n  | Script.RealmCreated\n  | Script.RealmDestroyed;\nexport namespace Network {\n  export type AuthRequiredParameters = Network.BaseParameters & {\n    response: Network.ResponseData;\n  };\n}\nexport namespace Network {\n  export type BeforeRequestSentParameters = Network.BaseParameters & {\n    initiator?: Network.Initiator;\n  };\n}\nexport namespace Network {\n  export type FetchErrorParameters = Network.BaseParameters & {\n    errorText: string;\n  };\n}\nexport namespace Network {\n  export type ResponseCompletedParameters = Network.BaseParameters & {\n    response: Network.ResponseData;\n  };\n}\nexport namespace Network {\n  export type ResponseStartedParameters = Network.BaseParameters & {\n    response: Network.ResponseData;\n  };\n}\nexport type ScriptCommand =\n  | Script.AddPreloadScript\n  | Script.CallFunction\n  | Script.Disown\n  | Script.Evaluate\n  | Script.GetRealms\n  | Script.RemovePreloadScript;\nexport type ScriptResult =\n  | Script.AddPreloadScriptResult\n  | Script.EvaluateResult\n  | Script.GetRealmsResult;\nexport namespace Network {\n  export type AuthRequired = {\n    method: 'network.authRequired';\n    params: Network.AuthRequiredParameters;\n  };\n}\nexport namespace Network {\n  export type BeforeRequestSent = {\n    method: 'network.beforeRequestSent';\n    params: Network.BeforeRequestSentParameters;\n  };\n}\nexport namespace Network {\n  export type FetchError = {\n    method: 'network.fetchError';\n    params: Network.FetchErrorParameters;\n  };\n}\nexport namespace Network {\n  export type ResponseCompleted = {\n    method: 'network.responseCompleted';\n    params: Network.ResponseCompletedParameters;\n  };\n}\nexport namespace Network {\n  export type ResponseStarted = {\n    method: 'network.responseStarted';\n    params: Network.ResponseStartedParameters;\n  };\n}\nexport namespace Script {\n  export type Channel = string;\n}\nexport namespace Script {\n  export type EvaluateResultSuccess = {\n    type: 'success';\n    result: Script.RemoteValue;\n    realm: Script.Realm;\n  };\n}\nexport namespace Script {\n  export type ExceptionDetails = {\n    columnNumber: JsUint;\n    exception: Script.RemoteValue;\n    lineNumber: JsUint;\n    stackTrace: Script.StackTrace;\n    text: string;\n  };\n}\nexport namespace Script {\n  export type ChannelValue = {\n    type: 'channel';\n    value: Script.ChannelProperties;\n  };\n}\nexport namespace Script {\n  export type ChannelProperties = {\n    channel: Script.Channel;\n    serializationOptions?: Script.SerializationOptions;\n    ownership?: Script.ResultOwnership;\n  };\n}\nexport namespace Script {\n  export type EvaluateResult =\n    | Script.EvaluateResultSuccess\n    | Script.EvaluateResultException;\n}\nexport namespace Script {\n  export type EvaluateResultException = {\n    type: 'exception';\n    exceptionDetails: Script.ExceptionDetails;\n    realm: Script.Realm;\n  };\n}\nexport namespace Script {\n  export type Handle = string;\n}\nexport namespace Script {\n  export type InternalId = string;\n}\nexport namespace Script {\n  export type ListLocalValue = [...Script.LocalValue[]];\n}\nexport namespace Script {\n  export type LocalValue =\n    | Script.RemoteReference\n    | Script.PrimitiveProtocolValue\n    | Script.ChannelValue\n    | Script.ArrayLocalValue\n    | Script.DateLocalValue\n    | Script.MapLocalValue\n    | Script.ObjectLocalValue\n    | Script.RegExpLocalValue\n    | Script.SetLocalValue;\n}\nexport namespace Script {\n  export type ArrayLocalValue = {\n    type: 'array';\n    value: Script.ListLocalValue;\n  };\n}\nexport namespace Script {\n  export type DateLocalValue = {\n    type: 'date';\n    value: string;\n  };\n}\nexport namespace Script {\n  export type MappingLocalValue = [\n    ...[Script.LocalValue | string, Script.LocalValue][],\n  ];\n}\nexport namespace Script {\n  export type MapLocalValue = {\n    type: 'map';\n    value: Script.MappingLocalValue;\n  };\n}\nexport namespace Script {\n  export type ObjectLocalValue = {\n    type: 'object';\n    value: Script.MappingLocalValue;\n  };\n}\nexport namespace Script {\n  export type RegExpValue = {\n    pattern: string;\n    flags?: string;\n  };\n}\nexport namespace Script {\n  export type RegExpLocalValue = {\n    type: 'regexp';\n    value: Script.RegExpValue;\n  };\n}\nexport namespace Script {\n  export type SetLocalValue = {\n    type: 'set';\n    value: Script.ListLocalValue;\n  };\n}\nexport namespace Script {\n  export type PreloadScript = string;\n}\nexport namespace Script {\n  export type Realm = string;\n}\nexport namespace Script {\n  export type PrimitiveProtocolValue =\n    | Script.UndefinedValue\n    | Script.NullValue\n    | Script.StringValue\n    | Script.NumberValue\n    | Script.BooleanValue\n    | Script.BigIntValue;\n}\nexport namespace Script {\n  export type UndefinedValue = {\n    type: 'undefined';\n  };\n}\nexport namespace Script {\n  export type NullValue = {\n    type: 'null';\n  };\n}\nexport namespace Script {\n  export type StringValue = {\n    type: 'string';\n    value: string;\n  };\n}\nexport namespace Script {\n  export type SpecialNumber = 'NaN' | '-0' | 'Infinity' | '-Infinity';\n}\nexport namespace Script {\n  export type NumberValue = {\n    type: 'number';\n    value: number | Script.SpecialNumber;\n  };\n}\nexport namespace Script {\n  export type BooleanValue = {\n    type: 'boolean';\n    value: boolean;\n  };\n}\nexport namespace Script {\n  export type BigIntValue = {\n    type: 'bigint';\n    value: string;\n  };\n}\nexport namespace Script {\n  export type RealmInfo =\n    | Script.WindowRealmInfo\n    | Script.DedicatedWorkerRealmInfo\n    | Script.SharedWorkerRealmInfo\n    | Script.ServiceWorkerRealmInfo\n    | Script.WorkerRealmInfo\n    | Script.PaintWorkletRealmInfo\n    | Script.AudioWorkletRealmInfo\n    | Script.WorkletRealmInfo;\n}\nexport namespace Script {\n  export type BaseRealmInfo = {\n    realm: Script.Realm;\n    origin: string;\n  };\n}\nexport namespace Script {\n  export type WindowRealmInfo = Script.BaseRealmInfo & {\n    type: 'window';\n    context: BrowsingContext.BrowsingContext;\n    sandbox?: string;\n  };\n}\nexport namespace Script {\n  export type DedicatedWorkerRealmInfo = Script.BaseRealmInfo & {\n    type: 'dedicated-worker';\n    owners: [Script.Realm];\n  };\n}\nexport namespace Script {\n  export type SharedWorkerRealmInfo = Script.BaseRealmInfo & {\n    type: 'shared-worker';\n  };\n}\nexport namespace Script {\n  export type ServiceWorkerRealmInfo = Script.BaseRealmInfo & {\n    type: 'service-worker';\n  };\n}\nexport namespace Script {\n  export type WorkerRealmInfo = Script.BaseRealmInfo & {\n    type: 'worker';\n  };\n}\nexport namespace Script {\n  export type PaintWorkletRealmInfo = Script.BaseRealmInfo & {\n    type: 'paint-worklet';\n  };\n}\nexport namespace Script {\n  export type AudioWorkletRealmInfo = Script.BaseRealmInfo & {\n    type: 'audio-worklet';\n  };\n}\nexport namespace Script {\n  export type WorkletRealmInfo = Script.BaseRealmInfo & {\n    type: 'worklet';\n  };\n}\nexport namespace Script {\n  export type RealmType =\n    | 'window'\n    | 'dedicated-worker'\n    | 'shared-worker'\n    | 'service-worker'\n    | 'worker'\n    | 'paint-worklet'\n    | 'audio-worklet'\n    | 'worklet';\n}\nexport namespace Script {\n  export type ListRemoteValue = [...Script.RemoteValue[]];\n}\nexport namespace Script {\n  export type MappingRemoteValue = [\n    ...[Script.RemoteValue | string, Script.RemoteValue][],\n  ];\n}\nexport namespace Script {\n  export type RemoteValue =\n    | Script.PrimitiveProtocolValue\n    | Script.SymbolRemoteValue\n    | Script.ArrayRemoteValue\n    | Script.ObjectRemoteValue\n    | Script.FunctionRemoteValue\n    | Script.RegExpRemoteValue\n    | Script.DateRemoteValue\n    | Script.MapRemoteValue\n    | Script.SetRemoteValue\n    | Script.WeakMapRemoteValue\n    | Script.WeakSetRemoteValue\n    | Script.GeneratorRemoteValue\n    | Script.ErrorRemoteValue\n    | Script.ProxyRemoteValue\n    | Script.PromiseRemoteValue\n    | Script.TypedArrayRemoteValue\n    | Script.ArrayBufferRemoteValue\n    | Script.NodeListRemoteValue\n    | Script.HtmlCollectionRemoteValue\n    | Script.NodeRemoteValue\n    | Script.WindowProxyRemoteValue;\n}\nexport namespace Script {\n  export type RemoteReference =\n    | Script.SharedReference\n    | Script.RemoteObjectReference;\n}\nexport namespace Script {\n  export type SharedReference = {\n    sharedId: Script.SharedId;\n    handle?: Script.Handle;\n  } & Extensible;\n}\nexport namespace Script {\n  export type RemoteObjectReference = {\n    handle: Script.Handle;\n    sharedId?: Script.SharedId;\n  } & Extensible;\n}\nexport namespace Script {\n  export type SymbolRemoteValue = {\n    type: 'symbol';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type ArrayRemoteValue = {\n    type: 'array';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n    value?: Script.ListRemoteValue;\n  };\n}\nexport namespace Script {\n  export type ObjectRemoteValue = {\n    type: 'object';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n    value?: Script.MappingRemoteValue;\n  };\n}\nexport namespace Script {\n  export type FunctionRemoteValue = {\n    type: 'function';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type RegExpRemoteValue = Script.RegExpLocalValue & {\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type DateRemoteValue = Script.DateLocalValue & {\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type MapRemoteValue = {\n    type: 'map';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n    value?: Script.MappingRemoteValue;\n  };\n}\nexport namespace Script {\n  export type SetRemoteValue = {\n    type: 'set';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n    value?: Script.ListRemoteValue;\n  };\n}\nexport namespace Script {\n  export type WeakMapRemoteValue = {\n    type: 'weakmap';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type WeakSetRemoteValue = {\n    type: 'weakset';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type GeneratorRemoteValue = {\n    type: 'generator';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type ErrorRemoteValue = {\n    type: 'error';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type ProxyRemoteValue = {\n    type: 'proxy';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type PromiseRemoteValue = {\n    type: 'promise';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type TypedArrayRemoteValue = {\n    type: 'typedarray';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type ArrayBufferRemoteValue = {\n    type: 'arraybuffer';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type NodeListRemoteValue = {\n    type: 'nodelist';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n    value?: Script.ListRemoteValue;\n  };\n}\nexport namespace Script {\n  export type HtmlCollectionRemoteValue = {\n    type: 'htmlcollection';\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n    value?: Script.ListRemoteValue;\n  };\n}\nexport namespace Script {\n  export type NodeRemoteValue = {\n    type: 'node';\n    sharedId?: Script.SharedId;\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n    value?: Script.NodeProperties;\n  };\n}\nexport namespace Script {\n  export type NodeProperties = {\n    nodeType: JsUint;\n    childNodeCount: JsUint;\n    attributes?: {\n      [key: string]: string;\n    };\n    children?: [...Script.NodeRemoteValue[]];\n    localName?: string;\n    mode?: 'open' | 'closed';\n    namespaceURI?: string;\n    nodeValue?: string;\n    shadowRoot?: Script.NodeRemoteValue | null;\n  };\n}\nexport namespace Script {\n  export type WindowProxyRemoteValue = {\n    type: 'window';\n    value: Script.WindowProxyProperties;\n    handle?: Script.Handle;\n    internalId?: Script.InternalId;\n  };\n}\nexport namespace Script {\n  export type WindowProxyProperties = {\n    context: BrowsingContext.BrowsingContext;\n  };\n}\nexport namespace Script {\n  export const enum ResultOwnership {\n    Root = 'root',\n    None = 'none',\n  }\n}\nexport namespace Script {\n  export type SerializationOptions = {\n    /**\n     * @defaultValue `0`\n     */\n    maxDomDepth?: JsUint | null;\n    /**\n     * @defaultValue `null`\n     */\n    maxObjectDepth?: JsUint | null;\n    /**\n     * @defaultValue `\"none\"`\n     */\n    includeShadowTree?: 'none' | 'open' | 'all';\n  };\n}\nexport namespace Script {\n  export type SharedId = string;\n}\nexport namespace Script {\n  export type StackFrame = {\n    columnNumber: JsUint;\n    functionName: string;\n    lineNumber: JsUint;\n    url: string;\n  };\n}\nexport namespace Script {\n  export type StackTrace = {\n    callFrames: [...Script.StackFrame[]];\n  };\n}\nexport namespace Script {\n  export type Source = {\n    realm: Script.Realm;\n    context?: BrowsingContext.BrowsingContext;\n  };\n}\nexport namespace Script {\n  export type RealmTarget = {\n    realm: Script.Realm;\n  };\n}\nexport namespace Script {\n  export type ContextTarget = {\n    context: BrowsingContext.BrowsingContext;\n    sandbox?: string;\n  };\n}\nexport namespace Script {\n  export type Target = Script.ContextTarget | Script.RealmTarget;\n}\nexport namespace Script {\n  export type AddPreloadScript = {\n    method: 'script.addPreloadScript';\n    params: Script.AddPreloadScriptParameters;\n  };\n}\nexport namespace Script {\n  export type AddPreloadScriptParameters = {\n    functionDeclaration: string;\n    arguments?: [...Script.ChannelValue[]];\n    contexts?: [\n      BrowsingContext.BrowsingContext,\n      ...BrowsingContext.BrowsingContext[],\n    ];\n    userContexts?: [Browser.UserContext, ...Browser.UserContext[]];\n    sandbox?: string;\n  };\n}\nexport namespace Script {\n  export type AddPreloadScriptResult = {\n    script: Script.PreloadScript;\n  };\n}\nexport namespace Script {\n  export type Disown = {\n    method: 'script.disown';\n    params: Script.DisownParameters;\n  };\n}\nexport namespace Script {\n  export type DisownParameters = {\n    handles: [...Script.Handle[]];\n    target: Script.Target;\n  };\n}\nexport namespace Script {\n  export type CallFunctionParameters = {\n    functionDeclaration: string;\n    awaitPromise: boolean;\n    target: Script.Target;\n    arguments?: [...Script.LocalValue[]];\n    resultOwnership?: Script.ResultOwnership;\n    serializationOptions?: Script.SerializationOptions;\n    this?: Script.LocalValue;\n    /**\n     * @defaultValue `false`\n     */\n    userActivation?: boolean;\n  };\n}\nexport namespace Script {\n  export type CallFunction = {\n    method: 'script.callFunction';\n    params: Script.CallFunctionParameters;\n  };\n}\nexport namespace Script {\n  export type Evaluate = {\n    method: 'script.evaluate';\n    params: Script.EvaluateParameters;\n  };\n}\nexport namespace Script {\n  export type EvaluateParameters = {\n    expression: string;\n    target: Script.Target;\n    awaitPromise: boolean;\n    resultOwnership?: Script.ResultOwnership;\n    serializationOptions?: Script.SerializationOptions;\n    /**\n     * @defaultValue `false`\n     */\n    userActivation?: boolean;\n  };\n}\nexport namespace Script {\n  export type GetRealms = {\n    method: 'script.getRealms';\n    params: Script.GetRealmsParameters;\n  };\n}\nexport namespace Script {\n  export type GetRealmsParameters = {\n    context?: BrowsingContext.BrowsingContext;\n    type?: Script.RealmType;\n  };\n}\nexport namespace Script {\n  export type GetRealmsResult = {\n    realms: [...Script.RealmInfo[]];\n  };\n}\nexport namespace Script {\n  export type RemovePreloadScript = {\n    method: 'script.removePreloadScript';\n    params: Script.RemovePreloadScriptParameters;\n  };\n}\nexport namespace Script {\n  export type RemovePreloadScriptParameters = {\n    script: Script.PreloadScript;\n  };\n}\nexport namespace Script {\n  export type MessageParameters = {\n    channel: Script.Channel;\n    data: Script.RemoteValue;\n    source: Script.Source;\n  };\n}\nexport namespace Script {\n  export type RealmCreated = {\n    method: 'script.realmCreated';\n    params: Script.RealmInfo;\n  };\n}\nexport namespace Script {\n  export type Message = {\n    method: 'script.message';\n    params: Script.MessageParameters;\n  };\n}\nexport namespace Script {\n  export type RealmDestroyed = {\n    method: 'script.realmDestroyed';\n    params: Script.RealmDestroyedParameters;\n  };\n}\nexport namespace Script {\n  export type RealmDestroyedParameters = {\n    realm: Script.Realm;\n  };\n}\nexport type StorageCommand =\n  | Storage.DeleteCookies\n  | Storage.GetCookies\n  | Storage.SetCookie;\nexport type StorageResult =\n  | Storage.DeleteCookiesResult\n  | Storage.GetCookiesResult\n  | Storage.SetCookieResult;\nexport namespace Storage {\n  export type PartitionKey = {\n    userContext?: string;\n    sourceOrigin?: string;\n  } & Extensible;\n}\nexport namespace Storage {\n  export type GetCookies = {\n    method: 'storage.getCookies';\n    params: Storage.GetCookiesParameters;\n  };\n}\nexport namespace Storage {\n  export type CookieFilter = {\n    name?: string;\n    value?: Network.BytesValue;\n    domain?: string;\n    path?: string;\n    size?: JsUint;\n    httpOnly?: boolean;\n    secure?: boolean;\n    sameSite?: Network.SameSite;\n    expiry?: JsUint;\n  } & Extensible;\n}\nexport namespace Storage {\n  export type BrowsingContextPartitionDescriptor = {\n    type: 'context';\n    context: BrowsingContext.BrowsingContext;\n  };\n}\nexport namespace Storage {\n  export type StorageKeyPartitionDescriptor = {\n    type: 'storageKey';\n    userContext?: string;\n    sourceOrigin?: string;\n  } & Extensible;\n}\nexport namespace Storage {\n  export type PartitionDescriptor =\n    | Storage.BrowsingContextPartitionDescriptor\n    | Storage.StorageKeyPartitionDescriptor;\n}\nexport namespace Storage {\n  export type GetCookiesParameters = {\n    filter?: Storage.CookieFilter;\n    partition?: Storage.PartitionDescriptor;\n  };\n}\nexport namespace Storage {\n  export type GetCookiesResult = {\n    cookies: [...Network.Cookie[]];\n    partitionKey: Storage.PartitionKey;\n  };\n}\nexport namespace Storage {\n  export type SetCookie = {\n    method: 'storage.setCookie';\n    params: Storage.SetCookieParameters;\n  };\n}\nexport namespace Storage {\n  export type PartialCookie = {\n    name: string;\n    value: Network.BytesValue;\n    domain: string;\n    path?: string;\n    httpOnly?: boolean;\n    secure?: boolean;\n    sameSite?: Network.SameSite;\n    expiry?: JsUint;\n  } & Extensible;\n}\nexport namespace Storage {\n  export type SetCookieParameters = {\n    cookie: Storage.PartialCookie;\n    partition?: Storage.PartitionDescriptor;\n  };\n}\nexport namespace Storage {\n  export type SetCookieResult = {\n    partitionKey: Storage.PartitionKey;\n  };\n}\nexport namespace Storage {\n  export type DeleteCookies = {\n    method: 'storage.deleteCookies';\n    params: Storage.DeleteCookiesParameters;\n  };\n}\nexport namespace Storage {\n  export type DeleteCookiesParameters = {\n    filter?: Storage.CookieFilter;\n    partition?: Storage.PartitionDescriptor;\n  };\n}\nexport namespace Storage {\n  export type DeleteCookiesResult = {\n    partitionKey: Storage.PartitionKey;\n  };\n}\nexport type LogEvent = Log.EntryAdded;\nexport namespace Log {\n  export const enum Level {\n    Debug = 'debug',\n    Info = 'info',\n    Warn = 'warn',\n    Error = 'error',\n  }\n}\nexport namespace Log {\n  export type Entry =\n    | Log.GenericLogEntry\n    | Log.ConsoleLogEntry\n    | Log.JavascriptLogEntry;\n}\nexport namespace Log {\n  export type BaseLogEntry = {\n    level: Log.Level;\n    source: Script.Source;\n    text: string | null;\n    timestamp: JsUint;\n    stackTrace?: Script.StackTrace;\n  };\n}\nexport namespace Log {\n  export type GenericLogEntry = Log.BaseLogEntry & {\n    type: string;\n  };\n}\nexport namespace Log {\n  export type ConsoleLogEntry = Log.BaseLogEntry & {\n    type: 'console';\n    method: string;\n    args: [...Script.RemoteValue[]];\n  };\n}\nexport namespace Log {\n  export type JavascriptLogEntry = Log.BaseLogEntry & {\n    type: 'javascript';\n  };\n}\nexport namespace Log {\n  export type EntryAdded = {\n    method: 'log.entryAdded';\n    params: Log.Entry;\n  };\n}\nexport type InputCommand =\n  | Input.PerformActions\n  | Input.ReleaseActions\n  | Input.SetFiles;\nexport type InputEvent = Input.FileDialogOpened;\nexport namespace Input {\n  export type ElementOrigin = {\n    type: 'element';\n    element: Script.SharedReference;\n  };\n}\nexport namespace Input {\n  export type PerformActionsParameters = {\n    context: BrowsingContext.BrowsingContext;\n    actions: [...Input.SourceActions[]];\n  };\n}\nexport namespace Input {\n  export type NoneSourceActions = {\n    type: 'none';\n    id: string;\n    actions: [...Input.NoneSourceAction[]];\n  };\n}\nexport namespace Input {\n  export type KeySourceActions = {\n    type: 'key';\n    id: string;\n    actions: [...Input.KeySourceAction[]];\n  };\n}\nexport namespace Input {\n  export type PointerSourceActions = {\n    type: 'pointer';\n    id: string;\n    parameters?: Input.PointerParameters;\n    actions: [...Input.PointerSourceAction[]];\n  };\n}\nexport namespace Input {\n  export type PerformActions = {\n    method: 'input.performActions';\n    params: Input.PerformActionsParameters;\n  };\n}\nexport namespace Input {\n  export type SourceActions =\n    | Input.NoneSourceActions\n    | Input.KeySourceActions\n    | Input.PointerSourceActions\n    | Input.WheelSourceActions;\n}\nexport namespace Input {\n  export type NoneSourceAction = Input.PauseAction;\n}\nexport namespace Input {\n  export type KeySourceAction =\n    | Input.PauseAction\n    | Input.KeyDownAction\n    | Input.KeyUpAction;\n}\nexport namespace Input {\n  export const enum PointerType {\n    Mouse = 'mouse',\n    Pen = 'pen',\n    Touch = 'touch',\n  }\n}\nexport namespace Input {\n  export type PointerParameters = {\n    /**\n     * @defaultValue `\"mouse\"`\n     */\n    pointerType?: Input.PointerType;\n  };\n}\nexport namespace Input {\n  export type WheelSourceActions = {\n    type: 'wheel';\n    id: string;\n    actions: [...Input.WheelSourceAction[]];\n  };\n}\nexport namespace Input {\n  export type PointerSourceAction =\n    | Input.PauseAction\n    | Input.PointerDownAction\n    | Input.PointerUpAction\n    | Input.PointerMoveAction;\n}\nexport namespace Input {\n  export type WheelSourceAction = Input.PauseAction | Input.WheelScrollAction;\n}\nexport namespace Input {\n  export type PauseAction = {\n    type: 'pause';\n    duration?: JsUint;\n  };\n}\nexport namespace Input {\n  export type KeyDownAction = {\n    type: 'keyDown';\n    value: string;\n  };\n}\nexport namespace Input {\n  export type KeyUpAction = {\n    type: 'keyUp';\n    value: string;\n  };\n}\nexport namespace Input {\n  export type PointerUpAction = {\n    type: 'pointerUp';\n    button: JsUint;\n  };\n}\nexport namespace Input {\n  export type PointerDownAction = {\n    type: 'pointerDown';\n    button: JsUint;\n  } & Input.PointerCommonProperties;\n}\nexport namespace Input {\n  export type PointerMoveAction = {\n    type: 'pointerMove';\n    x: number;\n    y: number;\n    duration?: JsUint;\n    origin?: Input.Origin;\n  } & Input.PointerCommonProperties;\n}\nexport namespace Input {\n  export type WheelScrollAction = {\n    type: 'scroll';\n    x: JsInt;\n    y: JsInt;\n    deltaX: JsInt;\n    deltaY: JsInt;\n    duration?: JsUint;\n    /**\n     * @defaultValue `\"viewport\"`\n     */\n    origin?: Input.Origin;\n  };\n}\nexport namespace Input {\n  export type PointerCommonProperties = {\n    /**\n     * @defaultValue `1`\n     */\n    width?: JsUint;\n    /**\n     * @defaultValue `1`\n     */\n    height?: JsUint;\n    /**\n     * @defaultValue `0`\n     */\n    pressure?: number;\n    /**\n     * @defaultValue `0`\n     */\n    tangentialPressure?: number;\n    /**\n     * Must be between `0` and `359`, inclusive.\n     *\n     * @defaultValue `0`\n     */\n    twist?: number;\n    /**\n     * Must be between `0` and `1.5707963267948966`, inclusive.\n     *\n     * @defaultValue `0`\n     */\n    altitudeAngle?: number;\n    /**\n     * Must be between `0` and `6.283185307179586`, inclusive.\n     *\n     * @defaultValue `0`\n     */\n    azimuthAngle?: number;\n  };\n}\nexport namespace Input {\n  export type Origin = 'viewport' | 'pointer' | Input.ElementOrigin;\n}\nexport namespace Input {\n  export type ReleaseActions = {\n    method: 'input.releaseActions';\n    params: Input.ReleaseActionsParameters;\n  };\n}\nexport namespace Input {\n  export type ReleaseActionsParameters = {\n    context: BrowsingContext.BrowsingContext;\n  };\n}\nexport namespace Input {\n  export type SetFiles = {\n    method: 'input.setFiles';\n    params: Input.SetFilesParameters;\n  };\n}\nexport namespace Input {\n  export type SetFilesParameters = {\n    context: BrowsingContext.BrowsingContext;\n    element: Script.SharedReference;\n    files: [...string[]];\n  };\n}\nexport namespace Input {\n  export type FileDialogOpened = {\n    method: 'input.fileDialogOpened';\n    params: Input.FileDialogInfo;\n  };\n}\nexport namespace Input {\n  export type FileDialogInfo = {\n    context: BrowsingContext.BrowsingContext;\n    element?: Script.SharedReference;\n    multiple: boolean;\n  };\n}\nexport type WebExtensionCommand = WebExtension.Install | WebExtension.Uninstall;\nexport type WebExtensionResult = WebExtension.InstallResult;\nexport namespace WebExtension {\n  export type Extension = string;\n}\nexport namespace WebExtension {\n  export type InstallParameters = {\n    extensionData: WebExtension.ExtensionData;\n  };\n}\nexport namespace WebExtension {\n  export type Install = {\n    method: 'webExtension.install';\n    params: WebExtension.InstallParameters;\n  };\n}\nexport namespace WebExtension {\n  export type ExtensionData =\n    | WebExtension.ExtensionArchivePath\n    | WebExtension.ExtensionBase64Encoded\n    | WebExtension.ExtensionPath;\n}\nexport namespace WebExtension {\n  export type ExtensionPath = {\n    type: 'path';\n    path: string;\n  };\n}\nexport namespace WebExtension {\n  export type ExtensionArchivePath = {\n    type: 'archivePath';\n    path: string;\n  };\n}\nexport namespace WebExtension {\n  export type ExtensionBase64Encoded = {\n    type: 'base64';\n    value: string;\n  };\n}\nexport namespace WebExtension {\n  export type InstallResult = {\n    extension: WebExtension.Extension;\n  };\n}\nexport namespace WebExtension {\n  export type Uninstall = {\n    method: 'webExtension.uninstall';\n    params: WebExtension.UninstallParameters;\n  };\n}\nexport namespace WebExtension {\n  export type UninstallParameters = {\n    extension: WebExtension.Extension;\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqFO,IAAW,YAAX,kBAAWA,eAAX;AACL,EAAAA,WAAA,qBAAkB;AAClB,EAAAA,WAAA,qBAAkB;AAClB,EAAAA,WAAA,sBAAmB;AACnB,EAAAA,WAAA,yBAAsB;AACtB,EAAAA,WAAA,2BAAwB;AACxB,EAAAA,WAAA,iBAAc;AACd,EAAAA,WAAA,4BAAyB;AACzB,EAAAA,WAAA,mBAAgB;AAChB,EAAAA,WAAA,iBAAc;AACd,EAAAA,WAAA,kBAAe;AACf,EAAAA,WAAA,wBAAqB;AACrB,EAAAA,WAAA,qBAAkB;AAClB,EAAAA,WAAA,uBAAoB;AACpB,EAAAA,WAAA,gBAAa;AACb,EAAAA,WAAA,mBAAgB;AAChB,EAAAA,WAAA,kBAAe;AACf,EAAAA,WAAA,4BAAyB;AACzB,EAAAA,WAAA,uBAAoB;AACpB,EAAAA,WAAA,wBAAqB;AACrB,EAAAA,WAAA,uBAAoB;AACpB,EAAAA,WAAA,2BAAwB;AACxB,EAAAA,WAAA,0BAAuB;AACvB,EAAAA,WAAA,uBAAoB;AACpB,EAAAA,WAAA,0BAAuB;AACvB,EAAAA,WAAA,4BAAyB;AACzB,EAAAA,WAAA,oCAAiC;AACjC,EAAAA,WAAA,oBAAiB;AACjB,EAAAA,WAAA,kBAAe;AACf,EAAAA,WAAA,0BAAuB;AA7BP,SAAAA;AAAA,GAAA;AAkHX,IAAU;AAAA,CAAV,CAAUC,aAAV;AACE,MAAW;AAAX,IAAWC,2BAAX;AACL,IAAAA,uBAAA,YAAS;AACT,IAAAA,uBAAA,aAAU;AACV,IAAAA,uBAAA,YAAS;AAAA,KAHO,wBAAAD,SAAA,0BAAAA,SAAA;AAAA,GADH;AAsUV,IAAU;AAAA,CAAV,CAAUE,qBAAV;AACE,MAAW;AAAX,IAAWC,oBAAX;AACL,IAAAA,gBAAA,UAAO;AACP,IAAAA,gBAAA,iBAAc;AACd,IAAAA,gBAAA,cAAW;AAAA,KAHK,iBAAAD,iBAAA,mBAAAA,iBAAA;AAAA,GADH;AAAA,CAOV,CAAUA,qBAAV;AACE,MAAW;AAAX,IAAWE,oBAAX;AACL,IAAAA,gBAAA,WAAQ;AACR,IAAAA,gBAAA,kBAAe;AACf,IAAAA,gBAAA,aAAU;AACV,IAAAA,gBAAA,YAAS;AAAA,KAJO,iBAAAF,iBAAA,mBAAAA,iBAAA;AAAA,GADH;AAAA,CA2FV,CAAUA,qBAAV;AACE,MAAW;AAAX,IAAWG,gBAAX;AACL,IAAAA,YAAA,SAAM;AACN,IAAAA,YAAA,YAAS;AAAA,KAFO,aAAAH,iBAAA,eAAAA,iBAAA;AAAA,GADH;AAyXV,IAAU;AAAA,CAAV,CAAUI,eAAV;AACE,MAAW;AAAX,IAAWC,2BAAX;AACL,IAAAA,uBAAA,WAAQ;AACR,IAAAA,uBAAA,UAAO;AAAA,KAFS,wBAAAD,WAAA,0BAAAA,WAAA;AAAA,GADH;AAAA,CA+FV,CAAUA,eAAV;AACE,MAAW;AAAX,IAAWE,8BAAX;AACL,IAAAA,0BAAA,cAAW;AACX,IAAAA,0BAAA,eAAY;AAAA,KAFI,2BAAAF,WAAA,6BAAAA,WAAA;AAAA,GADH;AA4GV,IAAU;AAAA,CAAV,CAAUG,aAAV;AACE,MAAW;AAAX,IAAWC,mBAAX;AACL,IAAAA,eAAA,UAAO;AAAA,KADS,gBAAAD,SAAA,kBAAAA,SAAA;AAAA,GADH;AAAA,CAKV,CAAUA,aAAV;AACE,MAAW;AAAX,IAAWE,cAAX;AACL,IAAAA,UAAA,YAAS;AACT,IAAAA,UAAA,SAAM;AACN,IAAAA,UAAA,UAAO;AACP,IAAAA,UAAA,aAAU;AAAA,KAJM,WAAAF,SAAA,aAAAA,SAAA;AAAA,GADH;AAAA,CA2BV,CAAUA,aAAV;AACE,MAAW;AAAX,IAAWG,cAAX;AACL,IAAAA,UAAA,cAAW;AAAA,KADK,WAAAH,SAAA,aAAAA,SAAA;AAAA,GADH;AAAA,CAwJV,CAAUA,aAAV;AACE,MAAW;AAAX,IAAWI,oBAAX;AACL,IAAAA,gBAAA,uBAAoB;AACpB,IAAAA,gBAAA,qBAAkB;AAClB,IAAAA,gBAAA,kBAAe;AAAA,KAHC,iBAAAJ,SAAA,mBAAAA,SAAA;AAAA,GADH;AAisBV,IAAU;AAAA,CAAV,CAAUK,YAAV;AACE,MAAW;AAAX,IAAWC,qBAAX;AACL,IAAAA,iBAAA,UAAO;AACP,IAAAA,iBAAA,UAAO;AAAA,KAFS,kBAAAD,QAAA,oBAAAA,QAAA;AAAA,GADH;AA6SV,IAAU;AAAA,CAAV,CAAUE,SAAV;AACE,MAAW;AAAX,IAAWC,WAAX;AACL,IAAAA,OAAA,WAAQ;AACR,IAAAA,OAAA,UAAO;AACP,IAAAA,OAAA,UAAO;AACP,IAAAA,OAAA,WAAQ;AAAA,KAJQ,QAAAD,KAAA,UAAAA,KAAA;AAAA,GADH;AA2GV,IAAU;AAAA,CAAV,CAAUE,WAAV;AACE,MAAW;AAAX,IAAWC,iBAAX;AACL,IAAAA,aAAA,WAAQ;AACR,IAAAA,aAAA,SAAM;AACN,IAAAA,aAAA,WAAQ;AAAA,KAHQ,cAAAD,OAAA,gBAAAA,OAAA;AAAA,GADH;",
  "names": ["ErrorCode", "Session", "UserPromptHandlerType", "BrowsingContext", "ReadinessState", "UserPromptType", "CreateType", "Emulation", "ForcedColorsModeTheme", "ScreenOrientationNatural", "Network", "CollectorType", "SameSite", "DataType", "InterceptPhase", "Script", "ResultOwnership", "Log", "Level", "Input", "PointerType"]
}
