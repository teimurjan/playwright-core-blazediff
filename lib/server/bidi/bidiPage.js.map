{
  "version": 3,
  "sources": ["../../../src/server/bidi/bidiPage.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { eventsHelper } from '../utils/eventsHelper';\nimport * as dialog from '../dialog';\nimport * as dom from '../dom';\nimport { Page } from '../page';\nimport { BidiExecutionContext, createHandle } from './bidiExecutionContext';\nimport { RawKeyboardImpl, RawMouseImpl, RawTouchscreenImpl } from './bidiInput';\nimport { BidiNetworkManager } from './bidiNetworkManager';\nimport { BidiPDF } from './bidiPdf';\nimport * as bidi from './third_party/bidiProtocol';\n\nimport type { RegisteredListener } from '../utils/eventsHelper';\nimport type * as accessibility from '../accessibility';\nimport type * as frames from '../frames';\nimport type { InitScript, PageDelegate } from '../page';\nimport type { Progress } from '../progress';\nimport type * as types from '../types';\nimport type { BidiBrowserContext } from './bidiBrowser';\nimport type { BidiSession } from './bidiConnection';\nimport type * as channels from '@protocol/channels';\n\nconst UTILITY_WORLD_NAME = '__playwright_utility_world__';\nexport const kPlaywrightBindingChannel = 'playwrightChannel';\n\nexport class BidiPage implements PageDelegate {\n  readonly rawMouse: RawMouseImpl;\n  readonly rawKeyboard: RawKeyboardImpl;\n  readonly rawTouchscreen: RawTouchscreenImpl;\n  readonly _page: Page;\n  readonly _session: BidiSession;\n  readonly _opener: BidiPage | null;\n  readonly _realmToContext: Map<string, dom.FrameExecutionContext>;\n  private _sessionListeners: RegisteredListener[] = [];\n  readonly _browserContext: BidiBrowserContext;\n  readonly _networkManager: BidiNetworkManager;\n  private readonly _pdf: BidiPDF;\n  private _initScriptIds = new Map<InitScript, string>();\n\n  constructor(browserContext: BidiBrowserContext, bidiSession: BidiSession, opener: BidiPage | null) {\n    this._session = bidiSession;\n    this._opener = opener;\n    this.rawKeyboard = new RawKeyboardImpl(bidiSession);\n    this.rawMouse = new RawMouseImpl(bidiSession);\n    this.rawTouchscreen = new RawTouchscreenImpl(bidiSession);\n    this._realmToContext = new Map();\n    this._page = new Page(this, browserContext);\n    this._browserContext = browserContext;\n    this._networkManager = new BidiNetworkManager(this._session, this._page);\n    this._pdf = new BidiPDF(this._session);\n    this._page.on(Page.Events.FrameDetached, (frame: frames.Frame) => this._removeContextsForFrame(frame, false));\n    this._sessionListeners = [\n      eventsHelper.addEventListener(bidiSession, 'script.realmCreated', this._onRealmCreated.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'script.message', this._onScriptMessage.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'browsingContext.contextDestroyed', this._onBrowsingContextDestroyed.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'browsingContext.navigationStarted', this._onNavigationStarted.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'browsingContext.navigationCommitted', this._onNavigationCommitted.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'browsingContext.navigationAborted', this._onNavigationAborted.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'browsingContext.navigationFailed', this._onNavigationFailed.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'browsingContext.fragmentNavigated', this._onFragmentNavigated.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'browsingContext.historyUpdated', this._onHistoryUpdated.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'browsingContext.domContentLoaded', this._onDomContentLoaded.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'browsingContext.load', this._onLoad.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'browsingContext.userPromptOpened', this._onUserPromptOpened.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'log.entryAdded', this._onLogEntryAdded.bind(this)),\n    ];\n\n    // Initialize main frame.\n    // TODO: Wait for first execution context to be created and maybe about:blank navigated.\n    this._initialize().then(\n        () => this._page.reportAsNew(this._opener?._page),\n        error => this._page.reportAsNew(this._opener?._page, error));\n  }\n\n  private async _initialize() {\n    // Initialize main frame.\n    this._onFrameAttached(this._session.sessionId, null);\n    await Promise.all([\n      this.updateHttpCredentials(),\n      this.updateRequestInterception(),\n      // If the page is created by the Playwright client's call, some initialization\n      // may be pending. Wait for it to complete before reporting the page as new.\n    ]);\n  }\n\n  didClose() {\n    this._session.dispose();\n    eventsHelper.removeEventListeners(this._sessionListeners);\n    this._page._didClose();\n  }\n\n  private _onFrameAttached(frameId: string, parentFrameId: string | null): frames.Frame {\n    return this._page.frameManager.frameAttached(frameId, parentFrameId);\n  }\n\n  private _removeContextsForFrame(frame: frames.Frame, notifyFrame: boolean) {\n    for (const [contextId, context] of this._realmToContext) {\n      if (context.frame === frame) {\n        this._realmToContext.delete(contextId);\n        if (notifyFrame)\n          frame._contextDestroyed(context);\n      }\n    }\n  }\n\n  private _onRealmCreated(realmInfo: bidi.Script.RealmInfo) {\n    if (this._realmToContext.has(realmInfo.realm))\n      return;\n    if (realmInfo.type !== 'window')\n      return;\n    const frame = this._page.frameManager.frame(realmInfo.context);\n    if (!frame)\n      return;\n    let worldName: types.World;\n    if (!realmInfo.sandbox) {\n      worldName = 'main';\n      // Force creating utility world every time the main world is created (e.g. due to navigation).\n      this._touchUtilityWorld(realmInfo.context);\n    } else if (realmInfo.sandbox === UTILITY_WORLD_NAME) {\n      worldName = 'utility';\n    } else {\n      return;\n    }\n    const delegate = new BidiExecutionContext(this._session, realmInfo);\n    const context = new dom.FrameExecutionContext(delegate, frame, worldName);\n    frame._contextCreated(worldName, context);\n    this._realmToContext.set(realmInfo.realm, context);\n  }\n\n  private async _touchUtilityWorld(context: bidi.BrowsingContext.BrowsingContext) {\n    await this._session.sendMayFail('script.evaluate', {\n      expression: '1 + 1',\n      target: {\n        context,\n        sandbox: UTILITY_WORLD_NAME,\n      },\n      serializationOptions: {\n        maxObjectDepth: 10,\n        maxDomDepth: 10,\n      },\n      awaitPromise: true,\n      userActivation: true,\n    });\n  }\n\n  _onRealmDestroyed(params: bidi.Script.RealmDestroyedParameters): boolean {\n    const context = this._realmToContext.get(params.realm);\n    if (!context)\n      return false;\n    this._realmToContext.delete(params.realm);\n    context.frame._contextDestroyed(context);\n    return true;\n  }\n\n  // TODO: route the message directly to the browser\n  private _onBrowsingContextDestroyed(params: bidi.BrowsingContext.Info) {\n    this._browserContext._browser._onBrowsingContextDestroyed(params);\n  }\n\n  private _onNavigationStarted(params: bidi.BrowsingContext.NavigationInfo) {\n    const frameId = params.context;\n    this._page.frameManager.frameRequestedNavigation(frameId, params.navigation!);\n  }\n\n  private _onNavigationCommitted(params: bidi.BrowsingContext.NavigationInfo) {\n    const frameId = params.context;\n    this._page.frameManager.frameCommittedNewDocumentNavigation(frameId, params.url, '', params.navigation!, /* initial */ false);\n  }\n\n  private _onDomContentLoaded(params: bidi.BrowsingContext.NavigationInfo) {\n    const frameId = params.context;\n    this._page.frameManager.frameLifecycleEvent(frameId, 'domcontentloaded');\n  }\n\n  private _onLoad(params: bidi.BrowsingContext.NavigationInfo) {\n    this._page.frameManager.frameLifecycleEvent(params.context, 'load');\n  }\n\n  private _onNavigationAborted(params: bidi.BrowsingContext.NavigationInfo) {\n    this._page.frameManager.frameAbortedNavigation(params.context, 'Navigation aborted', params.navigation || undefined);\n  }\n\n  private _onNavigationFailed(params: bidi.BrowsingContext.NavigationInfo) {\n    this._page.frameManager.frameAbortedNavigation(params.context, 'Navigation failed', params.navigation || undefined);\n  }\n\n  private _onFragmentNavigated(params: bidi.BrowsingContext.NavigationInfo) {\n    this._page.frameManager.frameCommittedSameDocumentNavigation(params.context, params.url);\n  }\n\n  private _onHistoryUpdated(params: bidi.BrowsingContext.HistoryUpdatedParameters) {\n    this._page.frameManager.frameCommittedSameDocumentNavigation(params.context, params.url);\n  }\n\n  private _onUserPromptOpened(event: bidi.BrowsingContext.UserPromptOpenedParameters) {\n    this._page.browserContext.dialogManager.dialogDidOpen(new dialog.Dialog(\n        this._page,\n        event.type as dialog.DialogType,\n        event.message,\n        async (accept: boolean, userText?: string) => {\n          await this._session.send('browsingContext.handleUserPrompt', { context: event.context, accept, userText });\n        },\n        event.defaultValue));\n  }\n\n  private _onLogEntryAdded(params: bidi.Log.Entry) {\n    if (params.type !== 'console')\n      return;\n    const entry: bidi.Log.ConsoleLogEntry = params as bidi.Log.ConsoleLogEntry;\n    const context = this._realmToContext.get(params.source.realm);\n    if (!context)\n      return;\n    const callFrame = params.stackTrace?.callFrames[0];\n    const location = callFrame ?? { url: '', lineNumber: 1, columnNumber: 1 };\n    this._page.addConsoleMessage(entry.method, entry.args.map(arg => createHandle(context, arg)), location, params.text || undefined);\n  }\n\n  async navigateFrame(frame: frames.Frame, url: string, referrer: string | undefined): Promise<frames.GotoResult> {\n    const { navigation } = await this._session.send('browsingContext.navigate', {\n      context: frame._id,\n      url,\n    });\n    return { newDocumentId: navigation || undefined };\n  }\n\n  async updateExtraHTTPHeaders(): Promise<void> {\n  }\n\n  async updateEmulateMedia(): Promise<void> {\n  }\n\n  async updateUserAgent(): Promise<void> {\n  }\n\n  async bringToFront(): Promise<void> {\n    await this._session.send('browsingContext.activate', {\n      context: this._session.sessionId,\n    });\n  }\n\n  async updateEmulatedViewportSize(): Promise<void> {\n    const options = this._browserContext._options;\n    const emulatedSize = this._page.emulatedSize();\n    if (!emulatedSize)\n      return;\n    const viewportSize = emulatedSize.viewport;\n    await this._session.send('browsingContext.setViewport', {\n      context: this._session.sessionId,\n      viewport: {\n        width: viewportSize.width,\n        height: viewportSize.height,\n      },\n      devicePixelRatio: options.deviceScaleFactor || 1\n    });\n  }\n\n  async updateRequestInterception(): Promise<void> {\n    await this._networkManager.setRequestInterception(this._page.needsRequestInterception());\n  }\n\n  async updateOffline() {\n  }\n\n  async updateHttpCredentials() {\n    await this._networkManager.setCredentials(this._browserContext._options.httpCredentials);\n  }\n\n  async updateFileChooserInterception() {\n  }\n\n  async reload(): Promise<void> {\n    await this._session.send('browsingContext.reload', {\n      context: this._session.sessionId,\n      // ignoreCache: true,\n      wait: bidi.BrowsingContext.ReadinessState.Interactive,\n    });\n  }\n\n  async goBack(): Promise<boolean> {\n    return await this._session.send('browsingContext.traverseHistory', {\n      context: this._session.sessionId,\n      delta: -1,\n    }).then(() => true).catch(() => false);\n  }\n\n  async goForward(): Promise<boolean> {\n    return await this._session.send('browsingContext.traverseHistory', {\n      context: this._session.sessionId,\n      delta: +1,\n    }).then(() => true).catch(() => false);\n  }\n\n  async requestGC(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  private async _onScriptMessage(event: bidi.Script.MessageParameters) {\n    if (event.channel !== kPlaywrightBindingChannel)\n      return;\n    const pageOrError = await this._page.waitForInitializedOrError();\n    if (pageOrError instanceof Error)\n      return;\n    const context = this._realmToContext.get(event.source.realm);\n    if (!context)\n      return;\n    if (event.data.type !== 'string')\n      return;\n    await this._page.onBindingCalled(event.data.value, context);\n  }\n\n  async addInitScript(initScript: InitScript): Promise<void> {\n    const { script } = await this._session.send('script.addPreloadScript', {\n      // TODO: remove function call from the source.\n      functionDeclaration: `() => { return ${initScript.source} }`,\n      // TODO: push to iframes?\n      contexts: [this._session.sessionId],\n    });\n    this._initScriptIds.set(initScript, script);\n  }\n\n  async removeInitScripts(initScripts: InitScript[]): Promise<void> {\n    const ids: string[] = [];\n    for (const script of initScripts) {\n      const id = this._initScriptIds.get(script);\n      if (id)\n        ids.push(id);\n      this._initScriptIds.delete(script);\n    }\n    await Promise.all(ids.map(script => this._session.send('script.removePreloadScript', { script })));\n  }\n\n  async closePage(runBeforeUnload: boolean): Promise<void> {\n    await this._session.send('browsingContext.close', {\n      context: this._session.sessionId,\n      promptUnload: runBeforeUnload,\n    });\n  }\n\n  async setBackgroundColor(color?: { r: number; g: number; b: number; a: number; }): Promise<void> {\n  }\n\n  async takeScreenshot(progress: Progress, format: string, documentRect: types.Rect | undefined, viewportRect: types.Rect | undefined, quality: number | undefined, fitsViewport: boolean, scale: 'css' | 'device'): Promise<Buffer> {\n    const rect = (documentRect || viewportRect)!;\n    const { data } = await progress.race(this._session.send('browsingContext.captureScreenshot', {\n      context: this._session.sessionId,\n      format: {\n        type: `image/${format === 'png' ? 'png' : 'jpeg'}`,\n        quality: quality ? quality / 100 : 0.8,\n      },\n      origin: documentRect ? 'document' : 'viewport',\n      clip: {\n        type: 'box',\n        ...rect,\n      }\n    }));\n    return Buffer.from(data, 'base64');\n  }\n\n  async getContentFrame(handle: dom.ElementHandle): Promise<frames.Frame | null> {\n    const executionContext = toBidiExecutionContext(handle._context);\n    const frameId = await executionContext.contentFrameIdForFrame(handle);\n    if (!frameId)\n      return null;\n    return this._page.frameManager.frame(frameId);\n  }\n\n  async getOwnerFrame(handle: dom.ElementHandle): Promise<string | null> {\n    // TODO: switch to utility world?\n    const windowHandle = await handle.evaluateHandle(node => {\n      const doc = node.ownerDocument ?? node as Document;\n      return doc.defaultView;\n    });\n    if (!windowHandle)\n      return null;\n    const executionContext = toBidiExecutionContext(handle._context);\n    return executionContext.frameIdForWindowHandle(windowHandle);\n  }\n\n  async getBoundingBox(handle: dom.ElementHandle): Promise<types.Rect | null> {\n    const box = await handle.evaluate(element => {\n      if (!(element instanceof Element))\n        return null;\n      const rect = element.getBoundingClientRect();\n      return { x: rect.x, y: rect.y, width: rect.width, height: rect.height };\n    });\n    if (!box)\n      return null;\n    const position = await this._framePosition(handle._frame);\n    if (!position)\n      return null;\n    box.x += position.x;\n    box.y += position.y;\n    return box;\n  }\n\n  // TODO: move to Frame.\n  private async _framePosition(frame: frames.Frame): Promise<types.Point | null> {\n    if (frame === this._page.mainFrame())\n      return { x: 0, y: 0 };\n    const element = await frame.frameElement();\n    const box = await element.boundingBox();\n    if (!box)\n      return null;\n    const style = await element.evaluateInUtility(([injected, iframe]) => injected.describeIFrameStyle(iframe as Element), {}).catch(e => 'error:notconnected' as const);\n    if (style === 'error:notconnected' || style === 'transformed')\n      return null;\n    // Content box is offset by border and padding widths.\n    box.x += style.left;\n    box.y += style.top;\n    return box;\n  }\n\n  async scrollRectIntoViewIfNeeded(handle: dom.ElementHandle<Element>, rect?: types.Rect): Promise<'error:notvisible' | 'error:notconnected' | 'done'> {\n    return await handle.evaluateInUtility(([injected, node]) => {\n      node.scrollIntoView({\n        block: 'center',\n        inline: 'center',\n        behavior: 'instant',\n      });\n    }, null).then(() => 'done' as const).catch(e => {\n      if (e instanceof Error && e.message.includes('Node is detached from document'))\n        return 'error:notconnected';\n      if (e instanceof Error && e.message.includes('Node does not have a layout object'))\n        return 'error:notvisible';\n      throw e;\n    });\n  }\n\n  async setScreencastOptions(options: { width: number, height: number, quality: number } | null): Promise<void> {\n  }\n\n  rafCountForStablePosition(): number {\n    return 1;\n  }\n\n  async getContentQuads(handle: dom.ElementHandle<Element>): Promise<types.Quad[] | null | 'error:notconnected'> {\n    const quads = await handle.evaluateInUtility(([injected, node]) => {\n      if (!node.isConnected)\n        return 'error:notconnected';\n      const rects = node.getClientRects();\n      if (!rects)\n        return null;\n      return [...rects].map(rect => [\n        { x: rect.left, y: rect.top },\n        { x: rect.right, y: rect.top },\n        { x: rect.right, y: rect.bottom },\n        { x: rect.left, y: rect.bottom },\n      ]);\n    }, null);\n    if (!quads || quads === 'error:notconnected')\n      return quads;\n    // TODO: consider transforming quads to support clicks in iframes.\n    const position = await this._framePosition(handle._frame);\n    if (!position)\n      return null;\n    quads.forEach(quad => quad.forEach(point => {\n      point.x += position.x;\n      point.y += position.y;\n    }));\n    return quads as types.Quad[];\n  }\n\n  async setInputFilePaths(handle: dom.ElementHandle<HTMLInputElement>, paths: string[]): Promise<void> {\n    const fromContext = toBidiExecutionContext(handle._context);\n    await this._session.send('input.setFiles', {\n      context: this._session.sessionId,\n      element: await fromContext.nodeIdForElementHandle(handle),\n      files: paths,\n    });\n  }\n\n  async adoptElementHandle<T extends Node>(handle: dom.ElementHandle<T>, to: dom.FrameExecutionContext): Promise<dom.ElementHandle<T>> {\n    const fromContext = toBidiExecutionContext(handle._context);\n    const nodeId = await fromContext.nodeIdForElementHandle(handle);\n    const executionContext = toBidiExecutionContext(to);\n    return await executionContext.remoteObjectForNodeId(to, nodeId) as dom.ElementHandle<T>;\n  }\n\n  async getAccessibilityTree(needle?: dom.ElementHandle): Promise<{tree: accessibility.AXNode, needle: accessibility.AXNode | null}> {\n    throw new Error('Method not implemented.');\n  }\n\n  async inputActionEpilogue(): Promise<void> {\n  }\n\n  async resetForReuse(progress: Progress): Promise<void> {\n  }\n\n  async pdf(options: channels.PagePdfParams): Promise<Buffer> {\n    return this._pdf.generate(options);\n  }\n\n  async getFrameElement(frame: frames.Frame): Promise<dom.ElementHandle> {\n    const parent = frame.parentFrame();\n    if (!parent)\n      throw new Error('Frame has been detached.');\n    const parentContext = await parent._mainContext();\n    const list = await parentContext.evaluateHandle(() => { return [...document.querySelectorAll('iframe,frame')]; });\n    const length = await list.evaluate(list => list.length);\n    let foundElement = null;\n    for (let i = 0; i < length; i++) {\n      const element = await list.evaluateHandle((list, i) => list[i], i);\n      const candidate = await element.contentFrame();\n      if (frame === candidate) {\n        foundElement = element;\n        break;\n      } else {\n        element.dispose();\n      }\n    }\n    list.dispose();\n    if (!foundElement)\n      throw new Error('Frame has been detached.');\n    return foundElement;\n  }\n\n  shouldToggleStyleSheetToSyncAnimations(): boolean {\n    return true;\n  }\n}\n\nfunction toBidiExecutionContext(executionContext: dom.FrameExecutionContext): BidiExecutionContext {\n  return executionContext.delegate as BidiExecutionContext;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,0BAA6B;AAC7B,aAAwB;AACxB,UAAqB;AACrB,kBAAqB;AACrB,kCAAmD;AACnD,uBAAkE;AAClE,gCAAmC;AACnC,qBAAwB;AACxB,WAAsB;AAYtB,MAAM,qBAAqB;AACpB,MAAM,4BAA4B;AAElC,MAAM,SAAiC;AAAA,EAc5C,YAAY,gBAAoC,aAA0B,QAAyB;AANnG,SAAQ,oBAA0C,CAAC;AAInD,SAAQ,iBAAiB,oBAAI,IAAwB;AAGnD,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,SAAK,cAAc,IAAI,iCAAgB,WAAW;AAClD,SAAK,WAAW,IAAI,8BAAa,WAAW;AAC5C,SAAK,iBAAiB,IAAI,oCAAmB,WAAW;AACxD,SAAK,kBAAkB,oBAAI,IAAI;AAC/B,SAAK,QAAQ,IAAI,iBAAK,MAAM,cAAc;AAC1C,SAAK,kBAAkB;AACvB,SAAK,kBAAkB,IAAI,6CAAmB,KAAK,UAAU,KAAK,KAAK;AACvE,SAAK,OAAO,IAAI,uBAAQ,KAAK,QAAQ;AACrC,SAAK,MAAM,GAAG,iBAAK,OAAO,eAAe,CAAC,UAAwB,KAAK,wBAAwB,OAAO,KAAK,CAAC;AAC5G,SAAK,oBAAoB;AAAA,MACvB,iCAAa,iBAAiB,aAAa,uBAAuB,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAAA,MACjG,iCAAa,iBAAiB,aAAa,kBAAkB,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAAA,MAC7F,iCAAa,iBAAiB,aAAa,oCAAoC,KAAK,4BAA4B,KAAK,IAAI,CAAC;AAAA,MAC1H,iCAAa,iBAAiB,aAAa,qCAAqC,KAAK,qBAAqB,KAAK,IAAI,CAAC;AAAA,MACpH,iCAAa,iBAAiB,aAAa,uCAAuC,KAAK,uBAAuB,KAAK,IAAI,CAAC;AAAA,MACxH,iCAAa,iBAAiB,aAAa,qCAAqC,KAAK,qBAAqB,KAAK,IAAI,CAAC;AAAA,MACpH,iCAAa,iBAAiB,aAAa,oCAAoC,KAAK,oBAAoB,KAAK,IAAI,CAAC;AAAA,MAClH,iCAAa,iBAAiB,aAAa,qCAAqC,KAAK,qBAAqB,KAAK,IAAI,CAAC;AAAA,MACpH,iCAAa,iBAAiB,aAAa,kCAAkC,KAAK,kBAAkB,KAAK,IAAI,CAAC;AAAA,MAC9G,iCAAa,iBAAiB,aAAa,oCAAoC,KAAK,oBAAoB,KAAK,IAAI,CAAC;AAAA,MAClH,iCAAa,iBAAiB,aAAa,wBAAwB,KAAK,QAAQ,KAAK,IAAI,CAAC;AAAA,MAC1F,iCAAa,iBAAiB,aAAa,oCAAoC,KAAK,oBAAoB,KAAK,IAAI,CAAC;AAAA,MAClH,iCAAa,iBAAiB,aAAa,kBAAkB,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAAA,IAC/F;AAIA,SAAK,YAAY,EAAE;AAAA,MACf,MAAM,KAAK,MAAM,YAAY,KAAK,SAAS,KAAK;AAAA,MAChD,WAAS,KAAK,MAAM,YAAY,KAAK,SAAS,OAAO,KAAK;AAAA,IAAC;AAAA,EACjE;AAAA,EAEA,MAAc,cAAc;AAE1B,SAAK,iBAAiB,KAAK,SAAS,WAAW,IAAI;AACnD,UAAM,QAAQ,IAAI;AAAA,MAChB,KAAK,sBAAsB;AAAA,MAC3B,KAAK,0BAA0B;AAAA;AAAA;AAAA,IAGjC,CAAC;AAAA,EACH;AAAA,EAEA,WAAW;AACT,SAAK,SAAS,QAAQ;AACtB,qCAAa,qBAAqB,KAAK,iBAAiB;AACxD,SAAK,MAAM,UAAU;AAAA,EACvB;AAAA,EAEQ,iBAAiB,SAAiB,eAA4C;AACpF,WAAO,KAAK,MAAM,aAAa,cAAc,SAAS,aAAa;AAAA,EACrE;AAAA,EAEQ,wBAAwB,OAAqB,aAAsB;AACzE,eAAW,CAAC,WAAW,OAAO,KAAK,KAAK,iBAAiB;AACvD,UAAI,QAAQ,UAAU,OAAO;AAC3B,aAAK,gBAAgB,OAAO,SAAS;AACrC,YAAI;AACF,gBAAM,kBAAkB,OAAO;AAAA,MACnC;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,gBAAgB,WAAkC;AACxD,QAAI,KAAK,gBAAgB,IAAI,UAAU,KAAK;AAC1C;AACF,QAAI,UAAU,SAAS;AACrB;AACF,UAAM,QAAQ,KAAK,MAAM,aAAa,MAAM,UAAU,OAAO;AAC7D,QAAI,CAAC;AACH;AACF,QAAI;AACJ,QAAI,CAAC,UAAU,SAAS;AACtB,kBAAY;AAEZ,WAAK,mBAAmB,UAAU,OAAO;AAAA,IAC3C,WAAW,UAAU,YAAY,oBAAoB;AACnD,kBAAY;AAAA,IACd,OAAO;AACL;AAAA,IACF;AACA,UAAM,WAAW,IAAI,iDAAqB,KAAK,UAAU,SAAS;AAClE,UAAM,UAAU,IAAI,IAAI,sBAAsB,UAAU,OAAO,SAAS;AACxE,UAAM,gBAAgB,WAAW,OAAO;AACxC,SAAK,gBAAgB,IAAI,UAAU,OAAO,OAAO;AAAA,EACnD;AAAA,EAEA,MAAc,mBAAmB,SAA+C;AAC9E,UAAM,KAAK,SAAS,YAAY,mBAAmB;AAAA,MACjD,YAAY;AAAA,MACZ,QAAQ;AAAA,QACN;AAAA,QACA,SAAS;AAAA,MACX;AAAA,MACA,sBAAsB;AAAA,QACpB,gBAAgB;AAAA,QAChB,aAAa;AAAA,MACf;AAAA,MACA,cAAc;AAAA,MACd,gBAAgB;AAAA,IAClB,CAAC;AAAA,EACH;AAAA,EAEA,kBAAkB,QAAuD;AACvE,UAAM,UAAU,KAAK,gBAAgB,IAAI,OAAO,KAAK;AACrD,QAAI,CAAC;AACH,aAAO;AACT,SAAK,gBAAgB,OAAO,OAAO,KAAK;AACxC,YAAQ,MAAM,kBAAkB,OAAO;AACvC,WAAO;AAAA,EACT;AAAA;AAAA,EAGQ,4BAA4B,QAAmC;AACrE,SAAK,gBAAgB,SAAS,4BAA4B,MAAM;AAAA,EAClE;AAAA,EAEQ,qBAAqB,QAA6C;AACxE,UAAM,UAAU,OAAO;AACvB,SAAK,MAAM,aAAa,yBAAyB,SAAS,OAAO,UAAW;AAAA,EAC9E;AAAA,EAEQ,uBAAuB,QAA6C;AAC1E,UAAM,UAAU,OAAO;AACvB,SAAK,MAAM,aAAa;AAAA,MAAoC;AAAA,MAAS,OAAO;AAAA,MAAK;AAAA,MAAI,OAAO;AAAA;AAAA,MAA2B;AAAA,IAAK;AAAA,EAC9H;AAAA,EAEQ,oBAAoB,QAA6C;AACvE,UAAM,UAAU,OAAO;AACvB,SAAK,MAAM,aAAa,oBAAoB,SAAS,kBAAkB;AAAA,EACzE;AAAA,EAEQ,QAAQ,QAA6C;AAC3D,SAAK,MAAM,aAAa,oBAAoB,OAAO,SAAS,MAAM;AAAA,EACpE;AAAA,EAEQ,qBAAqB,QAA6C;AACxE,SAAK,MAAM,aAAa,uBAAuB,OAAO,SAAS,sBAAsB,OAAO,cAAc,MAAS;AAAA,EACrH;AAAA,EAEQ,oBAAoB,QAA6C;AACvE,SAAK,MAAM,aAAa,uBAAuB,OAAO,SAAS,qBAAqB,OAAO,cAAc,MAAS;AAAA,EACpH;AAAA,EAEQ,qBAAqB,QAA6C;AACxE,SAAK,MAAM,aAAa,qCAAqC,OAAO,SAAS,OAAO,GAAG;AAAA,EACzF;AAAA,EAEQ,kBAAkB,QAAuD;AAC/E,SAAK,MAAM,aAAa,qCAAqC,OAAO,SAAS,OAAO,GAAG;AAAA,EACzF;AAAA,EAEQ,oBAAoB,OAAwD;AAClF,SAAK,MAAM,eAAe,cAAc,cAAc,IAAI,OAAO;AAAA,MAC7D,KAAK;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,QAAiB,aAAsB;AAC5C,cAAM,KAAK,SAAS,KAAK,oCAAoC,EAAE,SAAS,MAAM,SAAS,QAAQ,SAAS,CAAC;AAAA,MAC3G;AAAA,MACA,MAAM;AAAA,IAAY,CAAC;AAAA,EACzB;AAAA,EAEQ,iBAAiB,QAAwB;AAC/C,QAAI,OAAO,SAAS;AAClB;AACF,UAAM,QAAkC;AACxC,UAAM,UAAU,KAAK,gBAAgB,IAAI,OAAO,OAAO,KAAK;AAC5D,QAAI,CAAC;AACH;AACF,UAAM,YAAY,OAAO,YAAY,WAAW,CAAC;AACjD,UAAM,WAAW,aAAa,EAAE,KAAK,IAAI,YAAY,GAAG,cAAc,EAAE;AACxE,SAAK,MAAM,kBAAkB,MAAM,QAAQ,MAAM,KAAK,IAAI,aAAO,0CAAa,SAAS,GAAG,CAAC,GAAG,UAAU,OAAO,QAAQ,MAAS;AAAA,EAClI;AAAA,EAEA,MAAM,cAAc,OAAqB,KAAa,UAA0D;AAC9G,UAAM,EAAE,WAAW,IAAI,MAAM,KAAK,SAAS,KAAK,4BAA4B;AAAA,MAC1E,SAAS,MAAM;AAAA,MACf;AAAA,IACF,CAAC;AACD,WAAO,EAAE,eAAe,cAAc,OAAU;AAAA,EAClD;AAAA,EAEA,MAAM,yBAAwC;AAAA,EAC9C;AAAA,EAEA,MAAM,qBAAoC;AAAA,EAC1C;AAAA,EAEA,MAAM,kBAAiC;AAAA,EACvC;AAAA,EAEA,MAAM,eAA8B;AAClC,UAAM,KAAK,SAAS,KAAK,4BAA4B;AAAA,MACnD,SAAS,KAAK,SAAS;AAAA,IACzB,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,6BAA4C;AAChD,UAAM,UAAU,KAAK,gBAAgB;AACrC,UAAM,eAAe,KAAK,MAAM,aAAa;AAC7C,QAAI,CAAC;AACH;AACF,UAAM,eAAe,aAAa;AAClC,UAAM,KAAK,SAAS,KAAK,+BAA+B;AAAA,MACtD,SAAS,KAAK,SAAS;AAAA,MACvB,UAAU;AAAA,QACR,OAAO,aAAa;AAAA,QACpB,QAAQ,aAAa;AAAA,MACvB;AAAA,MACA,kBAAkB,QAAQ,qBAAqB;AAAA,IACjD,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,4BAA2C;AAC/C,UAAM,KAAK,gBAAgB,uBAAuB,KAAK,MAAM,yBAAyB,CAAC;AAAA,EACzF;AAAA,EAEA,MAAM,gBAAgB;AAAA,EACtB;AAAA,EAEA,MAAM,wBAAwB;AAC5B,UAAM,KAAK,gBAAgB,eAAe,KAAK,gBAAgB,SAAS,eAAe;AAAA,EACzF;AAAA,EAEA,MAAM,gCAAgC;AAAA,EACtC;AAAA,EAEA,MAAM,SAAwB;AAC5B,UAAM,KAAK,SAAS,KAAK,0BAA0B;AAAA,MACjD,SAAS,KAAK,SAAS;AAAA;AAAA,MAEvB,MAAM,KAAK,gBAAgB,eAAe;AAAA,IAC5C,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,SAA2B;AAC/B,WAAO,MAAM,KAAK,SAAS,KAAK,mCAAmC;AAAA,MACjE,SAAS,KAAK,SAAS;AAAA,MACvB,OAAO;AAAA,IACT,CAAC,EAAE,KAAK,MAAM,IAAI,EAAE,MAAM,MAAM,KAAK;AAAA,EACvC;AAAA,EAEA,MAAM,YAA8B;AAClC,WAAO,MAAM,KAAK,SAAS,KAAK,mCAAmC;AAAA,MACjE,SAAS,KAAK,SAAS;AAAA,MACvB,OAAO;AAAA,IACT,CAAC,EAAE,KAAK,MAAM,IAAI,EAAE,MAAM,MAAM,KAAK;AAAA,EACvC;AAAA,EAEA,MAAM,YAA2B;AAC/B,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAAA,EAEA,MAAc,iBAAiB,OAAsC;AACnE,QAAI,MAAM,YAAY;AACpB;AACF,UAAM,cAAc,MAAM,KAAK,MAAM,0BAA0B;AAC/D,QAAI,uBAAuB;AACzB;AACF,UAAM,UAAU,KAAK,gBAAgB,IAAI,MAAM,OAAO,KAAK;AAC3D,QAAI,CAAC;AACH;AACF,QAAI,MAAM,KAAK,SAAS;AACtB;AACF,UAAM,KAAK,MAAM,gBAAgB,MAAM,KAAK,OAAO,OAAO;AAAA,EAC5D;AAAA,EAEA,MAAM,cAAc,YAAuC;AACzD,UAAM,EAAE,OAAO,IAAI,MAAM,KAAK,SAAS,KAAK,2BAA2B;AAAA;AAAA,MAErE,qBAAqB,kBAAkB,WAAW,MAAM;AAAA;AAAA,MAExD,UAAU,CAAC,KAAK,SAAS,SAAS;AAAA,IACpC,CAAC;AACD,SAAK,eAAe,IAAI,YAAY,MAAM;AAAA,EAC5C;AAAA,EAEA,MAAM,kBAAkB,aAA0C;AAChE,UAAM,MAAgB,CAAC;AACvB,eAAW,UAAU,aAAa;AAChC,YAAM,KAAK,KAAK,eAAe,IAAI,MAAM;AACzC,UAAI;AACF,YAAI,KAAK,EAAE;AACb,WAAK,eAAe,OAAO,MAAM;AAAA,IACnC;AACA,UAAM,QAAQ,IAAI,IAAI,IAAI,YAAU,KAAK,SAAS,KAAK,8BAA8B,EAAE,OAAO,CAAC,CAAC,CAAC;AAAA,EACnG;AAAA,EAEA,MAAM,UAAU,iBAAyC;AACvD,UAAM,KAAK,SAAS,KAAK,yBAAyB;AAAA,MAChD,SAAS,KAAK,SAAS;AAAA,MACvB,cAAc;AAAA,IAChB,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,mBAAmB,OAAwE;AAAA,EACjG;AAAA,EAEA,MAAM,eAAe,UAAoB,QAAgB,cAAsC,cAAsC,SAA6B,cAAuB,OAA0C;AACjO,UAAM,OAAQ,gBAAgB;AAC9B,UAAM,EAAE,KAAK,IAAI,MAAM,SAAS,KAAK,KAAK,SAAS,KAAK,qCAAqC;AAAA,MAC3F,SAAS,KAAK,SAAS;AAAA,MACvB,QAAQ;AAAA,QACN,MAAM,SAAS,WAAW,QAAQ,QAAQ,MAAM;AAAA,QAChD,SAAS,UAAU,UAAU,MAAM;AAAA,MACrC;AAAA,MACA,QAAQ,eAAe,aAAa;AAAA,MACpC,MAAM;AAAA,QACJ,MAAM;AAAA,QACN,GAAG;AAAA,MACL;AAAA,IACF,CAAC,CAAC;AACF,WAAO,OAAO,KAAK,MAAM,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,QAAyD;AAC7E,UAAM,mBAAmB,uBAAuB,OAAO,QAAQ;AAC/D,UAAM,UAAU,MAAM,iBAAiB,uBAAuB,MAAM;AACpE,QAAI,CAAC;AACH,aAAO;AACT,WAAO,KAAK,MAAM,aAAa,MAAM,OAAO;AAAA,EAC9C;AAAA,EAEA,MAAM,cAAc,QAAmD;AAErE,UAAM,eAAe,MAAM,OAAO,eAAe,UAAQ;AACvD,YAAM,MAAM,KAAK,iBAAiB;AAClC,aAAO,IAAI;AAAA,IACb,CAAC;AACD,QAAI,CAAC;AACH,aAAO;AACT,UAAM,mBAAmB,uBAAuB,OAAO,QAAQ;AAC/D,WAAO,iBAAiB,uBAAuB,YAAY;AAAA,EAC7D;AAAA,EAEA,MAAM,eAAe,QAAuD;AAC1E,UAAM,MAAM,MAAM,OAAO,SAAS,aAAW;AAC3C,UAAI,EAAE,mBAAmB;AACvB,eAAO;AACT,YAAM,OAAO,QAAQ,sBAAsB;AAC3C,aAAO,EAAE,GAAG,KAAK,GAAG,GAAG,KAAK,GAAG,OAAO,KAAK,OAAO,QAAQ,KAAK,OAAO;AAAA,IACxE,CAAC;AACD,QAAI,CAAC;AACH,aAAO;AACT,UAAM,WAAW,MAAM,KAAK,eAAe,OAAO,MAAM;AACxD,QAAI,CAAC;AACH,aAAO;AACT,QAAI,KAAK,SAAS;AAClB,QAAI,KAAK,SAAS;AAClB,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAc,eAAe,OAAkD;AAC7E,QAAI,UAAU,KAAK,MAAM,UAAU;AACjC,aAAO,EAAE,GAAG,GAAG,GAAG,EAAE;AACtB,UAAM,UAAU,MAAM,MAAM,aAAa;AACzC,UAAM,MAAM,MAAM,QAAQ,YAAY;AACtC,QAAI,CAAC;AACH,aAAO;AACT,UAAM,QAAQ,MAAM,QAAQ,kBAAkB,CAAC,CAAC,UAAU,MAAM,MAAM,SAAS,oBAAoB,MAAiB,GAAG,CAAC,CAAC,EAAE,MAAM,OAAK,oBAA6B;AACnK,QAAI,UAAU,wBAAwB,UAAU;AAC9C,aAAO;AAET,QAAI,KAAK,MAAM;AACf,QAAI,KAAK,MAAM;AACf,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,2BAA2B,QAAoC,MAAgF;AACnJ,WAAO,MAAM,OAAO,kBAAkB,CAAC,CAAC,UAAU,IAAI,MAAM;AAC1D,WAAK,eAAe;AAAA,QAClB,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ,CAAC;AAAA,IACH,GAAG,IAAI,EAAE,KAAK,MAAM,MAAe,EAAE,MAAM,OAAK;AAC9C,UAAI,aAAa,SAAS,EAAE,QAAQ,SAAS,gCAAgC;AAC3E,eAAO;AACT,UAAI,aAAa,SAAS,EAAE,QAAQ,SAAS,oCAAoC;AAC/E,eAAO;AACT,YAAM;AAAA,IACR,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,qBAAqB,SAAmF;AAAA,EAC9G;AAAA,EAEA,4BAAoC;AAClC,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,gBAAgB,QAAyF;AAC7G,UAAM,QAAQ,MAAM,OAAO,kBAAkB,CAAC,CAAC,UAAU,IAAI,MAAM;AACjE,UAAI,CAAC,KAAK;AACR,eAAO;AACT,YAAM,QAAQ,KAAK,eAAe;AAClC,UAAI,CAAC;AACH,eAAO;AACT,aAAO,CAAC,GAAG,KAAK,EAAE,IAAI,UAAQ;AAAA,QAC5B,EAAE,GAAG,KAAK,MAAM,GAAG,KAAK,IAAI;AAAA,QAC5B,EAAE,GAAG,KAAK,OAAO,GAAG,KAAK,IAAI;AAAA,QAC7B,EAAE,GAAG,KAAK,OAAO,GAAG,KAAK,OAAO;AAAA,QAChC,EAAE,GAAG,KAAK,MAAM,GAAG,KAAK,OAAO;AAAA,MACjC,CAAC;AAAA,IACH,GAAG,IAAI;AACP,QAAI,CAAC,SAAS,UAAU;AACtB,aAAO;AAET,UAAM,WAAW,MAAM,KAAK,eAAe,OAAO,MAAM;AACxD,QAAI,CAAC;AACH,aAAO;AACT,UAAM,QAAQ,UAAQ,KAAK,QAAQ,WAAS;AAC1C,YAAM,KAAK,SAAS;AACpB,YAAM,KAAK,SAAS;AAAA,IACtB,CAAC,CAAC;AACF,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,kBAAkB,QAA6C,OAAgC;AACnG,UAAM,cAAc,uBAAuB,OAAO,QAAQ;AAC1D,UAAM,KAAK,SAAS,KAAK,kBAAkB;AAAA,MACzC,SAAS,KAAK,SAAS;AAAA,MACvB,SAAS,MAAM,YAAY,uBAAuB,MAAM;AAAA,MACxD,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,mBAAmC,QAA8B,IAA8D;AACnI,UAAM,cAAc,uBAAuB,OAAO,QAAQ;AAC1D,UAAM,SAAS,MAAM,YAAY,uBAAuB,MAAM;AAC9D,UAAM,mBAAmB,uBAAuB,EAAE;AAClD,WAAO,MAAM,iBAAiB,sBAAsB,IAAI,MAAM;AAAA,EAChE;AAAA,EAEA,MAAM,qBAAqB,QAAwG;AACjI,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAAA,EAEA,MAAM,sBAAqC;AAAA,EAC3C;AAAA,EAEA,MAAM,cAAc,UAAmC;AAAA,EACvD;AAAA,EAEA,MAAM,IAAI,SAAkD;AAC1D,WAAO,KAAK,KAAK,SAAS,OAAO;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,OAAiD;AACrE,UAAM,SAAS,MAAM,YAAY;AACjC,QAAI,CAAC;AACH,YAAM,IAAI,MAAM,0BAA0B;AAC5C,UAAM,gBAAgB,MAAM,OAAO,aAAa;AAChD,UAAM,OAAO,MAAM,cAAc,eAAe,MAAM;AAAE,aAAO,CAAC,GAAG,SAAS,iBAAiB,cAAc,CAAC;AAAA,IAAG,CAAC;AAChH,UAAM,SAAS,MAAM,KAAK,SAAS,CAAAA,UAAQA,MAAK,MAAM;AACtD,QAAI,eAAe;AACnB,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,YAAM,UAAU,MAAM,KAAK,eAAe,CAACA,OAAMC,OAAMD,MAAKC,EAAC,GAAG,CAAC;AACjE,YAAM,YAAY,MAAM,QAAQ,aAAa;AAC7C,UAAI,UAAU,WAAW;AACvB,uBAAe;AACf;AAAA,MACF,OAAO;AACL,gBAAQ,QAAQ;AAAA,MAClB;AAAA,IACF;AACA,SAAK,QAAQ;AACb,QAAI,CAAC;AACH,YAAM,IAAI,MAAM,0BAA0B;AAC5C,WAAO;AAAA,EACT;AAAA,EAEA,yCAAkD;AAChD,WAAO;AAAA,EACT;AACF;AAEA,SAAS,uBAAuB,kBAAmE;AACjG,SAAO,iBAAiB;AAC1B;",
  "names": ["list", "i"]
}
