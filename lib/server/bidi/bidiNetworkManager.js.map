{
  "version": 3,
  "sources": ["../../../src/server/bidi/bidiNetworkManager.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { eventsHelper } from '../utils/eventsHelper';\nimport { parseRawCookie } from '../cookieStore';\nimport * as network from '../network';\nimport * as bidi from './third_party/bidiProtocol';\n\nimport type { RegisteredListener } from '../utils/eventsHelper';\nimport type * as frames from '../frames';\nimport type { Page } from '../page';\nimport type * as types from '../types';\nimport type { BidiSession } from './bidiConnection';\n\n\nexport class BidiNetworkManager {\n  private readonly _session: BidiSession;\n  private readonly _requests: Map<string, BidiRequest>;\n  private readonly _page: Page;\n  private readonly _eventListeners: RegisteredListener[];\n  private _userRequestInterceptionEnabled: boolean = false;\n  private _protocolRequestInterceptionEnabled: boolean = false;\n  private _credentials: types.Credentials | undefined;\n  private _attemptedAuthentications = new Set<string>();\n  private _intercepId: bidi.Network.Intercept | undefined;\n\n  constructor(bidiSession: BidiSession, page: Page) {\n    this._session = bidiSession;\n    this._requests = new Map();\n    this._page = page;\n    this._eventListeners = [\n      eventsHelper.addEventListener(bidiSession, 'network.beforeRequestSent', this._onBeforeRequestSent.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'network.responseStarted', this._onResponseStarted.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'network.responseCompleted', this._onResponseCompleted.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'network.fetchError', this._onFetchError.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'network.authRequired', this._onAuthRequired.bind(this)),\n    ];\n  }\n\n  dispose() {\n    eventsHelper.removeEventListeners(this._eventListeners);\n  }\n\n  private _onBeforeRequestSent(param: bidi.Network.BeforeRequestSentParameters) {\n    if (param.request.url.startsWith('data:'))\n      return;\n    const redirectedFrom = param.redirectCount ? (this._requests.get(param.request.request) || null) : null;\n    const frame = redirectedFrom ? redirectedFrom.request.frame() : (param.context ? this._page.frameManager.frame(param.context) : null);\n    if (!frame)\n      return;\n    if (redirectedFrom)\n      this._deleteRequest(redirectedFrom._id);\n    let route;\n    if (param.intercepts) {\n      // We do not support intercepting redirects.\n      if (redirectedFrom) {\n        let params = {};\n        if (redirectedFrom._originalRequestRoute?._alreadyContinuedHeaders)\n          params = toBidiRequestHeaders(redirectedFrom._originalRequestRoute._alreadyContinuedHeaders ?? []);\n\n        this._session.sendMayFail('network.continueRequest', {\n          request: param.request.request,\n          ...params,\n        });\n      } else {\n        route = new BidiRouteImpl(this._session, param.request.request);\n      }\n    }\n    const request = new BidiRequest(frame, redirectedFrom, param, route);\n    this._requests.set(request._id, request);\n    this._page.frameManager.requestStarted(request.request, route);\n  }\n\n  private _onResponseStarted(params: bidi.Network.ResponseStartedParameters) {\n    const request = this._requests.get(params.request.request);\n    if (!request)\n      return;\n    const getResponseBody = async () => {\n      throw new Error(`Response body is not available for requests in Bidi`);\n    };\n    const timings = params.request.timings;\n    const startTime = timings.requestTime;\n    function relativeToStart(time: number): number {\n      if (!time)\n        return -1;\n      return (time - startTime);\n    }\n    const timing: network.ResourceTiming = {\n      startTime: startTime,\n      requestStart: relativeToStart(timings.requestStart),\n      responseStart: relativeToStart(timings.responseStart),\n      domainLookupStart: relativeToStart(timings.dnsStart),\n      domainLookupEnd: relativeToStart(timings.dnsEnd),\n      connectStart: relativeToStart(timings.connectStart),\n      secureConnectionStart: relativeToStart(timings.tlsStart),\n      connectEnd: relativeToStart(timings.connectEnd),\n    };\n    const response = new network.Response(request.request, params.response.status, params.response.statusText, fromBidiHeaders(params.response.headers), timing, getResponseBody, false);\n    response._serverAddrFinished();\n    response._securityDetailsFinished();\n    // \"raw\" headers are the same as \"provisional\" headers in Bidi.\n    response.setRawResponseHeaders(null);\n    response.setResponseHeadersSize(params.response.headersSize);\n    this._page.frameManager.requestReceivedResponse(response);\n  }\n\n  private _onResponseCompleted(params: bidi.Network.ResponseCompletedParameters) {\n    const request = this._requests.get(params.request.request);\n    if (!request)\n      return;\n    const response = request.request._existingResponse()!;\n    // TODO: body size is the encoded size\n    response.setTransferSize(params.response.bodySize);\n    response.setEncodedBodySize(params.response.bodySize);\n\n    // Keep redirected requests in the map for future reference as redirectedFrom.\n    const isRedirected = response.status() >= 300 && response.status() <= 399;\n    const responseEndTime = params.request.timings.responseEnd - response.timing().startTime;\n    if (isRedirected) {\n      response._requestFinished(responseEndTime);\n    } else {\n      this._deleteRequest(request._id);\n      response._requestFinished(responseEndTime);\n    }\n    response._setHttpVersion(params.response.protocol);\n    this._page.frameManager.reportRequestFinished(request.request, response);\n\n  }\n\n  private _onFetchError(params: bidi.Network.FetchErrorParameters) {\n    const request = this._requests.get(params.request.request);\n    if (!request)\n      return;\n    this._deleteRequest(request._id);\n    const response = request.request._existingResponse();\n    if (response) {\n      response.setTransferSize(null);\n      response.setEncodedBodySize(null);\n      response._requestFinished(-1);\n    }\n    request.request._setFailureText(params.errorText);\n    // TODO: support canceled flag\n    this._page.frameManager.requestFailed(request.request, params.errorText === 'NS_BINDING_ABORTED');\n  }\n\n  private _onAuthRequired(params: bidi.Network.AuthRequiredParameters) {\n    const isBasic = params.response.authChallenges?.some(challenge => challenge.scheme.startsWith('Basic'));\n    const credentials = this._page.browserContext._options.httpCredentials;\n    if (isBasic && credentials) {\n      if (this._attemptedAuthentications.has(params.request.request)) {\n        this._session.sendMayFail('network.continueWithAuth', {\n          request: params.request.request,\n          action: 'cancel',\n        });\n      } else {\n        this._attemptedAuthentications.add(params.request.request);\n        this._session.sendMayFail('network.continueWithAuth', {\n          request: params.request.request,\n          action: 'provideCredentials',\n          credentials: {\n            type: 'password',\n            username: credentials.username,\n            password: credentials.password,\n          }\n        });\n      }\n    } else {\n      this._session.sendMayFail('network.continueWithAuth', {\n        request: params.request.request,\n        action: 'default',\n      });\n    }\n  }\n\n  _deleteRequest(requestId: string) {\n    this._requests.delete(requestId);\n    this._attemptedAuthentications.delete(requestId);\n  }\n\n  async setRequestInterception(value: boolean) {\n    this._userRequestInterceptionEnabled = value;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async setCredentials(credentials: types.Credentials | undefined) {\n    this._credentials = credentials;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async _updateProtocolRequestInterception(initial?: boolean) {\n    const enabled = this._userRequestInterceptionEnabled || !!this._credentials;\n    if (enabled === this._protocolRequestInterceptionEnabled)\n      return;\n    this._protocolRequestInterceptionEnabled = enabled;\n    if (initial && !enabled)\n      return;\n    const cachePromise = this._session.send('network.setCacheBehavior', { cacheBehavior: enabled ? 'bypass' : 'default' });\n    let interceptPromise = Promise.resolve<any>(undefined);\n    if (enabled) {\n      interceptPromise = this._session.send('network.addIntercept', {\n        phases: [bidi.Network.InterceptPhase.AuthRequired, bidi.Network.InterceptPhase.BeforeRequestSent],\n        urlPatterns: [{ type: 'pattern' }],\n        // urlPatterns: [{ type: 'string', pattern: '*' }],\n      }).then(r => {\n        this._intercepId = r.intercept;\n      });\n    } else if (this._intercepId) {\n      interceptPromise = this._session.send('network.removeIntercept', { intercept: this._intercepId });\n      this._intercepId = undefined;\n    }\n    await Promise.all([cachePromise, interceptPromise]);\n  }\n}\n\n\nclass BidiRequest {\n  readonly request: network.Request;\n  readonly _id: string;\n  private _redirectedTo: BidiRequest | undefined;\n  // Only first request in the chain can be intercepted, so this will\n  // store the first and only Route in the chain (if any).\n  _originalRequestRoute: BidiRouteImpl | undefined;\n\n  constructor(frame: frames.Frame, redirectedFrom: BidiRequest | null, payload: bidi.Network.BeforeRequestSentParameters, route: BidiRouteImpl | undefined) {\n    this._id = payload.request.request;\n    if (redirectedFrom)\n      redirectedFrom._redirectedTo = this;\n    // TODO: missing in the spec?\n    const postDataBuffer = null;\n    this.request = new network.Request(frame._page.browserContext, frame, null, redirectedFrom ? redirectedFrom.request : null, payload.navigation ?? undefined,\n        payload.request.url, 'other', payload.request.method, postDataBuffer, fromBidiHeaders(payload.request.headers));\n    // \"raw\" headers are the same as \"provisional\" headers in Bidi.\n    this.request.setRawRequestHeaders(null);\n    this.request._setBodySize(payload.request.bodySize || 0);\n    this._originalRequestRoute = route ?? redirectedFrom?._originalRequestRoute;\n    route?._setRequest(this.request);\n  }\n\n  _finalRequest(): BidiRequest {\n    let request: BidiRequest = this;\n    while (request._redirectedTo)\n      request = request._redirectedTo;\n    return request;\n  }\n}\n\nclass BidiRouteImpl implements network.RouteDelegate {\n  private _requestId: bidi.Network.Request;\n  private _session: BidiSession;\n  private _request!: network.Request;\n  _alreadyContinuedHeaders: types.HeadersArray | undefined;\n\n  constructor(session: BidiSession, requestId: bidi.Network.Request) {\n    this._session = session;\n    this._requestId = requestId;\n  }\n\n  _setRequest(request: network.Request) {\n    this._request = request;\n  }\n\n  async continue(overrides: types.NormalizedContinueOverrides) {\n    // Firefox does not update content-length header.\n    let headers = overrides.headers || this._request.headers();\n    if (overrides.postData && headers) {\n      headers = headers.map(header => {\n        if (header.name.toLowerCase() === 'content-length')\n          return { name: header.name, value: overrides.postData!.byteLength.toString() };\n        return header;\n      });\n    }\n    this._alreadyContinuedHeaders = headers;\n    await this._session.sendMayFail('network.continueRequest', {\n      request: this._requestId,\n      url: overrides.url,\n      method: overrides.method,\n      ...toBidiRequestHeaders(this._alreadyContinuedHeaders),\n      body: overrides.postData ? { type: 'base64', value: Buffer.from(overrides.postData).toString('base64') } : undefined,\n    });\n  }\n\n  async fulfill(response: types.NormalizedFulfillResponse) {\n    const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString('base64');\n    await this._session.sendMayFail('network.provideResponse', {\n      request: this._requestId,\n      statusCode: response.status,\n      reasonPhrase: network.statusText(response.status),\n      ...toBidiResponseHeaders(response.headers),\n      body: { type: 'base64', value: base64body },\n    });\n  }\n\n  async abort(errorCode: string) {\n    await this._session.sendMayFail('network.failRequest', {\n      request: this._requestId\n    });\n  }\n}\n\nfunction fromBidiHeaders(bidiHeaders: bidi.Network.Header[]): types.HeadersArray {\n  const result: types.HeadersArray = [];\n  for (const { name, value } of bidiHeaders)\n    result.push({ name, value: bidiBytesValueToString(value) });\n  return result;\n}\n\nfunction toBidiRequestHeaders(allHeaders: types.HeadersArray): { headers: bidi.Network.Header[] } {\n  const bidiHeaders = toBidiHeaders(allHeaders);\n  return { headers: bidiHeaders };\n}\n\nfunction toBidiResponseHeaders(headers: types.HeadersArray): { cookies: bidi.Network.SetCookieHeader[], headers: bidi.Network.Header[] } {\n  const setCookieHeaders = headers.filter(h => h.name.toLowerCase() === 'set-cookie');\n  const otherHeaders = headers.filter(h => h.name.toLowerCase() !== 'set-cookie');\n  const rawCookies = setCookieHeaders.map(h => parseRawCookie(h.value));\n  const cookies: bidi.Network.SetCookieHeader[] = rawCookies.filter(Boolean).map(c => {\n    return {\n      ...c!,\n      value: { type: 'string', value: c!.value },\n      sameSite: toBidiSameSite(c!.sameSite),\n    };\n  });\n  return { cookies, headers: toBidiHeaders(otherHeaders) };\n}\n\nfunction toBidiHeaders(headers: types.HeadersArray): bidi.Network.Header[] {\n  return headers.map(({ name, value }) => ({ name, value: { type: 'string', value } }));\n}\n\nexport function bidiBytesValueToString(value: bidi.Network.BytesValue): string {\n  if (value.type === 'string')\n    return value.value;\n  if (value.type === 'base64')\n    return Buffer.from(value.type, 'base64').toString('binary');\n  return 'unknown value type: ' + (value as any).type;\n\n}\n\nfunction toBidiSameSite(sameSite?: 'Strict' | 'Lax' | 'None'): bidi.Network.SameSite | undefined {\n  if (!sameSite)\n    return undefined;\n  if (sameSite === 'Strict')\n    return bidi.Network.SameSite.Strict;\n  if (sameSite === 'Lax')\n    return bidi.Network.SameSite.Lax;\n  return bidi.Network.SameSite.None;\n}\n"],
  "mappings": "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",
  "names": []
}
