{
  "version": 3,
  "sources": ["../../../src/server/bidi/bidiInput.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolveSmartModifierString } from '../input';\nimport { getBidiKeyValue } from './third_party/bidiKeyboard';\nimport * as bidi from './third_party/bidiProtocol';\n\nimport type * as input from '../input';\nimport type * as types from '../types';\nimport type { BidiSession } from './bidiConnection';\nimport type { Progress } from '../progress';\n\nexport class RawKeyboardImpl implements input.RawKeyboard {\n  private _session: BidiSession;\n\n  constructor(session: BidiSession) {\n    this._session = session;\n  }\n\n  setSession(session: BidiSession) {\n    this._session = session;\n  }\n\n  async keydown(progress: Progress, modifiers: Set<types.KeyboardModifier>, keyName: string, description: input.KeyDescription, autoRepeat: boolean): Promise<void> {\n    keyName = resolveSmartModifierString(keyName);\n    const actions: bidi.Input.KeySourceAction[] = [];\n    actions.push({ type: 'keyDown', value: getBidiKeyValue(keyName) });\n    await this._performActions(progress, actions);\n  }\n\n  async keyup(progress: Progress, modifiers: Set<types.KeyboardModifier>, keyName: string, description: input.KeyDescription): Promise<void> {\n    keyName = resolveSmartModifierString(keyName);\n    const actions: bidi.Input.KeySourceAction[] = [];\n    actions.push({ type: 'keyUp', value: getBidiKeyValue(keyName) });\n    await this._performActions(progress, actions);\n  }\n\n  async sendText(progress: Progress, text: string): Promise<void> {\n    const actions: bidi.Input.KeySourceAction[] = [];\n    for (const char of text) {\n      const value = getBidiKeyValue(char);\n      actions.push({ type: 'keyDown', value });\n      actions.push({ type: 'keyUp', value });\n    }\n    await this._performActions(progress, actions);\n  }\n\n  private async _performActions(progress: Progress, actions: bidi.Input.KeySourceAction[]) {\n    await progress.race(this._session.send('input.performActions', {\n      context: this._session.sessionId,\n      actions: [\n        {\n          type: 'key',\n          id: 'pw_keyboard',\n          actions,\n        }\n      ]\n    }));\n  }\n}\n\nexport class RawMouseImpl implements input.RawMouse {\n  private readonly _session: BidiSession;\n\n  constructor(session: BidiSession) {\n    this._session = session;\n  }\n\n  async move(progress: Progress, x: number, y: number, button: types.MouseButton | 'none', buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, forClick: boolean): Promise<void> {\n    await this._performActions(progress, [{ type: 'pointerMove', x, y }]);\n  }\n\n  async down(progress: Progress, x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void> {\n    await this._performActions(progress, [{ type: 'pointerDown', button: toBidiButton(button) }]);\n  }\n\n  async up(progress: Progress, x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void> {\n    await this._performActions(progress, [{ type: 'pointerUp', button: toBidiButton(button) }]);\n  }\n\n  async wheel(progress: Progress, x: number, y: number, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, deltaX: number, deltaY: number): Promise<void> {\n    // Bidi throws when x/y are not integers.\n    x = Math.floor(x);\n    y = Math.floor(y);\n    await progress.race(this._session.send('input.performActions', {\n      context: this._session.sessionId,\n      actions: [\n        {\n          type: 'wheel',\n          id: 'pw_mouse_wheel',\n          actions: [{ type: 'scroll', x, y, deltaX, deltaY }],\n        }\n      ]\n    }));\n  }\n\n  private async _performActions(progress: Progress, actions: bidi.Input.PointerSourceAction[]) {\n    await progress.race(this._session.send('input.performActions', {\n      context: this._session.sessionId,\n      actions: [\n        {\n          type: 'pointer',\n          id: 'pw_mouse',\n          parameters: {\n            pointerType: bidi.Input.PointerType.Mouse,\n          },\n          actions,\n        }\n      ]\n    }));\n  }\n}\n\nexport class RawTouchscreenImpl implements input.RawTouchscreen {\n  private readonly _session: BidiSession;\n\n  constructor(session: BidiSession) {\n    this._session = session;\n  }\n\n  async tap(progress: Progress, x: number, y: number, modifiers: Set<types.KeyboardModifier>) {\n  }\n}\n\nfunction toBidiButton(button: string): number {\n  switch (button) {\n    case 'left': return 0;\n    case 'right': return 2;\n    case 'middle': return 1;\n  }\n  throw new Error('Unknown button: ' + button);\n}\n"],
  "mappings": "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",
  "names": []
}
