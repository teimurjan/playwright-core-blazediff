{
  "version": 3,
  "sources": ["../../../src/server/bidi/bidiPdf.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../../utils';\n\nimport type { BidiSession } from './bidiConnection';\nimport type * as channels from '@protocol/channels';\n\nconst PagePaperFormats: { [key: string]: { width: number, height: number }} = {\n  letter: { width: 8.5, height: 11 },\n  legal: { width: 8.5, height: 14 },\n  tabloid: { width: 11, height: 17 },\n  ledger: { width: 17, height: 11 },\n  a0: { width: 33.1, height: 46.8 },\n  a1: { width: 23.4, height: 33.1 },\n  a2: { width: 16.54, height: 23.4 },\n  a3: { width: 11.7, height: 16.54 },\n  a4: { width: 8.27, height: 11.7 },\n  a5: { width: 5.83, height: 8.27 },\n  a6: { width: 4.13, height: 5.83 },\n};\n\nconst unitToPixels: { [key: string]: number } = {\n  'px': 1,\n  'in': 96,\n  'cm': 37.8,\n  'mm': 3.78\n};\n\nfunction convertPrintParameterToInches(text: string | undefined): number | undefined {\n  if (text === undefined)\n    return undefined;\n  let unit = text.substring(text.length - 2).toLowerCase();\n  let valueText = '';\n  if (unitToPixels.hasOwnProperty(unit)) {\n    valueText = text.substring(0, text.length - 2);\n  } else {\n    // In case of unknown unit try to parse the whole parameter as number of pixels.\n    // This is consistent with phantom's paperSize behavior.\n    unit = 'px';\n    valueText = text;\n  }\n  const value = Number(valueText);\n  assert(!isNaN(value), 'Failed to parse parameter value: ' + text);\n  const pixels = value * unitToPixels[unit];\n  return pixels / 96;\n}\n\nexport class BidiPDF {\n  private _session: BidiSession;\n\n  constructor(session: BidiSession) {\n    this._session = session;\n  }\n\n  async generate(options: channels.PagePdfParams): Promise<Buffer> {\n    const {\n      scale = 1,\n      printBackground = false,\n      landscape = false,\n      pageRanges = '',\n      margin = {},\n    } = options;\n\n    let paperWidth = 8.5;\n    let paperHeight = 11;\n    if (options.format) {\n      const format = PagePaperFormats[options.format.toLowerCase()];\n      assert(format, 'Unknown paper format: ' + options.format);\n      paperWidth = format.width;\n      paperHeight = format.height;\n    } else {\n      paperWidth = convertPrintParameterToInches(options.width) || paperWidth;\n      paperHeight = convertPrintParameterToInches(options.height) || paperHeight;\n    }\n\n    const { data } = await this._session.send('browsingContext.print', {\n      context: this._session.sessionId,\n      background: printBackground,\n      margin: {\n        bottom: convertPrintParameterToInches(margin.bottom) || 0,\n        left: convertPrintParameterToInches(margin.left) || 0,\n        right: convertPrintParameterToInches(margin.right) || 0,\n        top: convertPrintParameterToInches(margin.top) || 0\n      },\n      orientation: landscape ? 'landscape' : 'portrait',\n      page: {\n        width: paperWidth,\n        height: paperHeight\n      },\n      pageRanges: pageRanges ? pageRanges.split(',').map(r => r.trim()) : undefined,\n      scale,\n    });\n    return Buffer.from(data, 'base64');\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,mBAAuB;AAKvB,MAAM,mBAAwE;AAAA,EAC5E,QAAQ,EAAE,OAAO,KAAK,QAAQ,GAAG;AAAA,EACjC,OAAO,EAAE,OAAO,KAAK,QAAQ,GAAG;AAAA,EAChC,SAAS,EAAE,OAAO,IAAI,QAAQ,GAAG;AAAA,EACjC,QAAQ,EAAE,OAAO,IAAI,QAAQ,GAAG;AAAA,EAChC,IAAI,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,EAChC,IAAI,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,EAChC,IAAI,EAAE,OAAO,OAAO,QAAQ,KAAK;AAAA,EACjC,IAAI,EAAE,OAAO,MAAM,QAAQ,MAAM;AAAA,EACjC,IAAI,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,EAChC,IAAI,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,EAChC,IAAI,EAAE,OAAO,MAAM,QAAQ,KAAK;AAClC;AAEA,MAAM,eAA0C;AAAA,EAC9C,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AACR;AAEA,SAAS,8BAA8B,MAA8C;AACnF,MAAI,SAAS;AACX,WAAO;AACT,MAAI,OAAO,KAAK,UAAU,KAAK,SAAS,CAAC,EAAE,YAAY;AACvD,MAAI,YAAY;AAChB,MAAI,aAAa,eAAe,IAAI,GAAG;AACrC,gBAAY,KAAK,UAAU,GAAG,KAAK,SAAS,CAAC;AAAA,EAC/C,OAAO;AAGL,WAAO;AACP,gBAAY;AAAA,EACd;AACA,QAAM,QAAQ,OAAO,SAAS;AAC9B,2BAAO,CAAC,MAAM,KAAK,GAAG,sCAAsC,IAAI;AAChE,QAAM,SAAS,QAAQ,aAAa,IAAI;AACxC,SAAO,SAAS;AAClB;AAEO,MAAM,QAAQ;AAAA,EAGnB,YAAY,SAAsB;AAChC,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,MAAM,SAAS,SAAkD;AAC/D,UAAM;AAAA,MACJ,QAAQ;AAAA,MACR,kBAAkB;AAAA,MAClB,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,SAAS,CAAC;AAAA,IACZ,IAAI;AAEJ,QAAI,aAAa;AACjB,QAAI,cAAc;AAClB,QAAI,QAAQ,QAAQ;AAClB,YAAM,SAAS,iBAAiB,QAAQ,OAAO,YAAY,CAAC;AAC5D,+BAAO,QAAQ,2BAA2B,QAAQ,MAAM;AACxD,mBAAa,OAAO;AACpB,oBAAc,OAAO;AAAA,IACvB,OAAO;AACL,mBAAa,8BAA8B,QAAQ,KAAK,KAAK;AAC7D,oBAAc,8BAA8B,QAAQ,MAAM,KAAK;AAAA,IACjE;AAEA,UAAM,EAAE,KAAK,IAAI,MAAM,KAAK,SAAS,KAAK,yBAAyB;AAAA,MACjE,SAAS,KAAK,SAAS;AAAA,MACvB,YAAY;AAAA,MACZ,QAAQ;AAAA,QACN,QAAQ,8BAA8B,OAAO,MAAM,KAAK;AAAA,QACxD,MAAM,8BAA8B,OAAO,IAAI,KAAK;AAAA,QACpD,OAAO,8BAA8B,OAAO,KAAK,KAAK;AAAA,QACtD,KAAK,8BAA8B,OAAO,GAAG,KAAK;AAAA,MACpD;AAAA,MACA,aAAa,YAAY,cAAc;AAAA,MACvC,MAAM;AAAA,QACJ,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,MACA,YAAY,aAAa,WAAW,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC,IAAI;AAAA,MACpE;AAAA,IACF,CAAC;AACD,WAAO,OAAO,KAAK,MAAM,QAAQ;AAAA,EACnC;AACF;",
  "names": []
}
