{
  "version": 3,
  "sources": ["../../../src/server/android/android.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport { PipeTransport } from '../utils/pipeTransport';\nimport { createGuid } from '../utils/crypto';\nimport { isUnderTest } from '../utils/debug';\nimport { getPackageManagerExecCommand } from '../utils/env';\nimport { makeWaitForNextTask } from '../utils/task';\nimport { RecentLogsCollector } from '../utils/debugLogger';\nimport { debug } from '../../utilsBundle';\nimport { wsReceiver, wsSender } from '../../utilsBundle';\nimport { validateBrowserContextOptions } from '../browserContext';\nimport { chromiumSwitches } from '../chromium/chromiumSwitches';\nimport { CRBrowser } from '../chromium/crBrowser';\nimport { removeFolders } from '../utils/fileUtils';\nimport { helper } from '../helper';\nimport { SdkObject } from '../instrumentation';\nimport { gracefullyCloseSet } from '../utils/processLauncher';\nimport { isAbortError, Progress, ProgressController, raceUncancellableOperationWithCleanup } from '../progress';\nimport { registry } from '../registry';\n\nimport type { BrowserOptions, BrowserProcess } from '../browser';\nimport type { BrowserContext } from '../browserContext';\nimport type * as types from '../types';\nimport type * as channels from '@protocol/channels';\nimport type * as stream from 'stream';\n\nconst ARTIFACTS_FOLDER = path.join(os.tmpdir(), 'playwright-artifacts-');\n\nexport interface Backend {\n  devices(options: channels.AndroidDevicesOptions): Promise<DeviceBackend[]>;\n}\n\nexport interface DeviceBackend {\n  serial: string;\n  status: string;\n  close(): Promise<void>;\n  init(): Promise<void>;\n  runCommand(command: string): Promise<Buffer>;\n  open(command: string): Promise<SocketBackend>;\n}\n\nexport interface SocketBackend extends EventEmitter {\n  write(data: Buffer): Promise<void>;\n  close(): void;\n}\n\nexport class Android extends SdkObject {\n  private _backend: Backend;\n  private _devices = new Map<string, AndroidDevice>();\n\n  constructor(parent: SdkObject, backend: Backend) {\n    super(parent, 'android');\n    this._backend = backend;\n  }\n\n  async devices(progress: Progress, options: channels.AndroidDevicesOptions): Promise<AndroidDevice[]> {\n    const devices = (await progress.race(this._backend.devices(options))).filter(d => d.status === 'device');\n    const newSerials = new Set<string>();\n    for (const d of devices) {\n      newSerials.add(d.serial);\n      if (this._devices.has(d.serial))\n        continue;\n      await progress.race(AndroidDevice.create(this, d, options).then(device => this._devices.set(d.serial, device)));\n    }\n    for (const d of this._devices.keys()) {\n      if (!newSerials.has(d))\n        this._devices.delete(d);\n    }\n    return [...this._devices.values()];\n  }\n\n  _deviceClosed(device: AndroidDevice) {\n    this._devices.delete(device.serial);\n  }\n}\n\nexport class AndroidDevice extends SdkObject {\n  readonly _backend: DeviceBackend;\n  readonly model: string;\n  readonly serial: string;\n  private _options: channels.AndroidDevicesOptions;\n  private _driverPromise: Promise<PipeTransport> | undefined;\n  private _lastId = 0;\n  private _callbacks = new Map<number, { fulfill: (result: any) => void, reject: (error: Error) => void }>();\n  private _pollingWebViews: NodeJS.Timeout | undefined;\n  private _webViews = new Map<string, channels.AndroidWebView>();\n\n  static Events = {\n    WebViewAdded: 'webViewAdded',\n    WebViewRemoved: 'webViewRemoved',\n    Close: 'close',\n  };\n\n  private _browserConnections = new Set<AndroidBrowser>();\n  readonly _android: Android;\n  private _isClosed = false;\n\n  constructor(android: Android, backend: DeviceBackend, model: string, options: channels.AndroidDevicesOptions) {\n    super(android, 'android-device');\n    this._android = android;\n    this._backend = backend;\n    this.model = model;\n    this.serial = backend.serial;\n    this._options = options;\n    this.logName = 'browser';\n  }\n\n  static async create(android: Android, backend: DeviceBackend, options: channels.AndroidDevicesOptions): Promise<AndroidDevice> {\n    await backend.init();\n    const model = await backend.runCommand('shell:getprop ro.product.model');\n    const device = new AndroidDevice(android, backend, model.toString().trim(), options);\n    await device._init();\n    return device;\n  }\n\n  async _init() {\n    await this._refreshWebViews();\n    const poll = () => {\n      this._pollingWebViews = setTimeout(() => this._refreshWebViews()\n          .then(poll)\n          .catch(() => {\n            this.close().catch(() => {});\n          }), 500);\n    };\n    poll();\n  }\n\n  async shell(command: string): Promise<Buffer> {\n    const result = await this._backend.runCommand(`shell:${command}`);\n    await this._refreshWebViews();\n    return result;\n  }\n\n  async open(progress: Progress, command: string): Promise<SocketBackend> {\n    return await this._open(progress, command);\n  }\n\n  async screenshot(): Promise<Buffer> {\n    return await this._backend.runCommand(`shell:screencap -p`);\n  }\n\n  private async _driver(): Promise<PipeTransport | undefined> {\n    if (this._isClosed)\n      return;\n    if (!this._driverPromise) {\n      const controller = new ProgressController();\n      this._driverPromise = controller.run(progress => this._installDriver(progress));\n    }\n    return this._driverPromise;\n  }\n\n  private async _installDriver(progress: Progress): Promise<PipeTransport> {\n    debug('pw:android')('Stopping the old driver');\n    await progress.race(this.shell(`am force-stop com.microsoft.playwright.androiddriver`));\n\n    // uninstall and install driver on every execution\n    if (!this._options.omitDriverInstall) {\n      debug('pw:android')('Uninstalling the old driver');\n      await progress.race(this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver`));\n      await progress.race(this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver.test`));\n\n      debug('pw:android')('Installing the new driver');\n      const executable = registry.findExecutable('android')!;\n      const packageManagerCommand = getPackageManagerExecCommand();\n      for (const file of ['android-driver.apk', 'android-driver-target.apk']) {\n        const fullName = path.join(executable.directory!, file);\n        if (!fs.existsSync(fullName))\n          throw new Error(`Please install Android driver apk using '${packageManagerCommand} playwright install android'`);\n        await this.installApk(progress, await progress.race(fs.promises.readFile(fullName)));\n      }\n    } else {\n      debug('pw:android')('Skipping the driver installation');\n    }\n\n    debug('pw:android')('Starting the new driver');\n    this.shell('am instrument -w com.microsoft.playwright.androiddriver.test/androidx.test.runner.AndroidJUnitRunner').catch(e => debug('pw:android')(e));\n    const socket = await this._waitForLocalAbstract(progress, 'playwright_android_driver_socket');\n    const transport = new PipeTransport(socket, socket, socket, 'be');\n    transport.onmessage = message => {\n      const response = JSON.parse(message);\n      const { id, result, error } = response;\n      const callback = this._callbacks.get(id);\n      if (!callback)\n        return;\n      if (error)\n        callback.reject(new Error(error));\n      else\n        callback.fulfill(result);\n      this._callbacks.delete(id);\n    };\n    return transport;\n  }\n\n  private async _waitForLocalAbstract(progress: Progress, socketName: string): Promise<SocketBackend> {\n    let socket: SocketBackend | undefined;\n    debug('pw:android')(`Polling the socket localabstract:${socketName}`);\n    while (!socket) {\n      try {\n        socket = await this._open(progress, `localabstract:${socketName}`);\n      } catch (e) {\n        if (isAbortError(e))\n          throw e;\n        await progress.wait(250);\n      }\n    }\n    debug('pw:android')(`Connected to localabstract:${socketName}`);\n    return socket;\n  }\n\n  async send(method: string, params: any = {}): Promise<any> {\n    params = {\n      ...params,\n      // Patch the timeout in, just in case it's missing in one of the commands.\n      timeout: params.timeout || 0,\n    };\n    if (params.androidSelector) {\n      params.selector = params.androidSelector;\n      delete params.androidSelector;\n    }\n    const driver = await this._driver();\n    if (!driver)\n      throw new Error('Device is closed');\n    const id = ++this._lastId;\n    const result = new Promise((fulfill, reject) => this._callbacks.set(id, { fulfill, reject }));\n    driver.send(JSON.stringify({ id, method, params }));\n    return result;\n  }\n\n  async close() {\n    if (this._isClosed)\n      return;\n    this._isClosed = true;\n    if (this._pollingWebViews)\n      clearTimeout(this._pollingWebViews);\n    for (const connection of this._browserConnections)\n      await connection.close();\n    if (this._driverPromise) {\n      const driver = await this._driver();\n      driver?.close();\n    }\n    await this._backend.close();\n    this._android._deviceClosed(this);\n    this.emit(AndroidDevice.Events.Close);\n  }\n\n  async launchBrowser(progress: Progress, pkg: string = 'com.android.chrome', options: channels.AndroidDeviceLaunchBrowserParams): Promise<BrowserContext> {\n    debug('pw:android')('Force-stopping', pkg);\n    await this._backend.runCommand(`shell:am force-stop ${pkg}`);\n    const socketName = isUnderTest() ? 'webview_devtools_remote_playwright_test' : ('playwright_' + createGuid() + '_devtools_remote');\n    const commandLine = this._defaultArgs(options, socketName).join(' ');\n    debug('pw:android')('Starting', pkg, commandLine);\n    // encode commandLine to base64 to avoid issues (bash encoding) with special characters\n    await progress.race(this._backend.runCommand(`shell:echo \"${Buffer.from(commandLine).toString('base64')}\" | base64 -d > /data/local/tmp/chrome-command-line`));\n    await progress.race(this._backend.runCommand(`shell:am start -a android.intent.action.VIEW -d about:blank ${pkg}`));\n    const browserContext = await this._connectToBrowser(progress, socketName, options);\n    try {\n      await progress.race(this._backend.runCommand(`shell:rm /data/local/tmp/chrome-command-line`));\n      return browserContext;\n    } catch (error) {\n      await browserContext.close({ reason: 'Failed to launch' }).catch(() => {});\n      throw error;\n    }\n  }\n\n  private _defaultArgs(options: channels.AndroidDeviceLaunchBrowserParams, socketName: string): string[] {\n    const chromeArguments = [\n      '_',\n      '--disable-fre',\n      '--no-default-browser-check',\n      `--remote-debugging-socket-name=${socketName}`,\n      ...chromiumSwitches(),\n      ...this._innerDefaultArgs(options)\n    ];\n    return chromeArguments;\n  }\n\n  private _innerDefaultArgs(options: channels.AndroidDeviceLaunchBrowserParams): string[] {\n    const { args = [], proxy } = options;\n    const chromeArguments = [];\n    if (proxy) {\n      chromeArguments.push(`--proxy-server=${proxy.server}`);\n      const proxyBypassRules = [];\n      if (proxy.bypass)\n        proxyBypassRules.push(...proxy.bypass.split(',').map(t => t.trim()).map(t => t.startsWith('.') ? '*' + t : t));\n      if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes('<-loopback>'))\n        proxyBypassRules.push('<-loopback>');\n      if (proxyBypassRules.length > 0)\n        chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(';')}`);\n    }\n    chromeArguments.push(...args);\n    return chromeArguments;\n  }\n\n  async connectToWebView(progress: Progress, socketName: string): Promise<BrowserContext> {\n    const webView = this._webViews.get(socketName);\n    if (!webView)\n      throw new Error('WebView has been closed');\n    return await this._connectToBrowser(progress, socketName);\n  }\n\n  private async _connectToBrowser(progress: Progress, socketName: string, options: types.BrowserContextOptions = {}): Promise<BrowserContext> {\n    const socket = await this._waitForLocalAbstract(progress, socketName);\n    try {\n      const androidBrowser = new AndroidBrowser(this, socket);\n      await progress.race(androidBrowser._init());\n      this._browserConnections.add(androidBrowser);\n\n      const artifactsDir = await progress.race(fs.promises.mkdtemp(ARTIFACTS_FOLDER));\n      const cleanupArtifactsDir = async () => {\n        const errors = (await removeFolders([artifactsDir])).filter(Boolean);\n        for (let i = 0; i < (errors || []).length; ++i)\n          debug('pw:android')(`exception while removing ${artifactsDir}: ${errors[i]}`);\n      };\n      gracefullyCloseSet.add(cleanupArtifactsDir);\n      socket.on('close', async () => {\n        gracefullyCloseSet.delete(cleanupArtifactsDir);\n        cleanupArtifactsDir().catch(e => debug('pw:android')(`could not cleanup artifacts dir: ${e}`));\n      });\n      const browserOptions: BrowserOptions = {\n        name: 'clank',\n        isChromium: true,\n        slowMo: 0,\n        persistent: { ...options, noDefaultViewport: true },\n        artifactsDir,\n        downloadsPath: artifactsDir,\n        tracesDir: artifactsDir,\n        browserProcess: new ClankBrowserProcess(androidBrowser),\n        proxy: options.proxy,\n        protocolLogger: helper.debugProtocolLogger(),\n        browserLogsCollector: new RecentLogsCollector(),\n        originalLaunchOptions: {},\n      };\n      validateBrowserContextOptions(options, browserOptions);\n\n      const browser = await progress.race(CRBrowser.connect(this.attribution.playwright, androidBrowser, browserOptions));\n      const defaultContext = browser._defaultContext!;\n      await defaultContext._loadDefaultContextAsIs(progress);\n      return defaultContext;\n    } catch (error) {\n      socket.close();\n      throw error;\n    }\n  }\n\n  private _open(progress: Progress, command: string): Promise<SocketBackend> {\n    return raceUncancellableOperationWithCleanup(progress, () => this._backend.open(command), socket => socket.close());\n  }\n\n  webViews(): channels.AndroidWebView[] {\n    return [...this._webViews.values()];\n  }\n\n  async installApk(progress: Progress, content: Buffer, options?: { args?: string[] }): Promise<void> {\n    const args = options && options.args ? options.args : ['-r', '-t', '-S'];\n    debug('pw:android')('Opening install socket');\n    const installSocket = await this._open(progress, `shell:cmd package install ${args.join(' ')} ${content.length}`);\n    debug('pw:android')('Writing driver bytes: ' + content.length);\n    await progress.race(installSocket.write(content));\n    const success = await progress.race(new Promise(f => installSocket.on('data', f)));\n    debug('pw:android')('Written driver bytes: ' + success);\n    installSocket.close();\n  }\n\n  async push(progress: Progress, content: Buffer, path: string, mode = 0o644): Promise<void> {\n    const socket = await this._open(progress, `sync:`);\n    const sendHeader = async (command: string, length: number) => {\n      const buffer = Buffer.alloc(command.length + 4);\n      buffer.write(command, 0);\n      buffer.writeUInt32LE(length, command.length);\n      await progress.race(socket.write(buffer));\n    };\n    const send = async (command: string, data: Buffer) => {\n      await sendHeader(command, data.length);\n      await progress.race(socket.write(data));\n    };\n    await send('SEND', Buffer.from(`${path},${mode}`));\n    const maxChunk = 65535;\n    for (let i = 0; i < content.length; i += maxChunk)\n      await send('DATA', content.slice(i, i + maxChunk));\n    await sendHeader('DONE', (Date.now() / 1000) | 0);\n    const result = await progress.race(new Promise<Buffer>(f => socket.once('data', f)));\n    const code = result.slice(0, 4).toString();\n    if (code !== 'OKAY')\n      throw new Error('Could not push: ' + code);\n    socket.close();\n  }\n\n  private async _refreshWebViews() {\n    // possible socketName, eg: webview_devtools_remote_32327, webview_devtools_remote_32327_zeus, webview_devtools_remote_zeus\n    const sockets = (await this._backend.runCommand(`shell:cat /proc/net/unix | grep webview_devtools_remote`)).toString().split('\\n');\n    if (this._isClosed)\n      return;\n\n    const socketNames = new Set<string>();\n    for (const line of sockets) {\n      const matchSocketName = line.match(/[^@]+@(.*?webview_devtools_remote_?.*)/);\n      if (!matchSocketName)\n        continue;\n\n      const socketName = matchSocketName[1];\n      socketNames.add(socketName);\n      if (this._webViews.has(socketName))\n        continue;\n\n      // possible line: 0000000000000000: 00000002 00000000 00010000 0001 01 5841881 @webview_devtools_remote_zeus\n      // the result: match[1] = ''\n      const match = line.match(/[^@]+@.*?webview_devtools_remote_?(\\d*)/);\n      let pid = -1;\n      if (match && match[1])\n        pid = +match[1];\n\n      const pkg = await this._extractPkg(pid);\n      if (this._isClosed)\n        return;\n\n      const webView = { pid, pkg, socketName };\n      this._webViews.set(socketName, webView);\n      this.emit(AndroidDevice.Events.WebViewAdded, webView);\n    }\n    for (const p of this._webViews.keys()) {\n      if (!socketNames.has(p)) {\n        this._webViews.delete(p);\n        this.emit(AndroidDevice.Events.WebViewRemoved, p);\n      }\n    }\n  }\n\n  private async _extractPkg(pid: number) {\n    let pkg = '';\n    if (pid === -1)\n      return pkg;\n\n    const procs = (await this._backend.runCommand(`shell:ps -A | grep ${pid}`)).toString().split('\\n');\n    for (const proc of procs) {\n      const match = proc.match(/[^\\s]+\\s+(\\d+).*$/);\n      if (!match)\n        continue;\n      pkg = proc.substring(proc.lastIndexOf(' ') + 1);\n    }\n    return pkg;\n  }\n}\n\nclass AndroidBrowser extends EventEmitter {\n  readonly device: AndroidDevice;\n  private _socket: SocketBackend;\n  private _receiver: stream.Writable;\n  private _waitForNextTask = makeWaitForNextTask();\n  onmessage?: (message: any) => void;\n  onclose?: () => void;\n\n  constructor(device: AndroidDevice, socket: SocketBackend) {\n    super();\n    this.setMaxListeners(0);\n    this.device = device;\n    this._socket = socket;\n    this._socket.on('close', () => {\n      this._waitForNextTask(() => {\n        if (this.onclose)\n          this.onclose();\n      });\n    });\n    this._receiver = new wsReceiver() as stream.Writable;\n    this._receiver.on('message', message => {\n      this._waitForNextTask(() => {\n        if (this.onmessage)\n          this.onmessage(JSON.parse(message));\n      });\n    });\n  }\n\n  async _init() {\n    await this._socket.write(Buffer.from(`GET /devtools/browser HTTP/1.1\\r\nUpgrade: WebSocket\\r\nConnection: Upgrade\\r\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\\r\nSec-WebSocket-Version: 13\\r\n\\r\n`));\n    // HTTP Upgrade response.\n    await new Promise(f => this._socket!.once('data', f));\n\n    // Start sending web frame to receiver.\n    this._socket.on('data', data => this._receiver._write(data, 'binary', () => {}));\n  }\n\n  async send(s: any) {\n    await this._socket!.write(encodeWebFrame(JSON.stringify(s)));\n  }\n\n  async close() {\n    this._socket!.close();\n  }\n}\n\nfunction encodeWebFrame(data: string): Buffer {\n  return wsSender.frame(Buffer.from(data), {\n    opcode: 1,\n    mask: true,\n    fin: true,\n    readOnly: true\n  })[0];\n}\n\nclass ClankBrowserProcess implements BrowserProcess {\n  private _browser: AndroidBrowser;\n\n  constructor(browser: AndroidBrowser) {\n    this._browser = browser;\n  }\n\n  onclose: ((exitCode: number | null, signal: string | null) => void) | undefined;\n\n  async kill(): Promise<void> {\n  }\n\n  async close(): Promise<void> {\n    await this._browser.close();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,oBAA6B;AAC7B,gBAAe;AACf,gBAAe;AACf,kBAAiB;AAEjB,2BAA8B;AAC9B,oBAA2B;AAC3B,mBAA4B;AAC5B,iBAA6C;AAC7C,kBAAoC;AACpC,yBAAoC;AACpC,yBAAsB;AACtB,IAAAA,sBAAqC;AACrC,4BAA8C;AAC9C,8BAAiC;AACjC,uBAA0B;AAC1B,uBAA8B;AAC9B,oBAAuB;AACvB,6BAA0B;AAC1B,6BAAmC;AACnC,sBAAkG;AAClG,sBAAyB;AAQzB,MAAM,mBAAmB,YAAAC,QAAK,KAAK,UAAAC,QAAG,OAAO,GAAG,uBAAuB;AAoBhE,MAAM,gBAAgB,iCAAU;AAAA,EAIrC,YAAY,QAAmB,SAAkB;AAC/C,UAAM,QAAQ,SAAS;AAHzB,SAAQ,WAAW,oBAAI,IAA2B;AAIhD,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,MAAM,QAAQ,UAAoB,SAAmE;AACnG,UAAM,WAAW,MAAM,SAAS,KAAK,KAAK,SAAS,QAAQ,OAAO,CAAC,GAAG,OAAO,OAAK,EAAE,WAAW,QAAQ;AACvG,UAAM,aAAa,oBAAI,IAAY;AACnC,eAAW,KAAK,SAAS;AACvB,iBAAW,IAAI,EAAE,MAAM;AACvB,UAAI,KAAK,SAAS,IAAI,EAAE,MAAM;AAC5B;AACF,YAAM,SAAS,KAAK,cAAc,OAAO,MAAM,GAAG,OAAO,EAAE,KAAK,YAAU,KAAK,SAAS,IAAI,EAAE,QAAQ,MAAM,CAAC,CAAC;AAAA,IAChH;AACA,eAAW,KAAK,KAAK,SAAS,KAAK,GAAG;AACpC,UAAI,CAAC,WAAW,IAAI,CAAC;AACnB,aAAK,SAAS,OAAO,CAAC;AAAA,IAC1B;AACA,WAAO,CAAC,GAAG,KAAK,SAAS,OAAO,CAAC;AAAA,EACnC;AAAA,EAEA,cAAc,QAAuB;AACnC,SAAK,SAAS,OAAO,OAAO,MAAM;AAAA,EACpC;AACF;AAEO,MAAM,sBAAsB,iCAAU;AAAA,EAqB3C,YAAY,SAAkB,SAAwB,OAAe,SAAyC;AAC5G,UAAM,SAAS,gBAAgB;AAhBjC,SAAQ,UAAU;AAClB,SAAQ,aAAa,oBAAI,IAAgF;AAEzG,SAAQ,YAAY,oBAAI,IAAqC;AAQ7D,SAAQ,sBAAsB,oBAAI,IAAoB;AAEtD,SAAQ,YAAY;AAIlB,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,SAAS,QAAQ;AACtB,SAAK,WAAW;AAChB,SAAK,UAAU;AAAA,EACjB;AAAA,EAlBA;AAAA,SAAO,SAAS;AAAA,MACd,cAAc;AAAA,MACd,gBAAgB;AAAA,MAChB,OAAO;AAAA,IACT;AAAA;AAAA,EAgBA,aAAa,OAAO,SAAkB,SAAwB,SAAiE;AAC7H,UAAM,QAAQ,KAAK;AACnB,UAAM,QAAQ,MAAM,QAAQ,WAAW,gCAAgC;AACvE,UAAM,SAAS,IAAI,cAAc,SAAS,SAAS,MAAM,SAAS,EAAE,KAAK,GAAG,OAAO;AACnF,UAAM,OAAO,MAAM;AACnB,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,QAAQ;AACZ,UAAM,KAAK,iBAAiB;AAC5B,UAAM,OAAO,MAAM;AACjB,WAAK,mBAAmB,WAAW,MAAM,KAAK,iBAAiB,EAC1D,KAAK,IAAI,EACT,MAAM,MAAM;AACX,aAAK,MAAM,EAAE,MAAM,MAAM;AAAA,QAAC,CAAC;AAAA,MAC7B,CAAC,GAAG,GAAG;AAAA,IACb;AACA,SAAK;AAAA,EACP;AAAA,EAEA,MAAM,MAAM,SAAkC;AAC5C,UAAM,SAAS,MAAM,KAAK,SAAS,WAAW,SAAS,OAAO,EAAE;AAChE,UAAM,KAAK,iBAAiB;AAC5B,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,KAAK,UAAoB,SAAyC;AACtE,WAAO,MAAM,KAAK,MAAM,UAAU,OAAO;AAAA,EAC3C;AAAA,EAEA,MAAM,aAA8B;AAClC,WAAO,MAAM,KAAK,SAAS,WAAW,oBAAoB;AAAA,EAC5D;AAAA,EAEA,MAAc,UAA8C;AAC1D,QAAI,KAAK;AACP;AACF,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,aAAa,IAAI,mCAAmB;AAC1C,WAAK,iBAAiB,WAAW,IAAI,cAAY,KAAK,eAAe,QAAQ,CAAC;AAAA,IAChF;AACA,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAc,eAAe,UAA4C;AACvE,kCAAM,YAAY,EAAE,yBAAyB;AAC7C,UAAM,SAAS,KAAK,KAAK,MAAM,sDAAsD,CAAC;AAGtF,QAAI,CAAC,KAAK,SAAS,mBAAmB;AACpC,oCAAM,YAAY,EAAE,6BAA6B;AACjD,YAAM,SAAS,KAAK,KAAK,MAAM,8DAA8D,CAAC;AAC9F,YAAM,SAAS,KAAK,KAAK,MAAM,mEAAmE,CAAC;AAEnG,oCAAM,YAAY,EAAE,2BAA2B;AAC/C,YAAM,aAAa,yBAAS,eAAe,SAAS;AACpD,YAAM,4BAAwB,yCAA6B;AAC3D,iBAAW,QAAQ,CAAC,sBAAsB,2BAA2B,GAAG;AACtE,cAAM,WAAW,YAAAD,QAAK,KAAK,WAAW,WAAY,IAAI;AACtD,YAAI,CAAC,UAAAE,QAAG,WAAW,QAAQ;AACzB,gBAAM,IAAI,MAAM,4CAA4C,qBAAqB,8BAA8B;AACjH,cAAM,KAAK,WAAW,UAAU,MAAM,SAAS,KAAK,UAAAA,QAAG,SAAS,SAAS,QAAQ,CAAC,CAAC;AAAA,MACrF;AAAA,IACF,OAAO;AACL,oCAAM,YAAY,EAAE,kCAAkC;AAAA,IACxD;AAEA,kCAAM,YAAY,EAAE,yBAAyB;AAC7C,SAAK,MAAM,sGAAsG,EAAE,MAAM,WAAK,0BAAM,YAAY,EAAE,CAAC,CAAC;AACpJ,UAAM,SAAS,MAAM,KAAK,sBAAsB,UAAU,kCAAkC;AAC5F,UAAM,YAAY,IAAI,mCAAc,QAAQ,QAAQ,QAAQ,IAAI;AAChE,cAAU,YAAY,aAAW;AAC/B,YAAM,WAAW,KAAK,MAAM,OAAO;AACnC,YAAM,EAAE,IAAI,QAAQ,MAAM,IAAI;AAC9B,YAAM,WAAW,KAAK,WAAW,IAAI,EAAE;AACvC,UAAI,CAAC;AACH;AACF,UAAI;AACF,iBAAS,OAAO,IAAI,MAAM,KAAK,CAAC;AAAA;AAEhC,iBAAS,QAAQ,MAAM;AACzB,WAAK,WAAW,OAAO,EAAE;AAAA,IAC3B;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,sBAAsB,UAAoB,YAA4C;AAClG,QAAI;AACJ,kCAAM,YAAY,EAAE,oCAAoC,UAAU,EAAE;AACpE,WAAO,CAAC,QAAQ;AACd,UAAI;AACF,iBAAS,MAAM,KAAK,MAAM,UAAU,iBAAiB,UAAU,EAAE;AAAA,MACnE,SAAS,GAAG;AACV,gBAAI,8BAAa,CAAC;AAChB,gBAAM;AACR,cAAM,SAAS,KAAK,GAAG;AAAA,MACzB;AAAA,IACF;AACA,kCAAM,YAAY,EAAE,8BAA8B,UAAU,EAAE;AAC9D,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,KAAK,QAAgB,SAAc,CAAC,GAAiB;AACzD,aAAS;AAAA,MACP,GAAG;AAAA;AAAA,MAEH,SAAS,OAAO,WAAW;AAAA,IAC7B;AACA,QAAI,OAAO,iBAAiB;AAC1B,aAAO,WAAW,OAAO;AACzB,aAAO,OAAO;AAAA,IAChB;AACA,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,QAAI,CAAC;AACH,YAAM,IAAI,MAAM,kBAAkB;AACpC,UAAM,KAAK,EAAE,KAAK;AAClB,UAAM,SAAS,IAAI,QAAQ,CAAC,SAAS,WAAW,KAAK,WAAW,IAAI,IAAI,EAAE,SAAS,OAAO,CAAC,CAAC;AAC5F,WAAO,KAAK,KAAK,UAAU,EAAE,IAAI,QAAQ,OAAO,CAAC,CAAC;AAClD,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,QAAQ;AACZ,QAAI,KAAK;AACP;AACF,SAAK,YAAY;AACjB,QAAI,KAAK;AACP,mBAAa,KAAK,gBAAgB;AACpC,eAAW,cAAc,KAAK;AAC5B,YAAM,WAAW,MAAM;AACzB,QAAI,KAAK,gBAAgB;AACvB,YAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,cAAQ,MAAM;AAAA,IAChB;AACA,UAAM,KAAK,SAAS,MAAM;AAC1B,SAAK,SAAS,cAAc,IAAI;AAChC,SAAK,KAAK,cAAc,OAAO,KAAK;AAAA,EACtC;AAAA,EAEA,MAAM,cAAc,UAAoB,MAAc,sBAAsB,SAA6E;AACvJ,kCAAM,YAAY,EAAE,kBAAkB,GAAG;AACzC,UAAM,KAAK,SAAS,WAAW,uBAAuB,GAAG,EAAE;AAC3D,UAAM,iBAAa,0BAAY,IAAI,4CAA6C,oBAAgB,0BAAW,IAAI;AAC/G,UAAM,cAAc,KAAK,aAAa,SAAS,UAAU,EAAE,KAAK,GAAG;AACnE,kCAAM,YAAY,EAAE,YAAY,KAAK,WAAW;AAEhD,UAAM,SAAS,KAAK,KAAK,SAAS,WAAW,eAAe,OAAO,KAAK,WAAW,EAAE,SAAS,QAAQ,CAAC,qDAAqD,CAAC;AAC7J,UAAM,SAAS,KAAK,KAAK,SAAS,WAAW,+DAA+D,GAAG,EAAE,CAAC;AAClH,UAAM,iBAAiB,MAAM,KAAK,kBAAkB,UAAU,YAAY,OAAO;AACjF,QAAI;AACF,YAAM,SAAS,KAAK,KAAK,SAAS,WAAW,8CAA8C,CAAC;AAC5F,aAAO;AAAA,IACT,SAAS,OAAO;AACd,YAAM,eAAe,MAAM,EAAE,QAAQ,mBAAmB,CAAC,EAAE,MAAM,MAAM;AAAA,MAAC,CAAC;AACzE,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEQ,aAAa,SAAoD,YAA8B;AACrG,UAAM,kBAAkB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA,kCAAkC,UAAU;AAAA,MAC5C,OAAG,0CAAiB;AAAA,MACpB,GAAG,KAAK,kBAAkB,OAAO;AAAA,IACnC;AACA,WAAO;AAAA,EACT;AAAA,EAEQ,kBAAkB,SAA8D;AACtF,UAAM,EAAE,OAAO,CAAC,GAAG,MAAM,IAAI;AAC7B,UAAM,kBAAkB,CAAC;AACzB,QAAI,OAAO;AACT,sBAAgB,KAAK,kBAAkB,MAAM,MAAM,EAAE;AACrD,YAAM,mBAAmB,CAAC;AAC1B,UAAI,MAAM;AACR,yBAAiB,KAAK,GAAG,MAAM,OAAO,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC,EAAE,IAAI,OAAK,EAAE,WAAW,GAAG,IAAI,MAAM,IAAI,CAAC,CAAC;AAC/G,UAAI,CAAC,QAAQ,IAAI,uDAAuD,CAAC,iBAAiB,SAAS,aAAa;AAC9G,yBAAiB,KAAK,aAAa;AACrC,UAAI,iBAAiB,SAAS;AAC5B,wBAAgB,KAAK,uBAAuB,iBAAiB,KAAK,GAAG,CAAC,EAAE;AAAA,IAC5E;AACA,oBAAgB,KAAK,GAAG,IAAI;AAC5B,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,iBAAiB,UAAoB,YAA6C;AACtF,UAAM,UAAU,KAAK,UAAU,IAAI,UAAU;AAC7C,QAAI,CAAC;AACH,YAAM,IAAI,MAAM,yBAAyB;AAC3C,WAAO,MAAM,KAAK,kBAAkB,UAAU,UAAU;AAAA,EAC1D;AAAA,EAEA,MAAc,kBAAkB,UAAoB,YAAoB,UAAuC,CAAC,GAA4B;AAC1I,UAAM,SAAS,MAAM,KAAK,sBAAsB,UAAU,UAAU;AACpE,QAAI;AACF,YAAM,iBAAiB,IAAI,eAAe,MAAM,MAAM;AACtD,YAAM,SAAS,KAAK,eAAe,MAAM,CAAC;AAC1C,WAAK,oBAAoB,IAAI,cAAc;AAE3C,YAAM,eAAe,MAAM,SAAS,KAAK,UAAAA,QAAG,SAAS,QAAQ,gBAAgB,CAAC;AAC9E,YAAM,sBAAsB,YAAY;AACtC,cAAM,UAAU,UAAM,gCAAc,CAAC,YAAY,CAAC,GAAG,OAAO,OAAO;AACnE,iBAAS,IAAI,GAAG,KAAK,UAAU,CAAC,GAAG,QAAQ,EAAE;AAC3C,wCAAM,YAAY,EAAE,4BAA4B,YAAY,KAAK,OAAO,CAAC,CAAC,EAAE;AAAA,MAChF;AACA,gDAAmB,IAAI,mBAAmB;AAC1C,aAAO,GAAG,SAAS,YAAY;AAC7B,kDAAmB,OAAO,mBAAmB;AAC7C,4BAAoB,EAAE,MAAM,WAAK,0BAAM,YAAY,EAAE,oCAAoC,CAAC,EAAE,CAAC;AAAA,MAC/F,CAAC;AACD,YAAM,iBAAiC;AAAA,QACrC,MAAM;AAAA,QACN,YAAY;AAAA,QACZ,QAAQ;AAAA,QACR,YAAY,EAAE,GAAG,SAAS,mBAAmB,KAAK;AAAA,QAClD;AAAA,QACA,eAAe;AAAA,QACf,WAAW;AAAA,QACX,gBAAgB,IAAI,oBAAoB,cAAc;AAAA,QACtD,OAAO,QAAQ;AAAA,QACf,gBAAgB,qBAAO,oBAAoB;AAAA,QAC3C,sBAAsB,IAAI,uCAAoB;AAAA,QAC9C,uBAAuB,CAAC;AAAA,MAC1B;AACA,+DAA8B,SAAS,cAAc;AAErD,YAAM,UAAU,MAAM,SAAS,KAAK,2BAAU,QAAQ,KAAK,YAAY,YAAY,gBAAgB,cAAc,CAAC;AAClH,YAAM,iBAAiB,QAAQ;AAC/B,YAAM,eAAe,wBAAwB,QAAQ;AACrD,aAAO;AAAA,IACT,SAAS,OAAO;AACd,aAAO,MAAM;AACb,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEQ,MAAM,UAAoB,SAAyC;AACzE,eAAO,uDAAsC,UAAU,MAAM,KAAK,SAAS,KAAK,OAAO,GAAG,YAAU,OAAO,MAAM,CAAC;AAAA,EACpH;AAAA,EAEA,WAAsC;AACpC,WAAO,CAAC,GAAG,KAAK,UAAU,OAAO,CAAC;AAAA,EACpC;AAAA,EAEA,MAAM,WAAW,UAAoB,SAAiB,SAA8C;AAClG,UAAM,OAAO,WAAW,QAAQ,OAAO,QAAQ,OAAO,CAAC,MAAM,MAAM,IAAI;AACvE,kCAAM,YAAY,EAAE,wBAAwB;AAC5C,UAAM,gBAAgB,MAAM,KAAK,MAAM,UAAU,6BAA6B,KAAK,KAAK,GAAG,CAAC,IAAI,QAAQ,MAAM,EAAE;AAChH,kCAAM,YAAY,EAAE,2BAA2B,QAAQ,MAAM;AAC7D,UAAM,SAAS,KAAK,cAAc,MAAM,OAAO,CAAC;AAChD,UAAM,UAAU,MAAM,SAAS,KAAK,IAAI,QAAQ,OAAK,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC;AACjF,kCAAM,YAAY,EAAE,2BAA2B,OAAO;AACtD,kBAAc,MAAM;AAAA,EACtB;AAAA,EAEA,MAAM,KAAK,UAAoB,SAAiBF,OAAc,OAAO,KAAsB;AACzF,UAAM,SAAS,MAAM,KAAK,MAAM,UAAU,OAAO;AACjD,UAAM,aAAa,OAAO,SAAiB,WAAmB;AAC5D,YAAM,SAAS,OAAO,MAAM,QAAQ,SAAS,CAAC;AAC9C,aAAO,MAAM,SAAS,CAAC;AACvB,aAAO,cAAc,QAAQ,QAAQ,MAAM;AAC3C,YAAM,SAAS,KAAK,OAAO,MAAM,MAAM,CAAC;AAAA,IAC1C;AACA,UAAM,OAAO,OAAO,SAAiB,SAAiB;AACpD,YAAM,WAAW,SAAS,KAAK,MAAM;AACrC,YAAM,SAAS,KAAK,OAAO,MAAM,IAAI,CAAC;AAAA,IACxC;AACA,UAAM,KAAK,QAAQ,OAAO,KAAK,GAAGA,KAAI,IAAI,IAAI,EAAE,CAAC;AACjD,UAAM,WAAW;AACjB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,YAAM,KAAK,QAAQ,QAAQ,MAAM,GAAG,IAAI,QAAQ,CAAC;AACnD,UAAM,WAAW,QAAS,KAAK,IAAI,IAAI,MAAQ,CAAC;AAChD,UAAM,SAAS,MAAM,SAAS,KAAK,IAAI,QAAgB,OAAK,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;AACnF,UAAM,OAAO,OAAO,MAAM,GAAG,CAAC,EAAE,SAAS;AACzC,QAAI,SAAS;AACX,YAAM,IAAI,MAAM,qBAAqB,IAAI;AAC3C,WAAO,MAAM;AAAA,EACf;AAAA,EAEA,MAAc,mBAAmB;AAE/B,UAAM,WAAW,MAAM,KAAK,SAAS,WAAW,yDAAyD,GAAG,SAAS,EAAE,MAAM,IAAI;AACjI,QAAI,KAAK;AACP;AAEF,UAAM,cAAc,oBAAI,IAAY;AACpC,eAAW,QAAQ,SAAS;AAC1B,YAAM,kBAAkB,KAAK,MAAM,wCAAwC;AAC3E,UAAI,CAAC;AACH;AAEF,YAAM,aAAa,gBAAgB,CAAC;AACpC,kBAAY,IAAI,UAAU;AAC1B,UAAI,KAAK,UAAU,IAAI,UAAU;AAC/B;AAIF,YAAM,QAAQ,KAAK,MAAM,yCAAyC;AAClE,UAAI,MAAM;AACV,UAAI,SAAS,MAAM,CAAC;AAClB,cAAM,CAAC,MAAM,CAAC;AAEhB,YAAM,MAAM,MAAM,KAAK,YAAY,GAAG;AACtC,UAAI,KAAK;AACP;AAEF,YAAM,UAAU,EAAE,KAAK,KAAK,WAAW;AACvC,WAAK,UAAU,IAAI,YAAY,OAAO;AACtC,WAAK,KAAK,cAAc,OAAO,cAAc,OAAO;AAAA,IACtD;AACA,eAAW,KAAK,KAAK,UAAU,KAAK,GAAG;AACrC,UAAI,CAAC,YAAY,IAAI,CAAC,GAAG;AACvB,aAAK,UAAU,OAAO,CAAC;AACvB,aAAK,KAAK,cAAc,OAAO,gBAAgB,CAAC;AAAA,MAClD;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,YAAY,KAAa;AACrC,QAAI,MAAM;AACV,QAAI,QAAQ;AACV,aAAO;AAET,UAAM,SAAS,MAAM,KAAK,SAAS,WAAW,sBAAsB,GAAG,EAAE,GAAG,SAAS,EAAE,MAAM,IAAI;AACjG,eAAW,QAAQ,OAAO;AACxB,YAAM,QAAQ,KAAK,MAAM,mBAAmB;AAC5C,UAAI,CAAC;AACH;AACF,YAAM,KAAK,UAAU,KAAK,YAAY,GAAG,IAAI,CAAC;AAAA,IAChD;AACA,WAAO;AAAA,EACT;AACF;AAEA,MAAM,uBAAuB,2BAAa;AAAA,EAQxC,YAAY,QAAuB,QAAuB;AACxD,UAAM;AALR,SAAQ,uBAAmB,iCAAoB;AAM7C,SAAK,gBAAgB,CAAC;AACtB,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,QAAQ,GAAG,SAAS,MAAM;AAC7B,WAAK,iBAAiB,MAAM;AAC1B,YAAI,KAAK;AACP,eAAK,QAAQ;AAAA,MACjB,CAAC;AAAA,IACH,CAAC;AACD,SAAK,YAAY,IAAI,+BAAW;AAChC,SAAK,UAAU,GAAG,WAAW,aAAW;AACtC,WAAK,iBAAiB,MAAM;AAC1B,YAAI,KAAK;AACP,eAAK,UAAU,KAAK,MAAM,OAAO,CAAC;AAAA,MACtC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,QAAQ;AACZ,UAAM,KAAK,QAAQ,MAAM,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAMxC,CAAC;AAEE,UAAM,IAAI,QAAQ,OAAK,KAAK,QAAS,KAAK,QAAQ,CAAC,CAAC;AAGpD,SAAK,QAAQ,GAAG,QAAQ,UAAQ,KAAK,UAAU,OAAO,MAAM,UAAU,MAAM;AAAA,IAAC,CAAC,CAAC;AAAA,EACjF;AAAA,EAEA,MAAM,KAAK,GAAQ;AACjB,UAAM,KAAK,QAAS,MAAM,eAAe,KAAK,UAAU,CAAC,CAAC,CAAC;AAAA,EAC7D;AAAA,EAEA,MAAM,QAAQ;AACZ,SAAK,QAAS,MAAM;AAAA,EACtB;AACF;AAEA,SAAS,eAAe,MAAsB;AAC5C,SAAO,6BAAS,MAAM,OAAO,KAAK,IAAI,GAAG;AAAA,IACvC,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,KAAK;AAAA,IACL,UAAU;AAAA,EACZ,CAAC,EAAE,CAAC;AACN;AAEA,MAAM,oBAA8C;AAAA,EAGlD,YAAY,SAAyB;AACnC,SAAK,WAAW;AAAA,EAClB;AAAA,EAIA,MAAM,OAAsB;AAAA,EAC5B;AAAA,EAEA,MAAM,QAAuB;AAC3B,UAAM,KAAK,SAAS,MAAM;AAAA,EAC5B;AACF;",
  "names": ["import_utilsBundle", "path", "os", "fs"]
}
