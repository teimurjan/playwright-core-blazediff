{
  "version": 3,
  "sources": ["../../src/server/artifact.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\n\nimport { assert } from '../utils';\nimport { TargetClosedError } from './errors';\nimport { SdkObject } from './instrumentation';\nimport { ManualPromise } from '../utils/isomorphic/manualPromise';\n\ntype SaveCallback = (localPath: string, error?: Error) => Promise<void>;\ntype CancelCallback = () => Promise<void>;\n\nexport class Artifact extends SdkObject {\n  private _localPath: string;\n  private _unaccessibleErrorMessage: string | undefined;\n  private _cancelCallback: CancelCallback | undefined;\n  private _finishedPromise = new ManualPromise<void>();\n  private _saveCallbacks: SaveCallback[] = [];\n  private _finished: boolean = false;\n  private _deleted = false;\n  private _failureError: Error | undefined;\n\n  constructor(parent: SdkObject, localPath: string, unaccessibleErrorMessage?: string, cancelCallback?: CancelCallback) {\n    super(parent, 'artifact');\n    this._localPath = localPath;\n    this._unaccessibleErrorMessage = unaccessibleErrorMessage;\n    this._cancelCallback = cancelCallback;\n  }\n\n  finishedPromise() {\n    return this._finishedPromise;\n  }\n\n  localPath() {\n    return this._localPath;\n  }\n\n  async localPathAfterFinished(): Promise<string> {\n    if (this._unaccessibleErrorMessage)\n      throw new Error(this._unaccessibleErrorMessage);\n    await this._finishedPromise;\n    if (this._failureError)\n      throw this._failureError;\n    return this._localPath;\n  }\n\n  saveAs(saveCallback: SaveCallback) {\n    if (this._unaccessibleErrorMessage)\n      throw new Error(this._unaccessibleErrorMessage);\n    if (this._deleted)\n      throw new Error(`File already deleted. Save before deleting.`);\n    if (this._failureError)\n      throw this._failureError;\n\n    if (this._finished) {\n      saveCallback(this._localPath).catch(() => {});\n      return;\n    }\n    this._saveCallbacks.push(saveCallback);\n  }\n\n  async failureError(): Promise<string | null> {\n    if (this._unaccessibleErrorMessage)\n      return this._unaccessibleErrorMessage;\n    await this._finishedPromise;\n    return this._failureError?.message || null;\n  }\n\n  async cancel(): Promise<void> {\n    assert(this._cancelCallback !== undefined);\n    return this._cancelCallback();\n  }\n\n  async delete(): Promise<void> {\n    if (this._unaccessibleErrorMessage)\n      return;\n    const fileName = await this.localPathAfterFinished();\n    if (this._deleted)\n      return;\n    this._deleted = true;\n    if (fileName)\n      await fs.promises.unlink(fileName).catch(e => {});\n  }\n\n  async deleteOnContextClose(): Promise<void> {\n    // Compared to \"delete\", this method does not wait for the artifact to finish.\n    // We use it when closing the context to avoid stalling.\n    if (this._deleted)\n      return;\n    this._deleted = true;\n    if (!this._unaccessibleErrorMessage)\n      await fs.promises.unlink(this._localPath).catch(e => {});\n    await this.reportFinished(new TargetClosedError());\n  }\n\n  async reportFinished(error?: Error) {\n    if (this._finished)\n      return;\n    this._finished = true;\n    this._failureError = error;\n\n    if (error) {\n      for (const callback of this._saveCallbacks)\n        await callback('', error);\n    } else {\n      for (const callback of this._saveCallbacks)\n        await callback(this._localPath);\n    }\n    this._saveCallbacks = [];\n\n    this._finishedPromise.resolve();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,gBAAe;AAEf,mBAAuB;AACvB,oBAAkC;AAClC,6BAA0B;AAC1B,2BAA8B;AAKvB,MAAM,iBAAiB,iCAAU;AAAA,EAUtC,YAAY,QAAmB,WAAmB,0BAAmC,gBAAiC;AACpH,UAAM,QAAQ,UAAU;AAP1B,SAAQ,mBAAmB,IAAI,mCAAoB;AACnD,SAAQ,iBAAiC,CAAC;AAC1C,SAAQ,YAAqB;AAC7B,SAAQ,WAAW;AAKjB,SAAK,aAAa;AAClB,SAAK,4BAA4B;AACjC,SAAK,kBAAkB;AAAA,EACzB;AAAA,EAEA,kBAAkB;AAChB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,YAAY;AACV,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,yBAA0C;AAC9C,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,KAAK,yBAAyB;AAChD,UAAM,KAAK;AACX,QAAI,KAAK;AACP,YAAM,KAAK;AACb,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,OAAO,cAA4B;AACjC,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,KAAK,yBAAyB;AAChD,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,6CAA6C;AAC/D,QAAI,KAAK;AACP,YAAM,KAAK;AAEb,QAAI,KAAK,WAAW;AAClB,mBAAa,KAAK,UAAU,EAAE,MAAM,MAAM;AAAA,MAAC,CAAC;AAC5C;AAAA,IACF;AACA,SAAK,eAAe,KAAK,YAAY;AAAA,EACvC;AAAA,EAEA,MAAM,eAAuC;AAC3C,QAAI,KAAK;AACP,aAAO,KAAK;AACd,UAAM,KAAK;AACX,WAAO,KAAK,eAAe,WAAW;AAAA,EACxC;AAAA,EAEA,MAAM,SAAwB;AAC5B,6BAAO,KAAK,oBAAoB,MAAS;AACzC,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA,EAEA,MAAM,SAAwB;AAC5B,QAAI,KAAK;AACP;AACF,UAAM,WAAW,MAAM,KAAK,uBAAuB;AACnD,QAAI,KAAK;AACP;AACF,SAAK,WAAW;AAChB,QAAI;AACF,YAAM,UAAAA,QAAG,SAAS,OAAO,QAAQ,EAAE,MAAM,OAAK;AAAA,MAAC,CAAC;AAAA,EACpD;AAAA,EAEA,MAAM,uBAAsC;AAG1C,QAAI,KAAK;AACP;AACF,SAAK,WAAW;AAChB,QAAI,CAAC,KAAK;AACR,YAAM,UAAAA,QAAG,SAAS,OAAO,KAAK,UAAU,EAAE,MAAM,OAAK;AAAA,MAAC,CAAC;AACzD,UAAM,KAAK,eAAe,IAAI,gCAAkB,CAAC;AAAA,EACnD;AAAA,EAEA,MAAM,eAAe,OAAe;AAClC,QAAI,KAAK;AACP;AACF,SAAK,YAAY;AACjB,SAAK,gBAAgB;AAErB,QAAI,OAAO;AACT,iBAAW,YAAY,KAAK;AAC1B,cAAM,SAAS,IAAI,KAAK;AAAA,IAC5B,OAAO;AACL,iBAAW,YAAY,KAAK;AAC1B,cAAM,SAAS,KAAK,UAAU;AAAA,IAClC;AACA,SAAK,iBAAiB,CAAC;AAEvB,SAAK,iBAAiB,QAAQ;AAAA,EAChC;AACF;",
  "names": ["fs"]
}
