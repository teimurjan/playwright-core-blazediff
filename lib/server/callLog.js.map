{
  "version": 3,
  "sources": ["../../src/server/callLog.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function compressCallLog(log: string[]): string[] {\n  const lines: string[] = [];\n\n  for (const block of findRepeatedSubsequences(log)) {\n    for (let i = 0; i < block.sequence.length; i++) {\n      const line = block.sequence[i];\n      const leadingWhitespace = line.match(/^\\s*/);\n      const whitespacePrefix = '  ' + leadingWhitespace?.[0] || '';\n      const countPrefix = `${block.count} \u00D7 `;\n      if (block.count > 1 && i === 0)\n        lines.push(whitespacePrefix + countPrefix + line.trim());\n      else if (block.count > 1)\n        lines.push(whitespacePrefix + ' '.repeat(countPrefix.length - 2) + '- ' + line.trim());\n      else\n        lines.push(whitespacePrefix + '- ' + line.trim());\n    }\n  }\n  return lines;\n}\n\nfunction findRepeatedSubsequences(s: string[]): { sequence: string[]; count: number }[] {\n  const n = s.length;\n  const result = [];\n  let i = 0;\n\n  const arraysEqual = (a1: string[], a2: string[]) => {\n    if (a1.length !== a2.length)\n      return false;\n    for (let j = 0; j < a1.length; j++) {\n      if (a1[j] !== a2[j])\n        return false;\n    }\n\n    return true;\n  };\n\n  while (i < n) {\n    let maxRepeatCount = 1;\n    let maxRepeatSubstr = [s[i]]; // Initialize with the element at index i\n    let maxRepeatLength = 1;\n\n    // Try substrings of length from 1 to the remaining length of the array\n    for (let p = 1; p <= n - i; p++) {\n      const substr = s.slice(i, i + p); // Extract substring as array\n      let k = 1;\n\n      // Count how many times the substring repeats consecutively\n      while (\n        i + p * k <= n &&\n        arraysEqual(s.slice(i + p * (k - 1), i + p * k), substr)\n      )\n        k += 1;\n\n      k -= 1; // Adjust k since it increments one extra time in the loop\n\n      // Update the maximal repeating substring if necessary\n      if (k > 1 && (k * p) > (maxRepeatCount * maxRepeatLength)) {\n        maxRepeatCount = k;\n        maxRepeatSubstr = substr;\n        maxRepeatLength = p;\n      }\n    }\n\n    // Record the substring and its count\n    result.push({ sequence: maxRepeatSubstr, count: maxRepeatCount });\n    i += maxRepeatLength * maxRepeatCount; // Move index forward\n  }\n\n  return result;\n}\n\nexport const findRepeatedSubsequencesForTest = findRepeatedSubsequences;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBO,SAAS,gBAAgB,KAAyB;AACvD,QAAM,QAAkB,CAAC;AAEzB,aAAW,SAAS,yBAAyB,GAAG,GAAG;AACjD,aAAS,IAAI,GAAG,IAAI,MAAM,SAAS,QAAQ,KAAK;AAC9C,YAAM,OAAO,MAAM,SAAS,CAAC;AAC7B,YAAM,oBAAoB,KAAK,MAAM,MAAM;AAC3C,YAAM,mBAAmB,OAAO,oBAAoB,CAAC,KAAK;AAC1D,YAAM,cAAc,GAAG,MAAM,KAAK;AAClC,UAAI,MAAM,QAAQ,KAAK,MAAM;AAC3B,cAAM,KAAK,mBAAmB,cAAc,KAAK,KAAK,CAAC;AAAA,eAChD,MAAM,QAAQ;AACrB,cAAM,KAAK,mBAAmB,IAAI,OAAO,YAAY,SAAS,CAAC,IAAI,OAAO,KAAK,KAAK,CAAC;AAAA;AAErF,cAAM,KAAK,mBAAmB,OAAO,KAAK,KAAK,CAAC;AAAA,IACpD;AAAA,EACF;AACA,SAAO;AACT;AAEA,SAAS,yBAAyB,GAAsD;AACtF,QAAM,IAAI,EAAE;AACZ,QAAM,SAAS,CAAC;AAChB,MAAI,IAAI;AAER,QAAM,cAAc,CAAC,IAAc,OAAiB;AAClD,QAAI,GAAG,WAAW,GAAG;AACnB,aAAO;AACT,aAAS,IAAI,GAAG,IAAI,GAAG,QAAQ,KAAK;AAClC,UAAI,GAAG,CAAC,MAAM,GAAG,CAAC;AAChB,eAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACT;AAEA,SAAO,IAAI,GAAG;AACZ,QAAI,iBAAiB;AACrB,QAAI,kBAAkB,CAAC,EAAE,CAAC,CAAC;AAC3B,QAAI,kBAAkB;AAGtB,aAAS,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK;AAC/B,YAAM,SAAS,EAAE,MAAM,GAAG,IAAI,CAAC;AAC/B,UAAI,IAAI;AAGR,aACE,IAAI,IAAI,KAAK,KACb,YAAY,EAAE,MAAM,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,MAAM;AAEvD,aAAK;AAEP,WAAK;AAGL,UAAI,IAAI,KAAM,IAAI,IAAM,iBAAiB,iBAAkB;AACzD,yBAAiB;AACjB,0BAAkB;AAClB,0BAAkB;AAAA,MACpB;AAAA,IACF;AAGA,WAAO,KAAK,EAAE,UAAU,iBAAiB,OAAO,eAAe,CAAC;AAChE,SAAK,kBAAkB;AAAA,EACzB;AAEA,SAAO;AACT;AAEO,MAAM,kCAAkC;",
  "names": []
}
