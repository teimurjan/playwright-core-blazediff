{
  "version": 3,
  "sources": ["../../../src/server/har/harRecorder.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { Artifact } from '../artifact';\nimport { HarTracer } from './harTracer';\nimport { createGuid } from '../utils/crypto';\nimport { ManualPromise } from '../../utils/isomorphic/manualPromise';\nimport { yazl } from '../../zipBundle';\n\nimport type { BrowserContext } from '../browserContext';\nimport type { HarTracerDelegate } from './harTracer';\nimport type { ZipFile } from '../../zipBundle';\nimport type { Page } from '../page';\nimport type * as channels from '@protocol/channels';\nimport type * as har from '@trace/har';\nimport type EventEmitter from 'events';\n\nexport class HarRecorder implements HarTracerDelegate {\n  private _artifact: Artifact;\n  private _isFlushed: boolean = false;\n  private _tracer: HarTracer;\n  private _entries: har.Entry[] = [];\n  private _zipFile: ZipFile | null = null;\n  private _writtenZipEntries = new Set<string>();\n\n  constructor(context: BrowserContext, page: Page | null, options: channels.RecordHarOptions) {\n    this._artifact = new Artifact(context, path.join(context._browser.options.artifactsDir, `${createGuid()}.har`));\n    const urlFilterRe = options.urlRegexSource !== undefined && options.urlRegexFlags !== undefined ? new RegExp(options.urlRegexSource, options.urlRegexFlags) : undefined;\n    const expectsZip = !!options.zip;\n    const content = options.content || (expectsZip ? 'attach' : 'embed');\n    this._tracer = new HarTracer(context, page, this, {\n      content,\n      slimMode: options.mode === 'minimal',\n      includeTraceInfo: false,\n      recordRequestOverrides: true,\n      waitForContentOnStop: true,\n      urlFilter: urlFilterRe ?? options.urlGlob,\n    });\n    this._zipFile = content === 'attach' || expectsZip ? new yazl.ZipFile() : null;\n    this._tracer.start({ omitScripts: false });\n  }\n\n  onEntryStarted(entry: har.Entry) {\n    this._entries.push(entry);\n  }\n\n  onEntryFinished(entry: har.Entry) {\n  }\n\n  onContentBlob(sha1: string, buffer: Buffer) {\n    if (!this._zipFile || this._writtenZipEntries.has(sha1))\n      return;\n    this._writtenZipEntries.add(sha1);\n    this._zipFile!.addBuffer(buffer, sha1);\n  }\n\n  async flush() {\n    if (this._isFlushed)\n      return;\n    this._isFlushed = true;\n    await this._tracer.flush();\n\n    const log = this._tracer.stop();\n    log.entries = this._entries;\n\n    const harFileContent = jsonStringify({ log });\n\n    if (this._zipFile) {\n      const result = new ManualPromise<void>();\n      (this._zipFile as unknown as EventEmitter).on('error', error => result.reject(error));\n      this._zipFile.addBuffer(Buffer.from(harFileContent, 'utf-8'), 'har.har');\n      this._zipFile.end();\n      this._zipFile.outputStream.pipe(fs.createWriteStream(this._artifact.localPath())).on('close', () => {\n        result.resolve();\n      });\n      await result;\n    } else {\n      await fs.promises.writeFile(this._artifact.localPath(), harFileContent);\n    }\n  }\n\n  async export(): Promise<Artifact> {\n    await this.flush();\n    this._artifact.reportFinished();\n    return this._artifact;\n  }\n}\n\nfunction jsonStringify(object: any): string {\n  const tokens: string[] = [];\n  innerJsonStringify(object, tokens, '', false, undefined);\n  return tokens.join('');\n}\n\nfunction innerJsonStringify(object: any, tokens: string[], indent: string, flat: boolean, parentKey: string | undefined) {\n  if (typeof object !== 'object' || object === null) {\n    tokens.push(JSON.stringify(object));\n    return;\n  }\n\n  const isArray = Array.isArray(object);\n  if (!isArray && object.constructor.name !== 'Object') {\n    tokens.push(JSON.stringify(object));\n    return;\n  }\n\n  const entries = isArray ? object : Object.entries(object).filter(e => e[1] !== undefined);\n  if (!entries.length) {\n    tokens.push(isArray ? `[]` : `{}`);\n    return;\n  }\n\n  const childIndent = `${indent}  `;\n  let brackets: { open: string, close: string };\n  if (isArray)\n    brackets = flat ? { open: '[', close: ']' } : { open: `[\\n${childIndent}`, close: `\\n${indent}]` };\n  else\n    brackets = flat ? { open: '{ ', close: ' }' } : { open: `{\\n${childIndent}`, close: `\\n${indent}}` };\n\n  tokens.push(brackets.open);\n\n  for (let i = 0; i < entries.length; ++i) {\n    const entry = entries[i];\n    if (i)\n      tokens.push(flat ? `, ` : `,\\n${childIndent}`);\n    if (!isArray)\n      tokens.push(`${JSON.stringify(entry[0])}: `);\n    const key = isArray ? undefined : entry[0];\n    const flatten = flat || key === 'timings' || parentKey === 'headers';\n    innerJsonStringify(isArray ? entry : entry[1], tokens, childIndent, flatten, key);\n  }\n\n  tokens.push(brackets.close);\n}\n"],
  "mappings": "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",
  "names": ["path", "fs"]
}
