{
  "version": 3,
  "sources": ["../../../src/server/har/harTracer.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, calculateSha1, monotonicTime } from '../../utils';\nimport { getPlaywrightVersion, isTextualMimeType, urlMatches } from '../../utils';\nimport { eventsHelper } from '../utils/eventsHelper';\nimport { ManualPromise } from '../../utils/isomorphic/manualPromise';\nimport { mime } from '../../utilsBundle';\nimport { BrowserContext } from '../browserContext';\nimport { APIRequestContext } from '../fetch';\nimport { Frame } from '../frames';\nimport { helper } from '../helper';\nimport * as network from '../network';\n\nimport type { RegisteredListener } from '../utils/eventsHelper';\nimport type { APIRequestEvent, APIRequestFinishedEvent } from '../fetch';\nimport type { Page } from '../page';\nimport type { Worker } from '../page';\nimport type { HeadersArray, LifecycleEvent } from '../types';\nimport type * as har from '@trace/har';\n\nconst FALLBACK_HTTP_VERSION = 'HTTP/1.1';\n\nexport interface HarTracerDelegate {\n  onEntryStarted(entry: har.Entry): void;\n  onEntryFinished(entry: har.Entry): void;\n  onContentBlob(sha1: string, buffer: Buffer): void;\n}\n\ntype HarTracerOptions = {\n  content: 'omit' | 'attach' | 'embed';\n  includeTraceInfo: boolean;\n  recordRequestOverrides: boolean;\n  waitForContentOnStop: boolean;\n  urlFilter?: string | RegExp;\n  slimMode?: boolean;\n  omitSecurityDetails?: boolean;\n  omitCookies?: boolean;\n  omitTiming?: boolean;\n  omitServerIP?: boolean;\n  omitPages?: boolean;\n  omitSizes?: boolean;\n  omitScripts?: boolean;\n};\n\nexport class HarTracer {\n  private _context: BrowserContext | APIRequestContext;\n  private _barrierPromises = new Set<Promise<void>>();\n  private _delegate: HarTracerDelegate;\n  private _options: HarTracerOptions;\n  private _pageEntries = new Map<Page, har.Page>();\n  private _eventListeners: RegisteredListener[] = [];\n  private _started = false;\n  private _entrySymbol: symbol;\n  private _baseURL: string | undefined;\n  private _page: Page | null;\n\n  constructor(context: BrowserContext | APIRequestContext, page: Page | null, delegate: HarTracerDelegate, options: HarTracerOptions) {\n    this._context = context;\n    this._page = page;\n    this._delegate = delegate;\n    this._options = options;\n    if (options.slimMode) {\n      options.omitSecurityDetails = true;\n      options.omitCookies = true;\n      options.omitTiming = true;\n      options.omitServerIP = true;\n      options.omitSizes = true;\n      options.omitPages = true;\n    }\n    this._entrySymbol = Symbol('requestHarEntry');\n    this._baseURL = context instanceof APIRequestContext ? context._defaultOptions().baseURL : context._options.baseURL;\n  }\n\n  start(options: { omitScripts: boolean }) {\n    if (this._started)\n      return;\n    this._options.omitScripts = options.omitScripts;\n    this._started = true;\n    const apiRequest = this._context instanceof APIRequestContext ? this._context : this._context.fetchRequest;\n    this._eventListeners = [\n      eventsHelper.addEventListener(apiRequest, APIRequestContext.Events.Request, (event: APIRequestEvent) => this._onAPIRequest(event)),\n      eventsHelper.addEventListener(apiRequest, APIRequestContext.Events.RequestFinished, (event: APIRequestFinishedEvent) => this._onAPIRequestFinished(event)),\n    ];\n    if (this._context instanceof BrowserContext) {\n      this._eventListeners.push(\n          eventsHelper.addEventListener(this._context, BrowserContext.Events.Page, (page: Page) => this._createPageEntryIfNeeded(page)),\n          eventsHelper.addEventListener(this._context, BrowserContext.Events.Request, (request: network.Request) => this._onRequest(request)),\n          eventsHelper.addEventListener(this._context, BrowserContext.Events.RequestFinished, ({ request, response }) => this._onRequestFinished(request, response).catch(() => {})),\n          eventsHelper.addEventListener(this._context, BrowserContext.Events.RequestFailed, request => this._onRequestFailed(request)),\n          eventsHelper.addEventListener(this._context, BrowserContext.Events.Response, (response: network.Response) => this._onResponse(response)),\n          eventsHelper.addEventListener(this._context, BrowserContext.Events.RequestAborted, request => this._onRequestAborted(request)),\n          eventsHelper.addEventListener(this._context, BrowserContext.Events.RequestFulfilled, request => this._onRequestFulfilled(request)),\n          eventsHelper.addEventListener(this._context, BrowserContext.Events.RequestContinued, request => this._onRequestContinued(request)),\n      );\n      for (const page of this._context.pages())\n        this._createPageEntryIfNeeded(page);\n    }\n  }\n\n  private _shouldIncludeEntryWithUrl(urlString: string) {\n    return !this._options.urlFilter || urlMatches(this._baseURL, urlString, this._options.urlFilter);\n  }\n\n  private _entryForRequest(request: network.Request | APIRequestEvent): har.Entry | undefined {\n    return (request as any)[this._entrySymbol];\n  }\n\n  private _createPageEntryIfNeeded(page?: Page): har.Page | undefined {\n    if (!page)\n      return;\n    if (this._options.omitPages)\n      return;\n    if (this._page && page !== this._page)\n      return;\n    let pageEntry = this._pageEntries.get(page);\n    if (!pageEntry) {\n      const date = new Date();\n      pageEntry = {\n        startedDateTime: date.toISOString(),\n        id: page.guid,\n        title: '',\n        pageTimings: this._options.omitTiming ? {} : {\n          onContentLoad: -1,\n          onLoad: -1,\n        },\n      };\n      (pageEntry as any)[startedDateSymbol] = date;\n\n      page.mainFrame().on(Frame.Events.AddLifecycle, (event: LifecycleEvent) => {\n        if (event === 'load')\n          this._onLoad(page, pageEntry!);\n        if (event === 'domcontentloaded')\n          this._onDOMContentLoaded(page, pageEntry!);\n      });\n\n      this._pageEntries.set(page, pageEntry);\n    }\n    return pageEntry;\n  }\n\n  private _onDOMContentLoaded(page: Page, pageEntry: har.Page) {\n    const promise = page.mainFrame().evaluateExpression(String(() => {\n      return {\n        title: document.title,\n        domContentLoaded: performance.timing.domContentLoadedEventStart,\n      };\n    }), { isFunction: true, world: 'utility' }).then(result => {\n      pageEntry.title = result.title;\n      if (!this._options.omitTiming)\n        pageEntry.pageTimings.onContentLoad = result.domContentLoaded;\n    }).catch(() => {});\n    this._addBarrier(page, promise);\n  }\n\n  private _onLoad(page: Page, pageEntry: har.Page) {\n    const promise = page.mainFrame().evaluateExpression(String(() => {\n      return {\n        title: document.title,\n        loaded: performance.timing.loadEventStart,\n      };\n    }), { isFunction: true, world: 'utility' }).then(result => {\n      pageEntry.title = result.title;\n      if (!this._options.omitTiming)\n        pageEntry.pageTimings.onLoad = result.loaded;\n    }).catch(() => {});\n    this._addBarrier(page, promise);\n  }\n\n  private _addBarrier(target: Page | Worker | null, promise: Promise<void>) {\n    if (!target)\n      return null;\n    if (!this._options.waitForContentOnStop)\n      return;\n    const race = target.openScope.safeRace(promise);\n    this._barrierPromises.add(race);\n    race.then(() => this._barrierPromises.delete(race));\n  }\n\n  private _onAPIRequest(event: APIRequestEvent) {\n    if (!this._shouldIncludeEntryWithUrl(event.url.toString()))\n      return;\n    const harEntry = createHarEntry(event.method, event.url, undefined, this._options);\n    harEntry._apiRequest = true;\n    if (!this._options.omitCookies)\n      harEntry.request.cookies = event.cookies;\n    harEntry.request.headers = Object.entries(event.headers).map(([name, value]) => ({ name, value }));\n    harEntry.request.postData = this._postDataForBuffer(event.postData || null, event.headers['content-type'],  this._options.content);\n    if (!this._options.omitSizes)\n      harEntry.request.bodySize = event.postData?.length || 0;\n    (event as any)[this._entrySymbol] = harEntry;\n    if (this._started)\n      this._delegate.onEntryStarted(harEntry);\n  }\n\n  private _onAPIRequestFinished(event: APIRequestFinishedEvent): void {\n    const harEntry = this._entryForRequest(event.requestEvent);\n    if (!harEntry)\n      return;\n\n    harEntry.response.status = event.statusCode;\n    harEntry.response.statusText = event.statusMessage;\n    harEntry.response.httpVersion = event.httpVersion;\n    harEntry.response.redirectURL = event.headers.location || '';\n\n    if (!this._options.omitServerIP) {\n      harEntry.serverIPAddress = event.serverIPAddress;\n      harEntry._serverPort = event.serverPort;\n    }\n\n    if (!this._options.omitTiming) {\n      harEntry.timings = event.timings;\n      this._computeHarEntryTotalTime(harEntry);\n    }\n\n    if (!this._options.omitSecurityDetails)\n      harEntry._securityDetails = event.securityDetails;\n\n    for (let i = 0; i < event.rawHeaders.length; i += 2) {\n      harEntry.response.headers.push({\n        name: event.rawHeaders[i],\n        value: event.rawHeaders[i + 1]\n      });\n    }\n    harEntry.response.cookies = this._options.omitCookies ? [] : event.cookies.map(c => {\n      return {\n        ...c,\n        expires: c.expires === -1 ? undefined : safeDateToISOString(c.expires)\n      };\n    });\n\n    const content = harEntry.response.content;\n    const contentType = event.headers['content-type'];\n    if (contentType)\n      content.mimeType = contentType;\n    this._storeResponseContent(event.body, content, 'other');\n    if (!this._options.omitSizes)\n      harEntry.response.bodySize = event.body?.length ?? 0;\n\n    if (this._started)\n      this._delegate.onEntryFinished(harEntry);\n  }\n\n  private _onRequest(request: network.Request) {\n    if (!this._shouldIncludeEntryWithUrl(request.url()))\n      return;\n    const page = request.frame()?._page;\n    if (this._page && page !== this._page)\n      return;\n    const url = network.parseURL(request.url());\n    if (!url)\n      return;\n\n    const pageEntry = this._createPageEntryIfNeeded(page);\n    const harEntry = createHarEntry(request.method(), url, request.frame()?.guid, this._options);\n    if (pageEntry)\n      harEntry.pageref = pageEntry.id;\n    this._recordRequestHeadersAndCookies(harEntry, request.headers());\n    harEntry.request.postData = this._postDataForRequest(request, this._options.content);\n    if (!this._options.omitSizes)\n      harEntry.request.bodySize = request.bodySize();\n    if (request.redirectedFrom()) {\n      const fromEntry = this._entryForRequest(request.redirectedFrom()!);\n      if (fromEntry)\n        fromEntry.response.redirectURL = request.url();\n    }\n    (request as any)[this._entrySymbol] = harEntry;\n    assert(this._started);\n    this._delegate.onEntryStarted(harEntry);\n  }\n\n  private _recordRequestHeadersAndCookies(harEntry: har.Entry, headers: HeadersArray) {\n    if (!this._options.omitCookies) {\n      harEntry.request.cookies = [];\n      for (const header of headers.filter(header => header.name.toLowerCase() === 'cookie'))\n        harEntry.request.cookies.push(...header.value.split(';').map(parseCookie));\n    }\n    harEntry.request.headers = headers;\n  }\n\n  private _recordRequestOverrides(harEntry: har.Entry, request: network.Request) {\n    if (!request.overrides() || !this._options.recordRequestOverrides)\n      return;\n    harEntry.request.method = request.method();\n    harEntry.request.url = request.url();\n    harEntry.request.postData = this._postDataForRequest(request, this._options.content);\n    this._recordRequestHeadersAndCookies(harEntry, request.headers());\n  }\n\n  private async _onRequestFinished(request: network.Request, response: network.Response | null) {\n    if (!response)\n      return;\n    const harEntry = this._entryForRequest(request);\n    if (!harEntry)\n      return;\n    const page = request.frame()?._page;\n\n    // In WebKit security details and server ip are reported in Network.loadingFinished, so we populate\n    // it here to not hang in case of long chunked responses, see https://github.com/microsoft/playwright/issues/21182.\n    if (!this._options.omitServerIP) {\n      this._addBarrier(page || request.serviceWorker(), response.serverAddr().then(server => {\n        if (server?.ipAddress)\n          harEntry.serverIPAddress = server.ipAddress;\n        if (server?.port)\n          harEntry._serverPort = server.port;\n      }));\n    }\n    if (!this._options.omitSecurityDetails) {\n      this._addBarrier(page || request.serviceWorker(), response.securityDetails().then(details => {\n        if (details)\n          harEntry._securityDetails = details;\n      }));\n    }\n\n    const httpVersion = response.httpVersion();\n    harEntry.request.httpVersion = httpVersion;\n    harEntry.response.httpVersion = httpVersion;\n\n    const compressionCalculationBarrier = this._options.omitSizes ? undefined : {\n      _encodedBodySize: -1,\n      _decodedBodySize: -1,\n      barrier: new ManualPromise<void>(),\n      _check: function() {\n        if (this._encodedBodySize !== -1 && this._decodedBodySize !== -1) {\n          harEntry.response.content.compression = Math.max(0, this._decodedBodySize - this._encodedBodySize);\n          this.barrier.resolve();\n        }\n      },\n      setEncodedBodySize: function(encodedBodySize: number){\n        this._encodedBodySize = encodedBodySize;\n        this._check();\n      },\n      setDecodedBodySize: function(decodedBodySize: number) {\n        this._decodedBodySize = decodedBodySize;\n        this._check();\n      }\n    };\n    if (compressionCalculationBarrier)\n      this._addBarrier(page || request.serviceWorker(), compressionCalculationBarrier.barrier);\n\n    const promise = response.body().then(buffer => {\n      if (this._options.omitScripts && request.resourceType() === 'script') {\n        compressionCalculationBarrier?.setDecodedBodySize(0);\n        return;\n      }\n\n      const content = harEntry.response.content;\n      compressionCalculationBarrier?.setDecodedBodySize(buffer.length);\n      this._storeResponseContent(buffer, content, request.resourceType());\n    }).catch(() => {\n      compressionCalculationBarrier?.setDecodedBodySize(0);\n    }).then(() => {\n      if (this._started)\n        this._delegate.onEntryFinished(harEntry);\n    });\n    this._addBarrier(page || request.serviceWorker(), promise);\n\n    // Response end timing is only available after the response event was received.\n    const timing = response.timing();\n    harEntry.timings.receive = response.request()._responseEndTiming !== -1 ? helper.millisToRoundishMillis(response.request()._responseEndTiming - timing.responseStart) : -1;\n    this._computeHarEntryTotalTime(harEntry);\n\n    if (!this._options.omitSizes) {\n      this._addBarrier(page || request.serviceWorker(), response.sizes().then(sizes => {\n        harEntry.response.bodySize = sizes.responseBodySize;\n        harEntry.response.headersSize = sizes.responseHeadersSize;\n        harEntry.response._transferSize = sizes.transferSize;\n        harEntry.request.headersSize = sizes.requestHeadersSize;\n        compressionCalculationBarrier?.setEncodedBodySize(sizes.responseBodySize);\n      }));\n    }\n  }\n\n  private async _onRequestFailed(request: network.Request) {\n    const harEntry = this._entryForRequest(request);\n    if (!harEntry)\n      return;\n\n    if (request._failureText !== null)\n      harEntry.response._failureText = request._failureText;\n    this._recordRequestOverrides(harEntry, request);\n    if (this._started)\n      this._delegate.onEntryFinished(harEntry);\n  }\n\n  private _onRequestAborted(request: network.Request) {\n    const harEntry = this._entryForRequest(request);\n    if (harEntry)\n      harEntry._wasAborted = true;\n  }\n\n  private _onRequestFulfilled(request: network.Request) {\n    const harEntry = this._entryForRequest(request);\n    if (harEntry)\n      harEntry._wasFulfilled = true;\n  }\n\n  private _onRequestContinued(request: network.Request) {\n    const harEntry = this._entryForRequest(request);\n    if (harEntry)\n      harEntry._wasContinued = true;\n  }\n\n  private _storeResponseContent(buffer: Buffer | undefined, content: har.Content, resourceType: string) {\n    if (!buffer) {\n      content.size = 0;\n      return;\n    }\n\n    if (!this._options.omitSizes)\n      content.size = buffer.length;\n\n    if (this._options.content === 'embed') {\n      // Sometimes, we can receive a font/media file with textual mime type. Browser\n      // still interprets them correctly, but the 'content-type' header is obviously wrong.\n      if (isTextualMimeType(content.mimeType) && resourceType !== 'font') {\n        content.text = buffer.toString();\n      } else {\n        content.text = buffer.toString('base64');\n        content.encoding = 'base64';\n      }\n    } else if (this._options.content === 'attach') {\n      const sha1 = calculateSha1(buffer) + '.' + (mime.getExtension(content.mimeType) || 'dat');\n      if (this._options.includeTraceInfo)\n        content._sha1 = sha1;\n      else\n        content._file = sha1;\n      if (this._started)\n        this._delegate.onContentBlob(sha1, buffer);\n    }\n  }\n\n  private _onResponse(response: network.Response) {\n    const harEntry = this._entryForRequest(response.request());\n    if (!harEntry)\n      return;\n    const page = response.frame()?._page;\n    const pageEntry = this._createPageEntryIfNeeded(page);\n    const request = response.request();\n\n    harEntry.response = {\n      status: response.status(),\n      statusText: response.statusText(),\n      httpVersion: response.httpVersion(),\n      // These are bad values that will be overwritten below.\n      cookies: [],\n      headers: [],\n      content: {\n        size: -1,\n        mimeType: 'x-unknown',\n      },\n      headersSize: -1,\n      bodySize: -1,\n      redirectURL: '',\n      _transferSize: this._options.omitSizes ? undefined : -1\n    };\n\n    if (!this._options.omitTiming) {\n      const startDateTime = pageEntry ? ((pageEntry as any)[startedDateSymbol] as Date).valueOf() : 0;\n      const timing = response.timing();\n      if (pageEntry && startDateTime > timing.startTime)\n        pageEntry.startedDateTime = new Date(timing.startTime).toISOString();\n      const dns = timing.domainLookupEnd !== -1 ? helper.millisToRoundishMillis(timing.domainLookupEnd - timing.domainLookupStart) : -1;\n      const connect = timing.connectEnd !== -1 ? helper.millisToRoundishMillis(timing.connectEnd - timing.connectStart) : -1;\n      const ssl = timing.connectEnd !== -1 ? helper.millisToRoundishMillis(timing.connectEnd - timing.secureConnectionStart) : -1;\n      const wait = timing.responseStart !== -1 ? helper.millisToRoundishMillis(timing.responseStart - timing.requestStart) : -1;\n      const receive = -1;\n\n      harEntry.timings = {\n        dns,\n        connect,\n        ssl,\n        send: 0,\n        wait,\n        receive,\n      };\n      this._computeHarEntryTotalTime(harEntry);\n    }\n\n    this._recordRequestOverrides(harEntry, request);\n    this._addBarrier(page || request.serviceWorker(), request.rawRequestHeaders().then(headers => {\n      this._recordRequestHeadersAndCookies(harEntry, headers);\n    }));\n    // Record available headers including redirect location in case the tracing is stopped before\n    // response extra info is received (in Chromium).\n    this._recordResponseHeaders(harEntry, response.headers());\n    this._addBarrier(page || request.serviceWorker(), response.rawResponseHeaders().then(headers => {\n      this._recordResponseHeaders(harEntry, headers);\n    }));\n  }\n\n  private _recordResponseHeaders(harEntry: har.Entry, headers: HeadersArray) {\n    if (!this._options.omitCookies) {\n      harEntry.response.cookies = headers\n          .filter(header => header.name.toLowerCase() === 'set-cookie')\n          .map(header => parseCookie(header.value));\n    }\n    harEntry.response.headers = headers;\n    const contentType = headers.find(header => header.name.toLowerCase() === 'content-type');\n    if (contentType)\n      harEntry.response.content.mimeType = contentType.value;\n  }\n\n  private _computeHarEntryTotalTime(harEntry: har.Entry) {\n    harEntry.time = [\n      harEntry.timings.dns,\n      harEntry.timings.connect,\n      harEntry.timings.ssl,\n      harEntry.timings.wait,\n      harEntry.timings.receive\n    ].reduce((pre, cur) => (cur || -1) > 0 ? cur! + pre! : pre, 0)!;\n  }\n\n  async flush() {\n    await Promise.all(this._barrierPromises);\n  }\n\n  stop() {\n    this._started = false;\n    eventsHelper.removeEventListeners(this._eventListeners);\n    this._barrierPromises.clear();\n\n    const context = this._context instanceof BrowserContext ? this._context : undefined;\n    const log: har.Log = {\n      version: '1.2',\n      creator: {\n        name: 'Playwright',\n        version: getPlaywrightVersion(),\n      },\n      browser: {\n        name: context?._browser.options.name || '',\n        version: context?._browser.version() || ''\n      },\n      pages: this._pageEntries.size ? Array.from(this._pageEntries.values()) : undefined,\n      entries: [],\n    };\n    if (!this._options.omitTiming) {\n      for (const pageEntry of log.pages || []) {\n        const startDateTime = ((pageEntry as any)[startedDateSymbol] as Date).valueOf();\n        if (typeof pageEntry.pageTimings.onContentLoad === 'number' && pageEntry.pageTimings.onContentLoad >= 0)\n          pageEntry.pageTimings.onContentLoad -= startDateTime;\n        else\n          pageEntry.pageTimings.onContentLoad = -1;\n        if (typeof pageEntry.pageTimings.onLoad === 'number' && pageEntry.pageTimings.onLoad >= 0)\n          pageEntry.pageTimings.onLoad -= startDateTime;\n        else\n          pageEntry.pageTimings.onLoad = -1;\n      }\n    }\n    this._pageEntries.clear();\n    return log;\n  }\n\n  private _postDataForRequest(request: network.Request, content: 'omit' | 'attach' | 'embed'): har.PostData | undefined {\n    const postData = request.postDataBuffer();\n    if (!postData)\n      return;\n\n    const contentType = request.headerValue('content-type');\n    return this._postDataForBuffer(postData, contentType, content);\n  }\n\n  private  _postDataForBuffer(postData: Buffer | null, contentType: string | undefined, content: 'omit' | 'attach' | 'embed'): har.PostData | undefined {\n    if (!postData)\n      return;\n\n    contentType ??= 'application/octet-stream';\n\n    const result: har.PostData = {\n      mimeType: contentType,\n      text: '',\n      params: []\n    };\n\n    if (content === 'embed' && contentType !== 'application/octet-stream')\n      result.text = postData.toString();\n\n    if (content === 'attach') {\n      const sha1 = calculateSha1(postData) + '.' + (mime.getExtension(contentType) || 'dat');\n      if (this._options.includeTraceInfo)\n        result._sha1 = sha1;\n      else\n        result._file = sha1;\n      this._delegate.onContentBlob(sha1, postData);\n    }\n\n    if (contentType === 'application/x-www-form-urlencoded') {\n      const parsed = new URLSearchParams(postData.toString());\n      for (const [name, value] of parsed.entries())\n        result.params.push({ name, value });\n    }\n\n    return result;\n  }\n\n}\n\nfunction createHarEntry(method: string, url: URL, frameref: string | undefined, options: HarTracerOptions): har.Entry {\n  const harEntry: har.Entry = {\n    _frameref: options.includeTraceInfo ? frameref : undefined,\n    _monotonicTime: options.includeTraceInfo ? monotonicTime() : undefined,\n    startedDateTime: new Date().toISOString(),\n    time: -1,\n    request: {\n      method: method,\n      url: url.toString(),\n      httpVersion: FALLBACK_HTTP_VERSION,\n      cookies: [],\n      headers: [],\n      queryString: [...url.searchParams].map(e => ({ name: e[0], value: e[1] })),\n      headersSize: -1,\n      bodySize: -1,\n    },\n    response: {\n      status: -1,\n      statusText: '',\n      httpVersion: FALLBACK_HTTP_VERSION,\n      cookies: [],\n      headers: [],\n      content: {\n        size: -1,\n        mimeType: 'x-unknown',\n      },\n      headersSize: -1,\n      bodySize: -1,\n      redirectURL: '',\n      _transferSize: options.omitSizes ? undefined : -1\n    },\n    cache: {},\n    timings: {\n      send: -1,\n      wait: -1,\n      receive: -1\n    },\n  };\n  return harEntry;\n}\n\nfunction parseCookie(c: string): har.Cookie {\n  const cookie: har.Cookie = {\n    name: '',\n    value: ''\n  };\n  let first = true;\n  for (const pair of c.split(/; */)) {\n    const indexOfEquals = pair.indexOf('=');\n    const name = indexOfEquals !== -1 ? pair.substr(0, indexOfEquals).trim() : pair.trim();\n    const value = indexOfEquals !== -1 ? pair.substr(indexOfEquals + 1, pair.length).trim() : '';\n    if (first) {\n      first = false;\n      cookie.name = name;\n      cookie.value = value;\n      continue;\n    }\n\n    if (name === 'Domain')\n      cookie.domain = value;\n    if (name === 'Expires')\n      cookie.expires = safeDateToISOString(value);\n    if (name === 'HttpOnly')\n      cookie.httpOnly = true;\n    if (name === 'Max-Age')\n      cookie.expires = safeDateToISOString(Date.now() + (+value) * 1000);\n    if (name === 'Path')\n      cookie.path = value;\n    if (name === 'SameSite')\n      cookie.sameSite = value;\n    if (name === 'Secure')\n      cookie.secure = true;\n  }\n  return cookie;\n}\n\nfunction safeDateToISOString(value: string | number) {\n  try {\n    return new Date(value).toISOString();\n  } catch (e) {\n  }\n}\n\nconst startedDateSymbol = Symbol('startedDate');\n"],
  "mappings": "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",
  "names": ["import_utils", "header"]
}
