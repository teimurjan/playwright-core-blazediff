{
  "version": 3,
  "sources": ["../../src/server/formData.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { mime } from '../utilsBundle';\n\nimport type * as channels from '@protocol/channels';\n\nexport class MultipartFormData {\n  private readonly _boundary: string;\n  private readonly _chunks: Buffer[] = [];\n\n  constructor() {\n    this._boundary = generateUniqueBoundaryString();\n  }\n\n  contentTypeHeader() {\n    return `multipart/form-data; boundary=${this._boundary}`;\n  }\n\n  addField(name: string, value: string) {\n    this._beginMultiPartHeader(name);\n    this._finishMultiPartHeader();\n    this._chunks.push(Buffer.from(value));\n    this._finishMultiPartField();\n  }\n\n  addFileField(name: string, value: NonNullable<channels.FormField['file']>) {\n    this._beginMultiPartHeader(name);\n    this._chunks.push(Buffer.from(`; filename=\"${value.name}\"`));\n    this._chunks.push(Buffer.from(`\\r\\ncontent-type: ${value.mimeType || mime.getType(value.name) || 'application/octet-stream'}`));\n    this._finishMultiPartHeader();\n    this._chunks.push(value.buffer);\n    this._finishMultiPartField();\n  }\n\n  finish(): Buffer {\n    this._addBoundary(true);\n    return Buffer.concat(this._chunks);\n  }\n\n  private _beginMultiPartHeader(name: string) {\n    this._addBoundary();\n    this._chunks.push(Buffer.from(`content-disposition: form-data; name=\"${name}\"`));\n  }\n\n  private _finishMultiPartHeader() {\n    this._chunks.push(Buffer.from(`\\r\\n\\r\\n`));\n  }\n\n  private _finishMultiPartField() {\n    this._chunks.push(Buffer.from(`\\r\\n`));\n  }\n\n  private _addBoundary(isLastBoundary?: boolean) {\n    this._chunks.push(Buffer.from('--' + this._boundary));\n    if (isLastBoundary)\n      this._chunks.push(Buffer.from('--'));\n    this._chunks.push(Buffer.from('\\r\\n'));\n  }\n}\n\nconst alphaNumericEncodingMap = [\n  0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,\n  0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,\n  0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,\n  0x59, 0x5A, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,\n  0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E,\n  0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76,\n  0x77, 0x78, 0x79, 0x7A, 0x30, 0x31, 0x32, 0x33,\n  0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42\n];\n\n// See generateUniqueBoundaryString() in WebKit\nfunction generateUniqueBoundaryString(): string {\n  const charCodes = [];\n  for (let i = 0; i < 16; i++)\n    charCodes.push(alphaNumericEncodingMap[Math.floor(Math.random() * alphaNumericEncodingMap.length)]);\n  return '----WebKitFormBoundary' + String.fromCharCode(...charCodes);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,yBAAqB;AAId,MAAM,kBAAkB;AAAA,EAI7B,cAAc;AAFd,SAAiB,UAAoB,CAAC;AAGpC,SAAK,YAAY,6BAA6B;AAAA,EAChD;AAAA,EAEA,oBAAoB;AAClB,WAAO,iCAAiC,KAAK,SAAS;AAAA,EACxD;AAAA,EAEA,SAAS,MAAc,OAAe;AACpC,SAAK,sBAAsB,IAAI;AAC/B,SAAK,uBAAuB;AAC5B,SAAK,QAAQ,KAAK,OAAO,KAAK,KAAK,CAAC;AACpC,SAAK,sBAAsB;AAAA,EAC7B;AAAA,EAEA,aAAa,MAAc,OAAgD;AACzE,SAAK,sBAAsB,IAAI;AAC/B,SAAK,QAAQ,KAAK,OAAO,KAAK,eAAe,MAAM,IAAI,GAAG,CAAC;AAC3D,SAAK,QAAQ,KAAK,OAAO,KAAK;AAAA,gBAAqB,MAAM,YAAY,wBAAK,QAAQ,MAAM,IAAI,KAAK,0BAA0B,EAAE,CAAC;AAC9H,SAAK,uBAAuB;AAC5B,SAAK,QAAQ,KAAK,MAAM,MAAM;AAC9B,SAAK,sBAAsB;AAAA,EAC7B;AAAA,EAEA,SAAiB;AACf,SAAK,aAAa,IAAI;AACtB,WAAO,OAAO,OAAO,KAAK,OAAO;AAAA,EACnC;AAAA,EAEQ,sBAAsB,MAAc;AAC1C,SAAK,aAAa;AAClB,SAAK,QAAQ,KAAK,OAAO,KAAK,yCAAyC,IAAI,GAAG,CAAC;AAAA,EACjF;AAAA,EAEQ,yBAAyB;AAC/B,SAAK,QAAQ,KAAK,OAAO,KAAK;AAAA;AAAA,CAAU,CAAC;AAAA,EAC3C;AAAA,EAEQ,wBAAwB;AAC9B,SAAK,QAAQ,KAAK,OAAO,KAAK;AAAA,CAAM,CAAC;AAAA,EACvC;AAAA,EAEQ,aAAa,gBAA0B;AAC7C,SAAK,QAAQ,KAAK,OAAO,KAAK,OAAO,KAAK,SAAS,CAAC;AACpD,QAAI;AACF,WAAK,QAAQ,KAAK,OAAO,KAAK,IAAI,CAAC;AACrC,SAAK,QAAQ,KAAK,OAAO,KAAK,MAAM,CAAC;AAAA,EACvC;AACF;AAEA,MAAM,0BAA0B;AAAA,EAC9B;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAC1C;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAC1C;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAC1C;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAC1C;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAC1C;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAC1C;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAC1C;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAC5C;AAGA,SAAS,+BAAuC;AAC9C,QAAM,YAAY,CAAC;AACnB,WAAS,IAAI,GAAG,IAAI,IAAI;AACtB,cAAU,KAAK,wBAAwB,KAAK,MAAM,KAAK,OAAO,IAAI,wBAAwB,MAAM,CAAC,CAAC;AACpG,SAAO,2BAA2B,OAAO,aAAa,GAAG,SAAS;AACpE;",
  "names": []
}
