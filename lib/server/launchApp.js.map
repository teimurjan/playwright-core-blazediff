{
  "version": 3,
  "sources": ["../../src/server/launchApp.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { isUnderTest, rewriteErrorMessage, wrapInASCIIBox } from '../utils';\nimport { buildPlaywrightCLICommand, findChromiumChannelBestEffort } from './registry';\nimport { registryDirectory } from './registry';\nimport { ProgressController } from './progress';\n\nimport type { BrowserType } from './browserType';\nimport type { CRPage } from './chromium/crPage';\nimport type { Page } from './page';\nimport type * as types from './types';\n\n\nexport async function launchApp(browserType: BrowserType, options: {\n  sdkLanguage: string,\n  windowSize: types.Size,\n  windowPosition?: types.Point,\n  persistentContextOptions?: Parameters<BrowserType['launchPersistentContext']>[2];\n}) {\n  const args = [...options.persistentContextOptions?.args ?? []];\n\n  let channel = options.persistentContextOptions?.channel;\n  if (browserType.name() === 'chromium') {\n    args.push(\n        '--app=data:text/html,',\n        `--window-size=${options.windowSize.width},${options.windowSize.height}`,\n        ...(options.windowPosition ? [`--window-position=${options.windowPosition.x},${options.windowPosition.y}`] : []),\n        '--test-type=',\n    );\n    if (!channel && !options.persistentContextOptions?.executablePath)\n      channel = findChromiumChannelBestEffort(options.sdkLanguage);\n  }\n\n  const controller = new ProgressController();\n  let context;\n  try {\n    context = await controller.run(progress => browserType.launchPersistentContext(progress, '', {\n      ignoreDefaultArgs: ['--enable-automation'],\n      ...options?.persistentContextOptions,\n      channel,\n      noDefaultViewport: options.persistentContextOptions?.noDefaultViewport ?? true,\n      acceptDownloads: options?.persistentContextOptions?.acceptDownloads ?? (isUnderTest() ? 'accept' : 'internal-browser-default'),\n      colorScheme: options?.persistentContextOptions?.colorScheme ?? 'no-override',\n      args,\n    }), 0); // Deliberately no timeout for our apps.\n  } catch (error) {\n    if (channel) {\n      error = rewriteErrorMessage(error, [\n        `Failed to launch \"${channel}\" channel.`,\n        'Using custom channels could lead to unexpected behavior due to Enterprise policies (chrome://policy).',\n        'Install the default browser instead:',\n        wrapInASCIIBox(`${buildPlaywrightCLICommand(options.sdkLanguage, 'install')}`, 2),\n      ].join('\\n'));\n    }\n    throw error;\n  }\n  const [page] = context.pages();\n  // Chromium on macOS opens a new tab when clicking on the dock icon.\n  // See https://github.com/microsoft/playwright/issues/9434\n  if (browserType.name() === 'chromium' && process.platform === 'darwin') {\n    context.on('page', async (newPage: Page) => {\n      if (newPage.mainFrame().url() === 'chrome://new-tab-page/') {\n        await page.bringToFront();\n        await newPage.close();\n      }\n    });\n  }\n  if (browserType.name() === 'chromium')\n    await installAppIcon(page);\n  return { context, page };\n}\n\nasync function installAppIcon(page: Page) {\n  const icon = await fs.promises.readFile(require.resolve('./chromium/appIcon.png'));\n  const crPage = page.delegate as CRPage;\n  await crPage._mainFrameSession._client.send('Browser.setDockTile', {\n    image: icon.toString('base64')\n  });\n}\n\nexport async function syncLocalStorageWithSettings(page: Page, appName: string) {\n  if (isUnderTest())\n    return;\n  const settingsFile = path.join(registryDirectory, '.settings', `${appName}.json`);\n\n  const controller = new ProgressController();\n  await controller.run(async progress => {\n    await page.exposeBinding(progress, '_saveSerializedSettings', false, (_, settings) => {\n      fs.mkdirSync(path.dirname(settingsFile), { recursive: true });\n      fs.writeFileSync(settingsFile, settings);\n    });\n\n    const settings = await fs.promises.readFile(settingsFile, 'utf-8').catch(() => ('{}'));\n    await page.addInitScript(progress,\n        `(${String((settings: any) => {\n          // iframes w/ snapshots, etc.\n          if (location && location.protocol === 'data:')\n            return;\n          if (window.top !== window)\n            return;\n          Object.entries(settings).map(([k, v]) => localStorage[k] = v);\n          (window as any).saveSettings = () => {\n            (window as any)._saveSerializedSettings(JSON.stringify({ ...localStorage }));\n          };\n        })})(${settings});\n    `);\n  });\n}\n"],
  "mappings": "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",
  "names": ["import_registry", "fs", "path", "settings"]
}
