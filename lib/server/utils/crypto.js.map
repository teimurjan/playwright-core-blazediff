{
  "version": 3,
  "sources": ["../../../src/server/utils/crypto.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport crypto from 'crypto';\n\nimport { assert } from '../../utils/isomorphic/assert';\n\nexport function createGuid(): string {\n  return crypto.randomBytes(16).toString('hex');\n}\n\nexport function calculateSha1(buffer: Buffer | string): string {\n  const hash = crypto.createHash('sha1');\n  hash.update(buffer);\n  return hash.digest('hex');\n}\n\n// Variable-length quantity encoding aka. base-128 encoding\nfunction encodeBase128(value: number): Buffer {\n  const bytes = [];\n  do {\n    let byte = value & 0x7f;\n    value >>>= 7;\n    if (bytes.length > 0)\n      byte |= 0x80;\n    bytes.push(byte);\n  } while (value > 0);\n  return Buffer.from(bytes.reverse());\n}\n\n// ASN1/DER Speficiation:   https://www.itu.int/rec/T-REC-X.680-X.693-202102-I/en\nclass DER {\n  static encodeSequence(data: Buffer[]): Buffer {\n    return this._encode(0x30, Buffer.concat(data));\n  }\n  static encodeInteger(data: number): Buffer {\n    assert(data >= -128 && data <= 127);\n    return this._encode(0x02, Buffer.from([data]));\n  }\n  static encodeObjectIdentifier(oid: string): Buffer {\n    const parts = oid.split('.').map(v => Number(v));\n    // Encode the second part, which could be large, using base-128 encoding if necessary\n    const output = [encodeBase128(40 * parts[0] + parts[1])];\n\n    for (let i = 2; i < parts.length; i++)\n      output.push(encodeBase128(parts[i]));\n\n\n    return this._encode(0x06, Buffer.concat(output));\n  }\n  static encodeNull(): Buffer {\n    return Buffer.from([0x05, 0x00]);\n  }\n  static encodeSet(data: Buffer[]): Buffer {\n    assert(data.length === 1, 'Only one item in the set is supported. We\\'d need to sort the data to support more.');\n    // We expect the data to be already sorted.\n    return this._encode(0x31, Buffer.concat(data));\n  }\n  static encodeExplicitContextDependent(tag: number, data: Buffer): Buffer {\n    return this._encode(0xa0 + tag, data);\n  }\n  static encodePrintableString(data: string): Buffer {\n    return this._encode(0x13, Buffer.from(data));\n  }\n  static encodeBitString(data: Buffer): Buffer {\n    // The first byte of the content is the number of unused bits at the end\n    const unusedBits = 0; // Assuming all bits are used\n    const content = Buffer.concat([Buffer.from([unusedBits]), data]);\n    return this._encode(0x03, content);\n  }\n  static encodeDate(date: Date): Buffer {\n    const year = date.getUTCFullYear();\n    const isGeneralizedTime = year >= 2050;\n    const parts = [\n      isGeneralizedTime ? year.toString() : year.toString().slice(-2),\n      (date.getUTCMonth() + 1).toString().padStart(2, '0'),\n      date.getUTCDate().toString().padStart(2, '0'),\n      date.getUTCHours().toString().padStart(2, '0'),\n      date.getUTCMinutes().toString().padStart(2, '0'),\n      date.getUTCSeconds().toString().padStart(2, '0')\n    ];\n    const encodedDate = parts.join('') + 'Z';\n    const tag = isGeneralizedTime ? 0x18 : 0x17; // 0x18 for GeneralizedTime, 0x17 for UTCTime\n    return this._encode(tag, Buffer.from(encodedDate));\n  }\n  private static _encode(tag: number, data: Buffer): Buffer {\n    const lengthBytes = this._encodeLength(data.length);\n    return Buffer.concat([Buffer.from([tag]), lengthBytes, data]);\n  }\n  private static _encodeLength(length: number): Buffer {\n    if (length < 128) {\n      return Buffer.from([length]);\n    } else {\n      const lengthBytes = [];\n      while (length > 0) {\n        lengthBytes.unshift(length & 0xFF);\n        length >>= 8;\n      }\n      return Buffer.from([0x80 | lengthBytes.length, ...lengthBytes]);\n    }\n  }\n}\n\n// X.509 Specification: https://datatracker.ietf.org/doc/html/rfc2459#section-4.1\nexport function generateSelfSignedCertificate() {\n  const { privateKey, publicKey } = crypto.generateKeyPairSync('rsa', { modulusLength: 2048 });\n  const publicKeyDer = publicKey.export({ type: 'pkcs1', format: 'der' });\n\n  const oneYearInMilliseconds = 365 * 24 * 60 * 60 * 1_000;\n  const notBefore = new Date(new Date().getTime() - oneYearInMilliseconds);\n  const notAfter = new Date(new Date().getTime() + oneYearInMilliseconds);\n\n  // List of fields / structure: https://datatracker.ietf.org/doc/html/rfc2459#section-4.1\n  const tbsCertificate = DER.encodeSequence([\n    DER.encodeExplicitContextDependent(0, DER.encodeInteger(1)), // version\n    DER.encodeInteger(1), // serialNumber\n    DER.encodeSequence([\n      DER.encodeObjectIdentifier('1.2.840.113549.1.1.11'), // sha256WithRSAEncryption PKCS #1\n      DER.encodeNull()\n    ]), // signature\n    DER.encodeSequence([\n      DER.encodeSet([\n        DER.encodeSequence([\n          DER.encodeObjectIdentifier('2.5.4.3'), // commonName X.520 DN component\n          DER.encodePrintableString('localhost')\n        ]),\n      ]),\n      DER.encodeSet([\n        DER.encodeSequence([\n          DER.encodeObjectIdentifier('2.5.4.10'), // organizationName X.520 DN component\n          DER.encodePrintableString('Playwright Client Certificate Support')\n        ])\n      ])\n    ]), // issuer\n    DER.encodeSequence([\n      DER.encodeDate(notBefore), // notBefore\n      DER.encodeDate(notAfter), // notAfter\n    ]), // validity\n    DER.encodeSequence([\n      DER.encodeSet([\n        DER.encodeSequence([\n          DER.encodeObjectIdentifier('2.5.4.3'), // commonName X.520 DN component\n          DER.encodePrintableString('localhost')\n        ]),\n      ]),\n      DER.encodeSet([\n        DER.encodeSequence([\n          DER.encodeObjectIdentifier('2.5.4.10'), // organizationName X.520 DN component\n          DER.encodePrintableString('Playwright Client Certificate Support')\n        ])\n      ])\n    ]), // subject\n    DER.encodeSequence([\n      DER.encodeSequence([\n        DER.encodeObjectIdentifier('1.2.840.113549.1.1.1'), // rsaEncryption PKCS #1\n        DER.encodeNull()\n      ]),\n      DER.encodeBitString(publicKeyDer)\n    ]), // SubjectPublicKeyInfo\n  ]);\n\n  const signature = crypto.sign('sha256', tbsCertificate, privateKey);\n\n  const certificate = DER.encodeSequence([\n    tbsCertificate,\n    DER.encodeSequence([\n      DER.encodeObjectIdentifier('1.2.840.113549.1.1.11'), // sha256WithRSAEncryption PKCS #1\n      DER.encodeNull()\n    ]),\n    DER.encodeBitString(signature)\n  ]);\n\n  const certPem = [\n    '-----BEGIN CERTIFICATE-----',\n    // Split the base64 string into lines of 64 characters\n    certificate.toString('base64').match(/.{1,64}/g)!.join('\\n'),\n    '-----END CERTIFICATE-----'\n  ].join('\\n');\n\n  return {\n    cert: certPem,\n    key: privateKey.export({ type: 'pkcs1', format: 'pem' }),\n  };\n}\n"],
  "mappings": "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",
  "names": ["crypto"]
}
