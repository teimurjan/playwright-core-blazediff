{
  "version": 3,
  "sources": ["../../../src/server/utils/debugLogger.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\n\nimport { debug } from '../../utilsBundle';\n\nconst debugLoggerColorMap = {\n  'api': 45, // cyan\n  'protocol': 34, // green\n  'install': 34, // green\n  'download': 34, // green\n  'browser': 0, // reset\n  'socks': 92, // purple\n  'client-certificates': 92, // purple\n  'error': 160, // red,\n  'channel': 33, // blue\n  'server': 45, // cyan\n  'server:channel': 34, // green\n  'server:metadata': 33, // blue,\n  'recorder': 45, // cyan\n};\nexport type LogName = keyof typeof debugLoggerColorMap;\n\nclass DebugLogger {\n  private _debuggers = new Map<string, debug.IDebugger>();\n\n  constructor() {\n    if (process.env.DEBUG_FILE) {\n      const ansiRegex = new RegExp([\n        '[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n        '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n      ].join('|'), 'g');\n      const stream = fs.createWriteStream(process.env.DEBUG_FILE);\n      (debug as any).log = (data: string) => {\n        stream.write(data.replace(ansiRegex, ''));\n        stream.write('\\n');\n      };\n    }\n  }\n\n  log(name: LogName, message: string | Error | object) {\n    let cachedDebugger = this._debuggers.get(name);\n    if (!cachedDebugger) {\n      cachedDebugger = debug(`pw:${name}`);\n      this._debuggers.set(name, cachedDebugger);\n      (cachedDebugger as any).color = debugLoggerColorMap[name] || 0;\n    }\n    cachedDebugger(message);\n  }\n\n  isEnabled(name: LogName) {\n    return debug.enabled(`pw:${name}`);\n  }\n}\n\nexport const debugLogger = new DebugLogger();\n\nconst kLogCount = 150;\nexport class RecentLogsCollector {\n  private _logs: string[] = [];\n  private _listeners: ((log: string) => void)[] = [];\n\n  log(message: string) {\n    this._logs.push(message);\n    if (this._logs.length === kLogCount * 2)\n      this._logs.splice(0, kLogCount);\n    for (const listener of this._listeners)\n      listener(message);\n  }\n\n  recentLogs(): string[] {\n    if (this._logs.length > kLogCount)\n      return this._logs.slice(-kLogCount);\n    return this._logs;\n  }\n\n  onMessage(listener: (message: string) => void) {\n    for (const message of this._logs)\n      listener(message);\n    this._listeners.push(listener);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,gBAAe;AAEf,yBAAsB;AAEtB,MAAM,sBAAsB;AAAA,EAC1B,OAAO;AAAA;AAAA,EACP,YAAY;AAAA;AAAA,EACZ,WAAW;AAAA;AAAA,EACX,YAAY;AAAA;AAAA,EACZ,WAAW;AAAA;AAAA,EACX,SAAS;AAAA;AAAA,EACT,uBAAuB;AAAA;AAAA,EACvB,SAAS;AAAA;AAAA,EACT,WAAW;AAAA;AAAA,EACX,UAAU;AAAA;AAAA,EACV,kBAAkB;AAAA;AAAA,EAClB,mBAAmB;AAAA;AAAA,EACnB,YAAY;AAAA;AACd;AAGA,MAAM,YAAY;AAAA,EAGhB,cAAc;AAFd,SAAQ,aAAa,oBAAI,IAA6B;AAGpD,QAAI,QAAQ,IAAI,YAAY;AAC1B,YAAM,YAAY,IAAI,OAAO;AAAA,QAC3B;AAAA,QACA;AAAA,MACF,EAAE,KAAK,GAAG,GAAG,GAAG;AAChB,YAAM,SAAS,UAAAA,QAAG,kBAAkB,QAAQ,IAAI,UAAU;AAC1D,MAAC,yBAAc,MAAM,CAAC,SAAiB;AACrC,eAAO,MAAM,KAAK,QAAQ,WAAW,EAAE,CAAC;AACxC,eAAO,MAAM,IAAI;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AAAA,EAEA,IAAI,MAAe,SAAkC;AACnD,QAAI,iBAAiB,KAAK,WAAW,IAAI,IAAI;AAC7C,QAAI,CAAC,gBAAgB;AACnB,2BAAiB,0BAAM,MAAM,IAAI,EAAE;AACnC,WAAK,WAAW,IAAI,MAAM,cAAc;AACxC,MAAC,eAAuB,QAAQ,oBAAoB,IAAI,KAAK;AAAA,IAC/D;AACA,mBAAe,OAAO;AAAA,EACxB;AAAA,EAEA,UAAU,MAAe;AACvB,WAAO,yBAAM,QAAQ,MAAM,IAAI,EAAE;AAAA,EACnC;AACF;AAEO,MAAM,cAAc,IAAI,YAAY;AAE3C,MAAM,YAAY;AACX,MAAM,oBAAoB;AAAA,EAA1B;AACL,SAAQ,QAAkB,CAAC;AAC3B,SAAQ,aAAwC,CAAC;AAAA;AAAA,EAEjD,IAAI,SAAiB;AACnB,SAAK,MAAM,KAAK,OAAO;AACvB,QAAI,KAAK,MAAM,WAAW,YAAY;AACpC,WAAK,MAAM,OAAO,GAAG,SAAS;AAChC,eAAW,YAAY,KAAK;AAC1B,eAAS,OAAO;AAAA,EACpB;AAAA,EAEA,aAAuB;AACrB,QAAI,KAAK,MAAM,SAAS;AACtB,aAAO,KAAK,MAAM,MAAM,CAAC,SAAS;AACpC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,UAAU,UAAqC;AAC7C,eAAW,WAAW,KAAK;AACzB,eAAS,OAAO;AAClB,SAAK,WAAW,KAAK,QAAQ;AAAA,EAC/B;AACF;",
  "names": ["fs"]
}
