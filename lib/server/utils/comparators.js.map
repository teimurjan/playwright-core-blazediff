{
  "version": 3,
  "sources": ["../../../src/server/utils/comparators.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport blazediff from '@blazediff/core';\nimport { compare } from './image_tools/compare';\nimport { jpegjs } from '../../utilsBundle';\nimport { colors, diff } from '../../utilsBundle';\nimport { PNG } from '../../utilsBundle';\n\nexport type ImageComparatorOptions = { threshold?: number, maxDiffPixels?: number, maxDiffPixelRatio?: number, comparator?: string };\nexport type ComparatorResult = { diff?: Buffer; errorMessage: string; } | null;\nexport type Comparator = (actualBuffer: Buffer | string, expectedBuffer: Buffer, options?: any) => ComparatorResult;\n\nexport function getComparator(mimeType: string): Comparator {\n  if (mimeType === 'image/png')\n    return compareImages.bind(null, 'image/png');\n  if (mimeType === 'image/jpeg')\n    return compareImages.bind(null, 'image/jpeg');\n  if (mimeType === 'text/plain')\n    return compareText;\n  return compareBuffersOrStrings;\n}\n\nconst JPEG_JS_MAX_BUFFER_SIZE_IN_MB = 5 * 1024; // ~5 GB\n\nexport function compareBuffersOrStrings(actualBuffer: Buffer | string, expectedBuffer: Buffer): ComparatorResult {\n  if (typeof actualBuffer === 'string')\n    return compareText(actualBuffer, expectedBuffer);\n  if (!actualBuffer || !(actualBuffer instanceof Buffer))\n    return { errorMessage: 'Actual result should be a Buffer or a string.' };\n  if (Buffer.compare(actualBuffer, expectedBuffer))\n    return { errorMessage: 'Buffers differ' };\n  return null;\n}\n\ntype ImageData = { width: number, height: number, data: Buffer };\n\nfunction compareImages(mimeType: string, actualBuffer: Buffer | string, expectedBuffer: Buffer, options: ImageComparatorOptions = {}): ComparatorResult {\n  if (!actualBuffer || !(actualBuffer instanceof Buffer))\n    return { errorMessage: 'Actual result should be a Buffer.' };\n  validateBuffer(expectedBuffer, mimeType);\n\n  let actual: ImageData = mimeType === 'image/png' ? PNG.sync.read(actualBuffer) : jpegjs.decode(actualBuffer, { maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB });\n  let expected: ImageData = mimeType === 'image/png' ? PNG.sync.read(expectedBuffer) : jpegjs.decode(expectedBuffer, { maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB });\n  const size = { width: Math.max(expected.width, actual.width), height: Math.max(expected.height, actual.height) };\n  let sizesMismatchError = '';\n  if (expected.width !== actual.width || expected.height !== actual.height) {\n    sizesMismatchError = `Expected an image ${expected.width}px by ${expected.height}px, received ${actual.width}px by ${actual.height}px. `;\n    actual = resizeImage(actual, size);\n    expected = resizeImage(expected, size);\n  }\n  const diff = new PNG({ width: size.width, height: size.height });\n  let count;\n  if (options.comparator === 'ssim-cie94') {\n    count = compare(expected.data, actual.data, diff.data, size.width, size.height, {\n      // All \u0394E* formulae are originally designed to have the difference of 1.0 stand for a \"just noticeable difference\" (JND).\n      // See https://en.wikipedia.org/wiki/Color_difference#CIELAB_%CE%94E*\n      maxColorDeltaE94: 1.0,\n    });\n  } else if ((options.comparator ?? 'blazediff') === 'blazediff') {\n    count = blazediff(expected.data, actual.data, diff.data, size.width, size.height, {\n      threshold: options.threshold ?? 0.2,\n    });\n  } else {\n    throw new Error(`Configuration specifies unknown comparator \"${options.comparator}\"`);\n  }\n\n  const maxDiffPixels1 = options.maxDiffPixels;\n  const maxDiffPixels2 = options.maxDiffPixelRatio !== undefined ? expected.width * expected.height * options.maxDiffPixelRatio : undefined;\n  let maxDiffPixels;\n  if (maxDiffPixels1 !== undefined && maxDiffPixels2 !== undefined)\n    maxDiffPixels = Math.min(maxDiffPixels1, maxDiffPixels2);\n  else\n    maxDiffPixels = maxDiffPixels1 ?? maxDiffPixels2 ?? 0;\n  const ratio = Math.ceil(count / (expected.width * expected.height) * 100) / 100;\n  const pixelsMismatchError = count > maxDiffPixels ? `${count} pixels (ratio ${ratio.toFixed(2)} of all image pixels) are different.` : '';\n  if (pixelsMismatchError || sizesMismatchError)\n    return { errorMessage: sizesMismatchError + pixelsMismatchError, diff: PNG.sync.write(diff) };\n  return null;\n}\n\nfunction validateBuffer(buffer: Buffer, mimeType: string): void {\n  if (mimeType === 'image/png') {\n    const pngMagicNumber = [137, 80, 78, 71, 13, 10, 26, 10];\n    if (buffer.length < pngMagicNumber.length || !pngMagicNumber.every((byte, index) => buffer[index] === byte))\n      throw new Error('Could not decode expected image as PNG.');\n  } else if (mimeType === 'image/jpeg') {\n    const jpegMagicNumber = [255, 216];\n    if (buffer.length < jpegMagicNumber.length || !jpegMagicNumber.every((byte, index) => buffer[index] === byte))\n      throw new Error('Could not decode expected image as JPEG.');\n  }\n}\n\nfunction compareText(actual: Buffer | string, expectedBuffer: Buffer): ComparatorResult {\n  if (typeof actual !== 'string')\n    return { errorMessage: 'Actual result should be a string' };\n  let expected = expectedBuffer.toString('utf-8');\n  if (expected === actual)\n    return null;\n  // Eliminate '\\\\ No newline at end of file'\n  if (!actual.endsWith('\\n'))\n    actual += '\\n';\n  if (!expected.endsWith('\\n'))\n    expected += '\\n';\n\n  const lines = diff.createPatch('file', expected, actual, undefined, undefined, { context: 5 }).split('\\n');\n  const coloredLines = lines.slice(4).map(line => {\n    if (line.startsWith('-'))\n      return colors.green(line);\n    if (line.startsWith('+'))\n      return colors.red(line);\n    if (line.startsWith('@@'))\n      return colors.dim(line);\n    return line;\n  });\n  const errorMessage = coloredLines.join('\\n');\n  return { errorMessage  };\n}\n\nfunction resizeImage(image: ImageData, size: { width: number, height: number }): ImageData {\n  if (image.width === size.width && image.height === size.height)\n    return image;\n  const buffer = new Uint8Array(size.width * size.height * 4);\n  for (let y = 0; y < size.height; y++) {\n    for (let x = 0; x < size.width; x++) {\n      const to = (y * size.width + x) * 4;\n      if (y < image.height && x < image.width) {\n        const from = (y * image.width + x) * 4;\n        buffer[to] = image.data[from];\n        buffer[to + 1] = image.data[from + 1];\n        buffer[to + 2] = image.data[from + 2];\n        buffer[to + 3] = image.data[from + 3];\n      } else {\n        buffer[to] = 0;\n        buffer[to + 1] = 0;\n        buffer[to + 2] = 0;\n        buffer[to + 3] = 0;\n      }\n    }\n  }\n  return { data: Buffer.from(buffer), width: size.width, height: size.height };\n}\n"],
  "mappings": "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",
  "names": ["import_utilsBundle", "diff", "blazediff"]
}
