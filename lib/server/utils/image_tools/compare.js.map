{
  "version": 3,
  "sources": ["../../../../src/server/utils/image_tools/compare.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { blendWithWhite, colorDeltaE94, rgb2gray } from './colorUtils';\nimport { ImageChannel } from './imageChannel';\nimport { FastStats, ssim } from './stats';\n\nconst SSIM_WINDOW_RADIUS = 15;\nconst VARIANCE_WINDOW_RADIUS = 1;\n\nfunction drawPixel(width: number, data: Buffer, x: number, y: number, r: number, g: number, b: number) {\n  const idx = (y * width + x) * 4;\n  data[idx + 0] = r;\n  data[idx + 1] = g;\n  data[idx + 2] = b;\n  data[idx + 3] = 255;\n}\n\ntype CompareOptions = {\n  maxColorDeltaE94?: number;\n};\n\nexport function compare(actual: Buffer, expected: Buffer, diff: Buffer|null, width: number, height: number, options: CompareOptions = {}) {\n  const {\n    maxColorDeltaE94 = 1.0,\n  } = options;\n\n  const paddingSize = Math.max(VARIANCE_WINDOW_RADIUS, SSIM_WINDOW_RADIUS);\n  const paddingColorEven = [255, 0, 255];\n  const paddingColorOdd = [0, 255, 0];\n  const [r1, g1, b1] = ImageChannel.intoRGB(width, height, expected, {\n    paddingSize,\n    paddingColorEven,\n    paddingColorOdd,\n  });\n  const [r2, g2, b2] = ImageChannel.intoRGB(width, height, actual, {\n    paddingSize,\n    paddingColorEven,\n    paddingColorOdd,\n  });\n\n  const noop = (x: number, y: number) => {};\n  const drawRedPixel = diff ? (x: number, y: number) => drawPixel(width, diff, x - paddingSize, y - paddingSize, 255, 0, 0) : noop;\n  const drawYellowPixel = diff ? (x: number, y: number) => drawPixel(width, diff, x - paddingSize, y - paddingSize, 255, 255, 0) : noop;\n  const drawGrayPixel = diff ? (x: number, y: number) => {\n    const gray = rgb2gray(r1.get(x, y), g1.get(x, y), b1.get(x, y));\n    const value = blendWithWhite(gray, 0.1);\n    drawPixel(width, diff, x - paddingSize, y - paddingSize, value, value, value);\n  } : noop;\n\n  let fastR, fastG, fastB;\n\n  let diffCount = 0;\n  for (let y = paddingSize; y < r1.height - paddingSize; ++y){\n    for (let x = paddingSize; x < r1.width - paddingSize; ++x) {\n      // Fast-path: equal pixels.\n      if (r1.get(x, y) === r2.get(x, y) && g1.get(x, y) === g2.get(x, y) && b1.get(x, y) === b2.get(x, y)) {\n        drawGrayPixel(x, y);\n        continue;\n      }\n\n      // Compare pixel colors using the dE94 color difference formulae.\n      // The dE94 is normalized so that the value of 1.0 is the \"just-noticeable-difference\".\n      // Color difference below 1.0 is not noticeable to a human eye, so we can disregard it.\n      // See https://en.wikipedia.org/wiki/Color_difference\n      const delta = colorDeltaE94(\n          [r1.get(x, y), g1.get(x, y), b1.get(x, y)],\n          [r2.get(x, y), g2.get(x, y), b2.get(x, y)]\n      );\n\n      if (delta <= maxColorDeltaE94) {\n        drawGrayPixel(x, y);\n        continue;\n      }\n\n      if (!fastR || !fastG || !fastB) {\n        fastR = new FastStats(r1, r2);\n        fastG = new FastStats(g1, g2);\n        fastB = new FastStats(b1, b2);\n      }\n      const [varX1, varY1] = r1.boundXY(x - VARIANCE_WINDOW_RADIUS, y - VARIANCE_WINDOW_RADIUS);\n      const [varX2, varY2] = r1.boundXY(x + VARIANCE_WINDOW_RADIUS, y + VARIANCE_WINDOW_RADIUS);\n      const var1 = fastR.varianceC1(varX1, varY1, varX2, varY2) + fastG.varianceC1(varX1, varY1, varX2, varY2) + fastB.varianceC1(varX1, varY1, varX2, varY2);\n      const var2 = fastR.varianceC2(varX1, varY1, varX2, varY2) + fastG.varianceC2(varX1, varY1, varX2, varY2) + fastB.varianceC2(varX1, varY1, varX2, varY2);\n      // if this pixel is a part of a flood fill of a 3x3 square of either of the images, then it cannot be\n      // anti-aliasing pixel so it must be a pixel difference.\n      if (var1 === 0 || var2 === 0) {\n        drawRedPixel(x, y);\n        ++diffCount;\n        continue;\n      }\n\n      const [ssimX1, ssimY1] = r1.boundXY(x - SSIM_WINDOW_RADIUS, y - SSIM_WINDOW_RADIUS);\n      const [ssimX2, ssimY2] = r1.boundXY(x + SSIM_WINDOW_RADIUS, y + SSIM_WINDOW_RADIUS);\n      const ssimRGB = (ssim(fastR, ssimX1, ssimY1, ssimX2, ssimY2) + ssim(fastG, ssimX1, ssimY1, ssimX2, ssimY2) + ssim(fastB, ssimX1, ssimY1, ssimX2, ssimY2)) / 3.0;\n      const isAntialiased = ssimRGB >= 0.99;\n      if (isAntialiased) {\n        drawYellowPixel(x, y);\n      } else {\n        drawRedPixel(x, y);\n        ++diffCount;\n      }\n    }\n  }\n\n  return diffCount;\n}\n"],
  "mappings": "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",
  "names": []
}
