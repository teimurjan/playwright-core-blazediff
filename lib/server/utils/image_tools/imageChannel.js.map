{
  "version": 3,
  "sources": ["../../../../src/server/utils/image_tools/imageChannel.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { blendWithWhite } from './colorUtils';\n\nexport type PaddingOptions = {\n  paddingSize?: number,\n  paddingColorOdd?: number[],\n  paddingColorEven?: number[],\n};\n\nexport class ImageChannel {\n  data: Uint8Array;\n  width: number;\n  height: number;\n\n  static intoRGB(width: number, height: number, data: Buffer, options: PaddingOptions = {}): ImageChannel[] {\n    const {\n      paddingSize = 0,\n      paddingColorOdd = [255, 0, 255],\n      paddingColorEven = [0, 255, 0],\n    } = options;\n    const newWidth = width + 2 * paddingSize;\n    const newHeight = height + 2 * paddingSize;\n    const r = new Uint8Array(newWidth * newHeight);\n    const g = new Uint8Array(newWidth * newHeight);\n    const b = new Uint8Array(newWidth * newHeight);\n    for (let y = 0; y < newHeight; ++y) {\n      for (let x = 0; x < newWidth; ++x) {\n        const index = y * newWidth + x;\n        if (y >= paddingSize && y < newHeight - paddingSize && x >= paddingSize && x < newWidth - paddingSize) {\n          const offset = ((y - paddingSize) * width + (x - paddingSize)) * 4;\n          const alpha = data[offset + 3] === 255 ? 1 : data[offset + 3] / 255;\n          r[index] = blendWithWhite(data[offset], alpha);\n          g[index] = blendWithWhite(data[offset + 1], alpha);\n          b[index] = blendWithWhite(data[offset + 2], alpha);\n        } else {\n          const color = (y + x) % 2 === 0 ? paddingColorEven : paddingColorOdd;\n          r[index] = color[0];\n          g[index] = color[1];\n          b[index] = color[2];\n        }\n      }\n    }\n    return [\n      new ImageChannel(newWidth, newHeight, r),\n      new ImageChannel(newWidth, newHeight, g),\n      new ImageChannel(newWidth, newHeight, b),\n    ];\n  }\n\n  constructor(width: number, height: number, data: Uint8Array) {\n    this.data = data;\n    this.width = width;\n    this.height = height;\n  }\n\n  get(x: number, y: number) {\n    return this.data[y * this.width + x];\n  }\n\n  boundXY(x: number, y: number) {\n    return [\n      Math.min(Math.max(x, 0), this.width - 1),\n      Math.min(Math.max(y, 0), this.height - 1),\n    ];\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,wBAA+B;AAQxB,MAAM,aAAa;AAAA,EAKxB,OAAO,QAAQ,OAAe,QAAgB,MAAc,UAA0B,CAAC,GAAmB;AACxG,UAAM;AAAA,MACJ,cAAc;AAAA,MACd,kBAAkB,CAAC,KAAK,GAAG,GAAG;AAAA,MAC9B,mBAAmB,CAAC,GAAG,KAAK,CAAC;AAAA,IAC/B,IAAI;AACJ,UAAM,WAAW,QAAQ,IAAI;AAC7B,UAAM,YAAY,SAAS,IAAI;AAC/B,UAAM,IAAI,IAAI,WAAW,WAAW,SAAS;AAC7C,UAAM,IAAI,IAAI,WAAW,WAAW,SAAS;AAC7C,UAAM,IAAI,IAAI,WAAW,WAAW,SAAS;AAC7C,aAAS,IAAI,GAAG,IAAI,WAAW,EAAE,GAAG;AAClC,eAAS,IAAI,GAAG,IAAI,UAAU,EAAE,GAAG;AACjC,cAAM,QAAQ,IAAI,WAAW;AAC7B,YAAI,KAAK,eAAe,IAAI,YAAY,eAAe,KAAK,eAAe,IAAI,WAAW,aAAa;AACrG,gBAAM,WAAW,IAAI,eAAe,SAAS,IAAI,gBAAgB;AACjE,gBAAM,QAAQ,KAAK,SAAS,CAAC,MAAM,MAAM,IAAI,KAAK,SAAS,CAAC,IAAI;AAChE,YAAE,KAAK,QAAI,kCAAe,KAAK,MAAM,GAAG,KAAK;AAC7C,YAAE,KAAK,QAAI,kCAAe,KAAK,SAAS,CAAC,GAAG,KAAK;AACjD,YAAE,KAAK,QAAI,kCAAe,KAAK,SAAS,CAAC,GAAG,KAAK;AAAA,QACnD,OAAO;AACL,gBAAM,SAAS,IAAI,KAAK,MAAM,IAAI,mBAAmB;AACrD,YAAE,KAAK,IAAI,MAAM,CAAC;AAClB,YAAE,KAAK,IAAI,MAAM,CAAC;AAClB,YAAE,KAAK,IAAI,MAAM,CAAC;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,MACL,IAAI,aAAa,UAAU,WAAW,CAAC;AAAA,MACvC,IAAI,aAAa,UAAU,WAAW,CAAC;AAAA,MACvC,IAAI,aAAa,UAAU,WAAW,CAAC;AAAA,IACzC;AAAA,EACF;AAAA,EAEA,YAAY,OAAe,QAAgB,MAAkB;AAC3D,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,IAAI,GAAW,GAAW;AACxB,WAAO,KAAK,KAAK,IAAI,KAAK,QAAQ,CAAC;AAAA,EACrC;AAAA,EAEA,QAAQ,GAAW,GAAW;AAC5B,WAAO;AAAA,MACL,KAAK,IAAI,KAAK,IAAI,GAAG,CAAC,GAAG,KAAK,QAAQ,CAAC;AAAA,MACvC,KAAK,IAAI,KAAK,IAAI,GAAG,CAAC,GAAG,KAAK,SAAS,CAAC;AAAA,IAC1C;AAAA,EACF;AACF;",
  "names": []
}
