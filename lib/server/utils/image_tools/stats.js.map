{
  "version": 3,
  "sources": ["../../../../src/server/utils/image_tools/stats.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ImageChannel } from './imageChannel';\n\nexport interface Stats {\n  c1: ImageChannel;\n  c2: ImageChannel;\n\n  // Compute mean value. See https://en.wikipedia.org/wiki/Mean\n  meanC1(x1: number, y1: number, x2: number, y2: number): number;\n  meanC2(x1: number, y1: number, x2: number, y2: number): number;\n  // Compute **population** (not sample) variance. See https://en.wikipedia.org/wiki/Variance\n  varianceC1(x1: number, y1: number, x2: number, y2: number): number;\n  varianceC2(x1: number, y1: number, x2: number, y2: number): number;\n  // Compute covariance. See https://en.wikipedia.org/wiki/Covariance\n  covariance(x1: number, y1: number, x2: number, y2: number): number;\n}\n\n// Image channel has a 8-bit depth.\nconst DYNAMIC_RANGE = 2 ** 8 - 1;\n\nexport function ssim(stats: Stats, x1: number, y1: number, x2: number, y2: number): number {\n  const mean1 = stats.meanC1(x1, y1, x2, y2);\n  const mean2 = stats.meanC2(x1, y1, x2, y2);\n  const var1 = stats.varianceC1(x1, y1, x2, y2);\n  const var2 = stats.varianceC2(x1, y1, x2, y2);\n  const cov = stats.covariance(x1, y1, x2, y2);\n  const c1 = (0.01 * DYNAMIC_RANGE) ** 2;\n  const c2 = (0.03 * DYNAMIC_RANGE) ** 2;\n  return (2 * mean1 * mean2 + c1) * (2 * cov + c2) / (mean1 ** 2 + mean2 ** 2 + c1) / (var1 + var2 + c2);\n}\n\nexport class FastStats implements Stats {\n  c1: ImageChannel;\n  c2: ImageChannel;\n\n  private _partialSumC1: number[];\n  private _partialSumC2: number[];\n  private _partialSumMult: number[];\n  private _partialSumSq1: number[];\n  private _partialSumSq2: number[];\n\n  constructor(c1: ImageChannel, c2: ImageChannel) {\n    this.c1 = c1;\n    this.c2 = c2;\n    const { width, height } = c1;\n\n    this._partialSumC1 = new Array(width * height);\n    this._partialSumC2 = new Array(width * height);\n    this._partialSumSq1 = new Array(width * height);\n    this._partialSumSq2 = new Array(width * height);\n    this._partialSumMult = new Array(width * height);\n\n    const recalc = (mx: number[], idx: number, initial: number, x: number, y: number) => {\n      mx[idx] = initial;\n      if (y > 0)\n        mx[idx] += mx[(y - 1) * width + x];\n      if (x > 0)\n        mx[idx] += mx[y * width + x - 1];\n      if (x > 0 && y > 0)\n        mx[idx] -= mx[(y - 1) * width + x - 1];\n    };\n\n    for (let y = 0; y < height; ++y) {\n      for (let x = 0; x < width; ++x) {\n        const idx = y * width + x;\n        recalc(this._partialSumC1, idx, this.c1.data[idx], x, y);\n        recalc(this._partialSumC2, idx, this.c2.data[idx], x, y);\n        recalc(this._partialSumSq1, idx, this.c1.data[idx] * this.c1.data[idx], x, y);\n        recalc(this._partialSumSq2, idx, this.c2.data[idx] * this.c2.data[idx], x, y);\n        recalc(this._partialSumMult, idx, this.c1.data[idx] * this.c2.data[idx], x, y);\n      }\n    }\n  }\n\n  _sum(partialSum: number[], x1: number, y1: number, x2: number, y2: number): number {\n    const width = this.c1.width;\n    let result = partialSum[y2 * width + x2];\n    if (y1 > 0)\n      result -= partialSum[(y1 - 1) * width + x2];\n    if (x1 > 0)\n      result -= partialSum[y2 * width + x1 - 1];\n    if (x1 > 0 && y1 > 0)\n      result += partialSum[(y1 - 1) * width + x1 - 1];\n    return result;\n  }\n\n  meanC1(x1: number, y1: number, x2: number, y2: number): number {\n    const N = (y2 - y1 + 1) * (x2 - x1 + 1);\n    return this._sum(this._partialSumC1, x1, y1, x2, y2) / N;\n  }\n\n  meanC2(x1: number, y1: number, x2: number, y2: number): number {\n    const N = (y2 - y1 + 1) * (x2 - x1 + 1);\n    return this._sum(this._partialSumC2, x1, y1, x2, y2) / N;\n  }\n\n  varianceC1(x1: number, y1: number, x2: number, y2: number): number {\n    const N = (y2 - y1 + 1) * (x2 - x1 + 1);\n    return (this._sum(this._partialSumSq1, x1, y1, x2, y2) - (this._sum(this._partialSumC1, x1, y1, x2, y2) ** 2) / N) / N;\n  }\n\n  varianceC2(x1: number, y1: number, x2: number, y2: number): number {\n    const N = (y2 - y1 + 1) * (x2 - x1 + 1);\n    return (this._sum(this._partialSumSq2, x1, y1, x2, y2) - (this._sum(this._partialSumC2, x1, y1, x2, y2) ** 2) / N) / N;\n  }\n\n  covariance(x1: number, y1: number, x2: number, y2: number): number {\n    const N = (y2 - y1 + 1) * (x2 - x1 + 1);\n    return (this._sum(this._partialSumMult, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) * this._sum(this._partialSumC2, x1, y1, x2, y2) / N) / N;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
