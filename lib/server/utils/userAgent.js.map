{
  "version": 3,
  "sources": ["../../../src/server/utils/userAgent.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { execSync } from 'child_process';\nimport os from 'os';\n\nimport { getLinuxDistributionInfoSync } from '../utils/linuxUtils';\n\nlet cachedUserAgent: string | undefined;\n\nexport function getUserAgent(): string {\n  if (cachedUserAgent)\n    return cachedUserAgent;\n  try {\n    cachedUserAgent = determineUserAgent();\n  } catch (e) {\n    cachedUserAgent = 'Playwright/unknown';\n  }\n  return cachedUserAgent;\n}\n\nfunction determineUserAgent(): string {\n  let osIdentifier = 'unknown';\n  let osVersion = 'unknown';\n  if (process.platform === 'win32') {\n    const version = os.release().split('.');\n    osIdentifier = 'windows';\n    osVersion = `${version[0]}.${version[1]}`;\n  } else if (process.platform === 'darwin') {\n    const version = execSync('sw_vers -productVersion', { stdio: ['ignore', 'pipe', 'ignore'] }).toString().trim().split('.');\n    osIdentifier = 'macOS';\n    osVersion = `${version[0]}.${version[1]}`;\n  } else if (process.platform === 'linux') {\n    const distroInfo = getLinuxDistributionInfoSync();\n    if (distroInfo) {\n      osIdentifier = distroInfo.id || 'linux';\n      osVersion = distroInfo.version || 'unknown';\n    } else {\n      // Linux distribution without /etc/os-release.\n      // Default to linux/unknown.\n      osIdentifier = 'linux';\n    }\n  }\n  const additionalTokens = [];\n  if (process.env.CI)\n    additionalTokens.push('CI/1');\n  const serializedTokens = additionalTokens.length ? ' ' + additionalTokens.join(' ') : '';\n\n  const { embedderName, embedderVersion } = getEmbedderName();\n  return `Playwright/${getPlaywrightVersion()} (${os.arch()}; ${osIdentifier} ${osVersion}) ${embedderName}/${embedderVersion}${serializedTokens}`;\n}\n\nexport function getEmbedderName(): { embedderName: string, embedderVersion: string } {\n  let embedderName = 'unknown';\n  let embedderVersion = 'unknown';\n  if (!process.env.PW_LANG_NAME) {\n    embedderName = 'node';\n    embedderVersion = process.version.substring(1).split('.').slice(0, 2).join('.');\n  } else if (['node', 'python', 'java', 'csharp'].includes(process.env.PW_LANG_NAME)) {\n    embedderName = process.env.PW_LANG_NAME;\n    embedderVersion = process.env.PW_LANG_NAME_VERSION ?? 'unknown';\n  }\n  return { embedderName, embedderVersion };\n}\n\nexport function getPlaywrightVersion(majorMinorOnly = false): string {\n  const version = process.env.PW_VERSION_OVERRIDE || require('./../../../package.json').version;\n  return majorMinorOnly ? version.split('.').slice(0, 2).join('.') : version;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,2BAAyB;AACzB,gBAAe;AAEf,wBAA6C;AAE7C,IAAI;AAEG,SAAS,eAAuB;AACrC,MAAI;AACF,WAAO;AACT,MAAI;AACF,sBAAkB,mBAAmB;AAAA,EACvC,SAAS,GAAG;AACV,sBAAkB;AAAA,EACpB;AACA,SAAO;AACT;AAEA,SAAS,qBAA6B;AACpC,MAAI,eAAe;AACnB,MAAI,YAAY;AAChB,MAAI,QAAQ,aAAa,SAAS;AAChC,UAAM,UAAU,UAAAA,QAAG,QAAQ,EAAE,MAAM,GAAG;AACtC,mBAAe;AACf,gBAAY,GAAG,QAAQ,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC;AAAA,EACzC,WAAW,QAAQ,aAAa,UAAU;AACxC,UAAM,cAAU,+BAAS,2BAA2B,EAAE,OAAO,CAAC,UAAU,QAAQ,QAAQ,EAAE,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,GAAG;AACxH,mBAAe;AACf,gBAAY,GAAG,QAAQ,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC;AAAA,EACzC,WAAW,QAAQ,aAAa,SAAS;AACvC,UAAM,iBAAa,gDAA6B;AAChD,QAAI,YAAY;AACd,qBAAe,WAAW,MAAM;AAChC,kBAAY,WAAW,WAAW;AAAA,IACpC,OAAO;AAGL,qBAAe;AAAA,IACjB;AAAA,EACF;AACA,QAAM,mBAAmB,CAAC;AAC1B,MAAI,QAAQ,IAAI;AACd,qBAAiB,KAAK,MAAM;AAC9B,QAAM,mBAAmB,iBAAiB,SAAS,MAAM,iBAAiB,KAAK,GAAG,IAAI;AAEtF,QAAM,EAAE,cAAc,gBAAgB,IAAI,gBAAgB;AAC1D,SAAO,cAAc,qBAAqB,CAAC,KAAK,UAAAA,QAAG,KAAK,CAAC,KAAK,YAAY,IAAI,SAAS,KAAK,YAAY,IAAI,eAAe,GAAG,gBAAgB;AAChJ;AAEO,SAAS,kBAAqE;AACnF,MAAI,eAAe;AACnB,MAAI,kBAAkB;AACtB,MAAI,CAAC,QAAQ,IAAI,cAAc;AAC7B,mBAAe;AACf,sBAAkB,QAAQ,QAAQ,UAAU,CAAC,EAAE,MAAM,GAAG,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG;AAAA,EAChF,WAAW,CAAC,QAAQ,UAAU,QAAQ,QAAQ,EAAE,SAAS,QAAQ,IAAI,YAAY,GAAG;AAClF,mBAAe,QAAQ,IAAI;AAC3B,sBAAkB,QAAQ,IAAI,wBAAwB;AAAA,EACxD;AACA,SAAO,EAAE,cAAc,gBAAgB;AACzC;AAEO,SAAS,qBAAqB,iBAAiB,OAAe;AACnE,QAAM,UAAU,QAAQ,IAAI,uBAAuB,QAAQ,yBAAyB,EAAE;AACtF,SAAO,iBAAiB,QAAQ,MAAM,GAAG,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI;AACrE;",
  "names": ["os"]
}
