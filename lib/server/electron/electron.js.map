{
  "version": 3,
  "sources": ["../../../src/server/electron/electron.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport * as readline from 'readline';\n\nimport { ManualPromise } from '../../utils';\nimport { wrapInASCIIBox } from '../utils/ascii';\nimport { RecentLogsCollector } from '../utils/debugLogger';\nimport { eventsHelper } from '../utils/eventsHelper';\nimport { validateBrowserContextOptions } from '../browserContext';\nimport { CRBrowser } from '../chromium/crBrowser';\nimport { CRConnection } from '../chromium/crConnection';\nimport { createHandle, CRExecutionContext } from '../chromium/crExecutionContext';\nimport { toConsoleMessageLocation } from '../chromium/crProtocolHelper';\nimport { ConsoleMessage } from '../console';\nimport { helper } from '../helper';\nimport { SdkObject } from '../instrumentation';\nimport * as js from '../javascript';\nimport { envArrayToObject, launchProcess } from '../utils/processLauncher';\nimport { WebSocketTransport } from '../transport';\n\nimport type { BrowserOptions, BrowserProcess } from '../browser';\nimport type { BrowserContext } from '../browserContext';\nimport type { CRBrowserContext } from '../chromium/crBrowser';\nimport type { CRSession } from '../chromium/crConnection';\nimport type { CRPage } from '../chromium/crPage';\nimport type { Protocol } from '../chromium/protocol';\nimport type { Page } from '../page';\nimport type { Playwright } from '../playwright';\nimport type { Progress } from '../progress';\nimport type * as types from '../types';\nimport type * as channels from '@protocol/channels';\nimport type * as childProcess from 'child_process';\nimport type { BrowserWindow } from 'electron';\n\nconst ARTIFACTS_FOLDER = path.join(os.tmpdir(), 'playwright-artifacts-');\n\nexport class ElectronApplication extends SdkObject {\n  static Events = {\n    Close: 'close',\n    Console: 'console',\n  };\n\n  private _browserContext: CRBrowserContext;\n  private _nodeConnection: CRConnection;\n  private _nodeSession: CRSession;\n  private _nodeExecutionContext: js.ExecutionContext | undefined;\n  _nodeElectronHandlePromise: ManualPromise<js.JSHandle<typeof import('electron')>> = new ManualPromise();\n  private _process: childProcess.ChildProcess;\n\n  constructor(parent: SdkObject, browser: CRBrowser, nodeConnection: CRConnection, process: childProcess.ChildProcess) {\n    super(parent, 'electron-app');\n    this._process = process;\n    this._browserContext = browser._defaultContext as CRBrowserContext;\n    this._nodeConnection = nodeConnection;\n    this._nodeSession = nodeConnection.rootSession;\n    this._nodeSession.on('Runtime.executionContextCreated', async (event: Protocol.Runtime.executionContextCreatedPayload) => {\n      if (!event.context.auxData || !event.context.auxData.isDefault)\n        return;\n      const crExecutionContext = new CRExecutionContext(this._nodeSession, event.context);\n      this._nodeExecutionContext = new js.ExecutionContext(this, crExecutionContext, 'electron');\n      const { result: remoteObject } = await crExecutionContext._client.send('Runtime.evaluate', {\n        expression: `require('electron')`,\n        contextId: event.context.id,\n        // Needed after Electron 28 to get access to require: https://github.com/microsoft/playwright/issues/28048\n        includeCommandLineAPI: true,\n      });\n      this._nodeElectronHandlePromise.resolve(new js.JSHandle(this._nodeExecutionContext!, 'object', 'ElectronModule', remoteObject.objectId!));\n    });\n    this._nodeSession.on('Runtime.consoleAPICalled', event => this._onConsoleAPI(event));\n    const appClosePromise = new Promise(f => this.once(ElectronApplication.Events.Close, f));\n    this._browserContext.setCustomCloseHandler(async () => {\n      await this._browserContext.stopVideoRecording();\n      const electronHandle = await this._nodeElectronHandlePromise;\n      await electronHandle.evaluate(({ app }) => app.quit()).catch(() => {});\n      this._nodeConnection.close();\n      await appClosePromise;\n    });\n  }\n\n  async _onConsoleAPI(event: Protocol.Runtime.consoleAPICalledPayload) {\n    if (event.executionContextId === 0) {\n      // DevTools protocol stores the last 1000 console messages. These\n      // messages are always reported even for removed execution contexts. In\n      // this case, they are marked with executionContextId = 0 and are\n      // reported upon enabling Runtime agent.\n      //\n      // Ignore these messages since:\n      // - there's no execution context we can use to operate with message\n      //   arguments\n      // - these messages are reported before Playwright clients can subscribe\n      //   to the 'console'\n      //   page event.\n      //\n      // @see https://github.com/GoogleChrome/puppeteer/issues/3865\n      return;\n    }\n    if (!this._nodeExecutionContext)\n      return;\n    const args = event.args.map(arg => createHandle(this._nodeExecutionContext!, arg));\n    const message = new ConsoleMessage(null, event.type, undefined, args, toConsoleMessageLocation(event.stackTrace));\n    this.emit(ElectronApplication.Events.Console, message);\n  }\n\n  async initialize() {\n    await this._nodeSession.send('Runtime.enable', {});\n    // Delay loading the app until browser is started and the browser targets are configured to auto-attach.\n    await this._nodeSession.send('Runtime.evaluate', { expression: '__playwright_run()' });\n  }\n\n  process(): childProcess.ChildProcess {\n    return this._process;\n  }\n\n  context(): BrowserContext {\n    return this._browserContext;\n  }\n\n  async close() {\n    // This will call BrowserContext.setCustomCloseHandler.\n    await this._browserContext.close({ reason: 'Application exited' });\n  }\n\n  async browserWindow(page: Page): Promise<js.JSHandle<BrowserWindow>> {\n    // Assume CRPage as Electron is always Chromium.\n    const targetId = (page.delegate as CRPage)._targetId;\n    const electronHandle = await this._nodeElectronHandlePromise;\n    return await electronHandle.evaluateHandle(({ BrowserWindow, webContents }, targetId) => {\n      const wc = webContents.fromDevToolsTargetId(targetId);\n      return BrowserWindow.fromWebContents(wc!)!;\n    }, targetId);\n  }\n}\n\nexport class Electron extends SdkObject {\n  constructor(playwright: Playwright) {\n    super(playwright, 'electron');\n    this.logName = 'browser';\n  }\n\n  async launch(progress: Progress, options: Omit<channels.ElectronLaunchParams, 'timeout'>): Promise<ElectronApplication> {\n    let app: ElectronApplication | undefined = undefined;\n    // --remote-debugging-port=0 must be the last playwright's argument, loader.ts relies on it.\n    let electronArguments = ['--inspect=0', '--remote-debugging-port=0', ...(options.args || [])];\n\n    if (os.platform() === 'linux') {\n      const runningAsRoot = process.geteuid && process.geteuid() === 0;\n      if (runningAsRoot && electronArguments.indexOf('--no-sandbox') === -1)\n        electronArguments.unshift('--no-sandbox');\n    }\n\n    const artifactsDir = await progress.race(fs.promises.mkdtemp(ARTIFACTS_FOLDER));\n    const browserLogsCollector = new RecentLogsCollector();\n    const env = options.env ? envArrayToObject(options.env) : process.env;\n\n    let command: string;\n    if (options.executablePath) {\n      command = options.executablePath;\n    } else {\n      try {\n        // By default we fallback to the Electron App executable path.\n        // 'electron/index.js' resolves to the actual Electron App.\n        command = require('electron/index.js');\n      } catch (error: any) {\n        if ((error as NodeJS.ErrnoException)?.code === 'MODULE_NOT_FOUND') {\n          throw new Error('\\n' + wrapInASCIIBox([\n            'Electron executablePath not found!',\n            'Please install it using `npm install -D electron` or set the executablePath to your Electron executable.',\n          ].join('\\n'), 1));\n        }\n        throw error;\n      }\n      // Only use our own loader for non-packaged apps.\n      // Packaged apps might have their own command line handling.\n      electronArguments.unshift('-r', require.resolve('./loader'));\n    }\n    let shell = false;\n    if (process.platform === 'win32') {\n      // On Windows in order to run .cmd files, shell: true is required.\n      // https://github.com/nodejs/node/issues/52554\n      shell = true;\n      // On Windows, we need to quote the executable path due to shell: true.\n      command = `\"${command}\"`;\n      // On Windows, we need to quote the arguments due to shell: true.\n      electronArguments = electronArguments.map(arg => `\"${arg}\"`);\n    }\n\n    // When debugging Playwright test that runs Electron, NODE_OPTIONS\n    // will make the debugger attach to Electron's Node. But Playwright\n    // also needs to attach to drive the automation. Disable external debugging.\n    delete env.NODE_OPTIONS;\n    const { launchedProcess, gracefullyClose, kill } = await launchProcess({\n      command,\n      args: electronArguments,\n      env,\n      log: (message: string) => {\n        progress.log(message);\n        browserLogsCollector.log(message);\n      },\n      shell,\n      stdio: 'pipe',\n      cwd: options.cwd,\n      tempDirectories: [artifactsDir],\n      attemptToGracefullyClose: () => app!.close(),\n      handleSIGINT: true,\n      handleSIGTERM: true,\n      handleSIGHUP: true,\n      onExit: () => app?.emit(ElectronApplication.Events.Close),\n    });\n\n    // All waitForLines must be started immediately.\n    // Otherwise the lines might come before we are ready.\n    const waitForXserverError = waitForLine(progress, launchedProcess, /Unable to open X display/).then(() => {\n      throw new Error([\n        'Unable to open X display!',\n        `================================`,\n        'Most likely this is because there is no X server available.',\n        \"Use 'xvfb-run' on Linux to launch your tests with an emulated display server.\",\n        \"For example: 'xvfb-run npm run test:e2e'\",\n        `================================`,\n        progress.metadata.log\n      ].join('\\n'));\n    });\n    const nodeMatchPromise = waitForLine(progress, launchedProcess, /^Debugger listening on (ws:\\/\\/.*)$/);\n    const chromeMatchPromise = waitForLine(progress, launchedProcess, /^DevTools listening on (ws:\\/\\/.*)$/);\n    const debuggerDisconnectPromise = waitForLine(progress, launchedProcess, /Waiting for the debugger to disconnect\\.\\.\\./);\n\n    try {\n      const nodeMatch = await nodeMatchPromise;\n      const nodeTransport = await WebSocketTransport.connect(progress, nodeMatch[1]);\n      const nodeConnection = new CRConnection(this, nodeTransport, helper.debugProtocolLogger(), browserLogsCollector);\n      // Immediately release exiting process under debug.\n      debuggerDisconnectPromise.then(() => {\n        nodeTransport.close();\n      }).catch(() => {});\n\n      const chromeMatch = await Promise.race([\n        chromeMatchPromise,\n        waitForXserverError,\n      ]);\n      const chromeTransport = await WebSocketTransport.connect(progress, chromeMatch[1]);\n      const browserProcess: BrowserProcess = {\n        onclose: undefined,\n        process: launchedProcess,\n        close: gracefullyClose,\n        kill\n      };\n      const contextOptions: types.BrowserContextOptions = {\n        ...options,\n        noDefaultViewport: true,\n      };\n      const browserOptions: BrowserOptions = {\n        name: 'electron',\n        isChromium: true,\n        headful: true,\n        persistent: contextOptions,\n        browserProcess,\n        protocolLogger: helper.debugProtocolLogger(),\n        browserLogsCollector,\n        artifactsDir,\n        downloadsPath: artifactsDir,\n        tracesDir: options.tracesDir || artifactsDir,\n        originalLaunchOptions: {},\n      };\n      validateBrowserContextOptions(contextOptions, browserOptions);\n      const browser = await progress.race(CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions));\n      app = new ElectronApplication(this, browser, nodeConnection, launchedProcess);\n      await progress.race(app.initialize());\n      return app;\n    } catch (error) {\n      await kill();\n      throw error;\n    }\n  }\n}\n\nasync function waitForLine(progress: Progress, process: childProcess.ChildProcess, regex: RegExp) {\n  const promise = new ManualPromise<RegExpMatchArray>();\n  // eslint-disable-next-line no-restricted-properties\n  const rl = readline.createInterface({ input: process.stderr! });\n  const failError = new Error('Process failed to launch!');\n  const listeners = [\n    eventsHelper.addEventListener(rl, 'line', onLine),\n    eventsHelper.addEventListener(rl, 'close', () => promise.reject(failError)),\n    eventsHelper.addEventListener(process, 'exit', () => promise.reject(failError)),\n    // It is Ok to remove error handler because we did not create process and there is another listener.\n    eventsHelper.addEventListener(process, 'error', () => promise.reject(failError)),\n  ];\n\n  function onLine(line: string) {\n    const match = line.match(regex);\n    if (match)\n      promise.resolve(match);\n  }\n\n  try {\n    return await progress.race(promise);\n  } finally {\n    eventsHelper.removeEventListeners(listeners);\n  }\n}\n"],
  "mappings": "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",
  "names": ["path", "os", "process", "targetId", "fs"]
}
