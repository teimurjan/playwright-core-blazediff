{
  "version": 3,
  "sources": ["../../src/server/socksInterceptor.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\n\nimport * as socks from './utils/socksProxy';\nimport { ValidationError, findValidator } from '../protocol/validator';\nimport { isUnderTest } from './utils/debug';\n\nimport type { WebSocketTransport } from './transport';\nimport type { ValidatorContext } from '../protocol/validator';\nimport type * as channels from '@protocol/channels';\n\nexport class SocksInterceptor {\n  private _handler: socks.SocksProxyHandler;\n  private _channel: channels.SocksSupportChannel & EventEmitter;\n  private _socksSupportObjectGuid?: string;\n  private _ids = new Set<number>();\n\n  constructor(transport: WebSocketTransport, pattern: string | undefined, redirectPortForTest: number | undefined) {\n    this._handler = new socks.SocksProxyHandler(pattern,  redirectPortForTest);\n\n    let lastId = -1;\n    this._channel = new Proxy(new EventEmitter(), {\n      get: (obj: any, prop: string | symbol) => {\n        if ((prop in obj) || obj[prop] !== undefined || typeof prop !== 'string')\n          return obj[prop];\n        return (params: any) => {\n          try {\n            const id = --lastId;\n            this._ids.add(id);\n            const validator = findValidator('SocksSupport', prop, 'Params');\n            params = validator(params, '', { tChannelImpl: tChannelForSocks, binary: 'toBase64', isUnderTest });\n            transport.send({ id, guid: this._socksSupportObjectGuid, method: prop, params, metadata: { stack: [], apiName: '', internal: true } } as any);\n          } catch (e) {\n          }\n        };\n      },\n    }) as channels.SocksSupportChannel & EventEmitter;\n    this._handler.on(socks.SocksProxyHandler.Events.SocksConnected, (payload: socks.SocksSocketConnectedPayload) => this._channel.socksConnected(payload));\n    this._handler.on(socks.SocksProxyHandler.Events.SocksData, (payload: socks.SocksSocketDataPayload) => this._channel.socksData(payload));\n    this._handler.on(socks.SocksProxyHandler.Events.SocksError, (payload: socks.SocksSocketErrorPayload) => this._channel.socksError(payload));\n    this._handler.on(socks.SocksProxyHandler.Events.SocksFailed, (payload: socks.SocksSocketFailedPayload) => this._channel.socksFailed(payload));\n    this._handler.on(socks.SocksProxyHandler.Events.SocksEnd, (payload: socks.SocksSocketEndPayload) => this._channel.socksEnd(payload));\n    this._channel.on('socksRequested', payload => this._handler.socketRequested(payload));\n    this._channel.on('socksClosed', payload => this._handler.socketClosed(payload));\n    this._channel.on('socksData', payload => this._handler.sendSocketData(payload));\n  }\n\n  cleanup() {\n    this._handler.cleanup();\n  }\n\n  interceptMessage(message: any): boolean {\n    if (this._ids.has(message.id)) {\n      this._ids.delete(message.id);\n      return true;\n    }\n    if (message.method === '__create__' && message.params.type === 'SocksSupport') {\n      this._socksSupportObjectGuid = message.params.guid;\n      return false;\n    }\n    if (this._socksSupportObjectGuid && message.guid === this._socksSupportObjectGuid) {\n      const validator = findValidator('SocksSupport', message.method, 'Event');\n      const params = validator(message.params, '', { tChannelImpl: tChannelForSocks, binary: 'fromBase64', isUnderTest });\n      this._channel.emit(message.method, params);\n      return true;\n    }\n    return false;\n  }\n}\n\nfunction tChannelForSocks(names: '*' | string[], arg: any, path: string, context: ValidatorContext) {\n  throw new ValidationError(`${path}: channels are not expected in SocksSupport`);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,oBAAyB;AAEzB,YAAuB;AACvB,uBAA+C;AAC/C,mBAA4B;AAMrB,MAAM,iBAAiB;AAAA,EAM5B,YAAY,WAA+B,SAA6B,qBAAyC;AAFjH,SAAQ,OAAO,oBAAI,IAAY;AAG7B,SAAK,WAAW,IAAI,MAAM,kBAAkB,SAAU,mBAAmB;AAEzE,QAAI,SAAS;AACb,SAAK,WAAW,IAAI,MAAM,IAAI,cAAAA,QAAa,GAAG;AAAA,MAC5C,KAAK,CAAC,KAAU,SAA0B;AACxC,YAAK,QAAQ,OAAQ,IAAI,IAAI,MAAM,UAAa,OAAO,SAAS;AAC9D,iBAAO,IAAI,IAAI;AACjB,eAAO,CAAC,WAAgB;AACtB,cAAI;AACF,kBAAM,KAAK,EAAE;AACb,iBAAK,KAAK,IAAI,EAAE;AAChB,kBAAM,gBAAY,gCAAc,gBAAgB,MAAM,QAAQ;AAC9D,qBAAS,UAAU,QAAQ,IAAI,EAAE,cAAc,kBAAkB,QAAQ,YAAY,sCAAY,CAAC;AAClG,sBAAU,KAAK,EAAE,IAAI,MAAM,KAAK,yBAAyB,QAAQ,MAAM,QAAQ,UAAU,EAAE,OAAO,CAAC,GAAG,SAAS,IAAI,UAAU,KAAK,EAAE,CAAQ;AAAA,UAC9I,SAAS,GAAG;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AACD,SAAK,SAAS,GAAG,MAAM,kBAAkB,OAAO,gBAAgB,CAAC,YAA+C,KAAK,SAAS,eAAe,OAAO,CAAC;AACrJ,SAAK,SAAS,GAAG,MAAM,kBAAkB,OAAO,WAAW,CAAC,YAA0C,KAAK,SAAS,UAAU,OAAO,CAAC;AACtI,SAAK,SAAS,GAAG,MAAM,kBAAkB,OAAO,YAAY,CAAC,YAA2C,KAAK,SAAS,WAAW,OAAO,CAAC;AACzI,SAAK,SAAS,GAAG,MAAM,kBAAkB,OAAO,aAAa,CAAC,YAA4C,KAAK,SAAS,YAAY,OAAO,CAAC;AAC5I,SAAK,SAAS,GAAG,MAAM,kBAAkB,OAAO,UAAU,CAAC,YAAyC,KAAK,SAAS,SAAS,OAAO,CAAC;AACnI,SAAK,SAAS,GAAG,kBAAkB,aAAW,KAAK,SAAS,gBAAgB,OAAO,CAAC;AACpF,SAAK,SAAS,GAAG,eAAe,aAAW,KAAK,SAAS,aAAa,OAAO,CAAC;AAC9E,SAAK,SAAS,GAAG,aAAa,aAAW,KAAK,SAAS,eAAe,OAAO,CAAC;AAAA,EAChF;AAAA,EAEA,UAAU;AACR,SAAK,SAAS,QAAQ;AAAA,EACxB;AAAA,EAEA,iBAAiB,SAAuB;AACtC,QAAI,KAAK,KAAK,IAAI,QAAQ,EAAE,GAAG;AAC7B,WAAK,KAAK,OAAO,QAAQ,EAAE;AAC3B,aAAO;AAAA,IACT;AACA,QAAI,QAAQ,WAAW,gBAAgB,QAAQ,OAAO,SAAS,gBAAgB;AAC7E,WAAK,0BAA0B,QAAQ,OAAO;AAC9C,aAAO;AAAA,IACT;AACA,QAAI,KAAK,2BAA2B,QAAQ,SAAS,KAAK,yBAAyB;AACjF,YAAM,gBAAY,gCAAc,gBAAgB,QAAQ,QAAQ,OAAO;AACvE,YAAM,SAAS,UAAU,QAAQ,QAAQ,IAAI,EAAE,cAAc,kBAAkB,QAAQ,cAAc,sCAAY,CAAC;AAClH,WAAK,SAAS,KAAK,QAAQ,QAAQ,MAAM;AACzC,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AACF;AAEA,SAAS,iBAAiB,OAAuB,KAAU,MAAc,SAA2B;AAClG,QAAM,IAAI,iCAAgB,GAAG,IAAI,6CAA6C;AAChF;",
  "names": ["EventEmitter"]
}
