{
  "version": 3,
  "sources": ["../../src/server/dialog.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../utils';\nimport { SdkObject } from './instrumentation';\n\nimport type { Instrumentation } from './instrumentation';\nimport type { Page } from './page';\n\ntype OnHandle = (accept: boolean, promptText?: string) => Promise<void>;\n\nexport type DialogType = 'alert' | 'beforeunload' | 'confirm' | 'prompt';\n\nexport class Dialog extends SdkObject {\n  private _page: Page;\n  private _type: DialogType;\n  private _message: string;\n  private _onHandle: OnHandle;\n  private _handled = false;\n  private _defaultValue: string;\n\n  constructor(page: Page, type: DialogType, message: string, onHandle: OnHandle, defaultValue?: string) {\n    super(page, 'dialog');\n    this._page = page;\n    this._type = type;\n    this._message = message;\n    this._onHandle = onHandle;\n    this._defaultValue = defaultValue || '';\n  }\n\n  page() {\n    return this._page;\n  }\n\n  type(): string {\n    return this._type;\n  }\n\n  message(): string {\n    return this._message;\n  }\n\n  defaultValue(): string {\n    return this._defaultValue;\n  }\n\n  async accept(promptText?: string) {\n    assert(!this._handled, 'Cannot accept dialog which is already handled!');\n    this._handled = true;\n    this._page.browserContext.dialogManager.dialogWillClose(this);\n    await this._onHandle(true, promptText);\n  }\n\n  async dismiss() {\n    assert(!this._handled, 'Cannot dismiss dialog which is already handled!');\n    this._handled = true;\n    this._page.browserContext.dialogManager.dialogWillClose(this);\n    await this._onHandle(false);\n  }\n\n  async close() {\n    if (this._type === 'beforeunload')\n      await this.accept();\n    else\n      await this.dismiss();\n  }\n}\n\nexport class DialogManager {\n  private _instrumentation: Instrumentation;\n  private _dialogHandlers = new Set<(dialog: Dialog) => boolean>();\n  private _openedDialogs = new Set<Dialog>();\n\n  constructor(instrumentation: Instrumentation) {\n    this._instrumentation = instrumentation;\n  }\n\n  dialogDidOpen(dialog: Dialog) {\n    // Any ongoing evaluations will be stalled until the dialog is closed.\n    for (const frame of dialog.page().frameManager.frames())\n      frame._invalidateNonStallingEvaluations('JavaScript dialog interrupted evaluation');\n    this._openedDialogs.add(dialog);\n    this._instrumentation.onDialog(dialog);\n\n    let hasHandlers = false;\n    for (const handler of this._dialogHandlers) {\n      if (handler(dialog))\n        hasHandlers = true;\n    }\n    if (!hasHandlers)\n      dialog.close().then(() => {});\n  }\n\n  dialogWillClose(dialog: Dialog) {\n    this._openedDialogs.delete(dialog);\n  }\n\n  addDialogHandler(handler: (dialog: Dialog) => boolean) {\n    this._dialogHandlers.add(handler);\n  }\n\n  removeDialogHandler(handler: (dialog: Dialog) => boolean) {\n    this._dialogHandlers.delete(handler);\n    if (!this._dialogHandlers.size) {\n      for (const dialog of this._openedDialogs)\n        dialog.close().catch(() => {});\n    }\n  }\n\n  hasOpenDialogsForPage(page: Page) {\n    return [...this._openedDialogs].some(dialog => dialog.page() === page);\n  }\n\n  async closeBeforeUnloadDialogs() {\n    await Promise.all([...this._openedDialogs].map(async dialog => {\n      if (dialog.type() === 'beforeunload')\n        await dialog.dismiss();\n    }));\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,mBAAuB;AACvB,6BAA0B;AASnB,MAAM,eAAe,iCAAU;AAAA,EAQpC,YAAY,MAAY,MAAkB,SAAiB,UAAoB,cAAuB;AACpG,UAAM,MAAM,QAAQ;AAJtB,SAAQ,WAAW;AAKjB,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,gBAAgB,gBAAgB;AAAA,EACvC;AAAA,EAEA,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,OAAe;AACb,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,UAAkB;AAChB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,eAAuB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,OAAO,YAAqB;AAChC,6BAAO,CAAC,KAAK,UAAU,gDAAgD;AACvE,SAAK,WAAW;AAChB,SAAK,MAAM,eAAe,cAAc,gBAAgB,IAAI;AAC5D,UAAM,KAAK,UAAU,MAAM,UAAU;AAAA,EACvC;AAAA,EAEA,MAAM,UAAU;AACd,6BAAO,CAAC,KAAK,UAAU,iDAAiD;AACxE,SAAK,WAAW;AAChB,SAAK,MAAM,eAAe,cAAc,gBAAgB,IAAI;AAC5D,UAAM,KAAK,UAAU,KAAK;AAAA,EAC5B;AAAA,EAEA,MAAM,QAAQ;AACZ,QAAI,KAAK,UAAU;AACjB,YAAM,KAAK,OAAO;AAAA;AAElB,YAAM,KAAK,QAAQ;AAAA,EACvB;AACF;AAEO,MAAM,cAAc;AAAA,EAKzB,YAAY,iBAAkC;AAH9C,SAAQ,kBAAkB,oBAAI,IAAiC;AAC/D,SAAQ,iBAAiB,oBAAI,IAAY;AAGvC,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EAEA,cAAc,QAAgB;AAE5B,eAAW,SAAS,OAAO,KAAK,EAAE,aAAa,OAAO;AACpD,YAAM,kCAAkC,0CAA0C;AACpF,SAAK,eAAe,IAAI,MAAM;AAC9B,SAAK,iBAAiB,SAAS,MAAM;AAErC,QAAI,cAAc;AAClB,eAAW,WAAW,KAAK,iBAAiB;AAC1C,UAAI,QAAQ,MAAM;AAChB,sBAAc;AAAA,IAClB;AACA,QAAI,CAAC;AACH,aAAO,MAAM,EAAE,KAAK,MAAM;AAAA,MAAC,CAAC;AAAA,EAChC;AAAA,EAEA,gBAAgB,QAAgB;AAC9B,SAAK,eAAe,OAAO,MAAM;AAAA,EACnC;AAAA,EAEA,iBAAiB,SAAsC;AACrD,SAAK,gBAAgB,IAAI,OAAO;AAAA,EAClC;AAAA,EAEA,oBAAoB,SAAsC;AACxD,SAAK,gBAAgB,OAAO,OAAO;AACnC,QAAI,CAAC,KAAK,gBAAgB,MAAM;AAC9B,iBAAW,UAAU,KAAK;AACxB,eAAO,MAAM,EAAE,MAAM,MAAM;AAAA,QAAC,CAAC;AAAA,IACjC;AAAA,EACF;AAAA,EAEA,sBAAsB,MAAY;AAChC,WAAO,CAAC,GAAG,KAAK,cAAc,EAAE,KAAK,YAAU,OAAO,KAAK,MAAM,IAAI;AAAA,EACvE;AAAA,EAEA,MAAM,2BAA2B;AAC/B,UAAM,QAAQ,IAAI,CAAC,GAAG,KAAK,cAAc,EAAE,IAAI,OAAM,WAAU;AAC7D,UAAI,OAAO,KAAK,MAAM;AACpB,cAAM,OAAO,QAAQ;AAAA,IACzB,CAAC,CAAC;AAAA,EACJ;AACF;",
  "names": []
}
