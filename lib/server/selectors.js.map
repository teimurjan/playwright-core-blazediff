{
  "version": 3,
  "sources": ["../../src/server/selectors.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createGuid } from './utils/crypto';\nimport { InvalidSelectorError,  parseSelector, stringifySelector, visitAllSelectorParts } from '../utils/isomorphic/selectorParser';\n\nimport type { ParsedSelector } from '../utils/isomorphic/selectorParser';\nimport type * as channels from '@protocol/channels';\n\nexport class Selectors {\n  private readonly _builtinEngines: Set<string>;\n  private readonly _builtinEnginesInMainWorld: Set<string>;\n  readonly _engines: Map<string, channels.SelectorEngine>;\n  readonly guid = `selectors@${createGuid()}`;\n  private _testIdAttributeName: string;\n\n  constructor(engines: channels.SelectorEngine[], testIdAttributeName: string | undefined) {\n    // Note: keep in sync with InjectedScript class.\n    this._builtinEngines = new Set([\n      'css', 'css:light',\n      'xpath', 'xpath:light',\n      '_react', '_vue',\n      'text', 'text:light',\n      'id', 'id:light',\n      'data-testid', 'data-testid:light',\n      'data-test-id', 'data-test-id:light',\n      'data-test', 'data-test:light',\n      'nth', 'visible', 'internal:control',\n      'internal:has', 'internal:has-not',\n      'internal:has-text', 'internal:has-not-text',\n      'internal:and', 'internal:or', 'internal:chain',\n      'role', 'internal:attr', 'internal:label', 'internal:text',\n      'internal:role', 'internal:testid', 'internal:describe',\n      'aria-ref'\n    ]);\n    this._builtinEnginesInMainWorld = new Set([\n      '_react', '_vue',\n    ]);\n    this._engines = new Map();\n    this._testIdAttributeName = testIdAttributeName ?? 'data-testid';\n    for (const engine of engines)\n      this.register(engine);\n  }\n\n  register(engine: channels.SelectorEngine) {\n    if (!engine.name.match(/^[a-zA-Z_0-9-]+$/))\n      throw new Error('Selector engine name may only contain [a-zA-Z0-9_] characters');\n    // Note: we keep 'zs' for future use.\n    if (this._builtinEngines.has(engine.name) || engine.name === 'zs' || engine.name === 'zs:light')\n      throw new Error(`\"${engine.name}\" is a predefined selector engine`);\n    if (this._engines.has(engine.name))\n      throw new Error(`\"${engine.name}\" selector engine has been already registered`);\n    this._engines.set(engine.name, engine);\n  }\n\n  testIdAttributeName(): string {\n    return this._testIdAttributeName;\n  }\n\n  setTestIdAttributeName(testIdAttributeName: string) {\n    this._testIdAttributeName = testIdAttributeName;\n  }\n\n  parseSelector(selector: string | ParsedSelector, strict: boolean) {\n    const parsed = typeof selector === 'string' ? parseSelector(selector) : selector;\n    let needsMainWorld = false;\n    visitAllSelectorParts(parsed, part => {\n      const name = part.name;\n      const custom = this._engines.get(name);\n      if (!custom && !this._builtinEngines.has(name))\n        throw new InvalidSelectorError(`Unknown engine \"${name}\" while parsing selector ${stringifySelector(parsed)}`);\n      if (custom && !custom.contentScript)\n        needsMainWorld = true;\n      if (this._builtinEnginesInMainWorld.has(name))\n        needsMainWorld = true;\n    });\n    return {\n      parsed,\n      world: needsMainWorld ? 'main' as const : 'utility' as const,\n      strict,\n    };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,oBAA2B;AAC3B,4BAA+F;AAKxF,MAAM,UAAU;AAAA,EAOrB,YAAY,SAAoC,qBAAyC;AAHzF,SAAS,OAAO,iBAAa,0BAAW,CAAC;AAKvC,SAAK,kBAAkB,oBAAI,IAAI;AAAA,MAC7B;AAAA,MAAO;AAAA,MACP;AAAA,MAAS;AAAA,MACT;AAAA,MAAU;AAAA,MACV;AAAA,MAAQ;AAAA,MACR;AAAA,MAAM;AAAA,MACN;AAAA,MAAe;AAAA,MACf;AAAA,MAAgB;AAAA,MAChB;AAAA,MAAa;AAAA,MACb;AAAA,MAAO;AAAA,MAAW;AAAA,MAClB;AAAA,MAAgB;AAAA,MAChB;AAAA,MAAqB;AAAA,MACrB;AAAA,MAAgB;AAAA,MAAe;AAAA,MAC/B;AAAA,MAAQ;AAAA,MAAiB;AAAA,MAAkB;AAAA,MAC3C;AAAA,MAAiB;AAAA,MAAmB;AAAA,MACpC;AAAA,IACF,CAAC;AACD,SAAK,6BAA6B,oBAAI,IAAI;AAAA,MACxC;AAAA,MAAU;AAAA,IACZ,CAAC;AACD,SAAK,WAAW,oBAAI,IAAI;AACxB,SAAK,uBAAuB,uBAAuB;AACnD,eAAW,UAAU;AACnB,WAAK,SAAS,MAAM;AAAA,EACxB;AAAA,EAEA,SAAS,QAAiC;AACxC,QAAI,CAAC,OAAO,KAAK,MAAM,kBAAkB;AACvC,YAAM,IAAI,MAAM,+DAA+D;AAEjF,QAAI,KAAK,gBAAgB,IAAI,OAAO,IAAI,KAAK,OAAO,SAAS,QAAQ,OAAO,SAAS;AACnF,YAAM,IAAI,MAAM,IAAI,OAAO,IAAI,mCAAmC;AACpE,QAAI,KAAK,SAAS,IAAI,OAAO,IAAI;AAC/B,YAAM,IAAI,MAAM,IAAI,OAAO,IAAI,+CAA+C;AAChF,SAAK,SAAS,IAAI,OAAO,MAAM,MAAM;AAAA,EACvC;AAAA,EAEA,sBAA8B;AAC5B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,uBAAuB,qBAA6B;AAClD,SAAK,uBAAuB;AAAA,EAC9B;AAAA,EAEA,cAAc,UAAmC,QAAiB;AAChE,UAAM,SAAS,OAAO,aAAa,eAAW,qCAAc,QAAQ,IAAI;AACxE,QAAI,iBAAiB;AACrB,qDAAsB,QAAQ,UAAQ;AACpC,YAAM,OAAO,KAAK;AAClB,YAAM,SAAS,KAAK,SAAS,IAAI,IAAI;AACrC,UAAI,CAAC,UAAU,CAAC,KAAK,gBAAgB,IAAI,IAAI;AAC3C,cAAM,IAAI,2CAAqB,mBAAmB,IAAI,gCAA4B,yCAAkB,MAAM,CAAC,EAAE;AAC/G,UAAI,UAAU,CAAC,OAAO;AACpB,yBAAiB;AACnB,UAAI,KAAK,2BAA2B,IAAI,IAAI;AAC1C,yBAAiB;AAAA,IACrB,CAAC;AACD,WAAO;AAAA,MACL;AAAA,MACA,OAAO,iBAAiB,SAAkB;AAAA,MAC1C;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
