{
  "version": 3,
  "sources": ["../../../src/server/chromium/crPage.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\n\nimport { assert } from '../../utils/isomorphic/assert';\nimport { createGuid } from '../utils/crypto';\nimport { eventsHelper } from '../utils/eventsHelper';\nimport { rewriteErrorMessage } from '../../utils/isomorphic/stackTrace';\nimport * as dialog from '../dialog';\nimport * as dom from '../dom';\nimport * as frames from '../frames';\nimport { helper } from '../helper';\nimport * as network from '../network';\nimport { Page, PageBinding, Worker } from '../page';\nimport { registry } from '../registry';\nimport { getAccessibilityTree } from './crAccessibility';\nimport { CRBrowserContext } from './crBrowser';\nimport { CRCoverage } from './crCoverage';\nimport { DragManager } from './crDragDrop';\nimport { createHandle, CRExecutionContext } from './crExecutionContext';\nimport { RawKeyboardImpl, RawMouseImpl, RawTouchscreenImpl } from './crInput';\nimport { CRNetworkManager } from './crNetworkManager';\nimport { CRPDF } from './crPdf';\nimport { exceptionToError, releaseObject, toConsoleMessageLocation } from './crProtocolHelper';\nimport { platformToFontFamilies } from './defaultFontFamilies';\nimport { VideoRecorder } from './videoRecorder';\nimport { BrowserContext } from '../browserContext';\nimport { TargetClosedError } from '../errors';\nimport { isSessionClosedError } from '../protocolError';\n\nimport type { CRSession } from './crConnection';\nimport type { Protocol } from './protocol';\nimport type { RegisteredListener } from '../utils/eventsHelper';\nimport type { InitScript, PageDelegate } from '../page';\nimport type { Progress } from '../progress';\nimport type * as types from '../types';\nimport type * as channels from '@protocol/channels';\n\n\nexport type WindowBounds = { top?: number, left?: number, width?: number, height?: number };\n\nexport class CRPage implements PageDelegate {\n  readonly utilityWorldName: string;\n  readonly _mainFrameSession: FrameSession;\n  readonly _sessions = new Map<Protocol.Target.TargetID, FrameSession>();\n  readonly _page: Page;\n  readonly rawMouse: RawMouseImpl;\n  readonly rawKeyboard: RawKeyboardImpl;\n  readonly rawTouchscreen: RawTouchscreenImpl;\n  readonly _targetId: string;\n  readonly _opener: CRPage | null;\n  readonly _networkManager: CRNetworkManager;\n  private readonly _pdf: CRPDF;\n  private readonly _coverage: CRCoverage;\n  readonly _browserContext: CRBrowserContext;\n  private _isBackgroundPage: boolean;\n\n  // Holds window features for the next popup being opened via window.open,\n  // until the popup target arrives. This could be racy if two oopifs\n  // simultaneously call window.open with window features: the order\n  // of their Page.windowOpen events is not guaranteed to match the order\n  // of new popup targets.\n  readonly _nextWindowOpenPopupFeatures: string[][] = [];\n\n  static mainFrameSession(page: Page): FrameSession {\n    const crPage = page.delegate as CRPage;\n    return crPage._mainFrameSession;\n  }\n\n  constructor(client: CRSession, targetId: string, browserContext: CRBrowserContext, opener: CRPage | null, bits: { hasUIWindow: boolean, isBackgroundPage: boolean }) {\n    this._targetId = targetId;\n    this._opener = opener;\n    this._isBackgroundPage = bits.isBackgroundPage;\n    const dragManager = new DragManager(this);\n    this.rawKeyboard = new RawKeyboardImpl(client, browserContext._browser._platform() === 'mac', dragManager);\n    this.rawMouse = new RawMouseImpl(this, client, dragManager);\n    this.rawTouchscreen = new RawTouchscreenImpl(client);\n    this._pdf = new CRPDF(client);\n    this._coverage = new CRCoverage(client);\n    this._browserContext = browserContext;\n    this._page = new Page(this, browserContext);\n    // Create a unique utility world for this Playwright instance, just in case there\n    // are multiple instances of Playwright connected to the same browser page.\n    this.utilityWorldName = `__playwright_utility_world_${this._page.guid}`;\n    this._networkManager = new CRNetworkManager(this._page, null);\n    // Sync any browser context state to the network manager. This does not talk over CDP because\n    // we have not connected any sessions to the network manager yet.\n    this.updateOffline();\n    this.updateExtraHTTPHeaders();\n    this.updateHttpCredentials();\n    this.updateRequestInterception();\n    this._mainFrameSession = new FrameSession(this, client, targetId, null);\n    this._sessions.set(targetId, this._mainFrameSession);\n    if (opener && !browserContext._options.noDefaultViewport) {\n      const features = opener._nextWindowOpenPopupFeatures.shift() || [];\n      const viewportSize = helper.getViewportSizeFromWindowFeatures(features);\n      if (viewportSize)\n        this._page.setEmulatedSizeFromWindowOpen({ viewport: viewportSize, screen: viewportSize });\n    }\n\n    const createdEvent = this._isBackgroundPage ? CRBrowserContext.CREvents.BackgroundPage : BrowserContext.Events.Page;\n    this._mainFrameSession._initialize(bits.hasUIWindow).then(\n        () => this._page.reportAsNew(this._opener?._page, undefined, createdEvent),\n        error => this._page.reportAsNew(this._opener?._page, error, createdEvent));\n  }\n\n  private async _forAllFrameSessions(cb: (frame: FrameSession) => Promise<any>) {\n    const frameSessions = Array.from(this._sessions.values());\n    await Promise.all(frameSessions.map(frameSession => {\n      if (frameSession._isMainFrame())\n        return cb(frameSession);\n      return cb(frameSession).catch(e => {\n        // Broadcasting a message to the closed iframe should be a noop.\n        if (isSessionClosedError(e))\n          return;\n        throw e;\n      });\n    }));\n  }\n\n  _sessionForFrame(frame: frames.Frame): FrameSession {\n    // Frame id equals target id.\n    while (!this._sessions.has(frame._id)) {\n      const parent = frame.parentFrame();\n      if (!parent)\n        throw new Error(`Frame has been detached.`);\n      frame = parent;\n    }\n    return this._sessions.get(frame._id)!;\n  }\n\n  private _sessionForHandle(handle: dom.ElementHandle): FrameSession {\n    const frame = handle._context.frame;\n    return this._sessionForFrame(frame);\n  }\n\n  willBeginDownload() {\n    this._mainFrameSession._willBeginDownload();\n  }\n\n  didClose() {\n    for (const session of this._sessions.values())\n      session.dispose();\n    this._page._didClose();\n  }\n\n  async navigateFrame(frame: frames.Frame, url: string, referrer: string | undefined): Promise<frames.GotoResult> {\n    return this._sessionForFrame(frame)._navigate(frame, url, referrer);\n  }\n\n  async updateExtraHTTPHeaders(): Promise<void> {\n    const headers = network.mergeHeaders([\n      this._browserContext._options.extraHTTPHeaders,\n      this._page.extraHTTPHeaders()\n    ]);\n    await this._networkManager.setExtraHTTPHeaders(headers);\n  }\n\n  async updateGeolocation(): Promise<void> {\n    await this._forAllFrameSessions(frame => frame._updateGeolocation(false));\n  }\n\n  async updateOffline(): Promise<void> {\n    await this._networkManager.setOffline(!!this._browserContext._options.offline);\n  }\n\n  async updateHttpCredentials(): Promise<void> {\n    await this._networkManager.authenticate(this._browserContext._options.httpCredentials || null);\n  }\n\n  async updateEmulatedViewportSize(preserveWindowBoundaries?: boolean): Promise<void> {\n    await this._mainFrameSession._updateViewport(preserveWindowBoundaries);\n  }\n\n  async bringToFront(): Promise<void> {\n    await this._mainFrameSession._client.send('Page.bringToFront');\n  }\n\n  async updateEmulateMedia(): Promise<void> {\n    await this._forAllFrameSessions(frame => frame._updateEmulateMedia());\n  }\n\n  async updateUserAgent(): Promise<void> {\n    await this._forAllFrameSessions(frame => frame._updateUserAgent());\n  }\n\n  async updateRequestInterception(): Promise<void> {\n    await this._networkManager.setRequestInterception(this._page.needsRequestInterception());\n  }\n\n  async updateFileChooserInterception() {\n    await this._forAllFrameSessions(frame => frame._updateFileChooserInterception(false));\n  }\n\n  async reload(): Promise<void> {\n    await this._mainFrameSession._client.send('Page.reload');\n  }\n\n  private async _go(delta: number): Promise<boolean> {\n    const history = await this._mainFrameSession._client.send('Page.getNavigationHistory');\n    const entry = history.entries[history.currentIndex + delta];\n    if (!entry)\n      return false;\n    await this._mainFrameSession._client.send('Page.navigateToHistoryEntry', { entryId: entry.id });\n    return true;\n  }\n\n  goBack(): Promise<boolean> {\n    return this._go(-1);\n  }\n\n  goForward(): Promise<boolean> {\n    return this._go(+1);\n  }\n\n  async requestGC(): Promise<void> {\n    await this._mainFrameSession._client.send('HeapProfiler.collectGarbage');\n  }\n\n  async addInitScript(initScript: InitScript, world: types.World = 'main'): Promise<void> {\n    await this._forAllFrameSessions(frame => frame._evaluateOnNewDocument(initScript, world));\n  }\n\n  async exposePlaywrightBinding() {\n    await this._forAllFrameSessions(frame => frame.exposePlaywrightBinding());\n  }\n\n  async removeInitScripts(initScripts: InitScript[]): Promise<void> {\n    await this._forAllFrameSessions(frame => frame._removeEvaluatesOnNewDocument(initScripts));\n  }\n\n  async closePage(runBeforeUnload: boolean): Promise<void> {\n    if (runBeforeUnload)\n      await this._mainFrameSession._client.send('Page.close');\n    else\n      await this._browserContext._browser._closePage(this);\n  }\n\n  async setBackgroundColor(color?: { r: number; g: number; b: number; a: number; }): Promise<void> {\n    await this._mainFrameSession._client.send('Emulation.setDefaultBackgroundColorOverride', { color });\n  }\n\n  async takeScreenshot(progress: Progress, format: 'png' | 'jpeg', documentRect: types.Rect | undefined, viewportRect: types.Rect | undefined, quality: number | undefined, fitsViewport: boolean, scale: 'css' | 'device'): Promise<Buffer> {\n    const { visualViewport } = await progress.race(this._mainFrameSession._client.send('Page.getLayoutMetrics'));\n    if (!documentRect) {\n      documentRect = {\n        x: visualViewport.pageX + viewportRect!.x,\n        y: visualViewport.pageY + viewportRect!.y,\n        ...helper.enclosingIntSize({\n          width: viewportRect!.width / visualViewport.scale,\n          height: viewportRect!.height / visualViewport.scale,\n        })\n      };\n    }\n    // When taking screenshots with documentRect (based on the page content, not viewport),\n    // ignore current page scale.\n    const clip = { ...documentRect, scale: viewportRect ? visualViewport.scale : 1 };\n    if (scale === 'css') {\n      const deviceScaleFactor = this._browserContext._options.deviceScaleFactor || 1;\n      clip.scale /= deviceScaleFactor;\n    }\n    const result = await progress.race(this._mainFrameSession._client.send('Page.captureScreenshot', { format, quality, clip, captureBeyondViewport: !fitsViewport }));\n    return Buffer.from(result.data, 'base64');\n  }\n\n  async getContentFrame(handle: dom.ElementHandle): Promise<frames.Frame | null> {\n    return this._sessionForHandle(handle)._getContentFrame(handle);\n  }\n\n  async getOwnerFrame(handle: dom.ElementHandle): Promise<string | null> {\n    return this._sessionForHandle(handle)._getOwnerFrame(handle);\n  }\n\n  async getBoundingBox(handle: dom.ElementHandle): Promise<types.Rect | null> {\n    return this._sessionForHandle(handle)._getBoundingBox(handle);\n  }\n\n  async scrollRectIntoViewIfNeeded(handle: dom.ElementHandle, rect?: types.Rect): Promise<'error:notvisible' | 'error:notconnected' | 'done'> {\n    return this._sessionForHandle(handle)._scrollRectIntoViewIfNeeded(handle, rect);\n  }\n\n  async setScreencastOptions(options: { width: number, height: number, quality: number } | null): Promise<void> {\n    if (options) {\n      await this._mainFrameSession._startScreencast(this, {\n        format: 'jpeg',\n        quality: options.quality,\n        maxWidth: options.width,\n        maxHeight: options.height\n      });\n    } else {\n      await this._mainFrameSession._stopScreencast(this);\n    }\n  }\n\n  rafCountForStablePosition(): number {\n    return 1;\n  }\n\n  async getContentQuads(handle: dom.ElementHandle): Promise<types.Quad[] | null> {\n    return this._sessionForHandle(handle)._getContentQuads(handle);\n  }\n\n  async setInputFilePaths(handle: dom.ElementHandle<HTMLInputElement>, files: string[]): Promise<void> {\n    const frame = await handle.ownerFrame();\n    if (!frame)\n      throw new Error('Cannot set input files to detached input element');\n    const parentSession = this._sessionForFrame(frame);\n    await parentSession._client.send('DOM.setFileInputFiles', {\n      objectId: handle._objectId,\n      files\n    });\n  }\n\n  async adoptElementHandle<T extends Node>(handle: dom.ElementHandle<T>, to: dom.FrameExecutionContext): Promise<dom.ElementHandle<T>> {\n    return this._sessionForHandle(handle)._adoptElementHandle<T>(handle, to);\n  }\n\n  async getAccessibilityTree(needle?: dom.ElementHandle) {\n    return getAccessibilityTree(this._mainFrameSession._client, needle);\n  }\n\n  async inputActionEpilogue(): Promise<void> {\n    await this._mainFrameSession._client.send('Page.enable').catch(e => {});\n  }\n\n  async resetForReuse(progress: Progress): Promise<void> {\n    // See https://github.com/microsoft/playwright/issues/22432.\n    await this.rawMouse.move(progress, -1, -1, 'none', new Set(), new Set(), true);\n  }\n\n  async pdf(options: channels.PagePdfParams): Promise<Buffer> {\n    return this._pdf.generate(options);\n  }\n\n  coverage(): CRCoverage {\n    return this._coverage;\n  }\n\n  async getFrameElement(frame: frames.Frame): Promise<dom.ElementHandle> {\n    let parent = frame.parentFrame();\n    if (!parent)\n      throw new Error('Frame has been detached.');\n    const parentSession = this._sessionForFrame(parent);\n    const { backendNodeId } = await parentSession._client.send('DOM.getFrameOwner', { frameId: frame._id }).catch(e => {\n      if (e instanceof Error && e.message.includes('Frame with the given id was not found.'))\n        rewriteErrorMessage(e, 'Frame has been detached.');\n      throw e;\n    });\n    parent = frame.parentFrame();\n    if (!parent)\n      throw new Error('Frame has been detached.');\n    return parentSession._adoptBackendNodeId(backendNodeId, await parent._mainContext());\n  }\n\n  shouldToggleStyleSheetToSyncAnimations(): boolean {\n    return false;\n  }\n}\n\nclass FrameSession {\n  readonly _client: CRSession;\n  readonly _crPage: CRPage;\n  readonly _page: Page;\n  private readonly _parentSession: FrameSession | null;\n  private readonly _childSessions = new Set<FrameSession>();\n  private readonly _contextIdToContext = new Map<number, dom.FrameExecutionContext>();\n  private _eventListeners: RegisteredListener[] = [];\n  readonly _targetId: string;\n  private _firstNonInitialNavigationCommittedPromise: Promise<void>;\n  private _firstNonInitialNavigationCommittedFulfill = () => {};\n  private _firstNonInitialNavigationCommittedReject = (e: Error) => {};\n  private _windowId: number | undefined;\n  // Marks the oopif session that remote -> local transition has happened in the parent.\n  // See Target.detachedFromTarget handler for details.\n  private _swappedIn = false;\n  private _videoRecorder: VideoRecorder | null = null;\n  private _screencastId: string | null = null;\n  private _screencastClients = new Set<any>();\n  private _metricsOverride: Protocol.Emulation.setDeviceMetricsOverrideParameters | undefined;\n  private _workerSessions = new Map<string, CRSession>();\n  private _initScriptIds = new Map<InitScript, string>();\n\n  constructor(crPage: CRPage, client: CRSession, targetId: string, parentSession: FrameSession | null) {\n    this._client = client;\n    this._crPage = crPage;\n    this._page = crPage._page;\n    this._targetId = targetId;\n    this._parentSession = parentSession;\n    if (parentSession)\n      parentSession._childSessions.add(this);\n    this._firstNonInitialNavigationCommittedPromise = new Promise((f, r) => {\n      this._firstNonInitialNavigationCommittedFulfill = f;\n      this._firstNonInitialNavigationCommittedReject = r;\n    });\n    // The Promise is not always awaited (e.g. FrameSession._initialize can throw)\n    // so we catch errors here to prevent unhandled promise rejection.\n    this._firstNonInitialNavigationCommittedPromise.catch(() => {});\n  }\n\n  _isMainFrame(): boolean {\n    return this._targetId === this._crPage._targetId;\n  }\n\n  private _addRendererListeners() {\n    this._eventListeners.push(...[\n      eventsHelper.addEventListener(this._client, 'Log.entryAdded', event => this._onLogEntryAdded(event)),\n      eventsHelper.addEventListener(this._client, 'Page.fileChooserOpened', event => this._onFileChooserOpened(event)),\n      eventsHelper.addEventListener(this._client, 'Page.frameAttached', event => this._onFrameAttached(event.frameId, event.parentFrameId)),\n      eventsHelper.addEventListener(this._client, 'Page.frameDetached', event => this._onFrameDetached(event.frameId, event.reason)),\n      eventsHelper.addEventListener(this._client, 'Page.frameNavigated', event => this._onFrameNavigated(event.frame, false)),\n      eventsHelper.addEventListener(this._client, 'Page.frameRequestedNavigation', event => this._onFrameRequestedNavigation(event)),\n      eventsHelper.addEventListener(this._client, 'Page.javascriptDialogOpening', event => this._onDialog(event)),\n      eventsHelper.addEventListener(this._client, 'Page.navigatedWithinDocument', event => this._onFrameNavigatedWithinDocument(event.frameId, event.url)),\n      eventsHelper.addEventListener(this._client, 'Runtime.bindingCalled', event => this._onBindingCalled(event)),\n      eventsHelper.addEventListener(this._client, 'Runtime.consoleAPICalled', event => this._onConsoleAPI(event)),\n      eventsHelper.addEventListener(this._client, 'Runtime.exceptionThrown', exception => this._handleException(exception.exceptionDetails)),\n      eventsHelper.addEventListener(this._client, 'Runtime.executionContextCreated', event => this._onExecutionContextCreated(event.context)),\n      eventsHelper.addEventListener(this._client, 'Runtime.executionContextDestroyed', event => this._onExecutionContextDestroyed(event.executionContextId)),\n      eventsHelper.addEventListener(this._client, 'Runtime.executionContextsCleared', event => this._onExecutionContextsCleared()),\n      eventsHelper.addEventListener(this._client, 'Target.attachedToTarget', event => this._onAttachedToTarget(event)),\n      eventsHelper.addEventListener(this._client, 'Target.detachedFromTarget', event => this._onDetachedFromTarget(event)),\n    ]);\n  }\n\n  private _addBrowserListeners() {\n    this._eventListeners.push(...[\n      eventsHelper.addEventListener(this._client, 'Inspector.targetCrashed', event => this._onTargetCrashed()),\n      eventsHelper.addEventListener(this._client, 'Page.screencastFrame', event => this._onScreencastFrame(event)),\n      eventsHelper.addEventListener(this._client, 'Page.windowOpen', event => this._onWindowOpen(event)),\n    ]);\n  }\n\n  async _initialize(hasUIWindow: boolean) {\n    if (!this._page.isStorageStatePage && hasUIWindow &&\n      !this._crPage._browserContext._browser.isClank() &&\n      !this._crPage._browserContext._options.noDefaultViewport) {\n      const { windowId } = await this._client.send('Browser.getWindowForTarget');\n      this._windowId = windowId;\n    }\n\n    let screencastOptions: types.PageScreencastOptions | undefined;\n    if (!this._page.isStorageStatePage && this._isMainFrame() && this._crPage._browserContext._options.recordVideo && hasUIWindow) {\n      const screencastId = createGuid();\n      const outputFile = path.join(this._crPage._browserContext._options.recordVideo.dir, screencastId + '.webm');\n      screencastOptions = {\n        // validateBrowserContextOptions ensures correct video size.\n        ...this._crPage._browserContext._options.recordVideo.size!,\n        outputFile,\n      };\n      await this._crPage._browserContext._ensureVideosPath();\n      // Note: it is important to start video recorder before sending Page.startScreencast,\n      // and it is equally important to send Page.startScreencast before sending Runtime.runIfWaitingForDebugger.\n      await this._createVideoRecorder(screencastId, screencastOptions);\n      this._crPage._page.waitForInitializedOrError().then(p => {\n        if (p instanceof Error)\n          this._stopVideoRecording().catch(() => {});\n      });\n    }\n\n    let lifecycleEventsEnabled: Promise<any>;\n    if (!this._isMainFrame())\n      this._addRendererListeners();\n    this._addBrowserListeners();\n    const promises: Promise<any>[] = [\n      this._client.send('Page.enable'),\n      this._client.send('Page.getFrameTree').then(({ frameTree }) => {\n        if (this._isMainFrame()) {\n          this._handleFrameTree(frameTree);\n          this._addRendererListeners();\n        }\n\n        const localFrames = this._isMainFrame() ? this._page.frames() : [this._page.frameManager.frame(this._targetId)!];\n        for (const frame of localFrames) {\n          // Note: frames might be removed before we send these.\n          this._client._sendMayFail('Page.createIsolatedWorld', {\n            frameId: frame._id,\n            grantUniveralAccess: true,\n            worldName: this._crPage.utilityWorldName,\n          });\n        }\n\n        const isInitialEmptyPage = this._isMainFrame() && this._page.mainFrame().url() === ':';\n        if (isInitialEmptyPage) {\n          // Ignore lifecycle events, worlds and bindings for the initial empty page. It is never the final page\n          // hence we are going to get more lifecycle updates after the actual navigation has\n          // started (even if the target url is about:blank).\n          lifecycleEventsEnabled.catch(e => {}).then(() => {\n            this._eventListeners.push(eventsHelper.addEventListener(this._client, 'Page.lifecycleEvent', event => this._onLifecycleEvent(event)));\n          });\n        } else {\n          this._firstNonInitialNavigationCommittedFulfill();\n          this._eventListeners.push(eventsHelper.addEventListener(this._client, 'Page.lifecycleEvent', event => this._onLifecycleEvent(event)));\n        }\n      }),\n      this._client.send('Log.enable', {}),\n      lifecycleEventsEnabled = this._client.send('Page.setLifecycleEventsEnabled', { enabled: true }),\n      this._client.send('Runtime.enable', {}),\n      this._client.send('Page.addScriptToEvaluateOnNewDocument', {\n        source: '',\n        worldName: this._crPage.utilityWorldName,\n      }),\n      this._crPage._networkManager.addSession(this._client, undefined, this._isMainFrame()),\n      this._client.send('Target.setAutoAttach', {\n        autoAttach: true,\n        waitForDebuggerOnStart: true,\n        flatten: true,\n        filter: [\n          { type: 'iframe' },\n          { type: 'worker' },\n          { type: 'service_worker', exclude: !process.env.PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS }\n        ]\n      }),\n    ];\n    if (!this._page.isStorageStatePage) {\n      if (this._crPage._browserContext.needsPlaywrightBinding())\n        promises.push(this.exposePlaywrightBinding());\n      if (this._isMainFrame())\n        promises.push(this._client.send('Emulation.setFocusEmulationEnabled', { enabled: true }));\n      const options = this._crPage._browserContext._options;\n      if (options.bypassCSP)\n        promises.push(this._client.send('Page.setBypassCSP', { enabled: true }));\n      if (options.ignoreHTTPSErrors || options.internalIgnoreHTTPSErrors)\n        promises.push(this._client.send('Security.setIgnoreCertificateErrors', { ignore: true }));\n      if (this._isMainFrame())\n        promises.push(this._updateViewport());\n      if (options.hasTouch)\n        promises.push(this._client.send('Emulation.setTouchEmulationEnabled', { enabled: true }));\n      if (options.javaScriptEnabled === false)\n        promises.push(this._client.send('Emulation.setScriptExecutionDisabled', { value: true }));\n      if (options.userAgent || options.locale)\n        promises.push(this._updateUserAgent());\n      if (options.locale)\n        promises.push(emulateLocale(this._client, options.locale));\n      if (options.timezoneId)\n        promises.push(emulateTimezone(this._client, options.timezoneId));\n      if (!this._crPage._browserContext._browser.options.headful)\n        promises.push(this._setDefaultFontFamilies(this._client));\n      promises.push(this._updateGeolocation(true));\n      promises.push(this._updateEmulateMedia());\n      promises.push(this._updateFileChooserInterception(true));\n      for (const initScript of this._crPage._page.allInitScripts())\n        promises.push(this._evaluateOnNewDocument(initScript, 'main', true /* runImmediately */));\n      if (screencastOptions)\n        promises.push(this._startVideoRecording(screencastOptions));\n    }\n    promises.push(this._client.send('Runtime.runIfWaitingForDebugger'));\n    promises.push(this._firstNonInitialNavigationCommittedPromise);\n    await Promise.all(promises);\n  }\n\n  dispose() {\n    this._firstNonInitialNavigationCommittedReject(new TargetClosedError());\n    for (const childSession of this._childSessions)\n      childSession.dispose();\n    if (this._parentSession)\n      this._parentSession._childSessions.delete(this);\n    eventsHelper.removeEventListeners(this._eventListeners);\n    this._crPage._networkManager.removeSession(this._client);\n    this._crPage._sessions.delete(this._targetId);\n    this._client.dispose();\n  }\n\n  async _navigate(frame: frames.Frame, url: string, referrer: string | undefined): Promise<frames.GotoResult> {\n    const response = await this._client.send('Page.navigate', { url, referrer, frameId: frame._id, referrerPolicy: 'unsafeUrl' });\n    if (response.isDownload)\n      throw new frames.NavigationAbortedError(response.loaderId, 'Download is starting');\n    if (response.errorText)\n      throw new frames.NavigationAbortedError(response.loaderId, `${response.errorText} at ${url}`);\n    return { newDocumentId: response.loaderId };\n  }\n\n  _onLifecycleEvent(event: Protocol.Page.lifecycleEventPayload) {\n    if (this._eventBelongsToStaleFrame(event.frameId))\n      return;\n    if (event.name === 'load')\n      this._page.frameManager.frameLifecycleEvent(event.frameId, 'load');\n    else if (event.name === 'DOMContentLoaded')\n      this._page.frameManager.frameLifecycleEvent(event.frameId, 'domcontentloaded');\n  }\n\n  _handleFrameTree(frameTree: Protocol.Page.FrameTree) {\n    this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);\n    this._onFrameNavigated(frameTree.frame, true);\n    if (!frameTree.childFrames)\n      return;\n\n    for (const child of frameTree.childFrames)\n      this._handleFrameTree(child);\n  }\n\n  private _eventBelongsToStaleFrame(frameId: string)  {\n    const frame = this._page.frameManager.frame(frameId);\n    // Subtree may be already gone because some ancestor navigation destroyed the oopif.\n    if (!frame)\n      return true;\n    // When frame goes remote, parent process may still send some events\n    // related to the local frame before it sends frameDetached.\n    // In this case, we already have a new session for this frame, so events\n    // in the old session should be ignored.\n    const session = this._crPage._sessionForFrame(frame);\n    return session && session !== this && !session._swappedIn;\n  }\n\n  _onFrameAttached(frameId: string, parentFrameId: string | null) {\n    const frameSession = this._crPage._sessions.get(frameId);\n    if (frameSession && frameId !== this._targetId) {\n      // This is a remote -> local frame transition.\n      frameSession._swappedIn = true;\n      const frame = this._page.frameManager.frame(frameId);\n      // Frame or even a whole subtree may be already gone, because some ancestor did navigate.\n      if (frame)\n        this._page.frameManager.removeChildFramesRecursively(frame);\n      return;\n    }\n    if (parentFrameId && !this._page.frameManager.frame(parentFrameId)) {\n      // Parent frame may be gone already because some ancestor frame navigated and\n      // destroyed the whole subtree of some oopif, while oopif's process is still sending us events.\n      // Be careful to not confuse this with \"main frame navigated cross-process\" scenario\n      // where parentFrameId is null.\n      return;\n    }\n    this._page.frameManager.frameAttached(frameId, parentFrameId);\n  }\n\n  _onFrameNavigated(framePayload: Protocol.Page.Frame, initial: boolean) {\n    if (this._eventBelongsToStaleFrame(framePayload.id))\n      return;\n    this._page.frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url + (framePayload.urlFragment || ''), framePayload.name || '', framePayload.loaderId, initial);\n    if (!initial)\n      this._firstNonInitialNavigationCommittedFulfill();\n  }\n\n  _onFrameRequestedNavigation(payload: Protocol.Page.frameRequestedNavigationPayload) {\n    if (this._eventBelongsToStaleFrame(payload.frameId))\n      return;\n    if (payload.disposition === 'currentTab')\n      this._page.frameManager.frameRequestedNavigation(payload.frameId);\n  }\n\n  _onFrameNavigatedWithinDocument(frameId: string, url: string) {\n    if (this._eventBelongsToStaleFrame(frameId))\n      return;\n    this._page.frameManager.frameCommittedSameDocumentNavigation(frameId, url);\n  }\n\n  _onFrameDetached(frameId: string, reason: 'remove' | 'swap') {\n    if (this._crPage._sessions.has(frameId)) {\n      // This is a local -> remote frame transition, where\n      // Page.frameDetached arrives after Target.attachedToTarget.\n      // We've already handled the new target and frame reattach - nothing to do here.\n      return;\n    }\n    if (reason === 'swap') {\n      // This is a local -> remote frame transition, where\n      // Page.frameDetached arrives before Target.attachedToTarget.\n      // We should keep the frame in the tree, and it will be used for the new target.\n      const frame = this._page.frameManager.frame(frameId);\n      if (frame)\n        this._page.frameManager.removeChildFramesRecursively(frame);\n      return;\n    }\n    // Just a regular frame detach.\n    this._page.frameManager.frameDetached(frameId);\n  }\n\n  _onExecutionContextCreated(contextPayload: Protocol.Runtime.ExecutionContextDescription) {\n    const frame = contextPayload.auxData ? this._page.frameManager.frame(contextPayload.auxData.frameId) : null;\n    if (!frame || this._eventBelongsToStaleFrame(frame._id))\n      return;\n    const delegate = new CRExecutionContext(this._client, contextPayload);\n    let worldName: types.World|null = null;\n    if (contextPayload.auxData && !!contextPayload.auxData.isDefault)\n      worldName = 'main';\n    else if (contextPayload.name === this._crPage.utilityWorldName)\n      worldName = 'utility';\n    const context = new dom.FrameExecutionContext(delegate, frame, worldName);\n    if (worldName)\n      frame._contextCreated(worldName, context);\n    this._contextIdToContext.set(contextPayload.id, context);\n  }\n\n  _onExecutionContextDestroyed(executionContextId: number) {\n    const context = this._contextIdToContext.get(executionContextId);\n    if (!context)\n      return;\n    this._contextIdToContext.delete(executionContextId);\n    context.frame._contextDestroyed(context);\n  }\n\n  _onExecutionContextsCleared() {\n    for (const contextId of Array.from(this._contextIdToContext.keys()))\n      this._onExecutionContextDestroyed(contextId);\n  }\n\n  _onAttachedToTarget(event: Protocol.Target.attachedToTargetPayload) {\n    const session = this._client.createChildSession(event.sessionId);\n\n    if (event.targetInfo.type === 'iframe') {\n      // Frame id equals target id.\n      const targetId = event.targetInfo.targetId;\n      const frame = this._page.frameManager.frame(targetId);\n      if (!frame)\n        return; // Subtree may be already gone due to renderer/browser race.\n      this._page.frameManager.removeChildFramesRecursively(frame);\n      for (const [contextId, context] of this._contextIdToContext) {\n        if (context.frame === frame)\n          this._onExecutionContextDestroyed(contextId);\n      }\n      const frameSession = new FrameSession(this._crPage, session, targetId, this);\n      this._crPage._sessions.set(targetId, frameSession);\n      frameSession._initialize(false).catch(e => e);\n      return;\n    }\n\n    if (event.targetInfo.type !== 'worker') {\n      session.detach().catch(() => {});\n      return;\n    }\n\n    const url = event.targetInfo.url;\n    const worker = new Worker(this._page, url);\n    this._page.addWorker(event.sessionId, worker);\n    this._workerSessions.set(event.sessionId, session);\n    session.once('Runtime.executionContextCreated', async event => {\n      worker.createExecutionContext(new CRExecutionContext(session, event.context));\n    });\n    // This might fail if the target is closed before we initialize.\n    session._sendMayFail('Runtime.enable');\n    // TODO: attribute workers to the right frame.\n    this._crPage._networkManager.addSession(session, this._page.frameManager.frame(this._targetId) ?? undefined).catch(() => {});\n    session._sendMayFail('Runtime.runIfWaitingForDebugger');\n    session._sendMayFail('Target.setAutoAttach', {\n      autoAttach: true,\n      waitForDebuggerOnStart: true,\n      flatten: true,\n      filter: [\n        { type: 'worker' },\n        { type: 'service_worker', exclude: !process.env.PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS }\n      ]\n    });\n    session.on('Target.attachedToTarget', event => this._onAttachedToTarget(event));\n    session.on('Target.detachedFromTarget', event => this._onDetachedFromTarget(event));\n    session.on('Runtime.consoleAPICalled', event => {\n      const args = event.args.map(o => createHandle(worker.existingExecutionContext!, o));\n      this._page.addConsoleMessage(event.type, args, toConsoleMessageLocation(event.stackTrace));\n    });\n    session.on('Runtime.exceptionThrown', exception => this._page.emitOnContextOnceInitialized(BrowserContext.Events.PageError, exceptionToError(exception.exceptionDetails), this._page));\n  }\n\n  _onDetachedFromTarget(event: Protocol.Target.detachedFromTargetPayload) {\n    // This might be a worker...\n    const workerSession = this._workerSessions.get(event.sessionId);\n    if (workerSession) {\n      workerSession.dispose();\n      this._page.removeWorker(event.sessionId);\n      return;\n    }\n\n    // ... or an oopif.\n    const childFrameSession = this._crPage._sessions.get(event.targetId!);\n    if (!childFrameSession)\n      return;\n\n    // Usually, we get frameAttached in this session first and mark child as swappedIn.\n    if (childFrameSession._swappedIn) {\n      childFrameSession.dispose();\n      return;\n    }\n\n    // However, sometimes we get detachedFromTarget before frameAttached.\n    // In this case we don't know whether this is a remote frame detach,\n    // or just a remote -> local transition. In the latter case, frameAttached\n    // is already inflight, so let's make a safe roundtrip to ensure it arrives.\n    this._client.send('Page.enable').catch(e => null).then(() => {\n      // Child was not swapped in - that means frameAttached did not happen and\n      // this is remote detach rather than remote -> local swap.\n      if (!childFrameSession._swappedIn)\n        this._page.frameManager.frameDetached(event.targetId!);\n      childFrameSession.dispose();\n    });\n  }\n\n  _onWindowOpen(event: Protocol.Page.windowOpenPayload) {\n    this._crPage._nextWindowOpenPopupFeatures.push(event.windowFeatures);\n  }\n\n  async _onConsoleAPI(event: Protocol.Runtime.consoleAPICalledPayload) {\n    if (event.executionContextId === 0) {\n      // DevTools protocol stores the last 1000 console messages. These\n      // messages are always reported even for removed execution contexts. In\n      // this case, they are marked with executionContextId = 0 and are\n      // reported upon enabling Runtime agent.\n      //\n      // Ignore these messages since:\n      // - there's no execution context we can use to operate with message\n      //   arguments\n      // - these messages are reported before Playwright clients can subscribe\n      //   to the 'console'\n      //   page event.\n      //\n      // @see https://github.com/GoogleChrome/puppeteer/issues/3865\n      return;\n    }\n    const context = this._contextIdToContext.get(event.executionContextId);\n    if (!context)\n      return;\n    const values = event.args.map(arg => createHandle(context, arg));\n    this._page.addConsoleMessage(event.type, values, toConsoleMessageLocation(event.stackTrace));\n  }\n\n  async _onBindingCalled(event: Protocol.Runtime.bindingCalledPayload) {\n    const pageOrError = await this._crPage._page.waitForInitializedOrError();\n    if (!(pageOrError instanceof Error)) {\n      const context = this._contextIdToContext.get(event.executionContextId);\n      if (context)\n        await this._page.onBindingCalled(event.payload, context);\n    }\n  }\n\n  _onDialog(event: Protocol.Page.javascriptDialogOpeningPayload) {\n    if (!this._page.frameManager.frame(this._targetId))\n      return; // Our frame/subtree may be gone already.\n    this._page.browserContext.dialogManager.dialogDidOpen(new dialog.Dialog(\n        this._page,\n        event.type,\n        event.message,\n        async (accept: boolean, promptText?: string) => {\n          // TODO: this should actually be a CDP event that notifies about a cancelled navigation attempt.\n          if (this._isMainFrame() && event.type === 'beforeunload' && !accept)\n            this._page.frameManager.frameAbortedNavigation(this._page.mainFrame()._id, 'navigation cancelled by beforeunload dialog');\n          await this._client.send('Page.handleJavaScriptDialog', { accept, promptText });\n        },\n        event.defaultPrompt));\n  }\n\n  _handleException(exceptionDetails: Protocol.Runtime.ExceptionDetails) {\n    this._page.emitOnContextOnceInitialized(BrowserContext.Events.PageError, exceptionToError(exceptionDetails), this._page);\n  }\n\n  async _onTargetCrashed() {\n    this._client._markAsCrashed();\n    this._page._didCrash();\n  }\n\n  _onLogEntryAdded(event: Protocol.Log.entryAddedPayload) {\n    const { level, text, args, source, url, lineNumber } = event.entry;\n    if (args)\n      args.map(arg => releaseObject(this._client, arg.objectId!));\n    if (source !== 'worker') {\n      const location: types.ConsoleMessageLocation = {\n        url: url || '',\n        lineNumber: lineNumber || 0,\n        columnNumber: 0,\n      };\n      this._page.addConsoleMessage(level, [], location, text);\n    }\n  }\n\n  async _onFileChooserOpened(event: Protocol.Page.fileChooserOpenedPayload) {\n    if (!event.backendNodeId)\n      return;\n    const frame = this._page.frameManager.frame(event.frameId);\n    if (!frame)\n      return;\n    let handle;\n    try {\n      const utilityContext = await frame._utilityContext();\n      handle = await this._adoptBackendNodeId(event.backendNodeId, utilityContext);\n    } catch (e) {\n      // During async processing, frame/context may go away. We should not throw.\n      return;\n    }\n    await this._page._onFileChooserOpened(handle);\n  }\n\n  _willBeginDownload() {\n    if (!this._crPage._page.initializedOrUndefined()) {\n      // Resume the page creation with an error. The page will automatically close right\n      // after the download begins.\n      this._firstNonInitialNavigationCommittedReject(new Error('Starting new page download'));\n    }\n  }\n\n  _onScreencastFrame(payload: Protocol.Page.screencastFramePayload) {\n    this._page.throttleScreencastFrameAck(() => {\n      this._client.send('Page.screencastFrameAck', { sessionId: payload.sessionId }).catch(() => {});\n    });\n    const buffer = Buffer.from(payload.data, 'base64');\n    this._page.emit(Page.Events.ScreencastFrame, {\n      buffer,\n      frameSwapWallTime: payload.metadata.timestamp ? payload.metadata.timestamp * 1000 : undefined,\n      width: payload.metadata.deviceWidth,\n      height: payload.metadata.deviceHeight,\n    });\n  }\n\n  async _createVideoRecorder(screencastId: string, options: types.PageScreencastOptions): Promise<void> {\n    assert(!this._screencastId);\n    const ffmpegPath = registry.findExecutable('ffmpeg')!.executablePathOrDie(this._page.browserContext._browser.sdkLanguage());\n    this._videoRecorder = await VideoRecorder.launch(this._crPage._page, ffmpegPath, options);\n    this._screencastId = screencastId;\n  }\n\n  async _startVideoRecording(options: types.PageScreencastOptions) {\n    const screencastId = this._screencastId;\n    assert(screencastId);\n    this._page.once(Page.Events.Close, () => this._stopVideoRecording().catch(() => {}));\n    const gotFirstFrame = new Promise(f => this._client.once('Page.screencastFrame', f));\n    await this._startScreencast(this._videoRecorder, {\n      format: 'jpeg',\n      quality: 90,\n      maxWidth: options.width,\n      maxHeight: options.height,\n    });\n    // Wait for the first frame before reporting video to the client.\n    gotFirstFrame.then(() => {\n      this._crPage._browserContext._browser._videoStarted(this._crPage._browserContext, screencastId, options.outputFile, this._crPage._page.waitForInitializedOrError());\n    });\n  }\n\n  async _stopVideoRecording(): Promise<void> {\n    if (!this._screencastId)\n      return;\n    const screencastId = this._screencastId;\n    this._screencastId = null;\n    const recorder = this._videoRecorder!;\n    this._videoRecorder = null;\n    await this._stopScreencast(recorder);\n    await recorder.stop().catch(() => {});\n    // Keep the video artifact in the map until encoding is fully finished, if the context\n    // starts closing before the video is fully written to disk it will wait for it.\n    const video = this._crPage._browserContext._browser._takeVideo(screencastId);\n    video?.reportFinished();\n  }\n\n  async _startScreencast(client: any, options: Protocol.Page.startScreencastParameters = {}) {\n    this._screencastClients.add(client);\n    if (this._screencastClients.size === 1)\n      await this._client.send('Page.startScreencast', options);\n  }\n\n  async _stopScreencast(client: any) {\n    this._screencastClients.delete(client);\n    if (!this._screencastClients.size)\n      await this._client._sendMayFail('Page.stopScreencast');\n  }\n\n  async _updateGeolocation(initial: boolean): Promise<void> {\n    const geolocation = this._crPage._browserContext._options.geolocation;\n    if (!initial || geolocation)\n      await this._client.send('Emulation.setGeolocationOverride', geolocation || {});\n  }\n\n  async _updateViewport(preserveWindowBoundaries?: boolean): Promise<void> {\n    if (this._crPage._browserContext._browser.isClank())\n      return;\n    assert(this._isMainFrame());\n    const options = this._crPage._browserContext._options;\n    const emulatedSize = this._page.emulatedSize();\n    if (!emulatedSize)\n      return;\n    const viewportSize = emulatedSize.viewport;\n    const screenSize = emulatedSize.screen;\n    const isLandscape = screenSize.width > screenSize.height;\n    const metricsOverride: Protocol.Emulation.setDeviceMetricsOverrideParameters = {\n      mobile: !!options.isMobile,\n      width: viewportSize.width,\n      height: viewportSize.height,\n      screenWidth: screenSize.width,\n      screenHeight: screenSize.height,\n      deviceScaleFactor: options.deviceScaleFactor || 1,\n      screenOrientation: !!options.isMobile ? (\n        isLandscape ? { angle: 90, type: 'landscapePrimary' } : { angle: 0, type: 'portraitPrimary' }\n      ) : { angle: 0, type: 'landscapePrimary' },\n      dontSetVisibleSize: preserveWindowBoundaries\n    };\n    if (JSON.stringify(this._metricsOverride) === JSON.stringify(metricsOverride))\n      return;\n    const promises = [];\n    if (!preserveWindowBoundaries && this._windowId) {\n      let insets = { width: 0, height: 0 };\n      if (this._crPage._browserContext._browser.options.headful) {\n        // TODO: popup windows have their own insets.\n        insets = { width: 24, height: 88 };\n        if (process.platform === 'win32')\n          insets = { width: 16, height: 88 };\n        else if (process.platform === 'linux')\n          insets = { width: 8, height: 85 };\n        else if (process.platform === 'darwin')\n          insets = { width: 2, height: 80 };\n        if (this._crPage._browserContext.isPersistentContext()) {\n          // FIXME: Chrome bug: OOPIF router is confused when hit target is\n          // outside browser window.\n          // Account for the infobar here to work around the bug.\n          insets.height += 46;\n        }\n      }\n      promises.push(this.setWindowBounds({\n        width: viewportSize.width + insets.width,\n        height: viewportSize.height + insets.height\n      }));\n    }\n    // Make sure that the viewport emulationis set after the embedder window resize.\n    promises.push(this._client.send('Emulation.setDeviceMetricsOverride', metricsOverride));\n    await Promise.all(promises);\n    this._metricsOverride = metricsOverride;\n  }\n\n  async windowBounds(): Promise<WindowBounds> {\n    const { bounds } = await this._client.send('Browser.getWindowBounds', {\n      windowId: this._windowId!\n    });\n    return bounds;\n  }\n\n  async setWindowBounds(bounds: WindowBounds) {\n    return await this._client.send('Browser.setWindowBounds', {\n      windowId: this._windowId!,\n      bounds\n    });\n  }\n\n  async _updateEmulateMedia(): Promise<void> {\n    const emulatedMedia = this._page.emulatedMedia();\n    // Empty string disables the override.\n    const media = emulatedMedia.media === 'no-override' ? '' : emulatedMedia.media;\n    const colorScheme = emulatedMedia.colorScheme === 'no-override' ? '' : emulatedMedia.colorScheme;\n    const reducedMotion = emulatedMedia.reducedMotion === 'no-override' ? '' : emulatedMedia.reducedMotion;\n    const forcedColors = emulatedMedia.forcedColors === 'no-override' ? '' : emulatedMedia.forcedColors;\n    const contrast = emulatedMedia.contrast === 'no-override' ? '' : emulatedMedia.contrast;\n    const features = [\n      { name: 'prefers-color-scheme', value: colorScheme },\n      { name: 'prefers-reduced-motion', value: reducedMotion },\n      { name: 'forced-colors', value: forcedColors },\n      { name: 'prefers-contrast', value: contrast },\n    ];\n    await this._client.send('Emulation.setEmulatedMedia', { media, features });\n  }\n\n  async _updateUserAgent(): Promise<void> {\n    const options = this._crPage._browserContext._options;\n    await this._client.send('Emulation.setUserAgentOverride', {\n      userAgent: options.userAgent || '',\n      acceptLanguage: options.locale,\n      userAgentMetadata: calculateUserAgentMetadata(options),\n    });\n  }\n\n  private async _setDefaultFontFamilies(session: CRSession) {\n    const fontFamilies = platformToFontFamilies[this._crPage._browserContext._browser._platform()];\n    await session.send('Page.setFontFamilies', fontFamilies);\n  }\n\n  async _updateFileChooserInterception(initial: boolean) {\n    const enabled = this._page.fileChooserIntercepted();\n    if (initial && !enabled)\n      return;\n    await this._client.send('Page.setInterceptFileChooserDialog', { enabled }).catch(() => {}); // target can be closed.\n  }\n\n  async _evaluateOnNewDocument(initScript: InitScript, world: types.World, runImmediately?: boolean): Promise<void> {\n    const worldName = world === 'utility' ? this._crPage.utilityWorldName : undefined;\n    const { identifier } = await this._client.send('Page.addScriptToEvaluateOnNewDocument', { source: initScript.source, worldName, runImmediately });\n    this._initScriptIds.set(initScript, identifier);\n  }\n\n  async _removeEvaluatesOnNewDocument(initScripts: InitScript[]): Promise<void> {\n    const ids: string[] = [];\n    for (const script of initScripts) {\n      const id = this._initScriptIds.get(script);\n      if (id)\n        ids.push(id);\n      this._initScriptIds.delete(script);\n    }\n    await Promise.all(ids.map(identifier => this._client.send('Page.removeScriptToEvaluateOnNewDocument', { identifier }).catch(() => {}))); // target can be closed\n  }\n\n  async exposePlaywrightBinding() {\n    await this._client.send('Runtime.addBinding', { name: PageBinding.kBindingName });\n  }\n\n  async _getContentFrame(handle: dom.ElementHandle): Promise<frames.Frame | null> {\n    const nodeInfo = await this._client.send('DOM.describeNode', {\n      objectId: handle._objectId\n    });\n    if (!nodeInfo || typeof nodeInfo.node.frameId !== 'string')\n      return null;\n    return this._page.frameManager.frame(nodeInfo.node.frameId);\n  }\n\n  async _getOwnerFrame(handle: dom.ElementHandle): Promise<string | null> {\n    // document.documentElement has frameId of the owner frame.\n    const documentElement = await handle.evaluateHandle(node => {\n      const doc = node as Document;\n      if (doc.documentElement && doc.documentElement.ownerDocument === doc)\n        return doc.documentElement;\n      return node.ownerDocument ? node.ownerDocument.documentElement : null;\n    });\n    if (!documentElement)\n      return null;\n    if (!documentElement._objectId)\n      return null;\n    const nodeInfo = await this._client.send('DOM.describeNode', {\n      objectId: documentElement._objectId\n    });\n    const frameId = nodeInfo && typeof nodeInfo.node.frameId === 'string' ?\n      nodeInfo.node.frameId : null;\n    documentElement.dispose();\n    return frameId;\n  }\n\n  async _getBoundingBox(handle: dom.ElementHandle): Promise<types.Rect | null> {\n    const result = await this._client._sendMayFail('DOM.getBoxModel', {\n      objectId: handle._objectId\n    });\n    if (!result)\n      return null;\n    const quad = result.model.border;\n    const x = Math.min(quad[0], quad[2], quad[4], quad[6]);\n    const y = Math.min(quad[1], quad[3], quad[5], quad[7]);\n    const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;\n    const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;\n    const position = await this._framePosition();\n    if (!position)\n      return null;\n    return { x: x + position.x, y: y + position.y, width, height };\n  }\n\n  private async _framePosition(): Promise<types.Point | null> {\n    const frame = this._page.frameManager.frame(this._targetId);\n    if (!frame)\n      return null;\n    if (frame === this._page.mainFrame())\n      return { x: 0, y: 0 };\n    const element = await frame.frameElement();\n    const box = await element.boundingBox();\n    return box;\n  }\n\n  async _scrollRectIntoViewIfNeeded(handle: dom.ElementHandle, rect?: types.Rect): Promise<'error:notvisible' | 'error:notconnected' | 'done'> {\n    return await this._client.send('DOM.scrollIntoViewIfNeeded', {\n      objectId: handle._objectId,\n      rect,\n    }).then(() => 'done' as const).catch(e => {\n      if (e instanceof Error && e.message.includes('Node does not have a layout object'))\n        return 'error:notvisible';\n      if (e instanceof Error && e.message.includes('Node is detached from document'))\n        return 'error:notconnected';\n      throw e;\n    });\n  }\n\n  async _getContentQuads(handle: dom.ElementHandle): Promise<types.Quad[] | null> {\n    const result = await this._client._sendMayFail('DOM.getContentQuads', {\n      objectId: handle._objectId\n    });\n    if (!result)\n      return null;\n    const position = await this._framePosition();\n    if (!position)\n      return null;\n    return result.quads.map(quad => [\n      { x: quad[0] + position.x, y: quad[1] + position.y },\n      { x: quad[2] + position.x, y: quad[3] + position.y },\n      { x: quad[4] + position.x, y: quad[5] + position.y },\n      { x: quad[6] + position.x, y: quad[7] + position.y }\n    ]);\n  }\n\n  async _adoptElementHandle<T extends Node>(handle: dom.ElementHandle<T>, to: dom.FrameExecutionContext): Promise<dom.ElementHandle<T>> {\n    const nodeInfo = await this._client.send('DOM.describeNode', {\n      objectId: handle._objectId,\n    });\n    return this._adoptBackendNodeId(nodeInfo.node.backendNodeId, to) as Promise<dom.ElementHandle<T>>;\n  }\n\n  async _adoptBackendNodeId(backendNodeId: Protocol.DOM.BackendNodeId, to: dom.FrameExecutionContext): Promise<dom.ElementHandle> {\n    const result = await this._client._sendMayFail('DOM.resolveNode', {\n      backendNodeId,\n      executionContextId: (to.delegate as CRExecutionContext)._contextId,\n    });\n    if (!result || result.object.subtype === 'null')\n      throw new Error(dom.kUnableToAdoptErrorMessage);\n    return createHandle(to, result.object).asElement()!;\n  }\n}\n\nasync function emulateLocale(session: CRSession, locale: string) {\n  try {\n    await session.send('Emulation.setLocaleOverride', { locale });\n  } catch (exception) {\n    // All pages in the same renderer share locale. All such pages belong to the same\n    // context and if locale is overridden for one of them its value is the same as\n    // we are trying to set so it's not a problem.\n    if (exception.message.includes('Another locale override is already in effect'))\n      return;\n    throw exception;\n  }\n}\n\nasync function emulateTimezone(session: CRSession, timezoneId: string) {\n  try {\n    await session.send('Emulation.setTimezoneOverride', { timezoneId: timezoneId });\n  } catch (exception) {\n    if (exception.message.includes('Timezone override is already in effect'))\n      return;\n    if (exception.message.includes('Invalid timezone'))\n      throw new Error(`Invalid timezone ID: ${timezoneId}`);\n    throw exception;\n  }\n}\n\n// Chromium reference: https://source.chromium.org/chromium/chromium/src/+/main:components/embedder_support/user_agent_utils.cc;l=434;drc=70a6711e08e9f9e0d8e4c48e9ba5cab62eb010c2\nfunction calculateUserAgentMetadata(options: types.BrowserContextOptions) {\n  const ua = options.userAgent;\n  if (!ua)\n    return undefined;\n  const metadata: Protocol.Emulation.UserAgentMetadata = {\n    mobile: !!options.isMobile,\n    model: '',\n    architecture: 'x86',\n    platform: 'Windows',\n    platformVersion: '',\n  };\n  const androidMatch = ua.match(/Android (\\d+(\\.\\d+)?(\\.\\d+)?)/);\n  const iPhoneMatch = ua.match(/iPhone OS (\\d+(_\\d+)?)/);\n  const iPadMatch = ua.match(/iPad; CPU OS (\\d+(_\\d+)?)/);\n  const macOSMatch = ua.match(/Mac OS X (\\d+(_\\d+)?(_\\d+)?)/);\n  const windowsMatch = ua.match(/Windows\\D+(\\d+(\\.\\d+)?(\\.\\d+)?)/);\n  if (androidMatch) {\n    metadata.platform = 'Android';\n    metadata.platformVersion = androidMatch[1];\n    metadata.architecture = 'arm';\n  } else if (iPhoneMatch) {\n    metadata.platform = 'iOS';\n    metadata.platformVersion = iPhoneMatch[1];\n    metadata.architecture = 'arm';\n  } else if (iPadMatch) {\n    metadata.platform = 'iOS';\n    metadata.platformVersion = iPadMatch[1];\n    metadata.architecture = 'arm';\n  } else if (macOSMatch) {\n    metadata.platform = 'macOS';\n    metadata.platformVersion = macOSMatch[1];\n    if (!ua.includes('Intel'))\n      metadata.architecture = 'arm';\n  } else if (windowsMatch) {\n    metadata.platform = 'Windows';\n    metadata.platformVersion = windowsMatch[1];\n  } else if (ua.toLowerCase().includes('linux')) {\n    metadata.platform = 'Linux';\n  }\n  if (ua.includes('ARM'))\n    metadata.architecture = 'arm';\n  return metadata;\n}\n"],
  "mappings": "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",
  "names": ["path", "event"]
}
