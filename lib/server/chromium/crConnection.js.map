{
  "version": 3,
  "sources": ["../../../src/server/chromium/crConnection.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {  assert, eventsHelper } from '../../utils';\nimport { debugLogger } from '../utils/debugLogger';\nimport { helper } from '../helper';\nimport { ProtocolError } from '../protocolError';\nimport { SdkObject } from '../instrumentation';\n\nimport type { RegisteredListener } from '../../utils';\nimport type { ConnectionTransport, ProtocolRequest, ProtocolResponse } from '../transport';\nimport type { Protocol } from './protocol';\nimport type { RecentLogsCollector } from '../utils/debugLogger';\nimport type { ProtocolLogger } from '../types';\n\n\nexport const ConnectionEvents = {\n  Disconnected: Symbol('ConnectionEvents.Disconnected')\n};\n\n// CRPlaywright uses this special id to issue Browser.close command which we\n// should ignore.\nexport const kBrowserCloseMessageId = -9999;\n\nexport class CRConnection extends SdkObject {\n  private _lastId = 0;\n  private readonly _transport: ConnectionTransport;\n  readonly _sessions = new Map<string, CRSession>();\n  private readonly _protocolLogger: ProtocolLogger;\n  private readonly _browserLogsCollector: RecentLogsCollector;\n  _browserDisconnectedLogs: string | undefined;\n  readonly rootSession: CRSession;\n  _closed = false;\n\n  constructor(parent: SdkObject, transport: ConnectionTransport, protocolLogger: ProtocolLogger, browserLogsCollector: RecentLogsCollector) {\n    super(parent, 'cr-connection');\n    this.setMaxListeners(0);\n    this._transport = transport;\n    this._protocolLogger = protocolLogger;\n    this._browserLogsCollector = browserLogsCollector;\n    this.rootSession = new CRSession(this, null, '');\n    this._sessions.set('', this.rootSession);\n    this._transport.onmessage = this._onMessage.bind(this);\n    // onclose should be set last, since it can be immediately called.\n    this._transport.onclose = this._onClose.bind(this);\n  }\n\n  _rawSend(sessionId: string, method: string, params: any): number {\n    const id = ++this._lastId;\n    const message: ProtocolRequest = { id, method, params };\n    if (sessionId)\n      message.sessionId = sessionId;\n    this._protocolLogger('send', message);\n    this._transport.send(message);\n    return id;\n  }\n\n  async _onMessage(message: ProtocolResponse) {\n    this._protocolLogger('receive', message);\n    if (message.id === kBrowserCloseMessageId)\n      return;\n    const session = this._sessions.get(message.sessionId || '');\n    if (session)\n      session._onMessage(message);\n  }\n\n  _onClose(reason?: string) {\n    this._closed = true;\n    this._transport.onmessage = undefined;\n    this._transport.onclose = undefined;\n    this._browserDisconnectedLogs = helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);\n    this.rootSession.dispose();\n    Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));\n  }\n\n  close() {\n    if (!this._closed)\n      this._transport.close();\n  }\n\n  async createBrowserSession(): Promise<CDPSession> {\n    const { sessionId } = await this.rootSession.send('Target.attachToBrowserTarget');\n    return new CDPSession(this.rootSession, sessionId);\n  }\n}\n\ntype SessionEventListener = (method: string, params?: Object) => void;\n\nexport class CRSession extends SdkObject {\n  private readonly _connection: CRConnection;\n  private _eventListener?: SessionEventListener;\n  private readonly _callbacks = new Map<number, { resolve: (o: any) => void, reject: (e: ProtocolError) => void, error: ProtocolError }>();\n  private readonly _sessionId: string;\n  private readonly _parentSession: CRSession | null;\n  private _crashed: boolean = false;\n  private _closed = false;\n  override on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n\n  constructor(connection: CRConnection, parentSession: CRSession | null, sessionId: string, eventListener?: SessionEventListener) {\n    super(connection, 'cr-session');\n    this.setMaxListeners(0);\n    this._connection = connection;\n    this._parentSession = parentSession;\n    this._sessionId = sessionId;\n    this._eventListener = eventListener;\n\n    this.on = super.on;\n    this.addListener = super.addListener;\n    this.off = super.removeListener;\n    this.removeListener = super.removeListener;\n    this.once = super.once;\n  }\n\n  _markAsCrashed() {\n    this._crashed = true;\n  }\n\n  createChildSession(sessionId: string, eventListener?: SessionEventListener): CRSession {\n    const session = new CRSession(this._connection, this, sessionId, eventListener);\n    this._connection._sessions.set(sessionId, session);\n    return session;\n  }\n\n  async send<T extends keyof Protocol.CommandParameters>(\n    method: T,\n    params?: Protocol.CommandParameters[T]\n  ): Promise<Protocol.CommandReturnValues[T]> {\n    if (this._crashed || this._closed || this._connection._closed || this._connection._browserDisconnectedLogs)\n      throw new ProtocolError(this._crashed ? 'crashed' : 'closed', undefined, this._connection._browserDisconnectedLogs);\n    const id = this._connection._rawSend(this._sessionId, method, params);\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, { resolve, reject, error: new ProtocolError('error', method) });\n    });\n  }\n\n  _sendMayFail<T extends keyof Protocol.CommandParameters>(method: T, params?: Protocol.CommandParameters[T]): Promise<Protocol.CommandReturnValues[T] | void> {\n    return this.send(method, params).catch((error: ProtocolError) => debugLogger.log('error', error));\n  }\n\n  _onMessage(object: ProtocolResponse) {\n    if (object.id && this._callbacks.has(object.id)) {\n      const callback = this._callbacks.get(object.id)!;\n      this._callbacks.delete(object.id);\n      if (object.error) {\n        callback.error.setMessage(object.error.message);\n        callback.reject(callback.error);\n      } else {\n        callback.resolve(object.result);\n      }\n    } else if (object.id && object.error?.code === -32001) {\n      // Message to a closed session, just ignore it.\n    } else {\n      assert(!object.id, object?.error?.message || undefined);\n      Promise.resolve().then(() => {\n        if (this._eventListener)\n          this._eventListener(object.method!, object.params);\n        this.emit(object.method!, object.params);\n      });\n    }\n  }\n\n  async detach() {\n    if (this._closed)\n      throw new Error(`Session already detached. Most likely the page has been closed.`);\n    if (!this._parentSession)\n      throw new Error('Root session cannot be closed');\n    // Ideally, detaching should resume any target, but there is a bug in the backend,\n    // so we must Runtime.runIfWaitingForDebugger first.\n    await this._sendMayFail('Runtime.runIfWaitingForDebugger');\n    await this._parentSession.send('Target.detachFromTarget', { sessionId: this._sessionId });\n    this.dispose();\n  }\n\n  dispose() {\n    this._closed = true;\n    this._connection._sessions.delete(this._sessionId);\n    for (const callback of this._callbacks.values()) {\n      callback.error.setMessage(`Internal server error, session closed.`);\n      callback.error.type = this._crashed ? 'crashed' : 'closed';\n      callback.error.logs = this._connection._browserDisconnectedLogs;\n      callback.reject(callback.error);\n    }\n    this._callbacks.clear();\n  }\n}\n\nexport class CDPSession extends SdkObject {\n  static Events = {\n    Event: 'event',\n    Closed: 'close',\n  };\n\n  private _session: CRSession;\n  private _listeners: RegisteredListener[] = [];\n\n  constructor(parentSession: CRSession, sessionId: string) {\n    super(parentSession, 'cdp-session');\n    this._session = parentSession.createChildSession(sessionId, (method, params) => this.emit(CDPSession.Events.Event, { method, params }));\n    this._listeners = [eventsHelper.addEventListener(parentSession, 'Target.detachedFromTarget', (event: Protocol.Target.detachedFromTargetPayload) => {\n      if (event.sessionId === sessionId)\n        this._onClose();\n    })];\n  }\n\n  async send(method: string, params?: any) {\n    return await this._session.send(method as any, params);\n  }\n\n  async detach() {\n    return await this._session.detach();\n  }\n\n  async attachToTarget(targetId: string) {\n    const { sessionId } = await this.send('Target.attachToTarget', { targetId, flatten: true });\n    return new CDPSession(this._session, sessionId);\n  }\n\n  private _onClose() {\n    eventsHelper.removeEventListeners(this._listeners);\n    this._session.dispose();\n    this.emit(CDPSession.Events.Closed);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
