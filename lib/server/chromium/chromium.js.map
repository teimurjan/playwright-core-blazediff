{
  "version": 3,
  "sources": ["../../../src/server/chromium/chromium.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport { chromiumSwitches } from './chromiumSwitches';\nimport { CRBrowser } from './crBrowser';\nimport { kBrowserCloseMessageId } from './crConnection';\nimport { debugMode, headersArrayToObject, headersObjectToArray, } from '../../utils';\nimport { wrapInASCIIBox } from '../utils/ascii';\nimport { RecentLogsCollector } from '../utils/debugLogger';\nimport { ManualPromise } from '../../utils/isomorphic/manualPromise';\nimport { fetchData } from '../utils/network';\nimport { getUserAgent } from '../utils/userAgent';\nimport { validateBrowserContextOptions } from '../browserContext';\nimport { BrowserType, kNoXServerRunningError } from '../browserType';\nimport { helper } from '../helper';\nimport { registry } from '../registry';\nimport { WebSocketTransport } from '../transport';\nimport { CRDevTools } from './crDevTools';\nimport { Browser } from '../browser';\nimport { removeFolders } from '../utils/fileUtils';\nimport { gracefullyCloseSet } from '../utils/processLauncher';\n\nimport type { HTTPRequestParams } from '../utils/network';\nimport type { BrowserOptions, BrowserProcess } from '../browser';\nimport type { SdkObject } from '../instrumentation';\nimport type { Env } from '../utils/processLauncher';\nimport type { Progress } from '../progress';\nimport type { ProtocolError } from '../protocolError';\nimport type { ConnectionTransport, ProtocolRequest } from '../transport';\nimport type * as types from '../types';\nimport type http from 'http';\nimport type stream from 'stream';\n\nconst ARTIFACTS_FOLDER = path.join(os.tmpdir(), 'playwright-artifacts-');\n\nexport class Chromium extends BrowserType {\n  private _devtools: CRDevTools | undefined;\n\n  constructor(parent: SdkObject) {\n    super(parent, 'chromium');\n\n    if (debugMode() === 'inspector')\n      this._devtools = this._createDevTools();\n  }\n\n  override async connectOverCDP(progress: Progress, endpointURL: string, options: { slowMo?: number, headers?: types.HeadersArray }) {\n    return await this._connectOverCDPInternal(progress, endpointURL, options);\n  }\n\n  async _connectOverCDPInternal(progress: Progress, endpointURL: string, options: types.LaunchOptions & { headers?: types.HeadersArray }, onClose?: () => Promise<void>) {\n    let headersMap: { [key: string]: string; } | undefined;\n    if (options.headers)\n      headersMap = headersArrayToObject(options.headers, false);\n\n    if (!headersMap)\n      headersMap = { 'User-Agent': getUserAgent() };\n    else if (headersMap && !Object.keys(headersMap).some(key => key.toLowerCase() === 'user-agent'))\n      headersMap['User-Agent'] = getUserAgent();\n\n    const artifactsDir = await progress.race(fs.promises.mkdtemp(ARTIFACTS_FOLDER));\n    const doCleanup = async () => {\n      await removeFolders([artifactsDir]);\n      const cb = onClose;\n      onClose = undefined; // Make sure to only call onClose once.\n      await cb?.();\n    };\n\n    let chromeTransport: WebSocketTransport | undefined;\n    const doClose = async () => {\n      await chromeTransport?.closeAndWait();\n      await doCleanup();\n    };\n\n    try {\n      const wsEndpoint = await urlToWSEndpoint(progress, endpointURL, headersMap);\n      chromeTransport = await WebSocketTransport.connect(progress, wsEndpoint, { headers: headersMap });\n\n      const browserProcess: BrowserProcess = { close: doClose, kill: doClose };\n      const persistent: types.BrowserContextOptions = { noDefaultViewport: true };\n      const browserOptions: BrowserOptions = {\n        slowMo: options.slowMo,\n        name: 'chromium',\n        isChromium: true,\n        persistent,\n        browserProcess,\n        protocolLogger: helper.debugProtocolLogger(),\n        browserLogsCollector: new RecentLogsCollector(),\n        artifactsDir,\n        downloadsPath: options.downloadsPath || artifactsDir,\n        tracesDir: options.tracesDir || artifactsDir,\n        originalLaunchOptions: {},\n      };\n      validateBrowserContextOptions(persistent, browserOptions);\n      const browser = await progress.race(CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions));\n      browser._isCollocatedWithServer = false;\n      browser.on(Browser.Events.Disconnected, doCleanup);\n      return browser;\n    } catch (error) {\n      await doClose().catch(() => {});\n      throw error;\n    }\n  }\n\n  private _createDevTools() {\n    // TODO: this is totally wrong when using channels.\n    const directory = registry.findExecutable('chromium').directory;\n    return directory ? new CRDevTools(path.join(directory, 'devtools-preferences.json')) : undefined;\n  }\n\n  override async connectToTransport(transport: ConnectionTransport, options: BrowserOptions, browserLogsCollector: RecentLogsCollector): Promise<CRBrowser> {\n    let devtools = this._devtools;\n    if ((options as any).__testHookForDevTools) {\n      devtools = this._createDevTools();\n      await (options as any).__testHookForDevTools(devtools);\n    }\n    try {\n      return await CRBrowser.connect(this.attribution.playwright, transport, options, devtools);\n    } catch (e) {\n      if (browserLogsCollector.recentLogs().some(log => log.includes('Failed to create a ProcessSingleton for your profile directory.'))) {\n        throw new Error(\n            'Failed to create a ProcessSingleton for your profile directory. ' +\n            'This usually means that the profile is already in use by another instance of Chromium.'\n        );\n      }\n      throw e;\n    }\n  }\n\n  override doRewriteStartupLog(error: ProtocolError): ProtocolError {\n    if (!error.logs)\n      return error;\n    if (error.logs.includes('Missing X server'))\n      error.logs = '\\n' + wrapInASCIIBox(kNoXServerRunningError, 1);\n    // These error messages are taken from Chromium source code as of July, 2020:\n    // https://github.com/chromium/chromium/blob/70565f67e79f79e17663ad1337dc6e63ee207ce9/content/browser/zygote_host/zygote_host_impl_linux.cc\n    if (!error.logs.includes('crbug.com/357670') && !error.logs.includes('No usable sandbox!') && !error.logs.includes('crbug.com/638180'))\n      return error;\n    error.logs = [\n      `Chromium sandboxing failed!`,\n      `================================`,\n      `To avoid the sandboxing issue, do either of the following:`,\n      `  - (preferred): Configure your environment to support sandboxing`,\n      `  - (alternative): Launch Chromium without sandbox using 'chromiumSandbox: false' option`,\n      `================================`,\n      ``,\n    ].join('\\n');\n    return error;\n  }\n\n  override amendEnvironment(env: Env): Env {\n    return env;\n  }\n\n  override attemptToGracefullyCloseBrowser(transport: ConnectionTransport): void {\n    // Note that it's fine to reuse the transport, since our connection ignores kBrowserCloseMessageId.\n    const message: ProtocolRequest = { method: 'Browser.close', id: kBrowserCloseMessageId, params: {} };\n    transport.send(message);\n  }\n\n  override async _launchWithSeleniumHub(progress: Progress, hubUrl: string, options: types.LaunchOptions): Promise<CRBrowser> {\n    await progress.race(this._createArtifactDirs(options));\n\n    if (!hubUrl.endsWith('/'))\n      hubUrl = hubUrl + '/';\n\n    const args = this._innerDefaultArgs(options);\n    args.push('--remote-debugging-port=0');\n    const isEdge = options.channel && options.channel.startsWith('msedge');\n    let desiredCapabilities = {\n      'browserName': isEdge ? 'MicrosoftEdge' : 'chrome',\n      [isEdge ? 'ms:edgeOptions' : 'goog:chromeOptions']: { args }\n    };\n\n    if (process.env.SELENIUM_REMOTE_CAPABILITIES) {\n      const remoteCapabilities = parseSeleniumRemoteParams({ name: 'capabilities', value: process.env.SELENIUM_REMOTE_CAPABILITIES }, progress);\n      if (remoteCapabilities)\n        desiredCapabilities = { ...desiredCapabilities, ...remoteCapabilities };\n    }\n\n    let headers: { [key: string]: string } = {};\n    if (process.env.SELENIUM_REMOTE_HEADERS) {\n      const remoteHeaders = parseSeleniumRemoteParams({ name: 'headers', value: process.env.SELENIUM_REMOTE_HEADERS }, progress);\n      if (remoteHeaders)\n        headers = remoteHeaders;\n    }\n\n    progress.log(`<selenium> connecting to ${hubUrl}`);\n    const response = await fetchData(progress, {\n      url: hubUrl + 'session',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        ...headers,\n      },\n      data: JSON.stringify({\n        capabilities: { alwaysMatch: desiredCapabilities }\n      }),\n    }, seleniumErrorHandler);\n    const value = JSON.parse(response).value;\n    const sessionId = value.sessionId;\n    progress.log(`<selenium> connected to sessionId=${sessionId}`);\n\n    const disconnectFromSelenium = async () => {\n      progress.log(`<selenium> disconnecting from sessionId=${sessionId}`);\n      // Do not pass \"progress\" to disconnect even after the progress has aborted.\n      await fetchData(undefined, {\n        url: hubUrl + 'session/' + sessionId,\n        method: 'DELETE',\n        headers,\n      }).catch(error => progress.log(`<error disconnecting from selenium>: ${error}`));\n      progress.log(`<selenium> disconnected from sessionId=${sessionId}`);\n      gracefullyCloseSet.delete(disconnectFromSelenium);\n    };\n    gracefullyCloseSet.add(disconnectFromSelenium);\n\n    try {\n      const capabilities = value.capabilities;\n      let endpointURL: URL;\n\n      if (capabilities['se:cdp']) {\n        // Selenium 4 - use built-in CDP websocket proxy.\n        progress.log(`<selenium> using selenium v4`);\n        const endpointURLString = addProtocol(capabilities['se:cdp']);\n        endpointURL = new URL(endpointURLString);\n        if (endpointURL.hostname === 'localhost' || endpointURL.hostname === '127.0.0.1')\n          endpointURL.hostname = new URL(hubUrl).hostname;\n        progress.log(`<selenium> retrieved endpoint ${endpointURL.toString()} for sessionId=${sessionId}`);\n      } else {\n        // Selenium 3 - resolve target node IP to use instead of localhost ws url.\n        progress.log(`<selenium> using selenium v3`);\n        const maybeChromeOptions = capabilities['goog:chromeOptions'];\n        const chromeOptions = maybeChromeOptions && typeof maybeChromeOptions === 'object' ? maybeChromeOptions : undefined;\n        const debuggerAddress = chromeOptions && typeof chromeOptions.debuggerAddress === 'string' ? chromeOptions.debuggerAddress : undefined;\n        const chromeOptionsURL = typeof maybeChromeOptions === 'string' ? maybeChromeOptions : undefined;\n        // TODO(dgozman): figure out if we can make ChromeDriver to return 127.0.0.1 instead of localhost.\n        const endpointURLString = addProtocol(debuggerAddress || chromeOptionsURL).replace('localhost', '127.0.0.1');\n        progress.log(`<selenium> retrieved endpoint ${endpointURLString} for sessionId=${sessionId}`);\n        endpointURL = new URL(endpointURLString);\n        if (endpointURL.hostname === 'localhost' || endpointURL.hostname === '127.0.0.1') {\n          const sessionInfoUrl = new URL(hubUrl).origin + '/grid/api/testsession?session=' + sessionId;\n          try {\n            const sessionResponse = await fetchData(progress, {\n              url: sessionInfoUrl,\n              method: 'GET',\n              headers,\n            }, seleniumErrorHandler);\n            const proxyId = JSON.parse(sessionResponse).proxyId;\n            endpointURL.hostname = new URL(proxyId).hostname;\n            progress.log(`<selenium> resolved endpoint ip ${endpointURL.toString()} for sessionId=${sessionId}`);\n          } catch (e) {\n            progress.log(`<selenium> unable to resolve endpoint ip for sessionId=${sessionId}, running in standalone?`);\n          }\n        }\n      }\n\n      return await this._connectOverCDPInternal(progress, endpointURL.toString(), {\n        ...options,\n        headers: headersObjectToArray(headers),\n      }, disconnectFromSelenium);\n    } catch (e) {\n      await disconnectFromSelenium();\n      throw e;\n    }\n  }\n\n  override defaultArgs(options: types.LaunchOptions, isPersistent: boolean, userDataDir: string): string[] {\n    const chromeArguments = this._innerDefaultArgs(options);\n    chromeArguments.push(`--user-data-dir=${userDataDir}`);\n    if (options.cdpPort !== undefined)\n      chromeArguments.push(`--remote-debugging-port=${options.cdpPort}`);\n    else\n      chromeArguments.push('--remote-debugging-pipe');\n    if (isPersistent)\n      chromeArguments.push('about:blank');\n    else\n      chromeArguments.push('--no-startup-window');\n    return chromeArguments;\n  }\n\n  private _innerDefaultArgs(options: types.LaunchOptions): string[] {\n    const { args = [] } = options;\n    const userDataDirArg = args.find(arg => arg.startsWith('--user-data-dir'));\n    if (userDataDirArg)\n      throw this._createUserDataDirArgMisuseError('--user-data-dir');\n    if (args.find(arg => arg.startsWith('--remote-debugging-pipe')))\n      throw new Error('Playwright manages remote debugging connection itself.');\n    if (args.find(arg => !arg.startsWith('-')))\n      throw new Error('Arguments can not specify page to be opened');\n    const chromeArguments = [...chromiumSwitches(options.assistantMode, options.channel)];\n\n    if (os.platform() === 'darwin') {\n      // See https://issues.chromium.org/issues/40277080\n      chromeArguments.push('--enable-unsafe-swiftshader');\n    }\n\n    if (options.devtools)\n      chromeArguments.push('--auto-open-devtools-for-tabs');\n    if (options.headless) {\n      chromeArguments.push('--headless');\n\n      chromeArguments.push(\n          '--hide-scrollbars',\n          '--mute-audio',\n          '--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4',\n      );\n    }\n    if (options.chromiumSandbox !== true)\n      chromeArguments.push('--no-sandbox');\n    const proxy = options.proxyOverride || options.proxy;\n    if (proxy) {\n      const proxyURL = new URL(proxy.server);\n      const isSocks = proxyURL.protocol === 'socks5:';\n      // https://www.chromium.org/developers/design-documents/network-settings\n      if (isSocks && !options.socksProxyPort) {\n        // https://www.chromium.org/developers/design-documents/network-stack/socks-proxy\n        chromeArguments.push(`--host-resolver-rules=\"MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}\"`);\n      }\n      chromeArguments.push(`--proxy-server=${proxy.server}`);\n      const proxyBypassRules = [];\n      // https://source.chromium.org/chromium/chromium/src/+/master:net/docs/proxy.md;l=548;drc=71698e610121078e0d1a811054dcf9fd89b49578\n      if (options.socksProxyPort)\n        proxyBypassRules.push('<-loopback>');\n      if (proxy.bypass)\n        proxyBypassRules.push(...proxy.bypass.split(',').map(t => t.trim()).map(t => t.startsWith('.') ? '*' + t : t));\n      if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes('<-loopback>'))\n        proxyBypassRules.push('<-loopback>');\n      if (proxyBypassRules.length > 0)\n        chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(';')}`);\n    }\n    chromeArguments.push(...args);\n    return chromeArguments;\n  }\n\n  override async waitForReadyState(options: types.LaunchOptions, browserLogsCollector: RecentLogsCollector): Promise<{ wsEndpoint?: string }> {\n    return waitForReadyState(options, browserLogsCollector);\n  }\n\n  override getExecutableName(options: types.LaunchOptions): string {\n    if (options.channel)\n      return options.channel;\n    return options.headless ? 'chromium-headless-shell' : 'chromium';\n  }\n}\n\nexport async function waitForReadyState(options: types.LaunchOptions, browserLogsCollector: RecentLogsCollector): Promise<{ wsEndpoint?: string }> {\n  if (options.cdpPort === undefined && !options.args?.some(a => a.startsWith('--remote-debugging-port')))\n    return {};\n\n  const result = new ManualPromise<{ wsEndpoint?: string }>();\n  browserLogsCollector.onMessage(message => {\n    if (message.includes('Failed to create a ProcessSingleton for your profile directory.')) {\n      result.reject(new Error('Failed to create a ProcessSingleton for your profile directory. ' +\n        'This usually means that the profile is already in use by another instance of Chromium.'));\n    }\n    const match = message.match(/DevTools listening on (.*)/);\n    if (match)\n      result.resolve({ wsEndpoint: match[1] });\n  });\n  return result;\n}\n\nasync function urlToWSEndpoint(progress: Progress, endpointURL: string, headers: { [key: string]: string; }) {\n  if (endpointURL.startsWith('ws'))\n    return endpointURL;\n  progress.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);\n  const url = new URL(endpointURL);\n  if (!url.pathname.endsWith('/'))\n    url.pathname += '/';\n  url.pathname += 'json/version/';\n  const httpURL = url.toString();\n\n  const json = await fetchData(progress, {\n    url: httpURL,\n    headers,\n  }, async (_, resp) => new Error(`Unexpected status ${resp.statusCode} when connecting to ${httpURL}.\\n` +\n    `This does not look like a DevTools server, try connecting via ws://.`)\n  );\n  return JSON.parse(json).webSocketDebuggerUrl;\n}\n\nasync function seleniumErrorHandler(params: HTTPRequestParams, response: http.IncomingMessage) {\n  const body = await streamToString(response);\n  let message = body;\n  try {\n    const json = JSON.parse(body);\n    message = json.value.localizedMessage || json.value.message;\n  } catch (e) {\n  }\n  return new Error(`Error connecting to Selenium at ${params.url}: ${message}`);\n}\n\nfunction addProtocol(url: string) {\n  if (!['ws://', 'wss://', 'http://', 'https://'].some(protocol => url.startsWith(protocol)))\n    return 'http://' + url;\n  return url;\n}\n\nfunction streamToString(stream: stream.Readable): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const chunks: Buffer[] = [];\n    stream.on('data', chunk => chunks.push(Buffer.from(chunk)));\n    stream.on('error', reject);\n    stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));\n  });\n}\n\nfunction parseSeleniumRemoteParams(env: {name: string, value: string}, progress: Progress) {\n  try {\n    const parsed = JSON.parse(env.value);\n    progress.log(`<selenium> using additional ${env.name} \"${env.value}\"`);\n    return parsed;\n  } catch (e) {\n    progress.log(`<selenium> ignoring additional ${env.name} \"${env.value}\": ${e}`);\n  }\n}\n"],
  "mappings": "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",
  "names": ["path", "os", "fs"]
}
