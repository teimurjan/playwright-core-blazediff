{
  "version": 3,
  "sources": ["../../../src/server/chromium/crDevTools.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\n\nimport type { CRSession } from './crConnection';\n\nconst kBindingName = '__pw_devtools__';\n\n// This class intercepts preferences-related DevTools embedder methods\n// and stores preferences as a json file in the browser installation directory.\nexport class CRDevTools {\n  private _preferencesPath: string;\n  private _prefs: any;\n  private _savePromise: Promise<any>;\n  __testHookOnBinding?: (parsed: any) => any;\n\n  constructor(preferencesPath: string) {\n    this._preferencesPath = preferencesPath;\n    this._savePromise = Promise.resolve();\n  }\n\n  install(session: CRSession) {\n    session.on('Runtime.bindingCalled', async event => {\n      if (event.name !== kBindingName)\n        return;\n      const parsed = JSON.parse(event.payload);\n      let result = undefined;\n      if (this.__testHookOnBinding)\n        this.__testHookOnBinding(parsed);\n      if (parsed.method === 'getPreferences') {\n        if (this._prefs === undefined) {\n          try {\n            const json = await fs.promises.readFile(this._preferencesPath, 'utf8');\n            this._prefs = JSON.parse(json);\n          } catch (e) {\n            this._prefs = {};\n          }\n        }\n        result = this._prefs;\n      } else if (parsed.method === 'setPreference') {\n        this._prefs[parsed.params[0]] = parsed.params[1];\n        this._save();\n      } else if (parsed.method === 'removePreference') {\n        delete this._prefs[parsed.params[0]];\n        this._save();\n      } else if (parsed.method === 'clearPreferences') {\n        this._prefs = {};\n        this._save();\n      }\n      session.send('Runtime.evaluate', {\n        expression: `window.DevToolsAPI.embedderMessageAck(${parsed.id}, ${JSON.stringify(result)})`,\n        contextId: event.executionContextId\n      }).catch(e => null);\n    });\n    Promise.all([\n      session.send('Runtime.enable'),\n      session.send('Runtime.addBinding', { name: kBindingName }),\n      session.send('Page.enable'),\n      session.send('Page.addScriptToEvaluateOnNewDocument', { source: `\n        (() => {\n          const init = () => {\n            // Lazy init happens when InspectorFrontendHost is initialized.\n            // At this point DevToolsHost is ready to be used.\n            const host = window.DevToolsHost;\n            const old = host.sendMessageToEmbedder.bind(host);\n            host.sendMessageToEmbedder = message => {\n              if (['getPreferences', 'setPreference', 'removePreference', 'clearPreferences'].includes(JSON.parse(message).method))\n                window.${kBindingName}(message);\n              else\n                old(message);\n            };\n          };\n          let value;\n          Object.defineProperty(window, 'InspectorFrontendHost', {\n            configurable: true,\n            enumerable: true,\n            get() { return value; },\n            set(v) { value = v; init(); },\n          });\n        })()\n      ` }),\n      session.send('Runtime.runIfWaitingForDebugger'),\n    ]).catch(e => null);\n  }\n\n  _save() {\n    // Serialize saves to avoid corruption.\n    this._savePromise = this._savePromise.then(async () => {\n      await fs.promises.writeFile(this._preferencesPath, JSON.stringify(this._prefs)).catch(e => null);\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,gBAAe;AAIf,MAAM,eAAe;AAId,MAAM,WAAW;AAAA,EAMtB,YAAY,iBAAyB;AACnC,SAAK,mBAAmB;AACxB,SAAK,eAAe,QAAQ,QAAQ;AAAA,EACtC;AAAA,EAEA,QAAQ,SAAoB;AAC1B,YAAQ,GAAG,yBAAyB,OAAM,UAAS;AACjD,UAAI,MAAM,SAAS;AACjB;AACF,YAAM,SAAS,KAAK,MAAM,MAAM,OAAO;AACvC,UAAI,SAAS;AACb,UAAI,KAAK;AACP,aAAK,oBAAoB,MAAM;AACjC,UAAI,OAAO,WAAW,kBAAkB;AACtC,YAAI,KAAK,WAAW,QAAW;AAC7B,cAAI;AACF,kBAAM,OAAO,MAAM,UAAAA,QAAG,SAAS,SAAS,KAAK,kBAAkB,MAAM;AACrE,iBAAK,SAAS,KAAK,MAAM,IAAI;AAAA,UAC/B,SAAS,GAAG;AACV,iBAAK,SAAS,CAAC;AAAA,UACjB;AAAA,QACF;AACA,iBAAS,KAAK;AAAA,MAChB,WAAW,OAAO,WAAW,iBAAiB;AAC5C,aAAK,OAAO,OAAO,OAAO,CAAC,CAAC,IAAI,OAAO,OAAO,CAAC;AAC/C,aAAK,MAAM;AAAA,MACb,WAAW,OAAO,WAAW,oBAAoB;AAC/C,eAAO,KAAK,OAAO,OAAO,OAAO,CAAC,CAAC;AACnC,aAAK,MAAM;AAAA,MACb,WAAW,OAAO,WAAW,oBAAoB;AAC/C,aAAK,SAAS,CAAC;AACf,aAAK,MAAM;AAAA,MACb;AACA,cAAQ,KAAK,oBAAoB;AAAA,QAC/B,YAAY,yCAAyC,OAAO,EAAE,KAAK,KAAK,UAAU,MAAM,CAAC;AAAA,QACzF,WAAW,MAAM;AAAA,MACnB,CAAC,EAAE,MAAM,OAAK,IAAI;AAAA,IACpB,CAAC;AACD,YAAQ,IAAI;AAAA,MACV,QAAQ,KAAK,gBAAgB;AAAA,MAC7B,QAAQ,KAAK,sBAAsB,EAAE,MAAM,aAAa,CAAC;AAAA,MACzD,QAAQ,KAAK,aAAa;AAAA,MAC1B,QAAQ,KAAK,yCAAyC,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAS7C,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAa7B,CAAC;AAAA,MACH,QAAQ,KAAK,iCAAiC;AAAA,IAChD,CAAC,EAAE,MAAM,OAAK,IAAI;AAAA,EACpB;AAAA,EAEA,QAAQ;AAEN,SAAK,eAAe,KAAK,aAAa,KAAK,YAAY;AACrD,YAAM,UAAAA,QAAG,SAAS,UAAU,KAAK,kBAAkB,KAAK,UAAU,KAAK,MAAM,CAAC,EAAE,MAAM,OAAK,IAAI;AAAA,IACjG,CAAC;AAAA,EACH;AACF;",
  "names": ["fs"]
}
