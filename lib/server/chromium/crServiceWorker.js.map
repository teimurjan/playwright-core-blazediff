{
  "version": 3,
  "sources": ["../../../src/server/chromium/crServiceWorker.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Worker } from '../page';\nimport { CRExecutionContext } from './crExecutionContext';\nimport { CRNetworkManager } from './crNetworkManager';\nimport { BrowserContext } from '../browserContext';\nimport * as network from '../network';\n\nimport type { CRBrowserContext } from './crBrowser';\nimport type { CRSession } from './crConnection';\n\nexport class CRServiceWorker extends Worker {\n  readonly browserContext: CRBrowserContext;\n  private readonly _networkManager?: CRNetworkManager;\n  private _session: CRSession;\n\n  constructor(browserContext: CRBrowserContext, session: CRSession, url: string) {\n    super(browserContext, url);\n    this._session = session;\n    this.browserContext = browserContext;\n    if (!!process.env.PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS)\n      this._networkManager = new CRNetworkManager(null, this);\n    session.once('Runtime.executionContextCreated', event => {\n      this.createExecutionContext(new CRExecutionContext(session, event.context));\n    });\n\n    if (this._networkManager && this._isNetworkInspectionEnabled()) {\n      this.updateRequestInterception();\n      this.updateExtraHTTPHeaders();\n      this.updateHttpCredentials();\n      this.updateOffline();\n      this._networkManager.addSession(session, undefined, true /* isMain */).catch(() => {});\n    }\n\n    session.send('Runtime.enable', {}).catch(e => { });\n    session.send('Runtime.runIfWaitingForDebugger').catch(e => { });\n    session.on('Inspector.targetReloadedAfterCrash', () => {\n      // Resume service worker after restart.\n      session._sendMayFail('Runtime.runIfWaitingForDebugger', {});\n    });\n  }\n\n  override didClose() {\n    this._networkManager?.removeSession(this._session);\n    this._session.dispose();\n    super.didClose();\n  }\n\n  async updateOffline(): Promise<void> {\n    if (!this._isNetworkInspectionEnabled())\n      return;\n    await this._networkManager?.setOffline(!!this.browserContext._options.offline).catch(() => {});\n  }\n\n  async updateHttpCredentials(): Promise<void> {\n    if (!this._isNetworkInspectionEnabled())\n      return;\n    await this._networkManager?.authenticate(this.browserContext._options.httpCredentials || null).catch(() => {});\n  }\n\n  async updateExtraHTTPHeaders(): Promise<void> {\n    if (!this._isNetworkInspectionEnabled())\n      return;\n    await this._networkManager?.setExtraHTTPHeaders(this.browserContext._options.extraHTTPHeaders || []).catch(() => {});\n  }\n\n  async updateRequestInterception(): Promise<void> {\n    if (!this._isNetworkInspectionEnabled())\n      return;\n    await this._networkManager?.setRequestInterception(this.needsRequestInterception()).catch(() => {});\n  }\n\n  needsRequestInterception(): boolean {\n    return this._isNetworkInspectionEnabled() && this.browserContext.requestInterceptors.length > 0;\n  }\n\n  reportRequestFinished(request: network.Request, response: network.Response | null) {\n    this.browserContext.emit(BrowserContext.Events.RequestFinished, { request, response });\n  }\n\n  requestFailed(request: network.Request, _canceled: boolean) {\n    this.browserContext.emit(BrowserContext.Events.RequestFailed, request);\n  }\n\n  requestReceivedResponse(response: network.Response) {\n    this.browserContext.emit(BrowserContext.Events.Response, response);\n  }\n\n  requestStarted(request: network.Request, route?: network.RouteDelegate) {\n    this.browserContext.emit(BrowserContext.Events.Request, request);\n    if (route)\n      new network.Route(request, route).handle(this.browserContext.requestInterceptors);\n  }\n\n  private _isNetworkInspectionEnabled(): boolean {\n    return this.browserContext._options.serviceWorkers !== 'block';\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
