{
  "version": 3,
  "sources": ["../../../src/server/chromium/crInput.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isString } from '../../utils';\nimport * as input from '../input';\nimport { macEditingCommands } from '../macEditingCommands';\nimport { toButtonsMask, toModifiersMask } from './crProtocolHelper';\n\nimport type * as types from '../types';\nimport type { CRSession } from './crConnection';\nimport type { DragManager } from './crDragDrop';\nimport type { CRPage } from './crPage';\nimport type { Progress } from '../progress';\n\n\nexport class RawKeyboardImpl implements input.RawKeyboard {\n  constructor(\n    private _client: CRSession,\n    private _isMac: boolean,\n    private _dragManger: DragManager,\n  ) { }\n\n  _commandsForCode(code: string, modifiers: Set<types.KeyboardModifier>) {\n    if (!this._isMac)\n      return [];\n    const parts = [];\n    for (const modifier of (['Shift', 'Control', 'Alt', 'Meta']) as types.KeyboardModifier[]) {\n      if (modifiers.has(modifier))\n        parts.push(modifier);\n    }\n    parts.push(code);\n    const shortcut = parts.join('+');\n    let commands = macEditingCommands[shortcut] || [];\n    if (isString(commands))\n      commands = [commands];\n    // Commands that insert text are not supported\n    commands = commands.filter(x => !x.startsWith('insert'));\n    // remove the trailing : to match the Chromium command names.\n    return commands.map(c => c.substring(0, c.length - 1));\n  }\n\n  async keydown(progress: Progress, modifiers: Set<types.KeyboardModifier>, keyName: string, description: input.KeyDescription, autoRepeat: boolean): Promise<void> {\n    const { code, key, location, text } = description;\n    if (code === 'Escape' && await progress.race(this._dragManger.cancelDrag()))\n      return;\n    const commands = this._commandsForCode(code, modifiers);\n    await progress.race(this._client.send('Input.dispatchKeyEvent', {\n      type: text ? 'keyDown' : 'rawKeyDown',\n      modifiers: toModifiersMask(modifiers),\n      windowsVirtualKeyCode: description.keyCodeWithoutLocation,\n      code,\n      commands,\n      key,\n      text,\n      unmodifiedText: text,\n      autoRepeat,\n      location,\n      isKeypad: location === input.keypadLocation\n    }));\n  }\n\n  async keyup(progress: Progress, modifiers: Set<types.KeyboardModifier>, keyName: string, description: input.KeyDescription): Promise<void> {\n    const { code, key, location } = description;\n    await progress.race(this._client.send('Input.dispatchKeyEvent', {\n      type: 'keyUp',\n      modifiers: toModifiersMask(modifiers),\n      key,\n      windowsVirtualKeyCode: description.keyCodeWithoutLocation,\n      code,\n      location\n    }));\n  }\n\n  async sendText(progress: Progress, text: string): Promise<void> {\n    await progress.race(this._client.send('Input.insertText', { text }));\n  }\n}\n\nexport class RawMouseImpl implements input.RawMouse {\n  private _client: CRSession;\n  private _page: CRPage;\n  private _dragManager: DragManager;\n\n  constructor(page: CRPage, client: CRSession, dragManager: DragManager) {\n    this._page = page;\n    this._client = client;\n    this._dragManager = dragManager;\n  }\n\n  async move(progress: Progress, x: number, y: number, button: types.MouseButton | 'none', buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, forClick: boolean): Promise<void> {\n    const actualMove = async () => {\n      await progress.race(this._client.send('Input.dispatchMouseEvent', {\n        type: 'mouseMoved',\n        button,\n        buttons: toButtonsMask(buttons),\n        x,\n        y,\n        modifiers: toModifiersMask(modifiers),\n        force: buttons.size > 0 ? 0.5 : 0,\n      }));\n    };\n    if (forClick) {\n      // Avoid extra protocol calls related to drag and drop, because click relies on\n      // move-down-up protocol commands being sent synchronously.\n      await actualMove();\n      return;\n    }\n    await this._dragManager.interceptDragCausedByMove(progress, x, y, button, buttons, modifiers, actualMove);\n  }\n\n  async down(progress: Progress, x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void> {\n    if (this._dragManager.isDragging())\n      return;\n    await progress.race(this._client.send('Input.dispatchMouseEvent', {\n      type: 'mousePressed',\n      button,\n      buttons: toButtonsMask(buttons),\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers),\n      clickCount,\n      force: buttons.size > 0 ? 0.5 : 0,\n    }));\n  }\n\n  async up(progress: Progress, x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void> {\n    if (this._dragManager.isDragging()) {\n      await this._dragManager.drop(progress, x, y, modifiers);\n      return;\n    }\n    await progress.race(this._client.send('Input.dispatchMouseEvent', {\n      type: 'mouseReleased',\n      button,\n      buttons: toButtonsMask(buttons),\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers),\n      clickCount\n    }));\n  }\n\n  async wheel(progress: Progress, x: number, y: number, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, deltaX: number, deltaY: number): Promise<void> {\n    await progress.race(this._client.send('Input.dispatchMouseEvent', {\n      type: 'mouseWheel',\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers),\n      deltaX,\n      deltaY,\n    }));\n  }\n}\n\nexport class RawTouchscreenImpl implements input.RawTouchscreen {\n  private _client: CRSession;\n\n  constructor(client: CRSession) {\n    this._client = client;\n  }\n  async tap(progress: Progress, x: number, y: number, modifiers: Set<types.KeyboardModifier>) {\n    await progress.race(Promise.all([\n      this._client.send('Input.dispatchTouchEvent', {\n        type: 'touchStart',\n        modifiers: toModifiersMask(modifiers),\n        touchPoints: [{\n          x, y\n        }]\n      }),\n      this._client.send('Input.dispatchTouchEvent', {\n        type: 'touchEnd',\n        modifiers: toModifiersMask(modifiers),\n        touchPoints: []\n      }),\n    ]));\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
