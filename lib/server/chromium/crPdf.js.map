{
  "version": 3,
  "sources": ["../../../src/server/chromium/crPdf.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { readProtocolStream } from './crProtocolHelper';\nimport { assert } from '../../utils';\n\nimport type { CRSession } from './crConnection';\nimport type * as channels from '@protocol/channels';\n\nconst PagePaperFormats: { [key: string]: { width: number, height: number }} = {\n  letter: { width: 8.5, height: 11 },\n  legal: { width: 8.5, height: 14 },\n  tabloid: { width: 11, height: 17 },\n  ledger: { width: 17, height: 11 },\n  a0: { width: 33.1, height: 46.8 },\n  a1: { width: 23.4, height: 33.1 },\n  a2: { width: 16.54, height: 23.4 },\n  a3: { width: 11.7, height: 16.54 },\n  a4: { width: 8.27, height: 11.7 },\n  a5: { width: 5.83, height: 8.27 },\n  a6: { width: 4.13, height: 5.83 },\n};\n\nconst unitToPixels: { [key: string]: number } = {\n  'px': 1,\n  'in': 96,\n  'cm': 37.8,\n  'mm': 3.78\n};\n\nfunction convertPrintParameterToInches(text: string | undefined): number | undefined {\n  if (text === undefined)\n    return undefined;\n  let unit = text.substring(text.length - 2).toLowerCase();\n  let valueText = '';\n  if (unitToPixels.hasOwnProperty(unit)) {\n    valueText = text.substring(0, text.length - 2);\n  } else {\n    // In case of unknown unit try to parse the whole parameter as number of pixels.\n    // This is consistent with phantom's paperSize behavior.\n    unit = 'px';\n    valueText = text;\n  }\n  const value = Number(valueText);\n  assert(!isNaN(value), 'Failed to parse parameter value: ' + text);\n  const pixels = value * unitToPixels[unit];\n  return pixels / 96;\n}\n\nexport class CRPDF {\n  private _client: CRSession;\n\n  constructor(client: CRSession) {\n    this._client = client;\n  }\n\n  async generate(options: channels.PagePdfParams): Promise<Buffer> {\n    const {\n      scale = 1,\n      displayHeaderFooter = false,\n      headerTemplate = '',\n      footerTemplate = '',\n      printBackground = false,\n      landscape = false,\n      pageRanges = '',\n      preferCSSPageSize = false,\n      margin = {},\n      tagged = false,\n      outline = false\n    } = options;\n\n    let paperWidth = 8.5;\n    let paperHeight = 11;\n    if (options.format) {\n      const format = PagePaperFormats[options.format.toLowerCase()];\n      assert(format, 'Unknown paper format: ' + options.format);\n      paperWidth = format.width;\n      paperHeight = format.height;\n    } else {\n      paperWidth = convertPrintParameterToInches(options.width) || paperWidth;\n      paperHeight = convertPrintParameterToInches(options.height) || paperHeight;\n    }\n\n    const marginTop = convertPrintParameterToInches(margin.top) || 0;\n    const marginLeft = convertPrintParameterToInches(margin.left) || 0;\n    const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;\n    const marginRight = convertPrintParameterToInches(margin.right) || 0;\n    const generateDocumentOutline = outline;\n    const generateTaggedPDF = tagged;\n    const result = await this._client.send('Page.printToPDF', {\n      transferMode: 'ReturnAsStream',\n      landscape,\n      displayHeaderFooter,\n      headerTemplate,\n      footerTemplate,\n      printBackground,\n      scale,\n      paperWidth,\n      paperHeight,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      pageRanges,\n      preferCSSPageSize,\n      generateTaggedPDF,\n      generateDocumentOutline\n    });\n    return await readProtocolStream(this._client, result.stream!);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,8BAAmC;AACnC,mBAAuB;AAKvB,MAAM,mBAAwE;AAAA,EAC5E,QAAQ,EAAE,OAAO,KAAK,QAAQ,GAAG;AAAA,EACjC,OAAO,EAAE,OAAO,KAAK,QAAQ,GAAG;AAAA,EAChC,SAAS,EAAE,OAAO,IAAI,QAAQ,GAAG;AAAA,EACjC,QAAQ,EAAE,OAAO,IAAI,QAAQ,GAAG;AAAA,EAChC,IAAI,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,EAChC,IAAI,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,EAChC,IAAI,EAAE,OAAO,OAAO,QAAQ,KAAK;AAAA,EACjC,IAAI,EAAE,OAAO,MAAM,QAAQ,MAAM;AAAA,EACjC,IAAI,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,EAChC,IAAI,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,EAChC,IAAI,EAAE,OAAO,MAAM,QAAQ,KAAK;AAClC;AAEA,MAAM,eAA0C;AAAA,EAC9C,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AACR;AAEA,SAAS,8BAA8B,MAA8C;AACnF,MAAI,SAAS;AACX,WAAO;AACT,MAAI,OAAO,KAAK,UAAU,KAAK,SAAS,CAAC,EAAE,YAAY;AACvD,MAAI,YAAY;AAChB,MAAI,aAAa,eAAe,IAAI,GAAG;AACrC,gBAAY,KAAK,UAAU,GAAG,KAAK,SAAS,CAAC;AAAA,EAC/C,OAAO;AAGL,WAAO;AACP,gBAAY;AAAA,EACd;AACA,QAAM,QAAQ,OAAO,SAAS;AAC9B,2BAAO,CAAC,MAAM,KAAK,GAAG,sCAAsC,IAAI;AAChE,QAAM,SAAS,QAAQ,aAAa,IAAI;AACxC,SAAO,SAAS;AAClB;AAEO,MAAM,MAAM;AAAA,EAGjB,YAAY,QAAmB;AAC7B,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,MAAM,SAAS,SAAkD;AAC/D,UAAM;AAAA,MACJ,QAAQ;AAAA,MACR,sBAAsB;AAAA,MACtB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,MAClB,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,oBAAoB;AAAA,MACpB,SAAS,CAAC;AAAA,MACV,SAAS;AAAA,MACT,UAAU;AAAA,IACZ,IAAI;AAEJ,QAAI,aAAa;AACjB,QAAI,cAAc;AAClB,QAAI,QAAQ,QAAQ;AAClB,YAAM,SAAS,iBAAiB,QAAQ,OAAO,YAAY,CAAC;AAC5D,+BAAO,QAAQ,2BAA2B,QAAQ,MAAM;AACxD,mBAAa,OAAO;AACpB,oBAAc,OAAO;AAAA,IACvB,OAAO;AACL,mBAAa,8BAA8B,QAAQ,KAAK,KAAK;AAC7D,oBAAc,8BAA8B,QAAQ,MAAM,KAAK;AAAA,IACjE;AAEA,UAAM,YAAY,8BAA8B,OAAO,GAAG,KAAK;AAC/D,UAAM,aAAa,8BAA8B,OAAO,IAAI,KAAK;AACjE,UAAM,eAAe,8BAA8B,OAAO,MAAM,KAAK;AACrE,UAAM,cAAc,8BAA8B,OAAO,KAAK,KAAK;AACnE,UAAM,0BAA0B;AAChC,UAAM,oBAAoB;AAC1B,UAAM,SAAS,MAAM,KAAK,QAAQ,KAAK,mBAAmB;AAAA,MACxD,cAAc;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AACD,WAAO,UAAM,4CAAmB,KAAK,SAAS,OAAO,MAAO;AAAA,EAC9D;AACF;",
  "names": []
}
