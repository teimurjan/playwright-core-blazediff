{
  "version": 3,
  "sources": ["../../../src/server/chromium/crAccessibility.ts"],
  "sourcesContent": ["/**\n * Copyright 2018 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CRSession } from './crConnection';\nimport type { Protocol } from './protocol';\nimport type * as accessibility from '../accessibility';\nimport type * as dom from '../dom';\nimport type * as channels from '@protocol/channels';\n\nexport async function getAccessibilityTree(client: CRSession, needle?: dom.ElementHandle): Promise<{tree: accessibility.AXNode, needle: accessibility.AXNode | null}> {\n  const { nodes } = await client.send('Accessibility.getFullAXTree');\n  const tree = CRAXNode.createTree(client, nodes);\n  return {\n    tree,\n    needle: needle ? await tree._findElement(needle) : null\n  };\n}\n\nclass CRAXNode implements accessibility.AXNode {\n  _payload: Protocol.Accessibility.AXNode;\n  _children: CRAXNode[] = [];\n  private _richlyEditable = false;\n  private _editable = false;\n  private _focusable = false;\n  private _expanded = false;\n  private _hidden = false;\n  private _name: string;\n  private _role: string;\n  private _cachedHasFocusableChild: boolean | undefined;\n  private _client: CRSession;\n\n  constructor(client: CRSession, payload: Protocol.Accessibility.AXNode) {\n    this._client = client;\n    this._payload = payload;\n\n    this._name = this._payload.name ? this._payload.name.value : '';\n    this._role = this._payload.role ? this._payload.role.value : 'Unknown';\n\n    for (const property of this._payload.properties || []) {\n      if (property.name === 'editable') {\n        this._richlyEditable = property.value.value === 'richtext';\n        this._editable = true;\n      }\n      if (property.name === 'focusable')\n        this._focusable = property.value.value;\n      if (property.name === 'expanded')\n        this._expanded = property.value.value;\n      if (property.name === 'hidden')\n        this._hidden = property.value.value;\n    }\n  }\n\n  private _isPlainTextField(): boolean {\n    if (this._richlyEditable)\n      return false;\n    if (this._editable)\n      return true;\n    return this._role === 'textbox' || this._role === 'ComboBox' || this._role === 'searchbox';\n  }\n\n  private _isTextOnlyObject(): boolean {\n    const role = this._role;\n    return (role === 'LineBreak' || role === 'text' ||\n            role === 'InlineTextBox' || role === 'StaticText');\n  }\n\n  private _hasFocusableChild(): boolean {\n    if (this._cachedHasFocusableChild === undefined) {\n      this._cachedHasFocusableChild = false;\n      for (const child of this._children) {\n        if (child._focusable || child._hasFocusableChild()) {\n          this._cachedHasFocusableChild = true;\n          break;\n        }\n      }\n    }\n    return this._cachedHasFocusableChild;\n  }\n\n  children() {\n    return this._children;\n  }\n\n  async _findElement(element: dom.ElementHandle): Promise<CRAXNode | null> {\n    const objectId = element._objectId;\n    const { node: { backendNodeId } } = await this._client.send('DOM.describeNode', { objectId });\n    const needle = this.find(node => node._payload.backendDOMNodeId === backendNodeId);\n    return needle || null;\n  }\n\n  find(predicate: (arg0: CRAXNode) => boolean): CRAXNode | null {\n    if (predicate(this))\n      return this;\n    for (const child of this._children) {\n      const result = child.find(predicate);\n      if (result)\n        return result;\n    }\n    return null;\n  }\n\n  isLeafNode(): boolean {\n    if (!this._children.length)\n      return true;\n\n    // These types of objects may have children that we use as internal\n    // implementation details, but we want to expose them as leaves to platform\n    // accessibility APIs because screen readers might be confused if they find\n    // any children.\n    if (this._isPlainTextField() || this._isTextOnlyObject())\n      return true;\n\n    // Roles whose children are only presentational according to the ARIA and\n    // HTML5 Specs should be hidden from screen readers.\n    // (Note that whilst ARIA buttons can have only presentational children, HTML5\n    // buttons are allowed to have content.)\n    switch (this._role) {\n      case 'doc-cover':\n      case 'graphics-symbol':\n      case 'img':\n      case 'Meter':\n      case 'scrollbar':\n      case 'slider':\n      case 'separator':\n      case 'progressbar':\n        return true;\n      default:\n        break;\n    }\n\n    // Here and below: Android heuristics\n    if (this._hasFocusableChild())\n      return false;\n    if (this._focusable && this._role !== 'WebArea' && this._role !== 'RootWebArea' && this._name)\n      return true;\n    if (this._role === 'heading' && this._name)\n      return true;\n    return false;\n  }\n\n  isControl(): boolean {\n    switch (this._role) {\n      case 'button':\n      case 'checkbox':\n      case 'ColorWell':\n      case 'combobox':\n      case 'DisclosureTriangle':\n      case 'listbox':\n      case 'menu':\n      case 'menubar':\n      case 'menuitem':\n      case 'menuitemcheckbox':\n      case 'menuitemradio':\n      case 'radio':\n      case 'scrollbar':\n      case 'searchbox':\n      case 'slider':\n      case 'spinbutton':\n      case 'switch':\n      case 'tab':\n      case 'textbox':\n      case 'tree':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  isInteresting(insideControl: boolean): boolean {\n    const role = this._role;\n    if (role === 'Ignored' || this._hidden)\n      return false;\n\n    if (this._focusable || this._richlyEditable)\n      return true;\n\n    // If it's not focusable but has a control role, then it's interesting.\n    if (this.isControl())\n      return true;\n\n    // A non focusable child of a control is not interesting\n    if (insideControl)\n      return false;\n\n    return this.isLeafNode() && !!this._name;\n  }\n\n  normalizedRole() {\n    switch (this._role) {\n      case 'RootWebArea':\n        return 'WebArea';\n      case 'StaticText':\n        return 'text';\n      default:\n        return this._role;\n    }\n  }\n\n  serialize(): channels.AXNode {\n    const properties: Map<string, number | string | boolean> = new Map();\n    for (const property of this._payload.properties || [])\n      properties.set(property.name.toLowerCase(), property.value.value);\n    if (this._payload.description)\n      properties.set('description', this._payload.description.value);\n\n    const node: {[x in keyof channels.AXNode]: any} = {\n      role: this.normalizedRole(),\n      name: this._payload.name ? (this._payload.name.value || '') : '',\n    };\n\n    const userStringProperties: Array<keyof channels.AXNode> = [\n      'description',\n      'keyshortcuts',\n      'roledescription',\n      'valuetext',\n    ];\n    for (const userStringProperty of userStringProperties) {\n      if (!properties.has(userStringProperty))\n        continue;\n      node[userStringProperty] = properties.get(userStringProperty);\n    }\n    const booleanProperties: Array<keyof channels.AXNode> = [\n      'disabled',\n      'expanded',\n      'focused',\n      'modal',\n      'multiline',\n      'multiselectable',\n      'readonly',\n      'required',\n      'selected',\n    ];\n    for (const booleanProperty of booleanProperties) {\n      // WebArea's treat focus differently than other nodes. They report whether their frame  has focus,\n      // not whether focus is specifically on the root node.\n      if (booleanProperty === 'focused' && (this._role === 'WebArea' || this._role === 'RootWebArea'))\n        continue;\n      const value = properties.get(booleanProperty);\n      if (!value)\n        continue;\n      node[booleanProperty] = value;\n    }\n    const numericalProperties: Array<keyof channels.AXNode> = [\n      'level',\n      'valuemax',\n      'valuemin',\n    ];\n    for (const numericalProperty of numericalProperties) {\n      if (!properties.has(numericalProperty))\n        continue;\n      node[numericalProperty] = properties.get(numericalProperty);\n    }\n    const tokenProperties: Array<keyof channels.AXNode> = [\n      'autocomplete',\n      'haspopup',\n      'invalid',\n      'orientation',\n    ];\n    for (const tokenProperty of tokenProperties) {\n      const value = properties.get(tokenProperty);\n      if (!value || value === 'false')\n        continue;\n      node[tokenProperty] = value;\n    }\n\n    const axNode = node as channels.AXNode;\n    if (this._payload.value) {\n      if (typeof this._payload.value.value === 'string')\n        axNode.valueString = this._payload.value.value;\n      if (typeof this._payload.value.value === 'number')\n        axNode.valueNumber = this._payload.value.value;\n    }\n    if (properties.has('checked'))\n      axNode.checked = properties.get('checked') === 'true' ? 'checked' : properties.get('checked') === 'false' ? 'unchecked' : 'mixed';\n    if (properties.has('pressed'))\n      axNode.pressed = properties.get('pressed') === 'true' ? 'pressed' : properties.get('pressed') === 'false' ? 'released' : 'mixed';\n    return axNode;\n  }\n\n  static createTree(client: CRSession, payloads: Protocol.Accessibility.AXNode[]): CRAXNode {\n    const nodeById: Map<string, CRAXNode> = new Map();\n    for (const payload of payloads)\n      nodeById.set(payload.nodeId, new CRAXNode(client, payload));\n    for (const node of nodeById.values()) {\n      for (const childId of node._payload.childIds || [])\n        node._children.push(nodeById.get(childId)!);\n    }\n    return nodeById.values().next().value!;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
