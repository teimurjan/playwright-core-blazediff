{
  "version": 3,
  "sources": ["../../../src/server/chromium/videoRecorder.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, debugLogger, monotonicTime } from '../../utils';\nimport { Page } from '../page';\nimport { launchProcess } from '../utils/processLauncher';\n\nimport type * as types from '../types';\nimport type { ChildProcess } from 'child_process';\n\nconst fps = 25;\n\nexport class VideoRecorder {\n  private _process: ChildProcess | null = null;\n  private _gracefullyClose: (() => Promise<void>) | null = null;\n  private _lastWritePromise: Promise<void> = Promise.resolve();\n  private _lastFrameTimestamp: number = 0;\n  private _lastFrameBuffer: Buffer | null = null;\n  private _lastWriteTimestamp: number = 0;\n  private _frameQueue: Buffer[] = [];\n  private _isStopped = false;\n  private _ffmpegPath: string;\n\n  static async launch(page: Page, ffmpegPath: string, options: types.PageScreencastOptions): Promise<VideoRecorder> {\n    if (!options.outputFile.endsWith('.webm'))\n      throw new Error('File must have .webm extension');\n\n    const recorder = new VideoRecorder(page, ffmpegPath);\n    await recorder._launch(options);\n    return recorder;\n  }\n\n  private constructor(page: Page, ffmpegPath: string) {\n    this._ffmpegPath = ffmpegPath;\n    page.on(Page.Events.ScreencastFrame, frame => this.writeFrame(frame.buffer, frame.frameSwapWallTime / 1000));\n  }\n\n  private async _launch(options: types.PageScreencastOptions) {\n    // How to tune the codec:\n    // 1. Read vp8 documentation to figure out the options.\n    //   https://www.webmproject.org/docs/encoder-parameters/\n    // 2. Use the following command to map the options to ffmpeg arguments.\n    //   $ ./third_party/ffmpeg/ffmpeg-mac -h encoder=vp8\n    // 3. A bit more about passing vp8 options to ffmpeg.\n    //   https://trac.ffmpeg.org/wiki/Encode/VP8\n    // 4. Tuning for VP9:\n    //   https://developers.google.com/media/vp9/live-encoding\n    //\n    // How to stress-test video recording (runs 10 recorders in parallel to book all cpus available):\n    //   $ node ./utils/video_stress.js\n    //\n    // We use the following vp8 options:\n    //   \"-qmin 0 -qmax 50\" - quality variation from 0 to 50.\n    //     Suggested here: https://trac.ffmpeg.org/wiki/Encode/VP8\n    //   \"-crf 8\" - constant quality mode, 4-63, lower means better quality.\n    //   \"-deadline realtime -speed 8\" - do not use too much cpu to keep up with incoming frames.\n    //   \"-b:v 1M\" - video bitrate. Default value is too low for vp8\n    //     Suggested here: https://trac.ffmpeg.org/wiki/Encode/VP8\n    //   Note that we can switch to \"-qmin 20 -qmax 50 -crf 30\" for smaller video size but worse quality.\n    //\n    // We use \"pad\" and \"crop\" video filters (-vf option) to resize incoming frames\n    // that might be of the different size to the desired video size.\n    //   https://ffmpeg.org/ffmpeg-filters.html#pad-1\n    //   https://ffmpeg.org/ffmpeg-filters.html#crop\n    //\n    // We use \"image2pipe\" mode to pipe frames and get a single video - https://trac.ffmpeg.org/wiki/Slideshow\n    //   \"-f image2pipe -c:v mjpeg -i -\" forces input to be read from standard input, and forces\n    //     mjpeg input image format.\n    //   \"-avioflags direct\" reduces general buffering.\n    //   \"-fpsprobesize 0 -probesize 32 -analyzeduration 0\" reduces initial buffering\n    //     while analyzing input fps and other stats.\n    //\n    // \"-y\" means overwrite output.\n    // \"-an\" means no audio.\n    // \"-threads 1\" means using one thread. This drastically reduces stalling when\n    //   cpu is overbooked. By default vp8 tries to use all available threads?\n\n    const w = options.width;\n    const h = options.height;\n    const args = `-loglevel error -f image2pipe -avioflags direct -fpsprobesize 0 -probesize 32 -analyzeduration 0 -c:v mjpeg -i pipe:0 -y -an -r ${fps} -c:v vp8 -qmin 0 -qmax 50 -crf 8 -deadline realtime -speed 8 -b:v 1M -threads 1 -vf pad=${w}:${h}:0:0:gray,crop=${w}:${h}:0:0`.split(' ');\n    args.push(options.outputFile);\n\n    const { launchedProcess, gracefullyClose } = await launchProcess({\n      command: this._ffmpegPath,\n      args,\n      stdio: 'stdin',\n      log: (message: string) => debugLogger.log('browser', message),\n      tempDirectories: [],\n      attemptToGracefullyClose: async () => {\n        debugLogger.log('browser', 'Closing stdin...');\n        launchedProcess.stdin!.end();\n      },\n      onExit: (exitCode, signal) => {\n        debugLogger.log('browser', `ffmpeg onkill exitCode=${exitCode} signal=${signal}`);\n      },\n    });\n    launchedProcess.stdin!.on('finish', () => {\n      debugLogger.log('browser', 'ffmpeg finished input.');\n    });\n    launchedProcess.stdin!.on('error', () => {\n      debugLogger.log('browser', 'ffmpeg error.');\n    });\n    this._process = launchedProcess;\n    this._gracefullyClose = gracefullyClose;\n  }\n\n  writeFrame(frame: Buffer, timestamp: number) {\n    assert(this._process);\n    if (this._isStopped)\n      return;\n\n    if (this._lastFrameBuffer) {\n      const durationSec = timestamp - this._lastFrameTimestamp;\n      const repeatCount = Math.max(1, Math.round(fps * durationSec));\n      for (let i = 0; i < repeatCount; ++i)\n        this._frameQueue.push(this._lastFrameBuffer);\n      this._lastWritePromise = this._lastWritePromise.then(() => this._sendFrames());\n    }\n\n    this._lastFrameBuffer = frame;\n    this._lastFrameTimestamp = timestamp;\n    this._lastWriteTimestamp = monotonicTime();\n  }\n\n  private async _sendFrames() {\n    while (this._frameQueue.length)\n      await this._sendFrame(this._frameQueue.shift()!);\n  }\n\n  private async _sendFrame(frame: Buffer) {\n    return new Promise(f => this._process!.stdin!.write(frame, f)).then(error => {\n      if (error)\n        debugLogger.log('browser', `ffmpeg failed to write: ${String(error)}`);\n    });\n  }\n\n  async stop() {\n    if (this._isStopped)\n      return;\n    this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + (monotonicTime() - this._lastWriteTimestamp) / 1000);\n    this._isStopped = true;\n    await this._lastWritePromise;\n    await this._gracefullyClose!();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
