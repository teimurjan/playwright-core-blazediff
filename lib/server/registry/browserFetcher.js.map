{
  "version": 3,
  "sources": ["../../../src/server/registry/browserFetcher.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as childProcess from 'child_process';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport { debugLogger } from '../utils/debugLogger';\nimport { ManualPromise } from '../../utils/isomorphic/manualPromise';\nimport { getUserAgent } from '../utils/userAgent';\nimport { progress as ProgressBar, colors } from '../../utilsBundle';\nimport { existsAsync } from '../utils/fileUtils';\n\nimport { browserDirectoryToMarkerFilePath } from '.';\n\nimport type { DownloadParams } from './oopDownloadBrowserMain';\n\nexport async function downloadBrowserWithProgressBar(title: string, browserDirectory: string, executablePath: string | undefined, downloadURLs: string[], downloadFileName: string, downloadSocketTimeout: number): Promise<boolean> {\n  if (await existsAsync(browserDirectoryToMarkerFilePath(browserDirectory))) {\n    // Already downloaded.\n    debugLogger.log('install', `${title} is already downloaded.`);\n    return false;\n  }\n\n  const zipPath = path.join(os.tmpdir(), downloadFileName);\n  try {\n    const retryCount = 5;\n    for (let attempt = 1; attempt <= retryCount; ++attempt) {\n      debugLogger.log('install', `downloading ${title} - attempt #${attempt}`);\n      const url = downloadURLs[(attempt - 1) % downloadURLs.length];\n      logPolitely(`Downloading ${title}` + colors.dim(` from ${url}`));\n      const { error } = await downloadBrowserWithProgressBarOutOfProcess(title, browserDirectory, url, zipPath, executablePath, downloadSocketTimeout);\n      if (!error) {\n        debugLogger.log('install', `SUCCESS installing ${title}`);\n        break;\n      }\n      if (await existsAsync(zipPath))\n        await fs.promises.unlink(zipPath);\n      if (await existsAsync(browserDirectory))\n        await fs.promises.rmdir(browserDirectory, { recursive: true });\n      const errorMessage = error?.message || '';\n      debugLogger.log('install', `attempt #${attempt} - ERROR: ${errorMessage}`);\n      if (attempt >= retryCount)\n        throw error;\n    }\n  } catch (e) {\n    debugLogger.log('install', `FAILED installation ${title} with error: ${e}`);\n    process.exitCode = 1;\n    throw e;\n  } finally {\n    if (await existsAsync(zipPath))\n      await fs.promises.unlink(zipPath);\n  }\n  logPolitely(`${title} downloaded to ${browserDirectory}`);\n  return true;\n}\n\n/**\n * Node.js has a bug where the process can exit with 0 code even though there was an uncaught exception.\n * Thats why we execute it in a separate process and check manually if the destination file exists.\n * https://github.com/microsoft/playwright/issues/17394\n */\nfunction downloadBrowserWithProgressBarOutOfProcess(title: string, browserDirectory: string, url: string, zipPath: string, executablePath: string | undefined, socketTimeout: number): Promise<{ error: Error | null }> {\n  const cp = childProcess.fork(path.join(__dirname, 'oopDownloadBrowserMain.js'));\n  const promise = new ManualPromise<{ error: Error | null }>();\n  const progress = getDownloadProgress();\n  cp.on('message', (message: any) => {\n    if (message?.method === 'log')\n      debugLogger.log('install', message.params.message);\n    if (message?.method === 'progress')\n      progress(message.params.done, message.params.total);\n  });\n  cp.on('exit', code => {\n    if (code !== 0) {\n      promise.resolve({ error: new Error(`Download failure, code=${code}`) });\n      return;\n    }\n    if (!fs.existsSync(browserDirectoryToMarkerFilePath(browserDirectory)))\n      promise.resolve({ error: new Error(`Download failure, ${browserDirectoryToMarkerFilePath(browserDirectory)} does not exist`) });\n    else\n      promise.resolve({ error: null });\n  });\n  cp.on('error', error => {\n    promise.resolve({ error });\n  });\n\n  debugLogger.log('install', `running download:`);\n  debugLogger.log('install', `-- from url: ${url}`);\n  debugLogger.log('install', `-- to location: ${zipPath}`);\n  const downloadParams: DownloadParams = {\n    title,\n    browserDirectory,\n    url,\n    zipPath,\n    executablePath,\n    socketTimeout,\n    userAgent: getUserAgent(),\n  };\n  cp.send({ method: 'download', params: downloadParams });\n  return promise;\n}\n\nexport function logPolitely(toBeLogged: string) {\n  const logLevel = process.env.npm_config_loglevel;\n  const logLevelDisplay = ['silent', 'error', 'warn'].indexOf(logLevel || '') > -1;\n\n  if (!logLevelDisplay)\n    console.log(toBeLogged);  // eslint-disable-line no-console\n}\n\ntype OnProgressCallback = (downloadedBytes: number, totalBytes: number) => void;\n\nfunction getDownloadProgress(): OnProgressCallback {\n  // eslint-disable-next-line no-restricted-properties\n  if (process.stdout.isTTY)\n    return getAnimatedDownloadProgress();\n  return getBasicDownloadProgress();\n}\n\nfunction getAnimatedDownloadProgress(): OnProgressCallback {\n  let progressBar: ProgressBar;\n  let lastDownloadedBytes = 0;\n\n  return (downloadedBytes: number, totalBytes: number) => {\n    if (!progressBar) {\n      progressBar = new ProgressBar(\n          `${toMegabytes(\n              totalBytes\n          )} [:bar] :percent :etas`,\n          {\n            complete: '=',\n            incomplete: ' ',\n            width: 20,\n            total: totalBytes,\n          }\n      );\n    }\n    const delta = downloadedBytes - lastDownloadedBytes;\n    lastDownloadedBytes = downloadedBytes;\n    progressBar.tick(delta);\n  };\n}\n\nfunction getBasicDownloadProgress(): OnProgressCallback {\n  const totalRows = 10;\n  const stepWidth = 8;\n  let lastRow = -1;\n  return (downloadedBytes: number, totalBytes: number) => {\n    const percentage = downloadedBytes / totalBytes;\n    const row = Math.floor(totalRows * percentage);\n    if (row > lastRow) {\n      lastRow = row;\n      const percentageString = String(percentage * 100 | 0).padStart(3);\n      // eslint-disable-next-line no-console\n      console.log(`|${'\u25A0'.repeat(row * stepWidth)}${' '.repeat((totalRows - row) * stepWidth)}| ${percentageString}% of ${toMegabytes(totalBytes)}`);\n    }\n  };\n}\n\nfunction toMegabytes(bytes: number) {\n  const mb = bytes / 1024 / 1024;\n  return `${Math.round(mb * 10) / 10} MiB`;\n}\n"],
  "mappings": "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",
  "names": ["path", "os", "fs", "ProgressBar"]
}
