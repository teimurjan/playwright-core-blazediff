{
  "version": 3,
  "sources": ["../../../src/server/registry/dependencies.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as childProcess from 'child_process';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport { deps } from './nativeDeps';\nimport { wrapInASCIIBox } from '../utils/ascii';\nimport { hostPlatform, isOfficiallySupportedPlatform } from '../utils/hostPlatform';\nimport { spawnAsync } from '../utils/spawnAsync';\nimport { getPlaywrightVersion } from '../utils/userAgent';\n\nimport { buildPlaywrightCLICommand, registry } from '.';\n\nconst BIN_DIRECTORY = path.join(__dirname, '..', '..', '..', 'bin');\nconst languageBindingVersion = process.env.PW_CLI_DISPLAY_VERSION || require('../../../package.json').version;\n\nconst dockerVersionFilePath = '/ms-playwright/.docker-info';\nexport async function writeDockerVersion(dockerImageNameTemplate: string) {\n  await fs.promises.mkdir(path.dirname(dockerVersionFilePath), { recursive: true });\n  await fs.promises.writeFile(dockerVersionFilePath, JSON.stringify(dockerVersion(dockerImageNameTemplate), null, 2), 'utf8');\n  // Make sure version file is globally accessible.\n  await fs.promises.chmod(dockerVersionFilePath, 0o777);\n}\n\nexport function dockerVersion(dockerImageNameTemplate: string): { driverVersion: string, dockerImageName: string } {\n  return {\n    driverVersion: languageBindingVersion,\n    dockerImageName: dockerImageNameTemplate.replace('%version%', languageBindingVersion),\n  };\n}\n\nexport function readDockerVersionSync(): null | { driverVersion: string, dockerImageName: string, dockerImageNameTemplate: string } {\n  try {\n    const data = JSON.parse(fs.readFileSync(dockerVersionFilePath, 'utf8'));\n    return {\n      ...data,\n      dockerImageNameTemplate: data.dockerImageName.replace(data.driverVersion, '%version%'),\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\nconst checkExecutable = (filePath: string) => {\n  if (process.platform === 'win32')\n    return filePath.endsWith('.exe');\n  return fs.promises.access(filePath, fs.constants.X_OK).then(() => true).catch(() => false);\n};\n\nfunction isSupportedWindowsVersion(): boolean {\n  if (os.platform() !== 'win32' || os.arch() !== 'x64')\n    return false;\n  const [major, minor] = os.release().split('.').map(token => parseInt(token, 10));\n  // This is based on: https://stackoverflow.com/questions/42524606/how-to-get-windows-version-using-node-js/44916050#44916050\n  // The table with versions is taken from: https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-osversioninfoexw#remarks\n  // Windows 7 is not supported and is encoded as `6.1`.\n  return major > 6 || (major === 6 && minor > 1);\n}\n\nexport type DependencyGroup = 'chromium' | 'firefox' | 'webkit' | 'tools';\n\nexport async function installDependenciesWindows(targets: Set<DependencyGroup>, dryRun: boolean): Promise<void> {\n  if (targets.has('chromium')) {\n    const command = 'powershell.exe';\n    const args = ['-ExecutionPolicy', 'Bypass', '-File', path.join(BIN_DIRECTORY, 'install_media_pack.ps1')];\n    if (dryRun) {\n      console.log(`${command} ${quoteProcessArgs(args).join(' ')}`); // eslint-disable-line no-console\n      return;\n    }\n    const { code } = await spawnAsync(command, args, { cwd: BIN_DIRECTORY, stdio: 'inherit' });\n    if (code !== 0)\n      throw new Error('Failed to install windows dependencies!');\n  }\n}\n\nexport async function installDependenciesLinux(targets: Set<DependencyGroup>, dryRun: boolean) {\n  const libraries: string[] = [];\n  const platform = hostPlatform;\n  if (!isOfficiallySupportedPlatform)\n    console.warn(`BEWARE: your OS is not officially supported by Playwright; installing dependencies for ${platform} as a fallback.`); // eslint-disable-line no-console\n  for (const target of targets) {\n    const info = deps[platform];\n    if (!info) {\n      console.warn(`Cannot install dependencies for ${platform} with Playwright ${getPlaywrightVersion()}!`);  // eslint-disable-line no-console\n      return;\n    }\n    libraries.push(...info[target]);\n  }\n  const uniqueLibraries = Array.from(new Set(libraries));\n  if (!dryRun)\n    console.log(`Installing dependencies...`);  // eslint-disable-line no-console\n  const commands: string[] = [];\n  commands.push('apt-get update');\n  commands.push(['apt-get', 'install', '-y', '--no-install-recommends',\n    ...uniqueLibraries,\n  ].join(' '));\n  const { command, args, elevatedPermissions\u00A0} = await transformCommandsForRoot(commands);\n  if (dryRun) {\n    console.log(`${command} ${quoteProcessArgs(args).join(' ')}`); // eslint-disable-line no-console\n    return;\n  }\n  if (elevatedPermissions)\n    console.log('Switching to root user to install dependencies...'); // eslint-disable-line no-console\n  const child = childProcess.spawn(command, args, { stdio: 'inherit' });\n  await new Promise<void>((resolve, reject) => {\n    child.on('exit', (code: number) => code === 0 ? resolve() : reject(new Error(`Installation process exited with code: ${code}`)));\n    child.on('error', reject);\n  });\n}\n\nexport async function validateDependenciesWindows(sdkLanguage: string, windowsExeAndDllDirectories: string[]) {\n  const directoryPaths = windowsExeAndDllDirectories;\n  const lddPaths: string[] = [];\n  for (const directoryPath of directoryPaths)\n    lddPaths.push(...(await executablesOrSharedLibraries(directoryPath)));\n  const allMissingDeps = await Promise.all(lddPaths.map(lddPath => missingFileDependenciesWindows(sdkLanguage, lddPath)));\n  const missingDeps: Set<string> = new Set();\n  for (const deps of allMissingDeps) {\n    for (const dep of deps)\n      missingDeps.add(dep);\n  }\n\n  if (!missingDeps.size)\n    return;\n\n  let isCrtMissing = false;\n  let isMediaFoundationMissing = false;\n  for (const dep of missingDeps) {\n    if (dep.startsWith('api-ms-win-crt') || dep === 'vcruntime140.dll' || dep === 'vcruntime140_1.dll' || dep === 'msvcp140.dll')\n      isCrtMissing = true;\n    else if (dep === 'mf.dll' || dep === 'mfplat.dll' ||  dep === 'msmpeg2vdec.dll' || dep === 'evr.dll' || dep === 'avrt.dll')\n      isMediaFoundationMissing = true;\n  }\n\n  const details = [];\n\n  if (isCrtMissing) {\n    details.push(\n        `Some of the Universal C Runtime files cannot be found on the system. You can fix`,\n        `that by installing Microsoft Visual C++ Redistributable for Visual Studio from:`,\n        `https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads`,\n        ``);\n  }\n\n  if (isMediaFoundationMissing) {\n    details.push(\n        `Some of the Media Foundation files cannot be found on the system. If you are`,\n        `on Windows Server try fixing this by running the following command in PowerShell`,\n        `as Administrator:`,\n        ``,\n        `    Install-WindowsFeature Server-Media-Foundation`,\n        ``,\n        `For Windows N editions visit:`,\n        `https://support.microsoft.com/en-us/help/3145500/media-feature-pack-list-for-windows-n-editions`,\n        ``);\n  }\n\n  details.push(\n      `Full list of missing libraries:`,\n      `    ${[...missingDeps].join('\\n    ')}`,\n      ``);\n\n  const message = `Host system is missing dependencies!\\n\\n${details.join('\\n')}`;\n  if (isSupportedWindowsVersion()) {\n    throw new Error(message);\n  } else {\n    // eslint-disable-next-line no-console\n    console.warn(`WARNING: running on unsupported windows version!`);\n    // eslint-disable-next-line no-console\n    console.warn(message);\n  }\n}\n\nexport async function validateDependenciesLinux(sdkLanguage: string, linuxLddDirectories: string[], dlOpenLibraries: string[]) {\n  const directoryPaths = linuxLddDirectories;\n  const lddPaths: string[] = [];\n  for (const directoryPath of directoryPaths)\n    lddPaths.push(...(await executablesOrSharedLibraries(directoryPath)));\n  const missingDepsPerFile = await Promise.all(lddPaths.map(lddPath => missingFileDependencies(lddPath, directoryPaths)));\n  const missingDeps: Set<string> = new Set();\n  for (const deps of missingDepsPerFile) {\n    for (const dep of deps)\n      missingDeps.add(dep);\n  }\n  for (const dep of (await missingDLOPENLibraries(dlOpenLibraries)))\n    missingDeps.add(dep);\n  if (!missingDeps.size)\n    return;\n  const allMissingDeps = new Set(missingDeps);\n  // Check Ubuntu version.\n  const missingPackages = new Set();\n\n  const libraryToPackageNameMapping = deps[hostPlatform] ? {\n    ...(deps[hostPlatform]?.lib2package || {}),\n    ...MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU,\n  } : {};\n  // Translate missing dependencies to package names to install with apt.\n  for (const missingDep of missingDeps) {\n    const packageName = libraryToPackageNameMapping[missingDep];\n    if (packageName) {\n      missingPackages.add(packageName);\n      missingDeps.delete(missingDep);\n    }\n  }\n\n  const maybeSudo = process.getuid?.() && os.platform() !== 'win32' ? 'sudo ' : '';\n  const dockerInfo = readDockerVersionSync();\n  const errorLines = [\n    `Host system is missing dependencies to run browsers.`,\n  ];\n  // Ignore patch versions when comparing docker container version and Playwright version:\n  // we **NEVER** roll browsers in patch releases, so native dependencies do not change.\n  if (dockerInfo && !dockerInfo.driverVersion.startsWith(getPlaywrightVersion(true /* majorMinorOnly */) + '.')) {\n    // We are running in a docker container with unmatching version.\n    // In this case, we know how to install dependencies in it.\n    const pwVersion = getPlaywrightVersion();\n    const requiredDockerImage = dockerInfo.dockerImageName.replace(dockerInfo.driverVersion, pwVersion);\n    errorLines.push(...[\n      `This is most likely due to Docker image version not matching Playwright version:`,\n      `- Playwright  : ${pwVersion}`,\n      `- Docker image: ${dockerInfo.driverVersion}`,\n      ``,\n      `Either:`,\n      `- (recommended) use Docker image \"${requiredDockerImage}\"`,\n      `- (alternative 1) run the following command inside Docker to install missing dependencies:`,\n      ``,\n      `    ${maybeSudo}${buildPlaywrightCLICommand(sdkLanguage, 'install-deps')}`,\n      ``,\n      `- (alternative 2) use apt inside Docker:`,\n      ``,\n      `    ${maybeSudo}apt-get install ${[...missingPackages].join('\\\\\\n        ')}`,\n      ``,\n      `<3 Playwright Team`,\n    ]);\n  } else if (missingPackages.size && !missingDeps.size) {\n    // Only known dependencies are missing for browsers.\n    // Suggest installation with a Playwright CLI.\n    errorLines.push(...[\n      `Please install them with the following command:`,\n      ``,\n      `    ${maybeSudo}${buildPlaywrightCLICommand(sdkLanguage, 'install-deps')}`,\n      ``,\n      `Alternatively, use apt:`,\n      `    ${maybeSudo}apt-get install ${[...missingPackages].join('\\\\\\n        ')}`,\n      ``,\n      `<3 Playwright Team`,\n    ]);\n  } else {\n    // Unhappy path: we either run on unknown distribution, or we failed to resolve all missing\n    // libraries to package names.\n    // Print missing libraries only:\n    errorLines.push(...[\n      `Missing libraries:`,\n      ...[...allMissingDeps].map(dep => '    ' + dep),\n    ]);\n  }\n\n  throw new Error('\\n' + wrapInASCIIBox(errorLines.join('\\n'), 1));\n}\n\nfunction isSharedLib(basename: string) {\n  switch (os.platform()) {\n    case 'linux':\n      return basename.endsWith('.so') || basename.includes('.so.');\n    case 'win32':\n      return basename.endsWith('.dll');\n    default:\n      return false;\n  }\n}\n\nasync function executablesOrSharedLibraries(directoryPath: string): Promise<string[]> {\n  if (!fs.existsSync(directoryPath))\n    return [];\n  const allPaths = (await fs.promises.readdir(directoryPath)).map(file => path.resolve(directoryPath, file));\n  const allStats = await Promise.all(allPaths.map(aPath => fs.promises.stat(aPath)));\n  const filePaths = allPaths.filter((aPath, index) => (allStats[index] as any).isFile());\n\n  const executablersOrLibraries = (await Promise.all(filePaths.map(async filePath => {\n    const basename = path.basename(filePath).toLowerCase();\n    if (isSharedLib(basename))\n      return filePath;\n    if (await checkExecutable(filePath))\n      return filePath;\n    return false;\n  }))).filter(Boolean);\n\n  return executablersOrLibraries as string[];\n}\n\nasync function missingFileDependenciesWindows(sdkLanguage: string, filePath: string): Promise<Array<string>> {\n  const executable = registry.findExecutable('winldd')!.executablePathOrDie(sdkLanguage);\n  const dirname = path.dirname(filePath);\n  const { stdout, code } = await spawnAsync(executable, [filePath], {\n    cwd: dirname,\n    env: {\n      ...process.env,\n      LD_LIBRARY_PATH: process.env.LD_LIBRARY_PATH ? `${process.env.LD_LIBRARY_PATH}:${dirname}` : dirname,\n    },\n  });\n  if (code !== 0)\n    return [];\n  const missingDeps = stdout.split('\\n').map(line => line.trim()).filter(line => line.endsWith('not found') && line.includes('=>')).map(line => line.split('=>')[0].trim().toLowerCase());\n  return missingDeps;\n}\n\nasync function missingFileDependencies(filePath: string, extraLDPaths: string[]): Promise<Array<string>> {\n  const dirname = path.dirname(filePath);\n  let LD_LIBRARY_PATH = extraLDPaths.join(':');\n  if (process.env.LD_LIBRARY_PATH)\n    LD_LIBRARY_PATH = `${process.env.LD_LIBRARY_PATH}:${LD_LIBRARY_PATH}`;\n  const { stdout, code } = await spawnAsync('ldd', [filePath], {\n    cwd: dirname,\n    env: {\n      ...process.env,\n      LD_LIBRARY_PATH,\n    },\n  });\n  if (code !== 0)\n    return [];\n  const missingDeps = stdout.split('\\n').map(line => line.trim()).filter(line => line.endsWith('not found') && line.includes('=>')).map(line => line.split('=>')[0].trim());\n  return missingDeps;\n}\n\nasync function missingDLOPENLibraries(libraries: string[]): Promise<string[]> {\n  if (!libraries.length)\n    return [];\n  // NOTE: Using full-qualified path to `ldconfig` since `/sbin` is not part of the\n  // default PATH in CRON.\n  // @see https://github.com/microsoft/playwright/issues/3397\n  const { stdout, code, error } = await spawnAsync('/sbin/ldconfig', ['-p'], {});\n  if (code !== 0 || error)\n    return [];\n  const isLibraryAvailable = (library: string) => stdout.toLowerCase().includes(library.toLowerCase());\n  return libraries.filter(library => !isLibraryAvailable(library));\n}\n\nconst MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU: { [s: string]: string} = {\n  // libgstlibav.so (the only actual library provided by gstreamer1.0-libav) is not\n  // in the ldconfig cache, so we detect the actual library required for playing h.264\n  // and if it's missing recommend installing missing gstreamer lib.\n  // gstreamer1.0-libav -> libavcodec57 -> libx264-152\n  'libx264.so': 'gstreamer1.0-libav',\n};\n\nfunction quoteProcessArgs(args: string[]): string[] {\n  return args.map(arg => {\n    if (arg.includes(' '))\n      return `\"${arg}\"`;\n    return arg;\n  });\n}\n\nexport async function transformCommandsForRoot(commands: string[]): Promise<{ command: string, args: string[], elevatedPermissions: boolean}> {\n  const isRoot = process.getuid?.() === 0;\n  if (isRoot)\n    return { command: 'sh', args: ['-c', `${commands.join('&& ')}`], elevatedPermissions: false };\n  const sudoExists = await spawnAsync('which', ['sudo']);\n  if (sudoExists.code === 0)\n    return { command: 'sudo', args: ['--', 'sh', '-c', `${commands.join('&& ')}`], elevatedPermissions: true };\n  return { command: 'su', args: ['root', '-c', `${commands.join('&& ')}`], elevatedPermissions: true };\n}\n"],
  "mappings": "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",
  "names": ["path", "fs", "os", "deps"]
}
