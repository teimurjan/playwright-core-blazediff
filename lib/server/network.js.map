{
  "version": 3,
  "sources": ["../../src/server/network.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../utils';\nimport { BrowserContext } from './browserContext';\nimport { APIRequestContext } from './fetch';\nimport { SdkObject } from './instrumentation';\nimport { ManualPromise } from '../utils/isomorphic/manualPromise';\n\nimport type * as contexts from './browserContext';\nimport type * as frames from './frames';\nimport type * as pages from './page';\nimport type * as types from './types';\nimport type { NormalizedContinueOverrides } from './types';\nimport type { HeadersArray, NameValue } from '../utils/isomorphic/types';\nimport type * as channels from '@protocol/channels';\n\n\nexport function filterCookies(cookies: channels.NetworkCookie[], urls: string[]): channels.NetworkCookie[] {\n  const parsedURLs = urls.map(s => new URL(s));\n  // Chromiums's cookies are missing sameSite when it is 'None'\n  return cookies.filter(c => {\n    if (!parsedURLs.length)\n      return true;\n    for (const parsedURL of parsedURLs) {\n      let domain = c.domain;\n      if (!domain.startsWith('.'))\n        domain = '.' + domain;\n      if (!('.' + parsedURL.hostname).endsWith(domain))\n        continue;\n      if (!parsedURL.pathname.startsWith(c.path))\n        continue;\n      if (parsedURL.protocol !== 'https:' && !isLocalHostname(parsedURL.hostname) && c.secure)\n        continue;\n      return true;\n    }\n    return false;\n  });\n}\n\nexport function isLocalHostname(hostname: string): boolean {\n  return hostname === 'localhost' || hostname.endsWith('.localhost');\n}\n\n// Rollover to 5-digit year:\n// 253402300799 == Fri, 31 Dec 9999 23:59:59 +0000 (UTC)\n// 253402300800 == Sat,  1 Jan 1000 00:00:00 +0000 (UTC)\nexport const kMaxCookieExpiresDateInSeconds = 253402300799;\n\nexport function rewriteCookies(cookies: channels.SetNetworkCookie[]): channels.SetNetworkCookie[] {\n  return cookies.map(c => {\n    assert(c.url || (c.domain && c.path), 'Cookie should have a url or a domain/path pair');\n    assert(!(c.url && c.domain), 'Cookie should have either url or domain');\n    assert(!(c.url && c.path), 'Cookie should have either url or path');\n    assert(!(c.expires && c.expires < 0 && c.expires !== -1), 'Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed');\n    assert(!(c.expires && c.expires > 0 && c.expires > kMaxCookieExpiresDateInSeconds), 'Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed');\n    const copy = { ...c };\n    if (copy.url) {\n      assert(copy.url !== 'about:blank', `Blank page can not have cookie \"${c.name}\"`);\n      assert(!copy.url.startsWith('data:'), `Data URL page can not have cookie \"${c.name}\"`);\n      const url = new URL(copy.url);\n      copy.domain = url.hostname;\n      copy.path = url.pathname.substring(0, url.pathname.lastIndexOf('/') + 1);\n      copy.secure = url.protocol === 'https:';\n    }\n    return copy;\n  });\n}\n\nexport function parseURL(url: string): URL | null {\n  try {\n    return new URL(url);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function stripFragmentFromUrl(url: string): string {\n  if (!url.includes('#'))\n    return url;\n  return url.substring(0, url.indexOf('#'));\n}\n\nexport class Request extends SdkObject {\n  private _response: Response | null = null;\n  private _redirectedFrom: Request | null;\n  _redirectedTo: Request | null = null;\n  readonly _documentId?: string;\n  readonly _isFavicon: boolean;\n  _failureText: string | null = null;\n  private _url: string;\n  private _resourceType: string;\n  private _method: string;\n  private _postData: Buffer | null;\n  readonly _headers: HeadersArray;\n  private _headersMap = new Map<string, string>();\n  readonly _frame: frames.Frame | null = null;\n  readonly _serviceWorker: pages.Worker | null = null;\n  readonly _context: contexts.BrowserContext;\n  private _rawRequestHeadersPromise = new ManualPromise<HeadersArray>();\n  private _waitForResponsePromise = new ManualPromise<Response | null>();\n  _responseEndTiming = -1;\n  private _overrides: NormalizedContinueOverrides | undefined;\n  private _bodySize: number | undefined;\n  _responseBodyOverride: { body: string; isBase64: boolean; } | undefined;\n\n  constructor(context: contexts.BrowserContext, frame: frames.Frame | null, serviceWorker: pages.Worker | null, redirectedFrom: Request | null, documentId: string | undefined,\n    url: string, resourceType: string, method: string, postData: Buffer | null, headers: HeadersArray) {\n    super(frame || context, 'request');\n    assert(!url.startsWith('data:'), 'Data urls should not fire requests');\n    this._context = context;\n    this._frame = frame;\n    this._serviceWorker = serviceWorker;\n    this._redirectedFrom = redirectedFrom;\n    if (redirectedFrom)\n      redirectedFrom._redirectedTo = this;\n    this._documentId = documentId;\n    this._url = stripFragmentFromUrl(url);\n    this._resourceType = resourceType;\n    this._method = method;\n    this._postData = postData;\n    this._headers = headers;\n    this._updateHeadersMap();\n    this._isFavicon = url.endsWith('/favicon.ico') || !!redirectedFrom?._isFavicon;\n  }\n\n  _setFailureText(failureText: string) {\n    this._failureText = failureText;\n    this._waitForResponsePromise.resolve(null);\n  }\n\n  _applyOverrides(overrides: types.NormalizedContinueOverrides) {\n    this._overrides = { ...this._overrides, ...overrides };\n    this._updateHeadersMap();\n    return this._overrides;\n  }\n\n  private _updateHeadersMap() {\n    for (const { name, value } of this.headers())\n      this._headersMap.set(name.toLowerCase(), value);\n  }\n\n  overrides() {\n    return this._overrides;\n  }\n\n  url(): string {\n    return this._overrides?.url || this._url;\n  }\n\n  resourceType(): string {\n    return this._resourceType;\n  }\n\n  method(): string {\n    return this._overrides?.method || this._method;\n  }\n\n  postDataBuffer(): Buffer | null {\n    return this._overrides?.postData || this._postData;\n  }\n\n  headers(): HeadersArray {\n    return this._overrides?.headers || this._headers;\n  }\n\n  headerValue(name: string): string | undefined {\n    return this._headersMap.get(name);\n  }\n\n  // \"null\" means no raw headers available - we'll use provisional headers as raw headers.\n  setRawRequestHeaders(headers: HeadersArray | null) {\n    if (!this._rawRequestHeadersPromise.isDone())\n      this._rawRequestHeadersPromise.resolve(headers || this._headers);\n  }\n\n  async rawRequestHeaders(): Promise<HeadersArray> {\n    return this._overrides?.headers || this._rawRequestHeadersPromise;\n  }\n\n  response(): Promise<Response | null> {\n    return this._waitForResponsePromise;\n  }\n\n  _existingResponse(): Response | null {\n    return this._response;\n  }\n\n  _setResponse(response: Response) {\n    this._response = response;\n    this._waitForResponsePromise.resolve(response);\n  }\n\n  _finalRequest(): Request {\n    return this._redirectedTo ? this._redirectedTo._finalRequest() : this;\n  }\n\n  frame(): frames.Frame | null {\n    return this._frame;\n  }\n\n  serviceWorker(): pages.Worker | null {\n    return this._serviceWorker;\n  }\n\n  isNavigationRequest(): boolean {\n    return !!this._documentId;\n  }\n\n  redirectedFrom(): Request | null {\n    return this._redirectedFrom;\n  }\n\n  failure(): { errorText: string } | null {\n    if (this._failureText === null)\n      return null;\n    return {\n      errorText: this._failureText\n    };\n  }\n\n  // TODO(bidi): remove once post body is available.\n  _setBodySize(size: number) {\n    this._bodySize = size;\n  }\n\n  bodySize(): number {\n    return this._bodySize || this.postDataBuffer()?.length || 0;\n  }\n\n  async requestHeadersSize(): Promise<number> {\n    let headersSize = 4; // 4 = 2 spaces + 2 line breaks (GET /path \\r\\n)\n    headersSize += this.method().length;\n    headersSize += (new URL(this.url())).pathname.length;\n    headersSize += 8; // httpVersion\n    const headers = await this.rawRequestHeaders();\n    for (const header of headers)\n      headersSize += header.name.length + header.value.length + 4; // 4 = ': ' + '\\r\\n'\n    return headersSize;\n  }\n}\n\nexport class Route extends SdkObject {\n  private readonly _request: Request;\n  private readonly _delegate: RouteDelegate;\n  private _handled = false;\n  private _currentHandler: RouteHandler | undefined;\n  private _futureHandlers: RouteHandler[] = [];\n\n  constructor(request: Request, delegate: RouteDelegate) {\n    super(request._frame || request._context, 'route');\n    this._request = request;\n    this._delegate = delegate;\n    this._request._context.addRouteInFlight(this);\n  }\n\n  handle(handlers: RouteHandler[]) {\n    this._futureHandlers = [...handlers];\n    this.continue({ isFallback: true }).catch(() => {});\n  }\n\n  async removeHandler(handler: RouteHandler) {\n    this._futureHandlers = this._futureHandlers.filter(h => h !== handler);\n    if (handler === this._currentHandler) {\n      await this.continue({ isFallback: true }).catch(() => {});\n      return;\n    }\n  }\n\n  request(): Request {\n    return this._request;\n  }\n\n  async abort(errorCode: string = 'failed') {\n    this._startHandling();\n    this._request._context.emit(BrowserContext.Events.RequestAborted, this._request);\n    await this._delegate.abort(errorCode);\n    this._endHandling();\n  }\n\n  redirectNavigationRequest(url: string) {\n    this._startHandling();\n    assert(this._request.isNavigationRequest());\n    this._request.frame()!.redirectNavigation(url, this._request._documentId!, this._request.headerValue('referer'));\n    this._endHandling();\n  }\n\n  async fulfill(overrides: channels.RouteFulfillParams) {\n    this._startHandling();\n    let body = overrides.body;\n    let isBase64 = overrides.isBase64 || false;\n    if (body === undefined) {\n      if (overrides.fetchResponseUid) {\n        const buffer = this._request._context.fetchRequest.fetchResponses.get(overrides.fetchResponseUid) || APIRequestContext.findResponseBody(overrides.fetchResponseUid);\n        assert(buffer, 'Fetch response has been disposed');\n        body = buffer.toString('base64');\n        isBase64 = true;\n      } else {\n        body = '';\n        isBase64 = false;\n      }\n    } else if (!overrides.status || overrides.status < 200 || overrides.status >= 400) {\n      this._request._responseBodyOverride = { body, isBase64 };\n    }\n    const headers = [...(overrides.headers || [])];\n    this._maybeAddCorsHeaders(headers);\n    this._request._context.emit(BrowserContext.Events.RequestFulfilled, this._request);\n    await this._delegate.fulfill({\n      status: overrides.status || 200,\n      headers,\n      body: body!,\n      isBase64,\n    });\n    this._endHandling();\n  }\n\n  // See https://github.com/microsoft/playwright/issues/12929\n  private _maybeAddCorsHeaders(headers: NameValue[]) {\n    const origin = this._request.headerValue('origin');\n    if (!origin)\n      return;\n    const requestUrl = new URL(this._request.url());\n    if (!requestUrl.protocol.startsWith('http'))\n      return;\n    if (requestUrl.origin === origin.trim())\n      return;\n    const corsHeader = headers.find(({ name }) => name === 'access-control-allow-origin');\n    if (corsHeader)\n      return;\n    headers.push({ name: 'access-control-allow-origin', value: origin });\n    headers.push({ name: 'access-control-allow-credentials', value: 'true' });\n    headers.push({ name: 'vary', value: 'Origin' });\n  }\n\n  async continue(overrides: types.NormalizedContinueOverrides) {\n    if (overrides.url) {\n      const newUrl = new URL(overrides.url);\n      const oldUrl = new URL(this._request.url());\n      if (oldUrl.protocol !== newUrl.protocol)\n        throw new Error('New URL must have same protocol as overridden URL');\n    }\n    if (overrides.headers) {\n      overrides.headers = overrides.headers?.filter(header => {\n        const headerName = header.name.toLowerCase();\n        return headerName !== 'cookie' && headerName !== 'host';\n      });\n    }\n    overrides = this._request._applyOverrides(overrides);\n\n    const nextHandler = this._futureHandlers.shift();\n    if (nextHandler) {\n      this._currentHandler = nextHandler;\n      nextHandler(this, this._request);\n      return;\n    }\n\n    if (!overrides.isFallback)\n      this._request._context.emit(BrowserContext.Events.RequestContinued, this._request);\n    this._startHandling();\n    await this._delegate.continue(overrides);\n    this._endHandling();\n  }\n\n  private _startHandling() {\n    assert(!this._handled, 'Route is already handled!');\n    this._handled = true;\n    this._currentHandler = undefined;\n  }\n\n  private _endHandling() {\n    this._futureHandlers = [];\n    this._currentHandler = undefined;\n    this._request._context.removeRouteInFlight(this);\n  }\n}\n\nexport type RouteHandler = (route: Route, request: Request) => void;\n\ntype GetResponseBodyCallback = () => Promise<Buffer>;\n\nexport type ResourceTiming = {\n  startTime: number;\n  domainLookupStart: number;\n  domainLookupEnd: number;\n  connectStart: number;\n  secureConnectionStart: number;\n  connectEnd: number;\n  requestStart: number;\n  responseStart: number;\n};\n\nexport type ResourceSizes = {\n  requestBodySize: number,\n  requestHeadersSize: number,\n  responseBodySize: number,\n  responseHeadersSize: number,\n  transferSize: number,\n};\n\nexport type RemoteAddr = {\n  ipAddress: string;\n  port: number;\n};\n\nexport type SecurityDetails = {\n  protocol?: string;\n  subjectName?: string;\n  issuer?: string;\n  validFrom?: number;\n  validTo?: number;\n};\n\nexport class Response extends SdkObject {\n  private _request: Request;\n  private _contentPromise: Promise<Buffer> | null = null;\n  _finishedPromise = new ManualPromise<void>();\n  private _status: number;\n  private _statusText: string;\n  private _url: string;\n  private _headers: HeadersArray;\n  private _headersMap = new Map<string, string>();\n  private _getResponseBodyCallback: GetResponseBodyCallback;\n  private _timing: ResourceTiming;\n  private _serverAddrPromise = new ManualPromise<RemoteAddr | undefined>();\n  private _securityDetailsPromise = new ManualPromise<SecurityDetails | undefined>();\n  private _rawResponseHeadersPromise = new ManualPromise<HeadersArray>();\n  private _httpVersion: string | undefined;\n  private _fromServiceWorker: boolean;\n  private _encodedBodySizePromise = new ManualPromise<number | null>();\n  private _transferSizePromise = new ManualPromise<number | null>();\n  private _responseHeadersSizePromise = new ManualPromise<number | null>();\n\n  constructor(request: Request, status: number, statusText: string, headers: HeadersArray, timing: ResourceTiming, getResponseBodyCallback: GetResponseBodyCallback, fromServiceWorker: boolean, httpVersion?: string) {\n    super(request.frame() || request._context, 'response');\n    this._request = request;\n    this._timing = timing;\n    this._status = status;\n    this._statusText = statusText;\n    this._url = request.url();\n    this._headers = headers;\n    for (const { name, value } of this._headers)\n      this._headersMap.set(name.toLowerCase(), value);\n    this._getResponseBodyCallback = getResponseBodyCallback;\n    this._request._setResponse(this);\n    this._httpVersion = httpVersion;\n    this._fromServiceWorker = fromServiceWorker;\n  }\n\n  _serverAddrFinished(addr?: RemoteAddr) {\n    this._serverAddrPromise.resolve(addr);\n  }\n\n  _securityDetailsFinished(securityDetails?: SecurityDetails) {\n    this._securityDetailsPromise.resolve(securityDetails);\n  }\n\n  _requestFinished(responseEndTiming: number) {\n    this._request._responseEndTiming = Math.max(responseEndTiming, this._timing.responseStart);\n    // Set start time equal to end when request is served from memory cache.\n    if (this._timing.requestStart === -1)\n      this._timing.requestStart = this._request._responseEndTiming;\n    this._finishedPromise.resolve();\n  }\n\n  _setHttpVersion(httpVersion: string) {\n    this._httpVersion = httpVersion;\n  }\n\n  url(): string {\n    return this._url;\n  }\n\n  status(): number {\n    return this._status;\n  }\n\n  statusText(): string {\n    return this._statusText;\n  }\n\n  headers(): HeadersArray {\n    return this._headers;\n  }\n\n  headerValue(name: string): string | undefined {\n    return this._headersMap.get(name);\n  }\n\n  async rawResponseHeaders(): Promise<NameValue[]> {\n    return this._rawResponseHeadersPromise;\n  }\n\n  // \"null\" means no raw headers available - we'll use provisional headers as raw headers.\n  setRawResponseHeaders(headers: HeadersArray | null) {\n    if (!this._rawResponseHeadersPromise.isDone())\n      this._rawResponseHeadersPromise.resolve(headers || this._headers);\n  }\n\n  setTransferSize(size: number | null) {\n    this._transferSizePromise.resolve(size);\n  }\n\n  setEncodedBodySize(size: number | null) {\n    this._encodedBodySizePromise.resolve(size);\n  }\n\n  setResponseHeadersSize(size: number | null) {\n    this._responseHeadersSizePromise.resolve(size);\n  }\n\n  timing(): ResourceTiming {\n    return this._timing;\n  }\n\n  async serverAddr(): Promise<RemoteAddr|null> {\n    return await this._serverAddrPromise || null;\n  }\n\n  async securityDetails(): Promise<SecurityDetails|null> {\n    return await this._securityDetailsPromise || null;\n  }\n\n  body(): Promise<Buffer> {\n    if (!this._contentPromise) {\n      this._contentPromise = this._finishedPromise.then(async () => {\n        if (this._status >= 300 && this._status <= 399)\n          throw new Error('Response body is unavailable for redirect responses');\n        if (this._request._responseBodyOverride) {\n          const { body, isBase64 } = this._request._responseBodyOverride;\n          return Buffer.from(body, isBase64 ? 'base64' : 'utf-8');\n        }\n        return this._getResponseBodyCallback();\n      });\n    }\n    return this._contentPromise;\n  }\n\n  request(): Request {\n    return this._request;\n  }\n\n  frame(): frames.Frame | null {\n    return this._request.frame();\n  }\n\n  httpVersion(): string {\n    if (!this._httpVersion)\n      return 'HTTP/1.1';\n    if (this._httpVersion === 'http/1.1')\n      return 'HTTP/1.1';\n    if (this._httpVersion === 'h2')\n      return 'HTTP/2.0';\n    return this._httpVersion;\n  }\n\n  fromServiceWorker(): boolean {\n    return this._fromServiceWorker;\n  }\n\n  async responseHeadersSize(): Promise<number> {\n    const availableSize = await this._responseHeadersSizePromise;\n    if (availableSize !== null)\n      return availableSize;\n\n    // Fallback to calculating it manually.\n    let headersSize = 4; // 4 = 2 spaces + 2 line breaks (HTTP/1.1 200 Ok\\r\\n)\n    headersSize += 8; // httpVersion;\n    headersSize += 3; // statusCode;\n    headersSize += this.statusText().length;\n    const headers = await this._rawResponseHeadersPromise;\n    for (const header of headers)\n      headersSize += header.name.length + header.value.length + 4; // 4 = ': ' + '\\r\\n'\n    headersSize += 2; // '\\r\\n'\n    return headersSize;\n  }\n\n  async sizes(): Promise<ResourceSizes> {\n    const requestHeadersSize = await this._request.requestHeadersSize();\n    const responseHeadersSize = await this.responseHeadersSize();\n\n    let encodedBodySize = await this._encodedBodySizePromise;\n    if (encodedBodySize === null) {\n      // Fallback to calculating it manually.\n      const headers = await this._rawResponseHeadersPromise;\n      const contentLength = headers.find(h => h.name.toLowerCase() === 'content-length')?.value;\n      encodedBodySize = contentLength ? +contentLength : 0;\n    }\n\n    let transferSize = await this._transferSizePromise;\n    if (transferSize === null) {\n      // Fallback to calculating it manually.\n      transferSize = responseHeadersSize + encodedBodySize;\n    }\n\n    return {\n      requestBodySize: this._request.bodySize(),\n      requestHeadersSize,\n      responseBodySize: encodedBodySize,\n      responseHeadersSize,\n      transferSize,\n    };\n  }\n}\n\nexport class WebSocket extends SdkObject {\n  private _url: string;\n  private _notified = false;\n\n  static Events = {\n    Close: 'close',\n    SocketError: 'socketerror',\n    FrameReceived: 'framereceived',\n    FrameSent: 'framesent',\n  };\n\n  constructor(parent: SdkObject, url: string) {\n    super(parent, 'ws');\n    this._url = url;\n  }\n\n  markAsNotified() {\n    // Sometimes we get \"onWebSocketRequest\" twice, at least in Chromium.\n    // Perhaps websocket is restarted because of chrome.webRequest extensions api?\n    // Or maybe the handshake response was a redirect?\n    if (this._notified)\n      return false;\n    this._notified = true;\n    return true;\n  }\n\n  url(): string {\n    return this._url;\n  }\n\n  frameSent(opcode: number, data: string) {\n    this.emit(WebSocket.Events.FrameSent, { opcode, data });\n  }\n\n  frameReceived(opcode: number, data: string) {\n    this.emit(WebSocket.Events.FrameReceived, { opcode, data });\n  }\n\n  error(errorMessage: string) {\n    this.emit(WebSocket.Events.SocketError, errorMessage);\n  }\n\n  closed() {\n    this.emit(WebSocket.Events.Close);\n  }\n}\n\nexport interface RouteDelegate {\n  abort(errorCode: string): Promise<void>;\n  fulfill(response: types.NormalizedFulfillResponse): Promise<void>;\n  continue(overrides: types.NormalizedContinueOverrides): Promise<void>;\n}\n\n// List taken from https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml with extra 306 and 418 codes.\nconst STATUS_TEXTS: { [status: string]: string } = {\n  '100': 'Continue',\n  '101': 'Switching Protocols',\n  '102': 'Processing',\n  '103': 'Early Hints',\n  '200': 'OK',\n  '201': 'Created',\n  '202': 'Accepted',\n  '203': 'Non-Authoritative Information',\n  '204': 'No Content',\n  '205': 'Reset Content',\n  '206': 'Partial Content',\n  '207': 'Multi-Status',\n  '208': 'Already Reported',\n  '226': 'IM Used',\n  '300': 'Multiple Choices',\n  '301': 'Moved Permanently',\n  '302': 'Found',\n  '303': 'See Other',\n  '304': 'Not Modified',\n  '305': 'Use Proxy',\n  '306': 'Switch Proxy',\n  '307': 'Temporary Redirect',\n  '308': 'Permanent Redirect',\n  '400': 'Bad Request',\n  '401': 'Unauthorized',\n  '402': 'Payment Required',\n  '403': 'Forbidden',\n  '404': 'Not Found',\n  '405': 'Method Not Allowed',\n  '406': 'Not Acceptable',\n  '407': 'Proxy Authentication Required',\n  '408': 'Request Timeout',\n  '409': 'Conflict',\n  '410': 'Gone',\n  '411': 'Length Required',\n  '412': 'Precondition Failed',\n  '413': 'Payload Too Large',\n  '414': 'URI Too Long',\n  '415': 'Unsupported Media Type',\n  '416': 'Range Not Satisfiable',\n  '417': 'Expectation Failed',\n  '418': 'I\\'m a teapot',\n  '421': 'Misdirected Request',\n  '422': 'Unprocessable Entity',\n  '423': 'Locked',\n  '424': 'Failed Dependency',\n  '425': 'Too Early',\n  '426': 'Upgrade Required',\n  '428': 'Precondition Required',\n  '429': 'Too Many Requests',\n  '431': 'Request Header Fields Too Large',\n  '451': 'Unavailable For Legal Reasons',\n  '500': 'Internal Server Error',\n  '501': 'Not Implemented',\n  '502': 'Bad Gateway',\n  '503': 'Service Unavailable',\n  '504': 'Gateway Timeout',\n  '505': 'HTTP Version Not Supported',\n  '506': 'Variant Also Negotiates',\n  '507': 'Insufficient Storage',\n  '508': 'Loop Detected',\n  '510': 'Not Extended',\n  '511': 'Network Authentication Required',\n};\n\nexport function statusText(status: number): string {\n  return STATUS_TEXTS[String(status)] || 'Unknown';\n}\n\nexport function singleHeader(name: string, value: string): HeadersArray {\n  return [{ name, value }];\n}\n\nexport function mergeHeaders(headers: (HeadersArray | undefined | null)[]): HeadersArray {\n  const lowerCaseToValue = new Map<string, string>();\n  const lowerCaseToOriginalCase = new Map<string, string>();\n  for (const h of headers) {\n    if (!h)\n      continue;\n    for (const { name, value } of h) {\n      const lower = name.toLowerCase();\n      lowerCaseToOriginalCase.set(lower, name);\n      lowerCaseToValue.set(lower, value);\n    }\n  }\n  const result: HeadersArray = [];\n  for (const [lower, value] of lowerCaseToValue)\n    result.push({ name: lowerCaseToOriginalCase.get(lower)!, value });\n  return result;\n}\n"],
  "mappings": "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",
  "names": ["statusText"]
}
