{
  "version": 3,
  "sources": ["../../src/server/types.ts"],
  "sourcesContent": ["/**\n * Copyright 2018 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { HeadersArray, Point, Size } from '../utils/isomorphic/types';\nexport type { HeadersArray, Point, Quad, Rect, Size } from '../utils/isomorphic/types';\nimport type * as channels from '@protocol/channels';\n\nexport type StrictOptions = {\n  strict?: boolean,\n};\n\nexport type QueryOnSelectorOptions = StrictOptions;\n\nexport type WaitForElementOptions = StrictOptions & { state?: 'attached' | 'detached' | 'visible' | 'hidden' } & { omitReturnValue?: boolean };\n\nexport type LifecycleEvent = 'load' | 'domcontentloaded' | 'networkidle' | 'commit';\nexport const kLifecycleEvents: Set<LifecycleEvent> = new Set(['load', 'domcontentloaded', 'networkidle', 'commit']);\n\nexport type NavigateOptions = {\n  waitUntil?: LifecycleEvent,\n};\n\nexport type CommonActionOptions = StrictOptions & {\n  force?: boolean,\n};\n\nexport type PointerActionWaitOptions = CommonActionOptions & {\n  trial?: boolean;\n};\n\nexport type PageScreencastOptions = {\n  width: number,\n  height: number,\n  outputFile: string,\n};\n\nexport type Credentials = {\n  username: string;\n  password: string;\n  origin?: string;\n  sendImmediately?: boolean;\n};\n\nexport type Geolocation = {\n  longitude: number;\n  latitude: number;\n  accuracy?: number;\n};\n\nexport type SelectOption = {\n  value?: string;\n  label?: string;\n  index?: number;\n};\n\nexport type FilePayload = {\n  name: string,\n  mimeType: string,\n  buffer: string,\n  lastModifiedMs?: number,\n};\n\nexport type MediaType = 'screen' | 'print' | 'no-override';\n\nexport type ColorScheme = 'dark' | 'light' | 'no-preference' | 'no-override';\n\nexport type ReducedMotion = 'no-preference' | 'reduce' | 'no-override';\n\nexport type ForcedColors = 'active' | 'none' | 'no-override';\n\nexport type Contrast = 'no-preference' | 'more' | 'no-override';\n\nexport type DeviceDescriptor = {\n  userAgent: string,\n  viewport: Size,\n  deviceScaleFactor: number,\n  isMobile: boolean,\n  hasTouch: boolean,\n  defaultBrowserType: 'chromium' | 'firefox' | 'webkit'\n};\nexport type Devices = { [name: string]: DeviceDescriptor };\n\nexport type ProxySettings = {\n  server: string,\n  bypass?: string,\n  username?: string,\n  password?: string\n};\n\nexport type KeyboardModifier = 'Alt' | 'Control' | 'Meta' | 'Shift';\nexport type SmartKeyboardModifier = KeyboardModifier |  'ControlOrMeta';\nexport type MouseButton = 'left' | 'right' | 'middle';\n\nexport type PointerActionOptions = {\n  modifiers?: SmartKeyboardModifier[];\n  position?: Point;\n};\n\nexport type DragActionOptions = {\n  sourcePosition?: Point;\n  targetPosition?: Point;\n};\n\n\nexport type MouseClickOptions = PointerActionOptions & {\n  delay?: number;\n  button?: MouseButton;\n  clickCount?: number;\n};\n\nexport type MouseMultiClickOptions = PointerActionOptions & {\n  delay?: number;\n  button?: MouseButton;\n};\n\nexport type World = 'main' | 'utility';\n\nexport type GotoOptions = NavigateOptions & {\n  referer?: string,\n};\n\nexport type NormalizedFulfillResponse = {\n  status: number,\n  headers: HeadersArray,\n  body: string,\n  isBase64: boolean,\n};\n\nexport type NormalizedContinueOverrides = {\n  url?: string,\n  method?: string,\n  headers?: HeadersArray,\n  postData?: Buffer,\n  isFallback: boolean,\n};\n\nexport type EmulatedSize = { viewport: Size, screen: Size };\n\nexport type LaunchOptions = Omit<channels.BrowserTypeLaunchParams, 'timeout'> & {\n  cdpPort?: number,\n  proxyOverride?: ProxySettings,\n  assistantMode?: boolean,\n  socksProxyPort?: number,\n};\n\nexport type BrowserContextOptions = channels.BrowserNewContextOptions & {\n  proxyOverride?: ProxySettings;\n  internalIgnoreHTTPSErrors?: boolean;\n};\n\nexport type ProtocolLogger = (direction: 'send' | 'receive', message: object) => void;\n\nexport type ConsoleMessageLocation = {\n  url: string,\n  lineNumber: number,\n  columnNumber: number,\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BO,MAAM,mBAAwC,oBAAI,IAAI,CAAC,QAAQ,oBAAoB,eAAe,QAAQ,CAAC;",
  "names": []
}
