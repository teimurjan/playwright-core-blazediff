{
  "version": 3,
  "sources": ["../../../src/server/webkit/wkInput.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isString } from '../../utils';\nimport * as input from '../input';\nimport { macEditingCommands } from '../macEditingCommands';\n\nimport type * as types from '../types';\nimport type { WKSession } from './wkConnection';\nimport type { Page } from '../page';\nimport type { Progress } from '../progress';\n\nfunction toModifiersMask(modifiers: Set<types.KeyboardModifier>): number {\n  // From Source/WebKit/Shared/WebEvent.h\n  let mask = 0;\n  if (modifiers.has('Shift'))\n    mask |= 1;\n  if (modifiers.has('Control'))\n    mask |= 2;\n  if (modifiers.has('Alt'))\n    mask |= 4;\n  if (modifiers.has('Meta'))\n    mask |= 8;\n  return mask;\n}\n\nfunction toButtonsMask(buttons: Set<types.MouseButton>): number {\n  let mask = 0;\n  if (buttons.has('left'))\n    mask |= 1;\n  if (buttons.has('right'))\n    mask |= 2;\n  if (buttons.has('middle'))\n    mask |= 4;\n  return mask;\n}\n\nexport class RawKeyboardImpl implements input.RawKeyboard {\n  private readonly _pageProxySession: WKSession;\n  private _session?: WKSession;\n\n  constructor(session: WKSession) {\n    this._pageProxySession = session;\n  }\n\n  setSession(session: WKSession) {\n    this._session = session;\n  }\n\n  async keydown(progress: Progress, modifiers: Set<types.KeyboardModifier>, keyName: string, description: input.KeyDescription, autoRepeat: boolean): Promise<void> {\n    const parts = [];\n    for (const modifier of (['Shift', 'Control', 'Alt', 'Meta']) as types.KeyboardModifier[]) {\n      if (modifiers.has(modifier))\n        parts.push(modifier);\n    }\n    const { code, keyCode, key, text } = description;\n    parts.push(code);\n    const shortcut = parts.join('+');\n    let commands = macEditingCommands[shortcut];\n    if (isString(commands))\n      commands = [commands];\n    await progress.race(this._pageProxySession.send('Input.dispatchKeyEvent', {\n      type: 'keyDown',\n      modifiers: toModifiersMask(modifiers),\n      windowsVirtualKeyCode: keyCode,\n      code,\n      key,\n      text,\n      unmodifiedText: text,\n      autoRepeat,\n      macCommands: commands,\n      isKeypad: description.location === input.keypadLocation\n    }));\n  }\n\n  async keyup(progress: Progress, modifiers: Set<types.KeyboardModifier>, keyName: string, description: input.KeyDescription): Promise<void> {\n    const { code, key } = description;\n    await progress.race(this._pageProxySession.send('Input.dispatchKeyEvent', {\n      type: 'keyUp',\n      modifiers: toModifiersMask(modifiers),\n      key,\n      windowsVirtualKeyCode: description.keyCode,\n      code,\n      isKeypad: description.location === input.keypadLocation\n    }));\n  }\n\n  async sendText(progress: Progress, text: string): Promise<void> {\n    await progress.race(this._session!.send('Page.insertText', { text }));\n  }\n}\n\nexport class RawMouseImpl implements input.RawMouse {\n  private readonly _pageProxySession: WKSession;\n  private _session?: WKSession;\n  private _page?: Page;\n\n  constructor(session: WKSession) {\n    this._pageProxySession = session;\n  }\n\n  setSession(session: WKSession) {\n    this._session = session;\n  }\n\n  async move(progress: Progress, x: number, y: number, button: types.MouseButton | 'none', buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, forClick: boolean): Promise<void> {\n    await progress.race(this._pageProxySession.send('Input.dispatchMouseEvent', {\n      type: 'move',\n      button,\n      buttons: toButtonsMask(buttons),\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers)\n    }));\n  }\n\n  async down(progress: Progress, x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void> {\n    await progress.race(this._pageProxySession.send('Input.dispatchMouseEvent', {\n      type: 'down',\n      button,\n      buttons: toButtonsMask(buttons),\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers),\n      clickCount\n    }));\n  }\n\n  async up(progress: Progress, x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void> {\n    await progress.race(this._pageProxySession.send('Input.dispatchMouseEvent', {\n      type: 'up',\n      button,\n      buttons: toButtonsMask(buttons),\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers),\n      clickCount\n    }));\n  }\n\n  async wheel(progress: Progress, x: number, y: number, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, deltaX: number, deltaY: number): Promise<void> {\n    if (this._page?.browserContext._options.isMobile)\n      throw new Error('Mouse wheel is not supported in mobile WebKit');\n    await this._session!.send('Page.updateScrollingState');\n    // Wheel events hit the compositor first, so wait one frame for it to be synced.\n    await progress.race(this._page!.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, { world: 'utility' }));\n    await progress.race(this._pageProxySession.send('Input.dispatchWheelEvent', {\n      x,\n      y,\n      deltaX,\n      deltaY,\n      modifiers: toModifiersMask(modifiers),\n    }));\n  }\n\n  setPage(page: Page) {\n    this._page = page;\n  }\n}\n\nexport class RawTouchscreenImpl implements input.RawTouchscreen {\n  private readonly _pageProxySession: WKSession;\n\n  constructor(session: WKSession) {\n    this._pageProxySession = session;\n  }\n\n  async tap(progress: Progress, x: number, y: number, modifiers: Set<types.KeyboardModifier>) {\n    await progress.race(this._pageProxySession.send('Input.dispatchTapEvent', {\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers),\n    }));\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
