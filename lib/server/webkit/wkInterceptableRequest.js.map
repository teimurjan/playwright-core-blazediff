{
  "version": 3,
  "sources": ["../../../src/server/webkit/wkInterceptableRequest.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, headersArrayToObject, headersObjectToArray } from '../../utils';\nimport * as network from '../network';\n\nimport type * as frames from '../frames';\nimport type * as types from '../types';\nimport type { Protocol } from './protocol';\nimport type { WKSession } from './wkConnection';\n\n\nconst errorReasons: { [reason: string]: Protocol.Network.ResourceErrorType } = {\n  'aborted': 'Cancellation',\n  'accessdenied': 'AccessControl',\n  'addressunreachable': 'General',\n  'blockedbyclient': 'Cancellation',\n  'blockedbyresponse': 'General',\n  'connectionaborted': 'General',\n  'connectionclosed': 'General',\n  'connectionfailed': 'General',\n  'connectionrefused': 'General',\n  'connectionreset': 'General',\n  'internetdisconnected': 'General',\n  'namenotresolved': 'General',\n  'timedout': 'Timeout',\n  'failed': 'General',\n};\n\nexport class WKInterceptableRequest {\n  private _session: WKSession;\n  private _requestId: string;\n  readonly request: network.Request;\n  _timestamp: number;\n  _wallTime: number;\n\n  constructor(session: WKSession, frame: frames.Frame, event: Protocol.Network.requestWillBeSentPayload, redirectedFrom: WKInterceptableRequest | null, documentId: string | undefined) {\n    this._session = session;\n    this._requestId = event.requestId;\n    const resourceType = event.type ? event.type.toLowerCase() : (redirectedFrom ? redirectedFrom.request.resourceType() : 'other');\n    let postDataBuffer = null;\n    this._timestamp = event.timestamp;\n    this._wallTime = event.walltime * 1000;\n    if (event.request.postData)\n      postDataBuffer = Buffer.from(event.request.postData, 'base64');\n    this.request = new network.Request(frame._page.browserContext, frame, null, redirectedFrom?.request || null, documentId, event.request.url,\n        resourceType, event.request.method, postDataBuffer, headersObjectToArray(event.request.headers));\n  }\n\n  adoptRequestFromNewProcess(newSession: WKSession, requestId: string) {\n    this._session = newSession;\n    this._requestId = requestId;\n  }\n\n  createResponse(responsePayload: Protocol.Network.Response): network.Response {\n    const getResponseBody = async () => {\n      const response = await this._session.send('Network.getResponseBody', { requestId: this._requestId });\n      return Buffer.from(response.body, response.base64Encoded ? 'base64' : 'utf8');\n    };\n    const timingPayload = responsePayload.timing;\n    const timing: network.ResourceTiming = {\n      startTime: this._wallTime,\n      domainLookupStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupStart) : -1,\n      domainLookupEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupEnd) : -1,\n      connectStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectStart) : -1,\n      secureConnectionStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.secureConnectionStart) : -1,\n      connectEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectEnd) : -1,\n      requestStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.requestStart) : -1,\n      responseStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.responseStart) : -1,\n    };\n    const setCookieSeparator = process.platform === 'darwin' ? ',' : 'playwright-set-cookie-separator';\n    const response = new network.Response(this.request, responsePayload.status, responsePayload.statusText, headersObjectToArray(responsePayload.headers, ',', setCookieSeparator), timing, getResponseBody, responsePayload.source === 'service-worker');\n\n    // No raw response headers in WebKit, use \"provisional\" ones.\n    response.setRawResponseHeaders(null);\n    // Transfer size is not available in WebKit.\n    response.setTransferSize(null);\n\n    if (responsePayload.requestHeaders && Object.keys(responsePayload.requestHeaders).length) {\n      const headers = { ...responsePayload.requestHeaders };\n      if (!headers['host'])\n        headers['Host'] = new URL(this.request.url()).host;\n      this.request.setRawRequestHeaders(headersObjectToArray(headers));\n    } else {\n      // No raw headers available, use provisional ones.\n      this.request.setRawRequestHeaders(null);\n    }\n    return response;\n  }\n}\n\nexport class WKRouteImpl implements network.RouteDelegate {\n  private readonly _session: WKSession;\n  private readonly _requestId: string;\n\n  constructor(session: WKSession, requestId: string) {\n    this._session = session;\n    this._requestId = requestId;\n  }\n\n  async abort(errorCode: string) {\n    const errorType = errorReasons[errorCode];\n    assert(errorType, 'Unknown error code: ' + errorCode);\n    // In certain cases, protocol will return error if the request was already canceled\n    // or the page was closed. We should tolerate these errors.\n    await this._session.sendMayFail('Network.interceptRequestWithError', { requestId: this._requestId, errorType });\n  }\n\n  async fulfill(response: types.NormalizedFulfillResponse) {\n    if (300 <= response.status && response.status < 400)\n      throw new Error('Cannot fulfill with redirect status: ' + response.status);\n\n    // In certain cases, protocol will return error if the request was already canceled\n    // or the page was closed. We should tolerate these errors.\n    let mimeType = response.isBase64 ? 'application/octet-stream' : 'text/plain';\n    const headers = headersArrayToObject(response.headers, true /* lowerCase */);\n    const contentType = headers['content-type'];\n    if (contentType)\n      mimeType = contentType.split(';')[0].trim();\n\n    await this._session.sendMayFail('Network.interceptRequestWithResponse', {\n      requestId: this._requestId,\n      status: response.status,\n      statusText: network.statusText(response.status),\n      mimeType,\n      headers,\n      base64Encoded: response.isBase64,\n      content: response.body\n    });\n  }\n\n  async continue(overrides: types.NormalizedContinueOverrides) {\n    // In certain cases, protocol will return error if the request was already canceled\n    // or the page was closed. We should tolerate these errors.\n    await this._session.sendMayFail('Network.interceptWithRequest', {\n      requestId: this._requestId,\n      url: overrides.url,\n      method: overrides.method,\n      headers: overrides.headers ? headersArrayToObject(overrides.headers, false /* lowerCase */) : undefined,\n      postData: overrides.postData ? Buffer.from(overrides.postData).toString('base64') : undefined\n    });\n  }\n}\n\nfunction wkMillisToRoundishMillis(value: number): number {\n  // WebKit uses -1000 for unavailable.\n  if (value === -1000)\n    return -1;\n\n  // WebKit has a bug, instead of -1 it sends -1000 to be in ms.\n  if (value <= 0) {\n    // DNS can start before request start on Mac Network Stack\n    return -1;\n  }\n\n  return ((value * 1000) | 0) / 1000;\n}\n"],
  "mappings": "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",
  "names": ["response"]
}
