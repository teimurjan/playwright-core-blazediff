{
  "version": 3,
  "sources": ["../../../src/server/webkit/wkBrowser.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../../utils';\nimport { Browser } from '../browser';\nimport { BrowserContext, verifyGeolocation } from '../browserContext';\nimport * as network from '../network';\nimport { WKConnection, WKSession, kPageProxyMessageReceived } from './wkConnection';\nimport { WKPage } from './wkPage';\nimport { TargetClosedError } from '../errors';\n\nimport type { BrowserOptions } from '../browser';\nimport type { SdkObject } from '../instrumentation';\nimport type { InitScript, Page } from '../page';\nimport type { ConnectionTransport } from '../transport';\nimport type * as types from '../types';\nimport type { Protocol } from './protocol';\nimport type { PageProxyMessageReceivedPayload } from './wkConnection';\nimport type * as channels from '@protocol/channels';\n\nconst BROWSER_VERSION = '26.0';\nconst DEFAULT_USER_AGENT = `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/${BROWSER_VERSION} Safari/605.1.15`;\n\nexport class WKBrowser extends Browser {\n  private readonly _connection: WKConnection;\n  readonly _browserSession: WKSession;\n  readonly _contexts = new Map<string, WKBrowserContext>();\n  readonly _wkPages = new Map<string, WKPage>();\n\n  static async connect(parent: SdkObject, transport: ConnectionTransport, options: BrowserOptions): Promise<WKBrowser> {\n    const browser = new WKBrowser(parent, transport, options);\n    if ((options as any).__testHookOnConnectToBrowser)\n      await (options as any).__testHookOnConnectToBrowser();\n    const promises: Promise<any>[] = [\n      browser._browserSession.send('Playwright.enable'),\n    ];\n    if (options.persistent) {\n      options.persistent.userAgent ||= DEFAULT_USER_AGENT;\n      browser._defaultContext = new WKBrowserContext(browser, undefined, options.persistent);\n      promises.push((browser._defaultContext as WKBrowserContext)._initialize());\n    }\n    await Promise.all(promises);\n    return browser;\n  }\n\n  constructor(parent: SdkObject, transport: ConnectionTransport, options: BrowserOptions) {\n    super(parent, options);\n    this._connection = new WKConnection(transport, this._onDisconnect.bind(this), options.protocolLogger, options.browserLogsCollector);\n    this._browserSession = this._connection.browserSession;\n    this._browserSession.on('Playwright.pageProxyCreated', this._onPageProxyCreated.bind(this));\n    this._browserSession.on('Playwright.pageProxyDestroyed', this._onPageProxyDestroyed.bind(this));\n    this._browserSession.on('Playwright.provisionalLoadFailed', event => this._onProvisionalLoadFailed(event));\n    this._browserSession.on('Playwright.windowOpen', event => this._onWindowOpen(event));\n    this._browserSession.on('Playwright.downloadCreated', this._onDownloadCreated.bind(this));\n    this._browserSession.on('Playwright.downloadFilenameSuggested', this._onDownloadFilenameSuggested.bind(this));\n    this._browserSession.on('Playwright.downloadFinished', this._onDownloadFinished.bind(this));\n    this._browserSession.on('Playwright.screencastFinished', this._onScreencastFinished.bind(this));\n    this._browserSession.on(kPageProxyMessageReceived, this._onPageProxyMessageReceived.bind(this));\n  }\n\n  _onDisconnect() {\n    for (const wkPage of this._wkPages.values())\n      wkPage.didClose();\n    this._wkPages.clear();\n    for (const video of this._idToVideo.values())\n      video.artifact.reportFinished(new TargetClosedError());\n    this._idToVideo.clear();\n    this._didClose();\n  }\n\n  async doCreateNewContext(options: types.BrowserContextOptions): Promise<BrowserContext> {\n    const proxy = options.proxyOverride || options.proxy;\n    const createOptions = proxy ? {\n      // Enable socks5 hostname resolution on Windows.\n      // See https://github.com/microsoft/playwright/issues/20451\n      proxyServer: process.platform === 'win32' ? proxy.server.replace(/^socks5:\\/\\//, 'socks5h://') : proxy.server,\n      proxyBypassList: proxy.bypass\n    } : undefined;\n    const { browserContextId } = await this._browserSession.send('Playwright.createContext', createOptions);\n    options.userAgent = options.userAgent || DEFAULT_USER_AGENT;\n    const context = new WKBrowserContext(this, browserContextId, options);\n    await context._initialize();\n    this._contexts.set(browserContextId, context);\n    return context;\n  }\n\n  contexts(): BrowserContext[] {\n    return Array.from(this._contexts.values());\n  }\n\n  version(): string {\n    return BROWSER_VERSION;\n  }\n\n  userAgent(): string {\n    return DEFAULT_USER_AGENT;\n  }\n\n  _onDownloadCreated(payload: Protocol.Playwright.downloadCreatedPayload) {\n    const page = this._wkPages.get(payload.pageProxyId);\n    if (!page)\n      return;\n    // In some cases, e.g. blob url download, we receive only frameScheduledNavigation\n    // but no signals that the navigation was canceled and replaced by download. Fix it\n    // here by simulating cancelled provisional load which matches downloads from network.\n    //\n    // TODO: this is racy, because download might be unrelated any navigation, and we will\n    // abort navigation that is still running. We should be able to fix this by\n    // instrumenting policy decision start/proceed/cancel.\n    //\n    // Since https://commits.webkit.org/298732@main, WebKit doesn't provide frame id for\n    // navigations converted into downloads and the download has a fake frameId. We map it\n    // to the main frame.\n    let frameId = payload.frameId;\n    if (!page._page.frameManager.frame(frameId))\n      frameId = page._page.mainFrame()._id;\n    page._page.frameManager.frameAbortedNavigation(frameId, 'Download is starting');\n    let originPage = page._page.initializedOrUndefined();\n    // If it's a new window download, report it on the opener page.\n    if (!originPage) {\n      // Resume the page creation with an error. The page will automatically close right\n      // after the download begins.\n      page._firstNonInitialNavigationCommittedReject(new Error('Starting new page download'));\n      if (page._opener)\n        originPage = page._opener._page.initializedOrUndefined();\n    }\n    if (!originPage)\n      return;\n    this._downloadCreated(originPage, payload.uuid, payload.url);\n  }\n\n  _onDownloadFilenameSuggested(payload: Protocol.Playwright.downloadFilenameSuggestedPayload) {\n    this._downloadFilenameSuggested(payload.uuid, payload.suggestedFilename);\n  }\n\n  _onDownloadFinished(payload: Protocol.Playwright.downloadFinishedPayload) {\n    this._downloadFinished(payload.uuid, payload.error);\n  }\n\n  _onScreencastFinished(payload: Protocol.Playwright.screencastFinishedPayload) {\n    this._takeVideo(payload.screencastId)?.reportFinished();\n  }\n\n  _onPageProxyCreated(event: Protocol.Playwright.pageProxyCreatedPayload) {\n    const pageProxyId = event.pageProxyId;\n    let context: WKBrowserContext | null = null;\n    if (event.browserContextId) {\n      // FIXME: we don't know about the default context id, so assume that all targets from\n      // unknown contexts are created in the 'default' context which can in practice be represented\n      // by multiple actual contexts in WebKit. Solving this properly will require adding context\n      // lifecycle events.\n      context = this._contexts.get(event.browserContextId) || null;\n    }\n    if (!context)\n      context = this._defaultContext as WKBrowserContext;\n    if (!context)\n      return;\n    const pageProxySession = new WKSession(this._connection, pageProxyId, (message: any) => {\n      this._connection.rawSend({ ...message, pageProxyId });\n    });\n    const opener = event.openerId ? this._wkPages.get(event.openerId) : undefined;\n    const wkPage = new WKPage(context, pageProxySession, opener || null);\n    this._wkPages.set(pageProxyId, wkPage);\n  }\n\n  _onPageProxyDestroyed(event: Protocol.Playwright.pageProxyDestroyedPayload) {\n    const pageProxyId = event.pageProxyId;\n    const wkPage = this._wkPages.get(pageProxyId);\n    if (!wkPage)\n      return;\n    this._wkPages.delete(pageProxyId);\n    wkPage.didClose();\n  }\n\n  _onPageProxyMessageReceived(event: PageProxyMessageReceivedPayload) {\n    const wkPage = this._wkPages.get(event.pageProxyId);\n    if (!wkPage)\n      return;\n    wkPage.dispatchMessageToSession(event.message);\n  }\n\n  _onProvisionalLoadFailed(event: Protocol.Playwright.provisionalLoadFailedPayload) {\n    const wkPage = this._wkPages.get(event.pageProxyId);\n    if (!wkPage)\n      return;\n    wkPage.handleProvisionalLoadFailed(event);\n  }\n\n  _onWindowOpen(event: Protocol.Playwright.windowOpenPayload) {\n    const wkPage = this._wkPages.get(event.pageProxyId);\n    if (!wkPage)\n      return;\n    wkPage.handleWindowOpen(event);\n  }\n\n  isConnected(): boolean {\n    return !this._connection.isClosed();\n  }\n}\n\nexport class WKBrowserContext extends BrowserContext {\n  declare readonly _browser: WKBrowser;\n\n  constructor(browser: WKBrowser, browserContextId: string | undefined, options: types.BrowserContextOptions) {\n    super(browser, options, browserContextId);\n    this._validateEmulatedViewport(options.viewport);\n    this._authenticateProxyViaHeader();\n  }\n\n  override async _initialize() {\n    assert(!this._wkPages().length);\n    const browserContextId = this._browserContextId;\n    const promises: Promise<any>[] = [super._initialize()];\n    promises.push(this._browser._browserSession.send('Playwright.setDownloadBehavior', {\n      behavior: this._options.acceptDownloads === 'accept' ? 'allow' : 'deny',\n      downloadPath: this._browser.options.downloadsPath,\n      browserContextId\n    }));\n    if (this._options.ignoreHTTPSErrors || this._options.internalIgnoreHTTPSErrors)\n      promises.push(this._browser._browserSession.send('Playwright.setIgnoreCertificateErrors', { browserContextId, ignore: true }));\n    if (this._options.locale)\n      promises.push(this._browser._browserSession.send('Playwright.setLanguages', { browserContextId, languages: [this._options.locale] }));\n    if (this._options.geolocation)\n      promises.push(this.setGeolocation(this._options.geolocation));\n    if (this._options.offline)\n      promises.push(this.doUpdateOffline());\n    if (this._options.httpCredentials)\n      promises.push(this.setHTTPCredentials(this._options.httpCredentials));\n    await Promise.all(promises);\n  }\n\n  _wkPages(): WKPage[] {\n    return Array.from(this._browser._wkPages.values()).filter(wkPage => wkPage._browserContext === this);\n  }\n\n  override possiblyUninitializedPages(): Page[] {\n    return this._wkPages().map(wkPage => wkPage._page);\n  }\n\n  override async doCreateNewPage(): Promise<Page> {\n    const { pageProxyId } = await this._browser._browserSession.send('Playwright.createPage', { browserContextId: this._browserContextId });\n    return this._browser._wkPages.get(pageProxyId)!._page;\n  }\n\n  async doGetCookies(urls: string[]): Promise<channels.NetworkCookie[]> {\n    const { cookies } = await this._browser._browserSession.send('Playwright.getAllCookies', { browserContextId: this._browserContextId });\n    return network.filterCookies(cookies.map((c: channels.NetworkCookie) => {\n      const { name, value, domain, path, expires, httpOnly, secure, sameSite } = c;\n      const copy: channels.NetworkCookie = {\n        name,\n        value,\n        domain,\n        path,\n        expires: expires === -1 ? -1 : expires / 1000,\n        httpOnly,\n        secure,\n        sameSite,\n      };\n      return copy;\n    }), urls);\n  }\n\n  async addCookies(cookies: channels.SetNetworkCookie[]) {\n    const cc = network.rewriteCookies(cookies).map(c => {\n      const { name, value, domain, path, expires, httpOnly, secure, sameSite } = c;\n      const copy: Protocol.Playwright.SetCookieParam = {\n        name,\n        value,\n        domain: domain!,\n        path: path!,\n        expires: expires && expires !== -1 ? expires * 1000 : expires,\n        httpOnly,\n        secure,\n        sameSite,\n        session: expires === -1 || expires === undefined,\n      };\n      return copy;\n    });\n    await this._browser._browserSession.send('Playwright.setCookies', { cookies: cc, browserContextId: this._browserContextId });\n  }\n\n  async doClearCookies() {\n    await this._browser._browserSession.send('Playwright.deleteAllCookies', { browserContextId: this._browserContextId });\n  }\n\n  async doGrantPermissions(origin: string, permissions: string[]) {\n    await Promise.all(this.pages().map(page => (page.delegate as WKPage)._grantPermissions(origin, permissions)));\n  }\n\n  async doClearPermissions() {\n    await Promise.all(this.pages().map(page => (page.delegate as WKPage)._clearPermissions()));\n  }\n\n  async setGeolocation(geolocation?: types.Geolocation): Promise<void> {\n    verifyGeolocation(geolocation);\n    this._options.geolocation = geolocation;\n    const payload: any = geolocation ? { ...geolocation, timestamp: Date.now() } : undefined;\n    await this._browser._browserSession.send('Playwright.setGeolocationOverride', { browserContextId: this._browserContextId, geolocation: payload });\n  }\n\n  async doUpdateExtraHTTPHeaders(): Promise<void> {\n    for (const page of this.pages())\n      await (page.delegate as WKPage).updateExtraHTTPHeaders();\n  }\n\n  async setUserAgent(userAgent: string | undefined): Promise<void> {\n    this._options.userAgent = userAgent;\n    for (const page of this.pages())\n      await (page.delegate as WKPage).updateUserAgent();\n  }\n\n  async doUpdateOffline(): Promise<void> {\n    for (const page of this.pages())\n      await (page.delegate as WKPage).updateOffline();\n  }\n\n  async doSetHTTPCredentials(httpCredentials?: types.Credentials): Promise<void> {\n    this._options.httpCredentials = httpCredentials;\n    for (const page of this.pages())\n      await (page.delegate as WKPage).updateHttpCredentials();\n  }\n\n  async doAddInitScript(initScript: InitScript) {\n    for (const page of this.pages())\n      await (page.delegate as WKPage)._updateBootstrapScript();\n  }\n\n  async doRemoveInitScripts(initScripts: InitScript[]) {\n    for (const page of this.pages())\n      await (page.delegate as WKPage)._updateBootstrapScript();\n  }\n\n  async doUpdateRequestInterception(): Promise<void> {\n    for (const page of this.pages())\n      await (page.delegate as WKPage).updateRequestInterception();\n  }\n\n  override async doUpdateDefaultViewport() {\n    // No-op, because each page resets its own viewport.\n  }\n\n  override async doUpdateDefaultEmulatedMedia() {\n    // No-op, because each page resets its own color scheme.\n  }\n\n  override async doExposePlaywrightBinding() {\n    for (const page of this.pages())\n      await (page.delegate as WKPage).exposePlaywrightBinding();\n  }\n\n  onClosePersistent() {}\n\n  override async clearCache(): Promise<void> {\n    // We use ephemeral contexts so there is no disk cache.\n    await this._browser._browserSession.send('Playwright.clearMemoryCache', {\n      browserContextId: this._browserContextId!\n    });\n  }\n\n  async doClose(reason: string | undefined) {\n    if (!this._browserContextId) {\n      await Promise.all(this._wkPages().map(wkPage => wkPage._stopVideo()));\n      // Closing persistent context should close the browser.\n      await this._browser.close({ reason });\n    } else {\n      await this._browser._browserSession.send('Playwright.deleteContext', { browserContextId: this._browserContextId });\n      this._browser._contexts.delete(this._browserContextId);\n    }\n  }\n\n  async cancelDownload(uuid: string) {\n    await this._browser._browserSession.send('Playwright.cancelDownload', { uuid });\n  }\n\n  _validateEmulatedViewport(viewportSize: types.Size | undefined) {\n    if (!viewportSize)\n      return;\n    if (process.platform === 'win32' && this._browser.options.headful && (viewportSize.width < 250 || viewportSize.height < 240))\n      throw new Error(`WebKit on Windows has a minimal viewport of 250x240.`);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
