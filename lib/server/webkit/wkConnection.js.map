{
  "version": 3,
  "sources": ["../../../src/server/webkit/wkConnection.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\n\nimport { assert } from '../../utils';\nimport { debugLogger } from '../utils/debugLogger';\nimport { helper } from '../helper';\nimport { ProtocolError } from '../protocolError';\n\nimport type { ConnectionTransport, ProtocolRequest, ProtocolResponse } from '../transport';\nimport type { Protocol } from './protocol';\nimport type { RecentLogsCollector } from '../utils/debugLogger';\nimport type { ProtocolLogger } from '../types';\n\n\n// WKPlaywright uses this special id to issue Browser.close command which we\n// should ignore.\nexport const kBrowserCloseMessageId = -9999;\n\n// We emulate kPageProxyMessageReceived message to unify it with Browser.pageProxyCreated\n// and Browser.pageProxyDestroyed for easier management.\nexport const kPageProxyMessageReceived = Symbol('kPageProxyMessageReceived');\nexport type PageProxyMessageReceivedPayload = { pageProxyId: string, message: any };\n\nexport class WKConnection {\n  private readonly _transport: ConnectionTransport;\n  private readonly _onDisconnect: () => void;\n  private readonly _protocolLogger: ProtocolLogger;\n  private readonly _browserLogsCollector: RecentLogsCollector;\n  _browserDisconnectedLogs: string | undefined;\n  private _lastId = 0;\n  private _closed = false;\n  readonly browserSession: WKSession;\n\n  constructor(transport: ConnectionTransport, onDisconnect: () => void, protocolLogger: ProtocolLogger, browserLogsCollector: RecentLogsCollector) {\n    this._transport = transport;\n    this._onDisconnect = onDisconnect;\n    this._protocolLogger = protocolLogger;\n    this._browserLogsCollector = browserLogsCollector;\n    this.browserSession = new WKSession(this, '', (message: any) => {\n      this.rawSend(message);\n    });\n    this._transport.onmessage = this._dispatchMessage.bind(this);\n    // onclose should be set last, since it can be immediately called.\n    this._transport.onclose = this._onClose.bind(this);\n  }\n\n  nextMessageId(): number {\n    return ++this._lastId;\n  }\n\n  rawSend(message: ProtocolRequest) {\n    this._protocolLogger('send', message);\n    this._transport.send(message);\n  }\n\n  private _dispatchMessage(message: ProtocolResponse) {\n    this._protocolLogger('receive', message);\n    if (message.id === kBrowserCloseMessageId)\n      return;\n    if (message.pageProxyId) {\n      const payload: PageProxyMessageReceivedPayload = { message: message, pageProxyId: message.pageProxyId };\n      this.browserSession.dispatchMessage({ method: kPageProxyMessageReceived, params: payload });\n      return;\n    }\n    this.browserSession.dispatchMessage(message);\n  }\n\n  _onClose(reason?: string) {\n    this._closed = true;\n    this._transport.onmessage = undefined;\n    this._transport.onclose = undefined;\n    this._browserDisconnectedLogs = helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);\n    this.browserSession.dispose();\n    this._onDisconnect();\n  }\n\n  isClosed() {\n    return this._closed;\n  }\n\n  close() {\n    if (!this._closed)\n      this._transport.close();\n  }\n}\n\nexport class WKSession extends EventEmitter {\n  connection: WKConnection;\n  readonly sessionId: string;\n\n  private _disposed = false;\n  private readonly _rawSend: (message: any) => void;\n  private readonly _callbacks = new Map<number, { resolve: (o: any) => void, reject: (e: ProtocolError) => void, error: ProtocolError }>();\n  private _crashed: boolean = false;\n\n  override on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n\n  constructor(connection: WKConnection, sessionId: string, rawSend: (message: any) => void) {\n    super();\n    this.setMaxListeners(0);\n    this.connection = connection;\n    this.sessionId = sessionId;\n    this._rawSend = rawSend;\n\n    this.on = super.on;\n    this.off = super.removeListener;\n    this.addListener = super.addListener;\n    this.removeListener = super.removeListener;\n    this.once = super.once;\n  }\n\n  async send<T extends keyof Protocol.CommandParameters>(\n    method: T,\n    params?: Protocol.CommandParameters[T]\n  ): Promise<Protocol.CommandReturnValues[T]> {\n    if (this._crashed || this._disposed || this.connection._browserDisconnectedLogs)\n      throw new ProtocolError(this._crashed ? 'crashed' : 'closed', undefined, this.connection._browserDisconnectedLogs);\n    const id = this.connection.nextMessageId();\n    const messageObj = { id, method, params };\n    this._rawSend(messageObj);\n    return new Promise<Protocol.CommandReturnValues[T]>((resolve, reject) => {\n      this._callbacks.set(id, { resolve, reject, error: new ProtocolError('error', method) });\n    });\n  }\n\n  sendMayFail<T extends keyof Protocol.CommandParameters>(method: T, params?: Protocol.CommandParameters[T]): Promise<Protocol.CommandReturnValues[T] | void> {\n    return this.send(method, params).catch(error => debugLogger.log('error', error));\n  }\n\n  markAsCrashed() {\n    this._crashed = true;\n  }\n\n  isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  dispose() {\n    for (const callback of this._callbacks.values()) {\n      callback.error.type = this._crashed ? 'crashed' : 'closed';\n      callback.error.logs = this.connection._browserDisconnectedLogs;\n      callback.reject(callback.error);\n    }\n    this._callbacks.clear();\n    this._disposed = true;\n  }\n\n  dispatchMessage(object: any) {\n    if (object.id && this._callbacks.has(object.id)) {\n      const callback = this._callbacks.get(object.id)!;\n      this._callbacks.delete(object.id);\n      if (object.error) {\n        callback.error.setMessage(object.error.message);\n        callback.reject(callback.error);\n      } else {\n        callback.resolve(object.result);\n      }\n    } else if (object.id && !object.error) {\n      // Response might come after session has been disposed and rejected all callbacks.\n      assert(this.isDisposed());\n    } else {\n      Promise.resolve().then(() => this.emit(object.method, object.params));\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
