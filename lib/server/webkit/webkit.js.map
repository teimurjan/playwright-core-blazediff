{
  "version": 3,
  "sources": ["../../../src/server/webkit/webkit.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\n\nimport { kBrowserCloseMessageId } from './wkConnection';\nimport { wrapInASCIIBox } from '../utils/ascii';\nimport { BrowserType, kNoXServerRunningError } from '../browserType';\nimport { WKBrowser } from '../webkit/wkBrowser';\n\nimport type { BrowserOptions } from '../browser';\nimport type { SdkObject } from '../instrumentation';\nimport type { Env } from '../utils/processLauncher';\nimport type { ProtocolError } from '../protocolError';\nimport type { ConnectionTransport } from '../transport';\nimport type * as types from '../types';\n\nexport class WebKit extends BrowserType {\n  constructor(parent: SdkObject) {\n    super(parent, 'webkit');\n  }\n\n  override connectToTransport(transport: ConnectionTransport, options: BrowserOptions): Promise<WKBrowser> {\n    return WKBrowser.connect(this.attribution.playwright, transport, options);\n  }\n\n  override amendEnvironment(env: Env, userDataDir: string, isPersistent: boolean): Env {\n    return {\n      ...env,\n      CURL_COOKIE_JAR_PATH: process.platform === 'win32' && isPersistent ? path.join(userDataDir, 'cookiejar.db') : undefined,\n    };\n  }\n\n  override doRewriteStartupLog(error: ProtocolError): ProtocolError {\n    if (!error.logs)\n      return error;\n    if (error.logs.includes('Failed to open display') || error.logs.includes('cannot open display'))\n      error.logs = '\\n' + wrapInASCIIBox(kNoXServerRunningError, 1);\n    return error;\n  }\n\n  override attemptToGracefullyCloseBrowser(transport: ConnectionTransport): void {\n    // Note that it's fine to reuse the transport, since our connection ignores kBrowserCloseMessageId.\n    transport.send({ method: 'Playwright.close', params: {}, id: kBrowserCloseMessageId });\n  }\n\n  override defaultArgs(options: types.LaunchOptions, isPersistent: boolean, userDataDir: string): string[] {\n    const { args = [], headless } = options;\n    const userDataDirArg = args.find(arg => arg.startsWith('--user-data-dir'));\n    if (userDataDirArg)\n      throw this._createUserDataDirArgMisuseError('--user-data-dir');\n    if (args.find(arg => !arg.startsWith('-')))\n      throw new Error('Arguments can not specify page to be opened');\n    const webkitArguments = ['--inspector-pipe'];\n    if (process.platform === 'win32')\n      webkitArguments.push('--disable-accelerated-compositing');\n    if (headless)\n      webkitArguments.push('--headless');\n    if (isPersistent)\n      webkitArguments.push(`--user-data-dir=${userDataDir}`);\n    else\n      webkitArguments.push(`--no-startup-window`);\n    const proxy = options.proxyOverride || options.proxy;\n    if (proxy) {\n      if (process.platform === 'darwin') {\n        webkitArguments.push(`--proxy=${proxy.server}`);\n        if (proxy.bypass)\n          webkitArguments.push(`--proxy-bypass-list=${proxy.bypass}`);\n      } else if (process.platform === 'linux') {\n        webkitArguments.push(`--proxy=${proxy.server}`);\n        if (proxy.bypass)\n          webkitArguments.push(...proxy.bypass.split(',').map(t => `--ignore-host=${t}`));\n      } else if (process.platform === 'win32') {\n        // Enable socks5 hostname resolution on Windows. Workaround can be removed once fixed upstream.\n        // See https://github.com/microsoft/playwright/issues/20451\n        webkitArguments.push(`--curl-proxy=${proxy.server.replace(/^socks5:\\/\\//, 'socks5h://')}`);\n        if (proxy.bypass)\n          webkitArguments.push(`--curl-noproxy=${proxy.bypass}`);\n      }\n    }\n    webkitArguments.push(...args);\n    if (isPersistent)\n      webkitArguments.push('about:blank');\n    return webkitArguments;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,kBAAiB;AAEjB,0BAAuC;AACvC,mBAA+B;AAC/B,yBAAoD;AACpD,uBAA0B;AASnB,MAAM,eAAe,+BAAY;AAAA,EACtC,YAAY,QAAmB;AAC7B,UAAM,QAAQ,QAAQ;AAAA,EACxB;AAAA,EAES,mBAAmB,WAAgC,SAA6C;AACvG,WAAO,2BAAU,QAAQ,KAAK,YAAY,YAAY,WAAW,OAAO;AAAA,EAC1E;AAAA,EAES,iBAAiB,KAAU,aAAqB,cAA4B;AACnF,WAAO;AAAA,MACL,GAAG;AAAA,MACH,sBAAsB,QAAQ,aAAa,WAAW,eAAe,YAAAA,QAAK,KAAK,aAAa,cAAc,IAAI;AAAA,IAChH;AAAA,EACF;AAAA,EAES,oBAAoB,OAAqC;AAChE,QAAI,CAAC,MAAM;AACT,aAAO;AACT,QAAI,MAAM,KAAK,SAAS,wBAAwB,KAAK,MAAM,KAAK,SAAS,qBAAqB;AAC5F,YAAM,OAAO,WAAO,6BAAe,2CAAwB,CAAC;AAC9D,WAAO;AAAA,EACT;AAAA,EAES,gCAAgC,WAAsC;AAE7E,cAAU,KAAK,EAAE,QAAQ,oBAAoB,QAAQ,CAAC,GAAG,IAAI,2CAAuB,CAAC;AAAA,EACvF;AAAA,EAES,YAAY,SAA8B,cAAuB,aAA+B;AACvG,UAAM,EAAE,OAAO,CAAC,GAAG,SAAS,IAAI;AAChC,UAAM,iBAAiB,KAAK,KAAK,SAAO,IAAI,WAAW,iBAAiB,CAAC;AACzE,QAAI;AACF,YAAM,KAAK,iCAAiC,iBAAiB;AAC/D,QAAI,KAAK,KAAK,SAAO,CAAC,IAAI,WAAW,GAAG,CAAC;AACvC,YAAM,IAAI,MAAM,6CAA6C;AAC/D,UAAM,kBAAkB,CAAC,kBAAkB;AAC3C,QAAI,QAAQ,aAAa;AACvB,sBAAgB,KAAK,mCAAmC;AAC1D,QAAI;AACF,sBAAgB,KAAK,YAAY;AACnC,QAAI;AACF,sBAAgB,KAAK,mBAAmB,WAAW,EAAE;AAAA;AAErD,sBAAgB,KAAK,qBAAqB;AAC5C,UAAM,QAAQ,QAAQ,iBAAiB,QAAQ;AAC/C,QAAI,OAAO;AACT,UAAI,QAAQ,aAAa,UAAU;AACjC,wBAAgB,KAAK,WAAW,MAAM,MAAM,EAAE;AAC9C,YAAI,MAAM;AACR,0BAAgB,KAAK,uBAAuB,MAAM,MAAM,EAAE;AAAA,MAC9D,WAAW,QAAQ,aAAa,SAAS;AACvC,wBAAgB,KAAK,WAAW,MAAM,MAAM,EAAE;AAC9C,YAAI,MAAM;AACR,0BAAgB,KAAK,GAAG,MAAM,OAAO,MAAM,GAAG,EAAE,IAAI,OAAK,iBAAiB,CAAC,EAAE,CAAC;AAAA,MAClF,WAAW,QAAQ,aAAa,SAAS;AAGvC,wBAAgB,KAAK,gBAAgB,MAAM,OAAO,QAAQ,gBAAgB,YAAY,CAAC,EAAE;AACzF,YAAI,MAAM;AACR,0BAAgB,KAAK,kBAAkB,MAAM,MAAM,EAAE;AAAA,MACzD;AAAA,IACF;AACA,oBAAgB,KAAK,GAAG,IAAI;AAC5B,QAAI;AACF,sBAAgB,KAAK,aAAa;AACpC,WAAO;AAAA,EACT;AACF;",
  "names": ["path"]
}
