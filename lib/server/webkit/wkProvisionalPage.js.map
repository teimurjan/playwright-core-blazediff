{
  "version": 3,
  "sources": ["../../../src/server/webkit/wkProvisionalPage.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../../utils';\nimport { eventsHelper } from '../utils/eventsHelper';\n\nimport type { Protocol } from './protocol';\nimport type { WKSession } from './wkConnection';\nimport type { WKPage } from './wkPage';\nimport type { RegisteredListener } from '../utils/eventsHelper';\nimport type * as network from '../network';\n\nexport class WKProvisionalPage {\n  readonly _session: WKSession;\n  private readonly _wkPage: WKPage;\n  private _coopNavigationRequest: network.Request | undefined;\n  private _sessionListeners: RegisteredListener[] = [];\n  private _mainFrameId: string | null = null;\n  readonly initializationPromise: Promise<void>;\n\n  constructor(session: WKSession, page: WKPage) {\n    this._session = session;\n    this._wkPage = page;\n    // Cross-Origin-Opener-Policy (COOP) request starts in one process and once response headers\n    // have been received, continues in another.\n    //\n    // Network.requestWillBeSent and requestIntercepted (if intercepting) from the original web process\n    // will always come before a provisional page is created based on the response COOP headers.\n    // Thereafter we'll receive targetCreated (provisional) and later on in some order loadingFailed from the\n    // original process and requestWillBeSent from the provisional one. We should ignore loadingFailed\n    // as the original request continues in the provisional process. But if the provisional load is later\n    // canceled we should dispatch loadingFailed to the client.\n    this._coopNavigationRequest = page._page.mainFrame().pendingDocument()?.request;\n\n    const overrideFrameId = (handler: (p: any) => void) => {\n      return (payload: any) => {\n        // Pretend that the events happened in the same process.\n        if (payload.frameId)\n          payload.frameId = this._wkPage._page.frameManager.mainFrame()._id;\n        handler(payload);\n      };\n    };\n    const wkPage = this._wkPage;\n\n    this._sessionListeners = [\n      eventsHelper.addEventListener(session, 'Network.requestWillBeSent', overrideFrameId(e => this._onRequestWillBeSent(e))),\n      eventsHelper.addEventListener(session, 'Network.requestIntercepted', overrideFrameId(e => wkPage._onRequestIntercepted(session, e))),\n      eventsHelper.addEventListener(session, 'Network.responseReceived', overrideFrameId(e => wkPage._onResponseReceived(session, e))),\n      eventsHelper.addEventListener(session, 'Network.loadingFinished', overrideFrameId(e => this._onLoadingFinished(e))),\n      eventsHelper.addEventListener(session, 'Network.loadingFailed', overrideFrameId(e => this._onLoadingFailed(e))),\n    ];\n\n    this.initializationPromise = this._wkPage._initializeSession(session, true, ({ frameTree }) => this._handleFrameTree(frameTree));\n  }\n\n  coopNavigationRequest(): network.Request | undefined {\n    return this._coopNavigationRequest;\n  }\n\n  dispose() {\n    eventsHelper.removeEventListeners(this._sessionListeners);\n  }\n\n  commit() {\n    assert(this._mainFrameId);\n    this._wkPage._onFrameAttached(this._mainFrameId, null);\n  }\n\n  private _onRequestWillBeSent(event: Protocol.Network.requestWillBeSentPayload) {\n    if (this._coopNavigationRequest && this._coopNavigationRequest.url() === event.request.url) {\n      // If it's a continuation of the main frame navigation request after COOP headers were received,\n      // take over original request, and replace its request id with the new one.\n      this._wkPage._adoptRequestFromNewProcess(this._coopNavigationRequest, this._session, event.requestId);\n      // Simply ignore this event as it has already been dispatched from the original process\n      // and there will ne no requestIntercepted event from the provisional process as it resumes\n      // existing network load (that has already received response headers).\n      return;\n    }\n    this._wkPage._onRequestWillBeSent(this._session, event);\n  }\n\n  private _onLoadingFinished(event: Protocol.Network.loadingFinishedPayload): void {\n    this._coopNavigationRequest = undefined;\n    this._wkPage._onLoadingFinished(event);\n  }\n\n  private _onLoadingFailed(event: Protocol.Network.loadingFailedPayload) {\n    this._coopNavigationRequest = undefined;\n    this._wkPage._onLoadingFailed(this._session, event);\n  }\n\n  private _handleFrameTree(frameTree: Protocol.Page.FrameResourceTree) {\n    assert(!frameTree.frame.parentId);\n    this._mainFrameId = frameTree.frame.id;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,mBAAuB;AACvB,0BAA6B;AAQtB,MAAM,kBAAkB;AAAA,EAQ7B,YAAY,SAAoB,MAAc;AAJ9C,SAAQ,oBAA0C,CAAC;AACnD,SAAQ,eAA8B;AAIpC,SAAK,WAAW;AAChB,SAAK,UAAU;AAUf,SAAK,yBAAyB,KAAK,MAAM,UAAU,EAAE,gBAAgB,GAAG;AAExE,UAAM,kBAAkB,CAAC,YAA8B;AACrD,aAAO,CAAC,YAAiB;AAEvB,YAAI,QAAQ;AACV,kBAAQ,UAAU,KAAK,QAAQ,MAAM,aAAa,UAAU,EAAE;AAChE,gBAAQ,OAAO;AAAA,MACjB;AAAA,IACF;AACA,UAAM,SAAS,KAAK;AAEpB,SAAK,oBAAoB;AAAA,MACvB,iCAAa,iBAAiB,SAAS,6BAA6B,gBAAgB,OAAK,KAAK,qBAAqB,CAAC,CAAC,CAAC;AAAA,MACtH,iCAAa,iBAAiB,SAAS,8BAA8B,gBAAgB,OAAK,OAAO,sBAAsB,SAAS,CAAC,CAAC,CAAC;AAAA,MACnI,iCAAa,iBAAiB,SAAS,4BAA4B,gBAAgB,OAAK,OAAO,oBAAoB,SAAS,CAAC,CAAC,CAAC;AAAA,MAC/H,iCAAa,iBAAiB,SAAS,2BAA2B,gBAAgB,OAAK,KAAK,mBAAmB,CAAC,CAAC,CAAC;AAAA,MAClH,iCAAa,iBAAiB,SAAS,yBAAyB,gBAAgB,OAAK,KAAK,iBAAiB,CAAC,CAAC,CAAC;AAAA,IAChH;AAEA,SAAK,wBAAwB,KAAK,QAAQ,mBAAmB,SAAS,MAAM,CAAC,EAAE,UAAU,MAAM,KAAK,iBAAiB,SAAS,CAAC;AAAA,EACjI;AAAA,EAEA,wBAAqD;AACnD,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,UAAU;AACR,qCAAa,qBAAqB,KAAK,iBAAiB;AAAA,EAC1D;AAAA,EAEA,SAAS;AACP,6BAAO,KAAK,YAAY;AACxB,SAAK,QAAQ,iBAAiB,KAAK,cAAc,IAAI;AAAA,EACvD;AAAA,EAEQ,qBAAqB,OAAkD;AAC7E,QAAI,KAAK,0BAA0B,KAAK,uBAAuB,IAAI,MAAM,MAAM,QAAQ,KAAK;AAG1F,WAAK,QAAQ,4BAA4B,KAAK,wBAAwB,KAAK,UAAU,MAAM,SAAS;AAIpG;AAAA,IACF;AACA,SAAK,QAAQ,qBAAqB,KAAK,UAAU,KAAK;AAAA,EACxD;AAAA,EAEQ,mBAAmB,OAAsD;AAC/E,SAAK,yBAAyB;AAC9B,SAAK,QAAQ,mBAAmB,KAAK;AAAA,EACvC;AAAA,EAEQ,iBAAiB,OAA8C;AACrE,SAAK,yBAAyB;AAC9B,SAAK,QAAQ,iBAAiB,KAAK,UAAU,KAAK;AAAA,EACpD;AAAA,EAEQ,iBAAiB,WAA4C;AACnE,6BAAO,CAAC,UAAU,MAAM,QAAQ;AAChC,SAAK,eAAe,UAAU,MAAM;AAAA,EACtC;AACF;",
  "names": []
}
