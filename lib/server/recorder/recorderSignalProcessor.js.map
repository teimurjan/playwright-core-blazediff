{
  "version": 3,
  "sources": ["../../../src/server/recorder/recorderSignalProcessor.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isUnderTest } from '../utils/debug';\nimport { monotonicTime } from '../../utils/isomorphic/time';\nimport { generateFrameSelector } from './recorderUtils';\n\nimport type { Signal } from '../../../../recorder/src/actions';\nimport type { Frame } from '../frames';\nimport type * as actions from '@recorder/actions';\n\nexport interface ProcessorDelegate {\n  addAction(actionInContext: actions.ActionInContext): void;\n  addSignal(signalInContext: actions.SignalInContext): void;\n}\n\nexport class RecorderSignalProcessor {\n  private _delegate: ProcessorDelegate;\n  private _lastAction: actions.ActionInContext | null = null;\n\n  constructor(actionSink: ProcessorDelegate) {\n    this._delegate = actionSink;\n  }\n\n  addAction(actionInContext: actions.ActionInContext) {\n    this._lastAction = actionInContext;\n    this._delegate.addAction(actionInContext);\n  }\n\n  signal(pageAlias: string, frame: Frame, signal: Signal) {\n    const timestamp = monotonicTime();\n    if (signal.name === 'navigation' && frame._page.mainFrame() === frame) {\n      const lastAction = this._lastAction;\n      const signalThreshold = isUnderTest() ? 500 : 5000;\n\n      let generateGoto = false;\n      if (!lastAction)\n        generateGoto = true;\n      else if (lastAction.action.name !== 'click' && lastAction.action.name !== 'press' && lastAction.action.name !== 'fill')\n        generateGoto = true;\n      else if (timestamp - lastAction.startTime > signalThreshold)\n        generateGoto = true;\n\n      if (generateGoto) {\n        this.addAction({\n          frame: {\n            pageGuid: frame._page.guid,\n            pageAlias,\n            framePath: [],\n          },\n          action: {\n            name: 'navigate',\n            url: frame.url(),\n            signals: [],\n          },\n          startTime: timestamp,\n          endTime: timestamp,\n        });\n      }\n      return;\n    }\n\n    generateFrameSelector(frame).then(framePath => {\n      const signalInContext: actions.SignalInContext = {\n        frame: {\n          pageGuid: frame._page.guid,\n          pageAlias,\n          framePath,\n        },\n        signal,\n        timestamp,\n      };\n      this._delegate.addSignal(signalInContext);\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,mBAA4B;AAC5B,kBAA8B;AAC9B,2BAAsC;AAW/B,MAAM,wBAAwB;AAAA,EAInC,YAAY,YAA+B;AAF3C,SAAQ,cAA8C;AAGpD,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,UAAU,iBAA0C;AAClD,SAAK,cAAc;AACnB,SAAK,UAAU,UAAU,eAAe;AAAA,EAC1C;AAAA,EAEA,OAAO,WAAmB,OAAc,QAAgB;AACtD,UAAM,gBAAY,2BAAc;AAChC,QAAI,OAAO,SAAS,gBAAgB,MAAM,MAAM,UAAU,MAAM,OAAO;AACrE,YAAM,aAAa,KAAK;AACxB,YAAM,sBAAkB,0BAAY,IAAI,MAAM;AAE9C,UAAI,eAAe;AACnB,UAAI,CAAC;AACH,uBAAe;AAAA,eACR,WAAW,OAAO,SAAS,WAAW,WAAW,OAAO,SAAS,WAAW,WAAW,OAAO,SAAS;AAC9G,uBAAe;AAAA,eACR,YAAY,WAAW,YAAY;AAC1C,uBAAe;AAEjB,UAAI,cAAc;AAChB,aAAK,UAAU;AAAA,UACb,OAAO;AAAA,YACL,UAAU,MAAM,MAAM;AAAA,YACtB;AAAA,YACA,WAAW,CAAC;AAAA,UACd;AAAA,UACA,QAAQ;AAAA,YACN,MAAM;AAAA,YACN,KAAK,MAAM,IAAI;AAAA,YACf,SAAS,CAAC;AAAA,UACZ;AAAA,UACA,WAAW;AAAA,UACX,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AACA;AAAA,IACF;AAEA,oDAAsB,KAAK,EAAE,KAAK,eAAa;AAC7C,YAAM,kBAA2C;AAAA,QAC/C,OAAO;AAAA,UACL,UAAU,MAAM,MAAM;AAAA,UACtB;AAAA,UACA;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,WAAK,UAAU,UAAU,eAAe;AAAA,IAC1C,CAAC;AAAA,EACH;AACF;",
  "names": []
}
