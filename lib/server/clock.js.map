{
  "version": 3,
  "sources": ["../../src/server/clock.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as rawClockSource from '../generated/clockSource';\n\nimport type { BrowserContext } from './browserContext';\nimport type { InitScript } from './page';\nimport type { Progress } from '@protocol/progress';\n\nexport class Clock {\n  private _browserContext: BrowserContext;\n  private _initScripts: InitScript[] = [];\n\n  constructor(browserContext: BrowserContext) {\n    this._browserContext = browserContext;\n  }\n\n  async uninstall(progress: Progress) {\n    await progress.race(this._browserContext.removeInitScripts(this._initScripts));\n    this._initScripts = [];\n  }\n\n  async fastForward(progress: Progress, ticks: number | string) {\n    await this._installIfNeeded(progress);\n    const ticksMillis = parseTicks(ticks);\n    this._initScripts.push(await this._browserContext.addInitScript(progress, `globalThis.__pwClock.controller.log('fastForward', ${Date.now()}, ${ticksMillis})`));\n    await progress.race(this._evaluateInFrames(`globalThis.__pwClock.controller.fastForward(${ticksMillis})`));\n  }\n\n  async install(progress: Progress, time: number | string | undefined) {\n    await this._installIfNeeded(progress);\n    const timeMillis = time !== undefined ? parseTime(time) : Date.now();\n    this._initScripts.push(await this._browserContext.addInitScript(progress, `globalThis.__pwClock.controller.log('install', ${Date.now()}, ${timeMillis})`));\n    await progress.race(this._evaluateInFrames(`globalThis.__pwClock.controller.install(${timeMillis})`));\n  }\n\n  async pauseAt(progress: Progress, ticks: number | string) {\n    await this._installIfNeeded(progress);\n    const timeMillis = parseTime(ticks);\n    this._initScripts.push(await this._browserContext.addInitScript(progress, `globalThis.__pwClock.controller.log('pauseAt', ${Date.now()}, ${timeMillis})`));\n    await progress.race(this._evaluateInFrames(`globalThis.__pwClock.controller.pauseAt(${timeMillis})`));\n  }\n\n  resumeNoReply() {\n    if (!this._initScripts.length)\n      return;\n    const doResume = async () => {\n      this._initScripts.push(await this._browserContext.addInitScript(undefined, `globalThis.__pwClock.controller.log('resume', ${Date.now()})`));\n      await this._evaluateInFrames(`globalThis.__pwClock.controller.resume()`);\n    };\n    doResume().catch(() => {});\n  }\n\n  async resume(progress: Progress) {\n    await this._installIfNeeded(progress);\n    this._initScripts.push(await this._browserContext.addInitScript(progress, `globalThis.__pwClock.controller.log('resume', ${Date.now()})`));\n    await progress.race(this._evaluateInFrames(`globalThis.__pwClock.controller.resume()`));\n  }\n\n  async setFixedTime(progress: Progress, time: string | number) {\n    await this._installIfNeeded(progress);\n    const timeMillis = parseTime(time);\n    this._initScripts.push(await this._browserContext.addInitScript(progress, `globalThis.__pwClock.controller.log('setFixedTime', ${Date.now()}, ${timeMillis})`));\n    await progress.race(this._evaluateInFrames(`globalThis.__pwClock.controller.setFixedTime(${timeMillis})`));\n  }\n\n  async setSystemTime(progress: Progress, time: string | number) {\n    await this._installIfNeeded(progress);\n    const timeMillis = parseTime(time);\n    this._initScripts.push(await this._browserContext.addInitScript(progress, `globalThis.__pwClock.controller.log('setSystemTime', ${Date.now()}, ${timeMillis})`));\n    await progress.race(this._evaluateInFrames(`globalThis.__pwClock.controller.setSystemTime(${timeMillis})`));\n  }\n\n  async runFor(progress: Progress, ticks: number | string) {\n    await this._installIfNeeded(progress);\n    const ticksMillis = parseTicks(ticks);\n    this._initScripts.push(await this._browserContext.addInitScript(progress, `globalThis.__pwClock.controller.log('runFor', ${Date.now()}, ${ticksMillis})`));\n    await progress.race(this._evaluateInFrames(`globalThis.__pwClock.controller.runFor(${ticksMillis})`));\n  }\n\n  private async _installIfNeeded(progress: Progress) {\n    if (this._initScripts.length)\n      return;\n    const script = `(() => {\n      const module = {};\n      ${rawClockSource.source}\n      if (!globalThis.__pwClock)\n        globalThis.__pwClock = (module.exports.inject())(globalThis);\n    })();`;\n    const initScript = await this._browserContext.addInitScript(progress, script);\n    await progress.race(this._evaluateInFrames(script));\n    this._initScripts.push(initScript);\n  }\n\n  private async _evaluateInFrames(script: string) {\n    await this._browserContext.safeNonStallingEvaluateInAllFrames(script, 'main', { throwOnJSErrors: true });\n  }\n}\n\n/**\n * Parse strings like '01:10:00' (meaning 1 hour, 10 minutes, 0 seconds) into\n * number of milliseconds. This is used to support human-readable strings passed\n * to clock.tick()\n */\nfunction parseTicks(value: number | string): number {\n  if (typeof value === 'number')\n    return value;\n  if (!value)\n    return 0;\n  const str = value;\n\n  const strings = str.split(':');\n  const l = strings.length;\n  let i = l;\n  let ms = 0;\n  let parsed;\n\n  if (l > 3 || !/^(\\d\\d:){0,2}\\d\\d?$/.test(str)) {\n    throw new Error(\n        `Clock only understands numbers, 'mm:ss' and 'hh:mm:ss'`,\n    );\n  }\n\n  while (i--) {\n    parsed = parseInt(strings[i], 10);\n    if (parsed >= 60)\n      throw new Error(`Invalid time ${str}`);\n    ms += parsed * Math.pow(60, l - i - 1);\n  }\n\n  return ms * 1000;\n}\n\nfunction parseTime(epoch: string | number | undefined): number {\n  if (!epoch)\n    return 0;\n  if (typeof epoch === 'number')\n    return epoch;\n  const parsed = new Date(epoch);\n  if (!isFinite(parsed.getTime()))\n    throw new Error(`Invalid date: ${epoch}`);\n  return parsed.getTime();\n}\n"],
  "mappings": "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",
  "names": []
}
