{
  "version": 3,
  "sources": ["../../src/server/instrumentation.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\n\nimport { createGuid } from './utils/crypto';\n\nimport type { Browser } from './browser';\nimport type { BrowserContext } from './browserContext';\nimport type { BrowserType } from './browserType';\nimport type { Dialog } from './dialog';\nimport type { Download } from './download';\nimport type { APIRequestContext } from './fetch';\nimport type { Frame } from './frames';\nimport type { Page } from './page';\nimport type { Playwright } from './playwright';\nimport type { CallMetadata } from '@protocol/callMetadata';\nexport type { CallMetadata } from '@protocol/callMetadata';\nimport type { LogName } from './utils/debugLogger';\n\nexport type Attribution = {\n  playwright: Playwright;\n  browserType?: BrowserType;\n  browser?: Browser;\n  context?: BrowserContext | APIRequestContext;\n  page?: Page;\n  frame?: Frame;\n};\n\nexport class SdkObject extends EventEmitter {\n  guid: string;\n  attribution: Attribution;\n  instrumentation: Instrumentation;\n  logName?: LogName;\n\n  constructor(parent: SdkObject, guidPrefix?: string, guid?: string) {\n    super();\n    this.guid = guid || `${guidPrefix || ''}@${createGuid()}`;\n    this.setMaxListeners(0);\n    this.attribution = { ...parent.attribution };\n    this.instrumentation = parent.instrumentation;\n  }\n}\n\nexport function createRootSdkObject() {\n  const fakeParent = { attribution: {}, instrumentation: createInstrumentation() };\n  const root = new SdkObject(fakeParent as any);\n  root.guid = '';\n  return root;\n}\n\nexport interface Instrumentation {\n  addListener(listener: InstrumentationListener, context: BrowserContext | APIRequestContext | null): void;\n  removeListener(listener: InstrumentationListener): void;\n  onBeforeCall(sdkObject: SdkObject, metadata: CallMetadata): Promise<void>;\n  onBeforeInputAction(sdkObject: SdkObject, metadata: CallMetadata): Promise<void>;\n  onCallLog(sdkObject: SdkObject, metadata: CallMetadata, logName: string, message: string): void;\n  onAfterCall(sdkObject: SdkObject, metadata: CallMetadata): Promise<void>;\n  onPageOpen(page: Page): void;\n  onPageClose(page: Page): void;\n  onBrowserOpen(browser: Browser): void;\n  onBrowserClose(browser: Browser): void;\n  onDialog(dialog: Dialog): void;\n  onDownload(page: Page, download: Download): void;\n}\n\nexport interface InstrumentationListener {\n  onBeforeCall?(sdkObject: SdkObject, metadata: CallMetadata): Promise<void>;\n  onBeforeInputAction?(sdkObject: SdkObject, metadata: CallMetadata): Promise<void>;\n  onCallLog?(sdkObject: SdkObject, metadata: CallMetadata, logName: string, message: string): void;\n  onAfterCall?(sdkObject: SdkObject, metadata: CallMetadata): Promise<void>;\n  onPageOpen?(page: Page): void;\n  onPageClose?(page: Page): void;\n  onBrowserOpen?(browser: Browser): void;\n  onBrowserClose?(browser: Browser): void;\n  onDialog?(dialog: Dialog): void;\n  onDownload?(page: Page, download: Download): void;\n}\n\nexport function createInstrumentation(): Instrumentation {\n  const listeners = new Map<InstrumentationListener, BrowserContext | APIRequestContext | null>();\n  return new Proxy({}, {\n    get: (obj: any, prop: string | symbol) => {\n      if (typeof prop !== 'string')\n        return obj[prop];\n      if (prop === 'addListener')\n        return (listener: InstrumentationListener, context: BrowserContext | APIRequestContext | null) => listeners.set(listener, context);\n      if (prop === 'removeListener')\n        return (listener: InstrumentationListener) => listeners.delete(listener);\n      if (!prop.startsWith('on'))\n        return obj[prop];\n      return async (sdkObject: SdkObject, ...params: any[]) => {\n        for (const [listener, context] of listeners) {\n          if (!context || sdkObject.attribution.context === context)\n            await (listener as any)[prop]?.(sdkObject, ...params);\n        }\n      };\n    },\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,oBAA6B;AAE7B,oBAA2B;AAwBpB,MAAM,kBAAkB,2BAAa;AAAA,EAM1C,YAAY,QAAmB,YAAqB,MAAe;AACjE,UAAM;AACN,SAAK,OAAO,QAAQ,GAAG,cAAc,EAAE,QAAI,0BAAW,CAAC;AACvD,SAAK,gBAAgB,CAAC;AACtB,SAAK,cAAc,EAAE,GAAG,OAAO,YAAY;AAC3C,SAAK,kBAAkB,OAAO;AAAA,EAChC;AACF;AAEO,SAAS,sBAAsB;AACpC,QAAM,aAAa,EAAE,aAAa,CAAC,GAAG,iBAAiB,sBAAsB,EAAE;AAC/E,QAAM,OAAO,IAAI,UAAU,UAAiB;AAC5C,OAAK,OAAO;AACZ,SAAO;AACT;AA8BO,SAAS,wBAAyC;AACvD,QAAM,YAAY,oBAAI,IAAwE;AAC9F,SAAO,IAAI,MAAM,CAAC,GAAG;AAAA,IACnB,KAAK,CAAC,KAAU,SAA0B;AACxC,UAAI,OAAO,SAAS;AAClB,eAAO,IAAI,IAAI;AACjB,UAAI,SAAS;AACX,eAAO,CAAC,UAAmC,YAAuD,UAAU,IAAI,UAAU,OAAO;AACnI,UAAI,SAAS;AACX,eAAO,CAAC,aAAsC,UAAU,OAAO,QAAQ;AACzE,UAAI,CAAC,KAAK,WAAW,IAAI;AACvB,eAAO,IAAI,IAAI;AACjB,aAAO,OAAO,cAAyB,WAAkB;AACvD,mBAAW,CAAC,UAAU,OAAO,KAAK,WAAW;AAC3C,cAAI,CAAC,WAAW,UAAU,YAAY,YAAY;AAChD,kBAAO,SAAiB,IAAI,IAAI,WAAW,GAAG,MAAM;AAAA,QACxD;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AACH;",
  "names": []
}
