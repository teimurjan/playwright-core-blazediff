{
  "version": 3,
  "sources": ["../../src/server/errors.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { parseSerializedValue, serializeValue } from '../protocol/serializers';\nimport { isError } from '../utils';\n\nimport type { SerializedError } from '@protocol/channels';\n\nclass CustomError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nexport class TimeoutError extends CustomError {}\n\nexport class TargetClosedError extends CustomError {\n  constructor(cause?: string, logs?: string) {\n    super((cause || 'Target page, context or browser has been closed') + (logs || ''));\n  }\n}\n\nexport function isTargetClosedError(error: Error) {\n  return error instanceof TargetClosedError || error.name === 'TargetClosedError';\n}\n\nexport function serializeError(e: any): SerializedError {\n  if (isError(e))\n    return { error: { message: e.message, stack: e.stack, name: e.name } };\n  return { value: serializeValue(e, value => ({ fallThrough: value })) };\n}\n\nexport function parseError(error: SerializedError): Error {\n  if (!error.error) {\n    if (error.value === undefined)\n      throw new Error('Serialized error must have either an error or a value');\n    return parseSerializedValue(error.value, undefined);\n  }\n  const e = new Error(error.error.message);\n  e.stack = error.error.stack || '';\n  e.name = error.error.name;\n  return e;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,yBAAqD;AACrD,mBAAwB;AAIxB,MAAM,oBAAoB,MAAM;AAAA,EAC9B,YAAY,SAAiB;AAC3B,UAAM,OAAO;AACb,SAAK,OAAO,KAAK,YAAY;AAAA,EAC/B;AACF;AAEO,MAAM,qBAAqB,YAAY;AAAC;AAExC,MAAM,0BAA0B,YAAY;AAAA,EACjD,YAAY,OAAgB,MAAe;AACzC,WAAO,SAAS,sDAAsD,QAAQ,GAAG;AAAA,EACnF;AACF;AAEO,SAAS,oBAAoB,OAAc;AAChD,SAAO,iBAAiB,qBAAqB,MAAM,SAAS;AAC9D;AAEO,SAAS,eAAe,GAAyB;AACtD,UAAI,sBAAQ,CAAC;AACX,WAAO,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,OAAO,EAAE,OAAO,MAAM,EAAE,KAAK,EAAE;AACvE,SAAO,EAAE,WAAO,mCAAe,GAAG,YAAU,EAAE,aAAa,MAAM,EAAE,EAAE;AACvE;AAEO,SAAS,WAAW,OAA+B;AACxD,MAAI,CAAC,MAAM,OAAO;AAChB,QAAI,MAAM,UAAU;AAClB,YAAM,IAAI,MAAM,uDAAuD;AACzE,eAAO,yCAAqB,MAAM,OAAO,MAAS;AAAA,EACpD;AACA,QAAM,IAAI,IAAI,MAAM,MAAM,MAAM,OAAO;AACvC,IAAE,QAAQ,MAAM,MAAM,SAAS;AAC/B,IAAE,OAAO,MAAM,MAAM;AACrB,SAAO;AACT;",
  "names": []
}
