{
  "version": 3,
  "sources": ["../../../src/server/firefox/firefox.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport os from 'os';\nimport path from 'path';\n\nimport { FFBrowser } from './ffBrowser';\nimport { kBrowserCloseMessageId } from './ffConnection';\nimport { wrapInASCIIBox } from '../utils/ascii';\nimport { BrowserType, kNoXServerRunningError } from '../browserType';\nimport { ManualPromise } from '../../utils/isomorphic/manualPromise';\n\nimport type { BrowserOptions } from '../browser';\nimport type { SdkObject } from '../instrumentation';\nimport type { Env } from '../utils/processLauncher';\nimport type { ProtocolError } from '../protocolError';\nimport type { ConnectionTransport } from '../transport';\nimport type * as types from '../types';\nimport type { RecentLogsCollector } from '../utils/debugLogger';\n\nexport class Firefox extends BrowserType {\n  constructor(parent: SdkObject) {\n    super(parent, 'firefox');\n  }\n\n  override connectToTransport(transport: ConnectionTransport, options: BrowserOptions): Promise<FFBrowser> {\n    return FFBrowser.connect(this.attribution.playwright, transport, options);\n  }\n\n  override doRewriteStartupLog(error: ProtocolError): ProtocolError {\n    if (!error.logs)\n      return error;\n    // https://github.com/microsoft/playwright/issues/6500\n    if (error.logs.includes(`as root in a regular user's session is not supported.`))\n      error.logs = '\\n' + wrapInASCIIBox(`Firefox is unable to launch if the $HOME folder isn't owned by the current user.\\nWorkaround: Set the HOME=/root environment variable${process.env.GITHUB_ACTION ? ' in your GitHub Actions workflow file' : ''} when running Playwright.`, 1);\n    if (error.logs.includes('no DISPLAY environment variable specified'))\n      error.logs = '\\n' + wrapInASCIIBox(kNoXServerRunningError, 1);\n    return error;\n  }\n\n  override amendEnvironment(env: Env): Env {\n    if (!path.isAbsolute(os.homedir()))\n      throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${os.platform() === 'win32' ? 'USERPROFILE' : 'HOME'} to a relative path?`);\n    if (os.platform() === 'linux') {\n      // Always remove SNAP_NAME and SNAP_INSTANCE_NAME env variables since they\n      // confuse Firefox: in our case, builds never come from SNAP.\n      // See https://github.com/microsoft/playwright/issues/20555\n      return { ...env, SNAP_NAME: undefined, SNAP_INSTANCE_NAME: undefined };\n    }\n    return env;\n  }\n\n  override attemptToGracefullyCloseBrowser(transport: ConnectionTransport): void {\n    // Note that it's fine to reuse the transport, since our connection ignores kBrowserCloseMessageId.\n    const message = { method: 'Browser.close', params: {}, id: kBrowserCloseMessageId };\n    transport.send(message);\n  }\n\n  override defaultArgs(options: types.LaunchOptions, isPersistent: boolean, userDataDir: string): string[] {\n    const { args = [], headless } = options;\n    const userDataDirArg = args.find(arg => arg.startsWith('-profile') || arg.startsWith('--profile'));\n    if (userDataDirArg)\n      throw this._createUserDataDirArgMisuseError('--profile');\n    if (args.find(arg => arg.startsWith('-juggler')))\n      throw new Error('Use the port parameter instead of -juggler argument');\n    const firefoxArguments = ['-no-remote'];\n    if (headless) {\n      firefoxArguments.push('-headless');\n    } else {\n      firefoxArguments.push('-wait-for-browser');\n      firefoxArguments.push('-foreground');\n    }\n    firefoxArguments.push(`-profile`, userDataDir);\n    firefoxArguments.push('-juggler-pipe');\n    firefoxArguments.push(...args);\n    if (isPersistent)\n      firefoxArguments.push('about:blank');\n    else\n      firefoxArguments.push('-silent');\n    return firefoxArguments;\n  }\n\n  override waitForReadyState(options: types.LaunchOptions, browserLogsCollector: RecentLogsCollector): Promise<{ wsEndpoint?: string }> {\n    const result = new ManualPromise<{ wsEndpoint?: string }>();\n    browserLogsCollector.onMessage(message => {\n      if (message.includes('Juggler listening to the pipe'))\n        result.resolve({});\n    });\n    return result;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,gBAAe;AACf,kBAAiB;AAEjB,uBAA0B;AAC1B,0BAAuC;AACvC,mBAA+B;AAC/B,yBAAoD;AACpD,2BAA8B;AAUvB,MAAM,gBAAgB,+BAAY;AAAA,EACvC,YAAY,QAAmB;AAC7B,UAAM,QAAQ,SAAS;AAAA,EACzB;AAAA,EAES,mBAAmB,WAAgC,SAA6C;AACvG,WAAO,2BAAU,QAAQ,KAAK,YAAY,YAAY,WAAW,OAAO;AAAA,EAC1E;AAAA,EAES,oBAAoB,OAAqC;AAChE,QAAI,CAAC,MAAM;AACT,aAAO;AAET,QAAI,MAAM,KAAK,SAAS,uDAAuD;AAC7E,YAAM,OAAO,WAAO,6BAAe;AAAA,qDAAwI,QAAQ,IAAI,gBAAgB,0CAA0C,EAAE,6BAA6B,CAAC;AACnR,QAAI,MAAM,KAAK,SAAS,2CAA2C;AACjE,YAAM,OAAO,WAAO,6BAAe,2CAAwB,CAAC;AAC9D,WAAO;AAAA,EACT;AAAA,EAES,iBAAiB,KAAe;AACvC,QAAI,CAAC,YAAAA,QAAK,WAAW,UAAAC,QAAG,QAAQ,CAAC;AAC/B,YAAM,IAAI,MAAM,mEAAmE,UAAAA,QAAG,SAAS,MAAM,UAAU,gBAAgB,MAAM,sBAAsB;AAC7J,QAAI,UAAAA,QAAG,SAAS,MAAM,SAAS;AAI7B,aAAO,EAAE,GAAG,KAAK,WAAW,QAAW,oBAAoB,OAAU;AAAA,IACvE;AACA,WAAO;AAAA,EACT;AAAA,EAES,gCAAgC,WAAsC;AAE7E,UAAM,UAAU,EAAE,QAAQ,iBAAiB,QAAQ,CAAC,GAAG,IAAI,2CAAuB;AAClF,cAAU,KAAK,OAAO;AAAA,EACxB;AAAA,EAES,YAAY,SAA8B,cAAuB,aAA+B;AACvG,UAAM,EAAE,OAAO,CAAC,GAAG,SAAS,IAAI;AAChC,UAAM,iBAAiB,KAAK,KAAK,SAAO,IAAI,WAAW,UAAU,KAAK,IAAI,WAAW,WAAW,CAAC;AACjG,QAAI;AACF,YAAM,KAAK,iCAAiC,WAAW;AACzD,QAAI,KAAK,KAAK,SAAO,IAAI,WAAW,UAAU,CAAC;AAC7C,YAAM,IAAI,MAAM,qDAAqD;AACvE,UAAM,mBAAmB,CAAC,YAAY;AACtC,QAAI,UAAU;AACZ,uBAAiB,KAAK,WAAW;AAAA,IACnC,OAAO;AACL,uBAAiB,KAAK,mBAAmB;AACzC,uBAAiB,KAAK,aAAa;AAAA,IACrC;AACA,qBAAiB,KAAK,YAAY,WAAW;AAC7C,qBAAiB,KAAK,eAAe;AACrC,qBAAiB,KAAK,GAAG,IAAI;AAC7B,QAAI;AACF,uBAAiB,KAAK,aAAa;AAAA;AAEnC,uBAAiB,KAAK,SAAS;AACjC,WAAO;AAAA,EACT;AAAA,EAES,kBAAkB,SAA8B,sBAA6E;AACpI,UAAM,SAAS,IAAI,mCAAuC;AAC1D,yBAAqB,UAAU,aAAW;AACxC,UAAI,QAAQ,SAAS,+BAA+B;AAClD,eAAO,QAAQ,CAAC,CAAC;AAAA,IACrB,CAAC;AACD,WAAO;AAAA,EACT;AACF;",
  "names": ["path", "os"]
}
