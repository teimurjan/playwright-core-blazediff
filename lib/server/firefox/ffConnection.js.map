{
  "version": 3,
  "sources": ["../../../src/server/firefox/ffConnection.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\n\nimport { debugLogger } from '../utils/debugLogger';\nimport { helper } from '../helper';\nimport { ProtocolError } from '../protocolError';\n\nimport type { ConnectionTransport, ProtocolRequest, ProtocolResponse } from '../transport';\nimport type { Protocol } from './protocol';\nimport type { RecentLogsCollector } from '../utils/debugLogger';\nimport type { ProtocolLogger } from '../types';\n\n\nexport const ConnectionEvents = {\n  Disconnected: Symbol('Disconnected'),\n};\n\n// FFPlaywright uses this special id to issue Browser.close command which we\n// should ignore.\nexport const kBrowserCloseMessageId = -9999;\n\nexport class FFConnection extends EventEmitter {\n  private _lastId: number;\n  private _transport: ConnectionTransport;\n  private readonly _protocolLogger: ProtocolLogger;\n  private readonly _browserLogsCollector: RecentLogsCollector;\n  _browserDisconnectedLogs: string | undefined;\n  readonly rootSession: FFSession;\n  readonly _sessions: Map<string, FFSession>;\n  _closed: boolean;\n\n  constructor(transport: ConnectionTransport, protocolLogger: ProtocolLogger, browserLogsCollector: RecentLogsCollector) {\n    super();\n    this.setMaxListeners(0);\n    this._transport = transport;\n    this._protocolLogger = protocolLogger;\n    this._browserLogsCollector = browserLogsCollector;\n    this._lastId = 0;\n    this._sessions = new Map();\n    this._closed = false;\n    this.rootSession = new FFSession(this, '', message => this._rawSend(message));\n    this._sessions.set('', this.rootSession);\n\n    this._transport.onmessage = this._onMessage.bind(this);\n    // onclose should be set last, since it can be immediately called.\n    this._transport.onclose = this._onClose.bind(this);\n  }\n\n  nextMessageId(): number {\n    return ++this._lastId;\n  }\n\n  _rawSend(message: ProtocolRequest) {\n    this._protocolLogger('send', message);\n    this._transport.send(message);\n  }\n\n  async _onMessage(message: ProtocolResponse) {\n    this._protocolLogger('receive', message);\n    if (message.id === kBrowserCloseMessageId)\n      return;\n    const session = this._sessions.get(message.sessionId || '');\n    if (session)\n      session.dispatchMessage(message);\n  }\n\n  _onClose(reason?: string) {\n    this._closed = true;\n    this._transport.onmessage = undefined;\n    this._transport.onclose = undefined;\n    this._browserDisconnectedLogs = helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);\n    this.rootSession.dispose();\n    Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));\n  }\n\n  close() {\n    if (!this._closed)\n      this._transport.close();\n  }\n\n  createSession(sessionId: string): FFSession {\n    const session = new FFSession(this, sessionId, message => this._rawSend({ ...message, sessionId }));\n    this._sessions.set(sessionId, session);\n    return session;\n  }\n}\n\nexport class FFSession extends EventEmitter {\n  _connection: FFConnection;\n  _disposed = false;\n  private _callbacks: Map<number, { resolve: Function, reject: Function, error: ProtocolError }>;\n  private _sessionId: string;\n  private _rawSend: (message: any) => void;\n  private _crashed: boolean = false;\n  override on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  override once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n\n  constructor(connection: FFConnection, sessionId: string, rawSend: (message: any) => void) {\n    super();\n    this.setMaxListeners(0);\n    this._callbacks = new Map();\n    this._connection = connection;\n    this._sessionId = sessionId;\n    this._rawSend = rawSend;\n\n    this.on = super.on;\n    this.addListener = super.addListener;\n    this.off = super.removeListener;\n    this.removeListener = super.removeListener;\n    this.once = super.once;\n  }\n\n  markAsCrashed() {\n    this._crashed = true;\n  }\n\n  async send<T extends keyof Protocol.CommandParameters>(\n    method: T,\n    params?: Protocol.CommandParameters[T]\n  ): Promise<Protocol.CommandReturnValues[T]> {\n    if (this._crashed || this._disposed || this._connection._closed || this._connection._browserDisconnectedLogs)\n      throw new ProtocolError(this._crashed ? 'crashed' : 'closed', undefined, this._connection._browserDisconnectedLogs);\n    const id = this._connection.nextMessageId();\n    this._rawSend({ method, params, id });\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, { resolve, reject, error: new ProtocolError('error', method) });\n    });\n  }\n\n  sendMayFail<T extends keyof Protocol.CommandParameters>(method: T, params?: Protocol.CommandParameters[T]): Promise<Protocol.CommandReturnValues[T] | void> {\n    return this.send(method, params).catch(error => debugLogger.log('error', error));\n  }\n\n  dispatchMessage(object: ProtocolResponse) {\n    if (object.id) {\n      const callback = this._callbacks.get(object.id);\n      // Callbacks could be all rejected if someone has called `.dispose()`.\n      if (callback) {\n        this._callbacks.delete(object.id);\n        if (object.error) {\n          callback.error.setMessage(object.error.message);\n          callback.reject(callback.error);\n        } else {\n          callback.resolve(object.result);\n        }\n      }\n    } else {\n      Promise.resolve().then(() => this.emit(object.method!, object.params));\n    }\n  }\n\n  dispose() {\n    this._disposed = true;\n    this._connection._sessions.delete(this._sessionId);\n    for (const callback of this._callbacks.values()) {\n      callback.error.type = this._crashed ? 'crashed' : 'closed';\n      callback.error.logs = this._connection._browserDisconnectedLogs;\n      callback.reject(callback.error);\n    }\n    this._callbacks.clear();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
