{
  "version": 3,
  "sources": ["../../src/server/browser.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Artifact } from './artifact';\nimport { BrowserContext, validateBrowserContextOptions } from './browserContext';\nimport { Download } from './download';\nimport { SdkObject } from './instrumentation';\nimport { Page } from './page';\nimport { ClientCertificatesProxy } from './socksClientCertificatesInterceptor';\n\nimport type * as types from './types';\nimport type { ProxySettings } from './types';\nimport type { RecentLogsCollector } from './utils/debugLogger';\nimport type * as channels from '@protocol/channels';\nimport type { ChildProcess } from 'child_process';\nimport type { Language } from '../utils';\nimport type { Progress } from './progress';\n\n\nexport interface BrowserProcess {\n  onclose?: ((exitCode: number | null, signal: string | null) => void);\n  process?: ChildProcess;\n  kill(): Promise<void>;\n  close(): Promise<void>;\n}\n\nexport type BrowserOptions = {\n  name: string,\n  isChromium: boolean,\n  channel?: string,\n  artifactsDir: string;\n  downloadsPath: string,\n  tracesDir: string,\n  headful?: boolean,\n  persistent?: types.BrowserContextOptions,  // Undefined means no persistent context.\n  browserProcess: BrowserProcess,\n  customExecutablePath?: string;\n  proxy?: ProxySettings,\n  protocolLogger: types.ProtocolLogger,\n  browserLogsCollector: RecentLogsCollector,\n  slowMo?: number;\n  wsEndpoint?: string;  // Only there when connected over web socket.\n  sdkLanguage?: Language;\n  originalLaunchOptions: types.LaunchOptions;\n};\n\nexport abstract class Browser extends SdkObject {\n\n  static Events = {\n    Context: 'context',\n    Disconnected: 'disconnected',\n  };\n\n  readonly options: BrowserOptions;\n  private _downloads = new Map<string, Download>();\n  _defaultContext: BrowserContext | null = null;\n  private _startedClosing = false;\n  readonly _idToVideo = new Map<string, { context: BrowserContext, artifact: Artifact }>();\n  private _contextForReuse: { context: BrowserContext, hash: string } | undefined;\n  _closeReason: string | undefined;\n  _isCollocatedWithServer: boolean = true;\n\n  constructor(parent: SdkObject, options: BrowserOptions) {\n    super(parent, 'browser');\n    this.attribution.browser = this;\n    this.options = options;\n    this.instrumentation.onBrowserOpen(this);\n  }\n\n  abstract doCreateNewContext(options: types.BrowserContextOptions): Promise<BrowserContext>;\n  abstract contexts(): BrowserContext[];\n  abstract isConnected(): boolean;\n  abstract version(): string;\n  abstract userAgent(): string;\n\n  sdkLanguage() {\n    return this.options.sdkLanguage || this.attribution.playwright.options.sdkLanguage;\n  }\n\n  async newContext(progress: Progress, options: types.BrowserContextOptions): Promise<BrowserContext> {\n    validateBrowserContextOptions(options, this.options);\n    let clientCertificatesProxy: ClientCertificatesProxy | undefined;\n    let context: BrowserContext | undefined;\n    try {\n      if (options.clientCertificates?.length) {\n        clientCertificatesProxy = await ClientCertificatesProxy.create(progress, options);\n        options = { ...options };\n        options.proxyOverride = clientCertificatesProxy.proxySettings();\n        options.internalIgnoreHTTPSErrors = true;\n      }\n      context = await progress.race(this.doCreateNewContext(options));\n      context._clientCertificatesProxy = clientCertificatesProxy;\n      if ((options as any).__testHookBeforeSetStorageState)\n        await progress.race((options as any).__testHookBeforeSetStorageState());\n      await context.setStorageState(progress, options.storageState, 'initial');\n      this.emit(Browser.Events.Context, context);\n      return context;\n    } catch (error) {\n      await context?.close({ reason: 'Failed to create context' }).catch(() => {});\n      await clientCertificatesProxy?.close().catch(() => {});\n      throw error;\n    }\n  }\n\n  async newContextForReuse(progress: Progress, params: channels.BrowserNewContextForReuseParams): Promise<BrowserContext> {\n    const hash = BrowserContext.reusableContextHash(params);\n    if (!this._contextForReuse || hash !== this._contextForReuse.hash || !this._contextForReuse.context.canResetForReuse()) {\n      if (this._contextForReuse)\n        await this._contextForReuse.context.close({ reason: 'Context reused' });\n      this._contextForReuse = { context: await this.newContext(progress, params), hash };\n      return this._contextForReuse.context;\n    }\n    await this._contextForReuse.context.resetForReuse(progress, params);\n    return this._contextForReuse.context;\n  }\n\n  contextForReuse() {\n    return this._contextForReuse?.context;\n  }\n\n  _downloadCreated(page: Page, uuid: string, url: string, suggestedFilename?: string) {\n    const download = new Download(page, this.options.downloadsPath || '', uuid, url, suggestedFilename);\n    this._downloads.set(uuid, download);\n  }\n\n  _downloadFilenameSuggested(uuid: string, suggestedFilename: string) {\n    const download = this._downloads.get(uuid);\n    if (!download)\n      return;\n    download._filenameSuggested(suggestedFilename);\n  }\n\n  _downloadFinished(uuid: string, error?: string) {\n    const download = this._downloads.get(uuid);\n    if (!download)\n      return;\n    download.artifact.reportFinished(error ? new Error(error) : undefined);\n    this._downloads.delete(uuid);\n  }\n\n  _videoStarted(context: BrowserContext, videoId: string, path: string, pageOrError: Promise<Page | Error>) {\n    const artifact = new Artifact(context, path);\n    this._idToVideo.set(videoId, { context, artifact });\n    pageOrError.then(page => {\n      if (page instanceof Page) {\n        page.video = artifact;\n        page.emitOnContext(BrowserContext.Events.VideoStarted, artifact);\n        page.emit(Page.Events.Video, artifact);\n      }\n    });\n  }\n\n  _takeVideo(videoId: string): Artifact | undefined {\n    const video = this._idToVideo.get(videoId);\n    this._idToVideo.delete(videoId);\n    return video?.artifact;\n  }\n\n  _didClose() {\n    for (const context of this.contexts())\n      context._browserClosed();\n    if (this._defaultContext)\n      this._defaultContext._browserClosed();\n    this.emit(Browser.Events.Disconnected);\n    this.instrumentation.onBrowserClose(this);\n  }\n\n  async close(options: { reason?: string }) {\n    if (!this._startedClosing) {\n      if (options.reason)\n        this._closeReason = options.reason;\n      this._startedClosing = true;\n      await this.options.browserProcess.close();\n    }\n    if (this.isConnected())\n      await new Promise(x => this.once(Browser.Events.Disconnected, x));\n  }\n\n  async killForTests() {\n    await this.options.browserProcess.kill();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
