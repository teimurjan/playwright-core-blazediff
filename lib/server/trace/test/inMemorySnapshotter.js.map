{
  "version": 3,
  "sources": ["../../../../src/server/trace/test/inMemorySnapshotter.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotStorage } from '../../../../../trace-viewer/src/sw/snapshotStorage';\nimport { ManualPromise } from '../../../utils';\nimport { HarTracer } from '../../har/harTracer';\nimport { Snapshotter } from '../recorder/snapshotter';\n\nimport type { SnapshotRenderer } from '../../../../../trace-viewer/src/sw/snapshotRenderer';\nimport type { BrowserContext } from '../../browserContext';\nimport type { HarTracerDelegate } from '../../har/harTracer';\nimport type { Page } from '../../page';\nimport type { SnapshotterBlob, SnapshotterDelegate } from '../recorder/snapshotter';\nimport type * as har from '@trace/har';\nimport type { FrameSnapshot } from '@trace/snapshot';\n\n\nexport class InMemorySnapshotter implements SnapshotterDelegate, HarTracerDelegate {\n  private _blobs = new Map<string, Buffer>();\n  private _snapshotter: Snapshotter;\n  private _harTracer: HarTracer;\n  private _snapshotReadyPromises = new Map<string, ManualPromise<SnapshotRenderer>>();\n  private _storage: SnapshotStorage;\n  private _snapshotCount = 0;\n\n  constructor(context: BrowserContext) {\n    this._snapshotter = new Snapshotter(context, this);\n    this._harTracer = new HarTracer(context, null, this, { content: 'attach', includeTraceInfo: true, recordRequestOverrides: false, waitForContentOnStop: false });\n    this._storage = new SnapshotStorage();\n  }\n\n  async initialize(): Promise<void> {\n    await this._snapshotter.start();\n    this._harTracer.start({ omitScripts: true });\n  }\n\n  async reset() {\n    await this._snapshotter.reset();\n    await this._harTracer.flush();\n    this._harTracer.stop();\n    this._harTracer.start({ omitScripts: true });\n  }\n\n  async dispose() {\n    this._snapshotter.dispose();\n    await this._harTracer.flush();\n    this._harTracer.stop();\n  }\n\n  async captureSnapshot(page: Page, callId: string, snapshotName: string): Promise<SnapshotRenderer> {\n    if (this._snapshotReadyPromises.has(snapshotName))\n      throw new Error('Duplicate snapshot name: ' + snapshotName);\n\n    this._snapshotter.captureSnapshot(page, callId, snapshotName).catch(() => {});\n    const promise = new ManualPromise<SnapshotRenderer>();\n    this._snapshotReadyPromises.set(snapshotName, promise);\n    return promise;\n  }\n\n  onEntryStarted(entry: har.Entry) {\n  }\n\n  onEntryFinished(entry: har.Entry) {\n    this._storage.addResource('', entry);\n  }\n\n  onContentBlob(sha1: string, buffer: Buffer) {\n    this._blobs.set(sha1, buffer);\n  }\n\n  onSnapshotterBlob(blob: SnapshotterBlob): void {\n    this._blobs.set(blob.sha1, blob.buffer);\n  }\n\n  onFrameSnapshot(snapshot: FrameSnapshot): void {\n    ++this._snapshotCount;\n    const renderer = this._storage.addFrameSnapshot('', snapshot, []);\n    this._snapshotReadyPromises.get(snapshot.snapshotName || '')?.resolve(renderer);\n  }\n\n  async resourceContentForTest(sha1: string): Promise<Buffer | undefined> {\n    return this._blobs.get(sha1);\n  }\n\n  snapshotCount() {\n    return this._snapshotCount;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,6BAAgC;AAChC,mBAA8B;AAC9B,uBAA0B;AAC1B,yBAA4B;AAWrB,MAAM,oBAAsE;AAAA,EAQjF,YAAY,SAAyB;AAPrC,SAAQ,SAAS,oBAAI,IAAoB;AAGzC,SAAQ,yBAAyB,oBAAI,IAA6C;AAElF,SAAQ,iBAAiB;AAGvB,SAAK,eAAe,IAAI,+BAAY,SAAS,IAAI;AACjD,SAAK,aAAa,IAAI,2BAAU,SAAS,MAAM,MAAM,EAAE,SAAS,UAAU,kBAAkB,MAAM,wBAAwB,OAAO,sBAAsB,MAAM,CAAC;AAC9J,SAAK,WAAW,IAAI,uCAAgB;AAAA,EACtC;AAAA,EAEA,MAAM,aAA4B;AAChC,UAAM,KAAK,aAAa,MAAM;AAC9B,SAAK,WAAW,MAAM,EAAE,aAAa,KAAK,CAAC;AAAA,EAC7C;AAAA,EAEA,MAAM,QAAQ;AACZ,UAAM,KAAK,aAAa,MAAM;AAC9B,UAAM,KAAK,WAAW,MAAM;AAC5B,SAAK,WAAW,KAAK;AACrB,SAAK,WAAW,MAAM,EAAE,aAAa,KAAK,CAAC;AAAA,EAC7C;AAAA,EAEA,MAAM,UAAU;AACd,SAAK,aAAa,QAAQ;AAC1B,UAAM,KAAK,WAAW,MAAM;AAC5B,SAAK,WAAW,KAAK;AAAA,EACvB;AAAA,EAEA,MAAM,gBAAgB,MAAY,QAAgB,cAAiD;AACjG,QAAI,KAAK,uBAAuB,IAAI,YAAY;AAC9C,YAAM,IAAI,MAAM,8BAA8B,YAAY;AAE5D,SAAK,aAAa,gBAAgB,MAAM,QAAQ,YAAY,EAAE,MAAM,MAAM;AAAA,IAAC,CAAC;AAC5E,UAAM,UAAU,IAAI,2BAAgC;AACpD,SAAK,uBAAuB,IAAI,cAAc,OAAO;AACrD,WAAO;AAAA,EACT;AAAA,EAEA,eAAe,OAAkB;AAAA,EACjC;AAAA,EAEA,gBAAgB,OAAkB;AAChC,SAAK,SAAS,YAAY,IAAI,KAAK;AAAA,EACrC;AAAA,EAEA,cAAc,MAAc,QAAgB;AAC1C,SAAK,OAAO,IAAI,MAAM,MAAM;AAAA,EAC9B;AAAA,EAEA,kBAAkB,MAA6B;AAC7C,SAAK,OAAO,IAAI,KAAK,MAAM,KAAK,MAAM;AAAA,EACxC;AAAA,EAEA,gBAAgB,UAA+B;AAC7C,MAAE,KAAK;AACP,UAAM,WAAW,KAAK,SAAS,iBAAiB,IAAI,UAAU,CAAC,CAAC;AAChE,SAAK,uBAAuB,IAAI,SAAS,gBAAgB,EAAE,GAAG,QAAQ,QAAQ;AAAA,EAChF;AAAA,EAEA,MAAM,uBAAuB,MAA2C;AACtE,WAAO,KAAK,OAAO,IAAI,IAAI;AAAA,EAC7B;AAAA,EAEA,gBAAgB;AACd,WAAO,KAAK;AAAA,EACd;AACF;",
  "names": []
}
