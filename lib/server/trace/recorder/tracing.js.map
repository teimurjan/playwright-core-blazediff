{
  "version": 3,
  "sources": ["../../../../src/server/trace/recorder/tracing.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport { Snapshotter } from './snapshotter';\nimport { methodMetainfo } from '../../../utils/isomorphic/protocolMetainfo';\nimport { assert } from '../../../utils/isomorphic/assert';\nimport { monotonicTime } from '../../../utils/isomorphic/time';\nimport { eventsHelper  } from '../../utils/eventsHelper';\nimport { createGuid  } from '../../utils/crypto';\nimport { Artifact } from '../../artifact';\nimport { BrowserContext } from '../../browserContext';\nimport { Dispatcher } from '../../dispatchers/dispatcher';\nimport { serializeError } from '../../errors';\nimport { SerializedFS, removeFolders  } from '../../utils/fileUtils';\nimport { HarTracer } from '../../har/harTracer';\nimport { SdkObject } from '../../instrumentation';\nimport { Page } from '../../page';\nimport { isAbortError } from '../../progress';\n\nimport type { SnapshotterBlob, SnapshotterDelegate } from './snapshotter';\nimport type { NameValue } from '../../../utils/isomorphic/types';\nimport type { RegisteredListener } from '../../../utils';\nimport type { ConsoleMessage } from '../../console';\nimport type { Dialog } from '../../dialog';\nimport type { Download } from '../../download';\nimport type { APIRequestContext } from '../../fetch';\nimport type { HarTracerDelegate } from '../../har/harTracer';\nimport type { CallMetadata, InstrumentationListener } from '../../instrumentation';\nimport type { StackFrame, TracingTracingStopChunkParams } from '@protocol/channels';\nimport type * as har from '@trace/har';\nimport type { FrameSnapshot } from '@trace/snapshot';\nimport type * as trace from '@trace/trace';\nimport type { Progress } from '@protocol/progress';\n\nconst version: trace.VERSION = 8;\n\nexport type TracerOptions = {\n  name?: string;\n  snapshots?: boolean;\n  screenshots?: boolean;\n  live?: boolean;\n};\n\ntype RecordingState = {\n  options: TracerOptions,\n  traceName: string,\n  networkFile: string,\n  traceFile: string,\n  tracesDir: string,\n  resourcesDir: string,\n  chunkOrdinal: number,\n  networkSha1s: Set<string>,\n  traceSha1s: Set<string>,\n  recording: boolean;\n  callIds: Set<string>;\n  groupStack: string[];\n};\n\nconst kScreencastOptions = { width: 800, height: 600, quality: 90 };\n\nexport class Tracing extends SdkObject implements InstrumentationListener, SnapshotterDelegate, HarTracerDelegate {\n  private _fs = new SerializedFS();\n  private _snapshotter?: Snapshotter;\n  private _harTracer: HarTracer;\n  private _screencastListeners: RegisteredListener[] = [];\n  private _eventListeners: RegisteredListener[] = [];\n  private _context: BrowserContext | APIRequestContext;\n  // Note: state should only be touched inside API methods, but not inside trace operations.\n  private _state: RecordingState | undefined;\n  private _isStopping = false;\n  private _precreatedTracesDir: string | undefined;\n  private _tracesTmpDir: string | undefined;\n  private _allResources = new Set<string>();\n  private _contextCreatedEvent: trace.ContextCreatedTraceEvent;\n  private _pendingHarEntries = new Set<har.Entry>();\n\n  constructor(context: BrowserContext | APIRequestContext, tracesDir: string | undefined) {\n    super(context, 'tracing');\n    this._context = context;\n    this._precreatedTracesDir = tracesDir;\n    this._harTracer = new HarTracer(context, null, this, {\n      content: 'attach',\n      includeTraceInfo: true,\n      recordRequestOverrides: false,\n      waitForContentOnStop: false,\n    });\n    const testIdAttributeName = ('selectors' in context) ? context.selectors().testIdAttributeName() : undefined;\n    this._contextCreatedEvent = {\n      version,\n      type: 'context-options',\n      origin: 'library',\n      browserName: '',\n      options: {},\n      platform: process.platform,\n      wallTime: 0,\n      monotonicTime: 0,\n      sdkLanguage: this._sdkLanguage(),\n      testIdAttributeName,\n      contextId: context.guid,\n    };\n    if (context instanceof BrowserContext) {\n      this._snapshotter = new Snapshotter(context, this);\n      assert(tracesDir, 'tracesDir must be specified for BrowserContext');\n      this._contextCreatedEvent.browserName = context._browser.options.name;\n      this._contextCreatedEvent.channel = context._browser.options.channel;\n      this._contextCreatedEvent.options = context._options;\n    }\n  }\n\n  private _sdkLanguage() {\n    return this._context instanceof BrowserContext ? this._context._browser.sdkLanguage() : this._context.attribution.playwright.options.sdkLanguage;\n  }\n\n  async resetForReuse(progress: Progress) {\n    // Discard previous chunk if any and ignore any errors there.\n    await this.stopChunk(progress, { mode: 'discard' }).catch(() => {});\n    await this.stop(progress);\n    if (this._snapshotter)\n      await progress.race(this._snapshotter.resetForReuse());\n  }\n\n  start(options: TracerOptions) {\n    if (this._isStopping)\n      throw new Error('Cannot start tracing while stopping');\n    if (this._state)\n      throw new Error('Tracing has been already started');\n\n    // Re-write for testing.\n    this._contextCreatedEvent.sdkLanguage = this._sdkLanguage();\n\n    // TODO: passing the same name for two contexts makes them write into a single file\n    // and conflict.\n    const traceName = options.name || createGuid();\n\n    const tracesDir = this._createTracesDirIfNeeded();\n\n    // Init the state synchronously.\n    this._state = {\n      options,\n      traceName,\n      tracesDir,\n      traceFile: path.join(tracesDir, traceName + '.trace'),\n      networkFile: path.join(tracesDir, traceName + '.network'),\n      resourcesDir: path.join(tracesDir, 'resources'),\n      chunkOrdinal: 0,\n      traceSha1s: new Set(),\n      networkSha1s: new Set(),\n      recording: false,\n      callIds: new Set(),\n      groupStack: [],\n    };\n    this._fs.mkdir(this._state.resourcesDir);\n    this._fs.writeFile(this._state.networkFile, '');\n    // Tracing is 10x bigger if we include scripts in every trace.\n    if (options.snapshots)\n      this._harTracer.start({ omitScripts: !options.live });\n  }\n\n  async startChunk(progress: Progress, options: { name?: string, title?: string } = {}): Promise<{ traceName: string }> {\n    if (this._state && this._state.recording)\n      await this.stopChunk(progress, { mode: 'discard' });\n\n    if (!this._state)\n      throw new Error('Must start tracing before starting a new chunk');\n    if (this._isStopping)\n      throw new Error('Cannot start a trace chunk while stopping');\n\n    this._state.recording = true;\n    this._state.callIds.clear();\n\n    // - Browser context network trace is shared across chunks as it contains resources\n    // used to serve page snapshots, so make a copy with the new name.\n    // - APIRequestContext network traces are chunk-specific, always start from scratch.\n    const preserveNetworkResources = this._context instanceof BrowserContext;\n    if (options.name && options.name !== this._state.traceName)\n      this._changeTraceName(this._state, options.name, preserveNetworkResources);\n    else\n      this._allocateNewTraceFile(this._state);\n    if (!preserveNetworkResources)\n      this._fs.writeFile(this._state.networkFile, '');\n\n    this._fs.mkdir(path.dirname(this._state.traceFile));\n    const event: trace.TraceEvent = {\n      ...this._contextCreatedEvent,\n      title: options.title,\n      wallTime: Date.now(),\n      monotonicTime: monotonicTime()\n    };\n    this._appendTraceEvent(event);\n\n    this._context.instrumentation.addListener(this, this._context);\n    this._eventListeners.push(\n        eventsHelper.addEventListener(this._context, BrowserContext.Events.Console, this._onConsoleMessage.bind(this)),\n        eventsHelper.addEventListener(this._context, BrowserContext.Events.PageError, this._onPageError.bind(this)),\n    );\n    if (this._state.options.screenshots)\n      this._startScreencast();\n    if (this._state.options.snapshots)\n      await this._snapshotter?.start();\n    return { traceName: this._state.traceName };\n  }\n\n  private _currentGroupId(): string | undefined {\n    return this._state?.groupStack.length ? this._state.groupStack[this._state.groupStack.length - 1] : undefined;\n  }\n\n  group(name: string, location: { file: string, line?: number, column?: number } | undefined, metadata: CallMetadata) {\n    if (!this._state)\n      return;\n    const stackFrames: StackFrame[] = [];\n    const { file, line, column } = location ?? metadata.location ?? {};\n    if (file) {\n      stackFrames.push({\n        file,\n        line: line ?? 0,\n        column: column ?? 0,\n      });\n    }\n    const event: trace.BeforeActionTraceEvent = {\n      type: 'before',\n      callId: metadata.id,\n      startTime: metadata.startTime,\n      title: name,\n      class: 'Tracing',\n      method: 'tracingGroup',\n      params: { },\n      stepId: metadata.stepId,\n      stack: stackFrames,\n    };\n    if (this._currentGroupId())\n      event.parentId = this._currentGroupId();\n    this._state.groupStack.push(event.callId);\n    this._appendTraceEvent(event);\n  }\n\n  groupEnd() {\n    if (!this._state)\n      return;\n    const callId = this._state.groupStack.pop();\n    if (!callId)\n      return;\n    const event: trace.AfterActionTraceEvent = {\n      type: 'after',\n      callId,\n      endTime: monotonicTime(),\n    };\n    this._appendTraceEvent(event);\n  }\n\n  private _startScreencast() {\n    if (!(this._context instanceof BrowserContext))\n      return;\n    for (const page of this._context.pages())\n      this._startScreencastInPage(page);\n    this._screencastListeners.push(\n        eventsHelper.addEventListener(this._context, BrowserContext.Events.Page, this._startScreencastInPage.bind(this)),\n    );\n  }\n\n  private _stopScreencast() {\n    eventsHelper.removeEventListeners(this._screencastListeners);\n    if (!(this._context instanceof BrowserContext))\n      return;\n    for (const page of this._context.pages())\n      page.setScreencastOptions(null);\n  }\n\n  private _allocateNewTraceFile(state: RecordingState) {\n    const suffix = state.chunkOrdinal ? `-chunk${state.chunkOrdinal}` : ``;\n    state.chunkOrdinal++;\n    state.traceFile = path.join(state.tracesDir, `${state.traceName}${suffix}.trace`);\n  }\n\n  private _changeTraceName(state: RecordingState, name: string, preserveNetworkResources: boolean) {\n    state.traceName = name;\n    state.chunkOrdinal = 0;  // Reset ordinal for the new name.\n    this._allocateNewTraceFile(state);\n\n    const newNetworkFile = path.join(state.tracesDir, name + '.network');\n    if (preserveNetworkResources)\n      this._fs.copyFile(state.networkFile, newNetworkFile);\n    state.networkFile = newNetworkFile;\n  }\n\n  async stop(progress: Progress | undefined) {\n    if (!this._state)\n      return;\n    if (this._isStopping)\n      throw new Error(`Tracing is already stopping`);\n    if (this._state.recording)\n      throw new Error(`Must stop trace file before stopping tracing`);\n    this._closeAllGroups();\n    this._harTracer.stop();\n    this.flushHarEntries();\n    const promise = progress ? progress.race(this._fs.syncAndGetError()) : this._fs.syncAndGetError();\n    await promise.finally(() => {\n      this._state = undefined;\n    });\n  }\n\n  async deleteTmpTracesDir() {\n    if (this._tracesTmpDir)\n      await removeFolders([this._tracesTmpDir]);\n  }\n\n  private _createTracesDirIfNeeded() {\n    if (this._precreatedTracesDir)\n      return this._precreatedTracesDir;\n    this._tracesTmpDir = fs.mkdtempSync(path.join(os.tmpdir(), 'playwright-tracing-'));\n    return this._tracesTmpDir;\n  }\n\n  abort() {\n    this._snapshotter?.dispose();\n    this._harTracer.stop();\n  }\n\n  async flush() {\n    this.abort();\n    await this._fs.syncAndGetError();\n  }\n\n  private _closeAllGroups() {\n    while (this._currentGroupId())\n      this.groupEnd();\n  }\n\n  async stopChunk(progress: Progress | undefined, params: TracingTracingStopChunkParams): Promise<{ artifact?: Artifact, entries?: NameValue[] }> {\n    if (this._isStopping)\n      throw new Error(`Tracing is already stopping`);\n    this._isStopping = true;\n\n    if (!this._state || !this._state.recording) {\n      this._isStopping = false;\n      if (params.mode !== 'discard')\n        throw new Error(`Must start tracing before stopping`);\n      return {};\n    }\n\n    this._closeAllGroups();\n\n    this._context.instrumentation.removeListener(this);\n    eventsHelper.removeEventListeners(this._eventListeners);\n    if (this._state.options.screenshots)\n      this._stopScreencast();\n\n    if (this._state.options.snapshots)\n      this._snapshotter?.stop();\n\n    this.flushHarEntries();\n\n    // Network file survives across chunks, make a snapshot before returning the resulting entries.\n    // We should pick a name starting with \"traceName\" and ending with .network.\n    // Something like <traceName>someSuffixHere.network.\n    // However, this name must not clash with any other \"traceName\".network in the same tracesDir.\n    // We can use <traceName>-<guid>.network, but \"-pwnetcopy-0\" suffix is more readable\n    // and makes it easier to debug future issues.\n    const newNetworkFile = path.join(this._state.tracesDir, this._state.traceName + `-pwnetcopy-${this._state.chunkOrdinal}.network`);\n\n    const entries: NameValue[] = [];\n    entries.push({ name: 'trace.trace', value: this._state.traceFile });\n    entries.push({ name: 'trace.network', value: newNetworkFile });\n    for (const sha1 of new Set([...this._state.traceSha1s, ...this._state.networkSha1s]))\n      entries.push({ name: path.join('resources', sha1), value: path.join(this._state.resourcesDir, sha1) });\n\n    // Only reset trace sha1s, network resources are preserved between chunks.\n    this._state.traceSha1s = new Set();\n\n    if (params.mode === 'discard') {\n      this._isStopping = false;\n      this._state.recording = false;\n      return {};\n    }\n\n    this._fs.copyFile(this._state.networkFile, newNetworkFile);\n\n    const zipFileName = this._state.traceFile + '.zip';\n    if (params.mode === 'archive')\n      this._fs.zip(entries, zipFileName);\n\n    // Make sure all file operations complete.\n    const promise = progress ? progress.race(this._fs.syncAndGetError()) : this._fs.syncAndGetError();\n    const error = await promise.catch(e => e);\n\n    this._isStopping = false;\n    if (this._state)\n      this._state.recording = false;\n\n    // IMPORTANT: no awaits after this point, to make sure recording state is correct.\n\n    if (error) {\n      // This check is here because closing the browser removes the tracesDir and tracing\n      // cannot access removed files. Clients are ready for the missing artifact.\n      if (!isAbortError(error) && this._context instanceof BrowserContext && !this._context._browser.isConnected())\n        return {};\n      throw error;\n    }\n\n    if (params.mode === 'entries')\n      return { entries };\n\n    const artifact = new Artifact(this._context, zipFileName);\n    artifact.reportFinished();\n    return { artifact };\n  }\n\n  async _captureSnapshot(snapshotName: string, sdkObject: SdkObject, metadata: CallMetadata): Promise<void> {\n    if (!this._snapshotter)\n      return;\n    if (!sdkObject.attribution.page)\n      return;\n    if (!this._snapshotter.started())\n      return;\n    if (!shouldCaptureSnapshot(metadata))\n      return;\n    await this._snapshotter.captureSnapshot(sdkObject.attribution.page, metadata.id, snapshotName).catch(() => {});\n  }\n\n  onBeforeCall(sdkObject: SdkObject, metadata: CallMetadata) {\n    // IMPORTANT: no awaits before this._appendTraceEvent in this method.\n    const event = createBeforeActionTraceEvent(metadata, this._currentGroupId());\n    if (!event)\n      return Promise.resolve();\n    sdkObject.attribution.page?.temporarilyDisableTracingScreencastThrottling();\n    event.beforeSnapshot = `before@${metadata.id}`;\n    this._state?.callIds.add(metadata.id);\n    this._appendTraceEvent(event);\n    return this._captureSnapshot(event.beforeSnapshot, sdkObject, metadata);\n  }\n\n  onBeforeInputAction(sdkObject: SdkObject, metadata: CallMetadata) {\n    if (!this._state?.callIds.has(metadata.id))\n      return Promise.resolve();\n    // IMPORTANT: no awaits before this._appendTraceEvent in this method.\n    const event = createInputActionTraceEvent(metadata);\n    if (!event)\n      return Promise.resolve();\n    sdkObject.attribution.page?.temporarilyDisableTracingScreencastThrottling();\n    event.inputSnapshot = `input@${metadata.id}`;\n    this._appendTraceEvent(event);\n    return this._captureSnapshot(event.inputSnapshot, sdkObject, metadata);\n  }\n\n  onCallLog(sdkObject: SdkObject, metadata: CallMetadata, logName: string, message: string) {\n    if (!this._state?.callIds.has(metadata.id))\n      return;\n    if (metadata.internal)\n      return;\n    if (logName !== 'api')\n      return;\n    const event = createActionLogTraceEvent(metadata, message);\n    if (event)\n      this._appendTraceEvent(event);\n  }\n\n  async onAfterCall(sdkObject: SdkObject, metadata: CallMetadata) {\n    if (!this._state?.callIds.has(metadata.id))\n      return;\n    this._state?.callIds.delete(metadata.id);\n    const event = createAfterActionTraceEvent(metadata);\n    if (!event)\n      return;\n    sdkObject.attribution.page?.temporarilyDisableTracingScreencastThrottling();\n    event.afterSnapshot = `after@${metadata.id}`;\n    this._appendTraceEvent(event);\n    return this._captureSnapshot(event.afterSnapshot, sdkObject, metadata);\n  }\n\n  onEntryStarted(entry: har.Entry) {\n    this._pendingHarEntries.add(entry);\n  }\n\n  onEntryFinished(entry: har.Entry) {\n    this._pendingHarEntries.delete(entry);\n    const event: trace.ResourceSnapshotTraceEvent = { type: 'resource-snapshot', snapshot: entry };\n    const visited = visitTraceEvent(event, this._state!.networkSha1s);\n    this._fs.appendFile(this._state!.networkFile, JSON.stringify(visited) + '\\n', true /* flush */);\n  }\n\n  flushHarEntries() {\n    const harLines: string[] = [];\n    for (const entry of this._pendingHarEntries) {\n      const event: trace.ResourceSnapshotTraceEvent = { type: 'resource-snapshot', snapshot: entry };\n      const visited = visitTraceEvent(event, this._state!.networkSha1s);\n      harLines.push(JSON.stringify(visited));\n    }\n    this._pendingHarEntries.clear();\n    if (harLines.length)\n      this._fs.appendFile(this._state!.networkFile, harLines.join('\\n') + '\\n', true /* flush */);\n  }\n\n  onContentBlob(sha1: string, buffer: Buffer) {\n    this._appendResource(sha1, buffer);\n  }\n\n  onSnapshotterBlob(blob: SnapshotterBlob): void {\n    this._appendResource(blob.sha1, blob.buffer);\n  }\n\n  onFrameSnapshot(snapshot: FrameSnapshot): void {\n    this._appendTraceEvent({ type: 'frame-snapshot', snapshot });\n  }\n\n  private _onConsoleMessage(message: ConsoleMessage) {\n    const event: trace.ConsoleMessageTraceEvent = {\n      type: 'console',\n      messageType: message.type(),\n      text: message.text(),\n      args: message.args().map(a => ({ preview: a.toString(), value: a.rawValue() })),\n      location: message.location(),\n      time: monotonicTime(),\n      pageId: message.page()?.guid,\n    };\n    this._appendTraceEvent(event);\n  }\n\n  onDialog(dialog: Dialog) {\n    const event: trace.EventTraceEvent = {\n      type: 'event',\n      time: monotonicTime(),\n      class: 'BrowserContext',\n      method: 'dialog',\n      params: { pageId: dialog.page().guid, type: dialog.type(), message: dialog.message(), defaultValue: dialog.defaultValue() },\n    };\n    this._appendTraceEvent(event);\n  }\n\n  onDownload(page: Page, download: Download) {\n    const event: trace.EventTraceEvent = {\n      type: 'event',\n      time: monotonicTime(),\n      class: 'BrowserContext',\n      method: 'download',\n      params: { pageId: page.guid, url: download.url, suggestedFilename: download.suggestedFilename() },\n    };\n    this._appendTraceEvent(event);\n  }\n\n  onPageOpen(page: Page) {\n    const event: trace.EventTraceEvent = {\n      type: 'event',\n      time: monotonicTime(),\n      class: 'BrowserContext',\n      method: 'page',\n      params: { pageId: page.guid, openerPageId: page.opener()?.guid },\n    };\n    this._appendTraceEvent(event);\n  }\n\n  onPageClose(page: Page) {\n    const event: trace.EventTraceEvent = {\n      type: 'event',\n      time: monotonicTime(),\n      class: 'BrowserContext',\n      method: 'pageClosed',\n      params: { pageId: page.guid },\n    };\n    this._appendTraceEvent(event);\n  }\n\n  private _onPageError(error: Error, page: Page) {\n    const event: trace.EventTraceEvent = {\n      type: 'event',\n      time: monotonicTime(),\n      class: 'BrowserContext',\n      method: 'pageError',\n      params: { error: serializeError(error) },\n      pageId: page.guid,\n    };\n    this._appendTraceEvent(event);\n  }\n\n  private _startScreencastInPage(page: Page) {\n    page.setScreencastOptions(kScreencastOptions);\n    const prefix = page.guid;\n    this._screencastListeners.push(\n        eventsHelper.addEventListener(page, Page.Events.ScreencastFrame, params => {\n          const suffix = params.timestamp || Date.now();\n          const sha1 = `${prefix}-${suffix}.jpeg`;\n          const event: trace.ScreencastFrameTraceEvent = {\n            type: 'screencast-frame',\n            pageId: page.guid,\n            sha1,\n            width: params.width,\n            height: params.height,\n            timestamp: monotonicTime(),\n            frameSwapWallTime: params.frameSwapWallTime,\n          };\n          // Make sure to write the screencast frame before adding a reference to it.\n          this._appendResource(sha1, params.buffer);\n          this._appendTraceEvent(event);\n        }),\n    );\n  }\n\n  private _appendTraceEvent(event: trace.TraceEvent) {\n    const visited = visitTraceEvent(event, this._state!.traceSha1s);\n    // Do not flush (console) events, they are too noisy, unless we are in ui mode (live).\n    const flush = this._state!.options.live || (event.type !== 'event' && event.type !== 'console' && event.type !== 'log');\n    this._fs.appendFile(this._state!.traceFile, JSON.stringify(visited) + '\\n', flush);\n  }\n\n  private _appendResource(sha1: string, buffer: Buffer) {\n    if (this._allResources.has(sha1))\n      return;\n    this._allResources.add(sha1);\n    const resourcePath = path.join(this._state!.resourcesDir, sha1);\n    this._fs.writeFile(resourcePath, buffer, true /* skipIfExists */);\n  }\n}\n\nfunction visitTraceEvent(object: any, sha1s: Set<string>): any {\n  if (Array.isArray(object))\n    return object.map(o => visitTraceEvent(o, sha1s));\n  if (object instanceof Dispatcher)\n    return `<${(object as Dispatcher<any, any, any>)._type}>`;\n  if (object instanceof Buffer)\n    return `<Buffer>`;\n  if (object instanceof Date)\n    return object;\n  if (typeof object === 'object') {\n    const result: any = {};\n    for (const key in object) {\n      if (key === 'sha1' || key === '_sha1' || key.endsWith('Sha1')) {\n        const sha1 = object[key];\n        if (sha1)\n          sha1s.add(sha1);\n      }\n      result[key] = visitTraceEvent(object[key], sha1s);\n    }\n    return result;\n  }\n  return object;\n}\n\nfunction shouldCaptureSnapshot(metadata: CallMetadata): boolean {\n  const metainfo = methodMetainfo.get(metadata.type + '.' + metadata.method);\n  return !!metainfo?.snapshot;\n}\n\nfunction createBeforeActionTraceEvent(metadata: CallMetadata, parentId?: string): trace.BeforeActionTraceEvent | null {\n  if (metadata.internal || metadata.method.startsWith('tracing'))\n    return null;\n  const event: trace.BeforeActionTraceEvent = {\n    type: 'before',\n    callId: metadata.id,\n    startTime: metadata.startTime,\n    title: metadata.title,\n    class: metadata.type,\n    method: metadata.method,\n    params: metadata.params,\n    stepId: metadata.stepId,\n    pageId: metadata.pageId,\n  };\n  if (parentId)\n    event.parentId = parentId;\n  return event;\n}\n\nfunction createInputActionTraceEvent(metadata: CallMetadata): trace.InputActionTraceEvent | null {\n  if (metadata.internal || metadata.method.startsWith('tracing'))\n    return null;\n  return {\n    type: 'input',\n    callId: metadata.id,\n    point: metadata.point,\n  };\n}\n\nfunction createActionLogTraceEvent(metadata: CallMetadata, message: string): trace.LogTraceEvent | null {\n  if (metadata.internal || metadata.method.startsWith('tracing'))\n    return null;\n  return {\n    type: 'log',\n    callId: metadata.id,\n    time: monotonicTime(),\n    message,\n  };\n}\n\nfunction createAfterActionTraceEvent(metadata: CallMetadata): trace.AfterActionTraceEvent | null {\n  if (metadata.internal || metadata.method.startsWith('tracing'))\n    return null;\n  return {\n    type: 'after',\n    callId: metadata.id,\n    endTime: metadata.endTime,\n    error: metadata.error?.error,\n    result: metadata.result,\n    point: metadata.point,\n  };\n}\n"],
  "mappings": "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",
  "names": ["path", "fs", "os"]
}
