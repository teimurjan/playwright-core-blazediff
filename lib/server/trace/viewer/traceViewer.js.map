{
  "version": 3,
  "sources": ["../../../../src/server/trace/viewer/traceViewer.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { gracefullyProcessExitDoNotHang } from '../../../utils';\nimport { isUnderTest } from '../../../utils';\nimport { HttpServer } from '../../utils/httpServer';\nimport { open } from '../../../utilsBundle';\nimport { syncLocalStorageWithSettings } from '../../launchApp';\nimport { launchApp } from '../../launchApp';\nimport { createPlaywright } from '../../playwright';\nimport { ProgressController } from '../../progress';\n\nimport type { Transport } from '../../utils/httpServer';\nimport type { BrowserType } from '../../browserType';\nimport type { Page } from '../../page';\n\nexport type TraceViewerServerOptions = {\n  host?: string;\n  port?: number;\n  isServer?: boolean;\n  transport?: Transport;\n};\n\nexport type TraceViewerRedirectOptions = {\n  args?: string[];\n  grep?: string;\n  grepInvert?: string;\n  project?: string[];\n  reporter?: string[];\n  webApp?: string;\n  isServer?: boolean;\n};\n\nexport type TraceViewerAppOptions = {\n  headless?: boolean;\n  persistentContextOptions?: Parameters<BrowserType['launchPersistentContext']>[2];\n};\n\nfunction validateTraceUrls(traceUrls: string[]) {\n  for (const traceUrl of traceUrls) {\n    let traceFile = traceUrl;\n    // If .json is requested, we'll synthesize it.\n    if (traceUrl.endsWith('.json'))\n      traceFile = traceUrl.substring(0, traceUrl.length - '.json'.length);\n\n    if (!traceUrl.startsWith('http://') && !traceUrl.startsWith('https://') && !fs.existsSync(traceFile) && !fs.existsSync(traceFile + '.trace'))\n      throw new Error(`Trace file ${traceUrl} does not exist!`);\n  }\n}\n\nexport async function startTraceViewerServer(options?: TraceViewerServerOptions): Promise<HttpServer> {\n  const server = new HttpServer();\n  server.routePrefix('/trace', (request, response) => {\n    const url = new URL('http://localhost' + request.url!);\n    const relativePath = url.pathname.slice('/trace'.length);\n    if (process.env.PW_HMR) {\n      // When running in Vite HMR mode, port is hardcoded in build.js\n      response.appendHeader('Access-Control-Allow-Origin', 'http://localhost:44223');\n    }\n    if (relativePath.endsWith('/stall.js'))\n      return true;\n    if (relativePath.startsWith('/file')) {\n      try {\n        const filePath = url.searchParams.get('path')!;\n        if (fs.existsSync(filePath))\n          return server.serveFile(request, response, url.searchParams.get('path')!);\n\n        // If .json is requested, we'll synthesize it for zip-less operation.\n        if (filePath.endsWith('.json')) {\n          const traceName = filePath.substring(0, filePath.length - '.json'.length);\n          response.statusCode = 200;\n          response.setHeader('Content-Type', 'application/json');\n          response.end(JSON.stringify(traceDescriptor(traceName)));\n          return true;\n        }\n      } catch (e) {\n      }\n      response.statusCode = 404;\n      response.end();\n      return true;\n    }\n    const absolutePath = path.join(__dirname, '..', '..', '..', 'vite', 'traceViewer', ...relativePath.split('/'));\n    return server.serveFile(request, response, absolutePath);\n  });\n\n  const transport = options?.transport || (options?.isServer ? new StdinServer() : undefined);\n  if (transport)\n    server.createWebSocket(transport);\n\n  const { host, port } = options || {};\n  await server.start({ preferredPort: port, host });\n  return server;\n}\n\nexport async function installRootRedirect(server: HttpServer, traceUrls: string[], options: TraceViewerRedirectOptions) {\n  const params = new URLSearchParams();\n  if (path.sep !== path.posix.sep)\n    params.set('pathSeparator', path.sep);\n  for (const traceUrl of traceUrls)\n    params.append('trace', traceUrl);\n  if (server.wsGuid())\n    params.append('ws', server.wsGuid()!);\n  if (options?.isServer)\n    params.append('isServer', '');\n  if (isUnderTest())\n    params.append('isUnderTest', 'true');\n  for (const arg of options.args || [])\n    params.append('arg', arg);\n  if (options.grep)\n    params.append('grep', options.grep);\n  if (options.grepInvert)\n    params.append('grepInvert', options.grepInvert);\n  for (const project of options.project || [])\n    params.append('project', project);\n  for (const reporter of options.reporter || [])\n    params.append('reporter', reporter);\n\n  let baseUrl = '.';\n  if (process.env.PW_HMR) {\n    baseUrl = 'http://localhost:44223'; // port is hardcoded in build.js\n    params.set('server', server.urlPrefix('precise'));\n  }\n\n  const urlPath  = `${baseUrl}/trace/${options.webApp || 'index.html'}?${params.toString()}`;\n  server.routePath('/', (_, response) => {\n    response.statusCode = 302;\n    response.setHeader('Location', urlPath);\n    response.end();\n    return true;\n  });\n}\n\nexport async function runTraceViewerApp(traceUrls: string[], browserName: string, options: TraceViewerServerOptions & { headless?: boolean }, exitOnClose?: boolean) {\n  validateTraceUrls(traceUrls);\n  const server = await startTraceViewerServer(options);\n  await installRootRedirect(server, traceUrls, options);\n  const page = await openTraceViewerApp(server.urlPrefix('precise'), browserName, options);\n  if (exitOnClose)\n    page.on('close', () => gracefullyProcessExitDoNotHang(0));\n  return page;\n}\n\nexport async function runTraceInBrowser(traceUrls: string[], options: TraceViewerServerOptions) {\n  validateTraceUrls(traceUrls);\n  const server = await startTraceViewerServer(options);\n  await installRootRedirect(server, traceUrls, options);\n  await openTraceInBrowser(server.urlPrefix('human-readable'));\n}\n\nexport async function openTraceViewerApp(url: string, browserName: string, options?: TraceViewerAppOptions): Promise<Page> {\n  const traceViewerPlaywright = createPlaywright({ sdkLanguage: 'javascript', isInternalPlaywright: true });\n  const traceViewerBrowser = isUnderTest() ? 'chromium' : browserName;\n\n  const { context, page } = await launchApp(traceViewerPlaywright[traceViewerBrowser as 'chromium'], {\n    sdkLanguage: traceViewerPlaywright.options.sdkLanguage,\n    windowSize: { width: 1280, height: 800 },\n    persistentContextOptions: {\n      ...options?.persistentContextOptions,\n      cdpPort: isUnderTest() ? 0 : undefined,\n      headless: !!options?.headless,\n      colorScheme: isUnderTest() ? 'light' : undefined,\n    },\n  });\n\n  const controller = new ProgressController();\n  await controller.run(async progress => {\n    await context._browser._defaultContext!._loadDefaultContextAsIs(progress);\n\n    if (process.env.PWTEST_PRINT_WS_ENDPOINT) {\n      // eslint-disable-next-line no-restricted-properties\n      process.stderr.write('DevTools listening on: ' + context._browser.options.wsEndpoint + '\\n');\n    }\n\n    if (!isUnderTest())\n      await syncLocalStorageWithSettings(page, 'traceviewer');\n\n    if (isUnderTest())\n      page.on('close', () => context.close({ reason: 'Trace viewer closed' }).catch(() => {}));\n\n    await page.mainFrame().goto(progress, url);\n  });\n  return page;\n}\n\nexport async function openTraceInBrowser(url: string) {\n  // eslint-disable-next-line no-console\n  console.log('\\nListening on ' + url);\n  if (!isUnderTest())\n    await open(url.replace('0.0.0.0', 'localhost')).catch(() => {});\n}\n\nclass StdinServer implements Transport {\n  private _pollTimer: NodeJS.Timeout | undefined;\n  private _traceUrl: string | undefined;\n\n  constructor() {\n    process.stdin.on('data', data => {\n      const url = data.toString().trim();\n      if (url === this._traceUrl)\n        return;\n      if (url.endsWith('.json'))\n        this._pollLoadTrace(url);\n      else\n        this._loadTrace(url);\n    });\n    process.stdin.on('close', () => gracefullyProcessExitDoNotHang(0));\n  }\n\n  onconnect() {\n  }\n\n  async dispatch(method: string, params: any) {\n    if (method === 'initialize') {\n      if (this._traceUrl)\n        this._loadTrace(this._traceUrl);\n    }\n  }\n\n  onclose() {\n  }\n\n  sendEvent?: (method: string, params: any) => void;\n  close?: () => void;\n\n  private _loadTrace(traceUrl: string) {\n    this._traceUrl = traceUrl;\n    clearTimeout(this._pollTimer);\n    this.sendEvent?.('loadTraceRequested', { traceUrl });\n  }\n\n  private _pollLoadTrace(url: string) {\n    this._loadTrace(url);\n    this._pollTimer = setTimeout(() => {\n      this._pollLoadTrace(url);\n    }, 500);\n  }\n}\n\nfunction traceDescriptor(traceName: string) {\n  const result: { entries: { name: string, path: string }[] } = {\n    entries: []\n  };\n\n  const traceDir = path.dirname(traceName);\n  const traceFile = path.basename(traceName);\n  for (const name of fs.readdirSync(traceDir)) {\n    if (name.startsWith(traceFile))\n      result.entries.push({ name, path: path.join(traceDir, name) });\n  }\n\n  const resourcesDir = path.join(traceDir, 'resources');\n  if (fs.existsSync(resourcesDir)) {\n    for (const name of fs.readdirSync(resourcesDir))\n      result.entries.push({ name: 'resources/' + name, path: path.join(resourcesDir, name) });\n  }\n  return result;\n}\n"],
  "mappings": "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",
  "names": ["import_utils", "import_launchApp", "fs", "path"]
}
