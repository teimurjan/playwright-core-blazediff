{
  "version": 3,
  "sources": ["../../src/server/input.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../utils';\nimport * as keyboardLayout from './usKeyboardLayout';\nimport { NonRecoverableDOMError } from './dom';\n\nimport type { Progress } from './progress';\nimport type { Page } from './page';\nimport type * as types from './types';\n\nexport const keypadLocation = keyboardLayout.keypadLocation;\n\nexport type KeyDescription = {\n  keyCode: number,\n  keyCodeWithoutLocation: number,\n  key: string,\n  text: string,\n  code: string,\n  location: number,\n  shifted?: KeyDescription;\n};\n\nconst kModifiers: types.KeyboardModifier[] = ['Alt', 'Control', 'Meta', 'Shift'];\n\nexport interface RawKeyboard {\n  keydown(progress: Progress, modifiers: Set<types.KeyboardModifier>, keyName: string, description: KeyDescription, autoRepeat: boolean): Promise<void>;\n  keyup(progress: Progress, modifiers: Set<types.KeyboardModifier>, keyName: string, description: KeyDescription): Promise<void>;\n  sendText(progress: Progress, text: string): Promise<void>;\n}\n\nexport class Keyboard {\n  private _pressedModifiers = new Set<types.KeyboardModifier>();\n  private _pressedKeys = new Set<string>();\n  private _raw: RawKeyboard;\n  private _page: Page;\n\n  constructor(raw: RawKeyboard, page: Page) {\n    this._raw = raw;\n    this._page = page;\n  }\n\n  async down(progress: Progress, key: string) {\n    const description = this._keyDescriptionForString(key);\n    const autoRepeat = this._pressedKeys.has(description.code);\n    this._pressedKeys.add(description.code);\n    if (kModifiers.includes(description.key as types.KeyboardModifier))\n      this._pressedModifiers.add(description.key as types.KeyboardModifier);\n    await this._raw.keydown(progress, this._pressedModifiers, key, description, autoRepeat);\n  }\n\n  private _keyDescriptionForString(str: string): KeyDescription {\n    const keyString = resolveSmartModifierString(str);\n    let description = usKeyboardLayout.get(keyString);\n    if (!description)\n      throw new NonRecoverableDOMError(`Unknown key: \"${keyString}\"`);\n    const shift = this._pressedModifiers.has('Shift');\n    description = shift && description.shifted ? description.shifted : description;\n\n    // if any modifiers besides shift are pressed, no text should be sent\n    if (this._pressedModifiers.size > 1 || (!this._pressedModifiers.has('Shift') && this._pressedModifiers.size === 1))\n      return { ...description, text: '' };\n    return description;\n  }\n\n  async up(progress: Progress, key: string) {\n    const description = this._keyDescriptionForString(key);\n    if (kModifiers.includes(description.key as types.KeyboardModifier))\n      this._pressedModifiers.delete(description.key as types.KeyboardModifier);\n    this._pressedKeys.delete(description.code);\n    await this._raw.keyup(progress, this._pressedModifiers, key, description);\n  }\n\n  async insertText(progress: Progress, text: string) {\n    await this._raw.sendText(progress, text);\n  }\n\n  async type(progress: Progress, text: string, options?: { delay?: number }) {\n    const delay = (options && options.delay) || undefined;\n    for (const char of text) {\n      if (usKeyboardLayout.has(char)) {\n        await this.press(progress, char, { delay });\n      } else {\n        if (delay)\n          await progress.wait(delay);\n        await this.insertText(progress, char);\n      }\n    }\n  }\n\n  async press(progress: Progress, key: string, options: { delay?: number } = {}) {\n    function split(keyString: string) {\n      const keys = [];\n      let building = '';\n      for (const char of keyString) {\n        if (char === '+' && building) {\n          keys.push(building);\n          building = '';\n        } else {\n          building += char;\n        }\n      }\n      keys.push(building);\n      return keys;\n    }\n\n    const tokens = split(key);\n    key = tokens[tokens.length - 1];\n    for (let i = 0; i < tokens.length - 1; ++i)\n      await this.down(progress, tokens[i]);\n    await this.down(progress, key);\n    if (options.delay)\n      await progress.wait(options.delay);\n    await this.up(progress, key);\n    for (let i = tokens.length - 2; i >= 0; --i)\n      await this.up(progress, tokens[i]);\n  }\n\n  async ensureModifiers(progress: Progress, mm: types.SmartKeyboardModifier[]): Promise<types.KeyboardModifier[]> {\n    const modifiers = mm.map(resolveSmartModifier);\n    for (const modifier of modifiers) {\n      if (!kModifiers.includes(modifier))\n        throw new Error('Unknown modifier ' + modifier);\n    }\n    const restore: types.KeyboardModifier[] = Array.from(this._pressedModifiers);\n    for (const key of kModifiers) {\n      const needDown = modifiers.includes(key);\n      const isDown = this._pressedModifiers.has(key);\n      if (needDown && !isDown)\n        await this.down(progress, key);\n      else if (!needDown && isDown)\n        await this.up(progress, key);\n    }\n    return restore;\n  }\n\n  _modifiers(): Set<types.KeyboardModifier> {\n    return this._pressedModifiers;\n  }\n}\n\nexport function resolveSmartModifierString(key: string): string {\n  if (key === 'ControlOrMeta')\n    return process.platform === 'darwin' ? 'Meta' : 'Control';\n  return key;\n}\n\nexport function resolveSmartModifier(m: types.SmartKeyboardModifier): types.KeyboardModifier {\n  return resolveSmartModifierString(m) as types.KeyboardModifier;\n}\n\nexport interface RawMouse {\n  move(progress: Progress, x: number, y: number, button: types.MouseButton | 'none', buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, forClick: boolean): Promise<void>;\n  down(progress: Progress, x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void>;\n  up(progress: Progress, x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void>;\n  wheel(progress: Progress, x: number, y: number, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, deltaX: number, deltaY: number): Promise<void>;\n}\n\nexport class Mouse {\n  private _keyboard: Keyboard;\n  private _x = 0;\n  private _y = 0;\n  private _lastButton: 'none' | types.MouseButton = 'none';\n  private _buttons = new Set<types.MouseButton>();\n  private _raw: RawMouse;\n  private _page: Page;\n\n  constructor(raw: RawMouse, page: Page) {\n    this._raw = raw;\n    this._page = page;\n    this._keyboard = this._page.keyboard;\n  }\n\n  currentPoint() {\n    return { x: this._x, y: this._y };\n  }\n\n  async move(progress: Progress, x: number, y: number, options: { steps?: number, forClick?: boolean } = {}) {\n    const { steps = 1 } = options;\n    const fromX = this._x;\n    const fromY = this._y;\n    this._x = x;\n    this._y = y;\n    for (let i = 1; i <= steps; i++) {\n      const middleX = fromX + (x - fromX) * (i / steps);\n      const middleY = fromY + (y - fromY) * (i / steps);\n      await this._raw.move(progress, middleX, middleY, this._lastButton, this._buttons, this._keyboard._modifiers(), !!options.forClick);\n    }\n  }\n\n  async down(progress: Progress, options: { button?: types.MouseButton, clickCount?: number } = {}) {\n    const { button = 'left', clickCount = 1 } = options;\n    this._lastButton = button;\n    this._buttons.add(button);\n    await this._raw.down(progress, this._x, this._y, this._lastButton, this._buttons, this._keyboard._modifiers(), clickCount);\n  }\n\n  async up(progress: Progress, options: { button?: types.MouseButton, clickCount?: number } = {}) {\n    const { button = 'left', clickCount = 1 } = options;\n    this._lastButton = 'none';\n    this._buttons.delete(button);\n    await this._raw.up(progress, this._x, this._y, button, this._buttons, this._keyboard._modifiers(), clickCount);\n  }\n\n  async click(progress: Progress, x: number, y: number, options: { delay?: number, button?: types.MouseButton, clickCount?: number } = {}) {\n    const { delay = null, clickCount = 1 } = options;\n    if (delay) {\n      this.move(progress, x, y, { forClick: true });\n      for (let cc = 1; cc <= clickCount; ++cc) {\n        await this.down(progress, { ...options, clickCount: cc });\n        await progress.wait(delay);\n        await this.up(progress, { ...options, clickCount: cc });\n        if (cc < clickCount)\n          await progress.wait(delay);\n      }\n    } else {\n      const promises = [];\n      promises.push(this.move(progress, x, y, { forClick: true }));\n      for (let cc = 1; cc <= clickCount; ++cc) {\n        promises.push(this.down(progress, { ...options, clickCount: cc }));\n        promises.push(this.up(progress, { ...options, clickCount: cc }));\n      }\n      await Promise.all(promises);\n    }\n  }\n\n  async wheel(progress: Progress, deltaX: number, deltaY: number) {\n    await this._raw.wheel(progress, this._x, this._y, this._buttons, this._keyboard._modifiers(), deltaX, deltaY);\n  }\n}\n\nconst aliases = new Map<string, string[]>([\n  ['ShiftLeft', ['Shift']],\n  ['ControlLeft', ['Control']],\n  ['AltLeft', ['Alt']],\n  ['MetaLeft', ['Meta']],\n  ['Enter', ['\\n', '\\r']],\n]);\n\nconst usKeyboardLayout = buildLayoutClosure(keyboardLayout.USKeyboardLayout);\n\nfunction buildLayoutClosure(layout: keyboardLayout.KeyboardLayout): Map<string, KeyDescription> {\n  const result = new Map<string, KeyDescription>();\n  for (const code in layout) {\n    const definition = layout[code];\n    const description: KeyDescription = {\n      key: definition.key || '',\n      keyCode: definition.keyCode || 0,\n      keyCodeWithoutLocation: definition.keyCodeWithoutLocation || definition.keyCode || 0,\n      code,\n      text: definition.text || '',\n      location: definition.location || 0,\n    };\n    if (definition.key.length === 1)\n      description.text = description.key;\n\n    // Generate shifted definition.\n    let shiftedDescription: KeyDescription | undefined;\n    if (definition.shiftKey) {\n      assert(definition.shiftKey.length === 1);\n      shiftedDescription = { ...description };\n      shiftedDescription.key = definition.shiftKey;\n      shiftedDescription.text = definition.shiftKey;\n      if (definition.shiftKeyCode)\n        shiftedDescription.keyCode = definition.shiftKeyCode;\n    }\n\n    // Map from code: Digit3 -> { ... description, shifted }\n    result.set(code, { ...description, shifted: shiftedDescription });\n\n    // Map from aliases: Shift -> non-shiftable definition\n    if (aliases.has(code)) {\n      for (const alias of aliases.get(code)!)\n        result.set(alias, description);\n    }\n\n    // Do not use numpad when converting keys to codes.\n    if (definition.location)\n      continue;\n\n    // Map from key, no shifted\n    if (description.key.length === 1)\n      result.set(description.key, description);\n\n    // Map from shiftKey, no shifted\n    if (shiftedDescription)\n      result.set(shiftedDescription.key, { ...shiftedDescription, shifted: undefined });\n  }\n  return result;\n}\n\nexport interface RawTouchscreen {\n  tap(progress: Progress, x: number, y: number, modifiers: Set<types.KeyboardModifier>): Promise<void>;\n}\n\nexport class Touchscreen {\n  private _raw: RawTouchscreen;\n  private _page: Page;\n\n  constructor(raw: RawTouchscreen, page: Page) {\n    this._raw = raw;\n    this._page = page;\n  }\n\n  async tap(progress: Progress, x: number, y: number) {\n    if (!this._page.browserContext._options.hasTouch)\n      throw new Error('hasTouch must be enabled on the browser context before using the touchscreen.');\n    await this._raw.tap(progress, x, y, this._page.keyboard._modifiers());\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
