{
  "version": 3,
  "sources": ["../../../src/server/dispatchers/playwrightDispatcher.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SocksProxy } from '../utils/socksProxy';\nimport { GlobalAPIRequestContext } from '../fetch';\nimport { AndroidDispatcher } from './androidDispatcher';\nimport { AndroidDeviceDispatcher } from './androidDispatcher';\nimport { BrowserDispatcher } from './browserDispatcher';\nimport { BrowserTypeDispatcher } from './browserTypeDispatcher';\nimport { Dispatcher } from './dispatcher';\nimport { ElectronDispatcher } from './electronDispatcher';\nimport { LocalUtilsDispatcher } from './localUtilsDispatcher';\nimport { APIRequestContextDispatcher } from './networkDispatchers';\nimport { SdkObject } from '../instrumentation';\nimport { eventsHelper  } from '../utils/eventsHelper';\n\nimport type { RootDispatcher } from './dispatcher';\nimport type { SocksSocketClosedPayload, SocksSocketDataPayload, SocksSocketRequestedPayload } from '../utils/socksProxy';\nimport type { RegisteredListener } from '../utils/eventsHelper';\nimport type { AndroidDevice } from '../android/android';\nimport type { Browser } from '../browser';\nimport type { Playwright } from '../playwright';\nimport type * as channels from '@protocol/channels';\nimport type { Progress } from '@protocol/progress';\n\nexport type PlaywrightDispatcherOptions = {\n  socksProxy?: SocksProxy;\n  denyLaunch?: boolean;\n  preLaunchedBrowser?: Browser;\n  preLaunchedAndroidDevice?: AndroidDevice;\n  sharedBrowser?: boolean;\n};\n\nexport class PlaywrightDispatcher extends Dispatcher<Playwright, channels.PlaywrightChannel, RootDispatcher> implements channels.PlaywrightChannel {\n  _type_Playwright;\n  private _browserDispatcher: BrowserDispatcher | undefined;\n\n  constructor(scope: RootDispatcher, playwright: Playwright, options: PlaywrightDispatcherOptions = {}) {\n    const denyLaunch = options.denyLaunch ?? false;\n    const chromium = new BrowserTypeDispatcher(scope, playwright.chromium, denyLaunch);\n    const firefox = new BrowserTypeDispatcher(scope, playwright.firefox, denyLaunch);\n    const webkit = new BrowserTypeDispatcher(scope, playwright.webkit, denyLaunch);\n    const _bidiChromium = new BrowserTypeDispatcher(scope, playwright._bidiChromium, denyLaunch);\n    const _bidiFirefox = new BrowserTypeDispatcher(scope, playwright._bidiFirefox, denyLaunch);\n    const android = new AndroidDispatcher(scope, playwright.android);\n    const initializer: channels.PlaywrightInitializer = {\n      chromium,\n      firefox,\n      webkit,\n      _bidiChromium,\n      _bidiFirefox,\n      android,\n      electron: new ElectronDispatcher(scope, playwright.electron, denyLaunch),\n      utils: playwright.options.isServer ? undefined : new LocalUtilsDispatcher(scope, playwright),\n      socksSupport: options.socksProxy ? new SocksSupportDispatcher(scope, playwright, options.socksProxy) : undefined,\n    };\n\n    let browserDispatcher: BrowserDispatcher | undefined;\n    if (options.preLaunchedBrowser) {\n      const browserTypeDispatcher = initializer[options.preLaunchedBrowser.options.name as keyof typeof initializer] as BrowserTypeDispatcher;\n      browserDispatcher = new BrowserDispatcher(browserTypeDispatcher, options.preLaunchedBrowser, {\n        ignoreStopAndKill: true,\n        isolateContexts: !options.sharedBrowser,\n      });\n      initializer.preLaunchedBrowser = browserDispatcher;\n    }\n\n    if (options.preLaunchedAndroidDevice)\n      initializer.preConnectedAndroidDevice = new AndroidDeviceDispatcher(android, options.preLaunchedAndroidDevice);\n\n    super(scope, playwright, 'Playwright', initializer);\n    this._type_Playwright = true;\n    this._browserDispatcher = browserDispatcher;\n  }\n\n  async newRequest(params: channels.PlaywrightNewRequestParams, progress: Progress): Promise<channels.PlaywrightNewRequestResult> {\n    const request = new GlobalAPIRequestContext(this._object, params);\n    return { request: APIRequestContextDispatcher.from(this.parentScope(), request) };\n  }\n\n  async cleanup() {\n    // Cleanup contexts upon disconnect.\n    await this._browserDispatcher?.cleanupContexts();\n  }\n}\n\nclass SocksSupportDispatcher extends Dispatcher<SdkObject, channels.SocksSupportChannel, RootDispatcher> implements channels.SocksSupportChannel {\n  _type_SocksSupport: boolean;\n  private _socksProxy: SocksProxy;\n  private _socksListeners: RegisteredListener[];\n\n  constructor(scope: RootDispatcher, parent: SdkObject, socksProxy: SocksProxy) {\n    super(scope, new SdkObject(parent, 'socksSupport'), 'SocksSupport', {});\n    this._type_SocksSupport = true;\n    this._socksProxy = socksProxy;\n    this._socksListeners = [\n      eventsHelper.addEventListener(socksProxy, SocksProxy.Events.SocksRequested, (payload: SocksSocketRequestedPayload) => this._dispatchEvent('socksRequested', payload)),\n      eventsHelper.addEventListener(socksProxy, SocksProxy.Events.SocksData, (payload: SocksSocketDataPayload) => this._dispatchEvent('socksData', payload)),\n      eventsHelper.addEventListener(socksProxy, SocksProxy.Events.SocksClosed, (payload: SocksSocketClosedPayload) => this._dispatchEvent('socksClosed', payload)),\n    ];\n  }\n\n  async socksConnected(params: channels.SocksSupportSocksConnectedParams, progress: Progress): Promise<void> {\n    this._socksProxy?.socketConnected(params);\n  }\n\n  async socksFailed(params: channels.SocksSupportSocksFailedParams, progress: Progress): Promise<void> {\n    this._socksProxy?.socketFailed(params);\n  }\n\n  async socksData(params: channels.SocksSupportSocksDataParams, progress: Progress): Promise<void> {\n    this._socksProxy?.sendSocketData(params);\n  }\n\n  async socksError(params: channels.SocksSupportSocksErrorParams, progress: Progress): Promise<void> {\n    this._socksProxy?.sendSocketError(params);\n  }\n\n  async socksEnd(params: channels.SocksSupportSocksEndParams, progress: Progress): Promise<void> {\n    this._socksProxy?.sendSocketEnd(params);\n  }\n\n  override _onDispose() {\n    eventsHelper.removeEventListeners(this._socksListeners);\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_androidDispatcher"]
}
