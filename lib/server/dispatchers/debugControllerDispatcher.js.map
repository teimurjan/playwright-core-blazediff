{
  "version": 3,
  "sources": ["../../../src/server/dispatchers/debugControllerDispatcher.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { eventsHelper } from '../../utils';\nimport { DebugController } from '../debugController';\nimport { Dispatcher } from './dispatcher';\n\nimport type { DispatcherConnection, RootDispatcher } from './dispatcher';\nimport type { RegisteredListener } from '../utils/eventsHelper';\nimport type * as channels from '@protocol/channels';\nimport type { Progress } from '@protocol/progress';\n\n\nexport class DebugControllerDispatcher extends Dispatcher<DebugController, channels.DebugControllerChannel, RootDispatcher> implements channels.DebugControllerChannel {\n  _type_DebugController;\n  private _listeners: RegisteredListener[];\n\n  constructor(connection: DispatcherConnection, debugController: DebugController) {\n    super(connection, debugController, 'DebugController', {});\n    this._type_DebugController = true;\n    this._listeners = [\n      eventsHelper.addEventListener(this._object, DebugController.Events.StateChanged, params => {\n        this._dispatchEvent('stateChanged', params);\n      }),\n      eventsHelper.addEventListener(this._object, DebugController.Events.InspectRequested, ({ selector, locator, ariaSnapshot }) => {\n        this._dispatchEvent('inspectRequested', { selector, locator, ariaSnapshot });\n      }),\n      eventsHelper.addEventListener(this._object, DebugController.Events.SourceChanged, ({ text, header, footer, actions }) => {\n        this._dispatchEvent('sourceChanged', ({ text, header, footer, actions }));\n      }),\n      eventsHelper.addEventListener(this._object, DebugController.Events.Paused, ({ paused }) => {\n        this._dispatchEvent('paused', ({ paused }));\n      }),\n      eventsHelper.addEventListener(this._object, DebugController.Events.SetModeRequested, ({ mode }) => {\n        this._dispatchEvent('setModeRequested', ({ mode }));\n      }),\n    ];\n  }\n\n  async initialize(params: channels.DebugControllerInitializeParams, progress: Progress) {\n    this._object.initialize(params.codegenId, params.sdkLanguage);\n  }\n\n  async setReportStateChanged(params: channels.DebugControllerSetReportStateChangedParams, progress: Progress) {\n    this._object.setReportStateChanged(params.enabled);\n  }\n\n  async setRecorderMode(params: channels.DebugControllerSetRecorderModeParams, progress: Progress) {\n    await this._object.setRecorderMode(progress, params);\n  }\n\n  async highlight(params: channels.DebugControllerHighlightParams, progress: Progress) {\n    await this._object.highlight(progress, params);\n  }\n\n  async hideHighlight(params: channels.DebugControllerHideHighlightParams, progress: Progress) {\n    await this._object.hideHighlight(progress);\n  }\n\n  async resume(params: channels.DebugControllerResumeParams, progress: Progress) {\n    await this._object.resume(progress);\n  }\n\n  async kill(params: channels.DebugControllerKillParams, progress: Progress) {\n    this._object.kill();\n  }\n\n  async closeBrowser(params: channels.DebugControllerCloseBrowserParams, progress: Progress) {\n    await this._object.closeBrowser(progress, params.id, params.reason);\n  }\n\n  override _onDispose() {\n    eventsHelper.removeEventListeners(this._listeners);\n    this._object.dispose();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,mBAA6B;AAC7B,6BAAgC;AAChC,wBAA2B;AAQpB,MAAM,kCAAkC,6BAAwH;AAAA,EAIrK,YAAY,YAAkC,iBAAkC;AAC9E,UAAM,YAAY,iBAAiB,mBAAmB,CAAC,CAAC;AACxD,SAAK,wBAAwB;AAC7B,SAAK,aAAa;AAAA,MAChB,0BAAa,iBAAiB,KAAK,SAAS,uCAAgB,OAAO,cAAc,YAAU;AACzF,aAAK,eAAe,gBAAgB,MAAM;AAAA,MAC5C,CAAC;AAAA,MACD,0BAAa,iBAAiB,KAAK,SAAS,uCAAgB,OAAO,kBAAkB,CAAC,EAAE,UAAU,SAAS,aAAa,MAAM;AAC5H,aAAK,eAAe,oBAAoB,EAAE,UAAU,SAAS,aAAa,CAAC;AAAA,MAC7E,CAAC;AAAA,MACD,0BAAa,iBAAiB,KAAK,SAAS,uCAAgB,OAAO,eAAe,CAAC,EAAE,MAAM,QAAQ,QAAQ,QAAQ,MAAM;AACvH,aAAK,eAAe,iBAAkB,EAAE,MAAM,QAAQ,QAAQ,QAAQ,CAAE;AAAA,MAC1E,CAAC;AAAA,MACD,0BAAa,iBAAiB,KAAK,SAAS,uCAAgB,OAAO,QAAQ,CAAC,EAAE,OAAO,MAAM;AACzF,aAAK,eAAe,UAAW,EAAE,OAAO,CAAE;AAAA,MAC5C,CAAC;AAAA,MACD,0BAAa,iBAAiB,KAAK,SAAS,uCAAgB,OAAO,kBAAkB,CAAC,EAAE,KAAK,MAAM;AACjG,aAAK,eAAe,oBAAqB,EAAE,KAAK,CAAE;AAAA,MACpD,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,MAAM,WAAW,QAAkD,UAAoB;AACrF,SAAK,QAAQ,WAAW,OAAO,WAAW,OAAO,WAAW;AAAA,EAC9D;AAAA,EAEA,MAAM,sBAAsB,QAA6D,UAAoB;AAC3G,SAAK,QAAQ,sBAAsB,OAAO,OAAO;AAAA,EACnD;AAAA,EAEA,MAAM,gBAAgB,QAAuD,UAAoB;AAC/F,UAAM,KAAK,QAAQ,gBAAgB,UAAU,MAAM;AAAA,EACrD;AAAA,EAEA,MAAM,UAAU,QAAiD,UAAoB;AACnF,UAAM,KAAK,QAAQ,UAAU,UAAU,MAAM;AAAA,EAC/C;AAAA,EAEA,MAAM,cAAc,QAAqD,UAAoB;AAC3F,UAAM,KAAK,QAAQ,cAAc,QAAQ;AAAA,EAC3C;AAAA,EAEA,MAAM,OAAO,QAA8C,UAAoB;AAC7E,UAAM,KAAK,QAAQ,OAAO,QAAQ;AAAA,EACpC;AAAA,EAEA,MAAM,KAAK,QAA4C,UAAoB;AACzE,SAAK,QAAQ,KAAK;AAAA,EACpB;AAAA,EAEA,MAAM,aAAa,QAAoD,UAAoB;AACzF,UAAM,KAAK,QAAQ,aAAa,UAAU,OAAO,IAAI,OAAO,MAAM;AAAA,EACpE;AAAA,EAES,aAAa;AACpB,8BAAa,qBAAqB,KAAK,UAAU;AACjD,SAAK,QAAQ,QAAQ;AAAA,EACvB;AACF;",
  "names": []
}
