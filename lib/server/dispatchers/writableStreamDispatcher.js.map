{
  "version": 3,
  "sources": ["../../../src/server/dispatchers/writableStreamDispatcher.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\n\nimport { Dispatcher } from './dispatcher';\nimport { SdkObject } from '../instrumentation';\n\nimport type { BrowserContextDispatcher } from './browserContextDispatcher';\nimport type * as channels from '@protocol/channels';\nimport type { Progress } from '@protocol/progress';\n\nclass WritableStreamSdkObject extends SdkObject {\n  readonly streamOrDirectory: fs.WriteStream | string;\n  readonly lastModifiedMs: number | undefined;\n\n  constructor(parent: SdkObject, streamOrDirectory: fs.WriteStream | string, lastModifiedMs: number | undefined) {\n    super(parent, 'stream');\n    this.streamOrDirectory = streamOrDirectory;\n    this.lastModifiedMs = lastModifiedMs;\n  }\n}\n\nexport class WritableStreamDispatcher extends Dispatcher<WritableStreamSdkObject, channels.WritableStreamChannel, BrowserContextDispatcher> implements channels.WritableStreamChannel {\n  _type_WritableStream = true;\n\n  constructor(scope: BrowserContextDispatcher, streamOrDirectory: fs.WriteStream | string, lastModifiedMs?: number) {\n    super(scope, new WritableStreamSdkObject(scope._object, streamOrDirectory, lastModifiedMs), 'WritableStream', {});\n  }\n\n  async write(params: channels.WritableStreamWriteParams, progress: Progress): Promise<channels.WritableStreamWriteResult> {\n    if (typeof this._object.streamOrDirectory === 'string')\n      throw new Error('Cannot write to a directory');\n    const stream = this._object.streamOrDirectory;\n    await progress.race(new Promise<void>((fulfill, reject) => {\n      stream.write(params.binary, error => {\n        if (error)\n          reject(error);\n        else\n          fulfill();\n      });\n    }));\n  }\n\n  async close(params: channels.WritableStreamCloseParams, progress: Progress): Promise<void> {\n    if (typeof this._object.streamOrDirectory === 'string')\n      throw new Error('Cannot close a directory');\n    const stream = this._object.streamOrDirectory;\n    await progress.race(new Promise<void>(fulfill => stream.end(fulfill)));\n    if (this._object.lastModifiedMs)\n      await progress.race(fs.promises.utimes(this.path(), new Date(this._object.lastModifiedMs), new Date(this._object.lastModifiedMs)));\n  }\n\n  path(): string {\n    if (typeof this._object.streamOrDirectory === 'string')\n      return this._object.streamOrDirectory;\n    return this._object.streamOrDirectory.path as string;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,gBAAe;AAEf,wBAA2B;AAC3B,6BAA0B;AAM1B,MAAM,gCAAgC,iCAAU;AAAA,EAI9C,YAAY,QAAmB,mBAA4C,gBAAoC;AAC7G,UAAM,QAAQ,QAAQ;AACtB,SAAK,oBAAoB;AACzB,SAAK,iBAAiB;AAAA,EACxB;AACF;AAEO,MAAM,iCAAiC,6BAAwI;AAAA,EAGpL,YAAY,OAAiC,mBAA4C,gBAAyB;AAChH,UAAM,OAAO,IAAI,wBAAwB,MAAM,SAAS,mBAAmB,cAAc,GAAG,kBAAkB,CAAC,CAAC;AAHlH,gCAAuB;AAAA,EAIvB;AAAA,EAEA,MAAM,MAAM,QAA4C,UAAiE;AACvH,QAAI,OAAO,KAAK,QAAQ,sBAAsB;AAC5C,YAAM,IAAI,MAAM,6BAA6B;AAC/C,UAAM,SAAS,KAAK,QAAQ;AAC5B,UAAM,SAAS,KAAK,IAAI,QAAc,CAAC,SAAS,WAAW;AACzD,aAAO,MAAM,OAAO,QAAQ,WAAS;AACnC,YAAI;AACF,iBAAO,KAAK;AAAA;AAEZ,kBAAQ;AAAA,MACZ,CAAC;AAAA,IACH,CAAC,CAAC;AAAA,EACJ;AAAA,EAEA,MAAM,MAAM,QAA4C,UAAmC;AACzF,QAAI,OAAO,KAAK,QAAQ,sBAAsB;AAC5C,YAAM,IAAI,MAAM,0BAA0B;AAC5C,UAAM,SAAS,KAAK,QAAQ;AAC5B,UAAM,SAAS,KAAK,IAAI,QAAc,aAAW,OAAO,IAAI,OAAO,CAAC,CAAC;AACrE,QAAI,KAAK,QAAQ;AACf,YAAM,SAAS,KAAK,UAAAA,QAAG,SAAS,OAAO,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,QAAQ,cAAc,GAAG,IAAI,KAAK,KAAK,QAAQ,cAAc,CAAC,CAAC;AAAA,EACrI;AAAA,EAEA,OAAe;AACb,QAAI,OAAO,KAAK,QAAQ,sBAAsB;AAC5C,aAAO,KAAK,QAAQ;AACtB,WAAO,KAAK,QAAQ,kBAAkB;AAAA,EACxC;AACF;",
  "names": ["fs"]
}
