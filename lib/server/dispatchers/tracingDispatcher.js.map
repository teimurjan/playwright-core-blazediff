{
  "version": 3,
  "sources": ["../../../src/server/dispatchers/tracingDispatcher.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ArtifactDispatcher } from './artifactDispatcher';\nimport { Dispatcher } from './dispatcher';\n\nimport type { BrowserContextDispatcher } from './browserContextDispatcher';\nimport type { APIRequestContextDispatcher } from './networkDispatchers';\nimport type { Tracing } from '../trace/recorder/tracing';\nimport type * as channels from '@protocol/channels';\nimport type { Progress } from '@protocol/progress';\n\nexport class TracingDispatcher extends Dispatcher<Tracing, channels.TracingChannel, BrowserContextDispatcher | APIRequestContextDispatcher> implements channels.TracingChannel {\n  _type_Tracing = true;\n  private _started = false;\n\n  static from(scope: BrowserContextDispatcher | APIRequestContextDispatcher, tracing: Tracing): TracingDispatcher {\n    const result = scope.connection.existingDispatcher<TracingDispatcher>(tracing);\n    return result || new TracingDispatcher(scope, tracing);\n  }\n\n  constructor(scope: BrowserContextDispatcher | APIRequestContextDispatcher, tracing: Tracing) {\n    super(scope, tracing, 'Tracing', {});\n  }\n\n  async tracingStart(params: channels.TracingTracingStartParams, progress: Progress): Promise<channels.TracingTracingStartResult> {\n    this._object.start(params);\n    this._started = true;\n  }\n\n  async tracingStartChunk(params: channels.TracingTracingStartChunkParams, progress: Progress): Promise<channels.TracingTracingStartChunkResult> {\n    return await this._object.startChunk(progress, params);\n  }\n\n  async tracingGroup(params: channels.TracingTracingGroupParams, progress: Progress): Promise<channels.TracingTracingGroupResult> {\n    const { name, location } = params;\n    this._object.group(name, location, progress.metadata);\n  }\n\n  async tracingGroupEnd(params: channels.TracingTracingGroupEndParams, progress: Progress): Promise<channels.TracingTracingGroupEndResult> {\n    this._object.groupEnd();\n  }\n\n  async tracingStopChunk(params: channels.TracingTracingStopChunkParams, progress: Progress): Promise<channels.TracingTracingStopChunkResult> {\n    const { artifact, entries } = await this._object.stopChunk(progress, params);\n    return { artifact: artifact ? ArtifactDispatcher.from(this, artifact) : undefined, entries };\n  }\n\n  async tracingStop(params: channels.TracingTracingStopParams, progress: Progress): Promise<channels.TracingTracingStopResult> {\n    this._started = false;\n    await this._object.stop(progress);\n  }\n\n  override _onDispose() {\n    // Avoid protocol calls for the closed context.\n    if (this._started)\n      this._object.stopChunk(undefined, { mode: 'discard' }).then(() => this._object.stop(undefined)).catch(() => {});\n    this._started = false;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,gCAAmC;AACnC,wBAA2B;AAQpB,MAAM,0BAA0B,6BAAwI;AAAA,EAS7K,YAAY,OAA+D,SAAkB;AAC3F,UAAM,OAAO,SAAS,WAAW,CAAC,CAAC;AATrC,yBAAgB;AAChB,SAAQ,WAAW;AAAA,EASnB;AAAA,EAPA,OAAO,KAAK,OAA+D,SAAqC;AAC9G,UAAM,SAAS,MAAM,WAAW,mBAAsC,OAAO;AAC7E,WAAO,UAAU,IAAI,kBAAkB,OAAO,OAAO;AAAA,EACvD;AAAA,EAMA,MAAM,aAAa,QAA4C,UAAiE;AAC9H,SAAK,QAAQ,MAAM,MAAM;AACzB,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,MAAM,kBAAkB,QAAiD,UAAsE;AAC7I,WAAO,MAAM,KAAK,QAAQ,WAAW,UAAU,MAAM;AAAA,EACvD;AAAA,EAEA,MAAM,aAAa,QAA4C,UAAiE;AAC9H,UAAM,EAAE,MAAM,SAAS,IAAI;AAC3B,SAAK,QAAQ,MAAM,MAAM,UAAU,SAAS,QAAQ;AAAA,EACtD;AAAA,EAEA,MAAM,gBAAgB,QAA+C,UAAoE;AACvI,SAAK,QAAQ,SAAS;AAAA,EACxB;AAAA,EAEA,MAAM,iBAAiB,QAAgD,UAAqE;AAC1I,UAAM,EAAE,UAAU,QAAQ,IAAI,MAAM,KAAK,QAAQ,UAAU,UAAU,MAAM;AAC3E,WAAO,EAAE,UAAU,WAAW,6CAAmB,KAAK,MAAM,QAAQ,IAAI,QAAW,QAAQ;AAAA,EAC7F;AAAA,EAEA,MAAM,YAAY,QAA2C,UAAgE;AAC3H,SAAK,WAAW;AAChB,UAAM,KAAK,QAAQ,KAAK,QAAQ;AAAA,EAClC;AAAA,EAES,aAAa;AAEpB,QAAI,KAAK;AACP,WAAK,QAAQ,UAAU,QAAW,EAAE,MAAM,UAAU,CAAC,EAAE,KAAK,MAAM,KAAK,QAAQ,KAAK,MAAS,CAAC,EAAE,MAAM,MAAM;AAAA,MAAC,CAAC;AAChH,SAAK,WAAW;AAAA,EAClB;AACF;",
  "names": []
}
