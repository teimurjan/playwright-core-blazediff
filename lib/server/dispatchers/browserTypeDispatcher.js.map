{
  "version": 3,
  "sources": ["../../../src/server/dispatchers/browserTypeDispatcher.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserContextDispatcher } from './browserContextDispatcher';\nimport { BrowserDispatcher } from './browserDispatcher';\nimport { Dispatcher } from './dispatcher';\n\nimport type { BrowserType } from '../browserType';\nimport type { RootDispatcher } from './dispatcher';\nimport type * as channels from '@protocol/channels';\nimport type { Progress } from '@protocol/progress';\n\nexport class BrowserTypeDispatcher extends Dispatcher<BrowserType, channels.BrowserTypeChannel, RootDispatcher> implements channels.BrowserTypeChannel {\n  _type_BrowserType = true;\n  private readonly _denyLaunch: boolean;\n  constructor(scope: RootDispatcher, browserType: BrowserType, denyLaunch: boolean) {\n    super(scope, browserType, 'BrowserType', {\n      executablePath: browserType.executablePath(),\n      name: browserType.name()\n    });\n    this._denyLaunch = denyLaunch;\n  }\n\n  async launch(params: channels.BrowserTypeLaunchParams, progress: Progress): Promise<channels.BrowserTypeLaunchResult> {\n    if (this._denyLaunch)\n      throw new Error(`Launching more browsers is not allowed.`);\n\n    const browser = await this._object.launch(progress, params);\n    return { browser: new BrowserDispatcher(this, browser) };\n  }\n\n  async launchPersistentContext(params: channels.BrowserTypeLaunchPersistentContextParams, progress: Progress): Promise<channels.BrowserTypeLaunchPersistentContextResult> {\n    if (this._denyLaunch)\n      throw new Error(`Launching more browsers is not allowed.`);\n\n    const browserContext = await this._object.launchPersistentContext(progress, params.userDataDir, params);\n    const browserDispatcher = new BrowserDispatcher(this, browserContext._browser);\n    const contextDispatcher = BrowserContextDispatcher.from(browserDispatcher, browserContext);\n    return { browser: browserDispatcher, context: contextDispatcher };\n  }\n\n  async connectOverCDP(params: channels.BrowserTypeConnectOverCDPParams, progress: Progress): Promise<channels.BrowserTypeConnectOverCDPResult> {\n    if (this._denyLaunch)\n      throw new Error(`Launching more browsers is not allowed.`);\n\n    const browser = await this._object.connectOverCDP(progress, params.endpointURL, params);\n    const browserDispatcher = new BrowserDispatcher(this, browser);\n    return {\n      browser: browserDispatcher,\n      defaultContext: browser._defaultContext ? BrowserContextDispatcher.from(browserDispatcher, browser._defaultContext) : undefined,\n    };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,sCAAyC;AACzC,+BAAkC;AAClC,wBAA2B;AAOpB,MAAM,8BAA8B,6BAA4G;AAAA,EAGrJ,YAAY,OAAuB,aAA0B,YAAqB;AAChF,UAAM,OAAO,aAAa,eAAe;AAAA,MACvC,gBAAgB,YAAY,eAAe;AAAA,MAC3C,MAAM,YAAY,KAAK;AAAA,IACzB,CAAC;AANH,6BAAoB;AAOlB,SAAK,cAAc;AAAA,EACrB;AAAA,EAEA,MAAM,OAAO,QAA0C,UAA+D;AACpH,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,yCAAyC;AAE3D,UAAM,UAAU,MAAM,KAAK,QAAQ,OAAO,UAAU,MAAM;AAC1D,WAAO,EAAE,SAAS,IAAI,2CAAkB,MAAM,OAAO,EAAE;AAAA,EACzD;AAAA,EAEA,MAAM,wBAAwB,QAA2D,UAAgF;AACvK,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,yCAAyC;AAE3D,UAAM,iBAAiB,MAAM,KAAK,QAAQ,wBAAwB,UAAU,OAAO,aAAa,MAAM;AACtG,UAAM,oBAAoB,IAAI,2CAAkB,MAAM,eAAe,QAAQ;AAC7E,UAAM,oBAAoB,yDAAyB,KAAK,mBAAmB,cAAc;AACzF,WAAO,EAAE,SAAS,mBAAmB,SAAS,kBAAkB;AAAA,EAClE;AAAA,EAEA,MAAM,eAAe,QAAkD,UAAuE;AAC5I,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,yCAAyC;AAE3D,UAAM,UAAU,MAAM,KAAK,QAAQ,eAAe,UAAU,OAAO,aAAa,MAAM;AACtF,UAAM,oBAAoB,IAAI,2CAAkB,MAAM,OAAO;AAC7D,WAAO;AAAA,MACL,SAAS;AAAA,MACT,gBAAgB,QAAQ,kBAAkB,yDAAyB,KAAK,mBAAmB,QAAQ,eAAe,IAAI;AAAA,IACxH;AAAA,EACF;AACF;",
  "names": []
}
