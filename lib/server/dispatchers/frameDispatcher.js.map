{
  "version": 3,
  "sources": ["../../../src/server/dispatchers/frameDispatcher.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Frame } from '../frames';\nimport { Dispatcher } from './dispatcher';\nimport { ElementHandleDispatcher } from './elementHandlerDispatcher';\nimport { parseArgument, serializeResult } from './jsHandleDispatcher';\nimport { ResponseDispatcher } from './networkDispatchers';\nimport { RequestDispatcher } from './networkDispatchers';\nimport { parseAriaSnapshotUnsafe } from '../../utils/isomorphic/ariaSnapshot';\nimport { yaml } from '../../utilsBundle';\n\nimport type { Progress } from '../progress';\nimport type { BrowserContextDispatcher } from './browserContextDispatcher';\nimport type { PageDispatcher } from './pageDispatcher';\nimport type { NavigationEvent } from '../frames';\nimport type * as channels from '@protocol/channels';\n\nexport class FrameDispatcher extends Dispatcher<Frame, channels.FrameChannel, BrowserContextDispatcher | PageDispatcher> implements channels.FrameChannel {\n  _type_Frame = true;\n  private _frame: Frame;\n  private _browserContextDispatcher: BrowserContextDispatcher;\n\n  static from(scope: BrowserContextDispatcher, frame: Frame): FrameDispatcher {\n    const result = scope.connection.existingDispatcher<FrameDispatcher>(frame);\n    return result || new FrameDispatcher(scope, frame);\n  }\n\n  static fromNullable(scope: BrowserContextDispatcher, frame: Frame | null): FrameDispatcher | undefined {\n    if (!frame)\n      return;\n    return FrameDispatcher.from(scope, frame);\n  }\n\n  private constructor(scope: BrowserContextDispatcher, frame: Frame) {\n    // Main frames are gc'ed separately from any other frames, so that\n    // methods on Page that redirect to the main frame remain operational.\n    // Note: we cannot check parentFrame() here because it may be null after the frame has been detached.\n    const gcBucket = frame._page.mainFrame() === frame ? 'MainFrame' : 'Frame';\n    const pageDispatcher = scope.connection.existingDispatcher<PageDispatcher>(frame._page);\n    super(pageDispatcher || scope, frame, 'Frame', {\n      url: frame.url(),\n      name: frame.name(),\n      parentFrame: FrameDispatcher.fromNullable(scope, frame.parentFrame()),\n      loadStates: Array.from(frame._firedLifecycleEvents),\n    }, gcBucket);\n    this._browserContextDispatcher = scope;\n    this._frame = frame;\n    this.addObjectListener(Frame.Events.AddLifecycle, lifecycleEvent => {\n      this._dispatchEvent('loadstate', { add: lifecycleEvent });\n    });\n    this.addObjectListener(Frame.Events.RemoveLifecycle, lifecycleEvent => {\n      this._dispatchEvent('loadstate', { remove: lifecycleEvent });\n    });\n    this.addObjectListener(Frame.Events.InternalNavigation, (event: NavigationEvent) => {\n      if (!event.isPublic)\n        return;\n      const params = { url: event.url, name: event.name, error: event.error ? event.error.message : undefined };\n      if (event.newDocument)\n        (params as any).newDocument = { request: RequestDispatcher.fromNullable(this._browserContextDispatcher, event.newDocument.request || null) };\n      this._dispatchEvent('navigated', params);\n    });\n  }\n\n  async goto(params: channels.FrameGotoParams, progress: Progress): Promise<channels.FrameGotoResult> {\n    return { response: ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._frame.goto(progress, params.url, params)) };\n  }\n\n  async frameElement(params: channels.FrameFrameElementParams, progress: Progress): Promise<channels.FrameFrameElementResult> {\n    return { element: ElementHandleDispatcher.from(this, await progress.race(this._frame.frameElement())) };\n  }\n\n  async evaluateExpression(params: channels.FrameEvaluateExpressionParams, progress: Progress): Promise<channels.FrameEvaluateExpressionResult> {\n    return { value: serializeResult(await progress.race(this._frame.evaluateExpression(params.expression, { isFunction: params.isFunction }, parseArgument(params.arg)))) };\n  }\n\n  async evaluateExpressionHandle(params: channels.FrameEvaluateExpressionHandleParams, progress: Progress): Promise<channels.FrameEvaluateExpressionHandleResult> {\n    return { handle: ElementHandleDispatcher.fromJSOrElementHandle(this, await progress.race(this._frame.evaluateExpressionHandle(params.expression, { isFunction: params.isFunction }, parseArgument(params.arg)))) };\n  }\n\n  async waitForSelector(params: channels.FrameWaitForSelectorParams, progress: Progress): Promise<channels.FrameWaitForSelectorResult> {\n    return { element: ElementHandleDispatcher.fromNullable(this, await this._frame.waitForSelector(progress, params.selector, true, params)) };\n  }\n\n  async dispatchEvent(params: channels.FrameDispatchEventParams, progress: Progress): Promise<void> {\n    return this._frame.dispatchEvent(progress, params.selector, params.type, parseArgument(params.eventInit), params);\n  }\n\n  async evalOnSelector(params: channels.FrameEvalOnSelectorParams, progress: Progress): Promise<channels.FrameEvalOnSelectorResult> {\n    return { value: serializeResult(await progress.race(this._frame.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, parseArgument(params.arg)))) };\n  }\n\n  async evalOnSelectorAll(params: channels.FrameEvalOnSelectorAllParams, progress: Progress): Promise<channels.FrameEvalOnSelectorAllResult> {\n    return { value: serializeResult(await progress.race(this._frame.evalOnSelectorAll(params.selector, params.expression, params.isFunction, parseArgument(params.arg)))) };\n  }\n\n  async querySelector(params: channels.FrameQuerySelectorParams, progress: Progress): Promise<channels.FrameQuerySelectorResult> {\n    return { element: ElementHandleDispatcher.fromNullable(this, await progress.race(this._frame.querySelector(params.selector, params))) };\n  }\n\n  async querySelectorAll(params: channels.FrameQuerySelectorAllParams, progress: Progress): Promise<channels.FrameQuerySelectorAllResult> {\n    const elements = await progress.race(this._frame.querySelectorAll(params.selector));\n    return { elements: elements.map(e => ElementHandleDispatcher.from(this, e)) };\n  }\n\n  async queryCount(params: channels.FrameQueryCountParams, progress: Progress): Promise<channels.FrameQueryCountResult> {\n    return { value: await progress.race(this._frame.queryCount(params.selector, params)) };\n  }\n\n  async content(params: channels.FrameContentParams, progress: Progress): Promise<channels.FrameContentResult> {\n    return { value: await progress.race(this._frame.content()) };\n  }\n\n  async setContent(params: channels.FrameSetContentParams, progress: Progress): Promise<void> {\n    return await this._frame.setContent(progress, params.html, params);\n  }\n\n  async addScriptTag(params: channels.FrameAddScriptTagParams, progress: Progress): Promise<channels.FrameAddScriptTagResult> {\n    return { element: ElementHandleDispatcher.from(this, await progress.race(this._frame.addScriptTag(params))) };\n  }\n\n  async addStyleTag(params: channels.FrameAddStyleTagParams, progress: Progress): Promise<channels.FrameAddStyleTagResult> {\n    return { element: ElementHandleDispatcher.from(this, await progress.race(this._frame.addStyleTag(params))) };\n  }\n\n  async click(params: channels.FrameClickParams, progress: Progress): Promise<void> {\n    progress.metadata.potentiallyClosesScope = true;\n    return await this._frame.click(progress, params.selector, params);\n  }\n\n  async dblclick(params: channels.FrameDblclickParams, progress: Progress): Promise<void> {\n    return await this._frame.dblclick(progress, params.selector, params);\n  }\n\n  async dragAndDrop(params: channels.FrameDragAndDropParams, progress: Progress): Promise<void> {\n    return await this._frame.dragAndDrop(progress, params.source, params.target, params);\n  }\n\n  async tap(params: channels.FrameTapParams, progress: Progress): Promise<void> {\n    return await this._frame.tap(progress, params.selector, params);\n  }\n\n  async fill(params: channels.FrameFillParams, progress: Progress): Promise<void> {\n    return await this._frame.fill(progress, params.selector, params.value, params);\n  }\n\n  async focus(params: channels.FrameFocusParams, progress: Progress): Promise<void> {\n    await this._frame.focus(progress, params.selector, params);\n  }\n\n  async blur(params: channels.FrameBlurParams, progress: Progress): Promise<void> {\n    await this._frame.blur(progress, params.selector, params);\n  }\n\n  async textContent(params: channels.FrameTextContentParams, progress: Progress): Promise<channels.FrameTextContentResult> {\n    const value = await this._frame.textContent(progress, params.selector, params);\n    return { value: value === null ? undefined : value };\n  }\n\n  async innerText(params: channels.FrameInnerTextParams, progress: Progress): Promise<channels.FrameInnerTextResult> {\n    return { value: await this._frame.innerText(progress, params.selector, params) };\n  }\n\n  async innerHTML(params: channels.FrameInnerHTMLParams, progress: Progress): Promise<channels.FrameInnerHTMLResult> {\n    return { value: await this._frame.innerHTML(progress, params.selector, params) };\n  }\n\n  async resolveSelector(params: channels.FrameResolveSelectorParams, progress: Progress): Promise<channels.FrameResolveSelectorResult> {\n    return await this._frame.resolveSelector(progress, params.selector);\n  }\n\n  async getAttribute(params: channels.FrameGetAttributeParams, progress: Progress): Promise<channels.FrameGetAttributeResult> {\n    const value = await this._frame.getAttribute(progress, params.selector, params.name, params);\n    return { value: value === null ? undefined : value };\n  }\n\n  async inputValue(params: channels.FrameInputValueParams, progress: Progress): Promise<channels.FrameInputValueResult> {\n    const value = await this._frame.inputValue(progress, params.selector, params);\n    return { value };\n  }\n\n  async isChecked(params: channels.FrameIsCheckedParams, progress: Progress): Promise<channels.FrameIsCheckedResult> {\n    return { value: await this._frame.isChecked(progress, params.selector, params) };\n  }\n\n  async isDisabled(params: channels.FrameIsDisabledParams, progress: Progress): Promise<channels.FrameIsDisabledResult> {\n    return { value: await this._frame.isDisabled(progress, params.selector, params) };\n  }\n\n  async isEditable(params: channels.FrameIsEditableParams, progress: Progress): Promise<channels.FrameIsEditableResult> {\n    return { value: await this._frame.isEditable(progress, params.selector, params) };\n  }\n\n  async isEnabled(params: channels.FrameIsEnabledParams, progress: Progress): Promise<channels.FrameIsEnabledResult> {\n    return { value: await this._frame.isEnabled(progress, params.selector, params) };\n  }\n\n  async isHidden(params: channels.FrameIsHiddenParams, progress: Progress): Promise<channels.FrameIsHiddenResult> {\n    return { value: await this._frame.isHidden(progress, params.selector, params) };\n  }\n\n  async isVisible(params: channels.FrameIsVisibleParams, progress: Progress): Promise<channels.FrameIsVisibleResult> {\n    return { value: await this._frame.isVisible(progress, params.selector, params) };\n  }\n\n  async hover(params: channels.FrameHoverParams, progress: Progress): Promise<void> {\n    return await this._frame.hover(progress, params.selector, params);\n  }\n\n  async selectOption(params: channels.FrameSelectOptionParams, progress: Progress): Promise<channels.FrameSelectOptionResult> {\n    const elements = (params.elements || []).map(e => (e as ElementHandleDispatcher)._elementHandle);\n    return { values: await this._frame.selectOption(progress, params.selector, elements, params.options || [], params) };\n  }\n\n  async setInputFiles(params: channels.FrameSetInputFilesParams, progress: Progress): Promise<channels.FrameSetInputFilesResult> {\n    return await this._frame.setInputFiles(progress, params.selector, params);\n  }\n\n  async type(params: channels.FrameTypeParams, progress: Progress): Promise<void> {\n    return await this._frame.type(progress, params.selector, params.text, params);\n  }\n\n  async press(params: channels.FramePressParams, progress: Progress): Promise<void> {\n    return await this._frame.press(progress, params.selector, params.key, params);\n  }\n\n  async check(params: channels.FrameCheckParams, progress: Progress): Promise<void> {\n    return await this._frame.check(progress, params.selector, params);\n  }\n\n  async uncheck(params: channels.FrameUncheckParams, progress: Progress): Promise<void> {\n    return await this._frame.uncheck(progress, params.selector, params);\n  }\n\n  async waitForTimeout(params: channels.FrameWaitForTimeoutParams, progress: Progress): Promise<void> {\n    return await this._frame.waitForTimeout(progress, params.waitTimeout);\n  }\n\n  async waitForFunction(params: channels.FrameWaitForFunctionParams, progress: Progress): Promise<channels.FrameWaitForFunctionResult> {\n    return { handle: ElementHandleDispatcher.fromJSOrElementHandle(this, await this._frame.waitForFunctionExpression(progress, params.expression, params.isFunction, parseArgument(params.arg), params)) };\n  }\n\n  async title(params: channels.FrameTitleParams, progress: Progress): Promise<channels.FrameTitleResult> {\n    return { value: await progress.race(this._frame.title()) };\n  }\n\n  async highlight(params: channels.FrameHighlightParams, progress: Progress): Promise<void> {\n    return await this._frame.highlight(progress, params.selector);\n  }\n\n  async expect(params: channels.FrameExpectParams, progress: Progress): Promise<channels.FrameExpectResult> {\n    progress.metadata.potentiallyClosesScope = true;\n    let expectedValue = params.expectedValue ? parseArgument(params.expectedValue) : undefined;\n    if (params.expression === 'to.match.aria' && expectedValue)\n      expectedValue = parseAriaSnapshotUnsafe(yaml, expectedValue);\n    const result = await this._frame.expect(progress, params.selector, { ...params, expectedValue }, params.timeout);\n    if (result.received !== undefined)\n      result.received = serializeResult(result.received);\n    return result;\n  }\n\n  async ariaSnapshot(params: channels.FrameAriaSnapshotParams, progress: Progress): Promise<channels.FrameAriaSnapshotResult> {\n    return { snapshot: await this._frame.ariaSnapshot(progress, params.selector) };\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_networkDispatchers"]
}
