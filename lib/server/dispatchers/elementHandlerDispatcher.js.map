{
  "version": 3,
  "sources": ["../../../src/server/dispatchers/elementHandlerDispatcher.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserContextDispatcher } from './browserContextDispatcher';\nimport { FrameDispatcher } from './frameDispatcher';\nimport { JSHandleDispatcher, parseArgument, serializeResult } from './jsHandleDispatcher';\n\nimport type { ElementHandle } from '../dom';\nimport type { Frame } from '../frames';\nimport type * as js from '../javascript';\nimport type * as channels from '@protocol/channels';\nimport type { Progress } from '@protocol/progress';\n\n\nexport class ElementHandleDispatcher extends JSHandleDispatcher<FrameDispatcher> implements channels.ElementHandleChannel {\n  _type_ElementHandle = true;\n\n  readonly _elementHandle: ElementHandle;\n\n  static from(scope: FrameDispatcher, handle: ElementHandle): ElementHandleDispatcher {\n    return scope.connection.existingDispatcher<ElementHandleDispatcher>(handle) || new ElementHandleDispatcher(scope, handle);\n  }\n\n  static fromNullable(scope: FrameDispatcher, handle: ElementHandle | null): ElementHandleDispatcher | undefined {\n    if (!handle)\n      return undefined;\n    return scope.connection.existingDispatcher<ElementHandleDispatcher>(handle) || new ElementHandleDispatcher(scope, handle);\n  }\n\n  static fromJSOrElementHandle(scope: FrameDispatcher, handle: js.JSHandle): JSHandleDispatcher {\n    const result = scope.connection.existingDispatcher<JSHandleDispatcher>(handle);\n    if (result)\n      return result;\n    const elementHandle = handle.asElement();\n    if (!elementHandle)\n      return new JSHandleDispatcher(scope, handle);\n    return new ElementHandleDispatcher(scope, elementHandle);\n  }\n\n  private constructor(scope: FrameDispatcher, elementHandle: ElementHandle) {\n    super(scope, elementHandle);\n    this._elementHandle = elementHandle;\n  }\n\n  async ownerFrame(params: channels.ElementHandleOwnerFrameParams, progress: Progress): Promise<channels.ElementHandleOwnerFrameResult> {\n    const frame = await this._elementHandle.ownerFrame();\n    return { frame: frame ? FrameDispatcher.from(this._browserContextDispatcher(), frame) : undefined };\n  }\n\n  async contentFrame(params: channels.ElementHandleContentFrameParams, progress: Progress): Promise<channels.ElementHandleContentFrameResult> {\n    const frame = await progress.race(this._elementHandle.contentFrame());\n    return { frame: frame ? FrameDispatcher.from(this._browserContextDispatcher(), frame) : undefined };\n  }\n\n  async getAttribute(params: channels.ElementHandleGetAttributeParams, progress: Progress): Promise<channels.ElementHandleGetAttributeResult> {\n    const value = await this._elementHandle.getAttribute(progress, params.name);\n    return { value: value === null ? undefined : value };\n  }\n\n  async inputValue(params: channels.ElementHandleInputValueParams, progress: Progress): Promise<channels.ElementHandleInputValueResult> {\n    const value = await this._elementHandle.inputValue(progress);\n    return { value };\n  }\n\n  async textContent(params: channels.ElementHandleTextContentParams, progress: Progress): Promise<channels.ElementHandleTextContentResult> {\n    const value = await this._elementHandle.textContent(progress);\n    return { value: value === null ? undefined : value };\n  }\n\n  async innerText(params: channels.ElementHandleInnerTextParams, progress: Progress): Promise<channels.ElementHandleInnerTextResult> {\n    return { value: await this._elementHandle.innerText(progress) };\n  }\n\n  async innerHTML(params: channels.ElementHandleInnerHTMLParams, progress: Progress): Promise<channels.ElementHandleInnerHTMLResult> {\n    return { value: await this._elementHandle.innerHTML(progress) };\n  }\n\n  async isChecked(params: channels.ElementHandleIsCheckedParams, progress: Progress): Promise<channels.ElementHandleIsCheckedResult> {\n    return { value: await this._elementHandle.isChecked(progress) };\n  }\n\n  async isDisabled(params: channels.ElementHandleIsDisabledParams, progress: Progress): Promise<channels.ElementHandleIsDisabledResult> {\n    return { value: await this._elementHandle.isDisabled(progress) };\n  }\n\n  async isEditable(params: channels.ElementHandleIsEditableParams, progress: Progress): Promise<channels.ElementHandleIsEditableResult> {\n    return { value: await this._elementHandle.isEditable(progress) };\n  }\n\n  async isEnabled(params: channels.ElementHandleIsEnabledParams, progress: Progress): Promise<channels.ElementHandleIsEnabledResult> {\n    return { value: await this._elementHandle.isEnabled(progress) };\n  }\n\n  async isHidden(params: channels.ElementHandleIsHiddenParams, progress: Progress): Promise<channels.ElementHandleIsHiddenResult> {\n    return { value: await this._elementHandle.isHidden(progress) };\n  }\n\n  async isVisible(params: channels.ElementHandleIsVisibleParams, progress: Progress): Promise<channels.ElementHandleIsVisibleResult> {\n    return { value: await this._elementHandle.isVisible(progress) };\n  }\n\n  async dispatchEvent(params: channels.ElementHandleDispatchEventParams, progress: Progress): Promise<void> {\n    await this._elementHandle.dispatchEvent(progress, params.type, parseArgument(params.eventInit));\n  }\n\n  async scrollIntoViewIfNeeded(params: channels.ElementHandleScrollIntoViewIfNeededParams, progress: Progress): Promise<void> {\n    await this._elementHandle.scrollIntoViewIfNeeded(progress);\n  }\n\n  async hover(params: channels.ElementHandleHoverParams, progress: Progress): Promise<void> {\n    return await this._elementHandle.hover(progress, params);\n  }\n\n  async click(params: channels.ElementHandleClickParams, progress: Progress): Promise<void> {\n    return await this._elementHandle.click(progress, params);\n  }\n\n  async dblclick(params: channels.ElementHandleDblclickParams, progress: Progress): Promise<void> {\n    return await this._elementHandle.dblclick(progress, params);\n  }\n\n  async tap(params: channels.ElementHandleTapParams, progress: Progress): Promise<void> {\n    return await this._elementHandle.tap(progress, params);\n  }\n\n  async selectOption(params: channels.ElementHandleSelectOptionParams, progress: Progress): Promise<channels.ElementHandleSelectOptionResult> {\n    const elements = (params.elements || []).map(e => (e as ElementHandleDispatcher)._elementHandle);\n    return { values: await this._elementHandle.selectOption(progress, elements, params.options || [], params) };\n  }\n\n  async fill(params: channels.ElementHandleFillParams, progress: Progress): Promise<void> {\n    return await this._elementHandle.fill(progress, params.value, params);\n  }\n\n  async selectText(params: channels.ElementHandleSelectTextParams, progress: Progress): Promise<void> {\n    await this._elementHandle.selectText(progress, params);\n  }\n\n  async setInputFiles(params: channels.ElementHandleSetInputFilesParams, progress: Progress): Promise<void> {\n    return await this._elementHandle.setInputFiles(progress, params);\n  }\n\n  async focus(params: channels.ElementHandleFocusParams, progress: Progress): Promise<void> {\n    await this._elementHandle.focus(progress);\n  }\n\n  async type(params: channels.ElementHandleTypeParams, progress: Progress): Promise<void> {\n    return await this._elementHandle.type(progress, params.text, params);\n  }\n\n  async press(params: channels.ElementHandlePressParams, progress: Progress): Promise<void> {\n    return await this._elementHandle.press(progress, params.key, params);\n  }\n\n  async check(params: channels.ElementHandleCheckParams, progress: Progress): Promise<void> {\n    return await this._elementHandle.check(progress, params);\n  }\n\n  async uncheck(params: channels.ElementHandleUncheckParams, progress: Progress): Promise<void> {\n    return await this._elementHandle.uncheck(progress, params);\n  }\n\n  async boundingBox(params: channels.ElementHandleBoundingBoxParams, progress: Progress): Promise<channels.ElementHandleBoundingBoxResult> {\n    const value = await progress.race(this._elementHandle.boundingBox());\n    return { value: value || undefined };\n  }\n\n  async screenshot(params: channels.ElementHandleScreenshotParams, progress: Progress): Promise<channels.ElementHandleScreenshotResult> {\n    const mask: { frame: Frame, selector: string }[] = (params.mask || []).map(({ frame, selector }) => ({\n      frame: (frame as FrameDispatcher)._object,\n      selector,\n    }));\n    return { binary: await this._elementHandle.screenshot(progress, { ...params, mask }) };\n  }\n\n  async querySelector(params: channels.ElementHandleQuerySelectorParams, progress: Progress): Promise<channels.ElementHandleQuerySelectorResult> {\n    const handle = await progress.race(this._elementHandle.querySelector(params.selector, params));\n    return { element: ElementHandleDispatcher.fromNullable(this.parentScope(), handle) };\n  }\n\n  async querySelectorAll(params: channels.ElementHandleQuerySelectorAllParams, progress: Progress): Promise<channels.ElementHandleQuerySelectorAllResult> {\n    const elements = await progress.race(this._elementHandle.querySelectorAll(params.selector));\n    return { elements: elements.map(e => ElementHandleDispatcher.from(this.parentScope(), e)) };\n  }\n\n  async evalOnSelector(params: channels.ElementHandleEvalOnSelectorParams, progress: Progress): Promise<channels.ElementHandleEvalOnSelectorResult> {\n    return { value: serializeResult(await progress.race(this._elementHandle.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, parseArgument(params.arg)))) };\n  }\n\n  async evalOnSelectorAll(params: channels.ElementHandleEvalOnSelectorAllParams, progress: Progress): Promise<channels.ElementHandleEvalOnSelectorAllResult> {\n    return { value: serializeResult(await progress.race(this._elementHandle.evalOnSelectorAll(params.selector, params.expression, params.isFunction, parseArgument(params.arg)))) };\n  }\n\n  async waitForElementState(params: channels.ElementHandleWaitForElementStateParams, progress: Progress): Promise<void> {\n    await this._elementHandle.waitForElementState(progress, params.state);\n  }\n\n  async waitForSelector(params: channels.ElementHandleWaitForSelectorParams, progress: Progress): Promise<channels.ElementHandleWaitForSelectorResult> {\n    return { element: ElementHandleDispatcher.fromNullable(this.parentScope(), await this._elementHandle.waitForSelector(progress, params.selector, params)) };\n  }\n\n  private _browserContextDispatcher(): BrowserContextDispatcher {\n    const parentScope = this.parentScope().parentScope();\n    if (parentScope instanceof BrowserContextDispatcher)\n      return parentScope;\n    return parentScope.parentScope();\n  }\n\n}\n"],
  "mappings": "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",
  "names": []
}
