{
  "version": 3,
  "sources": ["../../../src/server/dispatchers/artifactDispatcher.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\n\nimport { Dispatcher } from './dispatcher';\nimport { StreamDispatcher } from './streamDispatcher';\nimport { mkdirIfNeeded } from '../utils/fileUtils';\n\nimport type { DispatcherScope } from './dispatcher';\nimport type { Artifact } from '../artifact';\nimport type * as channels from '@protocol/channels';\nimport type { Progress } from '@protocol/progress';\n\nexport class ArtifactDispatcher extends Dispatcher<Artifact, channels.ArtifactChannel, DispatcherScope> implements channels.ArtifactChannel {\n  _type_Artifact = true;\n\n  static from(parentScope: DispatcherScope, artifact: Artifact): ArtifactDispatcher {\n    return ArtifactDispatcher.fromNullable(parentScope, artifact)!;\n  }\n\n  static fromNullable(parentScope: DispatcherScope, artifact: Artifact): ArtifactDispatcher | undefined {\n    if (!artifact)\n      return undefined;\n    const result = parentScope.connection.existingDispatcher<ArtifactDispatcher>(artifact);\n    return result || new ArtifactDispatcher(parentScope, artifact);\n  }\n\n  private constructor(scope: DispatcherScope, artifact: Artifact) {\n    super(scope, artifact, 'Artifact', {\n      absolutePath: artifact.localPath(),\n    });\n  }\n\n  async pathAfterFinished(params: channels.ArtifactPathAfterFinishedParams, progress: Progress): Promise<channels.ArtifactPathAfterFinishedResult> {\n    const path = await progress.race(this._object.localPathAfterFinished());\n    return { value: path };\n  }\n\n  async saveAs(params: channels.ArtifactSaveAsParams, progress: Progress): Promise<channels.ArtifactSaveAsResult> {\n    return await progress.race(new Promise((resolve, reject) => {\n      this._object.saveAs(async (localPath, error) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        try {\n          await mkdirIfNeeded(params.path);\n          await fs.promises.copyFile(localPath, params.path);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }));\n  }\n\n  async saveAsStream(params: channels.ArtifactSaveAsStreamParams, progress: Progress): Promise<channels.ArtifactSaveAsStreamResult> {\n    return await progress.race(new Promise((resolve, reject) => {\n      this._object.saveAs(async (localPath, error) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        try {\n          const readable = fs.createReadStream(localPath, { highWaterMark: 1024 * 1024 });\n          const stream = new StreamDispatcher(this, readable);\n          // Resolve with a stream, so that client starts saving the data.\n          resolve({ stream });\n          // Block the Artifact until the stream is consumed.\n          await new Promise<void>(resolve => {\n            readable.on('close', resolve);\n            readable.on('end', resolve);\n            readable.on('error', resolve);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }));\n  }\n\n  async stream(params: channels.ArtifactStreamParams, progress: Progress): Promise<channels.ArtifactStreamResult> {\n    const fileName = await progress.race(this._object.localPathAfterFinished());\n    const readable = fs.createReadStream(fileName, { highWaterMark: 1024 * 1024 });\n    return { stream: new StreamDispatcher(this, readable) };\n  }\n\n  async failure(params: channels.ArtifactFailureParams, progress: Progress): Promise<channels.ArtifactFailureResult> {\n    const error = await progress.race(this._object.failureError());\n    return { error: error || undefined };\n  }\n\n  async cancel(params: channels.ArtifactCancelParams, progress: Progress): Promise<void> {\n    await progress.race(this._object.cancel());\n  }\n\n  async delete(params: channels.ArtifactDeleteParams, progress: Progress): Promise<void> {\n    progress.metadata.potentiallyClosesScope = true;\n    await progress.race(this._object.delete());\n    this._dispose();\n  }\n}\n"],
  "mappings": "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",
  "names": ["fs", "resolve"]
}
