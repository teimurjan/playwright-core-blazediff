{
  "version": 3,
  "sources": ["../../../src/server/dispatchers/dispatcher.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\n\nimport { eventsHelper } from '../utils/eventsHelper';\nimport { ValidationError, createMetadataValidator, findValidator  } from '../../protocol/validator';\nimport { assert, monotonicTime, rewriteErrorMessage, debugLogger } from '../../utils';\nimport { isUnderTest } from '../utils/debug';\nimport { TargetClosedError, isTargetClosedError, serializeError } from '../errors';\nimport { createRootSdkObject, SdkObject } from '../instrumentation';\nimport { isProtocolError } from '../protocolError';\nimport { compressCallLog } from '../callLog';\nimport { methodMetainfo } from '../../utils/isomorphic/protocolMetainfo';\nimport { Progress, ProgressController } from '../progress';\n\nimport type { CallMetadata } from '../instrumentation';\nimport type { PlaywrightDispatcher } from './playwrightDispatcher';\nimport type { RegisteredListener } from '../utils/eventsHelper';\nimport type { ValidatorContext } from '../../protocol/validator';\nimport type * as channels from '@protocol/channels';\n\nconst metadataValidator = createMetadataValidator();\n\nlet maxDispatchersOverride: number | undefined;\nexport function setMaxDispatchersForTest(value: number | undefined) {\n  maxDispatchersOverride = value;\n}\nfunction maxDispatchersForBucket(gcBucket: string) {\n  return maxDispatchersOverride ?? {\n    'JSHandle': 100000,\n    'ElementHandle': 100000,\n  }[gcBucket] ?? 10000;\n}\n\nexport class Dispatcher<Type extends SdkObject, ChannelType, ParentScopeType extends DispatcherScope> extends EventEmitter implements channels.Channel {\n  readonly connection: DispatcherConnection;\n  private _parent: ParentScopeType | undefined;\n  private _dispatchers = new Map<string, DispatcherScope>();\n  protected _disposed = false;\n  protected _eventListeners: RegisteredListener[] = [];\n  private _activeProgressControllers = new Set<ProgressController>();\n\n  readonly _guid: string;\n  readonly _type: string;\n  readonly _gcBucket: string;\n  _object: Type;\n\n  constructor(parent: ParentScopeType | DispatcherConnection, object: Type, type: string, initializer: channels.InitializerTraits<ChannelType>, gcBucket?: string) {\n    super();\n\n    this.connection = parent instanceof DispatcherConnection ? parent : parent.connection;\n    this._parent = parent instanceof DispatcherConnection ? undefined : parent;\n\n    const guid = object.guid;\n    this._guid = guid;\n    this._type = type;\n    this._object = object;\n    this._gcBucket = gcBucket ?? type;\n\n    this.connection.registerDispatcher(this);\n    if (this._parent) {\n      assert(!this._parent._dispatchers.has(guid));\n      this._parent._dispatchers.set(guid, this);\n    }\n\n    if (this._parent)\n      this.connection.sendCreate(this._parent, type, guid, initializer);\n    this.connection.maybeDisposeStaleDispatchers(this._gcBucket);\n  }\n\n  parentScope(): ParentScopeType {\n    return this._parent!;\n  }\n\n  addObjectListener(eventName: (string | symbol), handler: (...args: any[]) => void) {\n    this._eventListeners.push(eventsHelper.addEventListener(this._object as unknown as EventEmitter, eventName, handler));\n  }\n\n  adopt(child: DispatcherScope) {\n    if (child._parent === this)\n      return;\n    const oldParent = child._parent!;\n    oldParent._dispatchers.delete(child._guid);\n    this._dispatchers.set(child._guid, child);\n    child._parent = this;\n    this.connection.sendAdopt(this, child);\n  }\n\n  async _runCommand(callMetadata: CallMetadata, method: string, validParams: any) {\n    const controller = new ProgressController(callMetadata, message => {\n      const logName = this._object.logName || 'api';\n      debugLogger.log(logName, message);\n      this._object.instrumentation.onCallLog(this._object, callMetadata, logName, message);\n    });\n    this._activeProgressControllers.add(controller);\n    try {\n      return await controller.run(progress => (this as any)[method](validParams, progress), validParams?.timeout);\n    } finally {\n      this._activeProgressControllers.delete(controller);\n    }\n  }\n\n  _dispatchEvent<T extends keyof channels.EventsTraits<ChannelType>>(method: T, params?: channels.EventsTraits<ChannelType>[T]) {\n    if (this._disposed) {\n      if (isUnderTest())\n        throw new Error(`${this._guid} is sending \"${String(method)}\" event after being disposed`);\n      // Just ignore this event outside of tests.\n      return;\n    }\n    this.connection.sendEvent(this, method as string, params);\n  }\n\n  _dispose(reason?: 'gc') {\n    this._disposeRecursively(new TargetClosedError());\n    this.connection.sendDispose(this, reason);\n  }\n\n  protected _onDispose() {\n  }\n\n  async stopPendingOperations(error: Error) {\n    const controllers: ProgressController[] = [];\n    const collect = (dispatcher: DispatcherScope) => {\n      controllers.push(...dispatcher._activeProgressControllers);\n      for (const child of [...dispatcher._dispatchers.values()])\n        collect(child);\n    };\n    collect(this);\n    await Promise.all(controllers.map(controller => controller.abort(error)));\n  }\n\n  private _disposeRecursively(error: Error) {\n    assert(!this._disposed, `${this._guid} is disposed more than once`);\n    for (const controller of this._activeProgressControllers) {\n      if (!controller.metadata.potentiallyClosesScope)\n        controller.abort(error).catch(() => {});\n    }\n    this._onDispose();\n    this._disposed = true;\n    eventsHelper.removeEventListeners(this._eventListeners);\n\n    // Clean up from parent and connection.\n    this._parent?._dispatchers.delete(this._guid);\n    const list = this.connection._dispatchersByBucket.get(this._gcBucket);\n    list?.delete(this._guid);\n    this.connection._dispatcherByGuid.delete(this._guid);\n    this.connection._dispatcherByObject.delete(this._object);\n\n    // Dispose all children.\n    for (const dispatcher of [...this._dispatchers.values()])\n      dispatcher._disposeRecursively(error);\n    this._dispatchers.clear();\n  }\n\n  _debugScopeState(): any {\n    return {\n      _guid: this._guid,\n      objects: Array.from(this._dispatchers.values()).map(o => o._debugScopeState()),\n    };\n  }\n\n  async waitForEventInfo(): Promise<void> {\n    // Instrumentation takes care of this.\n  }\n}\n\nexport type DispatcherScope = Dispatcher<SdkObject, any, any>;\n\nexport class RootDispatcher extends Dispatcher<SdkObject, any, any> {\n  private _initialized = false;\n\n  constructor(connection: DispatcherConnection, private readonly createPlaywright?: (scope: RootDispatcher, options: channels.RootInitializeParams) => Promise<PlaywrightDispatcher>) {\n    super(connection, createRootSdkObject(), 'Root', {});\n  }\n\n  async initialize(params: channels.RootInitializeParams, progress: Progress): Promise<channels.RootInitializeResult> {\n    // Note: progress is deliberately ignored here.\n    assert(this.createPlaywright);\n    assert(!this._initialized);\n    this._initialized = true;\n    return {\n      playwright: await this.createPlaywright(this, params),\n    };\n  }\n}\n\nexport class DispatcherConnection {\n  readonly _dispatcherByGuid = new Map<string, DispatcherScope>();\n  readonly _dispatcherByObject = new Map<any, DispatcherScope>();\n  readonly _dispatchersByBucket = new Map<string, Set<string>>();\n  onmessage = (message: object) => {};\n  private _waitOperations = new Map<string, CallMetadata>();\n  private _isLocal: boolean;\n\n  constructor(isLocal?: boolean) {\n    this._isLocal = !!isLocal;\n  }\n\n  sendEvent(dispatcher: DispatcherScope, event: string, params: any) {\n    const validator = findValidator(dispatcher._type, event, 'Event');\n    params = validator(params, '', this._validatorToWireContext());\n    this.onmessage({ guid: dispatcher._guid, method: event, params });\n  }\n\n  sendCreate(parent: DispatcherScope, type: string, guid: string, initializer: any) {\n    const validator = findValidator(type, '', 'Initializer');\n    initializer = validator(initializer, '', this._validatorToWireContext());\n    this.onmessage({ guid: parent._guid, method: '__create__', params: { type, initializer, guid } });\n  }\n\n  sendAdopt(parent: DispatcherScope, dispatcher: DispatcherScope) {\n    this.onmessage({ guid: parent._guid, method: '__adopt__', params: { guid: dispatcher._guid } });\n  }\n\n  sendDispose(dispatcher: DispatcherScope, reason?: 'gc') {\n    this.onmessage({ guid: dispatcher._guid, method: '__dispose__', params: { reason } });\n  }\n\n  private _validatorToWireContext(): ValidatorContext {\n    return {\n      tChannelImpl: this._tChannelImplToWire.bind(this),\n      binary: this._isLocal ? 'buffer' : 'toBase64',\n      isUnderTest,\n    };\n  }\n\n  private _validatorFromWireContext(): ValidatorContext {\n    return {\n      tChannelImpl: this._tChannelImplFromWire.bind(this),\n      binary: this._isLocal ? 'buffer' : 'fromBase64',\n      isUnderTest,\n    };\n  }\n\n  private _tChannelImplFromWire(names: '*' | string[], arg: any, path: string, context: ValidatorContext): any {\n    if (arg && typeof arg === 'object' && typeof arg.guid === 'string') {\n      const guid = arg.guid;\n      const dispatcher = this._dispatcherByGuid.get(guid);\n      if (!dispatcher)\n        throw new ValidationError(`${path}: no object with guid ${guid}`);\n      if (names !== '*' && !names.includes(dispatcher._type))\n        throw new ValidationError(`${path}: object with guid ${guid} has type ${dispatcher._type}, expected ${names.toString()}`);\n      return dispatcher;\n    }\n    throw new ValidationError(`${path}: expected guid for ${names.toString()}`);\n  }\n\n  private _tChannelImplToWire(names: '*' | string[], arg: any, path: string, context: ValidatorContext): any {\n    if (arg instanceof Dispatcher)  {\n      if (names !== '*' && !names.includes(arg._type))\n        throw new ValidationError(`${path}: dispatcher with guid ${arg._guid} has type ${arg._type}, expected ${names.toString()}`);\n      return { guid: arg._guid };\n    }\n    throw new ValidationError(`${path}: expected dispatcher ${names.toString()}`);\n  }\n\n  existingDispatcher<DispatcherType>(object: any): DispatcherType | undefined {\n    return this._dispatcherByObject.get(object) as DispatcherType | undefined;\n  }\n\n  registerDispatcher(dispatcher: DispatcherScope) {\n    assert(!this._dispatcherByGuid.has(dispatcher._guid));\n    this._dispatcherByGuid.set(dispatcher._guid, dispatcher);\n    this._dispatcherByObject.set(dispatcher._object, dispatcher);\n    let list = this._dispatchersByBucket.get(dispatcher._gcBucket);\n    if (!list) {\n      list = new Set();\n      this._dispatchersByBucket.set(dispatcher._gcBucket, list);\n    }\n    list.add(dispatcher._guid);\n  }\n\n  maybeDisposeStaleDispatchers(gcBucket: string) {\n    const maxDispatchers = maxDispatchersForBucket(gcBucket);\n    const list = this._dispatchersByBucket.get(gcBucket);\n    if (!list || list.size <= maxDispatchers)\n      return;\n    const dispatchersArray = [...list];\n    const disposeCount = (maxDispatchers / 10) | 0;\n    this._dispatchersByBucket.set(gcBucket, new Set(dispatchersArray.slice(disposeCount)));\n    for (let i = 0; i < disposeCount; ++i) {\n      const d = this._dispatcherByGuid.get(dispatchersArray[i]);\n      if (!d)\n        continue;\n      d._dispose('gc');\n    }\n  }\n\n  async dispatch(message: object) {\n    const { id, guid, method, params, metadata } = message as any;\n    const dispatcher = this._dispatcherByGuid.get(guid);\n    if (!dispatcher) {\n      this.onmessage({ id, error: serializeError(new TargetClosedError()) });\n      return;\n    }\n\n    let validParams: any;\n    let validMetadata: channels.Metadata;\n    try {\n      const validator = findValidator(dispatcher._type, method, 'Params');\n      const validatorContext = this._validatorFromWireContext();\n      validParams = validator(params, '', validatorContext);\n      validMetadata = metadataValidator(metadata, '', validatorContext);\n      if (typeof (dispatcher as any)[method] !== 'function')\n        throw new Error(`Mismatching dispatcher: \"${dispatcher._type}\" does not implement \"${method}\"`);\n    } catch (e) {\n      this.onmessage({ id, error: serializeError(e) });\n      return;\n    }\n\n    const metainfo = methodMetainfo.get(dispatcher._type + '.' + method);\n    if (metainfo?.internal) {\n      // For non-js ports, it is easier to detect internal calls here rather\n      // than generate protocol metainfo for each language.\n      validMetadata.internal = true;\n    }\n\n    const sdkObject = dispatcher._object;\n    const callMetadata: CallMetadata = {\n      id: `call@${id}`,\n      location: validMetadata.location,\n      title: validMetadata.title,\n      internal: validMetadata.internal,\n      stepId: validMetadata.stepId,\n      objectId: sdkObject.guid,\n      pageId: sdkObject.attribution?.page?.guid,\n      frameId: sdkObject.attribution?.frame?.guid,\n      startTime: monotonicTime(),\n      endTime: 0,\n      type: dispatcher._type,\n      method,\n      params: params || {},\n      log: [],\n    };\n\n    if (params?.info?.waitId) {\n      // Process logs for waitForNavigation/waitForLoadState/etc.\n      const info = params.info;\n      switch (info.phase) {\n        case 'before': {\n          this._waitOperations.set(info.waitId, callMetadata);\n          await sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata);\n          this.onmessage({ id });\n          return;\n        } case 'log': {\n          const originalMetadata = this._waitOperations.get(info.waitId)!;\n          originalMetadata.log.push(info.message);\n          sdkObject.instrumentation.onCallLog(sdkObject, originalMetadata, 'api', info.message);\n          this.onmessage({ id });\n          return;\n        } case 'after': {\n          const originalMetadata = this._waitOperations.get(info.waitId)!;\n          originalMetadata.endTime = monotonicTime();\n          originalMetadata.error = info.error ? { error: { name: 'Error', message: info.error } } : undefined;\n          this._waitOperations.delete(info.waitId);\n          await sdkObject.instrumentation.onAfterCall(sdkObject, originalMetadata);\n          this.onmessage({ id });\n          return;\n        }\n      }\n    }\n\n    await sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata);\n    const response: any = { id };\n    try {\n      // If the dispatcher has been disposed while running the instrumentation call, error out.\n      if (this._dispatcherByGuid.get(guid) !== dispatcher)\n        throw new TargetClosedError(closeReason(sdkObject));\n      const result = await dispatcher._runCommand(callMetadata, method, validParams);\n      const validator = findValidator(dispatcher._type, method, 'Result');\n      response.result = validator(result, '', this._validatorToWireContext());\n      callMetadata.result = result;\n    } catch (e) {\n      if (isTargetClosedError(e)) {\n        const reason = closeReason(sdkObject);\n        if (reason)\n          rewriteErrorMessage(e, reason);\n      } else if (isProtocolError(e)) {\n        if (e.type === 'closed')\n          e = new TargetClosedError(closeReason(sdkObject), e.browserLogMessage());\n        else if (e.type === 'crashed')\n          rewriteErrorMessage(e, 'Target crashed ' + e.browserLogMessage());\n      }\n      response.error = serializeError(e);\n      // The command handler could have set error in the metadata, do not reset it if there was no exception.\n      callMetadata.error = response.error;\n    } finally {\n      callMetadata.endTime = monotonicTime();\n      await sdkObject.instrumentation.onAfterCall(sdkObject, callMetadata);\n      if (metainfo?.slowMo)\n        await this._doSlowMo(sdkObject);\n    }\n\n    if (response.error)\n      response.log = compressCallLog(callMetadata.log);\n    this.onmessage(response);\n  }\n\n  private async _doSlowMo(sdkObject: SdkObject): Promise<void> {\n    const slowMo = sdkObject.attribution.browser?.options.slowMo;\n    if (slowMo)\n      await new Promise(f => setTimeout(f, slowMo));\n  }\n}\n\nfunction closeReason(sdkObject: SdkObject): string | undefined {\n  return sdkObject.attribution.page?.closeReason ||\n    sdkObject.attribution.context?._closeReason ||\n    sdkObject.attribution.browser?._closeReason;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,oBAA6B;AAE7B,0BAA6B;AAC7B,uBAAyE;AACzE,mBAAwE;AACxE,mBAA4B;AAC5B,oBAAuE;AACvE,6BAA+C;AAC/C,2BAAgC;AAChC,qBAAgC;AAChC,8BAA+B;AAC/B,sBAA6C;AAQ7C,MAAM,wBAAoB,0CAAwB;AAElD,IAAI;AACG,SAAS,yBAAyB,OAA2B;AAClE,2BAAyB;AAC3B;AACA,SAAS,wBAAwB,UAAkB;AACjD,SAAO,0BAA0B;AAAA,IAC/B,YAAY;AAAA,IACZ,iBAAiB;AAAA,EACnB,EAAE,QAAQ,KAAK;AACjB;AAEO,MAAM,mBAAiG,2BAAyC;AAAA,EAarJ,YAAY,QAAgD,QAAc,MAAc,aAAsD,UAAmB;AAC/J,UAAM;AAXR,SAAQ,eAAe,oBAAI,IAA6B;AACxD,SAAU,YAAY;AACtB,SAAU,kBAAwC,CAAC;AACnD,SAAQ,6BAA6B,oBAAI,IAAwB;AAU/D,SAAK,aAAa,kBAAkB,uBAAuB,SAAS,OAAO;AAC3E,SAAK,UAAU,kBAAkB,uBAAuB,SAAY;AAEpE,UAAM,OAAO,OAAO;AACpB,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,UAAU;AACf,SAAK,YAAY,YAAY;AAE7B,SAAK,WAAW,mBAAmB,IAAI;AACvC,QAAI,KAAK,SAAS;AAChB,+BAAO,CAAC,KAAK,QAAQ,aAAa,IAAI,IAAI,CAAC;AAC3C,WAAK,QAAQ,aAAa,IAAI,MAAM,IAAI;AAAA,IAC1C;AAEA,QAAI,KAAK;AACP,WAAK,WAAW,WAAW,KAAK,SAAS,MAAM,MAAM,WAAW;AAClE,SAAK,WAAW,6BAA6B,KAAK,SAAS;AAAA,EAC7D;AAAA,EAEA,cAA+B;AAC7B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,kBAAkB,WAA8B,SAAmC;AACjF,SAAK,gBAAgB,KAAK,iCAAa,iBAAiB,KAAK,SAAoC,WAAW,OAAO,CAAC;AAAA,EACtH;AAAA,EAEA,MAAM,OAAwB;AAC5B,QAAI,MAAM,YAAY;AACpB;AACF,UAAM,YAAY,MAAM;AACxB,cAAU,aAAa,OAAO,MAAM,KAAK;AACzC,SAAK,aAAa,IAAI,MAAM,OAAO,KAAK;AACxC,UAAM,UAAU;AAChB,SAAK,WAAW,UAAU,MAAM,KAAK;AAAA,EACvC;AAAA,EAEA,MAAM,YAAY,cAA4B,QAAgB,aAAkB;AAC9E,UAAM,aAAa,IAAI,mCAAmB,cAAc,aAAW;AACjE,YAAM,UAAU,KAAK,QAAQ,WAAW;AACxC,+BAAY,IAAI,SAAS,OAAO;AAChC,WAAK,QAAQ,gBAAgB,UAAU,KAAK,SAAS,cAAc,SAAS,OAAO;AAAA,IACrF,CAAC;AACD,SAAK,2BAA2B,IAAI,UAAU;AAC9C,QAAI;AACF,aAAO,MAAM,WAAW,IAAI,cAAa,KAAa,MAAM,EAAE,aAAa,QAAQ,GAAG,aAAa,OAAO;AAAA,IAC5G,UAAE;AACA,WAAK,2BAA2B,OAAO,UAAU;AAAA,IACnD;AAAA,EACF;AAAA,EAEA,eAAmE,QAAW,QAAgD;AAC5H,QAAI,KAAK,WAAW;AAClB,cAAI,0BAAY;AACd,cAAM,IAAI,MAAM,GAAG,KAAK,KAAK,gBAAgB,OAAO,MAAM,CAAC,8BAA8B;AAE3F;AAAA,IACF;AACA,SAAK,WAAW,UAAU,MAAM,QAAkB,MAAM;AAAA,EAC1D;AAAA,EAEA,SAAS,QAAe;AACtB,SAAK,oBAAoB,IAAI,gCAAkB,CAAC;AAChD,SAAK,WAAW,YAAY,MAAM,MAAM;AAAA,EAC1C;AAAA,EAEU,aAAa;AAAA,EACvB;AAAA,EAEA,MAAM,sBAAsB,OAAc;AACxC,UAAM,cAAoC,CAAC;AAC3C,UAAM,UAAU,CAAC,eAAgC;AAC/C,kBAAY,KAAK,GAAG,WAAW,0BAA0B;AACzD,iBAAW,SAAS,CAAC,GAAG,WAAW,aAAa,OAAO,CAAC;AACtD,gBAAQ,KAAK;AAAA,IACjB;AACA,YAAQ,IAAI;AACZ,UAAM,QAAQ,IAAI,YAAY,IAAI,gBAAc,WAAW,MAAM,KAAK,CAAC,CAAC;AAAA,EAC1E;AAAA,EAEQ,oBAAoB,OAAc;AACxC,6BAAO,CAAC,KAAK,WAAW,GAAG,KAAK,KAAK,6BAA6B;AAClE,eAAW,cAAc,KAAK,4BAA4B;AACxD,UAAI,CAAC,WAAW,SAAS;AACvB,mBAAW,MAAM,KAAK,EAAE,MAAM,MAAM;AAAA,QAAC,CAAC;AAAA,IAC1C;AACA,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,qCAAa,qBAAqB,KAAK,eAAe;AAGtD,SAAK,SAAS,aAAa,OAAO,KAAK,KAAK;AAC5C,UAAM,OAAO,KAAK,WAAW,qBAAqB,IAAI,KAAK,SAAS;AACpE,UAAM,OAAO,KAAK,KAAK;AACvB,SAAK,WAAW,kBAAkB,OAAO,KAAK,KAAK;AACnD,SAAK,WAAW,oBAAoB,OAAO,KAAK,OAAO;AAGvD,eAAW,cAAc,CAAC,GAAG,KAAK,aAAa,OAAO,CAAC;AACrD,iBAAW,oBAAoB,KAAK;AACtC,SAAK,aAAa,MAAM;AAAA,EAC1B;AAAA,EAEA,mBAAwB;AACtB,WAAO;AAAA,MACL,OAAO,KAAK;AAAA,MACZ,SAAS,MAAM,KAAK,KAAK,aAAa,OAAO,CAAC,EAAE,IAAI,OAAK,EAAE,iBAAiB,CAAC;AAAA,IAC/E;AAAA,EACF;AAAA,EAEA,MAAM,mBAAkC;AAAA,EAExC;AACF;AAIO,MAAM,uBAAuB,WAAgC;AAAA,EAGlE,YAAY,YAAmD,kBAAqH;AAClL,UAAM,gBAAY,4CAAoB,GAAG,QAAQ,CAAC,CAAC;AADU;AAF/D,SAAQ,eAAe;AAAA,EAIvB;AAAA,EAEA,MAAM,WAAW,QAAuC,UAA4D;AAElH,6BAAO,KAAK,gBAAgB;AAC5B,6BAAO,CAAC,KAAK,YAAY;AACzB,SAAK,eAAe;AACpB,WAAO;AAAA,MACL,YAAY,MAAM,KAAK,iBAAiB,MAAM,MAAM;AAAA,IACtD;AAAA,EACF;AACF;AAEO,MAAM,qBAAqB;AAAA,EAQhC,YAAY,SAAmB;AAP/B,SAAS,oBAAoB,oBAAI,IAA6B;AAC9D,SAAS,sBAAsB,oBAAI,IAA0B;AAC7D,SAAS,uBAAuB,oBAAI,IAAyB;AAC7D,qBAAY,CAAC,YAAoB;AAAA,IAAC;AAClC,SAAQ,kBAAkB,oBAAI,IAA0B;AAItD,SAAK,WAAW,CAAC,CAAC;AAAA,EACpB;AAAA,EAEA,UAAU,YAA6B,OAAe,QAAa;AACjE,UAAM,gBAAY,gCAAc,WAAW,OAAO,OAAO,OAAO;AAChE,aAAS,UAAU,QAAQ,IAAI,KAAK,wBAAwB,CAAC;AAC7D,SAAK,UAAU,EAAE,MAAM,WAAW,OAAO,QAAQ,OAAO,OAAO,CAAC;AAAA,EAClE;AAAA,EAEA,WAAW,QAAyB,MAAc,MAAc,aAAkB;AAChF,UAAM,gBAAY,gCAAc,MAAM,IAAI,aAAa;AACvD,kBAAc,UAAU,aAAa,IAAI,KAAK,wBAAwB,CAAC;AACvE,SAAK,UAAU,EAAE,MAAM,OAAO,OAAO,QAAQ,cAAc,QAAQ,EAAE,MAAM,aAAa,KAAK,EAAE,CAAC;AAAA,EAClG;AAAA,EAEA,UAAU,QAAyB,YAA6B;AAC9D,SAAK,UAAU,EAAE,MAAM,OAAO,OAAO,QAAQ,aAAa,QAAQ,EAAE,MAAM,WAAW,MAAM,EAAE,CAAC;AAAA,EAChG;AAAA,EAEA,YAAY,YAA6B,QAAe;AACtD,SAAK,UAAU,EAAE,MAAM,WAAW,OAAO,QAAQ,eAAe,QAAQ,EAAE,OAAO,EAAE,CAAC;AAAA,EACtF;AAAA,EAEQ,0BAA4C;AAClD,WAAO;AAAA,MACL,cAAc,KAAK,oBAAoB,KAAK,IAAI;AAAA,MAChD,QAAQ,KAAK,WAAW,WAAW;AAAA,MACnC;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,4BAA8C;AACpD,WAAO;AAAA,MACL,cAAc,KAAK,sBAAsB,KAAK,IAAI;AAAA,MAClD,QAAQ,KAAK,WAAW,WAAW;AAAA,MACnC;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,sBAAsB,OAAuB,KAAU,MAAc,SAAgC;AAC3G,QAAI,OAAO,OAAO,QAAQ,YAAY,OAAO,IAAI,SAAS,UAAU;AAClE,YAAM,OAAO,IAAI;AACjB,YAAM,aAAa,KAAK,kBAAkB,IAAI,IAAI;AAClD,UAAI,CAAC;AACH,cAAM,IAAI,iCAAgB,GAAG,IAAI,yBAAyB,IAAI,EAAE;AAClE,UAAI,UAAU,OAAO,CAAC,MAAM,SAAS,WAAW,KAAK;AACnD,cAAM,IAAI,iCAAgB,GAAG,IAAI,sBAAsB,IAAI,aAAa,WAAW,KAAK,cAAc,MAAM,SAAS,CAAC,EAAE;AAC1H,aAAO;AAAA,IACT;AACA,UAAM,IAAI,iCAAgB,GAAG,IAAI,uBAAuB,MAAM,SAAS,CAAC,EAAE;AAAA,EAC5E;AAAA,EAEQ,oBAAoB,OAAuB,KAAU,MAAc,SAAgC;AACzG,QAAI,eAAe,YAAa;AAC9B,UAAI,UAAU,OAAO,CAAC,MAAM,SAAS,IAAI,KAAK;AAC5C,cAAM,IAAI,iCAAgB,GAAG,IAAI,0BAA0B,IAAI,KAAK,aAAa,IAAI,KAAK,cAAc,MAAM,SAAS,CAAC,EAAE;AAC5H,aAAO,EAAE,MAAM,IAAI,MAAM;AAAA,IAC3B;AACA,UAAM,IAAI,iCAAgB,GAAG,IAAI,yBAAyB,MAAM,SAAS,CAAC,EAAE;AAAA,EAC9E;AAAA,EAEA,mBAAmC,QAAyC;AAC1E,WAAO,KAAK,oBAAoB,IAAI,MAAM;AAAA,EAC5C;AAAA,EAEA,mBAAmB,YAA6B;AAC9C,6BAAO,CAAC,KAAK,kBAAkB,IAAI,WAAW,KAAK,CAAC;AACpD,SAAK,kBAAkB,IAAI,WAAW,OAAO,UAAU;AACvD,SAAK,oBAAoB,IAAI,WAAW,SAAS,UAAU;AAC3D,QAAI,OAAO,KAAK,qBAAqB,IAAI,WAAW,SAAS;AAC7D,QAAI,CAAC,MAAM;AACT,aAAO,oBAAI,IAAI;AACf,WAAK,qBAAqB,IAAI,WAAW,WAAW,IAAI;AAAA,IAC1D;AACA,SAAK,IAAI,WAAW,KAAK;AAAA,EAC3B;AAAA,EAEA,6BAA6B,UAAkB;AAC7C,UAAM,iBAAiB,wBAAwB,QAAQ;AACvD,UAAM,OAAO,KAAK,qBAAqB,IAAI,QAAQ;AACnD,QAAI,CAAC,QAAQ,KAAK,QAAQ;AACxB;AACF,UAAM,mBAAmB,CAAC,GAAG,IAAI;AACjC,UAAM,eAAgB,iBAAiB,KAAM;AAC7C,SAAK,qBAAqB,IAAI,UAAU,IAAI,IAAI,iBAAiB,MAAM,YAAY,CAAC,CAAC;AACrF,aAAS,IAAI,GAAG,IAAI,cAAc,EAAE,GAAG;AACrC,YAAM,IAAI,KAAK,kBAAkB,IAAI,iBAAiB,CAAC,CAAC;AACxD,UAAI,CAAC;AACH;AACF,QAAE,SAAS,IAAI;AAAA,IACjB;AAAA,EACF;AAAA,EAEA,MAAM,SAAS,SAAiB;AAC9B,UAAM,EAAE,IAAI,MAAM,QAAQ,QAAQ,SAAS,IAAI;AAC/C,UAAM,aAAa,KAAK,kBAAkB,IAAI,IAAI;AAClD,QAAI,CAAC,YAAY;AACf,WAAK,UAAU,EAAE,IAAI,WAAO,8BAAe,IAAI,gCAAkB,CAAC,EAAE,CAAC;AACrE;AAAA,IACF;AAEA,QAAI;AACJ,QAAI;AACJ,QAAI;AACF,YAAM,gBAAY,gCAAc,WAAW,OAAO,QAAQ,QAAQ;AAClE,YAAM,mBAAmB,KAAK,0BAA0B;AACxD,oBAAc,UAAU,QAAQ,IAAI,gBAAgB;AACpD,sBAAgB,kBAAkB,UAAU,IAAI,gBAAgB;AAChE,UAAI,OAAQ,WAAmB,MAAM,MAAM;AACzC,cAAM,IAAI,MAAM,4BAA4B,WAAW,KAAK,yBAAyB,MAAM,GAAG;AAAA,IAClG,SAAS,GAAG;AACV,WAAK,UAAU,EAAE,IAAI,WAAO,8BAAe,CAAC,EAAE,CAAC;AAC/C;AAAA,IACF;AAEA,UAAM,WAAW,uCAAe,IAAI,WAAW,QAAQ,MAAM,MAAM;AACnE,QAAI,UAAU,UAAU;AAGtB,oBAAc,WAAW;AAAA,IAC3B;AAEA,UAAM,YAAY,WAAW;AAC7B,UAAM,eAA6B;AAAA,MACjC,IAAI,QAAQ,EAAE;AAAA,MACd,UAAU,cAAc;AAAA,MACxB,OAAO,cAAc;AAAA,MACrB,UAAU,cAAc;AAAA,MACxB,QAAQ,cAAc;AAAA,MACtB,UAAU,UAAU;AAAA,MACpB,QAAQ,UAAU,aAAa,MAAM;AAAA,MACrC,SAAS,UAAU,aAAa,OAAO;AAAA,MACvC,eAAW,4BAAc;AAAA,MACzB,SAAS;AAAA,MACT,MAAM,WAAW;AAAA,MACjB;AAAA,MACA,QAAQ,UAAU,CAAC;AAAA,MACnB,KAAK,CAAC;AAAA,IACR;AAEA,QAAI,QAAQ,MAAM,QAAQ;AAExB,YAAM,OAAO,OAAO;AACpB,cAAQ,KAAK,OAAO;AAAA,QAClB,KAAK,UAAU;AACb,eAAK,gBAAgB,IAAI,KAAK,QAAQ,YAAY;AAClD,gBAAM,UAAU,gBAAgB,aAAa,WAAW,YAAY;AACpE,eAAK,UAAU,EAAE,GAAG,CAAC;AACrB;AAAA,QACF;AAAA,QAAE,KAAK,OAAO;AACZ,gBAAM,mBAAmB,KAAK,gBAAgB,IAAI,KAAK,MAAM;AAC7D,2BAAiB,IAAI,KAAK,KAAK,OAAO;AACtC,oBAAU,gBAAgB,UAAU,WAAW,kBAAkB,OAAO,KAAK,OAAO;AACpF,eAAK,UAAU,EAAE,GAAG,CAAC;AACrB;AAAA,QACF;AAAA,QAAE,KAAK,SAAS;AACd,gBAAM,mBAAmB,KAAK,gBAAgB,IAAI,KAAK,MAAM;AAC7D,2BAAiB,cAAU,4BAAc;AACzC,2BAAiB,QAAQ,KAAK,QAAQ,EAAE,OAAO,EAAE,MAAM,SAAS,SAAS,KAAK,MAAM,EAAE,IAAI;AAC1F,eAAK,gBAAgB,OAAO,KAAK,MAAM;AACvC,gBAAM,UAAU,gBAAgB,YAAY,WAAW,gBAAgB;AACvE,eAAK,UAAU,EAAE,GAAG,CAAC;AACrB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,UAAM,UAAU,gBAAgB,aAAa,WAAW,YAAY;AACpE,UAAM,WAAgB,EAAE,GAAG;AAC3B,QAAI;AAEF,UAAI,KAAK,kBAAkB,IAAI,IAAI,MAAM;AACvC,cAAM,IAAI,gCAAkB,YAAY,SAAS,CAAC;AACpD,YAAM,SAAS,MAAM,WAAW,YAAY,cAAc,QAAQ,WAAW;AAC7E,YAAM,gBAAY,gCAAc,WAAW,OAAO,QAAQ,QAAQ;AAClE,eAAS,SAAS,UAAU,QAAQ,IAAI,KAAK,wBAAwB,CAAC;AACtE,mBAAa,SAAS;AAAA,IACxB,SAAS,GAAG;AACV,cAAI,mCAAoB,CAAC,GAAG;AAC1B,cAAM,SAAS,YAAY,SAAS;AACpC,YAAI;AACF,gDAAoB,GAAG,MAAM;AAAA,MACjC,eAAW,sCAAgB,CAAC,GAAG;AAC7B,YAAI,EAAE,SAAS;AACb,cAAI,IAAI,gCAAkB,YAAY,SAAS,GAAG,EAAE,kBAAkB,CAAC;AAAA,iBAChE,EAAE,SAAS;AAClB,gDAAoB,GAAG,oBAAoB,EAAE,kBAAkB,CAAC;AAAA,MACpE;AACA,eAAS,YAAQ,8BAAe,CAAC;AAEjC,mBAAa,QAAQ,SAAS;AAAA,IAChC,UAAE;AACA,mBAAa,cAAU,4BAAc;AACrC,YAAM,UAAU,gBAAgB,YAAY,WAAW,YAAY;AACnE,UAAI,UAAU;AACZ,cAAM,KAAK,UAAU,SAAS;AAAA,IAClC;AAEA,QAAI,SAAS;AACX,eAAS,UAAM,gCAAgB,aAAa,GAAG;AACjD,SAAK,UAAU,QAAQ;AAAA,EACzB;AAAA,EAEA,MAAc,UAAU,WAAqC;AAC3D,UAAM,SAAS,UAAU,YAAY,SAAS,QAAQ;AACtD,QAAI;AACF,YAAM,IAAI,QAAQ,OAAK,WAAW,GAAG,MAAM,CAAC;AAAA,EAChD;AACF;AAEA,SAAS,YAAY,WAA0C;AAC7D,SAAO,UAAU,YAAY,MAAM,eACjC,UAAU,YAAY,SAAS,gBAC/B,UAAU,YAAY,SAAS;AACnC;",
  "names": []
}
