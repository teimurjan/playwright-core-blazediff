{
  "version": 3,
  "sources": ["../../src/server/helper.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugLogger } from './utils/debugLogger';\nimport { eventsHelper } from './utils/eventsHelper';\n\nimport type { Progress } from './progress';\nimport type * as types from './types';\nimport type { RegisteredListener } from './utils/eventsHelper';\nimport type { EventEmitter } from 'events';\n\n\nconst MAX_LOG_LENGTH = process.env.MAX_LOG_LENGTH ? +process.env.MAX_LOG_LENGTH : Infinity;\n\nclass Helper {\n  static completeUserURL(urlString: string): string {\n    if (urlString.startsWith('localhost') || urlString.startsWith('127.0.0.1'))\n      urlString = 'http://' + urlString;\n    return urlString;\n  }\n\n  static enclosingIntRect(rect: types.Rect): types.Rect {\n    const x = Math.floor(rect.x + 1e-3);\n    const y = Math.floor(rect.y + 1e-3);\n    const x2 = Math.ceil(rect.x + rect.width - 1e-3);\n    const y2 = Math.ceil(rect.y + rect.height - 1e-3);\n    return { x, y, width: x2 - x, height: y2 - y };\n  }\n\n  static enclosingIntSize(size: types.Size): types.Size {\n    return { width: Math.floor(size.width + 1e-3), height: Math.floor(size.height + 1e-3) };\n  }\n\n  static getViewportSizeFromWindowFeatures(features: string[]): types.Size | null {\n    const widthString = features.find(f => f.startsWith('width='));\n    const heightString = features.find(f => f.startsWith('height='));\n    const width = widthString ? parseInt(widthString.substring(6), 10) : NaN;\n    const height = heightString ? parseInt(heightString.substring(7), 10) : NaN;\n    if (!Number.isNaN(width) && !Number.isNaN(height))\n      return { width, height };\n    return null;\n  }\n\n  static waitForEvent(progress: Progress, emitter: EventEmitter, event: string | symbol, predicate?: Function): { promise: Promise<any>, dispose: () => void } {\n    const listeners: RegisteredListener[] = [];\n    const dispose = () => eventsHelper.removeEventListeners(listeners);\n    const promise = progress.race(new Promise((resolve, reject) => {\n      listeners.push(eventsHelper.addEventListener(emitter, event, eventArg => {\n        try {\n          if (predicate && !predicate(eventArg))\n            return;\n          resolve(eventArg);\n        } catch (e) {\n          reject(e);\n        }\n      }));\n    })).finally(() => dispose());\n    return { promise, dispose };\n  }\n\n  static secondsToRoundishMillis(value: number): number {\n    return ((value * 1000000) | 0) / 1000;\n  }\n\n  static millisToRoundishMillis(value: number): number {\n    return ((value * 1000) | 0) / 1000;\n  }\n\n  static debugProtocolLogger(protocolLogger?: types.ProtocolLogger): types.ProtocolLogger {\n    return (direction: 'send' | 'receive', message: object) => {\n      if (protocolLogger)\n        protocolLogger(direction, message);\n      if (debugLogger.isEnabled('protocol')) {\n        let text = JSON.stringify(message);\n        if (text.length > MAX_LOG_LENGTH)\n          text = text.substring(0, MAX_LOG_LENGTH / 2) + ' <<<<<( LOG TRUNCATED )>>>>> ' + text.substring(text.length - MAX_LOG_LENGTH / 2);\n        debugLogger.log('protocol', (direction === 'send' ? 'SEND \u25BA ' : '\u25C0 RECV ') + text);\n      }\n    };\n  }\n\n  static formatBrowserLogs(logs: string[], disconnectReason?: string) {\n    if (!disconnectReason && !logs.length)\n      return '';\n    return '\\n' + (disconnectReason ? disconnectReason + '\\n' : '') + logs.join('\\n');\n  }\n}\n\nexport const helper = Helper;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,yBAA4B;AAC5B,0BAA6B;AAQ7B,MAAM,iBAAiB,QAAQ,IAAI,iBAAiB,CAAC,QAAQ,IAAI,iBAAiB;AAElF,MAAM,OAAO;AAAA,EACX,OAAO,gBAAgB,WAA2B;AAChD,QAAI,UAAU,WAAW,WAAW,KAAK,UAAU,WAAW,WAAW;AACvE,kBAAY,YAAY;AAC1B,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,iBAAiB,MAA8B;AACpD,UAAM,IAAI,KAAK,MAAM,KAAK,IAAI,IAAI;AAClC,UAAM,IAAI,KAAK,MAAM,KAAK,IAAI,IAAI;AAClC,UAAM,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,QAAQ,IAAI;AAC/C,UAAM,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,SAAS,IAAI;AAChD,WAAO,EAAE,GAAG,GAAG,OAAO,KAAK,GAAG,QAAQ,KAAK,EAAE;AAAA,EAC/C;AAAA,EAEA,OAAO,iBAAiB,MAA8B;AACpD,WAAO,EAAE,OAAO,KAAK,MAAM,KAAK,QAAQ,IAAI,GAAG,QAAQ,KAAK,MAAM,KAAK,SAAS,IAAI,EAAE;AAAA,EACxF;AAAA,EAEA,OAAO,kCAAkC,UAAuC;AAC9E,UAAM,cAAc,SAAS,KAAK,OAAK,EAAE,WAAW,QAAQ,CAAC;AAC7D,UAAM,eAAe,SAAS,KAAK,OAAK,EAAE,WAAW,SAAS,CAAC;AAC/D,UAAM,QAAQ,cAAc,SAAS,YAAY,UAAU,CAAC,GAAG,EAAE,IAAI;AACrE,UAAM,SAAS,eAAe,SAAS,aAAa,UAAU,CAAC,GAAG,EAAE,IAAI;AACxE,QAAI,CAAC,OAAO,MAAM,KAAK,KAAK,CAAC,OAAO,MAAM,MAAM;AAC9C,aAAO,EAAE,OAAO,OAAO;AACzB,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,aAAa,UAAoB,SAAuB,OAAwB,WAAsE;AAC3J,UAAM,YAAkC,CAAC;AACzC,UAAM,UAAU,MAAM,iCAAa,qBAAqB,SAAS;AACjE,UAAM,UAAU,SAAS,KAAK,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC7D,gBAAU,KAAK,iCAAa,iBAAiB,SAAS,OAAO,cAAY;AACvE,YAAI;AACF,cAAI,aAAa,CAAC,UAAU,QAAQ;AAClC;AACF,kBAAQ,QAAQ;AAAA,QAClB,SAAS,GAAG;AACV,iBAAO,CAAC;AAAA,QACV;AAAA,MACF,CAAC,CAAC;AAAA,IACJ,CAAC,CAAC,EAAE,QAAQ,MAAM,QAAQ,CAAC;AAC3B,WAAO,EAAE,SAAS,QAAQ;AAAA,EAC5B;AAAA,EAEA,OAAO,wBAAwB,OAAuB;AACpD,YAAS,QAAQ,MAAW,KAAK;AAAA,EACnC;AAAA,EAEA,OAAO,uBAAuB,OAAuB;AACnD,YAAS,QAAQ,MAAQ,KAAK;AAAA,EAChC;AAAA,EAEA,OAAO,oBAAoB,gBAA6D;AACtF,WAAO,CAAC,WAA+B,YAAoB;AACzD,UAAI;AACF,uBAAe,WAAW,OAAO;AACnC,UAAI,+BAAY,UAAU,UAAU,GAAG;AACrC,YAAI,OAAO,KAAK,UAAU,OAAO;AACjC,YAAI,KAAK,SAAS;AAChB,iBAAO,KAAK,UAAU,GAAG,iBAAiB,CAAC,IAAI,kCAAkC,KAAK,UAAU,KAAK,SAAS,iBAAiB,CAAC;AAClI,uCAAY,IAAI,aAAa,cAAc,SAAS,iBAAY,kBAAa,IAAI;AAAA,MACnF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,OAAO,kBAAkB,MAAgB,kBAA2B;AAClE,QAAI,CAAC,oBAAoB,CAAC,KAAK;AAC7B,aAAO;AACT,WAAO,QAAQ,mBAAmB,mBAAmB,OAAO,MAAM,KAAK,KAAK,IAAI;AAAA,EAClF;AACF;AAEO,MAAM,SAAS;",
  "names": []
}
