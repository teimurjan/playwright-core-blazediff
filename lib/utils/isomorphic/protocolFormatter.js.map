{
  "version": 3,
  "sources": ["../../../src/utils/isomorphic/protocolFormatter.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { methodMetainfo } from './protocolMetainfo';\n\nexport function formatProtocolParam(params: Record<string, string> | undefined, alternatives: string): string | undefined {\n  if (!params)\n    return undefined;\n\n  for (const name of alternatives.split('|')) {\n    if (name === 'url') {\n      try {\n        const urlObject = new URL(params[name]);\n        if (urlObject.protocol === 'data:')\n          return urlObject.protocol;\n        if (urlObject.protocol === 'about:')\n          return params[name];\n        return urlObject.pathname + urlObject.search;\n      } catch (error) {\n        if (params[name] !== undefined)\n          return params[name];\n      }\n    }\n    if (name === 'timeNumber' && params[name] !== undefined) {\n      // eslint-disable-next-line no-restricted-globals\n      return new Date(params[name]).toString();\n    }\n\n    const value = deepParam(params, name);\n    if (value !== undefined)\n      return value;\n  }\n}\n\nfunction deepParam(params: Record<string, any>, name: string): string | undefined {\n  const tokens = name.split('.');\n  let current = params;\n  for (const token of tokens) {\n    if (typeof current !== 'object' || current === null)\n      return undefined;\n    current = current[token];\n  }\n  if (current === undefined)\n    return undefined;\n  return String(current);\n}\n\nexport function renderTitleForCall(metadata: { title?: string, type: string, method: string, params: Record<string, string> | undefined }) {\n  const titleFormat = metadata.title ?? methodMetainfo.get(metadata.type + '.' + metadata.method)?.title ?? metadata.method;\n  return titleFormat.replace(/\\{([^}]+)\\}/g, (fullMatch, p1) => {\n    return formatProtocolParam(metadata.params, p1) ?? fullMatch;\n  });\n}\n\nexport type ActionGroup = 'configuration' | 'route' | 'getter';\n\nexport function getActionGroup(metadata: { type: string, method: string }) {\n  return methodMetainfo.get(metadata.type + '.' + metadata.method)?.group as undefined | ActionGroup;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,8BAA+B;AAExB,SAAS,oBAAoB,QAA4C,cAA0C;AACxH,MAAI,CAAC;AACH,WAAO;AAET,aAAW,QAAQ,aAAa,MAAM,GAAG,GAAG;AAC1C,QAAI,SAAS,OAAO;AAClB,UAAI;AACF,cAAM,YAAY,IAAI,IAAI,OAAO,IAAI,CAAC;AACtC,YAAI,UAAU,aAAa;AACzB,iBAAO,UAAU;AACnB,YAAI,UAAU,aAAa;AACzB,iBAAO,OAAO,IAAI;AACpB,eAAO,UAAU,WAAW,UAAU;AAAA,MACxC,SAAS,OAAO;AACd,YAAI,OAAO,IAAI,MAAM;AACnB,iBAAO,OAAO,IAAI;AAAA,MACtB;AAAA,IACF;AACA,QAAI,SAAS,gBAAgB,OAAO,IAAI,MAAM,QAAW;AAEvD,aAAO,IAAI,KAAK,OAAO,IAAI,CAAC,EAAE,SAAS;AAAA,IACzC;AAEA,UAAM,QAAQ,UAAU,QAAQ,IAAI;AACpC,QAAI,UAAU;AACZ,aAAO;AAAA,EACX;AACF;AAEA,SAAS,UAAU,QAA6B,MAAkC;AAChF,QAAM,SAAS,KAAK,MAAM,GAAG;AAC7B,MAAI,UAAU;AACd,aAAW,SAAS,QAAQ;AAC1B,QAAI,OAAO,YAAY,YAAY,YAAY;AAC7C,aAAO;AACT,cAAU,QAAQ,KAAK;AAAA,EACzB;AACA,MAAI,YAAY;AACd,WAAO;AACT,SAAO,OAAO,OAAO;AACvB;AAEO,SAAS,mBAAmB,UAAwG;AACzI,QAAM,cAAc,SAAS,SAAS,uCAAe,IAAI,SAAS,OAAO,MAAM,SAAS,MAAM,GAAG,SAAS,SAAS;AACnH,SAAO,YAAY,QAAQ,gBAAgB,CAAC,WAAW,OAAO;AAC5D,WAAO,oBAAoB,SAAS,QAAQ,EAAE,KAAK;AAAA,EACrD,CAAC;AACH;AAIO,SAAS,eAAe,UAA4C;AACzE,SAAO,uCAAe,IAAI,SAAS,OAAO,MAAM,SAAS,MAAM,GAAG;AACpE;",
  "names": []
}
