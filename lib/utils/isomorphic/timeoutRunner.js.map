{
  "version": 3,
  "sources": ["../../../src/utils/isomorphic/timeoutRunner.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Hopefully, this file is never used in injected sources,\n// because it does not use `builtins.setTimeout` and similar,\n// and can break when clock emulation is engaged.\n\n/* eslint-disable no-restricted-globals */\n\nimport { monotonicTime } from './time';\n\nexport async function raceAgainstDeadline<T>(cb: () => Promise<T>, deadline: number): Promise<{ result: T, timedOut: false } | { timedOut: true }> {\n  let timer: NodeJS.Timeout | undefined;\n  return Promise.race([\n    cb().then(result => {\n      return { result, timedOut: false };\n    }),\n    new Promise<{ timedOut: true }>(resolve => {\n      const kMaxDeadline = 2147483647; // 2^31-1\n      const timeout = (deadline || kMaxDeadline) - monotonicTime();\n      timer = setTimeout(() => resolve({ timedOut: true }), timeout);\n    }),\n  ]).finally(() => {\n    clearTimeout(timer);\n  });\n}\n\nexport async function pollAgainstDeadline<T>(callback: () => Promise<{ continuePolling: boolean, result: T }>, deadline: number, pollIntervals: number[] = [100, 250, 500, 1000]): Promise<{ result?: T, timedOut: boolean }> {\n  const lastPollInterval = pollIntervals.pop() ?? 1000;\n  let lastResult: T|undefined;\n  const wrappedCallback = () => Promise.resolve().then(callback);\n  while (true) {\n    const time = monotonicTime();\n    if (deadline && time >= deadline)\n      break;\n    const received = await raceAgainstDeadline(wrappedCallback, deadline);\n    if (received.timedOut)\n      break;\n    lastResult = (received as any).result.result;\n    if (!(received as any).result.continuePolling)\n      return { result: lastResult, timedOut: false };\n    const interval = pollIntervals!.shift() ?? lastPollInterval;\n    if (deadline && deadline <= monotonicTime() + interval)\n      break;\n    await new Promise(x => setTimeout(x, interval));\n  }\n  return { timedOut: true, result: lastResult };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA,kBAA8B;AAE9B,eAAsB,oBAAuB,IAAsB,UAAgF;AACjJ,MAAI;AACJ,SAAO,QAAQ,KAAK;AAAA,IAClB,GAAG,EAAE,KAAK,YAAU;AAClB,aAAO,EAAE,QAAQ,UAAU,MAAM;AAAA,IACnC,CAAC;AAAA,IACD,IAAI,QAA4B,aAAW;AACzC,YAAM,eAAe;AACrB,YAAM,WAAW,YAAY,oBAAgB,2BAAc;AAC3D,cAAQ,WAAW,MAAM,QAAQ,EAAE,UAAU,KAAK,CAAC,GAAG,OAAO;AAAA,IAC/D,CAAC;AAAA,EACH,CAAC,EAAE,QAAQ,MAAM;AACf,iBAAa,KAAK;AAAA,EACpB,CAAC;AACH;AAEA,eAAsB,oBAAuB,UAAkE,UAAkB,gBAA0B,CAAC,KAAK,KAAK,KAAK,GAAI,GAA+C;AAC5N,QAAM,mBAAmB,cAAc,IAAI,KAAK;AAChD,MAAI;AACJ,QAAM,kBAAkB,MAAM,QAAQ,QAAQ,EAAE,KAAK,QAAQ;AAC7D,SAAO,MAAM;AACX,UAAM,WAAO,2BAAc;AAC3B,QAAI,YAAY,QAAQ;AACtB;AACF,UAAM,WAAW,MAAM,oBAAoB,iBAAiB,QAAQ;AACpE,QAAI,SAAS;AACX;AACF,iBAAc,SAAiB,OAAO;AACtC,QAAI,CAAE,SAAiB,OAAO;AAC5B,aAAO,EAAE,QAAQ,YAAY,UAAU,MAAM;AAC/C,UAAM,WAAW,cAAe,MAAM,KAAK;AAC3C,QAAI,YAAY,gBAAY,2BAAc,IAAI;AAC5C;AACF,UAAM,IAAI,QAAQ,OAAK,WAAW,GAAG,QAAQ,CAAC;AAAA,EAChD;AACA,SAAO,EAAE,UAAU,MAAM,QAAQ,WAAW;AAC9C;",
  "names": []
}
