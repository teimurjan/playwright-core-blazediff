{
  "version": 3,
  "sources": ["../../../src/utils/isomorphic/cssParser.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as css from './cssTokenizer';\n\nexport class InvalidSelectorError extends Error {\n}\n\nexport function isInvalidSelectorError(error: Error) {\n  return error instanceof InvalidSelectorError;\n}\n\n// Note: '>=' is used internally for text engine to preserve backwards compatibility.\ntype ClauseCombinator = '' | '>' | '+' | '~' | '>=';\n// TODO: consider\n//   - key=value\n//   - operators like `=`, `|=`, `~=`, `*=`, `/`\n//   - <empty>~=value\n//   - argument modes: \"parse all\", \"parse commas\", \"just a string\"\nexport type CSSFunctionArgument = CSSComplexSelector | number | string;\nexport type CSSFunction = { name: string, args: CSSFunctionArgument[] };\nexport type CSSSimpleSelector = { css?: string, functions: CSSFunction[] };\nexport type CSSComplexSelector = { simples: { selector: CSSSimpleSelector, combinator: ClauseCombinator }[] };\nexport type CSSComplexSelectorList = CSSComplexSelector[];\n\nexport function parseCSS(selector: string, customNames: Set<string>): { selector: CSSComplexSelectorList, names: string[] } {\n  let tokens: css.CSSTokenInterface[];\n  try {\n    tokens = css.tokenize(selector);\n    if (!(tokens[tokens.length - 1] instanceof css.EOFToken))\n      tokens.push(new css.EOFToken());\n  } catch (e) {\n    const newMessage = e.message + ` while parsing css selector \"${selector}\". Did you mean to CSS.escape it?`;\n    const index = (e.stack || '').indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n    e.message = newMessage;\n    throw e;\n  }\n  const unsupportedToken = tokens.find(token => {\n    return (token instanceof css.AtKeywordToken) ||\n      (token instanceof css.BadStringToken) ||\n      (token instanceof css.BadURLToken) ||\n      (token instanceof css.ColumnToken) ||\n      (token instanceof css.CDOToken) ||\n      (token instanceof css.CDCToken) ||\n      (token instanceof css.SemicolonToken) ||\n      // TODO: Consider using these for something, e.g. to escape complex strings.\n      // For example :xpath{ (//div/bar[@attr=\"foo\"])[2]/baz }\n      // Or this way :xpath( {complex-xpath-goes-here(\"hello\")} )\n      (token instanceof css.OpenCurlyToken) ||\n      (token instanceof css.CloseCurlyToken) ||\n      // TODO: Consider treating these as strings?\n      (token instanceof css.URLToken) ||\n      (token instanceof css.PercentageToken);\n  });\n  if (unsupportedToken)\n    throw new InvalidSelectorError(`Unsupported token \"${unsupportedToken.toSource()}\" while parsing css selector \"${selector}\". Did you mean to CSS.escape it?`);\n\n  let pos = 0;\n  const names = new Set<string>();\n\n  function unexpected() {\n    return new InvalidSelectorError(`Unexpected token \"${tokens[pos].toSource()}\" while parsing css selector \"${selector}\". Did you mean to CSS.escape it?`);\n  }\n\n  function skipWhitespace() {\n    while (tokens[pos] instanceof css.WhitespaceToken)\n      pos++;\n  }\n\n  function isIdent(p = pos) {\n    return tokens[p] instanceof css.IdentToken;\n  }\n\n  function isString(p = pos) {\n    return tokens[p] instanceof css.StringToken;\n  }\n\n  function isNumber(p = pos) {\n    return tokens[p] instanceof css.NumberToken;\n  }\n\n  function isComma(p = pos) {\n    return tokens[p] instanceof css.CommaToken;\n  }\n\n  function isOpenParen(p = pos) {\n    return tokens[p] instanceof css.OpenParenToken;\n  }\n\n  function isCloseParen(p = pos) {\n    return tokens[p] instanceof css.CloseParenToken;\n  }\n\n  function isFunction(p = pos) {\n    return tokens[p] instanceof css.FunctionToken;\n  }\n\n  function isStar(p = pos) {\n    return (tokens[p] instanceof css.DelimToken) && tokens[p].value === '*';\n  }\n\n  function isEOF(p = pos) {\n    return tokens[p] instanceof css.EOFToken;\n  }\n\n  function isClauseCombinator(p = pos) {\n    return (tokens[p] instanceof css.DelimToken) && (['>', '+', '~'].includes(tokens[p].value as string));\n  }\n\n  function isSelectorClauseEnd(p = pos) {\n    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || (tokens[p] instanceof css.WhitespaceToken);\n  }\n\n  function consumeFunctionArguments(): CSSFunctionArgument[] {\n    const result = [consumeArgument()];\n    while (true) {\n      skipWhitespace();\n      if (!isComma())\n        break;\n      pos++;\n      result.push(consumeArgument());\n    }\n    return result;\n  }\n\n  function consumeArgument(): CSSFunctionArgument {\n    skipWhitespace();\n    if (isNumber())\n      return tokens[pos++].value!;\n    if (isString())\n      return tokens[pos++].value!;\n    return consumeComplexSelector();\n  }\n\n  function consumeComplexSelector(): CSSComplexSelector {\n    const result: CSSComplexSelector = { simples: [] };\n    skipWhitespace();\n    if (isClauseCombinator()) {\n      // Put implicit \":scope\" at the start. https://drafts.csswg.org/selectors-4/#relative\n      result.simples.push({ selector: { functions: [{ name: 'scope', args: [] }] }, combinator: '' });\n    } else {\n      result.simples.push({ selector: consumeSimpleSelector(), combinator: '' });\n    }\n    while (true) {\n      skipWhitespace();\n      if (isClauseCombinator()) {\n        result.simples[result.simples.length - 1].combinator = tokens[pos++].value as ClauseCombinator;\n        skipWhitespace();\n      } else if (isSelectorClauseEnd()) {\n        break;\n      }\n      result.simples.push({ combinator: '', selector: consumeSimpleSelector() });\n    }\n    return result;\n  }\n\n  function consumeSimpleSelector(): CSSSimpleSelector {\n    let rawCSSString = '';\n    const functions: CSSFunction[] = [];\n\n    while (!isSelectorClauseEnd()) {\n      if (isIdent() || isStar()) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof css.HashToken) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if ((tokens[pos] instanceof css.DelimToken) && tokens[pos].value === '.') {\n        pos++;\n        if (isIdent())\n          rawCSSString += '.' + tokens[pos++].toSource();\n        else\n          throw unexpected();\n      } else if (tokens[pos] instanceof css.ColonToken) {\n        pos++;\n        if (isIdent()) {\n          if (!customNames.has((tokens[pos].value as string).toLowerCase())) {\n            rawCSSString += ':' + tokens[pos++].toSource();\n          } else {\n            const name = (tokens[pos++].value as string).toLowerCase();\n            functions.push({ name, args: [] });\n            names.add(name);\n          }\n        } else if (isFunction()) {\n          const name = (tokens[pos++].value as string).toLowerCase();\n          if (!customNames.has(name)) {\n            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n          } else {\n            functions.push({ name, args: consumeFunctionArguments() });\n            names.add(name);\n          }\n          skipWhitespace();\n          if (!isCloseParen())\n            throw unexpected();\n          pos++;\n        } else {\n          throw unexpected();\n        }\n      } else if (tokens[pos] instanceof css.OpenSquareToken) {\n        rawCSSString += '[';\n        pos++;\n        while (!(tokens[pos] instanceof css.CloseSquareToken) && !isEOF())\n          rawCSSString += tokens[pos++].toSource();\n        if (!(tokens[pos] instanceof css.CloseSquareToken))\n          throw unexpected();\n        rawCSSString += ']';\n        pos++;\n      } else {\n        throw unexpected();\n      }\n    }\n    if (!rawCSSString && !functions.length)\n      throw unexpected();\n    return { css: rawCSSString || undefined, functions };\n  }\n\n  function consumeBuiltinFunctionArguments(): string {\n    let s = '';\n    let balance = 1;  // First open paren is a part of a function token.\n    while (!isEOF()) {\n      if (isOpenParen() || isFunction())\n        balance++;\n      if (isCloseParen())\n        balance--;\n      if (!balance)\n        break;\n      s += tokens[pos++].toSource();\n    }\n    return s;\n  }\n\n  const result = consumeFunctionArguments();\n  if (!isEOF())\n    throw unexpected();\n  if (result.some(arg => typeof arg !== 'object' || !('simples' in arg)))\n    throw new InvalidSelectorError(`Error while parsing css selector \"${selector}\". Did you mean to CSS.escape it?`);\n  return { selector: result as CSSComplexSelector[], names: Array.from(names) };\n}\n\nexport function serializeSelector(args: CSSFunctionArgument[]) {\n  return args.map(arg => {\n    if (typeof arg === 'string')\n      return `\"${arg}\"`;\n    if (typeof arg === 'number')\n      return String(arg);\n    return arg.simples.map(({ selector, combinator }) => {\n      let s = selector.css || '';\n      s = s + selector.functions.map(func => `:${func.name}(${serializeSelector(func.args)})`).join('');\n      if (combinator)\n        s += ' ' + combinator;\n      return s;\n    }).join(' ');\n  }).join(', ');\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,UAAqB;AAEd,MAAM,6BAA6B,MAAM;AAChD;AAEO,SAAS,uBAAuB,OAAc;AACnD,SAAO,iBAAiB;AAC1B;AAeO,SAAS,SAAS,UAAkB,aAAiF;AAC1H,MAAI;AACJ,MAAI;AACF,aAAS,IAAI,SAAS,QAAQ;AAC9B,QAAI,EAAE,OAAO,OAAO,SAAS,CAAC,aAAa,IAAI;AAC7C,aAAO,KAAK,IAAI,IAAI,SAAS,CAAC;AAAA,EAClC,SAAS,GAAG;AACV,UAAM,aAAa,EAAE,UAAU,gCAAgC,QAAQ;AACvE,UAAM,SAAS,EAAE,SAAS,IAAI,QAAQ,EAAE,OAAO;AAC/C,QAAI,UAAU;AACZ,QAAE,QAAQ,EAAE,MAAM,UAAU,GAAG,KAAK,IAAI,aAAa,EAAE,MAAM,UAAU,QAAQ,EAAE,QAAQ,MAAM;AACjG,MAAE,UAAU;AACZ,UAAM;AAAA,EACR;AACA,QAAM,mBAAmB,OAAO,KAAK,WAAS;AAC5C,WAAQ,iBAAiB,IAAI,kBAC1B,iBAAiB,IAAI,kBACrB,iBAAiB,IAAI,eACrB,iBAAiB,IAAI,eACrB,iBAAiB,IAAI,YACrB,iBAAiB,IAAI,YACrB,iBAAiB,IAAI;AAAA;AAAA;AAAA,IAIrB,iBAAiB,IAAI,kBACrB,iBAAiB,IAAI;AAAA,IAErB,iBAAiB,IAAI,YACrB,iBAAiB,IAAI;AAAA,EAC1B,CAAC;AACD,MAAI;AACF,UAAM,IAAI,qBAAqB,sBAAsB,iBAAiB,SAAS,CAAC,iCAAiC,QAAQ,mCAAmC;AAE9J,MAAI,MAAM;AACV,QAAM,QAAQ,oBAAI,IAAY;AAE9B,WAAS,aAAa;AACpB,WAAO,IAAI,qBAAqB,qBAAqB,OAAO,GAAG,EAAE,SAAS,CAAC,iCAAiC,QAAQ,mCAAmC;AAAA,EACzJ;AAEA,WAAS,iBAAiB;AACxB,WAAO,OAAO,GAAG,aAAa,IAAI;AAChC;AAAA,EACJ;AAEA,WAAS,QAAQ,IAAI,KAAK;AACxB,WAAO,OAAO,CAAC,aAAa,IAAI;AAAA,EAClC;AAEA,WAAS,SAAS,IAAI,KAAK;AACzB,WAAO,OAAO,CAAC,aAAa,IAAI;AAAA,EAClC;AAEA,WAAS,SAAS,IAAI,KAAK;AACzB,WAAO,OAAO,CAAC,aAAa,IAAI;AAAA,EAClC;AAEA,WAAS,QAAQ,IAAI,KAAK;AACxB,WAAO,OAAO,CAAC,aAAa,IAAI;AAAA,EAClC;AAEA,WAAS,YAAY,IAAI,KAAK;AAC5B,WAAO,OAAO,CAAC,aAAa,IAAI;AAAA,EAClC;AAEA,WAAS,aAAa,IAAI,KAAK;AAC7B,WAAO,OAAO,CAAC,aAAa,IAAI;AAAA,EAClC;AAEA,WAAS,WAAW,IAAI,KAAK;AAC3B,WAAO,OAAO,CAAC,aAAa,IAAI;AAAA,EAClC;AAEA,WAAS,OAAO,IAAI,KAAK;AACvB,WAAQ,OAAO,CAAC,aAAa,IAAI,cAAe,OAAO,CAAC,EAAE,UAAU;AAAA,EACtE;AAEA,WAAS,MAAM,IAAI,KAAK;AACtB,WAAO,OAAO,CAAC,aAAa,IAAI;AAAA,EAClC;AAEA,WAAS,mBAAmB,IAAI,KAAK;AACnC,WAAQ,OAAO,CAAC,aAAa,IAAI,cAAgB,CAAC,KAAK,KAAK,GAAG,EAAE,SAAS,OAAO,CAAC,EAAE,KAAe;AAAA,EACrG;AAEA,WAAS,oBAAoB,IAAI,KAAK;AACpC,WAAO,QAAQ,CAAC,KAAK,aAAa,CAAC,KAAK,MAAM,CAAC,KAAK,mBAAmB,CAAC,KAAM,OAAO,CAAC,aAAa,IAAI;AAAA,EACzG;AAEA,WAAS,2BAAkD;AACzD,UAAMA,UAAS,CAAC,gBAAgB,CAAC;AACjC,WAAO,MAAM;AACX,qBAAe;AACf,UAAI,CAAC,QAAQ;AACX;AACF;AACA,MAAAA,QAAO,KAAK,gBAAgB,CAAC;AAAA,IAC/B;AACA,WAAOA;AAAA,EACT;AAEA,WAAS,kBAAuC;AAC9C,mBAAe;AACf,QAAI,SAAS;AACX,aAAO,OAAO,KAAK,EAAE;AACvB,QAAI,SAAS;AACX,aAAO,OAAO,KAAK,EAAE;AACvB,WAAO,uBAAuB;AAAA,EAChC;AAEA,WAAS,yBAA6C;AACpD,UAAMA,UAA6B,EAAE,SAAS,CAAC,EAAE;AACjD,mBAAe;AACf,QAAI,mBAAmB,GAAG;AAExB,MAAAA,QAAO,QAAQ,KAAK,EAAE,UAAU,EAAE,WAAW,CAAC,EAAE,MAAM,SAAS,MAAM,CAAC,EAAE,CAAC,EAAE,GAAG,YAAY,GAAG,CAAC;AAAA,IAChG,OAAO;AACL,MAAAA,QAAO,QAAQ,KAAK,EAAE,UAAU,sBAAsB,GAAG,YAAY,GAAG,CAAC;AAAA,IAC3E;AACA,WAAO,MAAM;AACX,qBAAe;AACf,UAAI,mBAAmB,GAAG;AACxB,QAAAA,QAAO,QAAQA,QAAO,QAAQ,SAAS,CAAC,EAAE,aAAa,OAAO,KAAK,EAAE;AACrE,uBAAe;AAAA,MACjB,WAAW,oBAAoB,GAAG;AAChC;AAAA,MACF;AACA,MAAAA,QAAO,QAAQ,KAAK,EAAE,YAAY,IAAI,UAAU,sBAAsB,EAAE,CAAC;AAAA,IAC3E;AACA,WAAOA;AAAA,EACT;AAEA,WAAS,wBAA2C;AAClD,QAAI,eAAe;AACnB,UAAM,YAA2B,CAAC;AAElC,WAAO,CAAC,oBAAoB,GAAG;AAC7B,UAAI,QAAQ,KAAK,OAAO,GAAG;AACzB,wBAAgB,OAAO,KAAK,EAAE,SAAS;AAAA,MACzC,WAAW,OAAO,GAAG,aAAa,IAAI,WAAW;AAC/C,wBAAgB,OAAO,KAAK,EAAE,SAAS;AAAA,MACzC,WAAY,OAAO,GAAG,aAAa,IAAI,cAAe,OAAO,GAAG,EAAE,UAAU,KAAK;AAC/E;AACA,YAAI,QAAQ;AACV,0BAAgB,MAAM,OAAO,KAAK,EAAE,SAAS;AAAA;AAE7C,gBAAM,WAAW;AAAA,MACrB,WAAW,OAAO,GAAG,aAAa,IAAI,YAAY;AAChD;AACA,YAAI,QAAQ,GAAG;AACb,cAAI,CAAC,YAAY,IAAK,OAAO,GAAG,EAAE,MAAiB,YAAY,CAAC,GAAG;AACjE,4BAAgB,MAAM,OAAO,KAAK,EAAE,SAAS;AAAA,UAC/C,OAAO;AACL,kBAAM,OAAQ,OAAO,KAAK,EAAE,MAAiB,YAAY;AACzD,sBAAU,KAAK,EAAE,MAAM,MAAM,CAAC,EAAE,CAAC;AACjC,kBAAM,IAAI,IAAI;AAAA,UAChB;AAAA,QACF,WAAW,WAAW,GAAG;AACvB,gBAAM,OAAQ,OAAO,KAAK,EAAE,MAAiB,YAAY;AACzD,cAAI,CAAC,YAAY,IAAI,IAAI,GAAG;AAC1B,4BAAgB,IAAI,IAAI,IAAI,gCAAgC,CAAC;AAAA,UAC/D,OAAO;AACL,sBAAU,KAAK,EAAE,MAAM,MAAM,yBAAyB,EAAE,CAAC;AACzD,kBAAM,IAAI,IAAI;AAAA,UAChB;AACA,yBAAe;AACf,cAAI,CAAC,aAAa;AAChB,kBAAM,WAAW;AACnB;AAAA,QACF,OAAO;AACL,gBAAM,WAAW;AAAA,QACnB;AAAA,MACF,WAAW,OAAO,GAAG,aAAa,IAAI,iBAAiB;AACrD,wBAAgB;AAChB;AACA,eAAO,EAAE,OAAO,GAAG,aAAa,IAAI,qBAAqB,CAAC,MAAM;AAC9D,0BAAgB,OAAO,KAAK,EAAE,SAAS;AACzC,YAAI,EAAE,OAAO,GAAG,aAAa,IAAI;AAC/B,gBAAM,WAAW;AACnB,wBAAgB;AAChB;AAAA,MACF,OAAO;AACL,cAAM,WAAW;AAAA,MACnB;AAAA,IACF;AACA,QAAI,CAAC,gBAAgB,CAAC,UAAU;AAC9B,YAAM,WAAW;AACnB,WAAO,EAAE,KAAK,gBAAgB,QAAW,UAAU;AAAA,EACrD;AAEA,WAAS,kCAA0C;AACjD,QAAI,IAAI;AACR,QAAI,UAAU;AACd,WAAO,CAAC,MAAM,GAAG;AACf,UAAI,YAAY,KAAK,WAAW;AAC9B;AACF,UAAI,aAAa;AACf;AACF,UAAI,CAAC;AACH;AACF,WAAK,OAAO,KAAK,EAAE,SAAS;AAAA,IAC9B;AACA,WAAO;AAAA,EACT;AAEA,QAAM,SAAS,yBAAyB;AACxC,MAAI,CAAC,MAAM;AACT,UAAM,WAAW;AACnB,MAAI,OAAO,KAAK,SAAO,OAAO,QAAQ,YAAY,EAAE,aAAa,IAAI;AACnE,UAAM,IAAI,qBAAqB,qCAAqC,QAAQ,mCAAmC;AACjH,SAAO,EAAE,UAAU,QAAgC,OAAO,MAAM,KAAK,KAAK,EAAE;AAC9E;AAEO,SAAS,kBAAkB,MAA6B;AAC7D,SAAO,KAAK,IAAI,SAAO;AACrB,QAAI,OAAO,QAAQ;AACjB,aAAO,IAAI,GAAG;AAChB,QAAI,OAAO,QAAQ;AACjB,aAAO,OAAO,GAAG;AACnB,WAAO,IAAI,QAAQ,IAAI,CAAC,EAAE,UAAU,WAAW,MAAM;AACnD,UAAI,IAAI,SAAS,OAAO;AACxB,UAAI,IAAI,SAAS,UAAU,IAAI,UAAQ,IAAI,KAAK,IAAI,IAAI,kBAAkB,KAAK,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE;AAChG,UAAI;AACF,aAAK,MAAM;AACb,aAAO;AAAA,IACT,CAAC,EAAE,KAAK,GAAG;AAAA,EACb,CAAC,EAAE,KAAK,IAAI;AACd;",
  "names": ["result"]
}
