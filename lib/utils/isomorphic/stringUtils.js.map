{
  "version": 3,
  "sources": ["../../../src/utils/isomorphic/stringUtils.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// NOTE: this function should not be used to escape any selectors.\nexport function escapeWithQuotes(text: string, char: string = '\\'') {\n  const stringified = JSON.stringify(text);\n  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\\"/g, '\"');\n  if (char === '\\'')\n    return char + escapedText.replace(/[']/g, '\\\\\\'') + char;\n  if (char === '\"')\n    return char + escapedText.replace(/[\"]/g, '\\\\\"') + char;\n  if (char === '`')\n    return char + escapedText.replace(/[`]/g, '\\\\`') + char;\n  throw new Error('Invalid escape char');\n}\n\nexport function escapeTemplateString(text: string): string {\n  return text\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/`/g, '\\\\`')\n      .replace(/\\$\\{/g, '\\\\${');\n}\n\nexport function isString(obj: any): obj is string {\n  return typeof obj === 'string' || obj instanceof String;\n}\n\nexport function toTitleCase(name: string) {\n  return name.charAt(0).toUpperCase() + name.substring(1);\n}\n\nexport function toSnakeCase(name: string): string {\n  // E.g. ignoreHTTPSErrors => ignore_https_errors.\n  return name.replace(/([a-z0-9])([A-Z])/g, '$1_$2').replace(/([A-Z])([A-Z][a-z])/g, '$1_$2').toLowerCase();\n}\n\nexport function quoteCSSAttributeValue(text: string): string {\n  return `\"${text.replace(/[\"\\\\]/g, char => '\\\\' + char)}\"`;\n}\n\nlet normalizedWhitespaceCache: Map<string, string> | undefined;\n\nexport function cacheNormalizedWhitespaces() {\n  normalizedWhitespaceCache = new Map();\n}\n\nexport function normalizeWhiteSpace(text: string): string {\n  let result = normalizedWhitespaceCache?.get(text);\n  if (result === undefined) {\n    result = text.replace(/[\\u200b\\u00ad]/g, '').trim().replace(/\\s+/g, ' ');\n    normalizedWhitespaceCache?.set(text, result);\n  }\n  return result;\n}\n\nexport function normalizeEscapedRegexQuotes(source: string) {\n  // This function reverses the effect of escapeRegexForSelector below.\n  // Odd number of backslashes followed by the quote -> remove unneeded backslash.\n  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\(['\"`])/g, '$1$2$3');\n}\n\nfunction escapeRegexForSelector(re: RegExp): string {\n  // Unicode mode does not allow \"identity character escapes\", so we do not escape and\n  // hope that it does not contain quotes and/or >> signs.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape\n  // TODO: rework RE usages in internal selectors away from literal representation to json, e.g. {source,flags}.\n  if (re.unicode || (re as any).unicodeSets)\n    return String(re);\n  // Even number of backslashes followed by the quote -> insert a backslash.\n  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*([\"'`])/g, '$1$2\\\\$3').replace(/>>/g, '\\\\>\\\\>');\n}\n\nexport function escapeForTextSelector(text: string | RegExp, exact: boolean): string {\n  if (typeof text !== 'string')\n    return escapeRegexForSelector(text);\n  return `${JSON.stringify(text)}${exact ? 's' : 'i'}`;\n}\n\nexport function escapeForAttributeSelector(value: string | RegExp, exact: boolean): string {\n  if (typeof value !== 'string')\n    return escapeRegexForSelector(value);\n  // TODO: this should actually be\n  //   cssEscape(value).replace(/\\\\ /g, ' ')\n  // However, our attribute selectors do not conform to CSS parsing spec,\n  // so we escape them differently.\n  return `\"${value.replace(/\\\\/g, '\\\\\\\\').replace(/[\"]/g, '\\\\\"')}\"${exact ? 's' : 'i'}`;\n}\n\nexport function trimString(input: string, cap: number, suffix: string = ''): string {\n  if (input.length <= cap)\n    return input;\n  const chars = [...input];\n  if (chars.length > cap)\n    return chars.slice(0, cap - suffix.length).join('') + suffix;\n  return chars.join('');\n}\n\nexport function trimStringWithEllipsis(input: string, cap: number): string {\n  return trimString(input, cap, '\\u2026');\n}\n\nexport function escapeRegExp(s: string) {\n  // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nconst escaped = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', '\\'': '&#39;' };\nexport function escapeHTMLAttribute(s: string): string {\n  return s.replace(/[&<>\"']/ug, char => (escaped as any)[char]);\n}\nexport function escapeHTML(s: string): string {\n  return s.replace(/[&<]/ug, char => (escaped as any)[char]);\n}\n\nexport function longestCommonSubstring(s1: string, s2: string): string {\n  const n = s1.length;\n  const m = s2.length;\n  let maxLen = 0;\n  let endingIndex = 0;\n\n  // Initialize a 2D array with zeros\n  const dp = Array(n + 1)\n      .fill(null)\n      .map(() => Array(m + 1).fill(0));\n\n  // Build the dp table\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= m; j++) {\n      if (s1[i - 1] === s2[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1] + 1;\n\n        if (dp[i][j] > maxLen) {\n          maxLen = dp[i][j];\n          endingIndex = i;\n        }\n      }\n    }\n  }\n\n  // Extract the longest common substring\n  return s1.slice(endingIndex - maxLen, endingIndex);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBO,SAAS,iBAAiB,MAAc,OAAe,KAAM;AAClE,QAAM,cAAc,KAAK,UAAU,IAAI;AACvC,QAAM,cAAc,YAAY,UAAU,GAAG,YAAY,SAAS,CAAC,EAAE,QAAQ,QAAQ,GAAG;AACxF,MAAI,SAAS;AACX,WAAO,OAAO,YAAY,QAAQ,QAAQ,KAAM,IAAI;AACtD,MAAI,SAAS;AACX,WAAO,OAAO,YAAY,QAAQ,QAAQ,KAAK,IAAI;AACrD,MAAI,SAAS;AACX,WAAO,OAAO,YAAY,QAAQ,QAAQ,KAAK,IAAI;AACrD,QAAM,IAAI,MAAM,qBAAqB;AACvC;AAEO,SAAS,qBAAqB,MAAsB;AACzD,SAAO,KACF,QAAQ,OAAO,MAAM,EACrB,QAAQ,MAAM,KAAK,EACnB,QAAQ,SAAS,MAAM;AAC9B;AAEO,SAAS,SAAS,KAAyB;AAChD,SAAO,OAAO,QAAQ,YAAY,eAAe;AACnD;AAEO,SAAS,YAAY,MAAc;AACxC,SAAO,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,UAAU,CAAC;AACxD;AAEO,SAAS,YAAY,MAAsB;AAEhD,SAAO,KAAK,QAAQ,sBAAsB,OAAO,EAAE,QAAQ,wBAAwB,OAAO,EAAE,YAAY;AAC1G;AAEO,SAAS,uBAAuB,MAAsB;AAC3D,SAAO,IAAI,KAAK,QAAQ,UAAU,UAAQ,OAAO,IAAI,CAAC;AACxD;AAEA,IAAI;AAEG,SAAS,6BAA6B;AAC3C,8BAA4B,oBAAI,IAAI;AACtC;AAEO,SAAS,oBAAoB,MAAsB;AACxD,MAAI,SAAS,2BAA2B,IAAI,IAAI;AAChD,MAAI,WAAW,QAAW;AACxB,aAAS,KAAK,QAAQ,mBAAmB,EAAE,EAAE,KAAK,EAAE,QAAQ,QAAQ,GAAG;AACvE,+BAA2B,IAAI,MAAM,MAAM;AAAA,EAC7C;AACA,SAAO;AACT;AAEO,SAAS,4BAA4B,QAAgB;AAG1D,SAAO,OAAO,QAAQ,8BAA8B,QAAQ;AAC9D;AAEA,SAAS,uBAAuB,IAAoB;AAKlD,MAAI,GAAG,WAAY,GAAW;AAC5B,WAAO,OAAO,EAAE;AAElB,SAAO,OAAO,EAAE,EAAE,QAAQ,4BAA4B,UAAU,EAAE,QAAQ,OAAO,QAAQ;AAC3F;AAEO,SAAS,sBAAsB,MAAuB,OAAwB;AACnF,MAAI,OAAO,SAAS;AAClB,WAAO,uBAAuB,IAAI;AACpC,SAAO,GAAG,KAAK,UAAU,IAAI,CAAC,GAAG,QAAQ,MAAM,GAAG;AACpD;AAEO,SAAS,2BAA2B,OAAwB,OAAwB;AACzF,MAAI,OAAO,UAAU;AACnB,WAAO,uBAAuB,KAAK;AAKrC,SAAO,IAAI,MAAM,QAAQ,OAAO,MAAM,EAAE,QAAQ,QAAQ,KAAK,CAAC,IAAI,QAAQ,MAAM,GAAG;AACrF;AAEO,SAAS,WAAW,OAAe,KAAa,SAAiB,IAAY;AAClF,MAAI,MAAM,UAAU;AAClB,WAAO;AACT,QAAM,QAAQ,CAAC,GAAG,KAAK;AACvB,MAAI,MAAM,SAAS;AACjB,WAAO,MAAM,MAAM,GAAG,MAAM,OAAO,MAAM,EAAE,KAAK,EAAE,IAAI;AACxD,SAAO,MAAM,KAAK,EAAE;AACtB;AAEO,SAAS,uBAAuB,OAAe,KAAqB;AACzE,SAAO,WAAW,OAAO,KAAK,QAAQ;AACxC;AAEO,SAAS,aAAa,GAAW;AAEtC,SAAO,EAAE,QAAQ,uBAAuB,MAAM;AAChD;AAEA,MAAM,UAAU,EAAE,KAAK,SAAS,KAAK,QAAQ,KAAK,QAAQ,KAAK,UAAU,KAAM,QAAQ;AAChF,SAAS,oBAAoB,GAAmB;AACrD,SAAO,EAAE,QAAQ,aAAa,UAAS,QAAgB,IAAI,CAAC;AAC9D;AACO,SAAS,WAAW,GAAmB;AAC5C,SAAO,EAAE,QAAQ,UAAU,UAAS,QAAgB,IAAI,CAAC;AAC3D;AAEO,SAAS,uBAAuB,IAAY,IAAoB;AACrE,QAAM,IAAI,GAAG;AACb,QAAM,IAAI,GAAG;AACb,MAAI,SAAS;AACb,MAAI,cAAc;AAGlB,QAAM,KAAK,MAAM,IAAI,CAAC,EACjB,KAAK,IAAI,EACT,IAAI,MAAM,MAAM,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;AAGnC,WAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AAC3B,aAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AAC3B,UAAI,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG;AAC3B,WAAG,CAAC,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI;AAE9B,YAAI,GAAG,CAAC,EAAE,CAAC,IAAI,QAAQ;AACrB,mBAAS,GAAG,CAAC,EAAE,CAAC;AAChB,wBAAc;AAAA,QAChB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAGA,SAAO,GAAG,MAAM,cAAc,QAAQ,WAAW;AACnD;",
  "names": []
}
