{
  "version": 3,
  "sources": ["../../../src/utils/isomorphic/traceUtils.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ClientSideCallMetadata, StackFrame } from '@protocol/channels';\n\nexport type SerializedStackFrame = [number, number, number, string];\nexport type SerializedStack = [number, SerializedStackFrame[]];\n\nexport type SerializedClientSideCallMetadata = {\n  files: string[];\n  stacks: SerializedStack[];\n};\n\nexport function parseClientSideCallMetadata(data: SerializedClientSideCallMetadata): Map<string, StackFrame[]> {\n  const result = new Map<string, StackFrame[]>();\n  const { files, stacks } = data;\n  for (const s of stacks) {\n    const [id, ff] = s;\n    result.set(`call@${id}`, ff.map(f => ({ file: files[f[0]], line: f[1], column: f[2], function: f[3] })));\n  }\n  return result;\n}\n\nexport function serializeClientSideCallMetadata(metadatas: ClientSideCallMetadata[]): SerializedClientSideCallMetadata {\n  const fileNames = new Map<string, number>();\n  const stacks: SerializedStack[] = [];\n  for (const m of metadatas) {\n    if (!m.stack || !m.stack.length)\n      continue;\n    const stack: SerializedStackFrame[] = [];\n    for (const frame of m.stack) {\n      let ordinal = fileNames.get(frame.file);\n      if (typeof ordinal !== 'number') {\n        ordinal = fileNames.size;\n        fileNames.set(frame.file, ordinal);\n      }\n      const stackFrame: SerializedStackFrame = [ordinal, frame.line || 0, frame.column || 0, frame.function || ''];\n      stack.push(stackFrame);\n    }\n    stacks.push([m.id, stack]);\n  }\n  return { files: [...fileNames.keys()], stacks };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BO,SAAS,4BAA4B,MAAmE;AAC7G,QAAM,SAAS,oBAAI,IAA0B;AAC7C,QAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,aAAW,KAAK,QAAQ;AACtB,UAAM,CAAC,IAAI,EAAE,IAAI;AACjB,WAAO,IAAI,QAAQ,EAAE,IAAI,GAAG,IAAI,QAAM,EAAE,MAAM,MAAM,EAAE,CAAC,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;AAAA,EACzG;AACA,SAAO;AACT;AAEO,SAAS,gCAAgC,WAAuE;AACrH,QAAM,YAAY,oBAAI,IAAoB;AAC1C,QAAM,SAA4B,CAAC;AACnC,aAAW,KAAK,WAAW;AACzB,QAAI,CAAC,EAAE,SAAS,CAAC,EAAE,MAAM;AACvB;AACF,UAAM,QAAgC,CAAC;AACvC,eAAW,SAAS,EAAE,OAAO;AAC3B,UAAI,UAAU,UAAU,IAAI,MAAM,IAAI;AACtC,UAAI,OAAO,YAAY,UAAU;AAC/B,kBAAU,UAAU;AACpB,kBAAU,IAAI,MAAM,MAAM,OAAO;AAAA,MACnC;AACA,YAAM,aAAmC,CAAC,SAAS,MAAM,QAAQ,GAAG,MAAM,UAAU,GAAG,MAAM,YAAY,EAAE;AAC3G,YAAM,KAAK,UAAU;AAAA,IACvB;AACA,WAAO,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC;AAAA,EAC3B;AACA,SAAO,EAAE,OAAO,CAAC,GAAG,UAAU,KAAK,CAAC,GAAG,OAAO;AAChD;",
  "names": []
}
