{
  "version": 3,
  "sources": ["../../../src/utils/isomorphic/cssTokenizer.ts"],
  "sourcesContent": ["/* eslint-disable notice/notice */\n\n/*\n * The code in this file is licensed under the CC0 license.\n * http://creativecommons.org/publicdomain/zero/1.0/\n * It is free to use for any purpose. No attribution, permission, or reproduction of this license is required.\n */\n\n// Original at https://github.com/tabatkins/parse-css\n// Changes:\n//   - JS is replaced with TS.\n//   - Universal Module Definition wrapper is removed.\n//   - Everything not related to tokenizing - below the first exports block - is removed.\n\nexport interface CSSTokenInterface {\n  toSource(): string;\n  value: string | number | undefined;\n}\n\nconst between = function(num: number, first: number, last: number) { return num >= first && num <= last; };\nfunction digit(code: number) { return between(code, 0x30, 0x39); }\nfunction hexdigit(code: number) { return digit(code) || between(code, 0x41, 0x46) || between(code, 0x61, 0x66); }\nfunction uppercaseletter(code: number) { return between(code, 0x41, 0x5a); }\nfunction lowercaseletter(code: number) { return between(code, 0x61, 0x7a); }\nfunction letter(code: number) { return uppercaseletter(code) || lowercaseletter(code); }\nfunction nonascii(code: number) { return code >= 0x80; }\nfunction namestartchar(code: number) { return letter(code) || nonascii(code) || code === 0x5f; }\nfunction namechar(code: number) { return namestartchar(code) || digit(code) || code === 0x2d; }\nfunction nonprintable(code: number) { return between(code, 0, 8) || code === 0xb || between(code, 0xe, 0x1f) || code === 0x7f; }\nfunction newline(code: number) { return code === 0xa; }\nfunction whitespace(code: number) { return newline(code) || code === 9 || code === 0x20; }\n\nconst maximumallowedcodepoint = 0x10ffff;\n\nexport class InvalidCharacterError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidCharacterError';\n  }\n}\n\nfunction preprocess(str: string): number[] {\n  // Turn a string into an array of code points,\n  // following the preprocessing cleanup rules.\n  const codepoints = [];\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i);\n    if (code === 0xd && str.charCodeAt(i + 1) === 0xa) {\n      code = 0xa; i++;\n    }\n    if (code === 0xd || code === 0xc)\n      code = 0xa;\n    if (code === 0x0)\n      code = 0xfffd;\n    if (between(code, 0xd800, 0xdbff) && between(str.charCodeAt(i + 1), 0xdc00, 0xdfff)) {\n      // Decode a surrogate pair into an astral codepoint.\n      const lead = code - 0xd800;\n      const trail = str.charCodeAt(i + 1) - 0xdc00;\n      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n      i++;\n    }\n    codepoints.push(code);\n  }\n  return codepoints;\n}\n\nfunction stringFromCode(code: number) {\n  if (code <= 0xffff)\n    return String.fromCharCode(code);\n  // Otherwise, encode astral char as surrogate pair.\n  code -= Math.pow(2, 16);\n  const lead = Math.floor(code / Math.pow(2, 10)) + 0xd800;\n  const trail = code % Math.pow(2, 10) + 0xdc00;\n  return String.fromCharCode(lead) + String.fromCharCode(trail);\n}\n\nexport function tokenize(str1: string): CSSTokenInterface[] {\n  const str = preprocess(str1);\n  let i = -1;\n  const tokens: CSSTokenInterface[] = [];\n  let code: number;\n\n  // Line number information.\n  let line = 0;\n  let column = 0;\n  // The only use of lastLineLength is in reconsume().\n  let lastLineLength = 0;\n  const incrLineno = function() {\n    line += 1;\n    lastLineLength = column;\n    column = 0;\n  };\n  const locStart = { line: line, column: column };\n\n  const codepoint = function(i: number): number {\n    if (i >= str.length)\n      return -1;\n\n    return str[i];\n  };\n  const next = function(num?: number) {\n    if (num === undefined)\n      num = 1;\n    if (num > 3)\n      throw 'Spec Error: no more than three codepoints of lookahead.';\n    return codepoint(i + num);\n  };\n  const consume = function(num?: number): boolean {\n    if (num === undefined)\n      num = 1;\n    i += num;\n    code = codepoint(i);\n    if (newline(code))\n      incrLineno();\n    else\n      column += num;\n    // console.log('Consume '+i+' '+String.fromCharCode(code) + ' 0x' + code.toString(16));\n    return true;\n  };\n  const reconsume = function() {\n    i -= 1;\n    if (newline(code)) {\n      line -= 1;\n      column = lastLineLength;\n    } else {\n      column -= 1;\n    }\n    locStart.line = line;\n    locStart.column = column;\n    return true;\n  };\n  const eof = function(codepoint?: number): boolean {\n    if (codepoint === undefined)\n      codepoint = code;\n    return codepoint === -1;\n  };\n  const donothing = function() { };\n  const parseerror = function() {\n    // Language bindings don't like writing to stdout!\n    // console.log('Parse error at index ' + i + ', processing codepoint 0x' + code.toString(16) + '.'); return true;\n  };\n\n  const consumeAToken = function(): CSSTokenInterface {\n    consumeComments();\n    consume();\n    if (whitespace(code)) {\n      while (whitespace(next()))\n        consume();\n      return new WhitespaceToken();\n    } else if (code === 0x22) {return consumeAStringToken();} else if (code === 0x23) {\n      if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n        const token = new HashToken('');\n        if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n          token.type = 'id';\n        token.value = consumeAName();\n        return token;\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 0x24) {\n      if (next() === 0x3d) {\n        consume();\n        return new SuffixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 0x27) {return consumeAStringToken();} else if (code === 0x28) {return new OpenParenToken();} else if (code === 0x29) {return new CloseParenToken();} else if (code === 0x2a) {\n      if (next() === 0x3d) {\n        consume();\n        return new SubstringMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 0x2b) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 0x2c) {return new CommaToken();} else if (code === 0x2d) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else if (next(1) === 0x2d && next(2) === 0x3e) {\n        consume(2);\n        return new CDCToken();\n      } else if (startsWithAnIdentifier()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 0x2e) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 0x3a) {return new ColonToken();} else if (code === 0x3b) {return new SemicolonToken();} else if (code === 0x3c) {\n      if (next(1) === 0x21 && next(2) === 0x2d && next(3) === 0x2d) {\n        consume(3);\n        return new CDOToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 0x40) {\n      if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n        return new AtKeywordToken(consumeAName());\n      else\n        return new DelimToken(code);\n\n    } else if (code === 0x5b) {return new OpenSquareToken();} else if (code === 0x5c) {\n      if (startsWithAValidEscape()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        parseerror();\n        return new DelimToken(code);\n      }\n    } else if (code === 0x5d) {return new CloseSquareToken();} else if (code === 0x5e) {\n      if (next() === 0x3d) {\n        consume();\n        return new PrefixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 0x7b) {return new OpenCurlyToken();} else if (code === 0x7c) {\n      if (next() === 0x3d) {\n        consume();\n        return new DashMatchToken();\n      } else if (next() === 0x7c) {\n        consume();\n        return new ColumnToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 0x7d) {return new CloseCurlyToken();} else if (code === 0x7e) {\n      if (next() === 0x3d) {\n        consume();\n        return new IncludeMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (digit(code)) {\n      reconsume();\n      return consumeANumericToken();\n    } else if (namestartchar(code)) {\n      reconsume();\n      return consumeAnIdentlikeToken();\n    } else if (eof()) {return new EOFToken();} else {return new DelimToken(code);}\n  };\n\n  const consumeComments = function() {\n    while (next(1) === 0x2f && next(2) === 0x2a) {\n      consume(2);\n      while (true) {\n        consume();\n        if (code === 0x2a && next() === 0x2f) {\n          consume();\n          break;\n        } else if (eof()) {\n          parseerror();\n          return;\n        }\n      }\n    }\n  };\n\n  const consumeANumericToken = function() {\n    const num = consumeANumber();\n    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n      const token = new DimensionToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      token.unit = consumeAName();\n      return token;\n    } else if (next() === 0x25) {\n      consume();\n      const token = new PercentageToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      return token;\n    } else {\n      const token = new NumberToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      return token;\n    }\n  };\n\n  const consumeAnIdentlikeToken = function(): CSSTokenInterface {\n    const str = consumeAName();\n    if (str.toLowerCase() === 'url' && next() === 0x28) {\n      consume();\n      while (whitespace(next(1)) && whitespace(next(2)))\n        consume();\n      if (next() === 0x22 || next() === 0x27)\n        return new FunctionToken(str);\n      else if (whitespace(next()) && (next(2) === 0x22 || next(2) === 0x27))\n        return new FunctionToken(str);\n      else\n        return consumeAURLToken();\n\n    } else if (next() === 0x28) {\n      consume();\n      return new FunctionToken(str);\n    } else {\n      return new IdentToken(str);\n    }\n  };\n\n  const consumeAStringToken = function(endingCodePoint?: number): CSSParserToken {\n    if (endingCodePoint === undefined)\n      endingCodePoint = code;\n    let string = '';\n    while (consume()) {\n      if (code === endingCodePoint || eof()) {\n        return new StringToken(string);\n      } else if (newline(code)) {\n        parseerror();\n        reconsume();\n        return new BadStringToken();\n      } else if (code === 0x5c) {\n        if (eof(next()))\n          donothing();\n        else if (newline(next()))\n          consume();\n        else\n          string += stringFromCode(consumeEscape());\n\n      } else {\n        string += stringFromCode(code);\n      }\n    }\n    throw new Error('Internal error');\n  };\n\n  const consumeAURLToken = function(): CSSTokenInterface {\n    const token = new URLToken('');\n    while (whitespace(next()))\n      consume();\n    if (eof(next()))\n      return token;\n    while (consume()) {\n      if (code === 0x29 || eof()) {\n        return token;\n      } else if (whitespace(code)) {\n        while (whitespace(next()))\n          consume();\n        if (next() === 0x29 || eof(next())) {\n          consume();\n          return token;\n        } else {\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else if (code === 0x22 || code === 0x27 || code === 0x28 || nonprintable(code)) {\n        parseerror();\n        consumeTheRemnantsOfABadURL();\n        return new BadURLToken();\n      } else if (code === 0x5c) {\n        if (startsWithAValidEscape()) {\n          token.value += stringFromCode(consumeEscape());\n        } else {\n          parseerror();\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else {\n        token.value += stringFromCode(code);\n      }\n    }\n    throw new Error('Internal error');\n  };\n\n  const consumeEscape = function() {\n    // Assume the current character is the \\\n    // and the next code point is not a newline.\n    consume();\n    if (hexdigit(code)) {\n      // Consume 1-6 hex digits\n      const digits = [code];\n      for (let total = 0; total < 5; total++) {\n        if (hexdigit(next())) {\n          consume();\n          digits.push(code);\n        } else {\n          break;\n        }\n      }\n      if (whitespace(next()))\n        consume();\n      let value = parseInt(digits.map(function(x) { return String.fromCharCode(x); }).join(''), 16);\n      if (value > maximumallowedcodepoint)\n        value = 0xfffd;\n      return value;\n    } else if (eof()) {\n      return 0xfffd;\n    } else {\n      return code;\n    }\n  };\n\n  const areAValidEscape = function(c1: number, c2: number) {\n    if (c1 !== 0x5c)\n      return false;\n    if (newline(c2))\n      return false;\n    return true;\n  };\n  const startsWithAValidEscape = function() {\n    return areAValidEscape(code, next());\n  };\n\n  const wouldStartAnIdentifier = function(c1: number, c2: number, c3: number) {\n    if (c1 === 0x2d)\n      return namestartchar(c2) || c2 === 0x2d || areAValidEscape(c2, c3);\n    else if (namestartchar(c1))\n      return true;\n    else if (c1 === 0x5c)\n      return areAValidEscape(c1, c2);\n    else\n      return false;\n\n  };\n  const startsWithAnIdentifier = function() {\n    return wouldStartAnIdentifier(code, next(1), next(2));\n  };\n\n  const wouldStartANumber = function(c1: number, c2: number, c3: number) {\n    if (c1 === 0x2b || c1 === 0x2d) {\n      if (digit(c2))\n        return true;\n      if (c2 === 0x2e && digit(c3))\n        return true;\n      return false;\n    } else if (c1 === 0x2e) {\n      if (digit(c2))\n        return true;\n      return false;\n    } else if (digit(c1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const startsWithANumber = function() {\n    return wouldStartANumber(code, next(1), next(2));\n  };\n\n  const consumeAName = function(): string {\n    let result = '';\n    while (consume()) {\n      if (namechar(code)) {\n        result += stringFromCode(code);\n      } else if (startsWithAValidEscape()) {\n        result += stringFromCode(consumeEscape());\n      } else {\n        reconsume();\n        return result;\n      }\n    }\n    throw new Error('Internal parse error');\n  };\n\n  const consumeANumber = function() {\n    let repr = '';\n    let type = 'integer';\n    if (next() === 0x2b || next() === 0x2d) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    while (digit(next())) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    if (next(1) === 0x2e && digit(next(2))) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = 'number';\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const c1 = next(1), c2 = next(2), c3 = next(3);\n    if ((c1 === 0x45 || c1 === 0x65) && digit(c2)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = 'number';\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    } else if ((c1 === 0x45 || c1 === 0x65) && (c2 === 0x2b || c2 === 0x2d) && digit(c3)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = 'number';\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const value = convertAStringToANumber(repr);\n    return { type: type, value: value, repr: repr };\n  };\n\n  const convertAStringToANumber = function(string: string): number {\n    // CSS's number rules are identical to JS, afaik.\n    return +string;\n  };\n\n  const consumeTheRemnantsOfABadURL = function() {\n    while (consume()) {\n      if (code === 0x29 || eof()) {\n        return;\n      } else if (startsWithAValidEscape()) {\n        consumeEscape();\n        donothing();\n      } else {\n        donothing();\n      }\n    }\n  };\n\n  let iterationCount = 0;\n  while (!eof(next())) {\n    tokens.push(consumeAToken());\n    iterationCount++;\n    if (iterationCount > str.length * 2)\n      throw new Error(\"I'm infinite-looping!\");\n  }\n  return tokens;\n}\n\nexport class CSSParserToken implements CSSTokenInterface {\n  tokenType = '';\n  value: string | number | undefined;\n  toJSON(): any {\n    return { token: this.tokenType };\n  }\n  toString() { return this.tokenType; }\n  toSource() { return '' + this; }\n}\n\nexport class BadStringToken extends CSSParserToken {\n  override tokenType = 'BADSTRING';\n}\n\nexport class BadURLToken extends CSSParserToken {\n  override tokenType = 'BADURL';\n}\n\nexport class WhitespaceToken extends CSSParserToken {\n  override tokenType = 'WHITESPACE';\n  override toString() { return 'WS'; }\n  override toSource() { return ' '; }\n}\n\nexport class CDOToken extends CSSParserToken {\n  override tokenType = 'CDO';\n  override toSource() { return '<!--'; }\n}\n\nexport class CDCToken extends CSSParserToken {\n  override tokenType = 'CDC';\n  override toSource() { return '-->'; }\n}\n\nexport class ColonToken extends CSSParserToken {\n  override tokenType = ':';\n}\n\nexport class SemicolonToken extends CSSParserToken {\n  override tokenType = ';';\n}\n\nexport class CommaToken extends CSSParserToken {\n  override tokenType = ',';\n}\n\nexport class GroupingToken extends CSSParserToken {\n  override value = '';\n  mirror = '';\n}\n\nexport class OpenCurlyToken extends GroupingToken {\n  override tokenType = '{';\n  constructor() {\n    super();\n    this.value = '{';\n    this.mirror = '}';\n  }\n}\n\nexport class CloseCurlyToken extends GroupingToken {\n  override tokenType = '}';\n  constructor() {\n    super();\n    this.value = '}';\n    this.mirror = '{';\n  }\n}\n\nexport class OpenSquareToken extends GroupingToken {\n  override tokenType = '[';\n  constructor() {\n    super();\n    this.value = '[';\n    this.mirror = ']';\n  }\n}\n\nexport class CloseSquareToken extends GroupingToken {\n  override tokenType = ']';\n  constructor() {\n    super();\n    this.value = ']';\n    this.mirror = '[';\n  }\n}\n\nexport class OpenParenToken extends GroupingToken {\n  override tokenType = '(';\n  constructor() {\n    super();\n    this.value = '(';\n    this.mirror = ')';\n  }\n}\n\nexport class CloseParenToken extends GroupingToken {\n  override   tokenType = ')';\n  constructor() {\n    super();\n    this.value = ')';\n    this.mirror = '(';\n  }\n}\n\nexport class IncludeMatchToken extends CSSParserToken {\n  override tokenType = '~=';\n}\n\nexport class DashMatchToken extends CSSParserToken {\n  override tokenType = '|=';\n}\n\nexport class PrefixMatchToken extends CSSParserToken {\n  override tokenType = '^=';\n}\n\nexport class SuffixMatchToken extends CSSParserToken {\n  override tokenType = '$=';\n}\n\nexport class SubstringMatchToken extends CSSParserToken {\n  override tokenType = '*=';\n}\n\nexport class ColumnToken extends CSSParserToken {\n  override tokenType = '||';\n}\n\nexport class EOFToken extends CSSParserToken {\n  override tokenType = 'EOF';\n  override toSource() { return ''; }\n}\n\nexport class DelimToken extends CSSParserToken {\n  override tokenType = 'DELIM';\n  override value: string = '';\n\n  constructor(code: number) {\n    super();\n    this.value = stringFromCode(code);\n  }\n\n  override toString() { return 'DELIM(' + this.value + ')'; }\n\n  override toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n\n  override toSource() {\n    if (this.value === '\\\\')\n      return '\\\\\\n';\n    else\n      return this.value;\n  }\n}\n\nexport abstract class StringValuedToken extends CSSParserToken {\n  override value: string = '';\n  ASCIIMatch(str: string) {\n    return this.value.toLowerCase() === str.toLowerCase();\n  }\n\n  override toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n}\n\nexport class IdentToken extends StringValuedToken {\n  constructor(val: string) {\n    super();\n    this.value = val;\n  }\n\n  override tokenType = 'IDENT';\n  override toString() { return 'IDENT(' + this.value + ')'; }\n  override toSource() {\n    return escapeIdent(this.value);\n  }\n}\n\nexport class FunctionToken extends StringValuedToken {\n  override tokenType = 'FUNCTION';\n  mirror: string;\n  constructor(val: string) {\n    super();\n    this.value = val;\n    this.mirror = ')';\n  }\n\n  override toString() { return 'FUNCTION(' + this.value + ')'; }\n\n  override toSource() {\n    return escapeIdent(this.value) + '(';\n  }\n}\n\nexport class AtKeywordToken extends StringValuedToken {\n  override tokenType = 'AT-KEYWORD';\n  constructor(val: string) {\n    super();\n    this.value = val;\n  }\n  override toString() { return 'AT(' + this.value + ')'; }\n  override toSource() {\n    return '@' + escapeIdent(this.value);\n  }\n}\n\nexport class HashToken extends StringValuedToken {\n  override tokenType = 'HASH';\n  type: string;\n  constructor(val: string) {\n    super();\n    this.value = val;\n    this.type = 'unrestricted';\n  }\n\n  override toString() { return 'HASH(' + this.value + ')'; }\n\n  override toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    return json;\n  }\n\n  override toSource() {\n    if (this.type === 'id')\n      return '#' + escapeIdent(this.value);\n    else\n      return '#' + escapeHash(this.value);\n\n  }\n}\n\nexport class StringToken extends StringValuedToken {\n  override tokenType = 'STRING';\n  constructor(val: string) {\n    super();\n    this.value = val;\n  }\n\n  override toString() {\n    return '\"' + escapeString(this.value) + '\"';\n  }\n}\n\nexport class URLToken extends StringValuedToken {\n  override tokenType = 'URL';\n  constructor(val: string) {\n    super();\n    this.value = val;\n  }\n  override toString() { return 'URL(' + this.value + ')'; }\n  override toSource() {\n    return 'url(\"' + escapeString(this.value) + '\")';\n  }\n}\n\nexport class NumberToken extends CSSParserToken {\n  override tokenType = 'NUMBER';\n  type: string;\n  repr: string;\n\n  constructor() {\n    super();\n    this.type = 'integer';\n    this.repr = '';\n  }\n\n  override toString() {\n    if (this.type === 'integer')\n      return 'INT(' + this.value + ')';\n    return 'NUMBER(' + this.value + ')';\n  }\n  override toJSON() {\n    const json = super.toJSON();\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    return json;\n  }\n  override toSource() { return this.repr; }\n}\n\n\nexport class PercentageToken extends CSSParserToken {\n  override tokenType = 'PERCENTAGE';\n  repr: string;\n  constructor() {\n    super();\n    this.repr = '';\n  }\n  override toString() { return 'PERCENTAGE(' + this.value + ')'; }\n  override toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.repr = this.repr;\n    return json;\n  }\n  override toSource() { return this.repr + '%'; }\n}\n\nexport class DimensionToken extends CSSParserToken {\n  override tokenType = 'DIMENSION';\n  type: string;\n  repr: string;\n  unit: string;\n\n  constructor() {\n    super();\n    this.type = 'integer';\n    this.repr = '';\n    this.unit = '';\n  }\n\n  override toString() { return 'DIM(' + this.value + ',' + this.unit + ')'; }\n  override toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    json.unit = this.unit;\n    return json;\n  }\n  override toSource() {\n    const source = this.repr;\n    let unit = escapeIdent(this.unit);\n    if (unit[0].toLowerCase() === 'e' && (unit[1] === '-' || between(unit.charCodeAt(1), 0x30, 0x39))) {\n      // Unit is ambiguous with scinot\n      // Remove the leading \"e\", replace with escape.\n      unit = '\\\\65 ' + unit.slice(1, unit.length);\n    }\n    return source + unit;\n  }\n}\n\nfunction escapeIdent(string: string) {\n  string = '' + string;\n  let result = '';\n  const firstcode = string.charCodeAt(0);\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0x0)\n      throw new InvalidCharacterError('Invalid character: the input contains U+0000.');\n\n    if (\n      between(code, 0x1, 0x1f) || code === 0x7f ||\n      (i === 0 && between(code, 0x30, 0x39)) ||\n      (i === 1 && between(code, 0x30, 0x39) && firstcode === 0x2d)\n    )\n      result += '\\\\' + code.toString(16) + ' ';\n    else if (\n      code >= 0x80 ||\n      code === 0x2d ||\n      code === 0x5f ||\n      between(code, 0x30, 0x39) ||\n      between(code, 0x41, 0x5a) ||\n      between(code, 0x61, 0x7a)\n    )\n      result += string[i];\n    else\n      result += '\\\\' + string[i];\n\n  }\n  return result;\n}\n\nfunction escapeHash(string: string) {\n  // Escapes the contents of \"unrestricted\"-type hash tokens.\n  // Won't preserve the ID-ness of \"id\"-type hash tokens;\n  // use escapeIdent() for that.\n  string = '' + string;\n  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0x0)\n      throw new InvalidCharacterError('Invalid character: the input contains U+0000.');\n\n    if (\n      code >= 0x80 ||\n      code === 0x2d ||\n      code === 0x5f ||\n      between(code, 0x30, 0x39) ||\n      between(code, 0x41, 0x5a) ||\n      between(code, 0x61, 0x7a)\n    )\n      result += string[i];\n    else\n      result += '\\\\' + code.toString(16) + ' ';\n\n  }\n  return result;\n}\n\nfunction escapeString(string: string) {\n  string = '' + string;\n  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n\n    if (code === 0x0)\n      throw new InvalidCharacterError('Invalid character: the input contains U+0000.');\n\n    if (between(code, 0x1, 0x1f) || code === 0x7f)\n      result += '\\\\' + code.toString(16) + ' ';\n    else if (code === 0x22 || code === 0x5c)\n      result += '\\\\' + string[i];\n    else\n      result += string[i];\n\n  }\n  return result;\n}\n"],
  "mappings": "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",
  "names": ["i", "codepoint", "str"]
}
