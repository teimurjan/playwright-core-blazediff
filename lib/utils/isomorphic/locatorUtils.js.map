{
  "version": 3,
  "sources": ["../../../src/utils/isomorphic/locatorUtils.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { escapeForAttributeSelector, escapeForTextSelector } from './stringUtils';\n\nexport type ByRoleOptions = {\n  checked?: boolean;\n  disabled?: boolean;\n  exact?: boolean;\n  expanded?: boolean;\n  includeHidden?: boolean;\n  level?: number;\n  name?: string | RegExp;\n  pressed?: boolean;\n  selected?: boolean;\n};\n\nfunction getByAttributeTextSelector(attrName: string, text: string | RegExp, options?: { exact?: boolean }): string {\n  return `internal:attr=[${attrName}=${escapeForAttributeSelector(text, options?.exact || false)}]`;\n}\n\nexport function getByTestIdSelector(testIdAttributeName: string, testId: string | RegExp): string {\n  return `internal:testid=[${testIdAttributeName}=${escapeForAttributeSelector(testId, true)}]`;\n}\n\nexport function getByLabelSelector(text: string | RegExp, options?: { exact?: boolean }): string {\n  return 'internal:label=' + escapeForTextSelector(text, !!options?.exact);\n}\n\nexport function getByAltTextSelector(text: string | RegExp, options?: { exact?: boolean }): string {\n  return getByAttributeTextSelector('alt', text, options);\n}\n\nexport function getByTitleSelector(text: string | RegExp, options?: { exact?: boolean }): string {\n  return getByAttributeTextSelector('title', text, options);\n}\n\nexport function getByPlaceholderSelector(text: string | RegExp, options?: { exact?: boolean }): string {\n  return getByAttributeTextSelector('placeholder', text, options);\n}\n\nexport function getByTextSelector(text: string | RegExp, options?: { exact?: boolean }): string {\n  return 'internal:text=' + escapeForTextSelector(text, !!options?.exact);\n}\n\nexport function getByRoleSelector(role: string, options: ByRoleOptions = {}): string {\n  const props: string[][] = [];\n  if (options.checked !== undefined)\n    props.push(['checked', String(options.checked)]);\n  if (options.disabled !== undefined)\n    props.push(['disabled', String(options.disabled)]);\n  if (options.selected !== undefined)\n    props.push(['selected', String(options.selected)]);\n  if (options.expanded !== undefined)\n    props.push(['expanded', String(options.expanded)]);\n  if (options.includeHidden !== undefined)\n    props.push(['include-hidden', String(options.includeHidden)]);\n  if (options.level !== undefined)\n    props.push(['level', String(options.level)]);\n  if (options.name !== undefined)\n    props.push(['name', escapeForAttributeSelector(options.name, !!options.exact)]);\n  if (options.pressed !== undefined)\n    props.push(['pressed', String(options.pressed)]);\n  return `internal:role=${role}${props.map(([n, v]) => `[${n}=${v}]`).join('')}`;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,yBAAkE;AAclE,SAAS,2BAA2B,UAAkB,MAAuB,SAAuC;AAClH,SAAO,kBAAkB,QAAQ,QAAI,+CAA2B,MAAM,SAAS,SAAS,KAAK,CAAC;AAChG;AAEO,SAAS,oBAAoB,qBAA6B,QAAiC;AAChG,SAAO,oBAAoB,mBAAmB,QAAI,+CAA2B,QAAQ,IAAI,CAAC;AAC5F;AAEO,SAAS,mBAAmB,MAAuB,SAAuC;AAC/F,SAAO,wBAAoB,0CAAsB,MAAM,CAAC,CAAC,SAAS,KAAK;AACzE;AAEO,SAAS,qBAAqB,MAAuB,SAAuC;AACjG,SAAO,2BAA2B,OAAO,MAAM,OAAO;AACxD;AAEO,SAAS,mBAAmB,MAAuB,SAAuC;AAC/F,SAAO,2BAA2B,SAAS,MAAM,OAAO;AAC1D;AAEO,SAAS,yBAAyB,MAAuB,SAAuC;AACrG,SAAO,2BAA2B,eAAe,MAAM,OAAO;AAChE;AAEO,SAAS,kBAAkB,MAAuB,SAAuC;AAC9F,SAAO,uBAAmB,0CAAsB,MAAM,CAAC,CAAC,SAAS,KAAK;AACxE;AAEO,SAAS,kBAAkB,MAAc,UAAyB,CAAC,GAAW;AACnF,QAAM,QAAoB,CAAC;AAC3B,MAAI,QAAQ,YAAY;AACtB,UAAM,KAAK,CAAC,WAAW,OAAO,QAAQ,OAAO,CAAC,CAAC;AACjD,MAAI,QAAQ,aAAa;AACvB,UAAM,KAAK,CAAC,YAAY,OAAO,QAAQ,QAAQ,CAAC,CAAC;AACnD,MAAI,QAAQ,aAAa;AACvB,UAAM,KAAK,CAAC,YAAY,OAAO,QAAQ,QAAQ,CAAC,CAAC;AACnD,MAAI,QAAQ,aAAa;AACvB,UAAM,KAAK,CAAC,YAAY,OAAO,QAAQ,QAAQ,CAAC,CAAC;AACnD,MAAI,QAAQ,kBAAkB;AAC5B,UAAM,KAAK,CAAC,kBAAkB,OAAO,QAAQ,aAAa,CAAC,CAAC;AAC9D,MAAI,QAAQ,UAAU;AACpB,UAAM,KAAK,CAAC,SAAS,OAAO,QAAQ,KAAK,CAAC,CAAC;AAC7C,MAAI,QAAQ,SAAS;AACnB,UAAM,KAAK,CAAC,YAAQ,+CAA2B,QAAQ,MAAM,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC;AAChF,MAAI,QAAQ,YAAY;AACtB,UAAM,KAAK,CAAC,WAAW,OAAO,QAAQ,OAAO,CAAC,CAAC;AACjD,SAAO,iBAAiB,IAAI,GAAG,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC;AAC9E;",
  "names": []
}
