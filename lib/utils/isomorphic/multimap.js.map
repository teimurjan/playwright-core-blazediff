{
  "version": 3,
  "sources": ["../../../src/utils/isomorphic/multimap.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class MultiMap<K, V> {\n  private _map: Map<K, V[]>;\n\n  constructor() {\n    this._map = new Map<K, V[]>();\n  }\n\n  set(key: K, value: V) {\n    let values = this._map.get(key);\n    if (!values) {\n      values = [];\n      this._map.set(key, values);\n    }\n    values.push(value);\n  }\n\n  get(key: K): V[] {\n    return this._map.get(key) || [];\n  }\n\n  has(key: K): boolean {\n    return this._map.has(key);\n  }\n\n  delete(key: K, value: V) {\n    const values = this._map.get(key);\n    if (!values)\n      return;\n    if (values.includes(value))\n      this._map.set(key, values.filter(v => value !== v));\n  }\n\n  deleteAll(key: K) {\n    this._map.delete(key);\n  }\n\n  hasValue(key: K, value: V): boolean {\n    const values = this._map.get(key);\n    if (!values)\n      return false;\n    return values.includes(value);\n  }\n\n  get size(): number {\n    return this._map.size;\n  }\n\n  [Symbol.iterator](): Iterator<[K, V[]]> {\n    return this._map[Symbol.iterator]();\n  }\n\n  keys(): IterableIterator<K> {\n    return this._map.keys();\n  }\n\n  values(): Iterable<V> {\n    const result: V[] = [];\n    for (const key of this.keys())\n      result.push(...this.get(key));\n    return result;\n  }\n\n  clear() {\n    this._map.clear();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBO,MAAM,SAAe;AAAA,EAG1B,cAAc;AACZ,SAAK,OAAO,oBAAI,IAAY;AAAA,EAC9B;AAAA,EAEA,IAAI,KAAQ,OAAU;AACpB,QAAI,SAAS,KAAK,KAAK,IAAI,GAAG;AAC9B,QAAI,CAAC,QAAQ;AACX,eAAS,CAAC;AACV,WAAK,KAAK,IAAI,KAAK,MAAM;AAAA,IAC3B;AACA,WAAO,KAAK,KAAK;AAAA,EACnB;AAAA,EAEA,IAAI,KAAa;AACf,WAAO,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC;AAAA,EAChC;AAAA,EAEA,IAAI,KAAiB;AACnB,WAAO,KAAK,KAAK,IAAI,GAAG;AAAA,EAC1B;AAAA,EAEA,OAAO,KAAQ,OAAU;AACvB,UAAM,SAAS,KAAK,KAAK,IAAI,GAAG;AAChC,QAAI,CAAC;AACH;AACF,QAAI,OAAO,SAAS,KAAK;AACvB,WAAK,KAAK,IAAI,KAAK,OAAO,OAAO,OAAK,UAAU,CAAC,CAAC;AAAA,EACtD;AAAA,EAEA,UAAU,KAAQ;AAChB,SAAK,KAAK,OAAO,GAAG;AAAA,EACtB;AAAA,EAEA,SAAS,KAAQ,OAAmB;AAClC,UAAM,SAAS,KAAK,KAAK,IAAI,GAAG;AAChC,QAAI,CAAC;AACH,aAAO;AACT,WAAO,OAAO,SAAS,KAAK;AAAA,EAC9B;AAAA,EAEA,IAAI,OAAe;AACjB,WAAO,KAAK,KAAK;AAAA,EACnB;AAAA,EAEA,CAAC,OAAO,QAAQ,IAAwB;AACtC,WAAO,KAAK,KAAK,OAAO,QAAQ,EAAE;AAAA,EACpC;AAAA,EAEA,OAA4B;AAC1B,WAAO,KAAK,KAAK,KAAK;AAAA,EACxB;AAAA,EAEA,SAAsB;AACpB,UAAM,SAAc,CAAC;AACrB,eAAW,OAAO,KAAK,KAAK;AAC1B,aAAO,KAAK,GAAG,KAAK,IAAI,GAAG,CAAC;AAC9B,WAAO;AAAA,EACT;AAAA,EAEA,QAAQ;AACN,SAAK,KAAK,MAAM;AAAA,EAClB;AACF;",
  "names": []
}
