{
  "version": 3,
  "sources": ["../../../src/utils/isomorphic/semaphore.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ManualPromise } from './manualPromise';\n\nexport class Semaphore {\n  private _max: number;\n  private _acquired = 0;\n  private _queue: ManualPromise[] = [];\n\n  constructor(max: number) {\n    this._max = max;\n  }\n\n  setMax(max: number) {\n    this._max = max;\n  }\n\n  acquire(): Promise<void> {\n    const lock = new ManualPromise();\n    this._queue.push(lock);\n    this._flush();\n    return lock;\n  }\n\n  release() {\n    --this._acquired;\n    this._flush();\n  }\n\n  private _flush() {\n    while (this._acquired < this._max && this._queue.length) {\n      ++this._acquired;\n      this._queue.shift()!.resolve();\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,2BAA8B;AAEvB,MAAM,UAAU;AAAA,EAKrB,YAAY,KAAa;AAHzB,SAAQ,YAAY;AACpB,SAAQ,SAA0B,CAAC;AAGjC,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,OAAO,KAAa;AAClB,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,UAAyB;AACvB,UAAM,OAAO,IAAI,mCAAc;AAC/B,SAAK,OAAO,KAAK,IAAI;AACrB,SAAK,OAAO;AACZ,WAAO;AAAA,EACT;AAAA,EAEA,UAAU;AACR,MAAE,KAAK;AACP,SAAK,OAAO;AAAA,EACd;AAAA,EAEQ,SAAS;AACf,WAAO,KAAK,YAAY,KAAK,QAAQ,KAAK,OAAO,QAAQ;AACvD,QAAE,KAAK;AACP,WAAK,OAAO,MAAM,EAAG,QAAQ;AAAA,IAC/B;AAAA,EACF;AACF;",
  "names": []
}
