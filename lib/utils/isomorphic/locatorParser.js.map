{
  "version": 3,
  "sources": ["../../../src/utils/isomorphic/locatorParser.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { asLocators } from './locatorGenerators';\nimport { parseSelector } from './selectorParser';\nimport { escapeForAttributeSelector, escapeForTextSelector } from './stringUtils';\n\nimport type { Language, Quote } from './locatorGenerators';\n\ntype TemplateParams = { quote: string, text: string }[];\nfunction parseLocator(locator: string, testIdAttributeName: string): { selector: string, preferredQuote: Quote | undefined } {\n  locator = locator\n      .replace(/AriaRole\\s*\\.\\s*([\\w]+)/g, (_, group) => group.toLowerCase())\n      .replace(/(get_by_role|getByRole)\\s*\\(\\s*(?:[\"'`])([^'\"`]+)['\"`]/g, (_, group1, group2) => `${group1}(${group2.toLowerCase()}`);\n  const params: TemplateParams = [];\n  let template = '';\n  for (let i = 0; i < locator.length; ++i) {\n    const quote = locator[i];\n    if (quote !== '\"' && quote !== '\\'' && quote !== '`' && quote !== '/') {\n      template += quote;\n      continue;\n    }\n    const isRegexEscaping = locator[i - 1] === 'r' || locator[i] === '/';\n    ++i;\n    let text = '';\n    while (i < locator.length) {\n      if (locator[i] === '\\\\') {\n        if (isRegexEscaping) {\n          if (locator[i + 1] !== quote)\n            text += locator[i];\n          ++i;\n          text += locator[i];\n        } else {\n          ++i;\n          if (locator[i] === 'n')\n            text += '\\n';\n          else if (locator[i] === 'r')\n            text += '\\r';\n          else if (locator[i] === 't')\n            text += '\\t';\n          else\n            text += locator[i];\n        }\n        ++i;\n        continue;\n      }\n      if (locator[i] !== quote) {\n        text += locator[i++];\n        continue;\n      }\n      break;\n    }\n    params.push({ quote, text });\n    template += (quote === '/' ? 'r' : '') + '$' + params.length;\n  }\n\n  // Equalize languages.\n  template = template.toLowerCase()\n      .replace(/get_by_alt_text/g, 'getbyalttext')\n      .replace(/get_by_test_id/g, 'getbytestid')\n      .replace(/get_by_([\\w]+)/g, 'getby$1')\n      .replace(/has_not_text/g, 'hasnottext')\n      .replace(/has_text/g, 'hastext')\n      .replace(/has_not/g, 'hasnot')\n      .replace(/frame_locator/g, 'framelocator')\n      .replace(/content_frame/g, 'contentframe')\n      .replace(/[{}\\s]/g, '')\n      .replace(/new\\(\\)/g, '')\n      .replace(/new[\\w]+\\.[\\w]+options\\(\\)/g, '')\n      .replace(/\\.set/g, ',set')\n      .replace(/\\.or_\\(/g, 'or(') // Python has \"or_\" instead of \"or\".\n      .replace(/\\.and_\\(/g, 'and(') // Python has \"and_\" instead of \"and\".\n      .replace(/:/g, '=')\n      .replace(/,re\\.ignorecase/g, 'i')\n      .replace(/,pattern.case_insensitive/g, 'i')\n      .replace(/,regexoptions.ignorecase/g, 'i')\n      .replace(/re.compile\\(([^)]+)\\)/g, '$1') // Python has regex strings as r\"foo\"\n      .replace(/pattern.compile\\(([^)]+)\\)/g, 'r$1')\n      .replace(/newregex\\(([^)]+)\\)/g, 'r$1')\n      .replace(/string=/g, '=')\n      .replace(/regex=/g, '=')\n      .replace(/,,/g, ',')\n      .replace(/,\\)/g, ')');\n\n  const preferredQuote = params.map(p => p.quote).filter(quote => '\\'\"`'.includes(quote))[0] as Quote | undefined;\n  return { selector: transform(template, params, testIdAttributeName), preferredQuote };\n}\n\nfunction countParams(template: string) {\n  return [...template.matchAll(/\\$\\d+/g)].length;\n}\n\nfunction shiftParams(template: string, sub: number) {\n  return template.replace(/\\$(\\d+)/g, (_, ordinal) => `$${ordinal - sub}`);\n}\n\nfunction transform(template: string, params: TemplateParams, testIdAttributeName: string): string {\n  // Recursively handle filter(has=, hasnot=, sethas(), sethasnot()).\n  // TODO: handle and(locator), or(locator), locator(locator), locator(has=, hasnot=, sethas(), sethasnot()).\n  while (true) {\n    const hasMatch = template.match(/filter\\(,?(has=|hasnot=|sethas\\(|sethasnot\\()/);\n    if (!hasMatch)\n      break;\n\n    // Extract inner locator based on balanced parens.\n    const start = hasMatch.index! + hasMatch[0].length;\n    let balance = 0;\n    let end = start;\n    for (; end < template.length; end++) {\n      if (template[end] === '(')\n        balance++;\n      else if (template[end] === ')')\n        balance--;\n      if (balance < 0)\n        break;\n    }\n\n    // Replace Java sethas(...) and sethasnot(...) with has=... and hasnot=...\n    let prefix = template.substring(0, start);\n    let extraSymbol = 0;\n    if (['sethas(', 'sethasnot('].includes(hasMatch[1])) {\n      // Eat extra ) symbol at the end of sethas(...)\n      extraSymbol = 1;\n      prefix = prefix.replace(/sethas\\($/, 'has=').replace(/sethasnot\\($/, 'hasnot=');\n    }\n\n    const paramsCountBeforeHas = countParams(template.substring(0, start));\n    const hasTemplate = shiftParams(template.substring(start, end), paramsCountBeforeHas);\n    const paramsCountInHas = countParams(hasTemplate);\n    const hasParams = params.slice(paramsCountBeforeHas, paramsCountBeforeHas + paramsCountInHas);\n    const hasSelector = JSON.stringify(transform(hasTemplate, hasParams, testIdAttributeName));\n\n    // Replace filter(has=...) with filter(has2=$5). Use has2 to avoid matching the same filter again.\n    // Replace filter(hasnot=...) with filter(hasnot2=$5). Use hasnot2 to avoid matching the same filter again.\n    template = prefix.replace(/=$/, '2=') + `$${paramsCountBeforeHas + 1}` + shiftParams(template.substring(end + extraSymbol), paramsCountInHas - 1);\n\n    // Replace inner params with $5 value.\n    const paramsBeforeHas = params.slice(0, paramsCountBeforeHas);\n    const paramsAfterHas = params.slice(paramsCountBeforeHas + paramsCountInHas);\n    params = paramsBeforeHas.concat([{ quote: '\"', text: hasSelector }]).concat(paramsAfterHas);\n  }\n\n  // Transform to selector engines.\n  template = template\n      .replace(/\\,set([\\w]+)\\(([^)]+)\\)/g, (_, group1, group2) => ',' + group1.toLowerCase() + '=' + group2.toLowerCase())\n      .replace(/framelocator\\(([^)]+)\\)/g, '$1.internal:control=enter-frame')\n      .replace(/contentframe(\\(\\))?/g, 'internal:control=enter-frame')\n      .replace(/locator\\(([^)]+),hastext=([^),]+)\\)/g, 'locator($1).internal:has-text=$2')\n      .replace(/locator\\(([^)]+),hasnottext=([^),]+)\\)/g, 'locator($1).internal:has-not-text=$2')\n      .replace(/locator\\(([^)]+),hastext=([^),]+)\\)/g, 'locator($1).internal:has-text=$2')\n      .replace(/locator\\(([^)]+)\\)/g, '$1')\n      .replace(/getbyrole\\(([^)]+)\\)/g, 'internal:role=$1')\n      .replace(/getbytext\\(([^)]+)\\)/g, 'internal:text=$1')\n      .replace(/getbylabel\\(([^)]+)\\)/g, 'internal:label=$1')\n      .replace(/getbytestid\\(([^)]+)\\)/g, `internal:testid=[${testIdAttributeName}=$1]`)\n      .replace(/getby(placeholder|alt|title)(?:text)?\\(([^)]+)\\)/g, 'internal:attr=[$1=$2]')\n      .replace(/first(\\(\\))?/g, 'nth=0')\n      .replace(/last(\\(\\))?/g, 'nth=-1')\n      .replace(/nth\\(([^)]+)\\)/g, 'nth=$1')\n      .replace(/filter\\(,?visible=true\\)/g, 'visible=true')\n      .replace(/filter\\(,?visible=false\\)/g, 'visible=false')\n      .replace(/filter\\(,?hastext=([^)]+)\\)/g, 'internal:has-text=$1')\n      .replace(/filter\\(,?hasnottext=([^)]+)\\)/g, 'internal:has-not-text=$1')\n      .replace(/filter\\(,?has2=([^)]+)\\)/g, 'internal:has=$1')\n      .replace(/filter\\(,?hasnot2=([^)]+)\\)/g, 'internal:has-not=$1')\n      .replace(/,exact=false/g, '')\n      .replace(/,exact=true/g, 's')\n      .replace(/,includehidden=/g, ',include-hidden=')\n      .replace(/\\,/g, '][');\n\n  const parts = template.split('.');\n  // Turn \"internal:control=enter-frame >> nth=0\" into \"nth=0 >> internal:control=enter-frame\"\n  // because these are swapped in locators vs selectors.\n  for (let index = 0; index < parts.length - 1; index++) {\n    if (parts[index] === 'internal:control=enter-frame' && parts[index + 1].startsWith('nth=')) {\n      // Swap nth and enter-frame.\n      const [nth] = parts.splice(index, 1);\n      parts.splice(index + 1, 0, nth);\n    }\n  }\n\n  // Substitute params.\n  return parts.map(t => {\n    if (!t.startsWith('internal:') || t === 'internal:control')\n      return t.replace(/\\$(\\d+)/g, (_, ordinal) => { const param = params[+ordinal - 1]; return param.text; });\n    t = t.includes('[') ? t.replace(/\\]/, '') + ']' : t;\n    t = t\n        .replace(/(?:r)\\$(\\d+)(i)?/g, (_, ordinal, suffix) => {\n          const param = params[+ordinal - 1];\n          if (t.startsWith('internal:attr') || t.startsWith('internal:testid') || t.startsWith('internal:role'))\n            return escapeForAttributeSelector(new RegExp(param.text), false) + (suffix || '');\n          return escapeForTextSelector(new RegExp(param.text, suffix), false);\n        })\n        .replace(/\\$(\\d+)(i|s)?/g, (_, ordinal, suffix) => {\n          const param = params[+ordinal - 1];\n          if (t.startsWith('internal:has=') || t.startsWith('internal:has-not='))\n            return param.text;\n          if (t.startsWith('internal:testid'))\n            return escapeForAttributeSelector(param.text, true);\n          if (t.startsWith('internal:attr') || t.startsWith('internal:role'))\n            return escapeForAttributeSelector(param.text, suffix === 's');\n          return escapeForTextSelector(param.text, suffix === 's');\n        });\n    return t;\n  }).join(' >> ');\n}\n\nexport function locatorOrSelectorAsSelector(language: Language, locator: string, testIdAttributeName: string): string {\n  try {\n    return unsafeLocatorOrSelectorAsSelector(language, locator, testIdAttributeName);\n  } catch (e) {\n    return '';\n  }\n}\n\nexport function unsafeLocatorOrSelectorAsSelector(language: Language, locator: string, testIdAttributeName: string): string {\n  try {\n    parseSelector(locator);\n    return locator;\n  } catch (e) {\n  }\n  const { selector, preferredQuote } = parseLocator(locator, testIdAttributeName);\n  const locators = asLocators(language, selector, undefined, undefined, preferredQuote);\n  const digest = digestForComparison(language, locator);\n  if (locators.some(candidate => digestForComparison(language, candidate) === digest))\n    return selector;\n  return '';\n}\n\nfunction digestForComparison(language: Language, locator: string) {\n  locator = locator.replace(/\\s/g, '');\n  if (language === 'javascript')\n    locator = locator.replace(/\\\\?[\"`]/g, '\\'').replace(/,{}/g, '');\n  return locator;\n}\n"],
  "mappings": "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",
  "names": []
}
