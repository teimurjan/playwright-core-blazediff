{
  "version": 3,
  "sources": ["../../../src/utils/isomorphic/ariaSnapshot.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// https://www.w3.org/TR/wai-aria-1.2/#role_definitions\n\nexport type AriaRole = 'alert' | 'alertdialog' | 'application' | 'article' | 'banner' | 'blockquote' | 'button' | 'caption' | 'cell' | 'checkbox' | 'code' | 'columnheader' | 'combobox' |\n  'complementary' | 'contentinfo' | 'definition' | 'deletion' | 'dialog' | 'directory' | 'document' | 'emphasis' | 'feed' | 'figure' | 'form' | 'generic' | 'grid' |\n  'gridcell' | 'group' | 'heading' | 'img' | 'insertion' | 'link' | 'list' | 'listbox' | 'listitem' | 'log' | 'main' | 'mark' | 'marquee' | 'math' | 'meter' | 'menu' |\n  'menubar' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'none' | 'note' | 'option' | 'paragraph' | 'presentation' | 'progressbar' | 'radio' | 'radiogroup' |\n  'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'search' | 'searchbox' | 'separator' | 'slider' |\n  'spinbutton' | 'status' | 'strong' | 'subscript' | 'superscript' | 'switch' | 'tab' | 'table' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'time' | 'timer' |\n  'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem';\n\nexport type AriaProps = {\n  checked?: boolean | 'mixed';\n  disabled?: boolean;\n  expanded?: boolean;\n  active?: boolean;\n  level?: number;\n  pressed?: boolean | 'mixed';\n  selected?: boolean;\n};\n\n// We pass parsed template between worlds using JSON, make it easy.\nexport type AriaRegex = { pattern: string };\n\nexport type AriaTemplateTextNode = {\n  kind: 'text';\n  text: AriaRegex | string;\n};\n\nexport type AriaTemplateRoleNode = AriaProps & {\n  kind: 'role';\n  role: AriaRole | 'fragment';\n  name?: AriaRegex | string;\n  children?: AriaTemplateNode[];\n  props?: Record<string, string | AriaRegex>;\n  containerMode?: 'contain' | 'equal' | 'deep-equal';\n};\n\nexport type AriaTemplateNode = AriaTemplateRoleNode | AriaTemplateTextNode;\n\nimport type * as yamlTypes from 'yaml';\n\ntype YamlLibrary = {\n  parseDocument: typeof yamlTypes.parseDocument;\n  Scalar: typeof yamlTypes.Scalar;\n  YAMLMap: typeof yamlTypes.YAMLMap;\n  YAMLSeq: typeof yamlTypes.YAMLSeq;\n  LineCounter: typeof yamlTypes.LineCounter;\n};\n\ntype ParsedYamlPosition = { line: number; col: number; };\ntype ParsingOptions = yamlTypes.ParseOptions;\n\nexport type ParsedYamlError = {\n  message: string;\n  range: [ParsedYamlPosition, ParsedYamlPosition];\n};\n\nexport function parseAriaSnapshotUnsafe(yaml: YamlLibrary, text: string, options: ParsingOptions = {}): AriaTemplateNode {\n  const result = parseAriaSnapshot(yaml, text, options);\n  if (result.errors.length)\n    throw new Error(result.errors[0].message);\n  return result.fragment;\n}\n\nexport function parseAriaSnapshot(yaml: YamlLibrary, text: string, options: ParsingOptions = {}): { fragment: AriaTemplateNode, errors: ParsedYamlError[] } {\n  const lineCounter = new yaml.LineCounter();\n  const parseOptions: ParsingOptions = {\n    keepSourceTokens: true,\n    lineCounter,\n    ...options,\n  };\n  const yamlDoc = yaml.parseDocument(text, parseOptions);\n  const errors: ParsedYamlError[] = [];\n\n  const convertRange = (range: [number, number] | yamlTypes.Range): [ParsedYamlPosition, ParsedYamlPosition] => {\n    return [lineCounter.linePos(range[0]), lineCounter.linePos(range[1])];\n  };\n\n  const addError = (error: yamlTypes.YAMLError) => {\n    errors.push({\n      message: error.message,\n      range: [lineCounter.linePos(error.pos[0]), lineCounter.linePos(error.pos[1])],\n    });\n  };\n\n  const convertSeq = (container: AriaTemplateRoleNode, seq: yamlTypes.YAMLSeq) => {\n    for (const item of seq.items) {\n      const itemIsString = item instanceof yaml.Scalar && typeof item.value === 'string';\n      if (itemIsString) {\n        const childNode = KeyParser.parse(item, parseOptions, errors);\n        if (childNode) {\n          container.children = container.children || [];\n          container.children.push(childNode);\n        }\n        continue;\n      }\n      const itemIsMap = item instanceof yaml.YAMLMap;\n      if (itemIsMap) {\n        convertMap(container, item);\n        continue;\n      }\n      errors.push({\n        message: 'Sequence items should be strings or maps',\n        range: convertRange((item as any).range || seq.range),\n      });\n    }\n  };\n\n  const convertMap = (container: AriaTemplateRoleNode, map: yamlTypes.YAMLMap) => {\n    for (const entry of map.items) {\n      container.children = container.children || [];\n      // Key must by a string\n      const keyIsString = entry.key instanceof yaml.Scalar && typeof entry.key.value === 'string';\n      if (!keyIsString) {\n        errors.push({\n          message: 'Only string keys are supported',\n          range: convertRange((entry.key as any).range || map.range),\n        });\n        continue;\n      }\n\n      const key: yamlTypes.Scalar<string> = entry.key as yamlTypes.Scalar<string>;\n      const value = entry.value;\n\n      // - text: \"text\"\n      if (key.value === 'text') {\n        const valueIsString = value instanceof yaml.Scalar && typeof value.value === 'string';\n        if (!valueIsString) {\n          errors.push({\n            message: 'Text value should be a string',\n            range: convertRange(((entry.value as any).range || map.range)),\n          });\n          continue;\n        }\n        container.children.push({\n          kind: 'text',\n          text: valueOrRegex(value.value)\n        });\n        continue;\n      }\n\n      // - /children: equal\n      if (key.value === '/children') {\n        const valueIsString = value instanceof yaml.Scalar && typeof value.value === 'string';\n        if (!valueIsString || (value.value !== 'contain' && value.value !== 'equal' && value.value !== 'deep-equal')) {\n          errors.push({\n            message: 'Strict value should be \"contain\", \"equal\" or \"deep-equal\"',\n            range: convertRange(((entry.value as any).range || map.range)),\n          });\n          continue;\n        }\n        container.containerMode = value.value;\n        continue;\n      }\n\n      // - /url: \"about:blank\"\n      if (key.value.startsWith('/')) {\n        const valueIsString = value instanceof yaml.Scalar && typeof value.value === 'string';\n        if (!valueIsString) {\n          errors.push({\n            message: 'Property value should be a string',\n            range: convertRange(((entry.value as any).range || map.range)),\n          });\n          continue;\n        }\n        container.props = container.props ?? {};\n        container.props[key.value.slice(1)] = valueOrRegex(value.value);\n        continue;\n      }\n\n      // role \"name\": ...\n      const childNode = KeyParser.parse(key, parseOptions, errors);\n      if (!childNode)\n        continue;\n\n      // - role \"name\": \"text\"\n      const valueIsScalar = value instanceof yaml.Scalar;\n      if (valueIsScalar) {\n        const type = typeof value.value;\n        if (type !== 'string' && type !== 'number' && type !== 'boolean') {\n          errors.push({\n            message: 'Node value should be a string or a sequence',\n            range: convertRange(((entry.value as any).range || map.range)),\n          });\n          continue;\n        }\n\n        container.children.push({\n          ...childNode,\n          children: [{\n            kind: 'text',\n            text: valueOrRegex(String(value.value))\n          }]\n        });\n        continue;\n      }\n\n      // - role \"name\":\n      //   - child\n      const valueIsSequence = value instanceof yaml.YAMLSeq;\n      if (valueIsSequence) {\n        container.children.push(childNode);\n        convertSeq(childNode, value as yamlTypes.YAMLSeq);\n        continue;\n      }\n\n      errors.push({\n        message: 'Map values should be strings or sequences',\n        range: convertRange((entry.value as any).range || map.range),\n      });\n    }\n  };\n\n  const fragment: AriaTemplateNode = { kind: 'role', role: 'fragment' };\n\n  yamlDoc.errors.forEach(addError);\n  if (errors.length)\n    return { errors, fragment };\n\n  if (!(yamlDoc.contents instanceof yaml.YAMLSeq)) {\n    errors.push({\n      message: 'Aria snapshot must be a YAML sequence, elements starting with \" -\"',\n      range: yamlDoc.contents ? convertRange(yamlDoc.contents!.range) : [{ line: 0, col: 0 }, { line: 0, col: 0 }],\n    });\n  }\n  if (errors.length)\n    return { errors, fragment };\n\n  convertSeq(fragment, yamlDoc.contents as yamlTypes.YAMLSeq);\n  if (errors.length)\n    return { errors, fragment: emptyFragment };\n  // `- button` should target the button, not its parent.\n  if (fragment.children?.length === 1 && (!fragment.containerMode || fragment.containerMode === 'contain'))\n    return { fragment: fragment.children[0], errors: [] };\n  return { fragment, errors: [] };\n}\n\nconst emptyFragment: AriaTemplateRoleNode = { kind: 'role', role: 'fragment' };\n\nfunction normalizeWhitespace(text: string) {\n  // TODO: why is this different from normalizeWhitespace in stringUtils.ts?\n  return text.replace(/[\\u200b\\u00ad]/g, '').replace(/[\\r\\n\\s\\t]+/g, ' ').trim();\n}\n\nexport function valueOrRegex(value: string): string | AriaRegex {\n  return value.startsWith('/') && value.endsWith('/') && value.length > 1 ? { pattern: value.slice(1, -1) } : normalizeWhitespace(value);\n}\n\nexport class KeyParser {\n  private _input: string;\n  private _pos: number;\n  private _length: number;\n  private _options: ParsingOptions;\n\n  static parse(text: yamlTypes.Scalar<string>, options: ParsingOptions, errors: ParsedYamlError[]): AriaTemplateRoleNode | null {\n    try {\n      return new KeyParser(text.value, options)._parse();\n    } catch (e) {\n      if (e instanceof ParserError) {\n        const message = options.prettyErrors === false ? e.message : e.message + ':\\n\\n' + text.value + '\\n' + ' '.repeat(e.pos) + '^\\n';\n        errors.push({\n          message,\n          range: [options.lineCounter!.linePos(text.range![0]), options.lineCounter!.linePos(text.range![0] + e.pos)],\n        });\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  constructor(input: string, options: ParsingOptions) {\n    this._input = input;\n    this._pos = 0;\n    this._length = input.length;\n    this._options = options;\n  }\n\n  private _peek() {\n    return this._input[this._pos] || '';\n  }\n\n  private _next() {\n    if (this._pos < this._length)\n      return this._input[this._pos++];\n    return null;\n  }\n\n  private _eof() {\n    return this._pos >= this._length;\n  }\n\n  private _isWhitespace() {\n    return !this._eof() && /\\s/.test(this._peek());\n  }\n\n  private _skipWhitespace() {\n    while (this._isWhitespace())\n      this._pos++;\n  }\n\n  private _readIdentifier(type: 'role' | 'attribute'): string {\n    if (this._eof())\n      this._throwError(`Unexpected end of input when expecting ${type}`);\n    const start = this._pos;\n    while (!this._eof() && /[a-zA-Z]/.test(this._peek()))\n      this._pos++;\n    return this._input.slice(start, this._pos);\n  }\n\n  private _readString(): string {\n    let result = '';\n    let escaped = false;\n    while (!this._eof()) {\n      const ch = this._next();\n      if (escaped) {\n        result += ch;\n        escaped = false;\n      } else if (ch === '\\\\') {\n        escaped = true;\n      } else if (ch === '\"') {\n        return result;\n      } else {\n        result += ch;\n      }\n    }\n    this._throwError('Unterminated string');\n  }\n\n  private _throwError(message: string, offset: number = 0): never {\n    throw new ParserError(message, offset || this._pos);\n  }\n\n  private _readRegex(): AriaRegex {\n    let result = '';\n    let escaped = false;\n    let insideClass = false;\n    while (!this._eof()) {\n      const ch = this._next();\n      if (escaped) {\n        result += ch;\n        escaped = false;\n      } else if (ch === '\\\\') {\n        escaped = true;\n        result += ch;\n      } else if (ch === '/' && !insideClass) {\n        return { pattern: result };\n      } else if (ch === '[') {\n        insideClass = true;\n        result += ch;\n      } else if (ch === ']' && insideClass) {\n        result += ch;\n        insideClass = false;\n      } else {\n        result += ch;\n      }\n    }\n    this._throwError('Unterminated regex');\n  }\n\n  private _readStringOrRegex(): string | AriaRegex | null {\n    const ch = this._peek();\n    if (ch === '\"') {\n      this._next();\n      return normalizeWhitespace(this._readString());\n    }\n\n    if (ch === '/') {\n      this._next();\n      return this._readRegex();\n    }\n\n    return null;\n  }\n\n  private _readAttributes(result: AriaTemplateRoleNode) {\n    let errorPos = this._pos;\n    while (true) {\n      this._skipWhitespace();\n      if (this._peek() === '[') {\n        this._next();\n        this._skipWhitespace();\n        errorPos = this._pos;\n        const flagName = this._readIdentifier('attribute');\n        this._skipWhitespace();\n        let flagValue = '';\n        if (this._peek() === '=') {\n          this._next();\n          this._skipWhitespace();\n          errorPos = this._pos;\n          while (this._peek() !== ']' && !this._isWhitespace() && !this._eof())\n            flagValue += this._next();\n        }\n        this._skipWhitespace();\n        if (this._peek() !== ']')\n          this._throwError('Expected ]');\n\n        this._next(); // Consume ']'\n        this._applyAttribute(result, flagName, flagValue || 'true', errorPos);\n      } else {\n        break;\n      }\n    }\n  }\n\n  _parse(): AriaTemplateRoleNode {\n    this._skipWhitespace();\n\n    const role = this._readIdentifier('role') as AriaTemplateRoleNode['role'];\n    this._skipWhitespace();\n    const name = this._readStringOrRegex() || '';\n    const result: AriaTemplateRoleNode = { kind: 'role', role, name };\n    this._readAttributes(result);\n    this._skipWhitespace();\n    if (!this._eof())\n      this._throwError('Unexpected input');\n    return result;\n  }\n\n  private _applyAttribute(node: AriaTemplateRoleNode, key: string, value: string, errorPos: number) {\n    if (key === 'checked') {\n      this._assert(value === 'true' || value === 'false' || value === 'mixed', 'Value of \"checked\\\" attribute must be a boolean or \"mixed\"', errorPos);\n      node.checked = value === 'true' ? true : value === 'false' ? false : 'mixed';\n      return;\n    }\n    if (key === 'disabled') {\n      this._assert(value === 'true' || value === 'false', 'Value of \"disabled\" attribute must be a boolean', errorPos);\n      node.disabled = value === 'true';\n      return;\n    }\n    if (key === 'expanded') {\n      this._assert(value === 'true' || value === 'false', 'Value of \"expanded\" attribute must be a boolean', errorPos);\n      node.expanded = value === 'true';\n      return;\n    }\n    if (key === 'active') {\n      this._assert(value === 'true' || value === 'false', 'Value of \"active\" attribute must be a boolean', errorPos);\n      node.active = value === 'true';\n      return;\n    }\n    if (key === 'level') {\n      this._assert(!isNaN(Number(value)), 'Value of \"level\" attribute must be a number', errorPos);\n      node.level = Number(value);\n      return;\n    }\n    if (key === 'pressed') {\n      this._assert(value === 'true' || value === 'false' || value === 'mixed', 'Value of \"pressed\" attribute must be a boolean or \"mixed\"', errorPos);\n      node.pressed = value === 'true' ? true : value === 'false' ? false : 'mixed';\n      return;\n    }\n    if (key === 'selected') {\n      this._assert(value === 'true' || value === 'false', 'Value of \"selected\" attribute must be a boolean', errorPos);\n      node.selected = value === 'true';\n      return;\n    }\n    this._assert(false, `Unsupported attribute [${key}]`, errorPos);\n  }\n\n  private _assert(value: any, message: string, valuePos: number): asserts value {\n    if (!value)\n      this._throwError(message || 'Assertion error', valuePos);\n  }\n}\n\nexport class ParserError extends Error {\n  readonly pos: number;\n\n  constructor(message: string, pos: number) {\n    super(message);\n    this.pos = pos;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
