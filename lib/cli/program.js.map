{
  "version": 3,
  "sources": ["../../src/cli/program.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-console */\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport * as playwright from '../..';\nimport { launchBrowserServer, printApiJson, runDriver, runServer } from './driver';\nimport { registry, writeDockerVersion } from '../server';\nimport { gracefullyProcessExitDoNotHang, isLikelyNpxGlobal, ManualPromise } from '../utils';\nimport { runTraceInBrowser, runTraceViewerApp } from '../server/trace/viewer/traceViewer';\nimport { assert, getPackageManagerExecCommand } from '../utils';\nimport { wrapInASCIIBox } from '../server/utils/ascii';\nimport { dotenv, program } from '../utilsBundle';\n\nimport type { Browser } from '../client/browser';\nimport type { BrowserContext } from '../client/browserContext';\nimport type { BrowserType } from '../client/browserType';\nimport type { Page } from '../client/page';\nimport type { BrowserContextOptions, LaunchOptions } from '../client/types';\nimport type { Executable, BrowserInfo } from '../server';\nimport type { TraceViewerServerOptions } from '../server/trace/viewer/traceViewer';\nimport type { Command } from '../utilsBundle';\n\nexport { program } from '../utilsBundle';\n\nconst packageJSON = require('../../package.json');\n\nprogram\n    .version('Version ' + (process.env.PW_CLI_DISPLAY_VERSION || packageJSON.version))\n    .name(buildBasePlaywrightCLICommand(process.env.PW_LANG_NAME));\n\nprogram\n    .command('mark-docker-image [dockerImageNameTemplate]', { hidden: true })\n    .description('mark docker image')\n    .allowUnknownOption(true)\n    .action(function(dockerImageNameTemplate) {\n      assert(dockerImageNameTemplate, 'dockerImageNameTemplate is required');\n      writeDockerVersion(dockerImageNameTemplate).catch(logErrorAndExit);\n    });\n\ncommandWithOpenOptions('open [url]', 'open page in browser specified via -b, --browser', [])\n    .action(function(url, options) {\n      open(options, url).catch(logErrorAndExit);\n    })\n    .addHelpText('afterAll', `\nExamples:\n\n  $ open\n  $ open -b webkit https://example.com`);\n\ncommandWithOpenOptions('codegen [url]', 'open page and generate code for user actions',\n    [\n      ['-o, --output <file name>', 'saves the generated script to a file'],\n      ['--target <language>', `language to generate, one of javascript, playwright-test, python, python-async, python-pytest, csharp, csharp-mstest, csharp-nunit, java, java-junit`, codegenId()],\n      ['--test-id-attribute <attributeName>', 'use the specified attribute to generate data test ID selectors'],\n    ]).action(async function(url, options) {\n  await codegen(options, url);\n}).addHelpText('afterAll', `\nExamples:\n\n  $ codegen\n  $ codegen --target=python\n  $ codegen -b webkit https://example.com`);\n\nfunction suggestedBrowsersToInstall() {\n  return registry.executables().filter(e => e.installType !== 'none' && e.type !== 'tool').map(e => e.name).join(', ');\n}\n\nfunction defaultBrowsersToInstall(options: { noShell?: boolean, onlyShell?: boolean }): Executable[] {\n  let executables = registry.defaultExecutables();\n  if (options.noShell)\n    executables = executables.filter(e => e.name !== 'chromium-headless-shell');\n  if (options.onlyShell)\n    executables = executables.filter(e => e.name !== 'chromium');\n  return executables;\n}\n\nfunction checkBrowsersToInstall(args: string[], options: { noShell?: boolean, onlyShell?: boolean }): Executable[] {\n  if (options.noShell && options.onlyShell)\n    throw new Error(`Only one of --no-shell and --only-shell can be specified`);\n\n  const faultyArguments: string[] = [];\n  const executables: Executable[] = [];\n  const handleArgument = (arg: string) => {\n    const executable = registry.findExecutable(arg);\n    if (!executable || executable.installType === 'none')\n      faultyArguments.push(arg);\n    else\n      executables.push(executable);\n    if (executable?.browserName === 'chromium')\n      executables.push(registry.findExecutable('ffmpeg')!);\n  };\n\n  for (const arg of args) {\n    if (arg === 'chromium') {\n      if (!options.onlyShell)\n        handleArgument('chromium');\n      if (!options.noShell)\n        handleArgument('chromium-headless-shell');\n    } else {\n      handleArgument(arg);\n    }\n  }\n\n  if (process.platform === 'win32')\n    executables.push(registry.findExecutable('winldd')!);\n\n  if (faultyArguments.length)\n    throw new Error(`Invalid installation targets: ${faultyArguments.map(name => `'${name}'`).join(', ')}. Expecting one of: ${suggestedBrowsersToInstall()}`);\n  return executables;\n}\n\nfunction printInstalledBrowsers(browsers: BrowserInfo[]) {\n  const browserPaths = new Set<string>();\n  for (const browser of browsers)\n    browserPaths.add(browser.browserPath);\n  console.log(`  Browsers:`);\n  for (const browserPath of [...browserPaths].sort())\n    console.log(`    ${browserPath}`);\n  console.log(`  References:`);\n\n  const references = new Set<string>();\n  for (const browser of browsers)\n    references.add(browser.referenceDir);\n  for (const reference of [...references].sort())\n    console.log(`    ${reference}`);\n}\n\nfunction printGroupedByPlaywrightVersion(browsers: BrowserInfo[]) {\n  const dirToVersion = new Map<string, string>();\n  for (const browser of browsers) {\n    if (dirToVersion.has(browser.referenceDir))\n      continue;\n    const packageJSON = require(path.join(browser.referenceDir, 'package.json'));\n    const version = packageJSON.version;\n    dirToVersion.set(browser.referenceDir, version);\n  }\n\n  const groupedByPlaywrightMinorVersion = new Map<string, BrowserInfo[]>();\n  for (const browser of browsers) {\n    const version = dirToVersion.get(browser.referenceDir)!;\n    let entries = groupedByPlaywrightMinorVersion.get(version);\n    if (!entries) {\n      entries = [];\n      groupedByPlaywrightMinorVersion.set(version, entries);\n    }\n    entries.push(browser);\n  }\n\n  const sortedVersions = [...groupedByPlaywrightMinorVersion.keys()].sort((a, b) => {\n    const aComponents = a.split('.');\n    const bComponents = b.split('.');\n    const aMajor = parseInt(aComponents[0], 10);\n    const bMajor = parseInt(bComponents[0], 10);\n    if (aMajor !== bMajor)\n      return aMajor - bMajor;\n    const aMinor = parseInt(aComponents[1], 10);\n    const bMinor = parseInt(bComponents[1], 10);\n    if (aMinor !== bMinor)\n      return aMinor - bMinor;\n    return aComponents.slice(2).join('.').localeCompare(bComponents.slice(2).join('.'));\n  });\n\n  for (const version of sortedVersions) {\n    console.log(`\\nPlaywright version: ${version}`);\n    printInstalledBrowsers(groupedByPlaywrightMinorVersion.get(version)!);\n  }\n}\n\nprogram\n    .command('install [browser...]')\n    .description('ensure browsers necessary for this version of Playwright are installed')\n    .option('--with-deps', 'install system dependencies for browsers')\n    .option('--dry-run', 'do not execute installation, only print information')\n    .option('--list', 'prints list of browsers from all playwright installations')\n    .option('--force', 'force reinstall of stable browser channels')\n    .option('--only-shell', 'only install headless shell when installing chromium')\n    .option('--no-shell', 'do not install chromium headless shell')\n    .action(async function(args: string[], options: { withDeps?: boolean, force?: boolean, dryRun?: boolean, list?: boolean, shell?: boolean, noShell?: boolean, onlyShell?: boolean }) {\n      // For '--no-shell' option, commander sets `shell: false` instead.\n      if (options.shell === false)\n        options.noShell = true;\n      if (isLikelyNpxGlobal()) {\n        console.error(wrapInASCIIBox([\n          `WARNING: It looks like you are running 'npx playwright install' without first`,\n          `installing your project's dependencies.`,\n          ``,\n          `To avoid unexpected behavior, please install your dependencies first, and`,\n          `then run Playwright's install command:`,\n          ``,\n          `    npm install`,\n          `    npx playwright install`,\n          ``,\n          `If your project does not yet depend on Playwright, first install the`,\n          `applicable npm package (most commonly @playwright/test), and`,\n          `then run Playwright's install command to download the browsers:`,\n          ``,\n          `    npm install @playwright/test`,\n          `    npx playwright install`,\n          ``,\n        ].join('\\n'), 1));\n      }\n      try {\n        const hasNoArguments = !args.length;\n        const executables = hasNoArguments ? defaultBrowsersToInstall(options) : checkBrowsersToInstall(args, options);\n        if (options.withDeps)\n          await registry.installDeps(executables, !!options.dryRun);\n        if (options.dryRun && options.list)\n          throw new Error(`Only one of --dry-run and --list can be specified`);\n        if (options.dryRun) {\n          for (const executable of executables) {\n            const version = executable.browserVersion ? `version ` + executable.browserVersion : '';\n            console.log(`browser: ${executable.name}${version ? ' ' + version : ''}`);\n            console.log(`  Install location:    ${executable.directory ?? '<system>'}`);\n            if (executable.downloadURLs?.length) {\n              const [url, ...fallbacks] = executable.downloadURLs;\n              console.log(`  Download url:        ${url}`);\n              for (let i = 0; i < fallbacks.length; ++i)\n                console.log(`  Download fallback ${i + 1}: ${fallbacks[i]}`);\n            }\n            console.log(``);\n          }\n        } else if (options.list) {\n          const browsers = await registry.listInstalledBrowsers();\n          printGroupedByPlaywrightVersion(browsers);\n        } else {\n          const forceReinstall = hasNoArguments ? false : !!options.force;\n          await registry.install(executables, forceReinstall);\n          await registry.validateHostRequirementsForExecutablesIfNeeded(executables, process.env.PW_LANG_NAME || 'javascript').catch((e: Error) => {\n            e.name = 'Playwright Host validation warning';\n            console.error(e);\n          });\n        }\n      } catch (e) {\n        console.log(`Failed to install browsers\\n${e}`);\n        gracefullyProcessExitDoNotHang(1);\n      }\n    }).addHelpText('afterAll', `\n\nExamples:\n  - $ install\n    Install default browsers.\n\n  - $ install chrome firefox\n    Install custom browsers, supports ${suggestedBrowsersToInstall()}.`);\n\nprogram\n    .command('uninstall')\n    .description('Removes browsers used by this installation of Playwright from the system (chromium, firefox, webkit, ffmpeg). This does not include branded channels.')\n    .option('--all', 'Removes all browsers used by any Playwright installation from the system.')\n    .action(async (options: { all?: boolean }) => {\n      delete process.env.PLAYWRIGHT_SKIP_BROWSER_GC;\n      await registry.uninstall(!!options.all).then(({ numberOfBrowsersLeft }) => {\n        if (!options.all && numberOfBrowsersLeft > 0) {\n          console.log('Successfully uninstalled Playwright browsers for the current Playwright installation.');\n          console.log(`There are still ${numberOfBrowsersLeft} browsers left, used by other Playwright installations.\\nTo uninstall Playwright browsers for all installations, re-run with --all flag.`);\n        }\n      }).catch(logErrorAndExit);\n    });\n\nprogram\n    .command('install-deps [browser...]')\n    .description('install dependencies necessary to run browsers (will ask for sudo permissions)')\n    .option('--dry-run', 'Do not execute installation commands, only print them')\n    .action(async function(args: string[], options: { dryRun?: boolean }) {\n      try {\n        if (!args.length)\n          await registry.installDeps(defaultBrowsersToInstall({}), !!options.dryRun);\n        else\n          await registry.installDeps(checkBrowsersToInstall(args, {}), !!options.dryRun);\n      } catch (e) {\n        console.log(`Failed to install browser dependencies\\n${e}`);\n        gracefullyProcessExitDoNotHang(1);\n      }\n    }).addHelpText('afterAll', `\nExamples:\n  - $ install-deps\n    Install dependencies for default browsers.\n\n  - $ install-deps chrome firefox\n    Install dependencies for specific browsers, supports ${suggestedBrowsersToInstall()}.`);\n\nconst browsers = [\n  { alias: 'cr', name: 'Chromium', type: 'chromium' },\n  { alias: 'ff', name: 'Firefox', type: 'firefox' },\n  { alias: 'wk', name: 'WebKit', type: 'webkit' },\n];\n\nfor (const { alias, name, type } of browsers) {\n  commandWithOpenOptions(`${alias} [url]`, `open page in ${name}`, [])\n      .action(function(url, options) {\n        open({ ...options, browser: type }, url).catch(logErrorAndExit);\n      }).addHelpText('afterAll', `\nExamples:\n\n  $ ${alias} https://example.com`);\n}\n\ncommandWithOpenOptions('screenshot <url> <filename>', 'capture a page screenshot',\n    [\n      ['--wait-for-selector <selector>', 'wait for selector before taking a screenshot'],\n      ['--wait-for-timeout <timeout>', 'wait for timeout in milliseconds before taking a screenshot'],\n      ['--full-page', 'whether to take a full page screenshot (entire scrollable area)'],\n    ]).action(function(url, filename, command) {\n  screenshot(command, command, url, filename).catch(logErrorAndExit);\n}).addHelpText('afterAll', `\nExamples:\n\n  $ screenshot -b webkit https://example.com example.png`);\n\ncommandWithOpenOptions('pdf <url> <filename>', 'save page as pdf',\n    [\n      ['--paper-format <format>', 'paper format: Letter, Legal, Tabloid, Ledger, A0, A1, A2, A3, A4, A5, A6'],\n      ['--wait-for-selector <selector>', 'wait for given selector before saving as pdf'],\n      ['--wait-for-timeout <timeout>', 'wait for given timeout in milliseconds before saving as pdf'],\n    ]).action(function(url, filename, options) {\n  pdf(options, options, url, filename).catch(logErrorAndExit);\n}).addHelpText('afterAll', `\nExamples:\n\n  $ pdf https://example.com example.pdf`);\n\nprogram\n    .command('run-driver', { hidden: true })\n    .action(function(options) {\n      runDriver();\n    });\n\nprogram\n    .command('run-server')\n    .option('--port <port>', 'Server port')\n    .option('--host <host>', 'Server host')\n    .option('--path <path>', 'Endpoint Path', '/')\n    .option('--max-clients <maxClients>', 'Maximum clients')\n    .option('--mode <mode>', 'Server mode, either \"default\" or \"extension\"')\n    .action(function(options) {\n      runServer({\n        port: options.port ? +options.port : undefined,\n        host: options.host,\n        path: options.path,\n        maxConnections: options.maxClients ? +options.maxClients : Infinity,\n        extension: options.mode === 'extension' || !!process.env.PW_EXTENSION_MODE,\n      }).catch(logErrorAndExit);\n    });\n\nprogram\n    .command('print-api-json', { hidden: true })\n    .action(function(options) {\n      printApiJson();\n    });\n\nprogram\n    .command('launch-server', { hidden: true })\n    .requiredOption('--browser <browserName>', 'Browser name, one of \"chromium\", \"firefox\" or \"webkit\"')\n    .option('--config <path-to-config-file>', 'JSON file with launchServer options')\n    .action(function(options) {\n      launchBrowserServer(options.browser, options.config);\n    });\n\nprogram\n    .command('show-trace [trace...]')\n    .option('-b, --browser <browserType>', 'browser to use, one of cr, chromium, ff, firefox, wk, webkit', 'chromium')\n    .option('-h, --host <host>', 'Host to serve trace on; specifying this option opens trace in a browser tab')\n    .option('-p, --port <port>', 'Port to serve trace on, 0 for any free port; specifying this option opens trace in a browser tab')\n    .option('--stdin', 'Accept trace URLs over stdin to update the viewer')\n    .description('show trace viewer')\n    .action(function(traces, options) {\n      if (options.browser === 'cr')\n        options.browser = 'chromium';\n      if (options.browser === 'ff')\n        options.browser = 'firefox';\n      if (options.browser === 'wk')\n        options.browser = 'webkit';\n\n      const openOptions: TraceViewerServerOptions = {\n        host: options.host,\n        port: +options.port,\n        isServer: !!options.stdin,\n      };\n\n      if (options.port !== undefined || options.host !== undefined)\n        runTraceInBrowser(traces, openOptions).catch(logErrorAndExit);\n      else\n        runTraceViewerApp(traces, options.browser, openOptions, true).catch(logErrorAndExit);\n    }).addHelpText('afterAll', `\nExamples:\n\n  $ show-trace https://example.com/trace.zip`);\n\ntype Options = {\n  browser: string;\n  channel?: string;\n  colorScheme?: string;\n  device?: string;\n  geolocation?: string;\n  ignoreHttpsErrors?: boolean;\n  lang?: string;\n  loadStorage?: string;\n  proxyServer?: string;\n  proxyBypass?: string;\n  blockServiceWorkers?: boolean;\n  saveHar?: string;\n  saveHarGlob?: string;\n  saveStorage?: string;\n  timeout: string;\n  timezone?: string;\n  viewportSize?: string;\n  userAgent?: string;\n  userDataDir?: string;\n};\n\ntype CaptureOptions = {\n  waitForSelector?: string;\n  waitForTimeout?: string;\n  fullPage: boolean;\n  paperFormat?: string;\n};\n\nasync function launchContext(options: Options, extraOptions: LaunchOptions): Promise<{ browser: Browser, browserName: string, launchOptions: LaunchOptions, contextOptions: BrowserContextOptions, context: BrowserContext, closeBrowser: () => Promise<void> }> {\n  validateOptions(options);\n  const browserType = lookupBrowserType(options);\n  const launchOptions: LaunchOptions = extraOptions;\n  if (options.channel)\n    launchOptions.channel = options.channel as any;\n  launchOptions.handleSIGINT = false;\n\n  const contextOptions: BrowserContextOptions =\n    // Copy the device descriptor since we have to compare and modify the options.\n    options.device ? { ...playwright.devices[options.device] } : {};\n\n  // In headful mode, use host device scale factor for things to look nice.\n  // In headless, keep things the way it works in Playwright by default.\n  // Assume high-dpi on MacOS. TODO: this is not perfect.\n  if (!extraOptions.headless)\n    contextOptions.deviceScaleFactor = os.platform() === 'darwin' ? 2 : 1;\n\n  // Work around the WebKit GTK scrolling issue.\n  if (browserType.name() === 'webkit' && process.platform === 'linux') {\n    delete contextOptions.hasTouch;\n    delete contextOptions.isMobile;\n  }\n\n  if (contextOptions.isMobile && browserType.name() === 'firefox')\n    contextOptions.isMobile = undefined;\n\n  if (options.blockServiceWorkers)\n    contextOptions.serviceWorkers = 'block';\n\n  // Proxy\n\n  if (options.proxyServer) {\n    launchOptions.proxy = {\n      server: options.proxyServer\n    };\n    if (options.proxyBypass)\n      launchOptions.proxy.bypass = options.proxyBypass;\n  }\n\n  // Viewport size\n  if (options.viewportSize) {\n    try {\n      const [width, height] = options.viewportSize.split(',').map(n => +n);\n      if (isNaN(width) || isNaN(height))\n        throw new Error('bad values');\n      contextOptions.viewport = { width, height };\n    } catch (e) {\n      throw new Error('Invalid viewport size format: use \"width,height\", for example --viewport-size=\"800,600\"');\n    }\n  }\n\n  // Geolocation\n\n  if (options.geolocation) {\n    try {\n      const [latitude, longitude] = options.geolocation.split(',').map(n => parseFloat(n.trim()));\n      contextOptions.geolocation = {\n        latitude,\n        longitude\n      };\n    } catch (e) {\n      throw new Error('Invalid geolocation format, should be \"lat,long\". For example --geolocation=\"37.819722,-122.478611\"');\n    }\n    contextOptions.permissions = ['geolocation'];\n  }\n\n  // User agent\n\n  if (options.userAgent)\n    contextOptions.userAgent = options.userAgent;\n\n  // Lang\n\n  if (options.lang)\n    contextOptions.locale = options.lang;\n\n  // Color scheme\n\n  if (options.colorScheme)\n    contextOptions.colorScheme = options.colorScheme as 'dark' | 'light';\n\n  // Timezone\n\n  if (options.timezone)\n    contextOptions.timezoneId = options.timezone;\n\n  // Storage\n\n  if (options.loadStorage)\n    contextOptions.storageState = options.loadStorage;\n\n  if (options.ignoreHttpsErrors)\n    contextOptions.ignoreHTTPSErrors = true;\n\n  // HAR\n\n  if (options.saveHar) {\n    contextOptions.recordHar = { path: path.resolve(process.cwd(), options.saveHar), mode: 'minimal' };\n    if (options.saveHarGlob)\n      contextOptions.recordHar.urlFilter = options.saveHarGlob;\n    contextOptions.serviceWorkers = 'block';\n  }\n\n  let browser: Browser;\n  let context: BrowserContext;\n\n  if (options.userDataDir) {\n    context = await browserType.launchPersistentContext(options.userDataDir, { ...launchOptions, ...contextOptions });\n    browser = context.browser()!;\n  } else {\n    browser = await browserType.launch(launchOptions);\n    context = await browser.newContext(contextOptions);\n  }\n\n  let closingBrowser = false;\n  async function closeBrowser() {\n    // We can come here multiple times. For example, saving storage creates\n    // a temporary page and we call closeBrowser again when that page closes.\n    if (closingBrowser)\n      return;\n    closingBrowser = true;\n    if (options.saveStorage)\n      await context.storageState({ path: options.saveStorage }).catch(e => null);\n    if (options.saveHar)\n      await context.close();\n    await browser.close();\n  }\n\n  context.on('page', page => {\n    page.on('dialog', () => {});  // Prevent dialogs from being automatically dismissed.\n    page.on('close', () => {\n      const hasPage = browser.contexts().some(context => context.pages().length > 0);\n      if (hasPage)\n        return;\n      // Avoid the error when the last page is closed because the browser has been closed.\n      closeBrowser().catch(() => {});\n    });\n  });\n  process.on('SIGINT', async () => {\n    await closeBrowser();\n    gracefullyProcessExitDoNotHang(130);\n  });\n\n  const timeout = options.timeout ? parseInt(options.timeout, 10) : 0;\n  context.setDefaultTimeout(timeout);\n  context.setDefaultNavigationTimeout(timeout);\n\n  // Omit options that we add automatically for presentation purpose.\n  delete launchOptions.headless;\n  delete launchOptions.executablePath;\n  delete launchOptions.handleSIGINT;\n  delete contextOptions.deviceScaleFactor;\n  return { browser, browserName: browserType.name(), context, contextOptions, launchOptions, closeBrowser };\n}\n\nasync function openPage(context: BrowserContext, url: string | undefined): Promise<Page> {\n  let page = context.pages()[0];\n  if (!page)\n    page = await context.newPage();\n  if (url) {\n    if (fs.existsSync(url))\n      url = 'file://' + path.resolve(url);\n    else if (!url.startsWith('http') && !url.startsWith('file://') && !url.startsWith('about:') && !url.startsWith('data:'))\n      url = 'http://' + url;\n    await page.goto(url);\n  }\n  return page;\n}\n\nasync function open(options: Options, url: string | undefined) {\n  const { context } = await launchContext(options, { headless: !!process.env.PWTEST_CLI_HEADLESS, executablePath: process.env.PWTEST_CLI_EXECUTABLE_PATH });\n  await openPage(context, url);\n}\n\nasync function codegen(options: Options & { target: string, output?: string, testIdAttribute?: string }, url: string | undefined) {\n  const { target: language, output: outputFile, testIdAttribute: testIdAttributeName } = options;\n  const tracesDir = path.join(os.tmpdir(), `playwright-recorder-trace-${Date.now()}`);\n  const { context, browser, launchOptions, contextOptions, closeBrowser } = await launchContext(options, {\n    headless: !!process.env.PWTEST_CLI_HEADLESS,\n    executablePath: process.env.PWTEST_CLI_EXECUTABLE_PATH,\n    tracesDir,\n  });\n  const donePromise = new ManualPromise<void>();\n  maybeSetupTestHooks(browser, closeBrowser, donePromise);\n  dotenv.config({ path: 'playwright.env' });\n  await context._enableRecorder({\n    language,\n    launchOptions,\n    contextOptions,\n    device: options.device,\n    saveStorage: options.saveStorage,\n    mode: 'recording',\n    testIdAttributeName,\n    outputFile: outputFile ? path.resolve(outputFile) : undefined,\n    handleSIGINT: false,\n  });\n  await openPage(context, url);\n  donePromise.resolve();\n}\n\nasync function maybeSetupTestHooks(browser: Browser, closeBrowser: () => Promise<void>, donePromise: Promise<void>) {\n  if (!process.env.PWTEST_CLI_IS_UNDER_TEST)\n    return;\n\n  // Make sure we exit abnormally when browser crashes.\n  const logs: string[] = [];\n  require('playwright-core/lib/utilsBundle').debug.log = (...args: any[]) => {\n    const line = require('util').format(...args) + '\\n';\n    logs.push(line);\n    // eslint-disable-next-line no-restricted-properties\n    process.stderr.write(line);\n  };\n  browser.on('disconnected', () => {\n    const hasCrashLine = logs.some(line => line.includes('process did exit:') && !line.includes('process did exit: exitCode=0, signal=null'));\n    if (hasCrashLine) {\n      // eslint-disable-next-line no-restricted-properties\n      process.stderr.write('Detected browser crash.\\n');\n      gracefullyProcessExitDoNotHang(1);\n    }\n  });\n\n  const close = async () => {\n    await donePromise;\n    await closeBrowser();\n  };\n\n  if (process.env.PWTEST_CLI_EXIT_AFTER_TIMEOUT) {\n    setTimeout(close, +process.env.PWTEST_CLI_EXIT_AFTER_TIMEOUT);\n    return;\n  }\n\n  // Note: we cannot use SIGINT, as it is not available on Windows.\n  let stdin = '';\n  process.stdin.on('data', data => {\n    stdin += data.toString();\n    if (stdin.startsWith('exit')) {\n      process.stdin.destroy();\n      close();\n    }\n  });\n}\n\nasync function waitForPage(page: Page, captureOptions: CaptureOptions) {\n  if (captureOptions.waitForSelector) {\n    console.log(`Waiting for selector ${captureOptions.waitForSelector}...`);\n    await page.waitForSelector(captureOptions.waitForSelector);\n  }\n  if (captureOptions.waitForTimeout) {\n    console.log(`Waiting for timeout ${captureOptions.waitForTimeout}...`);\n    await page.waitForTimeout(parseInt(captureOptions.waitForTimeout, 10));\n  }\n}\n\nasync function screenshot(options: Options, captureOptions: CaptureOptions, url: string, path: string) {\n  const { context } = await launchContext(options, { headless: true });\n  console.log('Navigating to ' + url);\n  const page = await openPage(context, url);\n  await waitForPage(page, captureOptions);\n  console.log('Capturing screenshot into ' + path);\n  await page.screenshot({ path, fullPage: !!captureOptions.fullPage });\n  // launchContext takes care of closing the browser.\n  await page.close();\n}\n\nasync function pdf(options: Options, captureOptions: CaptureOptions, url: string, path: string) {\n  if (options.browser !== 'chromium')\n    throw new Error('PDF creation is only working with Chromium');\n  const { context } = await launchContext({ ...options, browser: 'chromium' }, { headless: true });\n  console.log('Navigating to ' + url);\n  const page = await openPage(context, url);\n  await waitForPage(page, captureOptions);\n  console.log('Saving as pdf into ' + path);\n  await page.pdf!({ path, format: captureOptions.paperFormat });\n  // launchContext takes care of closing the browser.\n  await page.close();\n}\n\nfunction lookupBrowserType(options: Options): BrowserType {\n  let name = options.browser;\n  if (options.device) {\n    const device = playwright.devices[options.device];\n    name = device.defaultBrowserType;\n  }\n  let browserType: any;\n  switch (name) {\n    case 'chromium': browserType = playwright.chromium; break;\n    case 'webkit': browserType = playwright.webkit; break;\n    case 'firefox': browserType = playwright.firefox; break;\n    case 'cr': browserType = playwright.chromium; break;\n    case 'wk': browserType = playwright.webkit; break;\n    case 'ff': browserType = playwright.firefox; break;\n  }\n  if (browserType)\n    return browserType;\n  program.help();\n}\n\nfunction validateOptions(options: Options) {\n  if (options.device && !(options.device in playwright.devices)) {\n    const lines = [`Device descriptor not found: '${options.device}', available devices are:`];\n    for (const name in playwright.devices)\n      lines.push(`  \"${name}\"`);\n    throw new Error(lines.join('\\n'));\n  }\n  if (options.colorScheme && !['light', 'dark'].includes(options.colorScheme))\n    throw new Error('Invalid color scheme, should be one of \"light\", \"dark\"');\n}\n\nfunction logErrorAndExit(e: Error) {\n  if (process.env.PWDEBUGIMPL)\n    console.error(e);\n  else\n    console.error(e.name + ': ' + e.message);\n  gracefullyProcessExitDoNotHang(1);\n}\n\nfunction codegenId(): string {\n  return process.env.PW_LANG_NAME || 'playwright-test';\n}\n\nfunction commandWithOpenOptions(command: string, description: string, options: any[][]): Command {\n  let result = program.command(command).description(description);\n  for (const option of options)\n    result = result.option(option[0], ...option.slice(1));\n  return result\n      .option('-b, --browser <browserType>', 'browser to use, one of cr, chromium, ff, firefox, wk, webkit', 'chromium')\n      .option('--block-service-workers', 'block service workers')\n      .option('--channel <channel>', 'Chromium distribution channel, \"chrome\", \"chrome-beta\", \"msedge-dev\", etc')\n      .option('--color-scheme <scheme>', 'emulate preferred color scheme, \"light\" or \"dark\"')\n      .option('--device <deviceName>', 'emulate device, for example  \"iPhone 11\"')\n      .option('--geolocation <coordinates>', 'specify geolocation coordinates, for example \"37.819722,-122.478611\"')\n      .option('--ignore-https-errors', 'ignore https errors')\n      .option('--load-storage <filename>', 'load context storage state from the file, previously saved with --save-storage')\n      .option('--lang <language>', 'specify language / locale, for example \"en-GB\"')\n      .option('--proxy-server <proxy>', 'specify proxy server, for example \"http://myproxy:3128\" or \"socks5://myproxy:8080\"')\n      .option('--proxy-bypass <bypass>', 'comma-separated domains to bypass proxy, for example \".com,chromium.org,.domain.com\"')\n      .option('--save-har <filename>', 'save HAR file with all network activity at the end')\n      .option('--save-har-glob <glob pattern>', 'filter entries in the HAR by matching url against this glob pattern')\n      .option('--save-storage <filename>', 'save context storage state at the end, for later use with --load-storage')\n      .option('--timezone <time zone>', 'time zone to emulate, for example \"Europe/Rome\"')\n      .option('--timeout <timeout>', 'timeout for Playwright actions in milliseconds, no timeout by default')\n      .option('--user-agent <ua string>', 'specify user agent string')\n      .option('--user-data-dir <directory>', 'use the specified user data directory instead of a new context')\n      .option('--viewport-size <size>', 'specify browser viewport size in pixels, for example \"1280, 720\"');\n}\n\nfunction buildBasePlaywrightCLICommand(cliTargetLang: string | undefined): string {\n  switch (cliTargetLang) {\n    case 'python':\n      return `playwright`;\n    case 'java':\n      return `mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"...options..\"`;\n    case 'csharp':\n      return `pwsh bin/Debug/netX/playwright.ps1`;\n    default: {\n      const packageManagerCommand = getPackageManagerExecCommand();\n      return `${packageManagerCommand} playwright`;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_utils", "import_utilsBundle", "browsers", "packageJSON", "path", "os", "context", "fs"]
}
