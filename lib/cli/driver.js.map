{
  "version": 3,
  "sources": ["../../src/cli/driver.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-console */\n\nimport fs from 'fs';\n\nimport * as playwright from '../..';\nimport { PipeTransport } from '../server/utils/pipeTransport';\nimport { PlaywrightServer } from '../remote/playwrightServer';\nimport { DispatcherConnection, PlaywrightDispatcher, RootDispatcher, createPlaywright } from '../server';\nimport { gracefullyProcessExitDoNotHang } from '../server/utils/processLauncher';\n\nimport type { BrowserType } from '../client/browserType';\nimport type { LaunchServerOptions } from '../client/types';\n\nexport function printApiJson() {\n  // Note: this file is generated by build-playwright-driver.sh\n  console.log(JSON.stringify(require('../../api.json')));\n}\n\nexport function runDriver() {\n  const dispatcherConnection = new DispatcherConnection();\n  new RootDispatcher(dispatcherConnection, async (rootScope, { sdkLanguage }) => {\n    const playwright = createPlaywright({ sdkLanguage });\n    return new PlaywrightDispatcher(rootScope, playwright);\n  });\n  // eslint-disable-next-line no-restricted-properties\n  const transport = new PipeTransport(process.stdout, process.stdin);\n  transport.onmessage = (message: string) => dispatcherConnection.dispatch(JSON.parse(message));\n  // Certain Language Binding JSON parsers (e.g. .NET) do not like strings with lone surrogates.\n  const isJavaScriptLanguageBinding = !process.env.PW_LANG_NAME || process.env.PW_LANG_NAME === 'javascript';\n  const replacer = !isJavaScriptLanguageBinding && (String.prototype as any).toWellFormed ? (key: string, value: any): any => {\n    if (typeof value === 'string')\n      return value.toWellFormed();\n    return value;\n  } : undefined;\n  dispatcherConnection.onmessage = message => transport.send(JSON.stringify(message, replacer));\n  transport.onclose = () => {\n    // Drop any messages during shutdown on the floor.\n    dispatcherConnection.onmessage = () => {};\n    gracefullyProcessExitDoNotHang(0);\n  };\n  // Ignore the SIGINT signal in the driver process so the parent can gracefully close the connection.\n  // We still will destruct everything (close browsers and exit) when the transport pipe closes.\n  process.on('SIGINT', () => {\n    // Keep the process running.\n  });\n}\n\nexport type RunServerOptions = {\n  port?: number,\n  host?: string,\n  path?: string,\n  extension?: boolean,\n  maxConnections?: number,\n  browserProxyMode?: 'client' | 'tether',\n  ownedByTetherClient?: boolean,\n};\n\nexport async function runServer(options: RunServerOptions) {\n  const {\n    port,\n    host,\n    path = '/',\n    maxConnections = Infinity,\n    extension,\n  } = options;\n  const server = new PlaywrightServer({ mode: extension ? 'extension' : 'default', path, maxConnections });\n  const wsEndpoint = await server.listen(port, host);\n  process.on('exit', () => server.close().catch(console.error));\n  console.log('Listening on ' + wsEndpoint);\n  process.stdin.on('close', () => gracefullyProcessExitDoNotHang(0));\n}\n\nexport async function launchBrowserServer(browserName: string, configFile?: string) {\n  let options: LaunchServerOptions = {};\n  if (configFile)\n    options = JSON.parse(fs.readFileSync(configFile).toString());\n  const browserType = (playwright as any)[browserName] as BrowserType;\n  const server = await browserType.launchServer(options);\n  console.log(server.wsEndpoint());\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA,gBAAe;AAEf,iBAA4B;AAC5B,2BAA8B;AAC9B,8BAAiC;AACjC,oBAA6F;AAC7F,6BAA+C;AAKxC,SAAS,eAAe;AAE7B,UAAQ,IAAI,KAAK,UAAU,QAAQ,gBAAgB,CAAC,CAAC;AACvD;AAEO,SAAS,YAAY;AAC1B,QAAM,uBAAuB,IAAI,mCAAqB;AACtD,MAAI,6BAAe,sBAAsB,OAAO,WAAW,EAAE,YAAY,MAAM;AAC7E,UAAMA,kBAAa,gCAAiB,EAAE,YAAY,CAAC;AACnD,WAAO,IAAI,mCAAqB,WAAWA,WAAU;AAAA,EACvD,CAAC;AAED,QAAM,YAAY,IAAI,mCAAc,QAAQ,QAAQ,QAAQ,KAAK;AACjE,YAAU,YAAY,CAAC,YAAoB,qBAAqB,SAAS,KAAK,MAAM,OAAO,CAAC;AAE5F,QAAM,8BAA8B,CAAC,QAAQ,IAAI,gBAAgB,QAAQ,IAAI,iBAAiB;AAC9F,QAAM,WAAW,CAAC,+BAAgC,OAAO,UAAkB,eAAe,CAAC,KAAa,UAAoB;AAC1H,QAAI,OAAO,UAAU;AACnB,aAAO,MAAM,aAAa;AAC5B,WAAO;AAAA,EACT,IAAI;AACJ,uBAAqB,YAAY,aAAW,UAAU,KAAK,KAAK,UAAU,SAAS,QAAQ,CAAC;AAC5F,YAAU,UAAU,MAAM;AAExB,yBAAqB,YAAY,MAAM;AAAA,IAAC;AACxC,+DAA+B,CAAC;AAAA,EAClC;AAGA,UAAQ,GAAG,UAAU,MAAM;AAAA,EAE3B,CAAC;AACH;AAYA,eAAsB,UAAU,SAA2B;AACzD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP,iBAAiB;AAAA,IACjB;AAAA,EACF,IAAI;AACJ,QAAM,SAAS,IAAI,yCAAiB,EAAE,MAAM,YAAY,cAAc,WAAW,MAAM,eAAe,CAAC;AACvG,QAAM,aAAa,MAAM,OAAO,OAAO,MAAM,IAAI;AACjD,UAAQ,GAAG,QAAQ,MAAM,OAAO,MAAM,EAAE,MAAM,QAAQ,KAAK,CAAC;AAC5D,UAAQ,IAAI,kBAAkB,UAAU;AACxC,UAAQ,MAAM,GAAG,SAAS,UAAM,uDAA+B,CAAC,CAAC;AACnE;AAEA,eAAsB,oBAAoB,aAAqB,YAAqB;AAClF,MAAI,UAA+B,CAAC;AACpC,MAAI;AACF,cAAU,KAAK,MAAM,UAAAC,QAAG,aAAa,UAAU,EAAE,SAAS,CAAC;AAC7D,QAAM,cAAe,WAAmB,WAAW;AACnD,QAAM,SAAS,MAAM,YAAY,aAAa,OAAO;AACrD,UAAQ,IAAI,OAAO,WAAW,CAAC;AACjC;",
  "names": ["playwright", "fs"]
}
