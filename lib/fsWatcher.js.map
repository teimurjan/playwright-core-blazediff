{
  "version": 3,
  "sources": ["../src/fsWatcher.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { chokidar } from './utilsBundle';\n\nimport type { FSWatcher } from 'chokidar';\n\nexport type FSEvent = { event: 'add' | 'addDir' | 'change' | 'unlink' | 'unlinkDir', file: string };\n\nexport class Watcher {\n  private _onChange: (events: FSEvent[]) => void;\n  private _watchedPaths: string[] = [];\n  private _ignoredFolders: string[] = [];\n  private _collector: FSEvent[] = [];\n  private _fsWatcher: FSWatcher | undefined;\n  private _throttleTimer: NodeJS.Timeout | undefined;\n\n  constructor(onChange: (events: FSEvent[]) => void) {\n    this._onChange = onChange;\n  }\n\n  async update(watchedPaths: string[], ignoredFolders: string[], reportPending: boolean) {\n    if (JSON.stringify([this._watchedPaths, this._ignoredFolders]) === JSON.stringify([watchedPaths, ignoredFolders]))\n      return;\n\n    if (reportPending)\n      this._reportEventsIfAny();\n\n    this._watchedPaths = watchedPaths;\n    this._ignoredFolders = ignoredFolders;\n    void this._fsWatcher?.close();\n    this._fsWatcher = undefined;\n    this._collector.length = 0;\n    clearTimeout(this._throttleTimer);\n    this._throttleTimer = undefined;\n\n    if (!this._watchedPaths.length)\n      return;\n\n    const ignored = [...this._ignoredFolders, '**/node_modules/**'];\n    this._fsWatcher = chokidar.watch(watchedPaths, { ignoreInitial: true, ignored }).on('all', async (event, file) => {\n      if (this._throttleTimer)\n        clearTimeout(this._throttleTimer);\n      this._collector.push({ event, file });\n      this._throttleTimer = setTimeout(() => this._reportEventsIfAny(), 250);\n    });\n\n    await new Promise((resolve, reject) => this._fsWatcher!.once('ready', resolve).once('error', reject));\n  }\n\n  async close() {\n    await this._fsWatcher?.close();\n  }\n\n  private _reportEventsIfAny() {\n    if (this._collector.length)\n      this._onChange(this._collector.slice());\n    this._collector.length = 0;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,yBAAyB;AAMlB,MAAM,QAAQ;AAAA,EAQnB,YAAY,UAAuC;AANnD,SAAQ,gBAA0B,CAAC;AACnC,SAAQ,kBAA4B,CAAC;AACrC,SAAQ,aAAwB,CAAC;AAK/B,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,MAAM,OAAO,cAAwB,gBAA0B,eAAwB;AACrF,QAAI,KAAK,UAAU,CAAC,KAAK,eAAe,KAAK,eAAe,CAAC,MAAM,KAAK,UAAU,CAAC,cAAc,cAAc,CAAC;AAC9G;AAEF,QAAI;AACF,WAAK,mBAAmB;AAE1B,SAAK,gBAAgB;AACrB,SAAK,kBAAkB;AACvB,SAAK,KAAK,YAAY,MAAM;AAC5B,SAAK,aAAa;AAClB,SAAK,WAAW,SAAS;AACzB,iBAAa,KAAK,cAAc;AAChC,SAAK,iBAAiB;AAEtB,QAAI,CAAC,KAAK,cAAc;AACtB;AAEF,UAAM,UAAU,CAAC,GAAG,KAAK,iBAAiB,oBAAoB;AAC9D,SAAK,aAAa,4BAAS,MAAM,cAAc,EAAE,eAAe,MAAM,QAAQ,CAAC,EAAE,GAAG,OAAO,OAAO,OAAO,SAAS;AAChH,UAAI,KAAK;AACP,qBAAa,KAAK,cAAc;AAClC,WAAK,WAAW,KAAK,EAAE,OAAO,KAAK,CAAC;AACpC,WAAK,iBAAiB,WAAW,MAAM,KAAK,mBAAmB,GAAG,GAAG;AAAA,IACvE,CAAC;AAED,UAAM,IAAI,QAAQ,CAAC,SAAS,WAAW,KAAK,WAAY,KAAK,SAAS,OAAO,EAAE,KAAK,SAAS,MAAM,CAAC;AAAA,EACtG;AAAA,EAEA,MAAM,QAAQ;AACZ,UAAM,KAAK,YAAY,MAAM;AAAA,EAC/B;AAAA,EAEQ,qBAAqB;AAC3B,QAAI,KAAK,WAAW;AAClB,WAAK,UAAU,KAAK,WAAW,MAAM,CAAC;AACxC,SAAK,WAAW,SAAS;AAAA,EAC3B;AACF;",
  "names": []
}
