{
  "version": 3,
  "sources": ["../../src/reporters/internalReporter.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\n\nimport { monotonicTime } from 'playwright-core/lib/utils';\n\nimport { internalScreen, prepareErrorStack, relativeFilePath } from './base';\nimport { Multiplexer } from './multiplexer';\nimport { Suite } from '../common/test';\nimport { codeFrameColumns } from '../transform/babelBundle';\nimport { wrapReporterAsV2 } from './reporterV2';\n\nimport type { AnyReporter, ReporterV2 } from './reporterV2';\nimport type { FullConfig, FullResult, TestCase, TestError, TestResult, TestStep } from '../../types/testReporter';\n\n\nexport class InternalReporter implements ReporterV2 {\n  private _reporter: ReporterV2;\n  private _didBegin = false;\n  private _config!: FullConfig;\n  private _startTime: Date | undefined;\n  private _monotonicStartTime: number | undefined;\n\n  constructor(reporters: AnyReporter[]) {\n    this._reporter = new Multiplexer(reporters.map(wrapReporterAsV2));\n  }\n\n  version(): 'v2' {\n    return 'v2';\n  }\n\n  onConfigure(config: FullConfig) {\n    this._config = config;\n    this._startTime = new Date();\n    this._monotonicStartTime = monotonicTime();\n    this._reporter.onConfigure?.(config);\n  }\n\n  onBegin(suite: Suite) {\n    this._didBegin = true;\n    this._reporter.onBegin?.(suite);\n  }\n\n  onTestBegin(test: TestCase, result: TestResult) {\n    this._reporter.onTestBegin?.(test, result);\n  }\n\n  onStdOut(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    this._reporter.onStdOut?.(chunk, test, result);\n  }\n\n  onStdErr(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    this._reporter.onStdErr?.(chunk, test, result);\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    this._addSnippetToTestErrors(test, result);\n    this._reporter.onTestEnd?.(test, result);\n  }\n\n  async onEnd(result: { status: FullResult['status'] }) {\n    if (!this._didBegin) {\n      // onBegin was not reported, emit it.\n      this.onBegin(new Suite('', 'root'));\n    }\n    return await this._reporter.onEnd?.({\n      ...result,\n      startTime: this._startTime!,\n      duration: monotonicTime() - this._monotonicStartTime!,\n    });\n  }\n\n  async onExit() {\n    await this._reporter.onExit?.();\n  }\n\n  onError(error: TestError) {\n    addLocationAndSnippetToError(this._config, error);\n    this._reporter.onError?.(error);\n  }\n\n  onStepBegin(test: TestCase, result: TestResult, step: TestStep) {\n    this._reporter.onStepBegin?.(test, result, step);\n  }\n\n  onStepEnd(test: TestCase, result: TestResult, step: TestStep) {\n    this._addSnippetToStepError(test, step);\n    this._reporter.onStepEnd?.(test, result, step);\n  }\n\n  printsToStdio() {\n    return this._reporter.printsToStdio ? this._reporter.printsToStdio() : true;\n  }\n\n  private _addSnippetToTestErrors(test: TestCase, result: TestResult) {\n    for (const error of result.errors)\n      addLocationAndSnippetToError(this._config, error, test.location.file);\n  }\n\n  private _addSnippetToStepError(test: TestCase, step: TestStep) {\n    if (step.error)\n      addLocationAndSnippetToError(this._config, step.error, test.location.file);\n  }\n}\n\nfunction addLocationAndSnippetToError(config: FullConfig, error: TestError, file?: string) {\n  if (error.stack && !error.location)\n    error.location = prepareErrorStack(error.stack).location;\n  const location = error.location;\n  if (!location)\n    return;\n\n  try {\n    const tokens = [];\n    const source = fs.readFileSync(location.file, 'utf8');\n    const codeFrame = codeFrameColumns(source, { start: location }, { highlightCode: true });\n    // Convert /var/folders to /private/var/folders on Mac.\n    if (!file || fs.realpathSync(file) !== location.file) {\n      tokens.push(internalScreen.colors.gray(`   at `) + `${relativeFilePath(internalScreen, config, location.file)}:${location.line}`);\n      tokens.push('');\n    }\n    tokens.push(codeFrame);\n    error.snippet = tokens.join('\\n');\n  } catch (e) {\n    // Failed to read the source file - that's ok.\n  }\n}\n"],
  "mappings": "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",
  "names": ["fs"]
}
