{
  "version": 3,
  "sources": ["../../src/reporters/teleEmitter.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\n\nimport { createGuid } from 'playwright-core/lib/utils';\n\nimport { serializeRegexPatterns } from '../isomorphic/teleReceiver';\n\nimport type { ReporterV2 } from './reporterV2';\nimport type * as reporterTypes from '../../types/testReporter';\nimport type { TestAnnotation } from '../../types/test';\nimport type * as teleReceiver from '../isomorphic/teleReceiver';\n\nexport type TeleReporterEmitterOptions = {\n  omitOutput?: boolean;\n  omitBuffers?: boolean;\n};\n\nexport class TeleReporterEmitter implements ReporterV2 {\n  private _messageSink: (message: teleReceiver.JsonEvent) => void;\n  private _rootDir!: string;\n  private _emitterOptions: TeleReporterEmitterOptions;\n  private _resultKnownAttachmentCounts = new Map<string, number>();\n  // In case there is blob reporter and UI mode, make sure one does override\n  // the id assigned by the other.\n  private readonly _idSymbol = Symbol('id');\n\n  constructor(messageSink: (message: teleReceiver.JsonEvent) => void, options: TeleReporterEmitterOptions = {}) {\n    this._messageSink = messageSink;\n    this._emitterOptions = options;\n  }\n\n  version(): 'v2' {\n    return 'v2';\n  }\n\n  onConfigure(config: reporterTypes.FullConfig) {\n    this._rootDir = config.rootDir;\n    this._messageSink({ method: 'onConfigure', params: { config: this._serializeConfig(config) } });\n  }\n\n  onBegin(suite: reporterTypes.Suite) {\n    const projects = suite.suites.map(projectSuite => this._serializeProject(projectSuite));\n    for (const project of projects)\n      this._messageSink({ method: 'onProject', params: { project } });\n    this._messageSink({ method: 'onBegin', params: undefined });\n  }\n\n  onTestBegin(test: reporterTypes.TestCase, result: reporterTypes.TestResult): void {\n    (result as any)[this._idSymbol] = createGuid();\n    this._messageSink({\n      method: 'onTestBegin',\n      params: {\n        testId: test.id,\n        result: this._serializeResultStart(result)\n      }\n    });\n  }\n\n  onTestEnd(test: reporterTypes.TestCase, result: reporterTypes.TestResult): void {\n    const testEnd: teleReceiver.JsonTestEnd = {\n      testId: test.id,\n      expectedStatus: test.expectedStatus,\n      timeout: test.timeout,\n      annotations: []\n    };\n    this._sendNewAttachments(result, test.id);\n    this._messageSink({\n      method: 'onTestEnd',\n      params: {\n        test: testEnd,\n        result: this._serializeResultEnd(result),\n      }\n    });\n\n    this._resultKnownAttachmentCounts.delete((result as any)[this._idSymbol]);\n  }\n\n  onStepBegin(test: reporterTypes.TestCase, result: reporterTypes.TestResult, step: reporterTypes.TestStep): void {\n    (step as any)[this._idSymbol] = createGuid();\n    this._messageSink({\n      method: 'onStepBegin',\n      params: {\n        testId: test.id,\n        resultId: (result as any)[this._idSymbol],\n        step: this._serializeStepStart(step)\n      }\n    });\n  }\n\n  onStepEnd(test: reporterTypes.TestCase, result: reporterTypes.TestResult, step: reporterTypes.TestStep): void {\n    // Create synthetic onAttach event so we serialize the entire attachment along with the step\n    const resultId = (result as any)[this._idSymbol] as string;\n    this._sendNewAttachments(result, test.id);\n\n    this._messageSink({\n      method: 'onStepEnd',\n      params: {\n        testId: test.id,\n        resultId,\n        step: this._serializeStepEnd(step, result)\n      }\n    });\n  }\n\n  onError(error: reporterTypes.TestError): void {\n    this._messageSink({\n      method: 'onError',\n      params: { error }\n    });\n  }\n\n  onStdOut(chunk: string | Buffer, test?: reporterTypes.TestCase, result?: reporterTypes.TestResult): void {\n    this._onStdIO('stdout', chunk, test, result);\n  }\n\n  onStdErr(chunk: string | Buffer, test?: reporterTypes.TestCase, result?: reporterTypes.TestResult): void {\n    this._onStdIO('stderr', chunk, test, result);\n  }\n\n  private _onStdIO(type: teleReceiver.JsonStdIOType, chunk: string | Buffer, test: void | reporterTypes.TestCase, result: void | reporterTypes.TestResult): void {\n    if (this._emitterOptions.omitOutput)\n      return;\n    const isBase64 = typeof chunk !== 'string';\n    const data = isBase64 ? chunk.toString('base64') : chunk;\n    this._messageSink({\n      method: 'onStdIO',\n      params: { testId: test?.id, resultId: result ? (result as any)[this._idSymbol] : undefined, type, data, isBase64 }\n    });\n  }\n\n  async onEnd(result: reporterTypes.FullResult) {\n    const resultPayload: teleReceiver.JsonFullResult = {\n      status: result.status,\n      startTime: result.startTime.getTime(),\n      duration: result.duration,\n    };\n    this._messageSink({\n      method: 'onEnd',\n      params: {\n        result: resultPayload\n      }\n    });\n  }\n\n  printsToStdio() {\n    return false;\n  }\n\n  private _serializeConfig(config: reporterTypes.FullConfig): teleReceiver.JsonConfig {\n    return {\n      configFile: this._relativePath(config.configFile),\n      globalTimeout: config.globalTimeout,\n      maxFailures: config.maxFailures,\n      metadata: config.metadata,\n      rootDir: config.rootDir,\n      version: config.version,\n      workers: config.workers,\n      globalSetup: config.globalSetup,\n      globalTeardown: config.globalTeardown,\n    };\n  }\n\n  private _serializeProject(suite: reporterTypes.Suite): teleReceiver.JsonProject {\n    const project = suite.project()!;\n    const report: teleReceiver.JsonProject = {\n      metadata: project.metadata,\n      name: project.name,\n      outputDir: this._relativePath(project.outputDir),\n      repeatEach: project.repeatEach,\n      retries: project.retries,\n      testDir: this._relativePath(project.testDir),\n      testIgnore: serializeRegexPatterns(project.testIgnore),\n      testMatch: serializeRegexPatterns(project.testMatch),\n      timeout: project.timeout,\n      suites: suite.suites.map(fileSuite => {\n        return this._serializeSuite(fileSuite);\n      }),\n      grep: serializeRegexPatterns(project.grep),\n      grepInvert: serializeRegexPatterns(project.grepInvert || []),\n      dependencies: project.dependencies,\n      snapshotDir: this._relativePath(project.snapshotDir),\n      teardown: project.teardown,\n      use: this._serializeProjectUseOptions(project.use),\n    };\n    return report;\n  }\n\n  private _serializeProjectUseOptions(use: reporterTypes.FullProject['use']): Record<string, any> {\n    return {\n      testIdAttribute: use.testIdAttribute,\n    };\n  }\n\n  private _serializeSuite(suite: reporterTypes.Suite): teleReceiver.JsonSuite {\n    const result = {\n      title: suite.title,\n      location: this._relativeLocation(suite.location),\n      entries: suite.entries().map(e => {\n        if (e.type === 'test')\n          return this._serializeTest(e);\n        return this._serializeSuite(e);\n      })\n    };\n    return result;\n  }\n\n  private _serializeTest(test: reporterTypes.TestCase): teleReceiver.JsonTestCase {\n    return {\n      testId: test.id,\n      title: test.title,\n      location: this._relativeLocation(test.location),\n      retries: test.retries,\n      tags: test.tags,\n      repeatEachIndex: test.repeatEachIndex,\n      annotations: this._relativeAnnotationLocations(test.annotations),\n    };\n  }\n\n  private _serializeResultStart(result: reporterTypes.TestResult): teleReceiver.JsonTestResultStart {\n    return {\n      id: (result as any)[this._idSymbol],\n      retry: result.retry,\n      workerIndex: result.workerIndex,\n      parallelIndex: result.parallelIndex,\n      startTime: +result.startTime,\n    };\n  }\n\n  private _serializeResultEnd(result: reporterTypes.TestResult): teleReceiver.JsonTestResultEnd {\n    return {\n      id: (result as any)[this._idSymbol],\n      duration: result.duration,\n      status: result.status,\n      errors: result.errors,\n      annotations: result.annotations?.length ? this._relativeAnnotationLocations(result.annotations) : undefined,\n    };\n  }\n\n  private _sendNewAttachments(result: reporterTypes.TestResult, testId: string) {\n    const resultId = (result as any)[this._idSymbol] as string;\n    // Track whether this step (or something else since the last step) has added attachments and send them\n    const knownAttachmentCount = this._resultKnownAttachmentCounts.get(resultId) ?? 0;\n    if (result.attachments.length > knownAttachmentCount) {\n      this._messageSink({\n        method: 'onAttach',\n        params: {\n          testId,\n          resultId,\n          attachments: this._serializeAttachments((result.attachments.slice(knownAttachmentCount))),\n        }\n      });\n    }\n\n    this._resultKnownAttachmentCounts.set(resultId, result.attachments.length);\n  }\n\n  _serializeAttachments(attachments: reporterTypes.TestResult['attachments']): teleReceiver.JsonAttachment[] {\n    return attachments.map(a => {\n      const { body, ...rest } = a;\n      return {\n        ...rest,\n        // There is no Buffer in the browser, so there is no point in sending the data there.\n        base64: (body && !this._emitterOptions.omitBuffers) ? body.toString('base64') : undefined,\n      };\n    });\n  }\n\n  private _serializeStepStart(step: reporterTypes.TestStep): teleReceiver.JsonTestStepStart {\n    return {\n      id: (step as any)[this._idSymbol],\n      parentStepId: (step.parent as any)?.[this._idSymbol],\n      title: step.title,\n      category: step.category,\n      startTime: +step.startTime,\n      location: this._relativeLocation(step.location),\n    };\n  }\n\n  private _serializeStepEnd(step: reporterTypes.TestStep, result: reporterTypes.TestResult): teleReceiver.JsonTestStepEnd {\n    return {\n      id: (step as any)[this._idSymbol],\n      duration: step.duration,\n      error: step.error,\n      attachments: step.attachments.length ? step.attachments.map(a => result.attachments.indexOf(a)) : undefined,\n      annotations: step.annotations.length ? this._relativeAnnotationLocations(step.annotations) : undefined,\n    };\n  }\n\n  private _relativeAnnotationLocations(annotations: TestAnnotation[]): TestAnnotation[] {\n    return annotations.map(annotation => ({\n      ...annotation,\n      location: annotation.location ? this._relativeLocation(annotation.location) : undefined,\n    }));\n  }\n\n  private _relativeLocation(location: reporterTypes.Location): reporterTypes.Location;\n  private _relativeLocation(location?: reporterTypes.Location): reporterTypes.Location | undefined;\n  private _relativeLocation(location: reporterTypes.Location | undefined): reporterTypes.Location | undefined {\n    if (!location)\n      return location;\n    return {\n      ...location,\n      file: this._relativePath(location.file),\n    };\n  }\n\n  private _relativePath(absolutePath: string): string;\n  private _relativePath(absolutePath?: string): string | undefined;\n  private _relativePath(absolutePath?: string): string | undefined {\n    if (!absolutePath)\n      return absolutePath;\n    return path.relative(this._rootDir, absolutePath);\n  }\n}\n"],
  "mappings": "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",
  "names": ["path"]
}
