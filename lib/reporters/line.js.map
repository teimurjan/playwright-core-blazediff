{
  "version": 3,
  "sources": ["../../src/reporters/line.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TerminalReporter } from './base';\n\nimport type { FullResult, Suite, TestCase, TestError, TestResult, TestStep } from '../../types/testReporter';\n\nclass LineReporter extends TerminalReporter {\n  private _current = 0;\n  private _failures = 0;\n  private _lastTest: TestCase | undefined;\n  private _didBegin = false;\n\n  override onBegin(suite: Suite) {\n    super.onBegin(suite);\n    const startingMessage = this.generateStartingMessage();\n    if (startingMessage) {\n      this.writeLine(startingMessage);\n      this.writeLine();\n    }\n    this._didBegin = true;\n  }\n\n  override onStdOut(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    super.onStdOut(chunk, test, result);\n    this._dumpToStdio(test, chunk, this.screen.stdout);\n  }\n\n  override onStdErr(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    super.onStdErr(chunk, test, result);\n    this._dumpToStdio(test, chunk, this.screen.stderr);\n  }\n\n  private _dumpToStdio(test: TestCase | undefined, chunk: string | Buffer, stream: NodeJS.WriteStream) {\n    if (this.config.quiet)\n      return;\n    if (!process.env.PW_TEST_DEBUG_REPORTERS)\n      stream.write(`\\u001B[1A\\u001B[2K`);\n    if (test && this._lastTest !== test) {\n      // Write new header for the output.\n      const title = this.screen.colors.dim(this.formatTestTitle(test));\n      stream.write(this.fitToScreen(title) + `\\n`);\n      this._lastTest = test;\n    }\n\n    stream.write(chunk);\n    if (chunk[chunk.length - 1] !== '\\n')\n      this.writeLine();\n\n    this.writeLine();\n  }\n\n  onTestBegin(test: TestCase, result: TestResult) {\n    ++this._current;\n    this._updateLine(test, result, undefined);\n  }\n\n  onStepBegin(test: TestCase, result: TestResult, step: TestStep) {\n    if (this.screen.isTTY && step.category === 'test.step')\n      this._updateLine(test, result, step);\n  }\n\n  onStepEnd(test: TestCase, result: TestResult, step: TestStep) {\n    if (this.screen.isTTY && step.category === 'test.step')\n      this._updateLine(test, result, step.parent);\n  }\n\n  override onTestEnd(test: TestCase, result: TestResult) {\n    super.onTestEnd(test, result);\n    if (!this.willRetry(test) && (test.outcome() === 'flaky' || test.outcome() === 'unexpected' || result.status === 'interrupted')) {\n      if (!process.env.PW_TEST_DEBUG_REPORTERS)\n        this.screen.stdout.write(`\\u001B[1A\\u001B[2K`);\n      this.writeLine(this.formatFailure(test, ++this._failures));\n      this.writeLine();\n    }\n  }\n\n  private _updateLine(test: TestCase, result: TestResult, step?: TestStep) {\n    const retriesPrefix = this.totalTestCount < this._current ? ` (retries)` : ``;\n    const prefix = `[${this._current}/${this.totalTestCount}]${retriesPrefix} `;\n    const currentRetrySuffix = result.retry ? this.screen.colors.yellow(` (retry #${result.retry})`) : '';\n    const title = this.formatTestTitle(test, step) + currentRetrySuffix;\n    if (process.env.PW_TEST_DEBUG_REPORTERS)\n      this.screen.stdout.write(`${prefix + title}\\n`);\n    else\n      this.screen.stdout.write(`\\u001B[1A\\u001B[2K${prefix + this.fitToScreen(title, prefix)}\\n`);\n  }\n\n  override onError(error: TestError): void {\n    super.onError(error);\n\n    const message = this.formatError(error).message + '\\n';\n    if (!process.env.PW_TEST_DEBUG_REPORTERS && this._didBegin)\n      this.screen.stdout.write(`\\u001B[1A\\u001B[2K`);\n    this.screen.stdout.write(message);\n    this.writeLine();\n  }\n\n  override async onEnd(result: FullResult) {\n    if (!process.env.PW_TEST_DEBUG_REPORTERS && this._didBegin)\n      this.screen.stdout.write(`\\u001B[1A\\u001B[2K`);\n    await super.onEnd(result);\n    this.epilogue(false);\n  }\n}\n\nexport default LineReporter;\n"],
  "mappings": "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",
  "names": []
}
