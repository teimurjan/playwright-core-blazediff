{
  "version": 3,
  "sources": ["../../src/reporters/github.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\n\nimport { noColors } from 'playwright-core/lib/utils';\nimport { ms as milliseconds } from 'playwright-core/lib/utilsBundle';\n\nimport { TerminalReporter, formatResultFailure, formatRetry } from './base';\nimport { stripAnsiEscapes } from '../util';\n\nimport type { FullResult, TestCase, TestError } from '../../types/testReporter';\n\ntype GitHubLogType = 'debug' | 'notice' | 'warning' | 'error';\n\ntype GitHubLogOptions = Partial<{\n  title: string;\n  file: string;\n  col: number;\n  endColumn: number;\n  line: number;\n  endLine: number;\n}>;\n\nclass GitHubLogger {\n  private _log(message: string, type: GitHubLogType = 'notice', options: GitHubLogOptions = {}) {\n    message = message.replace(/\\n/g, '%0A');\n    const configs = Object.entries(options)\n        .map(([key, option]) => `${key}=${option}`)\n        .join(',');\n    // eslint-disable-next-line no-restricted-properties\n    process.stdout.write(stripAnsiEscapes(`::${type} ${configs}::${message}\\n`));\n  }\n\n  debug(message: string, options?: GitHubLogOptions) {\n    this._log(message, 'debug', options);\n  }\n\n  error(message: string, options?: GitHubLogOptions) {\n    this._log(message, 'error', options);\n  }\n\n  notice(message: string, options?: GitHubLogOptions) {\n    this._log(message, 'notice', options);\n  }\n\n  warning(message: string, options?: GitHubLogOptions) {\n    this._log(message, 'warning', options);\n  }\n}\n\nexport class GitHubReporter extends TerminalReporter {\n  githubLogger = new GitHubLogger();\n\n  constructor(options: { omitFailures?: boolean } = {}) {\n    super(options);\n    this.screen = { ...this.screen, colors: noColors };\n  }\n\n  printsToStdio() {\n    return false;\n  }\n\n  override async onEnd(result: FullResult) {\n    await super.onEnd(result);\n    this._printAnnotations();\n  }\n\n  override onError(error: TestError) {\n    const errorMessage = this.formatError(error).message;\n    this.githubLogger.error(errorMessage);\n  }\n\n  private _printAnnotations() {\n    const summary = this.generateSummary();\n    const summaryMessage = this.generateSummaryMessage(summary);\n    if (summary.failuresToPrint.length)\n      this._printFailureAnnotations(summary.failuresToPrint);\n    this._printSlowTestAnnotations();\n    this._printSummaryAnnotation(summaryMessage);\n  }\n\n  private _printSlowTestAnnotations() {\n    this.getSlowTests().forEach(([file, duration]) => {\n      const filePath = workspaceRelativePath(path.join(process.cwd(), file));\n      this.githubLogger.warning(`${filePath} took ${milliseconds(duration)}`, {\n        title: 'Slow Test',\n        file: filePath,\n      });\n    });\n  }\n\n  private _printSummaryAnnotation(summary: string){\n    this.githubLogger.notice(summary, {\n      title: '\uD83C\uDFAD Playwright Run Summary'\n    });\n  }\n\n  private _printFailureAnnotations(failures: TestCase[]) {\n    failures.forEach((test, index) => {\n      const title = this.formatTestTitle(test);\n      const header = this.formatTestHeader(test, { indent: '  ', index: index + 1, mode: 'error' });\n      for (const result of test.results) {\n        const errors = formatResultFailure(this.screen, test, result, '    ');\n        for (const error of errors) {\n          const options: GitHubLogOptions = {\n            file: workspaceRelativePath(error.location?.file || test.location.file),\n            title,\n          };\n          if (error.location) {\n            options.line = error.location.line;\n            options.col = error.location.column;\n          }\n          const message = [header, ...formatRetry(this.screen, result), error.message].join('\\n');\n          this.githubLogger.error(message, options);\n        }\n      }\n    });\n  }\n}\n\nfunction workspaceRelativePath(filePath: string): string {\n  return path.relative(process.env['GITHUB_WORKSPACE'] ?? '', filePath);\n}\n\nexport default GitHubReporter;\n"],
  "mappings": "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",
  "names": ["path", "milliseconds"]
}
