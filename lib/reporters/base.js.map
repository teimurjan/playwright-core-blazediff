{
  "version": 3,
  "sources": ["../../src/reporters/base.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\n\nimport { getPackageManagerExecCommand, parseErrorStack } from 'playwright-core/lib/utils';\nimport { ms as milliseconds } from 'playwright-core/lib/utilsBundle';\nimport { colors as realColors, noColors } from 'playwright-core/lib/utils';\n\nimport { ansiRegex, resolveReporterOutputPath, stripAnsiEscapes } from '../util';\nimport { getEastAsianWidth } from '../utilsBundle';\n\nimport type { ReporterV2 } from './reporterV2';\nimport type { FullConfig, FullResult, Location, Suite, TestCase, TestError, TestResult, TestStep } from '../../types/testReporter';\nimport type { Colors } from '@isomorphic/colors';\n\nexport type TestResultOutput = { chunk: string | Buffer, type: 'stdout' | 'stderr' };\nexport const kOutputSymbol = Symbol('output');\n\ntype ErrorDetails = {\n  message: string;\n  location?: Location;\n};\n\ntype TestSummary = {\n  didNotRun: number;\n  skipped: number;\n  expected: number;\n  interrupted: TestCase[];\n  unexpected: TestCase[];\n  flaky: TestCase[];\n  failuresToPrint: TestCase[];\n  fatalErrors: TestError[];\n};\n\nexport type CommonReporterOptions = {\n  configDir: string,\n  _mode?: 'list' | 'test' | 'merge',\n  _isTestServer?: boolean,\n  _commandHash?: string,\n};\n\nexport type Screen = {\n  resolveFiles: 'cwd' | 'rootDir';\n  colors: Colors;\n  isTTY: boolean;\n  ttyWidth: number;\n  ttyHeight: number;\n  stdout?: NodeJS.WriteStream;\n  stderr?: NodeJS.WriteStream;\n};\n\nexport type TerminalScreen = Screen & {\n  stdout: NodeJS.WriteStream;\n  stderr: NodeJS.WriteStream;\n};\n\nconst DEFAULT_TTY_WIDTH = 100;\nconst DEFAULT_TTY_HEIGHT = 40;\n\n// eslint-disable-next-line no-restricted-properties\nconst originalProcessStdout = process.stdout;\n// eslint-disable-next-line no-restricted-properties\nconst originalProcessStderr = process.stderr;\n\n// Output goes to terminal.\nexport const terminalScreen: TerminalScreen = (() => {\n  let isTTY = !!originalProcessStdout.isTTY;\n  let ttyWidth = originalProcessStdout.columns || 0;\n  let ttyHeight = originalProcessStdout.rows || 0;\n  if (process.env.PLAYWRIGHT_FORCE_TTY === 'false' || process.env.PLAYWRIGHT_FORCE_TTY === '0') {\n    isTTY = false;\n    ttyWidth = 0;\n    ttyHeight = 0;\n  } else if (process.env.PLAYWRIGHT_FORCE_TTY === 'true' || process.env.PLAYWRIGHT_FORCE_TTY === '1') {\n    isTTY = true;\n    ttyWidth = originalProcessStdout.columns || DEFAULT_TTY_WIDTH;\n    ttyHeight = originalProcessStdout.rows || DEFAULT_TTY_HEIGHT;\n  } else if (process.env.PLAYWRIGHT_FORCE_TTY) {\n    isTTY = true;\n    const sizeMatch = process.env.PLAYWRIGHT_FORCE_TTY.match(/^(\\d+)x(\\d+)$/);\n    if (sizeMatch) {\n      ttyWidth = +sizeMatch[1];\n      ttyHeight = +sizeMatch[2];\n    } else {\n      ttyWidth = +process.env.PLAYWRIGHT_FORCE_TTY;\n      ttyHeight = DEFAULT_TTY_HEIGHT;\n    }\n    if (isNaN(ttyWidth))\n      ttyWidth = DEFAULT_TTY_WIDTH;\n    if (isNaN(ttyHeight))\n      ttyHeight = DEFAULT_TTY_HEIGHT;\n  }\n\n  let useColors = isTTY;\n  if (process.env.DEBUG_COLORS === '0' || process.env.DEBUG_COLORS === 'false' ||\n      process.env.FORCE_COLOR === '0' || process.env.FORCE_COLOR === 'false')\n    useColors = false;\n  else if (process.env.DEBUG_COLORS || process.env.FORCE_COLOR)\n    useColors = true;\n\n  const colors = useColors ? realColors : noColors;\n  return {\n    resolveFiles: 'cwd',\n    isTTY,\n    ttyWidth,\n    ttyHeight,\n    colors,\n    stdout: originalProcessStdout,\n    stderr: originalProcessStderr,\n  };\n})();\n\n// Output does not go to terminal, but colors are controlled with terminal env vars.\nexport const nonTerminalScreen: Screen = {\n  colors: terminalScreen.colors,\n  isTTY: false,\n  ttyWidth: 0,\n  ttyHeight: 0,\n  resolveFiles: 'rootDir',\n};\n\n// Internal output for post-processing, should always contain real colors.\nexport const internalScreen: Screen = {\n  colors: realColors,\n  isTTY: false,\n  ttyWidth: 0,\n  ttyHeight: 0,\n  resolveFiles: 'rootDir',\n};\n\nexport type TerminalReporterOptions = {\n  screen?: TerminalScreen;\n  omitFailures?: boolean;\n  includeTestId?: boolean;\n};\n\nexport class TerminalReporter implements ReporterV2 {\n  screen: TerminalScreen;\n  config!: FullConfig;\n  suite!: Suite;\n  totalTestCount = 0;\n  result!: FullResult;\n  private fileDurations = new Map<string, { duration: number, workers: Set<number> }>();\n  private _options: TerminalReporterOptions;\n  private _fatalErrors: TestError[] = [];\n  private _failureCount: number = 0;\n\n  constructor(options: TerminalReporterOptions = {}) {\n    this.screen = options.screen ?? terminalScreen;\n    this._options = options;\n  }\n\n  version(): 'v2' {\n    return 'v2';\n  }\n\n  onConfigure(config: FullConfig) {\n    this.config = config;\n  }\n\n  onBegin(suite: Suite) {\n    this.suite = suite;\n    this.totalTestCount = suite.allTests().length;\n  }\n\n  onStdOut(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    this._appendOutput({ chunk, type: 'stdout' }, result);\n  }\n\n  onStdErr(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    this._appendOutput({ chunk, type: 'stderr' }, result);\n  }\n\n  private _appendOutput(output: TestResultOutput, result: TestResult | undefined) {\n    if (!result)\n      return;\n    (result as any)[kOutputSymbol] = (result as any)[kOutputSymbol] || [];\n    (result as any)[kOutputSymbol].push(output);\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    if (result.status !== 'skipped' && result.status !== test.expectedStatus)\n      ++this._failureCount;\n    const projectName = test.titlePath()[1];\n    const relativePath = relativeTestPath(this.screen, this.config, test);\n    const fileAndProject = (projectName ? `[${projectName}] \u203A ` : '') + relativePath;\n    const entry = this.fileDurations.get(fileAndProject) || { duration: 0, workers: new Set() };\n    entry.duration += result.duration;\n    entry.workers.add(result.workerIndex);\n    this.fileDurations.set(fileAndProject, entry);\n  }\n\n  onError(error: TestError) {\n    this._fatalErrors.push(error);\n  }\n\n  async onEnd(result: FullResult) {\n    this.result = result;\n  }\n\n  protected fitToScreen(line: string, prefix?: string): string {\n    if (!this.screen.ttyWidth) {\n      // Guard against the case where we cannot determine available width.\n      return line;\n    }\n    return fitToWidth(line, this.screen.ttyWidth, prefix);\n  }\n\n  protected generateStartingMessage() {\n    const jobs = this.config.metadata.actualWorkers ?? this.config.workers;\n    const shardDetails = this.config.shard ? `, shard ${this.config.shard.current} of ${this.config.shard.total}` : '';\n    if (!this.totalTestCount)\n      return '';\n    return '\\n' + this.screen.colors.dim('Running ') + this.totalTestCount + this.screen.colors.dim(` test${this.totalTestCount !== 1 ? 's' : ''} using `) + jobs + this.screen.colors.dim(` worker${jobs !== 1 ? 's' : ''}${shardDetails}`);\n  }\n\n  protected getSlowTests(): [string, number][] {\n    if (!this.config.reportSlowTests)\n      return [];\n    // Only pick durations that were served by single worker.\n    const fileDurations = [...this.fileDurations.entries()].filter(([key, value]) => value.workers.size === 1).map(([key, value]) => [key, value.duration]) as [string, number][];\n    fileDurations.sort((a, b) => b[1] - a[1]);\n    const count = Math.min(fileDurations.length, this.config.reportSlowTests.max || Number.POSITIVE_INFINITY);\n    const threshold =  this.config.reportSlowTests.threshold;\n    return fileDurations.filter(([, duration]) => duration > threshold).slice(0, count);\n  }\n\n  protected generateSummaryMessage({ didNotRun, skipped, expected, interrupted, unexpected, flaky, fatalErrors }: TestSummary) {\n    const tokens: string[] = [];\n    if (unexpected.length) {\n      tokens.push(this.screen.colors.red(`  ${unexpected.length} failed`));\n      for (const test of unexpected)\n        tokens.push(this.screen.colors.red(this.formatTestHeader(test, { indent: '    ' })));\n    }\n    if (interrupted.length) {\n      tokens.push(this.screen.colors.yellow(`  ${interrupted.length} interrupted`));\n      for (const test of interrupted)\n        tokens.push(this.screen.colors.yellow(this.formatTestHeader(test, { indent: '    ' })));\n    }\n    if (flaky.length) {\n      tokens.push(this.screen.colors.yellow(`  ${flaky.length} flaky`));\n      for (const test of flaky)\n        tokens.push(this.screen.colors.yellow(this.formatTestHeader(test, { indent: '    ' })));\n    }\n    if (skipped)\n      tokens.push(this.screen.colors.yellow(`  ${skipped} skipped`));\n    if (didNotRun)\n      tokens.push(this.screen.colors.yellow(`  ${didNotRun} did not run`));\n    if (expected)\n      tokens.push(this.screen.colors.green(`  ${expected} passed`) + this.screen.colors.dim(` (${milliseconds(this.result.duration)})`));\n    if (fatalErrors.length && expected + unexpected.length + interrupted.length + flaky.length > 0)\n      tokens.push(this.screen.colors.red(`  ${fatalErrors.length === 1 ? '1 error was not a part of any test' : fatalErrors.length + ' errors were not a part of any test'}, see above for details`));\n\n    return tokens.join('\\n');\n  }\n\n  protected generateSummary(): TestSummary {\n    let didNotRun = 0;\n    let skipped = 0;\n    let expected = 0;\n    const interrupted: TestCase[] = [];\n    const interruptedToPrint: TestCase[] = [];\n    const unexpected: TestCase[] = [];\n    const flaky: TestCase[] = [];\n\n    this.suite.allTests().forEach(test => {\n      switch (test.outcome()) {\n        case 'skipped': {\n          if (test.results.some(result => result.status === 'interrupted')) {\n            if (test.results.some(result => !!result.error))\n              interruptedToPrint.push(test);\n            interrupted.push(test);\n          } else if (!test.results.length || test.expectedStatus !== 'skipped') {\n            ++didNotRun;\n          } else {\n            ++skipped;\n          }\n          break;\n        }\n        case 'expected': ++expected; break;\n        case 'unexpected': unexpected.push(test); break;\n        case 'flaky': flaky.push(test); break;\n      }\n    });\n\n    const failuresToPrint = [...unexpected, ...flaky, ...interruptedToPrint];\n    return {\n      didNotRun,\n      skipped,\n      expected,\n      interrupted,\n      unexpected,\n      flaky,\n      failuresToPrint,\n      fatalErrors: this._fatalErrors,\n    };\n  }\n\n  epilogue(full: boolean) {\n    const summary = this.generateSummary();\n    const summaryMessage = this.generateSummaryMessage(summary);\n    if (full && summary.failuresToPrint.length && !this._options.omitFailures)\n      this._printFailures(summary.failuresToPrint);\n    this._printSlowTests();\n    this._printSummary(summaryMessage);\n  }\n\n  private _printFailures(failures: TestCase[]) {\n    this.writeLine('');\n    failures.forEach((test, index) => {\n      this.writeLine(this.formatFailure(test, index + 1));\n    });\n  }\n\n  private _printSlowTests() {\n    const slowTests = this.getSlowTests();\n    slowTests.forEach(([file, duration]) => {\n      this.writeLine(this.screen.colors.yellow('  Slow test file: ') + file + this.screen.colors.yellow(` (${milliseconds(duration)})`));\n    });\n    if (slowTests.length)\n      this.writeLine(this.screen.colors.yellow('  Consider running tests from slow files in parallel. See: https://playwright.dev/docs/test-parallel'));\n  }\n\n  private _printSummary(summary: string) {\n    if (summary.trim())\n      this.writeLine(summary);\n  }\n\n  willRetry(test: TestCase): boolean {\n    return test.outcome() === 'unexpected' && test.results.length <= test.retries;\n  }\n\n  formatTestTitle(test: TestCase, step?: TestStep): string {\n    return formatTestTitle(this.screen, this.config, test, step, this._options);\n  }\n\n  formatTestHeader(test: TestCase, options: { indent?: string, index?: number, mode?: 'default' | 'error' } = {}): string {\n    return formatTestHeader(this.screen, this.config, test, { ...options, includeTestId: this._options.includeTestId });\n  }\n\n  formatFailure(test: TestCase, index?: number): string {\n    return formatFailure(this.screen, this.config, test, index, this._options);\n  }\n\n  formatError(error: TestError): ErrorDetails {\n    return formatError(this.screen, error);\n  }\n\n  writeLine(line?: string) {\n    this.screen.stdout?.write(line ? line + '\\n' : '\\n');\n  }\n}\n\nexport function formatFailure(screen: Screen, config: FullConfig, test: TestCase, index?: number, options?: TerminalReporterOptions): string {\n  const lines: string[] = [];\n  const header = formatTestHeader(screen, config, test, { indent: '  ', index, mode: 'error', includeTestId: options?.includeTestId });\n  lines.push(screen.colors.red(header));\n  for (const result of test.results) {\n    const resultLines: string[] = [];\n    const errors = formatResultFailure(screen, test, result, '    ');\n    if (!errors.length)\n      continue;\n    if (result.retry) {\n      resultLines.push('');\n      resultLines.push(screen.colors.gray(separator(screen, `    Retry #${result.retry}`)));\n    }\n    resultLines.push(...errors.map(error => '\\n' + error.message));\n    const attachmentGroups = groupAttachments(result.attachments);\n    for (let i = 0; i < attachmentGroups.length; ++i) {\n      const attachment = attachmentGroups[i];\n      if (attachment.name === 'error-context' && attachment.path) {\n        resultLines.push('');\n        resultLines.push(screen.colors.dim(`    Error Context: ${relativeFilePath(screen, config, attachment.path)}`));\n        continue;\n      }\n\n      if (attachment.name.startsWith('_'))\n        continue;\n\n      const hasPrintableContent = attachment.contentType.startsWith('text/');\n      if (!attachment.path && !hasPrintableContent)\n        continue;\n\n      resultLines.push('');\n      resultLines.push(screen.colors.dim(separator(screen, `    attachment #${i + 1}: ${screen.colors.bold(attachment.name)} (${attachment.contentType})`)));\n\n      if (attachment.actual?.path) {\n        if (attachment.expected?.path) {\n          const expectedPath = relativeFilePath(screen, config, attachment.expected.path);\n          resultLines.push(screen.colors.dim(`    Expected: ${expectedPath}`));\n        }\n        const actualPath = relativeFilePath(screen, config, attachment.actual.path);\n        resultLines.push(screen.colors.dim(`    Received: ${actualPath}`));\n        if (attachment.previous?.path) {\n          const previousPath = relativeFilePath(screen, config, attachment.previous.path);\n          resultLines.push(screen.colors.dim(`    Previous: ${previousPath}`));\n        }\n        if (attachment.diff?.path) {\n          const diffPath = relativeFilePath(screen, config, attachment.diff.path);\n          resultLines.push(screen.colors.dim(`    Diff:     ${diffPath}`));\n        }\n      } else if (attachment.path) {\n        const relativePath = relativeFilePath(screen, config, attachment.path);\n        resultLines.push(screen.colors.dim(`    ${relativePath}`));\n        // Make this extensible\n        if (attachment.name === 'trace') {\n          const packageManagerCommand = getPackageManagerExecCommand();\n          resultLines.push(screen.colors.dim(`    Usage:`));\n          resultLines.push('');\n          resultLines.push(screen.colors.dim(`        ${packageManagerCommand} playwright show-trace ${quotePathIfNeeded(relativePath)}`));\n          resultLines.push('');\n        }\n      } else {\n        if (attachment.contentType.startsWith('text/') && attachment.body) {\n          let text = attachment.body.toString();\n          if (text.length > 300)\n            text = text.slice(0, 300) + '...';\n          for (const line of text.split('\\n'))\n            resultLines.push(screen.colors.dim(`    ${line}`));\n        }\n      }\n      resultLines.push(screen.colors.dim(separator(screen, '   ')));\n    }\n    lines.push(...resultLines);\n  }\n  lines.push('');\n  return lines.join('\\n');\n}\n\nexport function formatRetry(screen: Screen, result: TestResult) {\n  const retryLines = [];\n  if (result.retry) {\n    retryLines.push('');\n    retryLines.push(screen.colors.gray(separator(screen, `    Retry #${result.retry}`)));\n  }\n  return retryLines;\n}\n\nfunction quotePathIfNeeded(path: string): string {\n  if (/\\s/.test(path))\n    return `\"${path}\"`;\n  return path;\n}\n\nexport function formatResultFailure(screen: Screen, test: TestCase, result: TestResult, initialIndent: string): ErrorDetails[] {\n  const errorDetails: ErrorDetails[] = [];\n\n  if (result.status === 'passed' && test.expectedStatus === 'failed') {\n    errorDetails.push({\n      message: indent(screen.colors.red(`Expected to fail, but passed.`), initialIndent),\n    });\n  }\n  if (result.status === 'interrupted') {\n    errorDetails.push({\n      message: indent(screen.colors.red(`Test was interrupted.`), initialIndent),\n    });\n  }\n\n  for (const error of result.errors) {\n    const formattedError = formatError(screen, error);\n    errorDetails.push({\n      message: indent(formattedError.message, initialIndent),\n      location: formattedError.location,\n    });\n  }\n  return errorDetails;\n}\n\nexport function relativeFilePath(screen: Screen, config: FullConfig, file: string): string {\n  if (screen.resolveFiles === 'cwd')\n    return path.relative(process.cwd(), file);\n  return path.relative(config.rootDir, file);\n}\n\nfunction relativeTestPath(screen: Screen, config: FullConfig, test: TestCase): string {\n  return relativeFilePath(screen, config, test.location.file);\n}\n\nexport function stepSuffix(step: TestStep | undefined) {\n  const stepTitles = step ? step.titlePath() : [];\n  return stepTitles.map(t => t.split('\\n')[0]).map(t => ' \u203A ' + t).join('');\n}\n\nfunction formatTestTitle(screen: Screen, config: FullConfig, test: TestCase, step?: TestStep, options: { includeTestId?: boolean } = {}): string {\n  // root, project, file, ...describes, test\n  const [, projectName, , ...titles] = test.titlePath();\n  const location = `${relativeTestPath(screen, config, test)}:${test.location.line}:${test.location.column}`;\n  const testId = options.includeTestId ? `[id=${test.id}] ` : '';\n  const projectLabel = options.includeTestId ? `project=` : '';\n  const projectTitle = projectName ? `[${projectLabel}${projectName}] \u203A ` : '';\n  const testTitle = `${testId}${projectTitle}${location} \u203A ${titles.join(' \u203A ')}`;\n  const extraTags = test.tags.filter(t => !testTitle.includes(t));\n  return `${testTitle}${stepSuffix(step)}${extraTags.length ? ' ' + extraTags.join(' ') : ''}`;\n}\n\nfunction formatTestHeader(screen: Screen, config: FullConfig, test: TestCase, options: { indent?: string, index?: number, mode?: 'default' | 'error', includeTestId?: boolean } = {}): string {\n  const title = formatTestTitle(screen, config, test, undefined, options);\n  const header = `${options.indent || ''}${options.index ? options.index + ') ' : ''}${title}`;\n  let fullHeader = header;\n\n  // Render the path to the deepest failing test.step.\n  if (options.mode === 'error') {\n    const stepPaths = new Set<string>();\n    for (const result of test.results.filter(r => !!r.errors.length)) {\n      const stepPath: string[] = [];\n      const visit = (steps: TestStep[]) => {\n        const errors = steps.filter(s => s.error);\n        if (errors.length > 1)\n          return;\n        if (errors.length === 1 && errors[0].category === 'test.step') {\n          stepPath.push(errors[0].title);\n          visit(errors[0].steps);\n        }\n      };\n      visit(result.steps);\n      stepPaths.add(['', ...stepPath].join(' \u203A '));\n    }\n    fullHeader = header + (stepPaths.size === 1 ? stepPaths.values().next().value : '');\n  }\n  return separator(screen, fullHeader);\n}\n\nexport function formatError(screen: Screen, error: TestError): ErrorDetails {\n  const message = error.message || error.value || '';\n  const stack = error.stack;\n  if (!stack && !error.location)\n    return { message };\n\n  const tokens = [];\n\n  // Now that we filter out internals from our stack traces, we can safely render\n  // the helper / original exception locations.\n  const parsedStack = stack ? prepareErrorStack(stack) : undefined;\n  tokens.push(parsedStack?.message || message);\n\n  if (error.snippet) {\n    let snippet = error.snippet;\n    if (!screen.colors.enabled)\n      snippet = stripAnsiEscapes(snippet);\n    tokens.push('');\n    tokens.push(snippet);\n  }\n\n  if (parsedStack && parsedStack.stackLines.length)\n    tokens.push(screen.colors.dim(parsedStack.stackLines.join('\\n')));\n\n  let location = error.location;\n  if (parsedStack && !location)\n    location = parsedStack.location;\n\n  if (error.cause)\n    tokens.push(screen.colors.dim('[cause]: ') + formatError(screen, error.cause).message);\n\n  return {\n    location,\n    message: tokens.join('\\n'),\n  };\n}\n\nexport function separator(screen: Screen, text: string = ''): string {\n  if (text)\n    text += ' ';\n  const columns = Math.min(100, screen.ttyWidth || 100);\n  return text + screen.colors.dim('\u2500'.repeat(Math.max(0, columns - stripAnsiEscapes(text).length)));\n}\n\nfunction indent(lines: string, tab: string) {\n  return lines.replace(/^(?=.+$)/gm, tab);\n}\n\nexport function prepareErrorStack(stack: string): {\n  message: string;\n  stackLines: string[];\n  location?: Location;\n} {\n  return parseErrorStack(stack, path.sep, !!process.env.PWDEBUGIMPL);\n}\n\nfunction characterWidth(c: string) {\n  return getEastAsianWidth.eastAsianWidth(c.codePointAt(0)!);\n}\n\nfunction stringWidth(v: string) {\n  let width = 0;\n  for (const { segment } of new Intl.Segmenter(undefined, { granularity: 'grapheme' }).segment(v))\n    width += characterWidth(segment);\n  return width;\n}\n\nfunction suffixOfWidth(v: string, width: number) {\n  const segments = [...new Intl.Segmenter(undefined, { granularity: 'grapheme' }).segment(v)];\n  let suffixBegin = v.length;\n  for (const { segment, index } of segments.reverse()) {\n    const segmentWidth = stringWidth(segment);\n    if (segmentWidth > width)\n      break;\n    width -= segmentWidth;\n    suffixBegin = index;\n  }\n  return v.substring(suffixBegin);\n}\n\n// Leaves enough space for the \"prefix\" to also fit.\nexport function fitToWidth(line: string, width: number, prefix?: string): string {\n  const prefixLength = prefix ? stripAnsiEscapes(prefix).length : 0;\n  width -= prefixLength;\n  if (stringWidth(line) <= width)\n    return line;\n\n  // Even items are plain text, odd items are control sequences.\n  const parts = line.split(ansiRegex);\n  const taken: string[] = [];\n  for (let i = parts.length - 1; i >= 0; i--) {\n    if (i % 2) {\n      // Include all control sequences to preserve formatting.\n      taken.push(parts[i]);\n    } else {\n      let part = suffixOfWidth(parts[i], width);\n      const wasTruncated = part.length < parts[i].length;\n      if (wasTruncated && parts[i].length > 0) {\n        // Add ellipsis if we are truncating.\n        part = '\\u2026' + suffixOfWidth(parts[i], width - 1);\n      }\n      taken.push(part);\n      width -= stringWidth(part);\n    }\n  }\n  return taken.reverse().join('');\n}\n\nfunction resolveFromEnv(name: string): string | undefined {\n  const value = process.env[name];\n  if (value)\n    return path.resolve(process.cwd(), value);\n  return undefined;\n}\n\n// In addition to `outputFile` the function returns `outputDir` which should\n// be cleaned up if present by some reporters contract.\nexport function resolveOutputFile(reporterName: string, options: {\n  configDir: string,\n  outputDir?: string,\n  fileName?: string,\n  outputFile?: string,\n  default?: {\n    fileName: string,\n    outputDir: string,\n  }\n}): { outputFile: string, outputDir?: string } | undefined {\n  const name = reporterName.toUpperCase();\n  let outputFile = resolveFromEnv(`PLAYWRIGHT_${name}_OUTPUT_FILE`);\n  if (!outputFile && options.outputFile)\n    outputFile = path.resolve(options.configDir, options.outputFile);\n  if (outputFile)\n    return { outputFile };\n\n  let outputDir = resolveFromEnv(`PLAYWRIGHT_${name}_OUTPUT_DIR`);\n  if (!outputDir && options.outputDir)\n    outputDir = path.resolve(options.configDir, options.outputDir);\n  if (!outputDir && options.default)\n    outputDir = resolveReporterOutputPath(options.default.outputDir, options.configDir, undefined);\n  if (!outputDir)\n    outputDir = options.configDir;\n\n  const reportName = process.env[`PLAYWRIGHT_${name}_OUTPUT_NAME`] ?? options.fileName ?? options.default?.fileName;\n  if (!reportName)\n    return undefined;\n  outputFile = path.resolve(outputDir, reportName);\n\n  return { outputFile, outputDir };\n}\n\ntype TestAttachment = TestResult['attachments'][number];\n\ntype TestAttachmentGroup = TestAttachment & {\n  expected?: TestAttachment;\n  actual?: TestAttachment;\n  diff?: TestAttachment;\n  previous?: TestAttachment;\n};\n\nfunction groupAttachments(attachments: TestResult['attachments']): TestAttachmentGroup[] {\n  const result: TestAttachmentGroup[] = [];\n  const attachmentsByPrefix = new Map<string, TestAttachment>();\n  for (const attachment of attachments) {\n    if (!attachment.path) {\n      result.push(attachment);\n      continue;\n    }\n\n    const match = attachment.name.match(/^(.*)-(expected|actual|diff|previous)(\\.[^.]+)?$/);\n    if (!match) {\n      result.push(attachment);\n      continue;\n    }\n\n    const [, name, category] = match;\n    let group: TestAttachmentGroup | undefined = attachmentsByPrefix.get(name);\n    if (!group) {\n      group = { ...attachment, name };\n      attachmentsByPrefix.set(name, group);\n      result.push(group);\n    }\n    if (category === 'expected')\n      group.expected = attachment;\n    else if (category === 'actual')\n      group.actual = attachment;\n    else if (category === 'diff')\n      group.diff = attachment;\n    else if (category === 'previous')\n      group.previous = attachment;\n  }\n  return result;\n}\n"],
  "mappings": "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",
  "names": ["import_utils", "import_utilsBundle", "realColors", "milliseconds", "path"]
}
