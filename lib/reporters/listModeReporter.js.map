{
  "version": 3,
  "sources": ["../../src/reporters/listModeReporter.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\n\nimport { formatError, terminalScreen } from './base';\n\nimport type { FullConfig, TestError } from '../../types/testReporter';\nimport type { Suite } from '../common/test';\nimport type { TerminalScreen } from './base';\nimport type { ReporterV2 } from './reporterV2';\n\nclass ListModeReporter implements ReporterV2 {\n  private config!: FullConfig;\n  private screen: TerminalScreen;\n  private _options: { screen?: TerminalScreen, includeTestId?: boolean };\n\n  constructor(options: { screen?: TerminalScreen, includeTestId?: boolean } = {}) {\n    this._options = options;\n    this.screen = options?.screen ?? terminalScreen;\n  }\n\n  version(): 'v2' {\n    return 'v2';\n  }\n\n  onConfigure(config: FullConfig) {\n    this.config = config;\n  }\n\n  onBegin(suite: Suite): void {\n    this._writeLine(`Listing tests:`);\n    const tests = suite.allTests();\n    const files = new Set<string>();\n    for (const test of tests) {\n      // root, project, file, ...describes, test\n      const [, projectName, , ...titles] = test.titlePath();\n      const location = `${path.relative(this.config.rootDir, test.location.file)}:${test.location.line}:${test.location.column}`;\n      const testId = this._options.includeTestId ? `[id=${test.id}] ` : '';\n      const projectLabel = this._options.includeTestId ? `project=` : '';\n      const projectTitle = projectName ? `[${projectLabel}${projectName}] \u203A ` : '';\n      this._writeLine(`  ${testId}${projectTitle}${location} \u203A ${titles.join(' \u203A ')}`);\n      files.add(test.location.file);\n    }\n    this._writeLine(`Total: ${tests.length} ${tests.length === 1 ? 'test' : 'tests'} in ${files.size} ${files.size === 1 ? 'file' : 'files'}`);\n  }\n\n  onError(error: TestError) {\n    this.screen.stderr.write('\\n' + formatError(terminalScreen, error).message + '\\n');\n  }\n\n  private _writeLine(line: string) {\n    this.screen.stdout.write(line + '\\n');\n  }\n}\n\nexport default ListModeReporter;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,kBAAiB;AAEjB,kBAA4C;AAO5C,MAAM,iBAAuC;AAAA,EAK3C,YAAY,UAAgE,CAAC,GAAG;AAC9E,SAAK,WAAW;AAChB,SAAK,SAAS,SAAS,UAAU;AAAA,EACnC;AAAA,EAEA,UAAgB;AACd,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,QAAoB;AAC9B,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,QAAQ,OAAoB;AAC1B,SAAK,WAAW,gBAAgB;AAChC,UAAM,QAAQ,MAAM,SAAS;AAC7B,UAAM,QAAQ,oBAAI,IAAY;AAC9B,eAAW,QAAQ,OAAO;AAExB,YAAM,CAAC,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,KAAK,UAAU;AACpD,YAAM,WAAW,GAAG,YAAAA,QAAK,SAAS,KAAK,OAAO,SAAS,KAAK,SAAS,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,MAAM;AACxH,YAAM,SAAS,KAAK,SAAS,gBAAgB,OAAO,KAAK,EAAE,OAAO;AAClE,YAAM,eAAe,KAAK,SAAS,gBAAgB,aAAa;AAChE,YAAM,eAAe,cAAc,IAAI,YAAY,GAAG,WAAW,cAAS;AAC1E,WAAK,WAAW,KAAK,MAAM,GAAG,YAAY,GAAG,QAAQ,WAAM,OAAO,KAAK,UAAK,CAAC,EAAE;AAC/E,YAAM,IAAI,KAAK,SAAS,IAAI;AAAA,IAC9B;AACA,SAAK,WAAW,UAAU,MAAM,MAAM,IAAI,MAAM,WAAW,IAAI,SAAS,OAAO,OAAO,MAAM,IAAI,IAAI,MAAM,SAAS,IAAI,SAAS,OAAO,EAAE;AAAA,EAC3I;AAAA,EAEA,QAAQ,OAAkB;AACxB,SAAK,OAAO,OAAO,MAAM,WAAO,yBAAY,4BAAgB,KAAK,EAAE,UAAU,IAAI;AAAA,EACnF;AAAA,EAEQ,WAAW,MAAc;AAC/B,SAAK,OAAO,OAAO,MAAM,OAAO,IAAI;AAAA,EACtC;AACF;AAEA,IAAO,2BAAQ;",
  "names": ["path"]
}
