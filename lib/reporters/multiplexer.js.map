{
  "version": 3,
  "sources": ["../../src/reporters/multiplexer.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ReporterV2 } from './reporterV2';\nimport type { FullConfig, FullResult, TestCase, TestError, TestResult, TestStep } from '../../types/testReporter';\nimport type { Suite } from '../common/test';\n\nexport class Multiplexer implements ReporterV2 {\n  private _reporters: ReporterV2[];\n\n  constructor(reporters: ReporterV2[]) {\n    this._reporters = reporters;\n  }\n\n  version(): 'v2' {\n    return 'v2';\n  }\n\n  onConfigure(config: FullConfig) {\n    for (const reporter of this._reporters)\n      wrap(() => reporter.onConfigure?.(config));\n  }\n\n  onBegin(suite: Suite) {\n    for (const reporter of this._reporters)\n      wrap(() => reporter.onBegin?.(suite));\n  }\n\n  onTestBegin(test: TestCase, result: TestResult) {\n    for (const reporter of this._reporters)\n      wrap(() => reporter.onTestBegin?.(test, result));\n  }\n\n  onStdOut(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    for (const reporter of this._reporters)\n      wrap(() => reporter.onStdOut?.(chunk, test, result));\n  }\n\n  onStdErr(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    for (const reporter of this._reporters)\n      wrap(() => reporter.onStdErr?.(chunk, test, result));\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    for (const reporter of this._reporters)\n      wrap(() => reporter.onTestEnd?.(test, result));\n  }\n\n  async onEnd(result: FullResult) {\n    for (const reporter of this._reporters) {\n      const outResult = await wrapAsync(() => reporter.onEnd?.(result));\n      if (outResult?.status)\n        result.status = outResult.status;\n    }\n    return result;\n  }\n\n  async onExit() {\n    for (const reporter of this._reporters)\n      await wrapAsync(() => reporter.onExit?.());\n  }\n\n  onError(error: TestError) {\n    for (const reporter of this._reporters)\n      wrap(() => reporter.onError?.(error));\n  }\n\n  onStepBegin(test: TestCase, result: TestResult, step: TestStep) {\n    for (const reporter of this._reporters)\n      wrap(() => reporter.onStepBegin?.(test, result, step));\n  }\n\n  onStepEnd(test: TestCase, result: TestResult, step: TestStep) {\n    for (const reporter of this._reporters)\n      wrap(() => reporter.onStepEnd?.(test, result, step));\n  }\n\n  printsToStdio(): boolean {\n    return this._reporters.some(r => {\n      let prints = false;\n      wrap(() => prints = r.printsToStdio ? r.printsToStdio() : true);\n      return prints;\n    });\n  }\n}\n\nasync function wrapAsync<T>(callback: () => T | Promise<T>) {\n  try {\n    return await callback();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Error in reporter', e);\n  }\n}\n\nfunction wrap(callback: () => void) {\n  try {\n    callback();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Error in reporter', e);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBO,MAAM,YAAkC;AAAA,EAG7C,YAAY,WAAyB;AACnC,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,UAAgB;AACd,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,QAAoB;AAC9B,eAAW,YAAY,KAAK;AAC1B,WAAK,MAAM,SAAS,cAAc,MAAM,CAAC;AAAA,EAC7C;AAAA,EAEA,QAAQ,OAAc;AACpB,eAAW,YAAY,KAAK;AAC1B,WAAK,MAAM,SAAS,UAAU,KAAK,CAAC;AAAA,EACxC;AAAA,EAEA,YAAY,MAAgB,QAAoB;AAC9C,eAAW,YAAY,KAAK;AAC1B,WAAK,MAAM,SAAS,cAAc,MAAM,MAAM,CAAC;AAAA,EACnD;AAAA,EAEA,SAAS,OAAwB,MAAiB,QAAqB;AACrE,eAAW,YAAY,KAAK;AAC1B,WAAK,MAAM,SAAS,WAAW,OAAO,MAAM,MAAM,CAAC;AAAA,EACvD;AAAA,EAEA,SAAS,OAAwB,MAAiB,QAAqB;AACrE,eAAW,YAAY,KAAK;AAC1B,WAAK,MAAM,SAAS,WAAW,OAAO,MAAM,MAAM,CAAC;AAAA,EACvD;AAAA,EAEA,UAAU,MAAgB,QAAoB;AAC5C,eAAW,YAAY,KAAK;AAC1B,WAAK,MAAM,SAAS,YAAY,MAAM,MAAM,CAAC;AAAA,EACjD;AAAA,EAEA,MAAM,MAAM,QAAoB;AAC9B,eAAW,YAAY,KAAK,YAAY;AACtC,YAAM,YAAY,MAAM,UAAU,MAAM,SAAS,QAAQ,MAAM,CAAC;AAChE,UAAI,WAAW;AACb,eAAO,SAAS,UAAU;AAAA,IAC9B;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,SAAS;AACb,eAAW,YAAY,KAAK;AAC1B,YAAM,UAAU,MAAM,SAAS,SAAS,CAAC;AAAA,EAC7C;AAAA,EAEA,QAAQ,OAAkB;AACxB,eAAW,YAAY,KAAK;AAC1B,WAAK,MAAM,SAAS,UAAU,KAAK,CAAC;AAAA,EACxC;AAAA,EAEA,YAAY,MAAgB,QAAoB,MAAgB;AAC9D,eAAW,YAAY,KAAK;AAC1B,WAAK,MAAM,SAAS,cAAc,MAAM,QAAQ,IAAI,CAAC;AAAA,EACzD;AAAA,EAEA,UAAU,MAAgB,QAAoB,MAAgB;AAC5D,eAAW,YAAY,KAAK;AAC1B,WAAK,MAAM,SAAS,YAAY,MAAM,QAAQ,IAAI,CAAC;AAAA,EACvD;AAAA,EAEA,gBAAyB;AACvB,WAAO,KAAK,WAAW,KAAK,OAAK;AAC/B,UAAI,SAAS;AACb,WAAK,MAAM,SAAS,EAAE,gBAAgB,EAAE,cAAc,IAAI,IAAI;AAC9D,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;AAEA,eAAe,UAAa,UAAgC;AAC1D,MAAI;AACF,WAAO,MAAM,SAAS;AAAA,EACxB,SAAS,GAAG;AAEV,YAAQ,MAAM,qBAAqB,CAAC;AAAA,EACtC;AACF;AAEA,SAAS,KAAK,UAAsB;AAClC,MAAI;AACF,aAAS;AAAA,EACX,SAAS,GAAG;AAEV,YAAQ,MAAM,qBAAqB,CAAC;AAAA,EACtC;AACF;",
  "names": []
}
