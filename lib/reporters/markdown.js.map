{
  "version": 3,
  "sources": ["../../src/reporters/markdown.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport type { FullConfig, FullResult, Reporter, Suite, TestCase, TestError } from '@playwright/test/reporter';\n\ntype MarkdownReporterOptions = {\n  configDir: string, // TODO: make it public?\n  outputFile?: string;\n};\n\nclass MarkdownReporter implements Reporter {\n  private _options: MarkdownReporterOptions;\n  private _fatalErrors: TestError[] = [];\n  protected _config!: FullConfig;\n  private _suite!: Suite;\n\n  constructor(options: MarkdownReporterOptions) {\n    this._options = options;\n  }\n\n  printsToStdio() {\n    return false;\n  }\n\n  onBegin(config: FullConfig, suite: Suite) {\n    this._config = config;\n    this._suite = suite;\n  }\n\n  onError(error: TestError) {\n    this._fatalErrors.push(error);\n  }\n\n  async onEnd(result: FullResult) {\n    const summary = this._generateSummary();\n    const lines: string[] = [];\n    if (this._fatalErrors.length)\n      lines.push(`**${this._fatalErrors.length} fatal errors, not part of any test**`);\n    if (summary.unexpected.length) {\n      lines.push(`**${summary.unexpected.length} failed**`);\n      this._printTestList(':x:', summary.unexpected, lines);\n    }\n    if (summary.flaky.length) {\n      lines.push(`<details>`);\n      lines.push(`<summary><b>${summary.flaky.length} flaky</b></summary>`);\n      this._printTestList(':warning:', summary.flaky, lines, ' <br/>');\n      lines.push(`</details>`);\n      lines.push(``);\n    }\n    if (summary.interrupted.length) {\n      lines.push(`<details>`);\n      lines.push(`<summary><b>${summary.interrupted.length} interrupted</b></summary>`);\n      this._printTestList(':warning:', summary.interrupted, lines, ' <br/>');\n      lines.push(`</details>`);\n      lines.push(``);\n    }\n    const skipped = summary.skipped ? `, ${summary.skipped} skipped` : '';\n    const didNotRun = summary.didNotRun ? `, ${summary.didNotRun} did not run` : '';\n    lines.push(`**${summary.expected} passed${skipped}${didNotRun}**`);\n    lines.push(``);\n\n    await this.publishReport(lines.join('\\n'));\n  }\n\n  protected async publishReport(report: string): Promise<void> {\n    const maybeRelativeFile = this._options.outputFile || 'report.md';\n    const reportFile = path.resolve(this._options.configDir, maybeRelativeFile);\n    await fs.promises.mkdir(path.dirname(reportFile), { recursive: true });\n    await fs.promises.writeFile(reportFile, report);\n  }\n\n  protected _generateSummary() {\n    let didNotRun = 0;\n    let skipped = 0;\n    let expected = 0;\n    const interrupted: TestCase[] = [];\n    const interruptedToPrint: TestCase[] = [];\n    const unexpected: TestCase[] = [];\n    const flaky: TestCase[] = [];\n\n    this._suite.allTests().forEach(test => {\n      switch (test.outcome()) {\n        case 'skipped': {\n          if (test.results.some(result => result.status === 'interrupted')) {\n            if (test.results.some(result => !!result.error))\n              interruptedToPrint.push(test);\n            interrupted.push(test);\n          } else if (!test.results.length || test.expectedStatus !== 'skipped') {\n            ++didNotRun;\n          } else {\n            ++skipped;\n          }\n          break;\n        }\n        case 'expected': ++expected; break;\n        case 'unexpected': unexpected.push(test); break;\n        case 'flaky': flaky.push(test); break;\n      }\n    });\n\n    return {\n      didNotRun,\n      skipped,\n      expected,\n      interrupted,\n      unexpected,\n      flaky,\n    };\n  }\n\n  private _printTestList(prefix: string, tests: TestCase[], lines: string[], suffix?: string) {\n    for (const test of tests)\n      lines.push(`${prefix} ${formatTestTitle(this._config.rootDir, test)}${suffix || ''}`);\n    lines.push(``);\n  }\n}\n\nfunction formatTestTitle(rootDir: string, test: TestCase): string {\n  // root, project, file, ...describes, test\n  const [, projectName, , ...titles] = test.titlePath();\n  const relativeTestPath = path.relative(rootDir, test.location.file);\n  // intentionally leave out column to prevent writing test.spec.ts:100:5 - GitHub turns that into \uD83D\uDCAF\n  const location = `${relativeTestPath}:${test.location.line}`;\n  const projectTitle = projectName ? `[${projectName}] \u203A ` : '';\n  const testTitle = `${projectTitle}${location} \u203A ${titles.join(' \u203A ')}`;\n  const extraTags = test.tags.filter(t => !testTitle.includes(t));\n  const formattedTags = extraTags.map(t => `\\`${t}\\``).join(' ');\n  return `${testTitle}${extraTags.length ? ' ' + formattedTags : ''}`;\n}\n\nexport default MarkdownReporter;\n"],
  "mappings": "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",
  "names": ["path", "fs"]
}
