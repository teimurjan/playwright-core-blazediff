{
  "version": 3,
  "sources": ["../../src/reporters/json.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { toPosixPath, MultiMap } from 'playwright-core/lib/utils';\n\nimport { formatError, nonTerminalScreen, prepareErrorStack, resolveOutputFile, CommonReporterOptions } from './base';\nimport { getProjectId } from '../common/config';\n\nimport type { ReporterV2 } from './reporterV2';\nimport type { JsonReporterOptions } from '../../types/test';\nimport type { FullConfig, FullResult, JSONReport, JSONReportError, JSONReportSpec, JSONReportSuite, JSONReportTest, JSONReportTestResult, JSONReportTestStep, Location, Suite, TestCase, TestError, TestResult, TestStep } from '../../types/testReporter';\n\nclass JSONReporter implements ReporterV2 {\n  config!: FullConfig;\n  suite!: Suite;\n  private _errors: TestError[] = [];\n  private _resolvedOutputFile: string | undefined;\n\n  constructor(options: JsonReporterOptions & CommonReporterOptions) {\n    this._resolvedOutputFile = resolveOutputFile('JSON', options)?.outputFile;\n  }\n\n  version(): 'v2' {\n    return 'v2';\n  }\n\n  printsToStdio() {\n    return !this._resolvedOutputFile;\n  }\n\n  onConfigure(config: FullConfig) {\n    this.config = config;\n  }\n\n  onBegin(suite: Suite) {\n    this.suite = suite;\n  }\n\n  onError(error: TestError): void {\n    this._errors.push(error);\n  }\n\n  async onEnd(result: FullResult) {\n    await outputReport(this._serializeReport(result), this._resolvedOutputFile);\n  }\n\n  private _serializeReport(result: FullResult): JSONReport {\n    const report: JSONReport = {\n      config: {\n        ...removePrivateFields(this.config),\n        rootDir: toPosixPath(this.config.rootDir),\n        projects: this.config.projects.map(project => {\n          return {\n            outputDir: toPosixPath(project.outputDir),\n            repeatEach: project.repeatEach,\n            retries: project.retries,\n            metadata: project.metadata,\n            id: getProjectId(project),\n            name: project.name,\n            testDir: toPosixPath(project.testDir),\n            testIgnore: serializePatterns(project.testIgnore),\n            testMatch: serializePatterns(project.testMatch),\n            timeout: project.timeout,\n          };\n        })\n      },\n      suites: this._mergeSuites(this.suite.suites),\n      errors: this._errors,\n      stats: {\n        startTime: result.startTime.toISOString(),\n        duration: result.duration,\n        expected: 0,\n        skipped: 0,\n        unexpected: 0,\n        flaky: 0,\n      },\n    };\n    for (const test of this.suite.allTests())\n      ++report.stats[test.outcome()];\n    return report;\n  }\n\n  private _mergeSuites(suites: Suite[]): JSONReportSuite[] {\n    const fileSuites = new MultiMap<string, JSONReportSuite>();\n    for (const projectSuite of suites) {\n      const projectId = getProjectId(projectSuite.project()!);\n      const projectName = projectSuite.project()!.name;\n      for (const fileSuite of projectSuite.suites) {\n        const file = fileSuite.location!.file;\n        const serialized = this._serializeSuite(projectId, projectName, fileSuite);\n        if (serialized)\n          fileSuites.set(file, serialized);\n      }\n    }\n\n    const results: JSONReportSuite[] = [];\n    for (const [, suites] of fileSuites) {\n      const result: JSONReportSuite = {\n        title: suites[0].title,\n        file: suites[0].file,\n        column: 0,\n        line: 0,\n        specs: [],\n      };\n      for (const suite of suites)\n        this._mergeTestsFromSuite(result, suite);\n      results.push(result);\n    }\n    return results;\n  }\n\n  private _relativeLocation(location: Location | undefined): Location {\n    if (!location)\n      return { file: '', line: 0, column: 0 };\n    return {\n      file: toPosixPath(path.relative(this.config.rootDir, location.file)),\n      line: location.line,\n      column: location.column,\n    };\n  }\n\n  private _locationMatches(s1: JSONReportSuite | JSONReportSpec, s2: JSONReportSuite | JSONReportSpec) {\n    return s1.file === s2.file && s1.line === s2.line && s1.column === s2.column;\n  }\n\n  private _mergeTestsFromSuite(to: JSONReportSuite, from: JSONReportSuite) {\n    for (const fromSuite of from.suites || []) {\n      const toSuite = (to.suites || []).find(s => s.title === fromSuite.title && this._locationMatches(s, fromSuite));\n      if (toSuite) {\n        this._mergeTestsFromSuite(toSuite, fromSuite);\n      } else {\n        if (!to.suites)\n          to.suites = [];\n        to.suites.push(fromSuite);\n      }\n    }\n\n    for (const spec of from.specs || []) {\n      const toSpec = to.specs.find(s => s.title === spec.title && s.file === toPosixPath(path.relative(this.config.rootDir, spec.file)) && s.line === spec.line && s.column === spec.column);\n      if (toSpec)\n        toSpec.tests.push(...spec.tests);\n      else\n        to.specs.push(spec);\n    }\n  }\n\n  private _serializeSuite(projectId: string, projectName: string, suite: Suite): null | JSONReportSuite {\n    if (!suite.allTests().length)\n      return null;\n    const suites = suite.suites.map(suite => this._serializeSuite(projectId, projectName, suite)).filter(s => s) as JSONReportSuite[];\n    return {\n      title: suite.title,\n      ...this._relativeLocation(suite.location),\n      specs: suite.tests.map(test => this._serializeTestSpec(projectId, projectName, test)),\n      suites: suites.length ? suites : undefined,\n    };\n  }\n\n  private _serializeTestSpec(projectId: string, projectName: string, test: TestCase): JSONReportSpec {\n    return {\n      title: test.title,\n      ok: test.ok(),\n      tags: test.tags.map(tag => tag.substring(1)),  // Strip '@'.\n      tests: [this._serializeTest(projectId, projectName, test)],\n      id: test.id,\n      ...this._relativeLocation(test.location),\n    };\n  }\n\n  private _serializeTest(projectId: string, projectName: string, test: TestCase): JSONReportTest {\n    return {\n      timeout: test.timeout,\n      annotations: test.annotations,\n      expectedStatus: test.expectedStatus,\n      projectId,\n      projectName,\n      results: test.results.map(r => this._serializeTestResult(r, test)),\n      status: test.outcome(),\n    };\n  }\n\n  private _serializeTestResult(result: TestResult, test: TestCase): JSONReportTestResult {\n    const steps = result.steps.filter(s => s.category === 'test.step');\n    const jsonResult: JSONReportTestResult = {\n      workerIndex: result.workerIndex,\n      parallelIndex: result.parallelIndex,\n      status: result.status,\n      duration: result.duration,\n      error: result.error,\n      errors: result.errors.map(e => this._serializeError(e)),\n      stdout: result.stdout.map(s => stdioEntry(s)),\n      stderr: result.stderr.map(s => stdioEntry(s)),\n      retry: result.retry,\n      steps: steps.length ? steps.map(s => this._serializeTestStep(s)) : undefined,\n      startTime: result.startTime.toISOString(),\n      annotations: result.annotations,\n      attachments: result.attachments.map(a => ({\n        name: a.name,\n        contentType: a.contentType,\n        path: a.path,\n        body: a.body?.toString('base64')\n      })),\n    };\n    if (result.error?.stack)\n      jsonResult.errorLocation = prepareErrorStack(result.error.stack).location;\n    return jsonResult;\n  }\n\n  private _serializeError(error: TestError): JSONReportError {\n    return formatError(nonTerminalScreen, error);\n  }\n\n  private _serializeTestStep(step: TestStep): JSONReportTestStep {\n    const steps = step.steps.filter(s => s.category === 'test.step');\n    return {\n      title: step.title,\n      duration: step.duration,\n      error: step.error,\n      steps: steps.length ? steps.map(s => this._serializeTestStep(s)) : undefined,\n    };\n  }\n}\n\nasync function outputReport(report: JSONReport, resolvedOutputFile: string | undefined) {\n  const reportString = JSON.stringify(report, undefined, 2);\n  if (resolvedOutputFile) {\n    await fs.promises.mkdir(path.dirname(resolvedOutputFile), { recursive: true });\n    await fs.promises.writeFile(resolvedOutputFile, reportString);\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(reportString);\n  }\n}\n\nfunction stdioEntry(s: string | Buffer): any {\n  if (typeof s === 'string')\n    return { text: s };\n  return { buffer: s.toString('base64') };\n}\n\nfunction removePrivateFields(config: FullConfig): FullConfig {\n  return Object.fromEntries(Object.entries(config).filter(([name, value]) => !name.startsWith('_'))) as FullConfig;\n}\n\nexport function serializePatterns(patterns: string | RegExp | (string | RegExp)[]): string[] {\n  if (!Array.isArray(patterns))\n    patterns = [patterns];\n  return patterns.map(s => s.toString());\n}\n\nexport default JSONReporter;\n"],
  "mappings": "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",
  "names": ["suites", "path", "suite", "fs"]
}
