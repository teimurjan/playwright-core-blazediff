{
  "version": 3,
  "sources": ["../../src/reporters/dot.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TerminalReporter } from './base';\n\nimport type { FullResult, Suite, TestCase, TestError, TestResult } from '../../types/testReporter';\n\nclass DotReporter extends TerminalReporter {\n  private _counter = 0;\n\n  override onBegin(suite: Suite) {\n    super.onBegin(suite);\n    this.writeLine(this.generateStartingMessage());\n  }\n\n  override onStdOut(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    super.onStdOut(chunk, test, result);\n    if (!this.config.quiet)\n      this.screen.stdout.write(chunk);\n  }\n\n  override onStdErr(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    super.onStdErr(chunk, test, result);\n    if (!this.config.quiet)\n      this.screen.stderr.write(chunk);\n  }\n\n  override onTestEnd(test: TestCase, result: TestResult) {\n    super.onTestEnd(test, result);\n    if (this._counter === 80) {\n      this.screen.stdout.write('\\n');\n      this._counter = 0;\n    }\n    ++this._counter;\n    if (result.status === 'skipped') {\n      this.screen.stdout.write(this.screen.colors.yellow('\u00B0'));\n      return;\n    }\n    if (this.willRetry(test)) {\n      this.screen.stdout.write(this.screen.colors.gray('\u00D7'));\n      return;\n    }\n    switch (test.outcome()) {\n      case 'expected': this.screen.stdout.write(this.screen.colors.green('\u00B7')); break;\n      case 'unexpected': this.screen.stdout.write(this.screen.colors.red(result.status === 'timedOut' ? 'T' : 'F')); break;\n      case 'flaky': this.screen.stdout.write(this.screen.colors.yellow('\u00B1')); break;\n    }\n  }\n\n  override onError(error: TestError): void {\n    super.onError(error);\n    this.writeLine('\\n' + this.formatError(error).message);\n    this._counter = 0;\n  }\n\n  override async onEnd(result: FullResult) {\n    await super.onEnd(result);\n    this.screen.stdout.write('\\n');\n    this.epilogue(true);\n  }\n}\n\nexport default DotReporter;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,kBAAiC;AAIjC,MAAM,oBAAoB,6BAAiB;AAAA,EAA3C;AAAA;AACE,SAAQ,WAAW;AAAA;AAAA,EAEV,QAAQ,OAAc;AAC7B,UAAM,QAAQ,KAAK;AACnB,SAAK,UAAU,KAAK,wBAAwB,CAAC;AAAA,EAC/C;AAAA,EAES,SAAS,OAAwB,MAAiB,QAAqB;AAC9E,UAAM,SAAS,OAAO,MAAM,MAAM;AAClC,QAAI,CAAC,KAAK,OAAO;AACf,WAAK,OAAO,OAAO,MAAM,KAAK;AAAA,EAClC;AAAA,EAES,SAAS,OAAwB,MAAiB,QAAqB;AAC9E,UAAM,SAAS,OAAO,MAAM,MAAM;AAClC,QAAI,CAAC,KAAK,OAAO;AACf,WAAK,OAAO,OAAO,MAAM,KAAK;AAAA,EAClC;AAAA,EAES,UAAU,MAAgB,QAAoB;AACrD,UAAM,UAAU,MAAM,MAAM;AAC5B,QAAI,KAAK,aAAa,IAAI;AACxB,WAAK,OAAO,OAAO,MAAM,IAAI;AAC7B,WAAK,WAAW;AAAA,IAClB;AACA,MAAE,KAAK;AACP,QAAI,OAAO,WAAW,WAAW;AAC/B,WAAK,OAAO,OAAO,MAAM,KAAK,OAAO,OAAO,OAAO,MAAG,CAAC;AACvD;AAAA,IACF;AACA,QAAI,KAAK,UAAU,IAAI,GAAG;AACxB,WAAK,OAAO,OAAO,MAAM,KAAK,OAAO,OAAO,KAAK,MAAG,CAAC;AACrD;AAAA,IACF;AACA,YAAQ,KAAK,QAAQ,GAAG;AAAA,MACtB,KAAK;AAAY,aAAK,OAAO,OAAO,MAAM,KAAK,OAAO,OAAO,MAAM,MAAG,CAAC;AAAG;AAAA,MAC1E,KAAK;AAAc,aAAK,OAAO,OAAO,MAAM,KAAK,OAAO,OAAO,IAAI,OAAO,WAAW,aAAa,MAAM,GAAG,CAAC;AAAG;AAAA,MAC/G,KAAK;AAAS,aAAK,OAAO,OAAO,MAAM,KAAK,OAAO,OAAO,OAAO,MAAG,CAAC;AAAG;AAAA,IAC1E;AAAA,EACF;AAAA,EAES,QAAQ,OAAwB;AACvC,UAAM,QAAQ,KAAK;AACnB,SAAK,UAAU,OAAO,KAAK,YAAY,KAAK,EAAE,OAAO;AACrD,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,MAAe,MAAM,QAAoB;AACvC,UAAM,MAAM,MAAM,MAAM;AACxB,SAAK,OAAO,OAAO,MAAM,IAAI;AAC7B,SAAK,SAAS,IAAI;AAAA,EACpB;AACF;AAEA,IAAO,cAAQ;",
  "names": []
}
