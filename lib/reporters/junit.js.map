{
  "version": 3,
  "sources": ["../../src/reporters/junit.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { getAsBooleanFromENV } from 'playwright-core/lib/utils';\n\nimport { CommonReporterOptions, formatFailure, nonTerminalScreen, resolveOutputFile } from './base';\nimport { stripAnsiEscapes } from '../util';\n\nimport type { ReporterV2 } from './reporterV2';\nimport type { JUnitReporterOptions } from '../../types/test';\nimport type { FullConfig, FullResult, Suite, TestCase } from '../../types/testReporter';\n\nclass JUnitReporter implements ReporterV2 {\n  private config!: FullConfig;\n  private configDir: string;\n  private suite!: Suite;\n  private timestamp!: Date;\n  private totalTests = 0;\n  private totalFailures = 0;\n  private totalSkipped = 0;\n  private resolvedOutputFile: string | undefined;\n  private stripANSIControlSequences = false;\n  private includeProjectInTestName = false;\n\n  constructor(options: JUnitReporterOptions & CommonReporterOptions) {\n    this.stripANSIControlSequences = getAsBooleanFromENV('PLAYWRIGHT_JUNIT_STRIP_ANSI', !!options.stripANSIControlSequences);\n    this.includeProjectInTestName = getAsBooleanFromENV('PLAYWRIGHT_JUNIT_INCLUDE_PROJECT_IN_TEST_NAME', !!options.includeProjectInTestName);\n    this.configDir = options.configDir;\n    this.resolvedOutputFile = resolveOutputFile('JUNIT', options)?.outputFile;\n  }\n\n  version(): 'v2' {\n    return 'v2';\n  }\n\n  printsToStdio() {\n    return !this.resolvedOutputFile;\n  }\n\n  onConfigure(config: FullConfig) {\n    this.config = config;\n  }\n\n  onBegin(suite: Suite) {\n    this.suite = suite;\n    this.timestamp = new Date();\n  }\n\n  async onEnd(result: FullResult) {\n    const children: XMLEntry[] = [];\n    for (const projectSuite of this.suite.suites) {\n      for (const fileSuite of projectSuite.suites)\n        children.push(await this._buildTestSuite(projectSuite.title, fileSuite));\n    }\n    const tokens: string[] = [];\n\n    const self = this;\n    const root: XMLEntry = {\n      name: 'testsuites',\n      attributes: {\n        id: process.env[`PLAYWRIGHT_JUNIT_SUITE_ID`] || '',\n        name: process.env[`PLAYWRIGHT_JUNIT_SUITE_NAME`] || '',\n        tests: self.totalTests,\n        failures: self.totalFailures,\n        skipped: self.totalSkipped,\n        errors: 0,\n        time: result.duration / 1000\n      },\n      children\n    };\n\n    serializeXML(root, tokens, this.stripANSIControlSequences);\n    const reportString = tokens.join('\\n');\n    if (this.resolvedOutputFile) {\n      await fs.promises.mkdir(path.dirname(this.resolvedOutputFile), { recursive: true });\n      await fs.promises.writeFile(this.resolvedOutputFile, reportString);\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(reportString);\n    }\n  }\n\n  private async _buildTestSuite(projectName: string, suite: Suite): Promise<XMLEntry> {\n    let tests = 0;\n    let skipped = 0;\n    let failures = 0;\n    let duration = 0;\n    const children: XMLEntry[] = [];\n    const testCaseNamePrefix = projectName && this.includeProjectInTestName ? `[${projectName}] ` : '';\n\n    for (const test of suite.allTests()){\n      ++tests;\n      if (test.outcome() === 'skipped')\n        ++skipped;\n      if (!test.ok())\n        ++failures;\n      for (const result of test.results)\n        duration += result.duration;\n      await this._addTestCase(suite.title, testCaseNamePrefix, test, children);\n    }\n\n    this.totalTests += tests;\n    this.totalSkipped += skipped;\n    this.totalFailures += failures;\n\n    const entry: XMLEntry = {\n      name: 'testsuite',\n      attributes: {\n        name: suite.title,\n        timestamp: this.timestamp.toISOString(),\n        hostname: projectName,\n        tests,\n        failures,\n        skipped,\n        time: duration / 1000,\n        errors: 0,\n      },\n      children\n    };\n\n    return entry;\n  }\n\n  private async _addTestCase(suiteName: string, namePrefix: string, test: TestCase, entries: XMLEntry[]) {\n    const entry = {\n      name: 'testcase',\n      attributes: {\n        // Skip root, project, file\n        name: namePrefix + test.titlePath().slice(3).join(' \u203A '),\n        // filename\n        classname: suiteName,\n        time: (test.results.reduce((acc, value) => acc + value.duration, 0)) / 1000\n\n      },\n      children: [] as XMLEntry[]\n    };\n    entries.push(entry);\n\n    // Xray Test Management supports testcase level properties, where additional metadata may be provided\n    // some annotations are encoded as value attributes, other as cdata content; this implementation supports\n    // Xray JUnit extensions but it also agnostic, so other tools can also take advantage of this format\n    const properties: XMLEntry = {\n      name: 'properties',\n      children: [] as XMLEntry[]\n    };\n\n    for (const annotation of test.annotations) {\n      const property: XMLEntry = {\n        name: 'property',\n        attributes: {\n          name: annotation.type,\n          value: (annotation?.description ? annotation.description : '')\n        }\n      };\n      properties.children?.push(property);\n    }\n\n    if (properties.children?.length)\n      entry.children.push(properties);\n\n    if (test.outcome() === 'skipped') {\n      entry.children.push({ name: 'skipped' });\n      return;\n    }\n\n    if (!test.ok()) {\n      entry.children.push({\n        name: 'failure',\n        attributes: {\n          message: `${path.basename(test.location.file)}:${test.location.line}:${test.location.column} ${test.title}`,\n          type: 'FAILURE',\n        },\n        text: stripAnsiEscapes(formatFailure(nonTerminalScreen, this.config, test))\n      });\n    }\n\n    const systemOut: string[] = [];\n    const systemErr: string[] = [];\n    for (const result of test.results) {\n      systemOut.push(...result.stdout.map(item => item.toString()));\n      systemErr.push(...result.stderr.map(item => item.toString()));\n      for (const attachment of result.attachments) {\n        if (!attachment.path)\n          continue;\n\n        let attachmentPath = path.relative(this.configDir, attachment.path);\n        try {\n          if (this.resolvedOutputFile)\n            attachmentPath = path.relative(path.dirname(this.resolvedOutputFile), attachment.path);\n        } catch {\n          systemOut.push(`\\nWarning: Unable to make attachment path ${attachment.path} relative to report output file ${this.resolvedOutputFile}`);\n        }\n\n        try {\n          await fs.promises.access(attachment.path);\n          systemOut.push(`\\n[[ATTACHMENT|${attachmentPath}]]\\n`);\n        } catch {\n          systemErr.push(`\\nWarning: attachment ${attachmentPath} is missing`);\n        }\n      }\n    }\n    // Note: it is important to only produce a single system-out/system-err entry\n    // so that parsers in the wild understand it.\n    if (systemOut.length)\n      entry.children.push({ name: 'system-out', text: systemOut.join('') });\n    if (systemErr.length)\n      entry.children.push({ name: 'system-err', text: systemErr.join('') });\n  }\n}\n\ntype XMLEntry = {\n  name: string;\n  attributes?: { [name: string]: string | number | boolean };\n  children?: XMLEntry[];\n  text?: string;\n};\n\nfunction serializeXML(entry: XMLEntry, tokens: string[], stripANSIControlSequences: boolean) {\n  const attrs: string[] = [];\n  for (const [name, value] of Object.entries(entry.attributes || {}))\n    attrs.push(`${name}=\"${escape(String(value), stripANSIControlSequences, false)}\"`);\n  tokens.push(`<${entry.name}${attrs.length ? ' ' : ''}${attrs.join(' ')}>`);\n  for (const child of entry.children || [])\n    serializeXML(child, tokens, stripANSIControlSequences);\n  if (entry.text)\n    tokens.push(escape(entry.text, stripANSIControlSequences, true));\n  tokens.push(`</${entry.name}>`);\n}\n\n// See https://en.wikipedia.org/wiki/Valid_characters_in_XML\nconst discouragedXMLCharacters = /[\\u0000-\\u0008\\u000b-\\u000c\\u000e-\\u001f\\u007f-\\u0084\\u0086-\\u009f]/g;\n\nfunction escape(text: string, stripANSIControlSequences: boolean, isCharacterData: boolean): string {\n  if (stripANSIControlSequences)\n    text = stripAnsiEscapes(text);\n\n  if (isCharacterData) {\n    text = '<![CDATA[' + text.replace(/]]>/g, ']]&gt;') + ']]>';\n  } else {\n    const escapeRe = /[&\"'<>]/g;\n    text = text.replace(escapeRe, c => ({ '&': '&amp;', '\"': '&quot;', \"'\": '&apos;', '<': '&lt;', '>': '&gt;' }[c]!));\n  }\n\n  text = text.replace(discouragedXMLCharacters, '');\n  return text;\n}\n\nexport default JUnitReporter;\n"],
  "mappings": "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",
  "names": ["fs", "path"]
}
