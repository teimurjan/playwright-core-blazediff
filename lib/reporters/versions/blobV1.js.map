{
  "version": 3,
  "sources": ["../../../src/reporters/versions/blobV1.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Metadata } from '../../../types/test';\nimport type * as reporterTypes from '../../../types/testReporter';\n\nexport type JsonLocation = reporterTypes.Location;\nexport type JsonError = string;\nexport type JsonStackFrame = { file: string, line: number, column: number };\n\nexport type JsonStdIOType = 'stdout' | 'stderr';\n\nexport type JsonConfig = Pick<reporterTypes.FullConfig, 'configFile' | 'globalTimeout' | 'maxFailures' | 'metadata' | 'rootDir' | 'version' | 'workers'>;\n\nexport type JsonPattern = {\n  s?: string;\n  r?: { source: string, flags: string };\n};\n\nexport type JsonProject = {\n  grep: JsonPattern[];\n  grepInvert: JsonPattern[];\n  metadata: Metadata;\n  name: string;\n  dependencies: string[];\n  // This is relative to root dir.\n  snapshotDir: string;\n  // This is relative to root dir.\n  outputDir: string;\n  repeatEach: number;\n  retries: number;\n  suites: JsonSuite[];\n  teardown?: string;\n  // This is relative to root dir.\n  testDir: string;\n  testIgnore: JsonPattern[];\n  testMatch: JsonPattern[];\n  timeout: number;\n};\n\nexport type JsonSuite = {\n  title: string;\n  location?: JsonLocation;\n  suites: JsonSuite[];\n  tests: JsonTestCase[];\n};\n\nexport type JsonTestCase = {\n  testId: string;\n  title: string;\n  location: JsonLocation;\n  retries: number;\n  tags?: string[];\n  repeatEachIndex: number;\n};\n\nexport type JsonTestEnd = {\n  testId: string;\n  expectedStatus: reporterTypes.TestStatus;\n  timeout: number;\n  annotations: { type: string, description?: string }[];\n};\n\nexport type JsonTestResultStart = {\n  id: string;\n  retry: number;\n  workerIndex: number;\n  parallelIndex: number;\n  startTime: number;\n};\n\nexport type JsonAttachment = Omit<reporterTypes.TestResult['attachments'][0], 'body'> & { base64?: string };\n\nexport type JsonTestResultEnd = {\n  id: string;\n  duration: number;\n  status: reporterTypes.TestStatus;\n  errors: reporterTypes.TestError[];\n  attachments: JsonAttachment[];\n};\n\nexport type JsonTestStepStart = {\n  id: string;\n  parentStepId?: string;\n  title: string;\n  category: string,\n  startTime: number;\n  location?: reporterTypes.Location;\n};\n\nexport type JsonTestStepEnd = {\n  id: string;\n  duration: number;\n  error?: reporterTypes.TestError;\n};\n\nexport type JsonFullResult = {\n  status: reporterTypes.FullResult['status'];\n  startTime: number;\n  duration: number;\n};\n\nexport type JsonEvent = {\n  method: string;\n  params: any\n};\n\nexport type BlobReportMetadata = {\n  version: number;\n  userAgent: string;\n  name?: string;\n  shard?: { total: number, current: number };\n  pathSeparator?: string;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
