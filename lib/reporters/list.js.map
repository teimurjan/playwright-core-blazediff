{
  "version": 3,
  "sources": ["../../src/reporters/list.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getAsBooleanFromENV } from 'playwright-core/lib/utils';\nimport { ms as milliseconds } from 'playwright-core/lib/utilsBundle';\n\nimport { TerminalReporter, stepSuffix } from './base';\nimport { stripAnsiEscapes } from '../util';\n\nimport type { ListReporterOptions } from '../../types/test';\nimport type { FullResult, Suite, TestCase, TestError, TestResult, TestStep } from '../../types/testReporter';\nimport type { CommonReporterOptions, TerminalReporterOptions } from './base';\n\n// Allow it in the Visual Studio Code Terminal and the new Windows Terminal\nconst DOES_NOT_SUPPORT_UTF8_IN_TERMINAL = process.platform === 'win32' && process.env.TERM_PROGRAM !== 'vscode' && !process.env.WT_SESSION;\nconst POSITIVE_STATUS_MARK = DOES_NOT_SUPPORT_UTF8_IN_TERMINAL ? 'ok' : '\u2713';\nconst NEGATIVE_STATUS_MARK = DOES_NOT_SUPPORT_UTF8_IN_TERMINAL ? 'x' : '\u2718';\n\nclass ListReporter extends TerminalReporter {\n  private _lastRow = 0;\n  private _lastColumn = 0;\n  private _testRows = new Map<TestCase, number>();\n  private _stepRows = new Map<TestStep, number>();\n  private _resultIndex = new Map<TestResult, string>();\n  private _stepIndex = new Map<TestStep, string>();\n  private _needNewLine = false;\n  private _printSteps: boolean;\n\n  constructor(options?: ListReporterOptions & CommonReporterOptions & TerminalReporterOptions) {\n    super(options);\n    this._printSteps = getAsBooleanFromENV('PLAYWRIGHT_LIST_PRINT_STEPS', options?.printSteps);\n  }\n\n  override onBegin(suite: Suite) {\n    super.onBegin(suite);\n    const startingMessage = this.generateStartingMessage();\n    if (startingMessage) {\n      this.writeLine(startingMessage);\n      this.writeLine('');\n    }\n  }\n\n  onTestBegin(test: TestCase, result: TestResult) {\n    const index = String(this._resultIndex.size + 1);\n    this._resultIndex.set(result, index);\n\n    if (!this.screen.isTTY)\n      return;\n    this._maybeWriteNewLine();\n    this._testRows.set(test, this._lastRow);\n    const prefix = this._testPrefix(index, '');\n    const line = this.screen.colors.dim(this.formatTestTitle(test)) + this._retrySuffix(result);\n    this._appendLine(line, prefix);\n  }\n\n  override onStdOut(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    super.onStdOut(chunk, test, result);\n    this._dumpToStdio(test, chunk, this.screen.stdout);\n  }\n\n  override onStdErr(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    super.onStdErr(chunk, test, result);\n    this._dumpToStdio(test, chunk, this.screen.stderr);\n  }\n\n  private getStepIndex(testIndex: string, result: TestResult, step: TestStep): string {\n    if (this._stepIndex.has(step))\n      return this._stepIndex.get(step)!;\n\n    const ordinal = ((result as any)[lastStepOrdinalSymbol] || 0) + 1;\n    (result as any)[lastStepOrdinalSymbol] = ordinal;\n    const stepIndex = `${testIndex}.${ordinal}`;\n    this._stepIndex.set(step, stepIndex);\n    return stepIndex;\n  }\n\n  onStepBegin(test: TestCase, result: TestResult, step: TestStep) {\n    if (step.category !== 'test.step')\n      return;\n    const testIndex = this._resultIndex.get(result) || '';\n\n    if (!this.screen.isTTY)\n      return;\n\n    if (this._printSteps) {\n      this._maybeWriteNewLine();\n      this._stepRows.set(step, this._lastRow);\n      const prefix = this._testPrefix(this.getStepIndex(testIndex, result, step), '');\n      const line = test.title + this.screen.colors.dim(stepSuffix(step));\n      this._appendLine(line, prefix);\n    } else {\n      this._updateOrAppendLine(this._testRows, test, this.screen.colors.dim(this.formatTestTitle(test, step)) + this._retrySuffix(result), this._testPrefix(testIndex, ''));\n    }\n  }\n\n  onStepEnd(test: TestCase, result: TestResult, step: TestStep) {\n    if (step.category !== 'test.step')\n      return;\n\n    const testIndex = this._resultIndex.get(result) || '';\n    if (!this._printSteps) {\n      if (this.screen.isTTY)\n        this._updateOrAppendLine(this._testRows, test, this.screen.colors.dim(this.formatTestTitle(test, step.parent)) + this._retrySuffix(result), this._testPrefix(testIndex, ''));\n      return;\n    }\n\n    const index = this.getStepIndex(testIndex, result, step);\n    const title = this.screen.isTTY ? test.title + this.screen.colors.dim(stepSuffix(step)) : this.formatTestTitle(test, step);\n    const prefix = this._testPrefix(index, '');\n    let text = '';\n    if (step.error)\n      text = this.screen.colors.red(title);\n    else\n      text = title;\n    text += this.screen.colors.dim(` (${milliseconds(step.duration)})`);\n\n    this._updateOrAppendLine(this._stepRows, step, text, prefix);\n  }\n\n  private _maybeWriteNewLine() {\n    if (this._needNewLine) {\n      this._needNewLine = false;\n      this.screen.stdout.write('\\n');\n      ++this._lastRow;\n      this._lastColumn = 0;\n    }\n  }\n\n  private _updateLineCountAndNewLineFlagForOutput(text: string) {\n    this._needNewLine = text[text.length - 1] !== '\\n';\n    if (!this.screen.ttyWidth)\n      return;\n    for (const ch of text) {\n      if (ch === '\\n') {\n        this._lastColumn = 0;\n        ++this._lastRow;\n        continue;\n      }\n      ++this._lastColumn;\n      if (this._lastColumn > this.screen.ttyWidth) {\n        this._lastColumn = 0;\n        ++this._lastRow;\n      }\n    }\n  }\n\n  private _dumpToStdio(test: TestCase | undefined, chunk: string | Buffer, stream: NodeJS.WriteStream) {\n    if (this.config.quiet)\n      return;\n    const text = chunk.toString('utf-8');\n    this._updateLineCountAndNewLineFlagForOutput(text);\n    stream.write(chunk);\n  }\n\n  override onTestEnd(test: TestCase, result: TestResult) {\n    super.onTestEnd(test, result);\n\n    const title = this.formatTestTitle(test);\n    let prefix = '';\n    let text = '';\n\n    // In TTY mode test index is incremented in onTestStart\n    // and in non-TTY mode it is incremented onTestEnd.\n    let index = this._resultIndex.get(result);\n    if (!index) {\n      index = String(this._resultIndex.size + 1);\n      this._resultIndex.set(result, index);\n    }\n\n    if (result.status === 'skipped') {\n      prefix = this._testPrefix(index, this.screen.colors.green('-'));\n      // Do not show duration for skipped.\n      text = this.screen.colors.cyan(title) + this._retrySuffix(result);\n    } else {\n      const statusMark = result.status === 'passed' ? POSITIVE_STATUS_MARK : NEGATIVE_STATUS_MARK;\n      if (result.status === test.expectedStatus) {\n        prefix = this._testPrefix(index, this.screen.colors.green(statusMark));\n        text = title;\n      } else {\n        prefix = this._testPrefix(index, this.screen.colors.red(statusMark));\n        text = this.screen.colors.red(title);\n      }\n      text += this._retrySuffix(result) + this.screen.colors.dim(` (${milliseconds(result.duration)})`);\n    }\n\n    this._updateOrAppendLine(this._testRows, test, text, prefix);\n  }\n\n  private _updateOrAppendLine<T>(entityRowNumbers: Map<T, number>, entity: T, text: string, prefix: string) {\n    const row = entityRowNumbers.get(entity);\n    // Only update the line if we assume that the line is still on the screen\n    if (row !== undefined && this.screen.isTTY && this._lastRow - row < this.screen.ttyHeight) {\n      this._updateLine(row, text, prefix);\n    } else {\n      this._maybeWriteNewLine();\n      entityRowNumbers.set(entity, this._lastRow);\n      this._appendLine(text, prefix);\n    }\n  }\n\n  private _appendLine(text: string, prefix: string) {\n    const line = prefix + this.fitToScreen(text, prefix);\n    if (process.env.PW_TEST_DEBUG_REPORTERS) {\n      this.screen.stdout.write('#' + this._lastRow + ' : ' + line + '\\n');\n    } else {\n      this.screen.stdout.write(line);\n      this.screen.stdout.write('\\n');\n    }\n    ++this._lastRow;\n    this._lastColumn = 0;\n  }\n\n  private _updateLine(row: number, text: string, prefix: string) {\n    const line = prefix + this.fitToScreen(text, prefix);\n    if (process.env.PW_TEST_DEBUG_REPORTERS)\n      this.screen.stdout.write('#' + row + ' : ' + line + '\\n');\n    else\n      this._updateLineForTTY(row, line);\n  }\n\n  private _updateLineForTTY(row: number, line: string) {\n    // Go up if needed\n    if (row !== this._lastRow)\n      this.screen.stdout.write(`\\u001B[${this._lastRow - row}A`);\n    // Erase line, go to the start\n    this.screen.stdout.write('\\u001B[2K\\u001B[0G');\n    this.screen.stdout.write(line);\n    // Go down if needed.\n    if (row !== this._lastRow)\n      this.screen.stdout.write(`\\u001B[${this._lastRow - row}E`);\n  }\n\n  private _testPrefix(index: string, statusMark: string) {\n    const statusMarkLength = stripAnsiEscapes(statusMark).length;\n    const indexLength = Math.ceil(Math.log10(this.totalTestCount + 1));\n    return '  ' + statusMark + ' '.repeat(3 - statusMarkLength) + this.screen.colors.dim(index.padStart(indexLength) + ' ');\n  }\n\n  private _retrySuffix(result: TestResult) {\n    return (result.retry ? this.screen.colors.yellow(` (retry #${result.retry})`) : '');\n  }\n\n  override onError(error: TestError): void {\n    super.onError(error);\n    this._maybeWriteNewLine();\n    const message = this.formatError(error).message + '\\n';\n    this._updateLineCountAndNewLineFlagForOutput(message);\n    this.screen.stdout.write(message);\n  }\n\n  override async onEnd(result: FullResult) {\n    await super.onEnd(result);\n    this.screen.stdout.write('\\n');\n    this.epilogue(true);\n  }\n}\n\nconst lastStepOrdinalSymbol = Symbol('lastStepOrdinal');\n\nexport default ListReporter;\n"],
  "mappings": "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",
  "names": ["milliseconds"]
}
