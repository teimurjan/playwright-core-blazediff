{
  "version": 3,
  "sources": ["../../src/reporters/html.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { Transform } from 'stream';\n\nimport { HttpServer, MultiMap, assert, calculateSha1, getPackageManagerExecCommand, copyFileAndMakeWritable, gracefullyProcessExitDoNotHang, removeFolders, sanitizeForFilePath, toPosixPath } from 'playwright-core/lib/utils';\nimport { colors } from 'playwright-core/lib/utils';\nimport { open } from 'playwright-core/lib/utilsBundle';\nimport { mime } from 'playwright-core/lib/utilsBundle';\nimport { yazl } from 'playwright-core/lib/zipBundle';\n\nimport { CommonReporterOptions, formatError, formatResultFailure, internalScreen } from './base';\nimport { codeFrameColumns } from '../transform/babelBundle';\nimport { resolveReporterOutputPath, stripAnsiEscapes } from '../util';\n\nimport type { ReporterV2 } from './reporterV2';\nimport type { HtmlReporterOptions as HtmlReporterConfigOptions, Metadata, TestAnnotation } from '../../types/test';\nimport type * as api from '../../types/testReporter';\nimport type { HTMLReport, Location, Stats, TestAttachment, TestCase, TestCaseSummary, TestFile, TestFileSummary, TestResult, TestStep } from '@html-reporter/types';\nimport type { ZipFile } from 'playwright-core/lib/zipBundle';\nimport type { TransformCallback } from 'stream';\n\ntype TestEntry = {\n  testCase: TestCase;\n  testCaseSummary: TestCaseSummary\n};\n\ntype HtmlReportOpenOption = NonNullable<HtmlReporterConfigOptions['open']>;\nconst htmlReportOptions: HtmlReportOpenOption[] = ['always', 'never', 'on-failure'];\n\nconst isHtmlReportOption = (type: string): type is HtmlReportOpenOption => {\n  return htmlReportOptions.includes(type as HtmlReportOpenOption);\n};\n\nclass HtmlReporter implements ReporterV2 {\n  private config!: api.FullConfig;\n  private suite!: api.Suite;\n  private _options: HtmlReporterConfigOptions & CommonReporterOptions;\n  private _outputFolder!: string;\n  private _attachmentsBaseURL!: string;\n  private _open: string | undefined;\n  private _port: number | undefined;\n  private _host: string | undefined;\n  private _buildResult: { ok: boolean, singleTestId: string | undefined } | undefined;\n  private _topLevelErrors: api.TestError[] = [];\n\n  constructor(options: HtmlReporterConfigOptions & CommonReporterOptions) {\n    this._options = options;\n  }\n\n  version(): 'v2' {\n    return 'v2';\n  }\n\n  printsToStdio() {\n    return false;\n  }\n\n  onConfigure(config: api.FullConfig) {\n    this.config = config;\n  }\n\n  onBegin(suite: api.Suite) {\n    const { outputFolder, open, attachmentsBaseURL, host, port } = this._resolveOptions();\n    this._outputFolder = outputFolder;\n    this._open = open;\n    this._host = host;\n    this._port = port;\n    this._attachmentsBaseURL = attachmentsBaseURL;\n    const reportedWarnings = new Set<string>();\n    for (const project of this.config.projects) {\n      if (this._isSubdirectory(outputFolder, project.outputDir) || this._isSubdirectory(project.outputDir, outputFolder)) {\n        const key = outputFolder + '|' + project.outputDir;\n        if (reportedWarnings.has(key))\n          continue;\n        reportedWarnings.add(key);\n        writeLine(colors.red(`Configuration Error: HTML reporter output folder clashes with the tests output folder:`));\n        writeLine(`\n    html reporter folder: ${colors.bold(outputFolder)}\n    test results folder: ${colors.bold(project.outputDir)}`);\n        writeLine('');\n        writeLine(`HTML reporter will clear its output directory prior to being generated, which will lead to the artifact loss.\n`);\n      }\n    }\n    this.suite = suite;\n  }\n\n  _resolveOptions(): { outputFolder: string, open: HtmlReportOpenOption, attachmentsBaseURL: string, host: string | undefined, port: number | undefined } {\n    const outputFolder = reportFolderFromEnv() ?? resolveReporterOutputPath('playwright-report', this._options.configDir, this._options.outputFolder);\n    return {\n      outputFolder,\n      open: getHtmlReportOptionProcessEnv() || this._options.open || 'on-failure',\n      attachmentsBaseURL: process.env.PLAYWRIGHT_HTML_ATTACHMENTS_BASE_URL || this._options.attachmentsBaseURL || 'data/',\n      host: process.env.PLAYWRIGHT_HTML_HOST || this._options.host,\n      port: process.env.PLAYWRIGHT_HTML_PORT ? +process.env.PLAYWRIGHT_HTML_PORT : this._options.port,\n    };\n  }\n\n  _isSubdirectory(parentDir: string, dir: string): boolean {\n    const relativePath = path.relative(parentDir, dir);\n    return !!relativePath && !relativePath.startsWith('..') && !path.isAbsolute(relativePath);\n  }\n\n  onError(error: api.TestError): void {\n    this._topLevelErrors.push(error);\n  }\n\n  async onEnd(result: api.FullResult) {\n    const projectSuites = this.suite.suites;\n    await removeFolders([this._outputFolder]);\n    let noSnippets: boolean | undefined;\n    if (process.env.PLAYWRIGHT_HTML_NO_SNIPPETS === 'false' || process.env.PLAYWRIGHT_HTML_NO_SNIPPETS === '0')\n      noSnippets = false;\n    else if (process.env.PLAYWRIGHT_HTML_NO_SNIPPETS)\n      noSnippets = true;\n    noSnippets = noSnippets || this._options.noSnippets;\n\n    const builder = new HtmlBuilder(this.config, this._outputFolder, this._attachmentsBaseURL, process.env.PLAYWRIGHT_HTML_TITLE || this._options.title, noSnippets);\n    this._buildResult = await builder.build(this.config.metadata, projectSuites, result, this._topLevelErrors);\n  }\n\n  async onExit() {\n    if (process.env.CI || !this._buildResult)\n      return;\n    const { ok, singleTestId } = this._buildResult;\n    const shouldOpen = !this._options._isTestServer && (this._open === 'always' || (!ok && this._open === 'on-failure'));\n    if (shouldOpen) {\n      await showHTMLReport(this._outputFolder, this._host, this._port, singleTestId);\n    } else if (this._options._mode === 'test' && !this._options._isTestServer) {\n      const packageManagerCommand = getPackageManagerExecCommand();\n      const relativeReportPath = this._outputFolder === standaloneDefaultFolder() ? '' : ' ' + path.relative(process.cwd(), this._outputFolder);\n      const hostArg = this._host ? ` --host ${this._host}` : '';\n      const portArg = this._port ? ` --port ${this._port}` : '';\n      writeLine('');\n      writeLine('To open last HTML report run:');\n      writeLine(colors.cyan(`\n  ${packageManagerCommand} playwright show-report${relativeReportPath}${hostArg}${portArg}\n`));\n    }\n  }\n}\n\nfunction reportFolderFromEnv(): string | undefined {\n  // Note: PLAYWRIGHT_HTML_REPORT is for backwards compatibility.\n  const envValue = process.env.PLAYWRIGHT_HTML_OUTPUT_DIR || process.env.PLAYWRIGHT_HTML_REPORT;\n  return envValue ? path.resolve(envValue) : undefined;\n}\n\nfunction getHtmlReportOptionProcessEnv(): HtmlReportOpenOption | undefined {\n  // Note: PW_TEST_HTML_REPORT_OPEN is for backwards compatibility.\n  const htmlOpenEnv = process.env.PLAYWRIGHT_HTML_OPEN || process.env.PW_TEST_HTML_REPORT_OPEN;\n  if (!htmlOpenEnv)\n    return undefined;\n  if (!isHtmlReportOption(htmlOpenEnv)) {\n    writeLine(colors.red(`Configuration Error: HTML reporter Invalid value for PLAYWRIGHT_HTML_OPEN: ${htmlOpenEnv}. Valid values are: ${htmlReportOptions.join(', ')}`));\n    return undefined;\n  }\n  return htmlOpenEnv;\n}\n\nfunction standaloneDefaultFolder(): string {\n  return reportFolderFromEnv() ?? resolveReporterOutputPath('playwright-report', process.cwd(), undefined);\n}\n\nexport async function showHTMLReport(reportFolder: string | undefined, host: string = 'localhost', port?: number, testId?: string) {\n  const folder = reportFolder ?? standaloneDefaultFolder();\n  try {\n    assert(fs.statSync(folder).isDirectory());\n  } catch (e) {\n    writeLine(colors.red(`No report found at \"${folder}\"`));\n    gracefullyProcessExitDoNotHang(1);\n    return;\n  }\n  const server = startHtmlReportServer(folder);\n  await server.start({ port, host, preferredPort: port ? undefined : 9323 });\n  let url = server.urlPrefix('human-readable');\n  writeLine('');\n  writeLine(colors.cyan(`  Serving HTML report at ${url}. Press Ctrl+C to quit.`));\n  if (testId)\n    url += `#?testId=${testId}`;\n  url = url.replace('0.0.0.0', 'localhost');\n  await open(url, { wait: true }).catch(() => {});\n  await new Promise(() => {});\n}\n\nexport function startHtmlReportServer(folder: string): HttpServer {\n  const server = new HttpServer();\n  server.routePrefix('/', (request, response) => {\n    let relativePath = new URL('http://localhost' + request.url).pathname;\n    if (relativePath.startsWith('/trace/file')) {\n      const url = new URL('http://localhost' + request.url!);\n      try {\n        return server.serveFile(request, response, url.searchParams.get('path')!);\n      } catch (e) {\n        return false;\n      }\n    }\n    if (relativePath.endsWith('/stall.js'))\n      return true;\n    if (relativePath === '/')\n      relativePath = '/index.html';\n    const absolutePath = path.join(folder, ...relativePath.split('/'));\n    return server.serveFile(request, response, absolutePath);\n  });\n  return server;\n}\n\nclass HtmlBuilder {\n  private _config: api.FullConfig;\n  private _reportFolder: string;\n  private _stepsInFile = new MultiMap<string, TestStep>();\n  private _dataZipFile: ZipFile;\n  private _hasTraces = false;\n  private _attachmentsBaseURL: string;\n  private _title: string | undefined;\n  private _noSnippets: boolean;\n\n  constructor(config: api.FullConfig, outputDir: string, attachmentsBaseURL: string, title: string | undefined, noSnippets: boolean = false) {\n    this._config = config;\n    this._reportFolder = outputDir;\n    this._noSnippets = noSnippets;\n    fs.mkdirSync(this._reportFolder, { recursive: true });\n    this._dataZipFile = new yazl.ZipFile();\n    this._attachmentsBaseURL = attachmentsBaseURL;\n    this._title = title;\n  }\n\n  async build(metadata: Metadata, projectSuites: api.Suite[], result: api.FullResult, topLevelErrors: api.TestError[]): Promise<{ ok: boolean, singleTestId: string | undefined }> {\n    const data = new Map<string, { testFile: TestFile, testFileSummary: TestFileSummary }>();\n    for (const projectSuite of projectSuites) {\n      for (const fileSuite of projectSuite.suites) {\n        const fileName = this._relativeLocation(fileSuite.location)!.file;\n        const fileId = calculateSha1(toPosixPath(fileName)).slice(0, 20);\n        let fileEntry = data.get(fileId);\n        if (!fileEntry) {\n          fileEntry = {\n            testFile: { fileId, fileName, tests: [] },\n            testFileSummary: { fileId, fileName, tests: [], stats: emptyStats() },\n          };\n          data.set(fileId, fileEntry);\n        }\n        const { testFile, testFileSummary } = fileEntry;\n        const testEntries: TestEntry[] = [];\n        this._processSuite(fileSuite, projectSuite.project()!.name, [], testEntries);\n        for (const test of testEntries) {\n          testFile.tests.push(test.testCase);\n          testFileSummary.tests.push(test.testCaseSummary);\n        }\n      }\n    }\n    if (!this._noSnippets)\n      createSnippets(this._stepsInFile);\n\n    let ok = true;\n    for (const [fileId, { testFile, testFileSummary }] of data) {\n      const stats = testFileSummary.stats;\n      for (const test of testFileSummary.tests) {\n        if (test.outcome === 'expected')\n          ++stats.expected;\n        if (test.outcome === 'skipped')\n          ++stats.skipped;\n        if (test.outcome === 'unexpected')\n          ++stats.unexpected;\n        if (test.outcome === 'flaky')\n          ++stats.flaky;\n        ++stats.total;\n      }\n      stats.ok = stats.unexpected + stats.flaky === 0;\n      if (!stats.ok)\n        ok = false;\n\n      const testCaseSummaryComparator = (t1: TestCaseSummary, t2: TestCaseSummary) => {\n        const w1 = (t1.outcome === 'unexpected' ? 1000 : 0) +  (t1.outcome === 'flaky' ? 1 : 0);\n        const w2 = (t2.outcome === 'unexpected' ? 1000 : 0) +  (t2.outcome === 'flaky' ? 1 : 0);\n        return w2 - w1;\n      };\n      testFileSummary.tests.sort(testCaseSummaryComparator);\n\n      this._addDataFile(fileId + '.json', testFile);\n    }\n    const htmlReport: HTMLReport = {\n      metadata,\n      title: this._title,\n      startTime: result.startTime.getTime(),\n      duration: result.duration,\n      files: [...data.values()].map(e => e.testFileSummary),\n      projectNames: projectSuites.map(r => r.project()!.name),\n      stats: { ...[...data.values()].reduce((a, e) => addStats(a, e.testFileSummary.stats), emptyStats()) },\n      errors: topLevelErrors.map(error => formatError(internalScreen, error).message),\n    };\n    htmlReport.files.sort((f1, f2) => {\n      const w1 = f1.stats.unexpected * 1000 + f1.stats.flaky;\n      const w2 = f2.stats.unexpected * 1000 + f2.stats.flaky;\n      return w2 - w1;\n    });\n\n    this._addDataFile('report.json', htmlReport);\n\n    let singleTestId: string | undefined;\n    if (htmlReport.stats.total === 1) {\n      const testFile: TestFile  = data.values().next().value!.testFile;\n      singleTestId = testFile.tests[0].testId;\n    }\n\n    if (process.env.PW_HMR === '1') {\n      const redirectFile = path.join(this._reportFolder, 'index.html');\n\n      await this._writeReportData(redirectFile);\n\n      async function redirect() {\n        const hmrURL = new URL('http://localhost:44224'); // dev server, port is harcoded in build.js\n        const popup = window.open(hmrURL);\n        const listener = (evt: MessageEvent) => {\n          if (evt.source === popup && evt.data === 'ready') {\n            const element = document.getElementById('playwrightReportBase64');\n            popup!.postMessage(element?.textContent ?? '', hmrURL.origin);\n            window.removeEventListener('message', listener);\n            // This is generally not allowed\n            window.close();\n          }\n        };\n        window.addEventListener('message', listener);\n      }\n\n      fs.appendFileSync(redirectFile, `<script>(${redirect.toString()})()</script>`);\n\n      return { ok, singleTestId };\n    }\n\n    // Copy app.\n    const appFolder = path.join(require.resolve('playwright-core'), '..', 'lib', 'vite', 'htmlReport');\n    await copyFileAndMakeWritable(path.join(appFolder, 'index.html'), path.join(this._reportFolder, 'index.html'));\n\n    // Copy trace viewer.\n    if (this._hasTraces) {\n      const traceViewerFolder = path.join(require.resolve('playwright-core'), '..', 'lib', 'vite', 'traceViewer');\n      const traceViewerTargetFolder = path.join(this._reportFolder, 'trace');\n      const traceViewerAssetsTargetFolder = path.join(traceViewerTargetFolder, 'assets');\n      fs.mkdirSync(traceViewerAssetsTargetFolder, { recursive: true });\n      for (const file of fs.readdirSync(traceViewerFolder)) {\n        if (file.endsWith('.map') || file.includes('watch') || file.includes('assets'))\n          continue;\n        await copyFileAndMakeWritable(path.join(traceViewerFolder, file), path.join(traceViewerTargetFolder, file));\n      }\n      for (const file of fs.readdirSync(path.join(traceViewerFolder, 'assets'))) {\n        if (file.endsWith('.map') || file.includes('xtermModule'))\n          continue;\n        await copyFileAndMakeWritable(path.join(traceViewerFolder, 'assets', file), path.join(traceViewerAssetsTargetFolder, file));\n      }\n    }\n\n    await this._writeReportData(path.join(this._reportFolder, 'index.html'));\n\n\n    return { ok, singleTestId };\n  }\n\n  private async _writeReportData(filePath: string) {\n    fs.appendFileSync(filePath, '<script id=\"playwrightReportBase64\" type=\"application/zip\">data:application/zip;base64,');\n    await new Promise(f => {\n      this._dataZipFile!.end(undefined, () => {\n        this._dataZipFile!.outputStream\n            .pipe(new Base64Encoder())\n            .pipe(fs.createWriteStream(filePath, { flags: 'a' })).on('close', f);\n      });\n    });\n    fs.appendFileSync(filePath, '</script>');\n  }\n\n  private _addDataFile(fileName: string, data: any) {\n    this._dataZipFile.addBuffer(Buffer.from(JSON.stringify(data)), fileName);\n  }\n\n  private _processSuite(suite: api.Suite, projectName: string, path: string[], outTests: TestEntry[]) {\n    const newPath = [...path, suite.title];\n    suite.entries().forEach(e => {\n      if (e.type === 'test')\n        outTests.push(this._createTestEntry(e, projectName, newPath));\n      else\n        this._processSuite(e, projectName, newPath, outTests);\n    });\n  }\n\n  private _createTestEntry(test: api.TestCase, projectName: string, path: string[]): TestEntry {\n    const duration = test.results.reduce((a, r) => a + r.duration, 0);\n    const location = this._relativeLocation(test.location)!;\n    path = path.slice(1).filter(path => path.length > 0);\n    const results = test.results.map(r => this._createTestResult(test, r));\n\n    return {\n      testCase: {\n        testId: test.id,\n        title: test.title,\n        projectName,\n        location,\n        duration,\n        annotations: this._serializeAnnotations(test.annotations),\n        tags: test.tags,\n        outcome: test.outcome(),\n        path,\n        results,\n        ok: test.outcome() === 'expected' || test.outcome() === 'flaky',\n      },\n      testCaseSummary: {\n        testId: test.id,\n        title: test.title,\n        projectName,\n        location,\n        duration,\n        annotations: this._serializeAnnotations(test.annotations),\n        tags: test.tags,\n        outcome: test.outcome(),\n        path,\n        ok: test.outcome() === 'expected' || test.outcome() === 'flaky',\n        results: results.map(result => {\n          return { attachments: result.attachments.map(a => ({ name: a.name, contentType: a.contentType, path: a.path })) };\n        }),\n      },\n    };\n  }\n\n  private _serializeAttachments(attachments: JsonAttachment[]) {\n    let lastAttachment: TestAttachment | undefined;\n    return attachments.map(a => {\n      if (a.name === 'trace')\n        this._hasTraces = true;\n\n      if ((a.name === 'stdout' || a.name === 'stderr') && a.contentType === 'text/plain') {\n        if (lastAttachment &&\n          lastAttachment.name === a.name &&\n          lastAttachment.contentType === a.contentType) {\n          lastAttachment.body += stripAnsiEscapes(a.body as string);\n          return null;\n        }\n        a.body = stripAnsiEscapes(a.body as string);\n        lastAttachment = a as TestAttachment;\n        return a;\n      }\n\n      if (a.path) {\n        let fileName = a.path;\n        try {\n          const buffer = fs.readFileSync(a.path);\n          const sha1 = calculateSha1(buffer) + path.extname(a.path);\n          fileName = this._attachmentsBaseURL + sha1;\n          fs.mkdirSync(path.join(this._reportFolder, 'data'), { recursive: true });\n          fs.writeFileSync(path.join(this._reportFolder, 'data', sha1), buffer);\n        } catch (e) {\n        }\n        return {\n          name: a.name,\n          contentType: a.contentType,\n          path: fileName,\n          body: a.body,\n        };\n      }\n\n      if (a.body instanceof Buffer) {\n        if (isTextContentType(a.contentType)) {\n          // Content type is like this: \"text/html; charset=UTF-8\"\n          const charset = a.contentType.match(/charset=(.*)/)?.[1];\n          try {\n            const body = a.body.toString(charset as any || 'utf-8');\n            return {\n              name: a.name,\n              contentType: a.contentType,\n              body,\n            };\n          } catch (e) {\n            // Invalid encoding, fall through and save to file.\n          }\n        }\n\n        fs.mkdirSync(path.join(this._reportFolder, 'data'), { recursive: true });\n        const extension = sanitizeForFilePath(path.extname(a.name).replace(/^\\./, '')) || mime.getExtension(a.contentType) || 'dat';\n        const sha1 = calculateSha1(a.body) + '.' + extension;\n        fs.writeFileSync(path.join(this._reportFolder, 'data', sha1), a.body);\n        return {\n          name: a.name,\n          contentType: a.contentType,\n          path: this._attachmentsBaseURL + sha1,\n        };\n      }\n\n      // string\n      return {\n        name: a.name,\n        contentType: a.contentType,\n        body: a.body,\n      };\n    }).filter(Boolean) as TestAttachment[];\n  }\n\n  private _serializeAnnotations(annotations: api.TestCase['annotations']): TestAnnotation[] {\n    // Annotations can be pushed directly, with a wrong type.\n    return annotations.map(a => ({\n      type: a.type,\n      description: a.description === undefined ? undefined : String(a.description),\n      location: a.location ? {\n        file: a.location.file,\n        line: a.location.line,\n        column: a.location.column,\n      } : undefined,\n    }));\n  }\n\n  private _createTestResult(test: api.TestCase, result: api.TestResult): TestResult {\n    return {\n      duration: result.duration,\n      startTime: result.startTime.toISOString(),\n      retry: result.retry,\n      steps: dedupeSteps(result.steps).map(s => this._createTestStep(s, result)),\n      errors: formatResultFailure(internalScreen, test, result, '').map(error => {\n        return {\n          message: error.message,\n          codeframe: error.location ? createErrorCodeframe(error.message, error.location) : undefined\n        };\n      }),\n      status: result.status,\n      annotations: this._serializeAnnotations(result.annotations),\n      attachments: this._serializeAttachments([\n        ...result.attachments,\n        ...result.stdout.map(m => stdioAttachment(m, 'stdout')),\n        ...result.stderr.map(m => stdioAttachment(m, 'stderr'))]),\n    };\n  }\n\n  private _createTestStep(dedupedStep: DedupedStep, result: api.TestResult): TestStep {\n    const { step, duration, count } = dedupedStep;\n    const skipped = dedupedStep.step.annotations?.find(a => a.type === 'skip');\n    let title = step.title;\n    if (skipped)\n      title = `${title} (skipped${skipped.description ? ': ' + skipped.description : ''})`;\n    const testStep: TestStep = {\n      title,\n      startTime: step.startTime.toISOString(),\n      duration,\n      steps: dedupeSteps(step.steps).map(s => this._createTestStep(s, result)),\n      attachments: step.attachments.map(s => {\n        const index = result.attachments.indexOf(s);\n        if (index === -1)\n          throw new Error('Unexpected, attachment not found');\n        return index;\n      }),\n      location: this._relativeLocation(step.location),\n      error: step.error?.message,\n      count,\n      skipped: !!skipped,\n    };\n    if (step.location)\n      this._stepsInFile.set(step.location.file, testStep);\n    return testStep;\n  }\n\n  private _relativeLocation(location: api.Location | undefined): api.Location | undefined {\n    if (!location)\n      return undefined;\n    const file = toPosixPath(path.relative(this._config.rootDir, location.file));\n    return {\n      file,\n      line: location.line,\n      column: location.column,\n    };\n  }\n}\n\nconst emptyStats = (): Stats => {\n  return {\n    total: 0,\n    expected: 0,\n    unexpected: 0,\n    flaky: 0,\n    skipped: 0,\n    ok: true,\n  };\n};\n\nconst addStats = (stats: Stats, delta: Stats): Stats => {\n  stats.total += delta.total;\n  stats.skipped += delta.skipped;\n  stats.expected += delta.expected;\n  stats.unexpected += delta.unexpected;\n  stats.flaky += delta.flaky;\n  stats.ok = stats.ok && delta.ok;\n  return stats;\n};\n\nclass Base64Encoder extends Transform {\n  private _remainder: Buffer | undefined;\n\n  override _transform(chunk: any, encoding: BufferEncoding, callback: TransformCallback): void {\n    if (this._remainder) {\n      chunk = Buffer.concat([this._remainder, chunk]);\n      this._remainder = undefined;\n    }\n\n    const remaining = chunk.length % 3;\n    if (remaining) {\n      this._remainder = chunk.slice(chunk.length - remaining);\n      chunk = chunk.slice(0, chunk.length - remaining);\n    }\n    chunk = chunk.toString('base64');\n    this.push(Buffer.from(chunk));\n    callback();\n  }\n\n  override _flush(callback: TransformCallback): void {\n    if (this._remainder)\n      this.push(Buffer.from(this._remainder.toString('base64')));\n    callback();\n  }\n}\n\nfunction isTextContentType(contentType: string) {\n  return contentType.startsWith('text/') || contentType.startsWith('application/json');\n}\n\ntype JsonAttachment = {\n  name: string;\n  body?: string | Buffer;\n  path?: string;\n  contentType: string;\n};\n\nfunction stdioAttachment(chunk: Buffer | string, type: 'stdout' | 'stderr'): JsonAttachment {\n  return {\n    name: type,\n    contentType: 'text/plain',\n    body: typeof chunk === 'string' ? chunk : chunk.toString('utf-8')\n  };\n}\n\ntype DedupedStep = { step: api.TestStep, count: number, duration: number };\n\nfunction dedupeSteps(steps: api.TestStep[]) {\n  const result: DedupedStep[] = [];\n  let lastResult = undefined;\n  for (const step of steps) {\n    const canDedupe = !step.error && step.duration >= 0 && step.location?.file && !step.steps.length;\n    const lastStep = lastResult?.step;\n    if (canDedupe && lastResult && lastStep && step.category === lastStep.category && step.title === lastStep.title && step.location?.file === lastStep.location?.file && step.location?.line === lastStep.location?.line && step.location?.column === lastStep.location?.column) {\n      ++lastResult.count;\n      lastResult.duration += step.duration;\n      continue;\n    }\n    lastResult = { step, count: 1, duration: step.duration };\n    result.push(lastResult);\n    if (!canDedupe)\n      lastResult = undefined;\n  }\n  return result;\n}\n\nfunction createSnippets(stepsInFile: MultiMap<string, TestStep>) {\n  for (const file of stepsInFile.keys()) {\n    let source: string;\n    try {\n      source = fs.readFileSync(file, 'utf-8') + '\\n//';\n    } catch (e) {\n      continue;\n    }\n    const lines = source.split('\\n').length;\n    const highlighted = codeFrameColumns(source, { start: { line: lines, column: 1 } }, { highlightCode: true, linesAbove: lines, linesBelow: 0 });\n    const highlightedLines = highlighted.split('\\n');\n    const lineWithArrow = highlightedLines[highlightedLines.length - 1];\n    for (const step of stepsInFile.get(file)) {\n      // Don't bother with snippets that have less than 3 lines.\n      if (step.location!.line < 2 || step.location!.line >= lines)\n        continue;\n      // Cut out snippet.\n      const snippetLines = highlightedLines.slice(step.location!.line - 2, step.location!.line + 1);\n      // Relocate arrow.\n      const index = lineWithArrow.indexOf('^');\n      const shiftedArrow = lineWithArrow.slice(0, index) + ' '.repeat(step.location!.column - 1) + lineWithArrow.slice(index);\n      // Insert arrow line.\n      snippetLines.splice(2, 0, shiftedArrow);\n      step.snippet = snippetLines.join('\\n');\n    }\n  }\n}\n\nfunction createErrorCodeframe(message: string, location: Location) {\n  let source: string;\n  try {\n    source = fs.readFileSync(location.file, 'utf-8') + '\\n//';\n  } catch (e) {\n    return;\n  }\n\n  return codeFrameColumns(\n      source,\n      {\n        start: {\n          line: location.line,\n          column: location.column,\n        },\n      },\n      {\n        highlightCode: false,\n        linesAbove: 100,\n        linesBelow: 100,\n        message: stripAnsiEscapes(message).split('\\n')[0] || undefined,\n      }\n  );\n}\n\nfunction writeLine(line: string) {\n  // eslint-disable-next-line no-restricted-properties\n  process.stdout.write(line + '\\n');\n}\n\nexport default HtmlReporter;\n"],
  "mappings": "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",
  "names": ["import_utils", "import_utilsBundle", "open", "path", "fs"]
}
