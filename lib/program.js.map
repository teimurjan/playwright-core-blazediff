{
  "version": 3,
  "sources": ["../src/program.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-console */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { program } from 'playwright-core/lib/cli/program';\nimport { gracefullyProcessExitDoNotHang, startProfiling, stopProfiling } from 'playwright-core/lib/utils';\n\nimport { builtInReporters, defaultReporter, defaultTimeout } from './common/config';\nimport { loadConfigFromFile, loadEmptyConfigForMergeReports, resolveConfigLocation } from './common/configLoader';\nexport { program } from 'playwright-core/lib/cli/program';\nimport { terminalScreen } from './reporters/base';\nimport { showHTMLReport } from './reporters/html';\nimport { createMergedReport } from './reporters/merge';\nimport { filterProjects } from './runner/projectUtils';\nimport * as testServer from './runner/testServer';\nimport { runWatchModeLoop } from './runner/watchMode';\nimport { runAllTestsWithConfig, TestRunner } from './runner/testRunner';\nimport { createErrorCollectingReporter } from './runner/reporters';\nimport { ServerBackendFactory } from './mcp/sdk/server';\nimport { TestServerBackend } from './mcp/test/backend';\nimport { runMainBackend } from './mcp/sdk/mdb';\n\nimport type { ConfigCLIOverrides } from './common/ipc';\nimport type { TraceMode } from '../types/test';\nimport type { ReporterDescription } from '../types/test';\nimport type { Command } from 'playwright-core/lib/utilsBundle';\n\nfunction addTestCommand(program: Command) {\n  const command = program.command('test [test-filter...]');\n  command.description('run tests with Playwright Test');\n  const options = testOptions.sort((a, b) => a[0].replace(/-/g, '').localeCompare(b[0].replace(/-/g, '')));\n  options.forEach(([name, { description, choices, preset }]) => {\n    const option = command.createOption(name, description);\n    if (choices)\n      option.choices(choices);\n    if (preset)\n      option.preset(preset);\n    // We don't set the default value here, because we want not specified options to\n    // fall back to the user config, which we haven't parsed yet.\n    command.addOption(option);\n    return command;\n  });\n  command.action(async (args, opts) => {\n    try {\n      await runTests(args, opts);\n    } catch (e) {\n      console.error(e);\n      gracefullyProcessExitDoNotHang(1);\n    }\n  });\n  command.addHelpText('afterAll', `\nArguments [test-filter...]:\n  Pass arguments to filter test files. Each argument is treated as a regular expression. Matching is performed against the absolute file paths.\n\nExamples:\n  $ npx playwright test my.spec.ts\n  $ npx playwright test some.spec.ts:42\n  $ npx playwright test --headed\n  $ npx playwright test --project=webkit`);\n}\n\nfunction addClearCacheCommand(program: Command) {\n  const command = program.command('clear-cache');\n  command.description('clears build and test caches');\n  command.option('-c, --config <file>', `Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\"`);\n  command.action(async opts => {\n    const runner = new TestRunner(resolveConfigLocation(opts.config), {});\n    const { status } = await runner.clearCache(createErrorCollectingReporter(terminalScreen));\n    const exitCode = status === 'interrupted' ? 130 : (status === 'passed' ? 0 : 1);\n    gracefullyProcessExitDoNotHang(exitCode);\n  });\n}\n\nfunction addDevServerCommand(program: Command) {\n  const command = program.command('dev-server', { hidden: true });\n  command.description('start dev server');\n  command.option('-c, --config <file>', `Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\"`);\n  command.action(async options => {\n    const runner = new TestRunner(resolveConfigLocation(options.config), {});\n    await runner.startDevServer(createErrorCollectingReporter(terminalScreen), 'in-process');\n  });\n}\n\nfunction addTestServerCommand(program: Command) {\n  const command = program.command('test-server', { hidden: true });\n  command.description('start test server');\n  command.option('-c, --config <file>', `Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\"`);\n  command.option('--host <host>', 'Host to start the server on', 'localhost');\n  command.option('--port <port>', 'Port to start the server on', '0');\n  command.action(opts => runTestServer(opts));\n}\n\nfunction addShowReportCommand(program: Command) {\n  const command = program.command('show-report [report]');\n  command.description('show HTML report');\n  command.action((report, options) => showHTMLReport(report, options.host, +options.port));\n  command.option('--host <host>', 'Host to serve report on', 'localhost');\n  command.option('--port <port>', 'Port to serve report on', '9323');\n  command.addHelpText('afterAll', `\nArguments [report]:\n  When specified, opens given report, otherwise opens last generated report.\n\nExamples:\n  $ npx playwright show-report\n  $ npx playwright show-report playwright-report`);\n}\n\nfunction addMergeReportsCommand(program: Command) {\n  const command = program.command('merge-reports [dir]');\n  command.description('merge multiple blob reports (for sharded tests) into a single report');\n  command.action(async (dir, options) => {\n    try {\n      await mergeReports(dir, options);\n    } catch (e) {\n      console.error(e);\n      gracefullyProcessExitDoNotHang(1);\n    }\n  });\n  command.option('-c, --config <file>', `Configuration file. Can be used to specify additional configuration for the output report.`);\n  command.option('--reporter <reporter>', `Reporter to use, comma-separated, can be ${builtInReporters.map(name => `\"${name}\"`).join(', ')} (default: \"${defaultReporter}\")`);\n  command.addHelpText('afterAll', `\nArguments [dir]:\n  Directory containing blob reports.\n\nExamples:\n  $ npx playwright merge-reports playwright-report`);\n}\n\nfunction addMCPServerCommand(program: Command) {\n  const command = program.command('run-mcp-server', { hidden: true });\n  command.description('Interact with the test runner over MCP');\n  command.option('-c, --config <file>', `Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\"`);\n  command.option('--host <host>', 'host to bind server to. Default is localhost. Use 0.0.0.0 to bind to all interfaces.');\n  command.option('--port <port>', 'port to listen on for SSE transport.');\n  command.action(async options => {\n    const resolvedLocation = resolveConfigLocation(options.config);\n    const backendFactory: ServerBackendFactory = {\n      name: 'Playwright Test Runner',\n      nameInConfig: 'playwright-test-runner',\n      version: '0.0.0',\n      create: () => new TestServerBackend(resolvedLocation, { muteConsole: options.port === undefined }),\n    };\n    const mdbUrl = await runMainBackend(backendFactory, { port: options.port === undefined ? undefined : +options.port });\n    if (mdbUrl)\n      console.error('MCP Listening on: ', mdbUrl);\n  });\n}\n\nasync function runTests(args: string[], opts: { [key: string]: any }) {\n  await startProfiling();\n  const cliOverrides = overridesFromOptions(opts);\n\n  const config = await loadConfigFromFile(opts.config, cliOverrides, opts.deps === false);\n  config.cliArgs = args;\n  config.cliGrep = opts.grep as string | undefined;\n  config.cliOnlyChanged = opts.onlyChanged === true ? 'HEAD' : opts.onlyChanged;\n  config.cliGrepInvert = opts.grepInvert as string | undefined;\n  config.cliListOnly = !!opts.list;\n  config.cliProjectFilter = opts.project || undefined;\n  config.cliPassWithNoTests = !!opts.passWithNoTests;\n  config.cliLastFailed = !!opts.lastFailed;\n  config.cliLastRunFile = opts.lastRunFile ? path.resolve(process.cwd(), opts.lastRunFile) : undefined;\n\n  // Evaluate project filters against config before starting execution. This enables a consistent error message across run modes\n  filterProjects(config.projects, config.cliProjectFilter);\n\n  if (opts.ui || opts.uiHost || opts.uiPort) {\n    if (opts.onlyChanged)\n      throw new Error(`--only-changed is not supported in UI mode. If you'd like that to change, see https://github.com/microsoft/playwright/issues/15075 for more details.`);\n\n    const status = await testServer.runUIMode(opts.config, cliOverrides, {\n      host: opts.uiHost,\n      port: opts.uiPort ? +opts.uiPort : undefined,\n      args,\n      grep: opts.grep as string | undefined,\n      grepInvert: opts.grepInvert as string | undefined,\n      project: opts.project || undefined,\n      reporter: Array.isArray(opts.reporter) ? opts.reporter : opts.reporter ? [opts.reporter] : undefined,\n    });\n    await stopProfiling('runner');\n    const exitCode = status === 'interrupted' ? 130 : (status === 'passed' ? 0 : 1);\n    gracefullyProcessExitDoNotHang(exitCode);\n    return;\n  }\n\n  if (process.env.PWTEST_WATCH) {\n    if (opts.onlyChanged)\n      throw new Error(`--only-changed is not supported in watch mode. If you'd like that to change, file an issue and let us know about your usecase for it.`);\n\n    const status = await runWatchModeLoop(\n        resolveConfigLocation(opts.config),\n        {\n          projects: opts.project,\n          files: args,\n          grep: opts.grep\n        }\n    );\n    await stopProfiling('runner');\n    const exitCode = status === 'interrupted' ? 130 : (status === 'passed' ? 0 : 1);\n    gracefullyProcessExitDoNotHang(exitCode);\n    return;\n  }\n\n  const status = await runAllTestsWithConfig(config);\n  await stopProfiling('runner');\n  const exitCode = status === 'interrupted' ? 130 : (status === 'passed' ? 0 : 1);\n  gracefullyProcessExitDoNotHang(exitCode);\n}\n\nasync function runTestServer(opts: { [key: string]: any }) {\n  const host = opts.host || 'localhost';\n  const port = opts.port ? +opts.port : 0;\n  const status = await testServer.runTestServer(opts.config, { }, { host, port });\n  const exitCode = status === 'interrupted' ? 130 : (status === 'passed' ? 0 : 1);\n  gracefullyProcessExitDoNotHang(exitCode);\n}\n\nasync function mergeReports(reportDir: string | undefined, opts: { [key: string]: any }) {\n  const configFile = opts.config;\n  const config = configFile ? await loadConfigFromFile(configFile) : await loadEmptyConfigForMergeReports();\n\n  const dir = path.resolve(process.cwd(), reportDir || '');\n  const dirStat = await fs.promises.stat(dir).catch(e => null);\n  if (!dirStat)\n    throw new Error('Directory does not exist: ' + dir);\n  if (!dirStat.isDirectory())\n    throw new Error(`\"${dir}\" is not a directory`);\n  let reporterDescriptions: ReporterDescription[] | undefined = resolveReporterOption(opts.reporter);\n  if (!reporterDescriptions && configFile)\n    reporterDescriptions = config.config.reporter;\n  if (!reporterDescriptions)\n    reporterDescriptions = [[defaultReporter]];\n  const rootDirOverride = configFile ? config.config.rootDir : undefined;\n  await createMergedReport(config, dir, reporterDescriptions!, rootDirOverride);\n  gracefullyProcessExitDoNotHang(0);\n}\n\nfunction overridesFromOptions(options: { [key: string]: any }): ConfigCLIOverrides {\n  const overrides: ConfigCLIOverrides = {\n    failOnFlakyTests: options.failOnFlakyTests ? true : undefined,\n    forbidOnly: options.forbidOnly ? true : undefined,\n    fullyParallel: options.fullyParallel ? true : undefined,\n    globalTimeout: options.globalTimeout ? parseInt(options.globalTimeout, 10) : undefined,\n    maxFailures: options.x ? 1 : (options.maxFailures ? parseInt(options.maxFailures, 10) : undefined),\n    outputDir: options.output ? path.resolve(process.cwd(), options.output) : undefined,\n    quiet: options.quiet ? options.quiet : undefined,\n    repeatEach: options.repeatEach ? parseInt(options.repeatEach, 10) : undefined,\n    retries: options.retries ? parseInt(options.retries, 10) : undefined,\n    reporter: resolveReporterOption(options.reporter),\n    shard: resolveShardOption(options.shard),\n    timeout: options.timeout ? parseInt(options.timeout, 10) : undefined,\n    tsconfig: options.tsconfig ? path.resolve(process.cwd(), options.tsconfig) : undefined,\n    ignoreSnapshots: options.ignoreSnapshots ? !!options.ignoreSnapshots : undefined,\n    updateSnapshots: options.updateSnapshots,\n    updateSourceMethod: options.updateSourceMethod,\n    workers: options.workers,\n  };\n\n  if (options.browser) {\n    const browserOpt = options.browser.toLowerCase();\n    if (!['all', 'chromium', 'firefox', 'webkit'].includes(browserOpt))\n      throw new Error(`Unsupported browser \"${options.browser}\", must be one of \"all\", \"chromium\", \"firefox\" or \"webkit\"`);\n    const browserNames = browserOpt === 'all' ? ['chromium', 'firefox', 'webkit'] : [browserOpt];\n    overrides.projects = browserNames.map(browserName => {\n      return {\n        name: browserName,\n        use: { browserName },\n      };\n    });\n  }\n\n  if (options.headed || options.debug)\n    overrides.use = { headless: false };\n  if (!options.ui && options.debug) {\n    overrides.debug = true;\n    process.env.PWDEBUG = '1';\n  }\n  if (!options.ui && options.trace) {\n    overrides.use = overrides.use || {};\n    overrides.use.trace = options.trace;\n  }\n  if (overrides.tsconfig && !fs.existsSync(overrides.tsconfig))\n    throw new Error(`--tsconfig \"${options.tsconfig}\" does not exist`);\n\n  return overrides;\n}\n\nfunction resolveReporterOption(reporter?: string): ReporterDescription[] | undefined {\n  if (!reporter || !reporter.length)\n    return undefined;\n  return reporter.split(',').map((r: string) => [resolveReporter(r)]);\n}\n\nfunction resolveShardOption(shard?: string): ConfigCLIOverrides['shard'] {\n  if (!shard)\n    return undefined;\n\n  const shardPair = shard.split('/');\n\n  if (shardPair.length !== 2) {\n    throw new Error(\n        `--shard \"${shard}\", expected format is \"current/all\", 1-based, for example \"3/5\".`,\n    );\n  }\n\n  const current = parseInt(shardPair[0], 10);\n  const total = parseInt(shardPair[1], 10);\n\n  if (isNaN(total) || total < 1)\n    throw new Error(`--shard \"${shard}\" total must be a positive number`);\n\n\n  if (isNaN(current) || current < 1 || current > total) {\n    throw new Error(\n        `--shard \"${shard}\" current must be a positive number, not greater than shard total`,\n    );\n  }\n\n  return { current, total };\n}\n\nfunction resolveReporter(id: string) {\n  if (builtInReporters.includes(id as any))\n    return id;\n  const localPath = path.resolve(process.cwd(), id);\n  if (fs.existsSync(localPath))\n    return localPath;\n  return require.resolve(id, { paths: [process.cwd()] });\n}\n\nconst kTraceModes: TraceMode[] = ['on', 'off', 'on-first-retry', 'on-all-retries', 'retain-on-failure', 'retain-on-first-failure'];\n\n// Note: update docs/src/test-cli-js.md when you update this, program is the source of truth.\n\nconst testOptions: [string, { description: string, choices?: string[], preset?: string }][] = [\n  /* deprecated */ ['--browser <browser>', { description: `Browser to use for tests, one of \"all\", \"chromium\", \"firefox\" or \"webkit\" (default: \"chromium\")` }],\n  ['-c, --config <file>', { description: `Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\"` }],\n  ['--debug', { description: `Run tests with Playwright Inspector. Shortcut for \"PWDEBUG=1\" environment variable and \"--timeout=0 --max-failures=1 --headed --workers=1\" options` }],\n  ['--fail-on-flaky-tests', { description: `Fail if any test is flagged as flaky (default: false)` }],\n  ['--forbid-only', { description: `Fail if test.only is called (default: false)` }],\n  ['--fully-parallel', { description: `Run all tests in parallel (default: false)` }],\n  ['--global-timeout <timeout>', { description: `Maximum time this test suite can run in milliseconds (default: unlimited)` }],\n  ['-g, --grep <grep>', { description: `Only run tests matching this regular expression (default: \".*\")` }],\n  ['--grep-invert <grep>', { description: `Only run tests that do not match this regular expression` }],\n  ['--headed', { description: `Run tests in headed browsers (default: headless)` }],\n  ['--ignore-snapshots', { description: `Ignore screenshot and snapshot expectations` }],\n  ['--last-failed', { description: `Only re-run the failures` }],\n  ['--last-run-file <file>', { description: `Path to the last-run file (default: \"test-results/.last-run.json\")` }],\n  ['--list', { description: `Collect all the tests and report them, but do not run` }],\n  ['--max-failures <N>', { description: `Stop after the first N failures` }],\n  ['--no-deps', { description: `Do not run project dependencies` }],\n  ['--output <dir>', { description: `Folder for output artifacts (default: \"test-results\")` }],\n  ['--only-changed [ref]', { description: `Only run test files that have been changed between 'HEAD' and 'ref'. Defaults to running all uncommitted changes. Only supports Git.` }],\n  ['--pass-with-no-tests', { description: `Makes test run succeed even if no tests were found` }],\n  ['--project <project-name...>', { description: `Only run tests from the specified list of projects, supports '*' wildcard (default: run all projects)` }],\n  ['--quiet', { description: `Suppress stdio` }],\n  ['--repeat-each <N>', { description: `Run each test N times (default: 1)` }],\n  ['--reporter <reporter>', { description: `Reporter to use, comma-separated, can be ${builtInReporters.map(name => `\"${name}\"`).join(', ')} (default: \"${defaultReporter}\")` }],\n  ['--retries <retries>', { description: `Maximum retry count for flaky tests, zero for no retries (default: no retries)` }],\n  ['--shard <shard>', { description: `Shard tests and execute only the selected shard, specify in the form \"current/all\", 1-based, for example \"3/5\"` }],\n  ['--timeout <timeout>', { description: `Specify test timeout threshold in milliseconds, zero for unlimited (default: ${defaultTimeout})` }],\n  ['--trace <mode>', { description: `Force tracing mode`, choices: kTraceModes as string[] }],\n  ['--tsconfig <path>', { description: `Path to a single tsconfig applicable to all imported files (default: look up tsconfig for each imported file separately)` }],\n  ['--ui', { description: `Run tests in interactive UI mode` }],\n  ['--ui-host <host>', { description: `Host to serve UI on; specifying this option opens UI in a browser tab` }],\n  ['--ui-port <port>', { description: `Port to serve UI on, 0 for any free port; specifying this option opens UI in a browser tab` }],\n  ['-u, --update-snapshots [mode]', { description: `Update snapshots with actual results. Running tests without the flag defaults to \"missing\"`, choices: ['all', 'changed', 'missing', 'none'], preset: 'changed' }],\n  ['--update-source-method <method>', { description: `Chooses the way source is updated (default: \"patch\")`, choices: ['overwrite', '3way', 'patch'] }],\n  ['-j, --workers <workers>', { description: `Number of concurrent workers or percentage of logical CPU cores, use 1 to run in a single worker (default: 50%)` }],\n  ['-x', { description: `Stop after the first failure` }],\n];\n\naddTestCommand(program);\naddShowReportCommand(program);\naddMergeReportsCommand(program);\naddClearCacheCommand(program);\naddMCPServerCommand(program);\naddDevServerCommand(program);\naddTestServerCommand(program);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA,gBAAe;AACf,kBAAiB;AAEjB,qBAAwB;AACxB,mBAA8E;AAE9E,oBAAkE;AAClE,0BAA0F;AAC1F,IAAAA,kBAAwB;AACxB,kBAA+B;AAC/B,kBAA+B;AAC/B,mBAAmC;AACnC,0BAA+B;AAC/B,iBAA4B;AAC5B,uBAAiC;AACjC,wBAAkD;AAClD,uBAA8C;AAE9C,qBAAkC;AAClC,iBAA+B;AAO/B,SAAS,eAAeC,UAAkB;AACxC,QAAM,UAAUA,SAAQ,QAAQ,uBAAuB;AACvD,UAAQ,YAAY,gCAAgC;AACpD,QAAM,UAAU,YAAY,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,QAAQ,MAAM,EAAE,EAAE,cAAc,EAAE,CAAC,EAAE,QAAQ,MAAM,EAAE,CAAC,CAAC;AACvG,UAAQ,QAAQ,CAAC,CAAC,MAAM,EAAE,aAAa,SAAS,OAAO,CAAC,MAAM;AAC5D,UAAM,SAAS,QAAQ,aAAa,MAAM,WAAW;AACrD,QAAI;AACF,aAAO,QAAQ,OAAO;AACxB,QAAI;AACF,aAAO,OAAO,MAAM;AAGtB,YAAQ,UAAU,MAAM;AACxB,WAAO;AAAA,EACT,CAAC;AACD,UAAQ,OAAO,OAAO,MAAM,SAAS;AACnC,QAAI;AACF,YAAM,SAAS,MAAM,IAAI;AAAA,IAC3B,SAAS,GAAG;AACV,cAAQ,MAAM,CAAC;AACf,uDAA+B,CAAC;AAAA,IAClC;AAAA,EACF,CAAC;AACD,UAAQ,YAAY,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAQO;AACzC;AAEA,SAAS,qBAAqBA,UAAkB;AAC9C,QAAM,UAAUA,SAAQ,QAAQ,aAAa;AAC7C,UAAQ,YAAY,8BAA8B;AAClD,UAAQ,OAAO,uBAAuB,yFAAyF;AAC/H,UAAQ,OAAO,OAAM,SAAQ;AAC3B,UAAM,SAAS,IAAI,iCAAW,2CAAsB,KAAK,MAAM,GAAG,CAAC,CAAC;AACpE,UAAM,EAAE,OAAO,IAAI,MAAM,OAAO,eAAW,gDAA8B,0BAAc,CAAC;AACxF,UAAM,WAAW,WAAW,gBAAgB,MAAO,WAAW,WAAW,IAAI;AAC7E,qDAA+B,QAAQ;AAAA,EACzC,CAAC;AACH;AAEA,SAAS,oBAAoBA,UAAkB;AAC7C,QAAM,UAAUA,SAAQ,QAAQ,cAAc,EAAE,QAAQ,KAAK,CAAC;AAC9D,UAAQ,YAAY,kBAAkB;AACtC,UAAQ,OAAO,uBAAuB,yFAAyF;AAC/H,UAAQ,OAAO,OAAM,YAAW;AAC9B,UAAM,SAAS,IAAI,iCAAW,2CAAsB,QAAQ,MAAM,GAAG,CAAC,CAAC;AACvE,UAAM,OAAO,mBAAe,gDAA8B,0BAAc,GAAG,YAAY;AAAA,EACzF,CAAC;AACH;AAEA,SAAS,qBAAqBA,UAAkB;AAC9C,QAAM,UAAUA,SAAQ,QAAQ,eAAe,EAAE,QAAQ,KAAK,CAAC;AAC/D,UAAQ,YAAY,mBAAmB;AACvC,UAAQ,OAAO,uBAAuB,yFAAyF;AAC/H,UAAQ,OAAO,iBAAiB,+BAA+B,WAAW;AAC1E,UAAQ,OAAO,iBAAiB,+BAA+B,GAAG;AAClE,UAAQ,OAAO,UAAQ,cAAc,IAAI,CAAC;AAC5C;AAEA,SAAS,qBAAqBA,UAAkB;AAC9C,QAAM,UAAUA,SAAQ,QAAQ,sBAAsB;AACtD,UAAQ,YAAY,kBAAkB;AACtC,UAAQ,OAAO,CAAC,QAAQ,gBAAY,4BAAe,QAAQ,QAAQ,MAAM,CAAC,QAAQ,IAAI,CAAC;AACvF,UAAQ,OAAO,iBAAiB,2BAA2B,WAAW;AACtE,UAAQ,OAAO,iBAAiB,2BAA2B,MAAM;AACjE,UAAQ,YAAY,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAMe;AACjD;AAEA,SAAS,uBAAuBA,UAAkB;AAChD,QAAM,UAAUA,SAAQ,QAAQ,qBAAqB;AACrD,UAAQ,YAAY,sEAAsE;AAC1F,UAAQ,OAAO,OAAO,KAAK,YAAY;AACrC,QAAI;AACF,YAAM,aAAa,KAAK,OAAO;AAAA,IACjC,SAAS,GAAG;AACV,cAAQ,MAAM,CAAC;AACf,uDAA+B,CAAC;AAAA,IAClC;AAAA,EACF,CAAC;AACD,UAAQ,OAAO,uBAAuB,4FAA4F;AAClI,UAAQ,OAAO,yBAAyB,4CAA4C,+BAAiB,IAAI,UAAQ,IAAI,IAAI,GAAG,EAAE,KAAK,IAAI,CAAC,eAAe,6BAAe,IAAI;AAC1K,UAAQ,YAAY,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,mDAKiB;AACnD;AAEA,SAAS,oBAAoBA,UAAkB;AAC7C,QAAM,UAAUA,SAAQ,QAAQ,kBAAkB,EAAE,QAAQ,KAAK,CAAC;AAClE,UAAQ,YAAY,wCAAwC;AAC5D,UAAQ,OAAO,uBAAuB,yFAAyF;AAC/H,UAAQ,OAAO,iBAAiB,sFAAsF;AACtH,UAAQ,OAAO,iBAAiB,sCAAsC;AACtE,UAAQ,OAAO,OAAM,YAAW;AAC9B,UAAM,uBAAmB,2CAAsB,QAAQ,MAAM;AAC7D,UAAM,iBAAuC;AAAA,MAC3C,MAAM;AAAA,MACN,cAAc;AAAA,MACd,SAAS;AAAA,MACT,QAAQ,MAAM,IAAI,iCAAkB,kBAAkB,EAAE,aAAa,QAAQ,SAAS,OAAU,CAAC;AAAA,IACnG;AACA,UAAM,SAAS,UAAM,2BAAe,gBAAgB,EAAE,MAAM,QAAQ,SAAS,SAAY,SAAY,CAAC,QAAQ,KAAK,CAAC;AACpH,QAAI;AACF,cAAQ,MAAM,sBAAsB,MAAM;AAAA,EAC9C,CAAC;AACH;AAEA,eAAe,SAAS,MAAgB,MAA8B;AACpE,YAAM,6BAAe;AACrB,QAAM,eAAe,qBAAqB,IAAI;AAE9C,QAAM,SAAS,UAAM,wCAAmB,KAAK,QAAQ,cAAc,KAAK,SAAS,KAAK;AACtF,SAAO,UAAU;AACjB,SAAO,UAAU,KAAK;AACtB,SAAO,iBAAiB,KAAK,gBAAgB,OAAO,SAAS,KAAK;AAClE,SAAO,gBAAgB,KAAK;AAC5B,SAAO,cAAc,CAAC,CAAC,KAAK;AAC5B,SAAO,mBAAmB,KAAK,WAAW;AAC1C,SAAO,qBAAqB,CAAC,CAAC,KAAK;AACnC,SAAO,gBAAgB,CAAC,CAAC,KAAK;AAC9B,SAAO,iBAAiB,KAAK,cAAc,YAAAC,QAAK,QAAQ,QAAQ,IAAI,GAAG,KAAK,WAAW,IAAI;AAG3F,0CAAe,OAAO,UAAU,OAAO,gBAAgB;AAEvD,MAAI,KAAK,MAAM,KAAK,UAAU,KAAK,QAAQ;AACzC,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,sJAAsJ;AAExK,UAAMC,UAAS,MAAM,WAAW,UAAU,KAAK,QAAQ,cAAc;AAAA,MACnE,MAAM,KAAK;AAAA,MACX,MAAM,KAAK,SAAS,CAAC,KAAK,SAAS;AAAA,MACnC;AAAA,MACA,MAAM,KAAK;AAAA,MACX,YAAY,KAAK;AAAA,MACjB,SAAS,KAAK,WAAW;AAAA,MACzB,UAAU,MAAM,QAAQ,KAAK,QAAQ,IAAI,KAAK,WAAW,KAAK,WAAW,CAAC,KAAK,QAAQ,IAAI;AAAA,IAC7F,CAAC;AACD,cAAM,4BAAc,QAAQ;AAC5B,UAAMC,YAAWD,YAAW,gBAAgB,MAAOA,YAAW,WAAW,IAAI;AAC7E,qDAA+BC,SAAQ;AACvC;AAAA,EACF;AAEA,MAAI,QAAQ,IAAI,cAAc;AAC5B,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,uIAAuI;AAEzJ,UAAMD,UAAS,UAAM;AAAA,UACjB,2CAAsB,KAAK,MAAM;AAAA,MACjC;AAAA,QACE,UAAU,KAAK;AAAA,QACf,OAAO;AAAA,QACP,MAAM,KAAK;AAAA,MACb;AAAA,IACJ;AACA,cAAM,4BAAc,QAAQ;AAC5B,UAAMC,YAAWD,YAAW,gBAAgB,MAAOA,YAAW,WAAW,IAAI;AAC7E,qDAA+BC,SAAQ;AACvC;AAAA,EACF;AAEA,QAAM,SAAS,UAAM,yCAAsB,MAAM;AACjD,YAAM,4BAAc,QAAQ;AAC5B,QAAM,WAAW,WAAW,gBAAgB,MAAO,WAAW,WAAW,IAAI;AAC7E,mDAA+B,QAAQ;AACzC;AAEA,eAAe,cAAc,MAA8B;AACzD,QAAM,OAAO,KAAK,QAAQ;AAC1B,QAAM,OAAO,KAAK,OAAO,CAAC,KAAK,OAAO;AACtC,QAAM,SAAS,MAAM,WAAW,cAAc,KAAK,QAAQ,CAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC9E,QAAM,WAAW,WAAW,gBAAgB,MAAO,WAAW,WAAW,IAAI;AAC7E,mDAA+B,QAAQ;AACzC;AAEA,eAAe,aAAa,WAA+B,MAA8B;AACvF,QAAM,aAAa,KAAK;AACxB,QAAM,SAAS,aAAa,UAAM,wCAAmB,UAAU,IAAI,UAAM,oDAA+B;AAExG,QAAM,MAAM,YAAAF,QAAK,QAAQ,QAAQ,IAAI,GAAG,aAAa,EAAE;AACvD,QAAM,UAAU,MAAM,UAAAG,QAAG,SAAS,KAAK,GAAG,EAAE,MAAM,OAAK,IAAI;AAC3D,MAAI,CAAC;AACH,UAAM,IAAI,MAAM,+BAA+B,GAAG;AACpD,MAAI,CAAC,QAAQ,YAAY;AACvB,UAAM,IAAI,MAAM,IAAI,GAAG,sBAAsB;AAC/C,MAAI,uBAA0D,sBAAsB,KAAK,QAAQ;AACjG,MAAI,CAAC,wBAAwB;AAC3B,2BAAuB,OAAO,OAAO;AACvC,MAAI,CAAC;AACH,2BAAuB,CAAC,CAAC,6BAAe,CAAC;AAC3C,QAAM,kBAAkB,aAAa,OAAO,OAAO,UAAU;AAC7D,YAAM,iCAAmB,QAAQ,KAAK,sBAAuB,eAAe;AAC5E,mDAA+B,CAAC;AAClC;AAEA,SAAS,qBAAqB,SAAqD;AACjF,QAAM,YAAgC;AAAA,IACpC,kBAAkB,QAAQ,mBAAmB,OAAO;AAAA,IACpD,YAAY,QAAQ,aAAa,OAAO;AAAA,IACxC,eAAe,QAAQ,gBAAgB,OAAO;AAAA,IAC9C,eAAe,QAAQ,gBAAgB,SAAS,QAAQ,eAAe,EAAE,IAAI;AAAA,IAC7E,aAAa,QAAQ,IAAI,IAAK,QAAQ,cAAc,SAAS,QAAQ,aAAa,EAAE,IAAI;AAAA,IACxF,WAAW,QAAQ,SAAS,YAAAH,QAAK,QAAQ,QAAQ,IAAI,GAAG,QAAQ,MAAM,IAAI;AAAA,IAC1E,OAAO,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACvC,YAAY,QAAQ,aAAa,SAAS,QAAQ,YAAY,EAAE,IAAI;AAAA,IACpE,SAAS,QAAQ,UAAU,SAAS,QAAQ,SAAS,EAAE,IAAI;AAAA,IAC3D,UAAU,sBAAsB,QAAQ,QAAQ;AAAA,IAChD,OAAO,mBAAmB,QAAQ,KAAK;AAAA,IACvC,SAAS,QAAQ,UAAU,SAAS,QAAQ,SAAS,EAAE,IAAI;AAAA,IAC3D,UAAU,QAAQ,WAAW,YAAAA,QAAK,QAAQ,QAAQ,IAAI,GAAG,QAAQ,QAAQ,IAAI;AAAA,IAC7E,iBAAiB,QAAQ,kBAAkB,CAAC,CAAC,QAAQ,kBAAkB;AAAA,IACvE,iBAAiB,QAAQ;AAAA,IACzB,oBAAoB,QAAQ;AAAA,IAC5B,SAAS,QAAQ;AAAA,EACnB;AAEA,MAAI,QAAQ,SAAS;AACnB,UAAM,aAAa,QAAQ,QAAQ,YAAY;AAC/C,QAAI,CAAC,CAAC,OAAO,YAAY,WAAW,QAAQ,EAAE,SAAS,UAAU;AAC/D,YAAM,IAAI,MAAM,wBAAwB,QAAQ,OAAO,4DAA4D;AACrH,UAAM,eAAe,eAAe,QAAQ,CAAC,YAAY,WAAW,QAAQ,IAAI,CAAC,UAAU;AAC3F,cAAU,WAAW,aAAa,IAAI,iBAAe;AACnD,aAAO;AAAA,QACL,MAAM;AAAA,QACN,KAAK,EAAE,YAAY;AAAA,MACrB;AAAA,IACF,CAAC;AAAA,EACH;AAEA,MAAI,QAAQ,UAAU,QAAQ;AAC5B,cAAU,MAAM,EAAE,UAAU,MAAM;AACpC,MAAI,CAAC,QAAQ,MAAM,QAAQ,OAAO;AAChC,cAAU,QAAQ;AAClB,YAAQ,IAAI,UAAU;AAAA,EACxB;AACA,MAAI,CAAC,QAAQ,MAAM,QAAQ,OAAO;AAChC,cAAU,MAAM,UAAU,OAAO,CAAC;AAClC,cAAU,IAAI,QAAQ,QAAQ;AAAA,EAChC;AACA,MAAI,UAAU,YAAY,CAAC,UAAAG,QAAG,WAAW,UAAU,QAAQ;AACzD,UAAM,IAAI,MAAM,eAAe,QAAQ,QAAQ,kBAAkB;AAEnE,SAAO;AACT;AAEA,SAAS,sBAAsB,UAAsD;AACnF,MAAI,CAAC,YAAY,CAAC,SAAS;AACzB,WAAO;AACT,SAAO,SAAS,MAAM,GAAG,EAAE,IAAI,CAAC,MAAc,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACpE;AAEA,SAAS,mBAAmB,OAA6C;AACvE,MAAI,CAAC;AACH,WAAO;AAET,QAAM,YAAY,MAAM,MAAM,GAAG;AAEjC,MAAI,UAAU,WAAW,GAAG;AAC1B,UAAM,IAAI;AAAA,MACN,YAAY,KAAK;AAAA,IACrB;AAAA,EACF;AAEA,QAAM,UAAU,SAAS,UAAU,CAAC,GAAG,EAAE;AACzC,QAAM,QAAQ,SAAS,UAAU,CAAC,GAAG,EAAE;AAEvC,MAAI,MAAM,KAAK,KAAK,QAAQ;AAC1B,UAAM,IAAI,MAAM,YAAY,KAAK,mCAAmC;AAGtE,MAAI,MAAM,OAAO,KAAK,UAAU,KAAK,UAAU,OAAO;AACpD,UAAM,IAAI;AAAA,MACN,YAAY,KAAK;AAAA,IACrB;AAAA,EACF;AAEA,SAAO,EAAE,SAAS,MAAM;AAC1B;AAEA,SAAS,gBAAgB,IAAY;AACnC,MAAI,+BAAiB,SAAS,EAAS;AACrC,WAAO;AACT,QAAM,YAAY,YAAAH,QAAK,QAAQ,QAAQ,IAAI,GAAG,EAAE;AAChD,MAAI,UAAAG,QAAG,WAAW,SAAS;AACzB,WAAO;AACT,SAAO,QAAQ,QAAQ,IAAI,EAAE,OAAO,CAAC,QAAQ,IAAI,CAAC,EAAE,CAAC;AACvD;AAEA,MAAM,cAA2B,CAAC,MAAM,OAAO,kBAAkB,kBAAkB,qBAAqB,yBAAyB;AAIjI,MAAM,cAAwF;AAAA;AAAA,EAC3E,CAAC,uBAAuB,EAAE,aAAa,kGAAkG,CAAC;AAAA,EAC3J,CAAC,uBAAuB,EAAE,aAAa,0FAA0F,CAAC;AAAA,EAClI,CAAC,WAAW,EAAE,aAAa,qJAAqJ,CAAC;AAAA,EACjL,CAAC,yBAAyB,EAAE,aAAa,wDAAwD,CAAC;AAAA,EAClG,CAAC,iBAAiB,EAAE,aAAa,+CAA+C,CAAC;AAAA,EACjF,CAAC,oBAAoB,EAAE,aAAa,6CAA6C,CAAC;AAAA,EAClF,CAAC,8BAA8B,EAAE,aAAa,4EAA4E,CAAC;AAAA,EAC3H,CAAC,qBAAqB,EAAE,aAAa,kEAAkE,CAAC;AAAA,EACxG,CAAC,wBAAwB,EAAE,aAAa,2DAA2D,CAAC;AAAA,EACpG,CAAC,YAAY,EAAE,aAAa,mDAAmD,CAAC;AAAA,EAChF,CAAC,sBAAsB,EAAE,aAAa,8CAA8C,CAAC;AAAA,EACrF,CAAC,iBAAiB,EAAE,aAAa,2BAA2B,CAAC;AAAA,EAC7D,CAAC,0BAA0B,EAAE,aAAa,qEAAqE,CAAC;AAAA,EAChH,CAAC,UAAU,EAAE,aAAa,wDAAwD,CAAC;AAAA,EACnF,CAAC,sBAAsB,EAAE,aAAa,kCAAkC,CAAC;AAAA,EACzE,CAAC,aAAa,EAAE,aAAa,kCAAkC,CAAC;AAAA,EAChE,CAAC,kBAAkB,EAAE,aAAa,wDAAwD,CAAC;AAAA,EAC3F,CAAC,wBAAwB,EAAE,aAAa,uIAAuI,CAAC;AAAA,EAChL,CAAC,wBAAwB,EAAE,aAAa,qDAAqD,CAAC;AAAA,EAC9F,CAAC,+BAA+B,EAAE,aAAa,wGAAwG,CAAC;AAAA,EACxJ,CAAC,WAAW,EAAE,aAAa,iBAAiB,CAAC;AAAA,EAC7C,CAAC,qBAAqB,EAAE,aAAa,qCAAqC,CAAC;AAAA,EAC3E,CAAC,yBAAyB,EAAE,aAAa,4CAA4C,+BAAiB,IAAI,UAAQ,IAAI,IAAI,GAAG,EAAE,KAAK,IAAI,CAAC,eAAe,6BAAe,KAAK,CAAC;AAAA,EAC7K,CAAC,uBAAuB,EAAE,aAAa,iFAAiF,CAAC;AAAA,EACzH,CAAC,mBAAmB,EAAE,aAAa,iHAAiH,CAAC;AAAA,EACrJ,CAAC,uBAAuB,EAAE,aAAa,gFAAgF,4BAAc,IAAI,CAAC;AAAA,EAC1I,CAAC,kBAAkB,EAAE,aAAa,sBAAsB,SAAS,YAAwB,CAAC;AAAA,EAC1F,CAAC,qBAAqB,EAAE,aAAa,2HAA2H,CAAC;AAAA,EACjK,CAAC,QAAQ,EAAE,aAAa,mCAAmC,CAAC;AAAA,EAC5D,CAAC,oBAAoB,EAAE,aAAa,wEAAwE,CAAC;AAAA,EAC7G,CAAC,oBAAoB,EAAE,aAAa,6FAA6F,CAAC;AAAA,EAClI,CAAC,iCAAiC,EAAE,aAAa,8FAA8F,SAAS,CAAC,OAAO,WAAW,WAAW,MAAM,GAAG,QAAQ,UAAU,CAAC;AAAA,EAClN,CAAC,mCAAmC,EAAE,aAAa,wDAAwD,SAAS,CAAC,aAAa,QAAQ,OAAO,EAAE,CAAC;AAAA,EACpJ,CAAC,2BAA2B,EAAE,aAAa,kHAAkH,CAAC;AAAA,EAC9J,CAAC,MAAM,EAAE,aAAa,+BAA+B,CAAC;AACxD;AAEA,eAAe,sBAAO;AACtB,qBAAqB,sBAAO;AAC5B,uBAAuB,sBAAO;AAC9B,qBAAqB,sBAAO;AAC5B,oBAAoB,sBAAO;AAC3B,oBAAoB,sBAAO;AAC3B,qBAAqB,sBAAO;",
  "names": ["import_program", "program", "path", "status", "exitCode", "fs"]
}
