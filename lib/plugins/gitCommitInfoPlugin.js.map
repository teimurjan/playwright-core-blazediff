{
  "version": 3,
  "sources": ["../../src/plugins/gitCommitInfoPlugin.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fs from 'fs';\n\nimport { monotonicTime, spawnAsync } from 'playwright-core/lib/utils';\n\nimport type { TestRunnerPlugin } from './';\nimport type { FullConfig } from '../../types/testReporter';\nimport type { FullConfigInternal } from '../common/config';\nimport type { GitCommitInfo, CIInfo, MetadataWithCommitInfo } from '../isomorphic/types';\n\nconst GIT_OPERATIONS_TIMEOUT_MS = 3000;\n\nexport const addGitCommitInfoPlugin = (fullConfig: FullConfigInternal) => {\n  fullConfig.plugins.push({ factory: gitCommitInfoPlugin.bind(null, fullConfig) });\n};\n\nfunction print(s: string, ...args: any[]) {\n  // eslint-disable-next-line no-console\n  console.log('GitCommitInfo: ' + s, ...args);\n}\n\nfunction debug(s: string, ...args: any[]) {\n  if (!process.env.DEBUG_GIT_COMMIT_INFO)\n    return;\n  print(s, ...args);\n}\n\nconst gitCommitInfoPlugin = (fullConfig: FullConfigInternal): TestRunnerPlugin => {\n  return {\n    name: 'playwright:git-commit-info',\n\n    setup: async (config: FullConfig, configDir: string) => {\n      const metadata = config.metadata as MetadataWithCommitInfo;\n      const ci = await ciInfo();\n      if (!metadata.ci && ci) {\n        debug('ci info', ci);\n        metadata.ci = ci;\n      }\n\n      if (fullConfig.captureGitInfo?.commit || (fullConfig.captureGitInfo?.commit === undefined && ci)) {\n        const git = await gitCommitInfo(configDir).catch(e => print('failed to get git commit info', e));\n        if (git) {\n          debug('commit info', git);\n          metadata.gitCommit = git;\n        }\n      }\n\n      if (fullConfig.captureGitInfo?.diff || (fullConfig.captureGitInfo?.diff === undefined && ci)) {\n        const diffResult = await gitDiff(configDir, ci).catch(e => print('failed to get git diff', e));\n        if (diffResult) {\n          debug(`diff length ${diffResult.length}`);\n          metadata.gitDiff = diffResult;\n        }\n      }\n    },\n  };\n};\n\nasync function ciInfo(): Promise<CIInfo | undefined> {\n  if (process.env.GITHUB_ACTIONS) {\n    let pr: { title: string, number: number, baseHash: string } | undefined;\n    try {\n      const json = JSON.parse(await fs.promises.readFile(process.env.GITHUB_EVENT_PATH!, 'utf8'));\n      pr = { title: json.pull_request.title, number: json.pull_request.number, baseHash: json.pull_request.base.sha };\n    } catch {\n    }\n\n    return {\n      commitHref: `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/commit/${process.env.GITHUB_SHA}`,\n      commitHash: process.env.GITHUB_SHA,\n      prHref: pr ? `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/pull/${pr.number}` : undefined,\n      prTitle: pr?.title,\n      prBaseHash: pr?.baseHash,\n      buildHref: `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`,\n    };\n  }\n\n  if (process.env.GITLAB_CI) {\n    return {\n      commitHref: `${process.env.CI_PROJECT_URL}/-/commit/${process.env.CI_COMMIT_SHA}`,\n      commitHash: process.env.CI_COMMIT_SHA,\n      buildHref: process.env.CI_JOB_URL,\n      branch: process.env.CI_COMMIT_REF_NAME,\n    };\n  }\n\n  if (process.env.JENKINS_URL && process.env.BUILD_URL) {\n    return {\n      commitHref: process.env.BUILD_URL,\n      commitHash: process.env.GIT_COMMIT,\n      branch: process.env.GIT_BRANCH,\n    };\n  }\n\n  // Open to PRs.\n}\n\nasync function gitCommitInfo(gitDir: string): Promise<GitCommitInfo | undefined> {\n  const separator = `---786eec917292---`;\n  const tokens = [\n    '%H',  // commit hash\n    '%h',  // abbreviated commit hash\n    '%s',  // subject\n    '%B',  // raw body (unwrapped subject and body)\n    '%an', // author name\n    '%ae', // author email\n    '%at', // author date, UNIX timestamp\n    '%cn', // committer name\n    '%ce', // committer email\n    '%ct', // committer date, UNIX timestamp\n    '',    // branch\n  ];\n  const output = await runGit(`git log -1 --pretty=format:\"${tokens.join(separator)}\" && git rev-parse --abbrev-ref HEAD`, gitDir);\n  if (!output)\n    return undefined;\n  const [hash, shortHash, subject, body, authorName, authorEmail, authorTime, committerName, committerEmail, committerTime, branch] = output.split(separator);\n\n  return {\n    shortHash,\n    hash,\n    subject,\n    body,\n    author: {\n      name: authorName,\n      email: authorEmail,\n      time: +authorTime * 1000,\n    },\n    committer: {\n      name: committerName,\n      email: committerEmail,\n      time: +committerTime * 1000,\n    },\n    branch: branch.trim(),\n  };\n}\n\nasync function gitDiff(gitDir: string, ci?: CIInfo): Promise<string | undefined> {\n  const diffLimit = 100_000;\n  if (ci?.prBaseHash) {\n    // https://git-scm.com/docs/git-fetch\n    await runGit(`git fetch origin ${ci.prBaseHash} --depth=1 --no-auto-maintenance --no-auto-gc --no-tags --no-recurse-submodules`, gitDir);\n    const diff = await runGit(`git diff ${ci.prBaseHash} HEAD`, gitDir);\n    if (diff)\n      return diff.substring(0, diffLimit);\n  }\n\n  // Do not attempt to diff on CI commit.\n  if (ci)\n    return;\n\n  // Check dirty state first.\n  const uncommitted = await runGit('git diff', gitDir);\n  if (uncommitted === undefined) {\n    // Failed to run git diff.\n    return;\n  }\n  if (uncommitted)\n    return uncommitted.substring(0, diffLimit);\n\n  // Assume non-shallow checkout on local.\n  const diff = await runGit('git diff HEAD~1', gitDir);\n  return diff?.substring(0, diffLimit);\n}\n\nasync function runGit(command: string, cwd: string): Promise<string | undefined> {\n  debug(`running \"${command}\"`);\n  const start = monotonicTime();\n  const result = await spawnAsync(\n      command,\n      [],\n      { stdio: 'pipe', cwd, timeout: GIT_OPERATIONS_TIMEOUT_MS, shell: true }\n  );\n  if (monotonicTime() - start > GIT_OPERATIONS_TIMEOUT_MS) {\n    print(`timeout of ${GIT_OPERATIONS_TIMEOUT_MS}ms exceeded while running \"${command}\"`);\n    return;\n  }\n  if (result.code)\n    debug(`failure, code=${result.code}\\n\\n${result.stderr}`);\n  else\n    debug(`success`);\n  return result.code ? undefined : result.stdout.trim();\n}\n"],
  "mappings": "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",
  "names": ["diff"]
}
