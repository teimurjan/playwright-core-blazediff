{
  "version": 3,
  "sources": ["../../src/plugins/webServerPlugin.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport net from 'net';\nimport path from 'path';\n\nimport { launchProcess, isURLAvailable, monotonicTime, raceAgainstDeadline } from 'playwright-core/lib/utils';\nimport { colors } from 'playwright-core/lib/utils';\nimport { debug } from 'playwright-core/lib/utilsBundle';\n\nimport type { TestRunnerPlugin } from '.';\nimport type { FullConfig } from '../../types/testReporter';\nimport type { FullConfigInternal } from '../common/config';\nimport type { ReporterV2 } from '../reporters/reporterV2';\n\n\nexport type WebServerPluginOptions = {\n  command: string;\n  url?: string;\n  ignoreHTTPSErrors?: boolean;\n  timeout?: number;\n  gracefulShutdown?: { signal: 'SIGINT' | 'SIGTERM', timeout?: number };\n  reuseExistingServer?: boolean;\n  cwd?: string;\n  env?: { [key: string]: string; };\n  stdout?: 'pipe' | 'ignore';\n  stderr?: 'pipe' | 'ignore';\n  name?: string;\n};\n\nconst DEFAULT_ENVIRONMENT_VARIABLES = {\n  'BROWSER': 'none', // Disable that create-react-app will open the page in the browser\n  'FORCE_COLOR': '1',\n  'DEBUG_COLORS': '1',\n};\n\nconst debugWebServer = debug('pw:webserver');\n\nexport class WebServerPlugin implements TestRunnerPlugin {\n  private _isAvailableCallback?: () => Promise<boolean>;\n  private _killProcess?: () => Promise<void>;\n  private _processExitedPromise!: Promise<any>;\n  private _options: WebServerPluginOptions;\n  private _checkPortOnly: boolean;\n  private _reporter?: ReporterV2;\n  name = 'playwright:webserver';\n\n  constructor(options: WebServerPluginOptions, checkPortOnly: boolean) {\n    this._options = options;\n    this._checkPortOnly = checkPortOnly;\n  }\n\n  public async setup(config: FullConfig, configDir: string, reporter: ReporterV2) {\n    this._reporter = reporter;\n    this._isAvailableCallback = this._options.url ? getIsAvailableFunction(this._options.url, this._checkPortOnly, !!this._options.ignoreHTTPSErrors, this._reporter.onStdErr?.bind(this._reporter)) : undefined;\n    this._options.cwd = this._options.cwd ? path.resolve(configDir, this._options.cwd) : configDir;\n    try {\n      await this._startProcess();\n      await this._waitForProcess();\n    } catch (error) {\n      await this.teardown();\n      throw error;\n    }\n  }\n\n  public async teardown() {\n    debugWebServer(`Terminating the WebServer`);\n    await this._killProcess?.();\n    debugWebServer(`Terminated the WebServer`);\n  }\n\n  private async _startProcess(): Promise<void> {\n    let processExitedReject = (error: Error) => { };\n    this._processExitedPromise = new Promise((_, reject) => processExitedReject = reject);\n\n    const isAlreadyAvailable = await this._isAvailableCallback?.();\n    if (isAlreadyAvailable) {\n      debugWebServer(`WebServer is already available`);\n      if (this._options.reuseExistingServer)\n        return;\n      const port = new URL(this._options.url!).port;\n      throw new Error(`${this._options.url ?? `http://localhost${port ? ':' + port : ''}`} is already used, make sure that nothing is running on the port/url or set reuseExistingServer:true in config.webServer.`);\n    }\n\n    if (!this._options.command)\n      throw new Error('config.webServer.command cannot be empty');\n\n    debugWebServer(`Starting WebServer process ${this._options.command}...`);\n    const { launchedProcess, gracefullyClose } = await launchProcess({\n      command: this._options.command,\n      env: {\n        ...DEFAULT_ENVIRONMENT_VARIABLES,\n        ...process.env,\n        ...this._options.env,\n      },\n      cwd: this._options.cwd,\n      stdio: 'stdin',\n      shell: true,\n      attemptToGracefullyClose: async () => {\n        if (process.platform === 'win32')\n          throw new Error('Graceful shutdown is not supported on Windows');\n        if (!this._options.gracefulShutdown)\n          throw new Error('skip graceful shutdown');\n\n        const { signal, timeout = 0 } = this._options.gracefulShutdown;\n\n        // proper usage of SIGINT is to send it to the entire process group, see https://www.cons.org/cracauer/sigint.html\n        // there's no such convention for SIGTERM, so we decide what we want. signaling the process group for consistency.\n        process.kill(-launchedProcess.pid!, signal);\n\n        return new Promise<void>((resolve, reject) => {\n          const timer = timeout !== 0\n            ? setTimeout(() => reject(new Error(`process didn't close gracefully within timeout`)), timeout)\n            : undefined;\n          launchedProcess.once('close', (...args) => {\n            clearTimeout(timer);\n            resolve();\n          });\n        });\n      },\n      log: () => {},\n      onExit: code => processExitedReject(new Error(code ? `Process from config.webServer was not able to start. Exit code: ${code}` : 'Process from config.webServer exited early.')),\n      tempDirectories: [],\n    });\n    this._killProcess = gracefullyClose;\n\n    debugWebServer(`Process started`);\n\n    launchedProcess.stderr!.on('data', data => {\n      if (debugWebServer.enabled || (this._options.stderr === 'pipe' || !this._options.stderr))\n        this._reporter!.onStdErr?.(prefixOutputLines(data.toString(), this._options.name));\n    });\n    launchedProcess.stdout!.on('data', data => {\n      if (debugWebServer.enabled || this._options.stdout === 'pipe')\n        this._reporter!.onStdOut?.(prefixOutputLines(data.toString(), this._options.name));\n    });\n  }\n\n  private async _waitForProcess() {\n    if (!this._isAvailableCallback) {\n      this._processExitedPromise.catch(() => {});\n      return;\n    }\n    debugWebServer(`Waiting for availability...`);\n    const launchTimeout = this._options.timeout || 60 * 1000;\n    const cancellationToken = { canceled: false };\n    const { timedOut } = (await Promise.race([\n      raceAgainstDeadline(() => waitFor(this._isAvailableCallback!, cancellationToken), monotonicTime() + launchTimeout),\n      this._processExitedPromise,\n    ]));\n    cancellationToken.canceled = true;\n    if (timedOut)\n      throw new Error(`Timed out waiting ${launchTimeout}ms from config.webServer.`);\n    debugWebServer(`WebServer available`);\n  }\n}\n\nasync function isPortUsed(port: number): Promise<boolean> {\n  const innerIsPortUsed = (host: string) => new Promise<boolean>(resolve => {\n    const conn = net\n        .connect(port, host)\n        .on('error', () => {\n          resolve(false);\n        })\n        .on('connect', () => {\n          conn.end();\n          resolve(true);\n        });\n  });\n  return await innerIsPortUsed('127.0.0.1') || await innerIsPortUsed('::1');\n}\n\nasync function waitFor(waitFn: () => Promise<boolean>, cancellationToken: { canceled: boolean }) {\n  const logScale = [100, 250, 500];\n  while (!cancellationToken.canceled) {\n    const connected = await waitFn();\n    if (connected)\n      return;\n    const delay = logScale.shift() || 1000;\n    debugWebServer(`Waiting ${delay}ms`);\n    await new Promise(x => setTimeout(x, delay));\n  }\n}\n\nfunction getIsAvailableFunction(url: string, checkPortOnly: boolean, ignoreHTTPSErrors: boolean, onStdErr: ReporterV2['onStdErr']) {\n  const urlObject = new URL(url);\n  if (!checkPortOnly)\n    return () => isURLAvailable(urlObject, ignoreHTTPSErrors, debugWebServer, onStdErr);\n  const port = urlObject.port;\n  return () => isPortUsed(+port);\n}\n\nexport const webServer = (options: WebServerPluginOptions): TestRunnerPlugin => {\n  return new WebServerPlugin(options, false);\n};\n\nexport const webServerPluginsForConfig = (config: FullConfigInternal): TestRunnerPlugin[] => {\n  const shouldSetBaseUrl = !!config.config.webServer;\n  const webServerPlugins = [];\n  for (const webServerConfig of config.webServers) {\n    if (webServerConfig.port && webServerConfig.url)\n      throw new Error(`Either 'port' or 'url' should be specified in config.webServer.`);\n\n    let url: string | undefined;\n    if (webServerConfig.port || webServerConfig.url) {\n      url = webServerConfig.url || `http://localhost:${webServerConfig.port}`;\n\n      // We only set base url when only the port is given. That's a legacy mode we have regrets about.\n      if (shouldSetBaseUrl && !webServerConfig.url)\n        process.env.PLAYWRIGHT_TEST_BASE_URL = url;\n    }\n    webServerPlugins.push(new WebServerPlugin({ ...webServerConfig,  url }, webServerConfig.port !== undefined));\n  }\n\n  return webServerPlugins;\n};\n\nfunction prefixOutputLines(output: string, prefixName: string = 'WebServer'): string {\n  const lastIsNewLine = output[output.length - 1] === '\\n';\n  let lines = output.split('\\n');\n  if (lastIsNewLine)\n    lines.pop();\n  lines = lines.map(line => colors.dim(`[${prefixName}] `) + line);\n  if (lastIsNewLine)\n    lines.push('');\n  return lines.join('\\n');\n}\n"],
  "mappings": "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",
  "names": ["import_utils", "path", "net"]
}
