{
  "version": 3,
  "sources": ["../../src/client/android.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './eventEmitter';\nimport { BrowserContext, prepareBrowserContextParams } from './browserContext';\nimport { ChannelOwner } from './channelOwner';\nimport { TargetClosedError, isTargetClosedError } from './errors';\nimport { Events } from './events';\nimport { Waiter } from './waiter';\nimport { TimeoutSettings } from './timeoutSettings';\nimport { isRegExp, isString } from '../utils/isomorphic/rtti';\nimport { monotonicTime } from '../utils/isomorphic/time';\nimport { raceAgainstDeadline } from '../utils/isomorphic/timeoutRunner';\nimport { connectOverWebSocket } from './webSocket';\n\nimport type { Page } from './page';\nimport type * as types from './types';\nimport type * as api from '../../types/types';\nimport type { AndroidServerLauncherImpl } from '../androidServerImpl';\nimport type { Platform } from './platform';\nimport type * as channels from '@protocol/channels';\nimport type { Playwright } from './playwright';\n\ntype Direction = 'down' | 'up' | 'left' | 'right';\ntype SpeedOptions = { speed?: number };\n\nexport class Android extends ChannelOwner<channels.AndroidChannel> implements api.Android {\n  _playwright!: Playwright;\n  readonly _timeoutSettings: TimeoutSettings;\n  _serverLauncher?: AndroidServerLauncherImpl;\n\n  static from(android: channels.AndroidChannel): Android {\n    return (android as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.AndroidInitializer) {\n    super(parent, type, guid, initializer);\n    this._timeoutSettings = new TimeoutSettings(this._platform);\n  }\n\n  setDefaultTimeout(timeout: number) {\n    this._timeoutSettings.setDefaultTimeout(timeout);\n  }\n\n  async devices(options: { port?: number } = {}): Promise<AndroidDevice[]> {\n    const { devices } = await this._channel.devices(options);\n    return devices.map(d => AndroidDevice.from(d));\n  }\n\n  async launchServer(options: types.LaunchServerOptions = {}): Promise<api.BrowserServer> {\n    if (!this._serverLauncher)\n      throw new Error('Launching server is not supported');\n    return await this._serverLauncher.launchServer(options);\n  }\n\n  async connect(wsEndpoint: string, options: Parameters<api.Android['connect']>[1] = {}): Promise<api.AndroidDevice> {\n    return await this._wrapApiCall(async () => {\n      const deadline = options.timeout ? monotonicTime() + options.timeout : 0;\n      const headers = { 'x-playwright-browser': 'android', ...options.headers };\n      const connectParams: channels.LocalUtilsConnectParams = { wsEndpoint, headers, slowMo: options.slowMo, timeout: options.timeout || 0 };\n      const connection = await connectOverWebSocket(this._connection, connectParams);\n\n      let device: AndroidDevice;\n      connection.on('close', () => {\n        device?._didClose();\n      });\n\n      const result = await raceAgainstDeadline(async () => {\n        const playwright = await connection!.initializePlaywright();\n        if (!playwright._initializer.preConnectedAndroidDevice) {\n          connection.close();\n          throw new Error('Malformed endpoint. Did you use Android.launchServer method?');\n        }\n        device = AndroidDevice.from(playwright._initializer.preConnectedAndroidDevice!);\n        device._shouldCloseConnectionOnClose = true;\n        device.on(Events.AndroidDevice.Close, () => connection.close());\n        return device;\n      }, deadline);\n      if (!result.timedOut) {\n        return result.result;\n      } else {\n        connection.close();\n        throw new Error(`Timeout ${options.timeout}ms exceeded`);\n      }\n    });\n  }\n}\n\nexport class AndroidDevice extends ChannelOwner<channels.AndroidDeviceChannel> implements api.AndroidDevice {\n  readonly _timeoutSettings: TimeoutSettings;\n  private _webViews = new Map<string, AndroidWebView>();\n  private _android: Android;\n  _shouldCloseConnectionOnClose = false;\n\n  static from(androidDevice: channels.AndroidDeviceChannel): AndroidDevice {\n    return (androidDevice as any)._object;\n  }\n\n  input: AndroidInput;\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.AndroidDeviceInitializer) {\n    super(parent, type, guid, initializer);\n    this._android = parent as Android;\n    this.input = new AndroidInput(this);\n    this._timeoutSettings = new TimeoutSettings(this._platform, (parent as Android)._timeoutSettings);\n    this._channel.on('webViewAdded', ({ webView }) => this._onWebViewAdded(webView));\n    this._channel.on('webViewRemoved', ({ socketName }) => this._onWebViewRemoved(socketName));\n    this._channel.on('close', () => this._didClose());\n  }\n\n  private _onWebViewAdded(webView: channels.AndroidWebView) {\n    const view = new AndroidWebView(this, webView);\n    this._webViews.set(webView.socketName, view);\n    this.emit(Events.AndroidDevice.WebView, view);\n  }\n\n  private _onWebViewRemoved(socketName: string) {\n    const view = this._webViews.get(socketName);\n    this._webViews.delete(socketName);\n    if (view)\n      view.emit(Events.AndroidWebView.Close);\n  }\n\n  setDefaultTimeout(timeout: number) {\n    this._timeoutSettings.setDefaultTimeout(timeout);\n  }\n\n  serial(): string {\n    return this._initializer.serial;\n  }\n\n  model(): string {\n    return this._initializer.model;\n  }\n\n  webViews(): AndroidWebView[] {\n    return [...this._webViews.values()];\n  }\n\n  async webView(selector: { pkg?: string; socketName?: string; }, options?: types.TimeoutOptions): Promise<AndroidWebView> {\n    const predicate = (v: AndroidWebView) => {\n      if (selector.pkg)\n        return v.pkg() === selector.pkg;\n      if (selector.socketName)\n        return v._socketName() === selector.socketName;\n      return false;\n    };\n    const webView = [...this._webViews.values()].find(predicate);\n    if (webView)\n      return webView;\n    return await this.waitForEvent('webview', { ...options, predicate });\n  }\n\n  async wait(selector: api.AndroidSelector, options: { state?: 'gone' } & types.TimeoutOptions = {}) {\n    await this._channel.wait({ androidSelector: toSelectorChannel(selector), ...options, timeout: this._timeoutSettings.timeout(options) });\n  }\n\n  async fill(selector: api.AndroidSelector, text: string, options: types.TimeoutOptions = {}) {\n    await this._channel.fill({ androidSelector: toSelectorChannel(selector), text, ...options, timeout: this._timeoutSettings.timeout(options) });\n  }\n\n  async press(selector: api.AndroidSelector, key: api.AndroidKey, options: types.TimeoutOptions = {}) {\n    await this.tap(selector, options);\n    await this.input.press(key);\n  }\n\n  async tap(selector: api.AndroidSelector, options: { duration?: number } & types.TimeoutOptions = {}) {\n    await this._channel.tap({ androidSelector: toSelectorChannel(selector), ...options, timeout: this._timeoutSettings.timeout(options) });\n  }\n\n  async drag(selector: api.AndroidSelector, dest: types.Point, options: SpeedOptions & types.TimeoutOptions = {}) {\n    await this._channel.drag({ androidSelector: toSelectorChannel(selector), dest, ...options, timeout: this._timeoutSettings.timeout(options) });\n  }\n\n  async fling(selector: api.AndroidSelector, direction: Direction, options: SpeedOptions & types.TimeoutOptions = {}) {\n    await this._channel.fling({ androidSelector: toSelectorChannel(selector), direction, ...options, timeout: this._timeoutSettings.timeout(options) });\n  }\n\n  async longTap(selector: api.AndroidSelector, options: types.TimeoutOptions = {}) {\n    await this._channel.longTap({ androidSelector: toSelectorChannel(selector), ...options, timeout: this._timeoutSettings.timeout(options) });\n  }\n\n  async pinchClose(selector: api.AndroidSelector, percent: number, options: SpeedOptions & types.TimeoutOptions = {}) {\n    await this._channel.pinchClose({ androidSelector: toSelectorChannel(selector), percent, ...options, timeout: this._timeoutSettings.timeout(options) });\n  }\n\n  async pinchOpen(selector: api.AndroidSelector, percent: number, options: SpeedOptions & types.TimeoutOptions = {}) {\n    await this._channel.pinchOpen({ androidSelector: toSelectorChannel(selector), percent, ...options, timeout: this._timeoutSettings.timeout(options) });\n  }\n\n  async scroll(selector: api.AndroidSelector, direction: Direction, percent: number, options: SpeedOptions & types.TimeoutOptions = {}) {\n    await this._channel.scroll({ androidSelector: toSelectorChannel(selector), direction, percent, ...options, timeout: this._timeoutSettings.timeout(options) });\n  }\n\n  async swipe(selector: api.AndroidSelector, direction: Direction, percent: number, options: SpeedOptions & types.TimeoutOptions = {}) {\n    await this._channel.swipe({ androidSelector: toSelectorChannel(selector), direction, percent, ...options, timeout: this._timeoutSettings.timeout(options) });\n  }\n\n  async info(selector: api.AndroidSelector): Promise<api.AndroidElementInfo> {\n    return (await this._channel.info({ androidSelector: toSelectorChannel(selector) })).info;\n  }\n\n  async screenshot(options: { path?: string } = {}): Promise<Buffer> {\n    const { binary } = await this._channel.screenshot();\n    if (options.path)\n      await this._platform.fs().promises.writeFile(options.path, binary);\n    return binary;\n  }\n\n  async [Symbol.asyncDispose]() {\n    await this.close();\n  }\n\n  async close() {\n    try {\n      if (this._shouldCloseConnectionOnClose)\n        this._connection.close();\n      else\n        await this._channel.close();\n    } catch (e) {\n      if (isTargetClosedError(e))\n        return;\n      throw e;\n    }\n  }\n\n  _didClose() {\n    this.emit(Events.AndroidDevice.Close, this);\n  }\n\n  async shell(command: string): Promise<Buffer> {\n    const { result } = await this._channel.shell({ command });\n    return result;\n  }\n\n  async open(command: string): Promise<AndroidSocket> {\n    return AndroidSocket.from((await this._channel.open({ command })).socket);\n  }\n\n  async installApk(file: string | Buffer, options?: { args: string[] }): Promise<void> {\n    await this._channel.installApk({ file: await loadFile(this._platform, file), args: options && options.args });\n  }\n\n  async push(file: string | Buffer, path: string, options?: { mode: number }): Promise<void> {\n    await this._channel.push({ file: await loadFile(this._platform, file), path, mode: options ? options.mode : undefined });\n  }\n\n  async launchBrowser(options: types.BrowserContextOptions & { pkg?: string } = {}): Promise<BrowserContext> {\n    const contextOptions = await prepareBrowserContextParams(this._platform, options);\n    const result = await this._channel.launchBrowser(contextOptions);\n    const context = BrowserContext.from(result.context);\n    const selectors = this._android._playwright.selectors;\n    selectors._contextsForSelectors.add(context);\n    context.once(Events.BrowserContext.Close, () => selectors._contextsForSelectors.delete(context));\n    await context._initializeHarFromOptions(options.recordHar);\n    return context;\n  }\n\n  async waitForEvent(event: string, optionsOrPredicate: types.WaitForEventOptions = {}): Promise<any> {\n    return await this._wrapApiCall(async () => {\n      const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === 'function' ? {} : optionsOrPredicate);\n      const predicate = typeof optionsOrPredicate === 'function' ? optionsOrPredicate : optionsOrPredicate.predicate;\n      const waiter = Waiter.createForEvent(this, event);\n      waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event \"${event}\"`);\n      if (event !== Events.AndroidDevice.Close)\n        waiter.rejectOnEvent(this, Events.AndroidDevice.Close, () => new TargetClosedError());\n      const result = await waiter.waitForEvent(this, event, predicate as any);\n      waiter.dispose();\n      return result;\n    });\n  }\n}\n\nexport class AndroidSocket extends ChannelOwner<channels.AndroidSocketChannel> implements api.AndroidSocket {\n  static from(androidDevice: channels.AndroidSocketChannel): AndroidSocket {\n    return (androidDevice as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.AndroidSocketInitializer) {\n    super(parent, type, guid, initializer);\n    this._channel.on('data', ({ data }) => this.emit(Events.AndroidSocket.Data, data));\n    this._channel.on('close', () => this.emit(Events.AndroidSocket.Close));\n  }\n\n  async write(data: Buffer): Promise<void> {\n    await this._channel.write({ data });\n  }\n\n  async close(): Promise<void> {\n    await this._channel.close();\n  }\n\n  async [Symbol.asyncDispose]() {\n    await this.close();\n  }\n}\n\nasync function loadFile(platform: Platform, file: string | Buffer): Promise<Buffer> {\n  if (isString(file))\n    return await platform.fs().promises.readFile(file);\n  return file;\n}\n\nexport class AndroidInput implements api.AndroidInput {\n  private _device: AndroidDevice;\n\n  constructor(device: AndroidDevice) {\n    this._device = device;\n  }\n\n  async type(text: string) {\n    await this._device._channel.inputType({ text });\n  }\n\n  async press(key: api.AndroidKey) {\n    await this._device._channel.inputPress({ key });\n  }\n\n  async tap(point: types.Point) {\n    await this._device._channel.inputTap({ point });\n  }\n\n  async swipe(from: types.Point, segments: types.Point[], steps: number) {\n    await this._device._channel.inputSwipe({ segments, steps });\n  }\n\n  async drag(from: types.Point, to: types.Point, steps: number) {\n    await this._device._channel.inputDrag({ from, to, steps });\n  }\n}\n\nfunction toSelectorChannel(selector: api.AndroidSelector): channels.AndroidSelector {\n  const {\n    checkable,\n    checked,\n    clazz,\n    clickable,\n    depth,\n    desc,\n    enabled,\n    focusable,\n    focused,\n    hasChild,\n    hasDescendant,\n    longClickable,\n    pkg,\n    res,\n    scrollable,\n    selected,\n    text,\n  } = selector;\n\n  const toRegex = (value: RegExp | string | undefined): string | undefined => {\n    if (value === undefined)\n      return undefined;\n    if (isRegExp(value))\n      return value.source;\n    return '^' + value.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d') + '$';\n  };\n\n  return {\n    checkable,\n    checked,\n    clazz: toRegex(clazz),\n    pkg: toRegex(pkg),\n    desc: toRegex(desc),\n    res: toRegex(res),\n    text: toRegex(text),\n    clickable,\n    depth,\n    enabled,\n    focusable,\n    focused,\n    hasChild: hasChild ? { androidSelector: toSelectorChannel(hasChild.selector) } : undefined,\n    hasDescendant: hasDescendant ? { androidSelector: toSelectorChannel(hasDescendant.selector), maxDepth: hasDescendant.maxDepth } : undefined,\n    longClickable,\n    scrollable,\n    selected,\n  };\n}\n\nexport class AndroidWebView extends EventEmitter implements api.AndroidWebView {\n  private _device: AndroidDevice;\n  private _data: channels.AndroidWebView;\n  private _pagePromise: Promise<Page> | undefined;\n\n  constructor(device: AndroidDevice, data: channels.AndroidWebView) {\n    super(device._platform);\n    this._device = device;\n    this._data = data;\n  }\n\n  pid(): number {\n    return this._data.pid;\n  }\n\n  pkg(): string {\n    return this._data.pkg;\n  }\n\n  _socketName(): string {\n    return this._data.socketName;\n  }\n\n  async page(): Promise<Page> {\n    if (!this._pagePromise)\n      this._pagePromise = this._fetchPage();\n    return await this._pagePromise;\n  }\n\n  private async _fetchPage(): Promise<Page> {\n    const { context } = await this._device._channel.connectToWebView({ socketName: this._data.socketName });\n    return BrowserContext.from(context).pages()[0];\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
