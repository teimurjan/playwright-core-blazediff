{
  "version": 3,
  "sources": ["../../src/client/clock.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BrowserContext } from './browserContext';\nimport type * as api from '../../types/types';\n\nexport class Clock implements api.Clock {\n  private _browserContext: BrowserContext;\n\n  constructor(browserContext: BrowserContext) {\n    this._browserContext = browserContext;\n  }\n\n  async install(options: { time?: number | string | Date } = { }) {\n    await this._browserContext._channel.clockInstall(options.time !== undefined ? parseTime(options.time) : {});\n  }\n\n  async fastForward(ticks: number | string) {\n    await this._browserContext._channel.clockFastForward(parseTicks(ticks));\n  }\n\n  async pauseAt(time: number | string | Date) {\n    await this._browserContext._channel.clockPauseAt(parseTime(time));\n  }\n\n  async resume() {\n    await this._browserContext._channel.clockResume({});\n  }\n\n  async runFor(ticks: number | string) {\n    await this._browserContext._channel.clockRunFor(parseTicks(ticks));\n  }\n\n  async setFixedTime(time: string | number | Date) {\n    await this._browserContext._channel.clockSetFixedTime(parseTime(time));\n  }\n\n  async setSystemTime(time: string | number | Date) {\n    await this._browserContext._channel.clockSetSystemTime(parseTime(time));\n  }\n}\n\nfunction parseTime(time: string | number | Date): { timeNumber?: number, timeString?: string } {\n  if (typeof time === 'number')\n    return { timeNumber: time };\n  if (typeof time === 'string')\n    return { timeString: time };\n  if (!isFinite(time.getTime()))\n    throw new Error(`Invalid date: ${time}`);\n  return { timeNumber: time.getTime() };\n}\n\nfunction parseTicks(ticks: string | number): { ticksNumber?: number, ticksString?: string } {\n  return {\n    ticksNumber: typeof ticks === 'number' ? ticks : undefined,\n    ticksString: typeof ticks === 'string' ? ticks : undefined\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBO,MAAM,MAA2B;AAAA,EAGtC,YAAY,gBAAgC;AAC1C,SAAK,kBAAkB;AAAA,EACzB;AAAA,EAEA,MAAM,QAAQ,UAA6C,CAAE,GAAG;AAC9D,UAAM,KAAK,gBAAgB,SAAS,aAAa,QAAQ,SAAS,SAAY,UAAU,QAAQ,IAAI,IAAI,CAAC,CAAC;AAAA,EAC5G;AAAA,EAEA,MAAM,YAAY,OAAwB;AACxC,UAAM,KAAK,gBAAgB,SAAS,iBAAiB,WAAW,KAAK,CAAC;AAAA,EACxE;AAAA,EAEA,MAAM,QAAQ,MAA8B;AAC1C,UAAM,KAAK,gBAAgB,SAAS,aAAa,UAAU,IAAI,CAAC;AAAA,EAClE;AAAA,EAEA,MAAM,SAAS;AACb,UAAM,KAAK,gBAAgB,SAAS,YAAY,CAAC,CAAC;AAAA,EACpD;AAAA,EAEA,MAAM,OAAO,OAAwB;AACnC,UAAM,KAAK,gBAAgB,SAAS,YAAY,WAAW,KAAK,CAAC;AAAA,EACnE;AAAA,EAEA,MAAM,aAAa,MAA8B;AAC/C,UAAM,KAAK,gBAAgB,SAAS,kBAAkB,UAAU,IAAI,CAAC;AAAA,EACvE;AAAA,EAEA,MAAM,cAAc,MAA8B;AAChD,UAAM,KAAK,gBAAgB,SAAS,mBAAmB,UAAU,IAAI,CAAC;AAAA,EACxE;AACF;AAEA,SAAS,UAAU,MAA4E;AAC7F,MAAI,OAAO,SAAS;AAClB,WAAO,EAAE,YAAY,KAAK;AAC5B,MAAI,OAAO,SAAS;AAClB,WAAO,EAAE,YAAY,KAAK;AAC5B,MAAI,CAAC,SAAS,KAAK,QAAQ,CAAC;AAC1B,UAAM,IAAI,MAAM,iBAAiB,IAAI,EAAE;AACzC,SAAO,EAAE,YAAY,KAAK,QAAQ,EAAE;AACtC;AAEA,SAAS,WAAW,OAAwE;AAC1F,SAAO;AAAA,IACL,aAAa,OAAO,UAAU,WAAW,QAAQ;AAAA,IACjD,aAAa,OAAO,UAAU,WAAW,QAAQ;AAAA,EACnD;AACF;",
  "names": []
}
