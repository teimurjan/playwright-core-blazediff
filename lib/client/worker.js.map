{
  "version": 3,
  "sources": ["../../src/client/worker.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChannelOwner } from './channelOwner';\nimport { TargetClosedError } from './errors';\nimport { Events } from './events';\nimport { JSHandle, assertMaxArguments, parseResult, serializeArgument } from './jsHandle';\nimport { LongStandingScope } from '../utils/isomorphic/manualPromise';\n\nimport type { BrowserContext } from './browserContext';\nimport type { Page } from './page';\nimport type * as structs from '../../types/structs';\nimport type * as api from '../../types/types';\nimport type * as channels from '@protocol/channels';\n\n\nexport class Worker extends ChannelOwner<channels.WorkerChannel> implements api.Worker {\n  _page: Page | undefined;  // Set for web workers.\n  _context: BrowserContext | undefined;  // Set for service workers.\n  readonly _closedScope = new LongStandingScope();\n\n  static from(worker: channels.WorkerChannel): Worker {\n    return (worker as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.WorkerInitializer) {\n    super(parent, type, guid, initializer);\n    this._channel.on('close', () => {\n      if (this._page)\n        this._page._workers.delete(this);\n      if (this._context)\n        this._context._serviceWorkers.delete(this);\n      this.emit(Events.Worker.Close, this);\n    });\n    this.once(Events.Worker.Close, () => this._closedScope.close(this._page?._closeErrorWithReason() || new TargetClosedError()));\n  }\n\n  url(): string {\n    return this._initializer.url;\n  }\n\n  async evaluate<R, Arg>(pageFunction: structs.PageFunction<Arg, R>, arg?: Arg): Promise<R> {\n    assertMaxArguments(arguments.length, 2);\n    const result = await this._channel.evaluateExpression({ expression: String(pageFunction), isFunction: typeof pageFunction === 'function', arg: serializeArgument(arg) });\n    return parseResult(result.value);\n  }\n\n  async evaluateHandle<R, Arg>(pageFunction: structs.PageFunction<Arg, R>, arg?: Arg): Promise<structs.SmartHandle<R>> {\n    assertMaxArguments(arguments.length, 2);\n    const result = await this._channel.evaluateExpressionHandle({ expression: String(pageFunction), isFunction: typeof pageFunction === 'function', arg: serializeArgument(arg) });\n    return JSHandle.from(result.handle) as any as structs.SmartHandle<R>;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,0BAA6B;AAC7B,oBAAkC;AAClC,oBAAuB;AACvB,sBAA6E;AAC7E,2BAAkC;AAS3B,MAAM,eAAe,iCAA2D;AAAA,EASrF,YAAY,QAAsB,MAAc,MAAc,aAAyC;AACrG,UAAM,QAAQ,MAAM,MAAM,WAAW;AAPvC;AAAA,SAAS,eAAe,IAAI,uCAAkB;AAQ5C,SAAK,SAAS,GAAG,SAAS,MAAM;AAC9B,UAAI,KAAK;AACP,aAAK,MAAM,SAAS,OAAO,IAAI;AACjC,UAAI,KAAK;AACP,aAAK,SAAS,gBAAgB,OAAO,IAAI;AAC3C,WAAK,KAAK,qBAAO,OAAO,OAAO,IAAI;AAAA,IACrC,CAAC;AACD,SAAK,KAAK,qBAAO,OAAO,OAAO,MAAM,KAAK,aAAa,MAAM,KAAK,OAAO,sBAAsB,KAAK,IAAI,gCAAkB,CAAC,CAAC;AAAA,EAC9H;AAAA,EAdA,OAAO,KAAK,QAAwC;AAClD,WAAQ,OAAe;AAAA,EACzB;AAAA,EAcA,MAAc;AACZ,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA,EAEA,MAAM,SAAiB,cAA4C,KAAuB;AACxF,4CAAmB,UAAU,QAAQ,CAAC;AACtC,UAAM,SAAS,MAAM,KAAK,SAAS,mBAAmB,EAAE,YAAY,OAAO,YAAY,GAAG,YAAY,OAAO,iBAAiB,YAAY,SAAK,mCAAkB,GAAG,EAAE,CAAC;AACvK,eAAO,6BAAY,OAAO,KAAK;AAAA,EACjC;AAAA,EAEA,MAAM,eAAuB,cAA4C,KAA4C;AACnH,4CAAmB,UAAU,QAAQ,CAAC;AACtC,UAAM,SAAS,MAAM,KAAK,SAAS,yBAAyB,EAAE,YAAY,OAAO,YAAY,GAAG,YAAY,OAAO,iBAAiB,YAAY,SAAK,mCAAkB,GAAG,EAAE,CAAC;AAC7K,WAAO,yBAAS,KAAK,OAAO,MAAM;AAAA,EACpC;AACF;",
  "names": []
}
