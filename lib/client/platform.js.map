{
  "version": 3,
  "sources": ["../../src/client/platform.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { webColors } from '../utils/isomorphic/colors';\n\nimport type * as fs from 'fs';\nimport type * as path from 'path';\nimport type { Readable, Writable } from 'stream';\nimport type { Colors } from '@isomorphic/colors';\nimport type * as channels from '@protocol/channels';\n\nexport type Zone = {\n  push(data: unknown): Zone;\n  pop(): Zone;\n  run<R>(func: () => R): R;\n  data<T>(): T | undefined;\n};\n\nconst noopZone: Zone = {\n  push: () => noopZone,\n  pop: () => noopZone,\n  run: func => func(),\n  data: () => undefined,\n};\n\nexport type Platform = {\n  name: 'node' | 'web' | 'empty';\n\n  boxedStackPrefixes: () => string[];\n  calculateSha1: (text: string) => Promise<string>;\n  colors: Colors;\n  coreDir?: string;\n  createGuid: () => string;\n  defaultMaxListeners: () => number;\n  env: Record<string, string | undefined>;\n  fs: () => typeof fs;\n  inspectCustom: symbol | undefined;\n  isDebugMode: () => boolean;\n  isJSDebuggerAttached: () => boolean;\n  isLogEnabled: (name: 'api' | 'channel') => boolean;\n  isUnderTest: () => boolean,\n  log: (name: 'api' | 'channel', message: string | Error | object) => void;\n  path: () => typeof path;\n  pathSeparator: string;\n  showInternalStackFrames: () => boolean,\n  streamFile: (path: string, writable: Writable) => Promise<void>,\n  streamReadable: (channel: channels.StreamChannel) => Readable,\n  streamWritable: (channel: channels.WritableStreamChannel) => Writable,\n  zones: { empty: Zone, current: () => Zone; };\n};\n\nexport const emptyPlatform: Platform = {\n  name: 'empty',\n\n  boxedStackPrefixes: () => [],\n\n  calculateSha1: async () => {\n    throw new Error('Not implemented');\n  },\n\n  colors: webColors,\n\n  createGuid: () => {\n    throw new Error('Not implemented');\n  },\n\n  defaultMaxListeners: () => 10,\n\n  env: {},\n\n  fs: () => {\n    throw new Error('Not implemented');\n  },\n\n  inspectCustom: undefined,\n\n  isDebugMode: () => false,\n\n  isJSDebuggerAttached: () => false,\n\n  isLogEnabled(name: 'api' | 'channel') {\n    return false;\n  },\n\n  isUnderTest: () => false,\n\n  log(name: 'api' | 'channel', message: string | Error | object) { },\n\n  path: () => {\n    throw new Error('Function not implemented.');\n  },\n\n  pathSeparator: '/',\n\n  showInternalStackFrames: () => false,\n\n  streamFile(path: string, writable: Writable): Promise<void> {\n    throw new Error('Streams are not available');\n  },\n\n  streamReadable: (channel: channels.StreamChannel) => {\n    throw new Error('Streams are not available');\n  },\n\n  streamWritable: (channel: channels.WritableStreamChannel) => {\n    throw new Error('Streams are not available');\n  },\n\n  zones: { empty: noopZone, current: () => noopZone },\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,oBAA0B;AAe1B,MAAM,WAAiB;AAAA,EACrB,MAAM,MAAM;AAAA,EACZ,KAAK,MAAM;AAAA,EACX,KAAK,UAAQ,KAAK;AAAA,EAClB,MAAM,MAAM;AACd;AA4BO,MAAM,gBAA0B;AAAA,EACrC,MAAM;AAAA,EAEN,oBAAoB,MAAM,CAAC;AAAA,EAE3B,eAAe,YAAY;AACzB,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EAEA,QAAQ;AAAA,EAER,YAAY,MAAM;AAChB,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EAEA,qBAAqB,MAAM;AAAA,EAE3B,KAAK,CAAC;AAAA,EAEN,IAAI,MAAM;AACR,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EAEA,eAAe;AAAA,EAEf,aAAa,MAAM;AAAA,EAEnB,sBAAsB,MAAM;AAAA,EAE5B,aAAa,MAAyB;AACpC,WAAO;AAAA,EACT;AAAA,EAEA,aAAa,MAAM;AAAA,EAEnB,IAAI,MAAyB,SAAkC;AAAA,EAAE;AAAA,EAEjE,MAAM,MAAM;AACV,UAAM,IAAI,MAAM,2BAA2B;AAAA,EAC7C;AAAA,EAEA,eAAe;AAAA,EAEf,yBAAyB,MAAM;AAAA,EAE/B,WAAW,MAAc,UAAmC;AAC1D,UAAM,IAAI,MAAM,2BAA2B;AAAA,EAC7C;AAAA,EAEA,gBAAgB,CAAC,YAAoC;AACnD,UAAM,IAAI,MAAM,2BAA2B;AAAA,EAC7C;AAAA,EAEA,gBAAgB,CAAC,YAA4C;AAC3D,UAAM,IAAI,MAAM,2BAA2B;AAAA,EAC7C;AAAA,EAEA,OAAO,EAAE,OAAO,UAAU,SAAS,MAAM,SAAS;AACpD;",
  "names": []
}
