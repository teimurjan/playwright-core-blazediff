{
  "version": 3,
  "sources": ["../../src/client/waiter.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TimeoutError } from './errors';\nimport { rewriteErrorMessage } from '../utils/isomorphic/stackTrace';\n\nimport type { ChannelOwner } from './channelOwner';\nimport type * as channels from '@protocol/channels';\nimport type { EventEmitter } from 'events';\nimport type { Zone } from './platform';\n\nexport class Waiter {\n  private _dispose: (() => void)[];\n  private _failures: Promise<any>[] = [];\n  private _immediateError?: Error;\n  private _logs: string[] = [];\n  private _channelOwner: ChannelOwner<channels.EventTargetChannel>;\n  private _waitId: string;\n  private _error: string | undefined;\n  private _savedZone: Zone;\n\n  constructor(channelOwner: ChannelOwner<channels.EventTargetChannel>, event: string) {\n    this._waitId = channelOwner._platform.createGuid();\n    this._channelOwner = channelOwner;\n    this._savedZone = channelOwner._platform.zones.current().pop();\n\n    this._channelOwner._channel.waitForEventInfo({ info: { waitId: this._waitId, phase: 'before', event } }).catch(() => {});\n    this._dispose = [\n      () => this._channelOwner._wrapApiCall(async () => {\n        await this._channelOwner._channel.waitForEventInfo({ info: { waitId: this._waitId, phase: 'after', error: this._error } });\n      }, { internal: true }).catch(() => {}),\n    ];\n  }\n\n  static createForEvent(channelOwner: ChannelOwner<channels.EventTargetChannel>, event: string) {\n    return new Waiter(channelOwner, event);\n  }\n\n  async waitForEvent<T = void>(emitter: EventEmitter, event: string, predicate?: (arg: T) => boolean | Promise<boolean>): Promise<T> {\n    const { promise, dispose } = waitForEvent(emitter, event, this._savedZone, predicate);\n    return await this.waitForPromise(promise, dispose);\n  }\n\n  rejectOnEvent<T = void>(emitter: EventEmitter, event: string, error: Error | (() => Error), predicate?: (arg: T) => boolean | Promise<boolean>) {\n    const { promise, dispose } = waitForEvent(emitter, event, this._savedZone, predicate);\n    this._rejectOn(promise.then(() => { throw (typeof error === 'function' ? error() : error); }), dispose);\n  }\n\n  rejectOnTimeout(timeout: number, message: string) {\n    if (!timeout)\n      return;\n    const { promise, dispose } = waitForTimeout(timeout);\n    this._rejectOn(promise.then(() => { throw new TimeoutError(message); }), dispose);\n  }\n\n  rejectImmediately(error: Error) {\n    this._immediateError = error;\n  }\n\n  dispose() {\n    for (const dispose of this._dispose)\n      dispose();\n  }\n\n  async waitForPromise<T>(promise: Promise<T>, dispose?: () => void): Promise<T> {\n    try {\n      if (this._immediateError)\n        throw this._immediateError;\n      const result = await Promise.race([promise, ...this._failures]);\n      if (dispose)\n        dispose();\n      return result;\n    } catch (e) {\n      if (dispose)\n        dispose();\n      this._error = e.message;\n      this.dispose();\n      rewriteErrorMessage(e, e.message + formatLogRecording(this._logs));\n      throw e;\n    }\n  }\n\n  log(s: string) {\n    this._logs.push(s);\n    this._channelOwner._wrapApiCall(async () => {\n      await this._channelOwner._channel.waitForEventInfo({ info: { waitId: this._waitId, phase: 'log', message: s } });\n    }, { internal: true }).catch(() => {});\n  }\n\n  private _rejectOn(promise: Promise<any>, dispose?: () => void) {\n    this._failures.push(promise);\n    if (dispose)\n      this._dispose.push(dispose);\n  }\n}\n\nfunction waitForEvent<T = void>(emitter: EventEmitter, event: string, savedZone: Zone, predicate?: (arg: T) => boolean | Promise<boolean>): { promise: Promise<T>, dispose: () => void } {\n  let listener: (eventArg: any) => void;\n  const promise = new Promise<T>((resolve, reject) => {\n    listener = async (eventArg: any) => {\n      await savedZone.run(async () => {\n        try {\n          if (predicate && !(await predicate(eventArg)))\n            return;\n          emitter.removeListener(event, listener);\n          resolve(eventArg);\n        } catch (e) {\n          emitter.removeListener(event, listener);\n          reject(e);\n        }\n      });\n    };\n    emitter.addListener(event, listener);\n  });\n  const dispose = () => emitter.removeListener(event, listener);\n  return { promise, dispose };\n}\n\nfunction waitForTimeout(timeout: number): { promise: Promise<void>, dispose: () => void } {\n  let timeoutId: any;\n  const promise = new Promise<void>(resolve => timeoutId = setTimeout(resolve, timeout));\n  const dispose = () => clearTimeout(timeoutId);\n  return { promise, dispose };\n}\n\nfunction formatLogRecording(log: string[]): string {\n  if (!log.length)\n    return '';\n  const header = ` logs `;\n  const headerLength = 60;\n  const leftLength = (headerLength - header.length) / 2;\n  const rightLength = headerLength - header.length - leftLength;\n  return `\\n${'='.repeat(leftLength)}${header}${'='.repeat(rightLength)}\\n${log.join('\\n')}\\n${'='.repeat(headerLength)}`;\n}\n"],
  "mappings": "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",
  "names": []
}
