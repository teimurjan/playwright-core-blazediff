{
  "version": 3,
  "sources": ["../../src/client/video.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ManualPromise } from '../utils/isomorphic/manualPromise';\n\nimport type { Artifact } from './artifact';\nimport type { Connection } from './connection';\nimport type { Page } from './page';\nimport type * as api from '../../types/types';\n\nexport class Video implements api.Video {\n  private _artifact: Promise<Artifact | null> | null = null;\n  private _artifactReadyPromise = new ManualPromise<Artifact>();\n  private _isRemote = false;\n\n  constructor(page: Page, connection: Connection) {\n    this._isRemote = connection.isRemote();\n    this._artifact = page._closedOrCrashedScope.safeRace(this._artifactReadyPromise);\n  }\n\n  _artifactReady(artifact: Artifact) {\n    this._artifactReadyPromise.resolve(artifact);\n  }\n\n  async path(): Promise<string> {\n    if (this._isRemote)\n      throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);\n    const artifact = await this._artifact;\n    if (!artifact)\n      throw new Error('Page did not produce any video frames');\n    return artifact._initializer.absolutePath;\n  }\n\n  async saveAs(path: string): Promise<void> {\n    const artifact = await this._artifact;\n    if (!artifact)\n      throw new Error('Page did not produce any video frames');\n    return await artifact.saveAs(path);\n  }\n\n  async delete(): Promise<void> {\n    const artifact = await this._artifact;\n    if (artifact)\n      await artifact.delete();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,2BAA8B;AAOvB,MAAM,MAA2B;AAAA,EAKtC,YAAY,MAAY,YAAwB;AAJhD,SAAQ,YAA6C;AACrD,SAAQ,wBAAwB,IAAI,mCAAwB;AAC5D,SAAQ,YAAY;AAGlB,SAAK,YAAY,WAAW,SAAS;AACrC,SAAK,YAAY,KAAK,sBAAsB,SAAS,KAAK,qBAAqB;AAAA,EACjF;AAAA,EAEA,eAAe,UAAoB;AACjC,SAAK,sBAAsB,QAAQ,QAAQ;AAAA,EAC7C;AAAA,EAEA,MAAM,OAAwB;AAC5B,QAAI,KAAK;AACP,YAAM,IAAI,MAAM,oFAAoF;AACtG,UAAM,WAAW,MAAM,KAAK;AAC5B,QAAI,CAAC;AACH,YAAM,IAAI,MAAM,uCAAuC;AACzD,WAAO,SAAS,aAAa;AAAA,EAC/B;AAAA,EAEA,MAAM,OAAO,MAA6B;AACxC,UAAM,WAAW,MAAM,KAAK;AAC5B,QAAI,CAAC;AACH,YAAM,IAAI,MAAM,uCAAuC;AACzD,WAAO,MAAM,SAAS,OAAO,IAAI;AAAA,EACnC;AAAA,EAEA,MAAM,SAAwB;AAC5B,UAAM,WAAW,MAAM,KAAK;AAC5B,QAAI;AACF,YAAM,SAAS,OAAO;AAAA,EAC1B;AACF;",
  "names": []
}
