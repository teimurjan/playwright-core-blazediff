{
  "version": 3,
  "sources": ["../../src/client/browserType.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Browser } from './browser';\nimport { BrowserContext, prepareBrowserContextParams } from './browserContext';\nimport { ChannelOwner } from './channelOwner';\nimport { envObjectToArray } from './clientHelper';\nimport { Events } from './events';\nimport { assert } from '../utils/isomorphic/assert';\nimport { headersObjectToArray } from '../utils/isomorphic/headers';\nimport { monotonicTime } from '../utils/isomorphic/time';\nimport { raceAgainstDeadline } from '../utils/isomorphic/timeoutRunner';\nimport { connectOverWebSocket } from './webSocket';\nimport { TimeoutSettings } from './timeoutSettings';\n\nimport type { Playwright } from './playwright';\nimport type { ConnectOptions, LaunchOptions, LaunchPersistentContextOptions, LaunchServerOptions } from './types';\nimport type * as api from '../../types/types';\nimport type * as channels from '@protocol/channels';\nimport type { ChildProcess } from 'child_process';\nimport type { Browser as BrowserImpl } from '../server/browser';\n\nexport interface BrowserServerLauncher {\n  launchServer(options?: LaunchOptions & LaunchServerOptions): Promise<api.BrowserServer>;\n  launchServerOnExistingBrowser(browser: BrowserImpl, options?: LaunchServerOptions): Promise<api.BrowserServer>;\n}\n\n// This is here just for api generation and checking.\nexport interface BrowserServer extends api.BrowserServer {\n  process(): ChildProcess;\n  wsEndpoint(): string;\n  close(): Promise<void>;\n  kill(): Promise<void>;\n}\n\nexport class BrowserType extends ChannelOwner<channels.BrowserTypeChannel> implements api.BrowserType {\n  _serverLauncher?: BrowserServerLauncher;\n  _contexts = new Set<BrowserContext>();\n  _playwright!: Playwright;\n\n  static from(browserType: channels.BrowserTypeChannel): BrowserType {\n    return (browserType as any)._object;\n  }\n\n  executablePath(): string {\n    if (!this._initializer.executablePath)\n      throw new Error('Browser is not supported on current platform');\n    return this._initializer.executablePath;\n  }\n\n  name(): string {\n    return this._initializer.name;\n  }\n\n  async launch(options: LaunchOptions = {}): Promise<Browser> {\n    assert(!(options as any).userDataDir, 'userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead');\n    assert(!(options as any).port, 'Cannot specify a port without launching as a server.');\n\n    const logger = options.logger || this._playwright._defaultLaunchOptions?.logger;\n    options = { ...this._playwright._defaultLaunchOptions, ...options };\n    const launchOptions: channels.BrowserTypeLaunchParams = {\n      ...options,\n      ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,\n      ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),\n      env: options.env ? envObjectToArray(options.env) : undefined,\n      timeout: new TimeoutSettings(this._platform).launchTimeout(options),\n    };\n    return await this._wrapApiCall(async () => {\n      const browser = Browser.from((await this._channel.launch(launchOptions)).browser);\n      browser._connectToBrowserType(this, options, logger);\n      return browser;\n    });\n  }\n\n  async launchServer(options: LaunchServerOptions = {}): Promise<api.BrowserServer> {\n    if (!this._serverLauncher)\n      throw new Error('Launching server is not supported');\n    options = { ...this._playwright._defaultLaunchOptions, ...options };\n    return await this._serverLauncher.launchServer(options);\n  }\n\n  async launchPersistentContext(userDataDir: string, options: LaunchPersistentContextOptions = {}): Promise<BrowserContext> {\n    const logger = options.logger || this._playwright._defaultLaunchOptions?.logger;\n    assert(!(options as any).port, 'Cannot specify a port without launching as a server.');\n    options = this._playwright.selectors._withSelectorOptions({\n      ...this._playwright._defaultLaunchOptions,\n      ...this._playwright._defaultContextOptions,\n      ...options,\n    });\n    const contextParams = await prepareBrowserContextParams(this._platform, options);\n    const persistentParams: channels.BrowserTypeLaunchPersistentContextParams = {\n      ...contextParams,\n      ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,\n      ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),\n      env: options.env ? envObjectToArray(options.env) : undefined,\n      channel: options.channel,\n      userDataDir: (this._platform.path().isAbsolute(userDataDir) || !userDataDir) ? userDataDir : this._platform.path().resolve(userDataDir),\n      timeout: new TimeoutSettings(this._platform).launchTimeout(options),\n    };\n    const context = await this._wrapApiCall(async () => {\n      const result = await this._channel.launchPersistentContext(persistentParams);\n      const browser = Browser.from(result.browser);\n      browser._connectToBrowserType(this, options, logger);\n      const context = BrowserContext.from(result.context);\n      await context._initializeHarFromOptions(options.recordHar);\n      return context;\n    });\n    await this._instrumentation.runAfterCreateBrowserContext(context);\n    return context;\n  }\n\n  connect(options: api.ConnectOptions & { wsEndpoint: string }): Promise<Browser>;\n  connect(wsEndpoint: string, options?: api.ConnectOptions): Promise<Browser>;\n  async connect(optionsOrWsEndpoint: string | (api.ConnectOptions & { wsEndpoint: string }), options?: api.ConnectOptions): Promise<Browser>{\n    if (typeof optionsOrWsEndpoint === 'string')\n      return await this._connect({ ...options, wsEndpoint: optionsOrWsEndpoint });\n    assert(optionsOrWsEndpoint.wsEndpoint, 'options.wsEndpoint is required');\n    return await this._connect(optionsOrWsEndpoint);\n  }\n\n  async _connect(params: ConnectOptions): Promise<Browser> {\n    const logger = params.logger;\n    return await this._wrapApiCall(async () => {\n      const deadline = params.timeout ? monotonicTime() + params.timeout : 0;\n      const headers = { 'x-playwright-browser': this.name(), ...params.headers };\n      const connectParams: channels.LocalUtilsConnectParams = {\n        wsEndpoint: params.wsEndpoint,\n        headers,\n        exposeNetwork: params.exposeNetwork ?? params._exposeNetwork,\n        slowMo: params.slowMo,\n        timeout: params.timeout || 0,\n      };\n      if ((params as any).__testHookRedirectPortForwarding)\n        connectParams.socksProxyRedirectPortForTest = (params as any).__testHookRedirectPortForwarding;\n      const connection = await connectOverWebSocket(this._connection, connectParams);\n      let browser: Browser;\n      connection.on('close', () => {\n        // Emulate all pages, contexts and the browser closing upon disconnect.\n        for (const context of browser?.contexts() || []) {\n          for (const page of context.pages())\n            page._onClose();\n          context._onClose();\n        }\n        setTimeout(() => browser?._didClose(), 0);\n      });\n\n      const result = await raceAgainstDeadline(async () => {\n        // For tests.\n        if ((params as any).__testHookBeforeCreateBrowser)\n          await (params as any).__testHookBeforeCreateBrowser();\n\n        const playwright = await connection!.initializePlaywright();\n        if (!playwright._initializer.preLaunchedBrowser) {\n          connection.close();\n          throw new Error('Malformed endpoint. Did you use BrowserType.launchServer method?');\n        }\n        playwright.selectors = this._playwright.selectors;\n        browser = Browser.from(playwright._initializer.preLaunchedBrowser!);\n        browser._connectToBrowserType(this, {}, logger);\n        browser._shouldCloseConnectionOnClose = true;\n        browser.on(Events.Browser.Disconnected, () => connection.close());\n        return browser;\n      }, deadline);\n      if (!result.timedOut) {\n        return result.result;\n      } else {\n        connection.close();\n        throw new Error(`Timeout ${params.timeout}ms exceeded`);\n      }\n    });\n  }\n\n  async connectOverCDP(options: api.ConnectOverCDPOptions  & { wsEndpoint?: string }): Promise<api.Browser>;\n  async connectOverCDP(endpointURL: string, options?: api.ConnectOverCDPOptions): Promise<api.Browser>;\n  async connectOverCDP(endpointURLOrOptions: (api.ConnectOverCDPOptions & { wsEndpoint?: string })|string, options?: api.ConnectOverCDPOptions) {\n    if (typeof endpointURLOrOptions === 'string')\n      return await this._connectOverCDP(endpointURLOrOptions, options);\n    const endpointURL = 'endpointURL' in endpointURLOrOptions ? endpointURLOrOptions.endpointURL : endpointURLOrOptions.wsEndpoint;\n    assert(endpointURL, 'Cannot connect over CDP without wsEndpoint.');\n    return await this.connectOverCDP(endpointURL, endpointURLOrOptions);\n  }\n\n  async _connectOverCDP(endpointURL: string, params: api.ConnectOverCDPOptions = {}): Promise<Browser>  {\n    if (this.name() !== 'chromium')\n      throw new Error('Connecting over CDP is only supported in Chromium.');\n    const headers = params.headers ? headersObjectToArray(params.headers) : undefined;\n    const result = await this._channel.connectOverCDP({\n      endpointURL,\n      headers,\n      slowMo: params.slowMo,\n      timeout: new TimeoutSettings(this._platform).timeout(params),\n    });\n    const browser = Browser.from(result.browser);\n    browser._connectToBrowserType(this, {}, params.logger);\n    if (result.defaultContext)\n      await this._instrumentation.runAfterCreateBrowserContext(BrowserContext.from(result.defaultContext));\n    return browser;\n  }\n}\n"],
  "mappings": "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",
  "names": ["context"]
}
