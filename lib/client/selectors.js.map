{
  "version": 3,
  "sources": ["../../src/client/selectors.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { evaluationScript } from './clientHelper';\nimport { setTestIdAttribute } from './locator';\n\nimport type { SelectorEngine } from './types';\nimport type * as api from '../../types/types';\nimport type * as channels from '@protocol/channels';\nimport type { BrowserContext } from './browserContext';\nimport type { Platform } from './platform';\n\nexport class Selectors implements api.Selectors {\n  private _platform: Platform;\n  private _selectorEngines: channels.SelectorEngine[] = [];\n  private _testIdAttributeName: string | undefined;\n  readonly _contextsForSelectors = new Set<BrowserContext>();\n\n  constructor(platform: Platform) {\n    this._platform = platform;\n  }\n\n  async register(name: string, script: string | (() => SelectorEngine) | { path?: string, content?: string }, options: { contentScript?: boolean } = {}): Promise<void> {\n    if (this._selectorEngines.some(engine => engine.name === name))\n      throw new Error(`selectors.register: \"${name}\" selector engine has been already registered`);\n\n    const source = await evaluationScript(this._platform, script, undefined, false);\n    const selectorEngine: channels.SelectorEngine = { ...options, name, source };\n    for (const context of this._contextsForSelectors)\n      await context._channel.registerSelectorEngine({ selectorEngine });\n    this._selectorEngines.push(selectorEngine);\n  }\n\n  setTestIdAttribute(attributeName: string) {\n    this._testIdAttributeName = attributeName;\n    setTestIdAttribute(attributeName);\n    for (const context of this._contextsForSelectors)\n      context._channel.setTestIdAttributeName({ testIdAttributeName: attributeName }).catch(() => {});\n  }\n\n  _withSelectorOptions<T>(options: T) {\n    return { ...options, selectorEngines: this._selectorEngines, testIdAttributeName: this._testIdAttributeName };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,0BAAiC;AACjC,qBAAmC;AAQ5B,MAAM,UAAmC;AAAA,EAM9C,YAAY,UAAoB;AAJhC,SAAQ,mBAA8C,CAAC;AAEvD,SAAS,wBAAwB,oBAAI,IAAoB;AAGvD,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,MAAM,SAAS,MAAc,QAA+E,UAAuC,CAAC,GAAkB;AACpK,QAAI,KAAK,iBAAiB,KAAK,YAAU,OAAO,SAAS,IAAI;AAC3D,YAAM,IAAI,MAAM,wBAAwB,IAAI,+CAA+C;AAE7F,UAAM,SAAS,UAAM,sCAAiB,KAAK,WAAW,QAAQ,QAAW,KAAK;AAC9E,UAAM,iBAA0C,EAAE,GAAG,SAAS,MAAM,OAAO;AAC3E,eAAW,WAAW,KAAK;AACzB,YAAM,QAAQ,SAAS,uBAAuB,EAAE,eAAe,CAAC;AAClE,SAAK,iBAAiB,KAAK,cAAc;AAAA,EAC3C;AAAA,EAEA,mBAAmB,eAAuB;AACxC,SAAK,uBAAuB;AAC5B,2CAAmB,aAAa;AAChC,eAAW,WAAW,KAAK;AACzB,cAAQ,SAAS,uBAAuB,EAAE,qBAAqB,cAAc,CAAC,EAAE,MAAM,MAAM;AAAA,MAAC,CAAC;AAAA,EAClG;AAAA,EAEA,qBAAwB,SAAY;AAClC,WAAO,EAAE,GAAG,SAAS,iBAAiB,KAAK,kBAAkB,qBAAqB,KAAK,qBAAqB;AAAA,EAC9G;AACF;",
  "names": []
}
