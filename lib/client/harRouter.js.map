{
  "version": 3,
  "sources": ["../../src/client/harRouter.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BrowserContext } from './browserContext';\nimport type { LocalUtils } from './localUtils';\nimport type { Route } from './network';\nimport type { Page } from './page';\nimport type { URLMatch } from '../utils/isomorphic/urlMatch';\n\ntype HarNotFoundAction = 'abort' | 'fallback';\n\nexport class HarRouter {\n  private _localUtils: LocalUtils;\n  private _harId: string;\n  private _notFoundAction: HarNotFoundAction;\n  private _options: { urlMatch?: URLMatch; baseURL?: string; };\n\n  static async create(localUtils: LocalUtils, file: string, notFoundAction: HarNotFoundAction, options: { urlMatch?: URLMatch }): Promise<HarRouter> {\n    const { harId, error } = await localUtils.harOpen({ file });\n    if (error)\n      throw new Error(error);\n    return new HarRouter(localUtils, harId!, notFoundAction, options);\n  }\n\n  private constructor(localUtils: LocalUtils, harId: string, notFoundAction: HarNotFoundAction, options: { urlMatch?: URLMatch }) {\n    this._localUtils = localUtils;\n    this._harId = harId;\n    this._options = options;\n    this._notFoundAction = notFoundAction;\n  }\n\n  private async _handle(route: Route) {\n    const request = route.request();\n\n    const response = await this._localUtils.harLookup({\n      harId: this._harId,\n      url: request.url(),\n      method: request.method(),\n      headers: (await request.headersArray()),\n      postData: request.postDataBuffer() || undefined,\n      isNavigationRequest: request.isNavigationRequest()\n    });\n\n    if (response.action === 'redirect') {\n      route._platform.log('api', `HAR: ${route.request().url()} redirected to ${response.redirectURL}`);\n      await route._redirectNavigationRequest(response.redirectURL!);\n      return;\n    }\n\n    if (response.action === 'fulfill') {\n      // If the response status is -1, the request was canceled or stalled, so we just stall it here.\n      // See https://github.com/microsoft/playwright/issues/29311.\n      // TODO: it'd be better to abort such requests, but then we likely need to respect the timing,\n      // because the request might have been stalled for a long time until the very end of the\n      // test when HAR was recorded but we'd abort it immediately.\n      if (response.status === -1)\n        return;\n      await route.fulfill({\n        status: response.status,\n        headers: Object.fromEntries(response.headers!.map(h => [h.name, h.value])),\n        body: response.body!\n      });\n      return;\n    }\n\n    if (response.action === 'error')\n      route._platform.log('api', 'HAR: ' + response.message!);\n    // Report the error, but fall through to the default handler.\n\n    if (this._notFoundAction === 'abort') {\n      await route.abort();\n      return;\n    }\n\n    await route.fallback();\n  }\n\n  async addContextRoute(context: BrowserContext) {\n    await context.route(this._options.urlMatch || '**/*', route => this._handle(route));\n  }\n\n  async addPageRoute(page: Page) {\n    await page.route(this._options.urlMatch || '**/*', route => this._handle(route));\n  }\n\n  async [Symbol.asyncDispose]() {\n    await this.dispose();\n  }\n\n  dispose() {\n    this._localUtils.harClose({ harId: this._harId }).catch(() => {});\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBO,MAAM,UAAU;AAAA,EAMrB,aAAa,OAAO,YAAwB,MAAc,gBAAmC,SAAsD;AACjJ,UAAM,EAAE,OAAO,MAAM,IAAI,MAAM,WAAW,QAAQ,EAAE,KAAK,CAAC;AAC1D,QAAI;AACF,YAAM,IAAI,MAAM,KAAK;AACvB,WAAO,IAAI,UAAU,YAAY,OAAQ,gBAAgB,OAAO;AAAA,EAClE;AAAA,EAEQ,YAAY,YAAwB,OAAe,gBAAmC,SAAkC;AAC9H,SAAK,cAAc;AACnB,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,kBAAkB;AAAA,EACzB;AAAA,EAEA,MAAc,QAAQ,OAAc;AAClC,UAAM,UAAU,MAAM,QAAQ;AAE9B,UAAM,WAAW,MAAM,KAAK,YAAY,UAAU;AAAA,MAChD,OAAO,KAAK;AAAA,MACZ,KAAK,QAAQ,IAAI;AAAA,MACjB,QAAQ,QAAQ,OAAO;AAAA,MACvB,SAAU,MAAM,QAAQ,aAAa;AAAA,MACrC,UAAU,QAAQ,eAAe,KAAK;AAAA,MACtC,qBAAqB,QAAQ,oBAAoB;AAAA,IACnD,CAAC;AAED,QAAI,SAAS,WAAW,YAAY;AAClC,YAAM,UAAU,IAAI,OAAO,QAAQ,MAAM,QAAQ,EAAE,IAAI,CAAC,kBAAkB,SAAS,WAAW,EAAE;AAChG,YAAM,MAAM,2BAA2B,SAAS,WAAY;AAC5D;AAAA,IACF;AAEA,QAAI,SAAS,WAAW,WAAW;AAMjC,UAAI,SAAS,WAAW;AACtB;AACF,YAAM,MAAM,QAAQ;AAAA,QAClB,QAAQ,SAAS;AAAA,QACjB,SAAS,OAAO,YAAY,SAAS,QAAS,IAAI,OAAK,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAAA,QACzE,MAAM,SAAS;AAAA,MACjB,CAAC;AACD;AAAA,IACF;AAEA,QAAI,SAAS,WAAW;AACtB,YAAM,UAAU,IAAI,OAAO,UAAU,SAAS,OAAQ;AAGxD,QAAI,KAAK,oBAAoB,SAAS;AACpC,YAAM,MAAM,MAAM;AAClB;AAAA,IACF;AAEA,UAAM,MAAM,SAAS;AAAA,EACvB;AAAA,EAEA,MAAM,gBAAgB,SAAyB;AAC7C,UAAM,QAAQ,MAAM,KAAK,SAAS,YAAY,QAAQ,WAAS,KAAK,QAAQ,KAAK,CAAC;AAAA,EACpF;AAAA,EAEA,MAAM,aAAa,MAAY;AAC7B,UAAM,KAAK,MAAM,KAAK,SAAS,YAAY,QAAQ,WAAS,KAAK,QAAQ,KAAK,CAAC;AAAA,EACjF;AAAA,EAEA,OAAO,OAAO,YAAY,IAAI;AAC5B,UAAM,KAAK,QAAQ;AAAA,EACrB;AAAA,EAEA,UAAU;AACR,SAAK,YAAY,SAAS,EAAE,OAAO,KAAK,OAAO,CAAC,EAAE,MAAM,MAAM;AAAA,IAAC,CAAC;AAAA,EAClE;AACF;",
  "names": []
}
