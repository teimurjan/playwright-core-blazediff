{
  "version": 3,
  "sources": ["../../src/client/types.ts"],
  "sourcesContent": ["/**\n * Copyright 2018 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Size } from '../utils/isomorphic/types';\nimport type * as channels from '@protocol/channels';\nexport type { HeadersArray, Point, Quad, Rect, Size } from '../utils/isomorphic/types';\n\ntype LoggerSeverity = 'verbose' | 'info' | 'warning' | 'error';\nexport interface Logger {\n  isEnabled(name: string, severity: LoggerSeverity): boolean;\n  log(name: string, severity: LoggerSeverity, message: string | Error, args: any[], hints: { color?: string }): void;\n}\n\nexport type TimeoutOptions = { timeout?: number };\nexport type StrictOptions = { strict?: boolean };\nexport type Headers = { [key: string]: string };\nexport type Env = { [key: string]: string | number | boolean | undefined };\n\nexport type WaitForEventOptions = Function | TimeoutOptions & { predicate?: Function };\nexport type WaitForFunctionOptions = TimeoutOptions & { polling?: 'raf' | number };\n\nexport type SelectOption = { value?: string, label?: string, index?: number, valueOrLabel?: string };\nexport type SelectOptionOptions = TimeoutOptions & { force?: boolean };\nexport type FilePayload = { name: string, mimeType: string, buffer: Buffer };\nexport type StorageState = {\n  cookies: channels.NetworkCookie[],\n  origins: (Omit<channels.OriginStorage, 'indexedDB'>)[],\n};\nexport type SetStorageState = {\n  cookies?: channels.SetNetworkCookie[],\n  origins?: (Omit<channels.SetOriginStorage, 'indexedDB'> & { indexedDB?: unknown[] })[]\n};\n\nexport type LifecycleEvent = channels.LifecycleEvent;\nexport const kLifecycleEvents: Set<LifecycleEvent> = new Set(['load', 'domcontentloaded', 'networkidle', 'commit']);\n\nexport type ClientCertificate = {\n  origin: string;\n  cert?: Buffer;\n  certPath?: string;\n  key?: Buffer;\n  keyPath?: string;\n  pfx?: Buffer;\n  pfxPath?: string;\n  passphrase?: string;\n};\n\nexport type BrowserContextOptions = Omit<channels.BrowserNewContextOptions, 'viewport' | 'noDefaultViewport' | 'extraHTTPHeaders' | 'clientCertificates' | 'storageState' | 'recordHar' | 'colorScheme' | 'reducedMotion' | 'forcedColors' | 'acceptDownloads' | 'contrast'> & {\n  viewport?: Size | null;\n  extraHTTPHeaders?: Headers;\n  logger?: Logger;\n  videosPath?: string;\n  videoSize?: Size;\n  storageState?: string | SetStorageState;\n  har?: {\n    path: string;\n    fallback?: 'abort'|'continue';\n    urlFilter?: string|RegExp;\n  };\n  recordHar?: {\n    path: string,\n    omitContent?: boolean,\n    content?: 'omit' | 'embed' | 'attach',\n    mode?: 'full' | 'minimal',\n    urlFilter?: string | RegExp,\n  };\n  colorScheme?: 'dark' | 'light' | 'no-preference' | null;\n  reducedMotion?: 'reduce' | 'no-preference' | null;\n  forcedColors?: 'active' | 'none' | null;\n  contrast?: 'more' | 'no-preference' | null;\n  acceptDownloads?: boolean;\n  clientCertificates?: ClientCertificate[];\n};\n\ntype LaunchOverrides = {\n  ignoreDefaultArgs?: boolean | string[];\n  env?: Env;\n  logger?: Logger;\n  firefoxUserPrefs?: { [key: string]: string | number | boolean };\n} & TimeoutOptions;\n\nexport type LaunchOptions = Omit<channels.BrowserTypeLaunchOptions, 'ignoreAllDefaultArgs' | 'ignoreDefaultArgs' | 'env' | 'firefoxUserPrefs'> & LaunchOverrides;\nexport type LaunchPersistentContextOptions = Omit<LaunchOptions & BrowserContextOptions, 'storageState'>;\n\nexport type ConnectOptions = {\n  wsEndpoint: string,\n  headers?: { [key: string]: string; };\n  exposeNetwork?: string,\n  _exposeNetwork?: string,\n  slowMo?: number,\n  timeout?: number,\n  logger?: Logger,\n};\nexport type LaunchServerOptions = {\n  host?: string,\n  port?: number,\n  wsPath?: string,\n  _debugController?: boolean;\n  _sharedBrowser?: boolean;\n};\n\nexport type LaunchAndroidServerOptions = {\n  deviceSerialNumber?: string,\n  adbHost?: string,\n  adbPort?: number,\n  omitDriverInstall?: boolean,\n  host?: string,\n  port?: number,\n  wsPath?: string,\n};\n\nexport type SelectorEngine = {\n  /**\n   * Returns the first element matching given selector in the root's subtree.\n   */\n  query(root: HTMLElement, selector: string): HTMLElement | null;\n  /**\n   * Returns all elements matching given selector in the root's subtree.\n   */\n  queryAll(root: HTMLElement, selector: string): HTMLElement[];\n};\n\nexport type RemoteAddr = channels.RemoteAddr;\nexport type SecurityDetails = channels.SecurityDetails;\n\nexport type FrameExpectParams = Omit<channels.FrameExpectParams, 'selector'|'expression'|'expectedValue'> & { expectedValue?: any };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDO,MAAM,mBAAwC,oBAAI,IAAI,CAAC,QAAQ,oBAAoB,eAAe,QAAQ,CAAC;",
  "names": []
}
