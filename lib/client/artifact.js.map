{
  "version": 3,
  "sources": ["../../src/client/artifact.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChannelOwner } from './channelOwner';\nimport { Stream } from './stream';\nimport { mkdirIfNeeded } from './fileUtils';\n\nimport type * as channels from '@protocol/channels';\nimport type { Readable } from 'stream';\n\nexport class Artifact extends ChannelOwner<channels.ArtifactChannel> {\n  static from(channel: channels.ArtifactChannel): Artifact {\n    return (channel as any)._object;\n  }\n\n  async pathAfterFinished(): Promise<string> {\n    if (this._connection.isRemote())\n      throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);\n    return (await this._channel.pathAfterFinished()).value;\n  }\n\n  async saveAs(path: string): Promise<void> {\n    if (!this._connection.isRemote()) {\n      await this._channel.saveAs({ path });\n      return;\n    }\n\n    const result = await this._channel.saveAsStream();\n    const stream = Stream.from(result.stream);\n    await mkdirIfNeeded(this._platform, path);\n    await new Promise((resolve, reject) => {\n      stream.stream().pipe(this._platform.fs().createWriteStream(path))\n          .on('finish' as any, resolve)\n          .on('error' as any, reject);\n    });\n  }\n\n  async failure(): Promise<string | null> {\n    return (await this._channel.failure()).error || null;\n  }\n\n  async createReadStream(): Promise<Readable> {\n    const result = await this._channel.stream();\n    const stream = Stream.from(result.stream);\n    return stream.stream();\n  }\n\n  async readIntoBuffer(): Promise<Buffer> {\n    const stream = (await this.createReadStream())!;\n    return await new Promise((resolve, reject) => {\n      const chunks: Buffer[] = [];\n      stream.on('data', (chunk: Buffer) => {\n        chunks.push(chunk);\n      });\n      stream.on('end', () => {\n        resolve(Buffer.concat(chunks));\n      });\n      stream.on('error', reject);\n    });\n  }\n\n  async cancel(): Promise<void> {\n    return await this._channel.cancel();\n  }\n\n  async delete(): Promise<void> {\n    return await this._channel.delete();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,0BAA6B;AAC7B,oBAAuB;AACvB,uBAA8B;AAKvB,MAAM,iBAAiB,iCAAuC;AAAA,EACnE,OAAO,KAAK,SAA6C;AACvD,WAAQ,QAAgB;AAAA,EAC1B;AAAA,EAEA,MAAM,oBAAqC;AACzC,QAAI,KAAK,YAAY,SAAS;AAC5B,YAAM,IAAI,MAAM,oFAAoF;AACtG,YAAQ,MAAM,KAAK,SAAS,kBAAkB,GAAG;AAAA,EACnD;AAAA,EAEA,MAAM,OAAO,MAA6B;AACxC,QAAI,CAAC,KAAK,YAAY,SAAS,GAAG;AAChC,YAAM,KAAK,SAAS,OAAO,EAAE,KAAK,CAAC;AACnC;AAAA,IACF;AAEA,UAAM,SAAS,MAAM,KAAK,SAAS,aAAa;AAChD,UAAM,SAAS,qBAAO,KAAK,OAAO,MAAM;AACxC,cAAM,gCAAc,KAAK,WAAW,IAAI;AACxC,UAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrC,aAAO,OAAO,EAAE,KAAK,KAAK,UAAU,GAAG,EAAE,kBAAkB,IAAI,CAAC,EAC3D,GAAG,UAAiB,OAAO,EAC3B,GAAG,SAAgB,MAAM;AAAA,IAChC,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,UAAkC;AACtC,YAAQ,MAAM,KAAK,SAAS,QAAQ,GAAG,SAAS;AAAA,EAClD;AAAA,EAEA,MAAM,mBAAsC;AAC1C,UAAM,SAAS,MAAM,KAAK,SAAS,OAAO;AAC1C,UAAM,SAAS,qBAAO,KAAK,OAAO,MAAM;AACxC,WAAO,OAAO,OAAO;AAAA,EACvB;AAAA,EAEA,MAAM,iBAAkC;AACtC,UAAM,SAAU,MAAM,KAAK,iBAAiB;AAC5C,WAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C,YAAM,SAAmB,CAAC;AAC1B,aAAO,GAAG,QAAQ,CAAC,UAAkB;AACnC,eAAO,KAAK,KAAK;AAAA,MACnB,CAAC;AACD,aAAO,GAAG,OAAO,MAAM;AACrB,gBAAQ,OAAO,OAAO,MAAM,CAAC;AAAA,MAC/B,CAAC;AACD,aAAO,GAAG,SAAS,MAAM;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,SAAwB;AAC5B,WAAO,MAAM,KAAK,SAAS,OAAO;AAAA,EACpC;AAAA,EAEA,MAAM,SAAwB;AAC5B,WAAO,MAAM,KAAK,SAAS,OAAO;AAAA,EACpC;AACF;",
  "names": []
}
