{
  "version": 3,
  "sources": ["../../src/client/accessibility.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ElementHandle } from './elementHandle';\nimport type * as api from '../../types/types';\nimport type * as channels from '@protocol/channels';\n\ntype SerializedAXNode = Omit<channels.AXNode, 'valueString' | 'valueNumber' | 'children' | 'checked' | 'pressed'> & {\n  value?: string|number,\n  checked?: boolean | 'mixed',\n  pressed?: boolean | 'mixed',\n  children?: SerializedAXNode[]\n};\n\nfunction axNodeFromProtocol(axNode: channels.AXNode): SerializedAXNode {\n  const result: SerializedAXNode = {\n    ...axNode,\n    value: axNode.valueNumber !== undefined ? axNode.valueNumber : axNode.valueString,\n    checked: axNode.checked === 'checked' ? true : axNode.checked === 'unchecked' ? false : axNode.checked,\n    pressed: axNode.pressed === 'pressed' ? true : axNode.pressed === 'released' ? false : axNode.pressed,\n    children: axNode.children ? axNode.children.map(axNodeFromProtocol) : undefined,\n  };\n  delete (result as any).valueNumber;\n  delete (result as any).valueString;\n  return result;\n}\n\nexport class Accessibility implements api.Accessibility {\n  private _channel: channels.PageChannel;\n\n  constructor(channel: channels.PageChannel) {\n    this._channel = channel;\n  }\n\n  async snapshot(options: { interestingOnly?: boolean; root?: ElementHandle } = {}): Promise<SerializedAXNode | null> {\n    const root = options.root ? options.root._elementChannel : undefined;\n    const result = await this._channel.accessibilitySnapshot({ interestingOnly: options.interestingOnly, root });\n    return result.rootAXNode ? axNodeFromProtocol(result.rootAXNode) : null;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA,SAAS,mBAAmB,QAA2C;AACrE,QAAM,SAA2B;AAAA,IAC/B,GAAG;AAAA,IACH,OAAO,OAAO,gBAAgB,SAAY,OAAO,cAAc,OAAO;AAAA,IACtE,SAAS,OAAO,YAAY,YAAY,OAAO,OAAO,YAAY,cAAc,QAAQ,OAAO;AAAA,IAC/F,SAAS,OAAO,YAAY,YAAY,OAAO,OAAO,YAAY,aAAa,QAAQ,OAAO;AAAA,IAC9F,UAAU,OAAO,WAAW,OAAO,SAAS,IAAI,kBAAkB,IAAI;AAAA,EACxE;AACA,SAAQ,OAAe;AACvB,SAAQ,OAAe;AACvB,SAAO;AACT;AAEO,MAAM,cAA2C;AAAA,EAGtD,YAAY,SAA+B;AACzC,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,MAAM,SAAS,UAA+D,CAAC,GAAqC;AAClH,UAAM,OAAO,QAAQ,OAAO,QAAQ,KAAK,kBAAkB;AAC3D,UAAM,SAAS,MAAM,KAAK,SAAS,sBAAsB,EAAE,iBAAiB,QAAQ,iBAAiB,KAAK,CAAC;AAC3G,WAAO,OAAO,aAAa,mBAAmB,OAAO,UAAU,IAAI;AAAA,EACrE;AACF;",
  "names": []
}
