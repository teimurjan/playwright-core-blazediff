{
  "version": 3,
  "sources": ["../../src/client/clientInstrumentation.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BrowserContext } from './browserContext';\nimport type { ChannelOwner } from './channelOwner';\nimport type { APIRequestContext } from './fetch';\nimport type { StackFrame } from '@protocol/channels';\n\n// Instrumentation can mutate the data, for example change apiName or stepId.\nexport interface ApiCallData {\n  apiName: string;\n  title?: string;\n  frames: StackFrame[];\n  userData: any;\n  stepId?: string;\n  error?: Error;\n}\n\nexport type RecoverFromApiErrorHandler = () => Promise<void>;\n\nexport interface ClientInstrumentation {\n  addListener(listener: ClientInstrumentationListener): void;\n  removeListener(listener: ClientInstrumentationListener): void;\n  removeAllListeners(): void;\n  onApiCallBegin(apiCall: ApiCallData, channel: { type: string, method: string, params?: Record<string, any> }): void;\n  onApiCallRecovery(apiCall: ApiCallData, error: Error, channelOwner: ChannelOwner, recoveryHandlers: RecoverFromApiErrorHandler[]): void;\n  onApiCallEnd(apiCall: ApiCallData): void;\n  onWillPause(options: { keepTestTimeout: boolean }): void;\n\n  runAfterCreateBrowserContext(context: BrowserContext): Promise<void>;\n  runAfterCreateRequestContext(context: APIRequestContext): Promise<void>;\n  runBeforeCloseBrowserContext(context: BrowserContext): Promise<void>;\n  runBeforeCloseRequestContext(context: APIRequestContext): Promise<void>;\n}\n\nexport interface ClientInstrumentationListener {\n  onApiCallBegin?(apiCall: ApiCallData, channel: { type: string, method: string, params?: Record<string, any>  }): void;\n  onApiCallRecovery?(apiCall: ApiCallData, error: Error, channelOwner: ChannelOwner, recoveryHandlers: RecoverFromApiErrorHandler[]): void;\n  onApiCallEnd?(apiCall: ApiCallData): void;\n  onWillPause?(options: { keepTestTimeout: boolean }): void;\n\n  runAfterCreateBrowserContext?(context: BrowserContext): Promise<void>;\n  runAfterCreateRequestContext?(context: APIRequestContext): Promise<void>;\n  runBeforeCloseBrowserContext?(context: BrowserContext): Promise<void>;\n  runBeforeCloseRequestContext?(context: APIRequestContext): Promise<void>;\n}\n\nexport function createInstrumentation(): ClientInstrumentation {\n  const listeners: ClientInstrumentationListener[] = [];\n  return new Proxy({}, {\n    get: (obj: any, prop: string | symbol) => {\n      if (typeof prop !== 'string')\n        return obj[prop];\n      if (prop === 'addListener')\n        return (listener: ClientInstrumentationListener) => listeners.push(listener);\n      if (prop === 'removeListener')\n        return (listener: ClientInstrumentationListener) => listeners.splice(listeners.indexOf(listener), 1);\n      if (prop === 'removeAllListeners')\n        return () => listeners.splice(0, listeners.length);\n      if (prop.startsWith('run')) {\n        return async (...params: any[]) => {\n          for (const listener of listeners)\n            await (listener as any)[prop]?.(...params);\n        };\n      }\n      if (prop.startsWith('on')) {\n        return (...params: any[]) => {\n          for (const listener of listeners)\n            (listener as any)[prop]?.(...params);\n        };\n      }\n      return obj[prop];\n    },\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AA4DO,SAAS,wBAA+C;AAC7D,QAAM,YAA6C,CAAC;AACpD,SAAO,IAAI,MAAM,CAAC,GAAG;AAAA,IACnB,KAAK,CAAC,KAAU,SAA0B;AACxC,UAAI,OAAO,SAAS;AAClB,eAAO,IAAI,IAAI;AACjB,UAAI,SAAS;AACX,eAAO,CAAC,aAA4C,UAAU,KAAK,QAAQ;AAC7E,UAAI,SAAS;AACX,eAAO,CAAC,aAA4C,UAAU,OAAO,UAAU,QAAQ,QAAQ,GAAG,CAAC;AACrG,UAAI,SAAS;AACX,eAAO,MAAM,UAAU,OAAO,GAAG,UAAU,MAAM;AACnD,UAAI,KAAK,WAAW,KAAK,GAAG;AAC1B,eAAO,UAAU,WAAkB;AACjC,qBAAW,YAAY;AACrB,kBAAO,SAAiB,IAAI,IAAI,GAAG,MAAM;AAAA,QAC7C;AAAA,MACF;AACA,UAAI,KAAK,WAAW,IAAI,GAAG;AACzB,eAAO,IAAI,WAAkB;AAC3B,qBAAW,YAAY;AACrB,YAAC,SAAiB,IAAI,IAAI,GAAG,MAAM;AAAA,QACvC;AAAA,MACF;AACA,aAAO,IAAI,IAAI;AAAA,IACjB;AAAA,EACF,CAAC;AACH;",
  "names": []
}
