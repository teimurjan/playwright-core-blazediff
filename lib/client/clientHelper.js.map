{
  "version": 3,
  "sources": ["../../src/client/clientHelper.ts"],
  "sourcesContent": ["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isString } from '../utils/isomorphic/rtti';\n\nimport type * as types from './types';\nimport type { Platform } from './platform';\n\nexport function envObjectToArray(env: types.Env): { name: string, value: string }[] {\n  const result: { name: string, value: string }[] = [];\n  for (const name in env) {\n    if (!Object.is(env[name], undefined))\n      result.push({ name, value: String(env[name]) });\n  }\n  return result;\n}\n\nexport async function evaluationScript(platform: Platform, fun: Function | string | { path?: string, content?: string }, arg?: any, addSourceUrl: boolean = true): Promise<string> {\n  if (typeof fun === 'function') {\n    const source = fun.toString();\n    const argString = Object.is(arg, undefined) ? 'undefined' : JSON.stringify(arg);\n    return `(${source})(${argString})`;\n  }\n  if (arg !== undefined)\n    throw new Error('Cannot evaluate a string with arguments');\n  if (isString(fun))\n    return fun;\n  if (fun.content !== undefined)\n    return fun.content;\n  if (fun.path !== undefined) {\n    let source = await platform.fs().promises.readFile(fun.path, 'utf8');\n    if (addSourceUrl)\n      source = addSourceUrlToScript(source, fun.path);\n    return source;\n  }\n  throw new Error('Either path or content property must be present');\n}\n\nexport function addSourceUrlToScript(source: string, path: string): string {\n  return `${source}\\n//# sourceURL=${path.replace(/\\n/g, '')}`;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,kBAAyB;AAKlB,SAAS,iBAAiB,KAAmD;AAClF,QAAM,SAA4C,CAAC;AACnD,aAAW,QAAQ,KAAK;AACtB,QAAI,CAAC,OAAO,GAAG,IAAI,IAAI,GAAG,MAAS;AACjC,aAAO,KAAK,EAAE,MAAM,OAAO,OAAO,IAAI,IAAI,CAAC,EAAE,CAAC;AAAA,EAClD;AACA,SAAO;AACT;AAEA,eAAsB,iBAAiB,UAAoB,KAA8D,KAAW,eAAwB,MAAuB;AACjL,MAAI,OAAO,QAAQ,YAAY;AAC7B,UAAM,SAAS,IAAI,SAAS;AAC5B,UAAM,YAAY,OAAO,GAAG,KAAK,MAAS,IAAI,cAAc,KAAK,UAAU,GAAG;AAC9E,WAAO,IAAI,MAAM,KAAK,SAAS;AAAA,EACjC;AACA,MAAI,QAAQ;AACV,UAAM,IAAI,MAAM,yCAAyC;AAC3D,UAAI,sBAAS,GAAG;AACd,WAAO;AACT,MAAI,IAAI,YAAY;AAClB,WAAO,IAAI;AACb,MAAI,IAAI,SAAS,QAAW;AAC1B,QAAI,SAAS,MAAM,SAAS,GAAG,EAAE,SAAS,SAAS,IAAI,MAAM,MAAM;AACnE,QAAI;AACF,eAAS,qBAAqB,QAAQ,IAAI,IAAI;AAChD,WAAO;AAAA,EACT;AACA,QAAM,IAAI,MAAM,iDAAiD;AACnE;AAEO,SAAS,qBAAqB,QAAgB,MAAsB;AACzE,SAAO,GAAG,MAAM;AAAA,gBAAmB,KAAK,QAAQ,OAAO,EAAE,CAAC;AAC5D;",
  "names": []
}
