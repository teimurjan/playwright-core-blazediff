{
  "version": 3,
  "sources": ["../../src/client/channelOwner.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './eventEmitter';\nimport { ValidationError, maybeFindValidator  } from '../protocol/validator';\nimport { methodMetainfo } from '../utils/isomorphic/protocolMetainfo';\nimport { captureLibraryStackTrace } from './clientStackTrace';\nimport { stringifyStackFrames } from '../utils/isomorphic/stackTrace';\n\nimport type { ClientInstrumentation, RecoverFromApiErrorHandler } from './clientInstrumentation';\nimport type { Connection } from './connection';\nimport type { Logger } from './types';\nimport type { ValidatorContext } from '../protocol/validator';\nimport type { Platform } from './platform';\nimport type * as channels from '@protocol/channels';\n\ntype Listener = (...args: any[]) => void;\n\nexport abstract class ChannelOwner<T extends channels.Channel = channels.Channel> extends EventEmitter {\n  readonly _connection: Connection;\n  private _parent: ChannelOwner | undefined;\n  private _objects = new Map<string, ChannelOwner>();\n\n  readonly _type: string;\n  readonly _guid: string;\n  readonly _channel: T;\n  readonly _initializer: channels.InitializerTraits<T>;\n  _logger: Logger | undefined;\n  readonly _instrumentation: ClientInstrumentation;\n  private _eventToSubscriptionMapping: Map<string, string> = new Map();\n  _wasCollected: boolean = false;\n\n  constructor(parent: ChannelOwner | Connection, type: string, guid: string, initializer: channels.InitializerTraits<T>) {\n    const connection = parent instanceof ChannelOwner ? parent._connection : parent;\n    super(connection._platform);\n    this.setMaxListeners(0);\n    this._connection = connection;\n    this._type = type;\n    this._guid = guid;\n    this._parent = parent instanceof ChannelOwner ? parent : undefined;\n    this._instrumentation = this._connection._instrumentation;\n\n    this._connection._objects.set(guid, this);\n    if (this._parent) {\n      this._parent._objects.set(guid, this);\n      this._logger = this._parent._logger;\n    }\n\n    this._channel = this._createChannel(new EventEmitter(connection._platform));\n    this._initializer = initializer;\n  }\n\n  _setEventToSubscriptionMapping(mapping: Map<string, string>) {\n    this._eventToSubscriptionMapping = mapping;\n  }\n\n  private _updateSubscription(event: string | symbol, enabled: boolean) {\n    const protocolEvent = this._eventToSubscriptionMapping.get(String(event));\n    if (protocolEvent)\n      (this._channel as any).updateSubscription({ event: protocolEvent, enabled }).catch(() => {});\n  }\n\n  override on(event: string | symbol, listener: Listener): this {\n    if (!this.listenerCount(event))\n      this._updateSubscription(event, true);\n    super.on(event, listener);\n    return this;\n  }\n\n  override addListener(event: string | symbol, listener: Listener): this {\n    if (!this.listenerCount(event))\n      this._updateSubscription(event, true);\n    super.addListener(event, listener);\n    return this;\n  }\n\n  override prependListener(event: string | symbol, listener: Listener): this {\n    if (!this.listenerCount(event))\n      this._updateSubscription(event, true);\n    super.prependListener(event, listener);\n    return this;\n  }\n\n  override off(event: string | symbol, listener: Listener): this {\n    super.off(event, listener);\n    if (!this.listenerCount(event))\n      this._updateSubscription(event, false);\n    return this;\n  }\n\n  override removeListener(event: string | symbol, listener: Listener): this {\n    super.removeListener(event, listener);\n    if (!this.listenerCount(event))\n      this._updateSubscription(event, false);\n    return this;\n  }\n\n  _adopt(child: ChannelOwner<any>) {\n    child._parent!._objects.delete(child._guid);\n    this._objects.set(child._guid, child);\n    child._parent = this;\n  }\n\n  _dispose(reason: 'gc' | undefined) {\n    // Clean up from parent and connection.\n    if (this._parent)\n      this._parent._objects.delete(this._guid);\n    this._connection._objects.delete(this._guid);\n    this._wasCollected = reason === 'gc';\n\n    // Dispose all children.\n    for (const object of [...this._objects.values()])\n      object._dispose(reason);\n    this._objects.clear();\n  }\n\n  _debugScopeState(): any {\n    return {\n      _guid: this._guid,\n      objects: Array.from(this._objects.values()).map(o => o._debugScopeState()),\n    };\n  }\n\n  private _validatorToWireContext(): ValidatorContext {\n    return {\n      tChannelImpl: tChannelImplToWire,\n      binary: this._connection.rawBuffers() ? 'buffer' : 'toBase64',\n      isUnderTest: () => this._platform.isUnderTest(),\n    };\n  }\n\n  private _createChannel(base: Object): T {\n    const channel = new Proxy(base, {\n      get: (obj: any, prop: string | symbol) => {\n        if (typeof prop === 'string') {\n          const validator = maybeFindValidator(this._type, prop, 'Params');\n          const { internal } = methodMetainfo.get(this._type + '.' + prop) || {};\n          if (validator) {\n            return async (params: any) => {\n              return await this._wrapApiCall(async apiZone => {\n                const validatedParams = validator(params, '', this._validatorToWireContext());\n                if (!apiZone.internal && !apiZone.reported) {\n                  // Reporting/tracing/logging this api call for the first time.\n                  apiZone.reported = true;\n                  this._instrumentation.onApiCallBegin(apiZone, { type: this._type, method: prop, params });\n                  logApiCall(this._platform, this._logger, `=> ${apiZone.apiName} started`);\n                  return await this._connection.sendMessageToServer(this, prop, validatedParams, apiZone);\n                }\n                // Since this api call is either internal, or has already been reported/traced once,\n                // passing as internal.\n                return await this._connection.sendMessageToServer(this, prop, validatedParams, { internal: true });\n              }, { internal });\n            };\n          }\n        }\n        return obj[prop];\n      },\n    });\n    (channel as any)._object = this;\n    return channel;\n  }\n\n  async _wrapApiCall<R>(func: (apiZone: ApiZone) => Promise<R>, options?: { internal?: boolean, title?: string }): Promise<R> {\n    const logger = this._logger;\n    const existingApiZone = this._platform.zones.current().data<ApiZone>();\n    if (existingApiZone)\n      return await func(existingApiZone);\n\n    const stackTrace = captureLibraryStackTrace(this._platform);\n    const apiZone: ApiZone = { title: options?.title, apiName: stackTrace.apiName, frames: stackTrace.frames, internal: options?.internal ?? false, reported: false, userData: undefined, stepId: undefined };\n\n    try {\n      const result = await this._platform.zones.current().push(apiZone).run(async () => await func(apiZone));\n      if (!options?.internal) {\n        logApiCall(this._platform, logger, `<= ${apiZone.apiName} succeeded`);\n        this._instrumentation.onApiCallEnd(apiZone);\n      }\n      return result;\n    } catch (e) {\n      const innerError = ((this._platform.showInternalStackFrames() || this._platform.isUnderTest()) && e.stack) ? '\\n<inner error>\\n' + e.stack : '';\n      if (apiZone.apiName && !apiZone.apiName.includes('<anonymous>'))\n        e.message = apiZone.apiName + ': ' + e.message;\n      const stackFrames = '\\n' + stringifyStackFrames(stackTrace.frames).join('\\n') + innerError;\n      if (stackFrames.trim())\n        e.stack = e.message + stackFrames;\n      else\n        e.stack = '';\n      if (!options?.internal) {\n        const recoveryHandlers: RecoverFromApiErrorHandler[] = [];\n        apiZone.error = e;\n        this._instrumentation.onApiCallRecovery(apiZone, e, this, recoveryHandlers);\n        for (const handler of recoveryHandlers)\n          await handler();\n        logApiCall(this._platform, logger, `<= ${apiZone.apiName} failed`);\n        this._instrumentation.onApiCallEnd(apiZone);\n      }\n      throw e;\n    }\n  }\n\n  private toJSON() {\n    // Jest's expect library tries to print objects sometimes.\n    // RPC objects can contain links to lots of other objects,\n    // which can cause jest to crash. Let's help it out\n    // by just returning the important values.\n    return {\n      _type: this._type,\n      _guid: this._guid,\n    };\n  }\n}\n\nfunction logApiCall(platform: Platform, logger: Logger | undefined, message: string) {\n  if (logger && logger.isEnabled('api', 'info'))\n    logger.log('api', 'info', message, [], { color: 'cyan' });\n  platform.log('api', message);\n}\n\nfunction tChannelImplToWire(names: '*' | string[], arg: any, path: string, context: ValidatorContext) {\n  if (arg._object instanceof ChannelOwner && (names === '*' || names.includes(arg._object._type)))\n    return { guid: arg._object._guid };\n  throw new ValidationError(`${path}: expected channel ${names.toString()}`);\n}\n\ntype ApiZone = {\n  apiName: string;\n  frames: channels.StackFrame[];\n  title?: string;\n  internal?: boolean;\n  reported: boolean;\n  userData: any;\n  stepId?: string;\n  error?: Error;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,0BAA6B;AAC7B,uBAAqD;AACrD,8BAA+B;AAC/B,8BAAyC;AACzC,wBAAqC;AAW9B,MAAe,qBAAoE,iCAAa;AAAA,EAcrG,YAAY,QAAmC,MAAc,MAAc,aAA4C;AACrH,UAAM,aAAa,kBAAkB,eAAe,OAAO,cAAc;AACzE,UAAM,WAAW,SAAS;AAb5B,SAAQ,WAAW,oBAAI,IAA0B;AAQjD,SAAQ,8BAAmD,oBAAI,IAAI;AACnE,yBAAyB;AAKvB,SAAK,gBAAgB,CAAC;AACtB,SAAK,cAAc;AACnB,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,UAAU,kBAAkB,eAAe,SAAS;AACzD,SAAK,mBAAmB,KAAK,YAAY;AAEzC,SAAK,YAAY,SAAS,IAAI,MAAM,IAAI;AACxC,QAAI,KAAK,SAAS;AAChB,WAAK,QAAQ,SAAS,IAAI,MAAM,IAAI;AACpC,WAAK,UAAU,KAAK,QAAQ;AAAA,IAC9B;AAEA,SAAK,WAAW,KAAK,eAAe,IAAI,iCAAa,WAAW,SAAS,CAAC;AAC1E,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,+BAA+B,SAA8B;AAC3D,SAAK,8BAA8B;AAAA,EACrC;AAAA,EAEQ,oBAAoB,OAAwB,SAAkB;AACpE,UAAM,gBAAgB,KAAK,4BAA4B,IAAI,OAAO,KAAK,CAAC;AACxE,QAAI;AACF,MAAC,KAAK,SAAiB,mBAAmB,EAAE,OAAO,eAAe,QAAQ,CAAC,EAAE,MAAM,MAAM;AAAA,MAAC,CAAC;AAAA,EAC/F;AAAA,EAES,GAAG,OAAwB,UAA0B;AAC5D,QAAI,CAAC,KAAK,cAAc,KAAK;AAC3B,WAAK,oBAAoB,OAAO,IAAI;AACtC,UAAM,GAAG,OAAO,QAAQ;AACxB,WAAO;AAAA,EACT;AAAA,EAES,YAAY,OAAwB,UAA0B;AACrE,QAAI,CAAC,KAAK,cAAc,KAAK;AAC3B,WAAK,oBAAoB,OAAO,IAAI;AACtC,UAAM,YAAY,OAAO,QAAQ;AACjC,WAAO;AAAA,EACT;AAAA,EAES,gBAAgB,OAAwB,UAA0B;AACzE,QAAI,CAAC,KAAK,cAAc,KAAK;AAC3B,WAAK,oBAAoB,OAAO,IAAI;AACtC,UAAM,gBAAgB,OAAO,QAAQ;AACrC,WAAO;AAAA,EACT;AAAA,EAES,IAAI,OAAwB,UAA0B;AAC7D,UAAM,IAAI,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,cAAc,KAAK;AAC3B,WAAK,oBAAoB,OAAO,KAAK;AACvC,WAAO;AAAA,EACT;AAAA,EAES,eAAe,OAAwB,UAA0B;AACxE,UAAM,eAAe,OAAO,QAAQ;AACpC,QAAI,CAAC,KAAK,cAAc,KAAK;AAC3B,WAAK,oBAAoB,OAAO,KAAK;AACvC,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,OAA0B;AAC/B,UAAM,QAAS,SAAS,OAAO,MAAM,KAAK;AAC1C,SAAK,SAAS,IAAI,MAAM,OAAO,KAAK;AACpC,UAAM,UAAU;AAAA,EAClB;AAAA,EAEA,SAAS,QAA0B;AAEjC,QAAI,KAAK;AACP,WAAK,QAAQ,SAAS,OAAO,KAAK,KAAK;AACzC,SAAK,YAAY,SAAS,OAAO,KAAK,KAAK;AAC3C,SAAK,gBAAgB,WAAW;AAGhC,eAAW,UAAU,CAAC,GAAG,KAAK,SAAS,OAAO,CAAC;AAC7C,aAAO,SAAS,MAAM;AACxB,SAAK,SAAS,MAAM;AAAA,EACtB;AAAA,EAEA,mBAAwB;AACtB,WAAO;AAAA,MACL,OAAO,KAAK;AAAA,MACZ,SAAS,MAAM,KAAK,KAAK,SAAS,OAAO,CAAC,EAAE,IAAI,OAAK,EAAE,iBAAiB,CAAC;AAAA,IAC3E;AAAA,EACF;AAAA,EAEQ,0BAA4C;AAClD,WAAO;AAAA,MACL,cAAc;AAAA,MACd,QAAQ,KAAK,YAAY,WAAW,IAAI,WAAW;AAAA,MACnD,aAAa,MAAM,KAAK,UAAU,YAAY;AAAA,IAChD;AAAA,EACF;AAAA,EAEQ,eAAe,MAAiB;AACtC,UAAM,UAAU,IAAI,MAAM,MAAM;AAAA,MAC9B,KAAK,CAAC,KAAU,SAA0B;AACxC,YAAI,OAAO,SAAS,UAAU;AAC5B,gBAAM,gBAAY,qCAAmB,KAAK,OAAO,MAAM,QAAQ;AAC/D,gBAAM,EAAE,SAAS,IAAI,uCAAe,IAAI,KAAK,QAAQ,MAAM,IAAI,KAAK,CAAC;AACrE,cAAI,WAAW;AACb,mBAAO,OAAO,WAAgB;AAC5B,qBAAO,MAAM,KAAK,aAAa,OAAM,YAAW;AAC9C,sBAAM,kBAAkB,UAAU,QAAQ,IAAI,KAAK,wBAAwB,CAAC;AAC5E,oBAAI,CAAC,QAAQ,YAAY,CAAC,QAAQ,UAAU;AAE1C,0BAAQ,WAAW;AACnB,uBAAK,iBAAiB,eAAe,SAAS,EAAE,MAAM,KAAK,OAAO,QAAQ,MAAM,OAAO,CAAC;AACxF,6BAAW,KAAK,WAAW,KAAK,SAAS,MAAM,QAAQ,OAAO,UAAU;AACxE,yBAAO,MAAM,KAAK,YAAY,oBAAoB,MAAM,MAAM,iBAAiB,OAAO;AAAA,gBACxF;AAGA,uBAAO,MAAM,KAAK,YAAY,oBAAoB,MAAM,MAAM,iBAAiB,EAAE,UAAU,KAAK,CAAC;AAAA,cACnG,GAAG,EAAE,SAAS,CAAC;AAAA,YACjB;AAAA,UACF;AAAA,QACF;AACA,eAAO,IAAI,IAAI;AAAA,MACjB;AAAA,IACF,CAAC;AACD,IAAC,QAAgB,UAAU;AAC3B,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aAAgB,MAAwC,SAA8D;AAC1H,UAAM,SAAS,KAAK;AACpB,UAAM,kBAAkB,KAAK,UAAU,MAAM,QAAQ,EAAE,KAAc;AACrE,QAAI;AACF,aAAO,MAAM,KAAK,eAAe;AAEnC,UAAM,iBAAa,kDAAyB,KAAK,SAAS;AAC1D,UAAM,UAAmB,EAAE,OAAO,SAAS,OAAO,SAAS,WAAW,SAAS,QAAQ,WAAW,QAAQ,UAAU,SAAS,YAAY,OAAO,UAAU,OAAO,UAAU,QAAW,QAAQ,OAAU;AAExM,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,UAAU,MAAM,QAAQ,EAAE,KAAK,OAAO,EAAE,IAAI,YAAY,MAAM,KAAK,OAAO,CAAC;AACrG,UAAI,CAAC,SAAS,UAAU;AACtB,mBAAW,KAAK,WAAW,QAAQ,MAAM,QAAQ,OAAO,YAAY;AACpE,aAAK,iBAAiB,aAAa,OAAO;AAAA,MAC5C;AACA,aAAO;AAAA,IACT,SAAS,GAAG;AACV,YAAM,cAAe,KAAK,UAAU,wBAAwB,KAAK,KAAK,UAAU,YAAY,MAAM,EAAE,QAAS,sBAAsB,EAAE,QAAQ;AAC7I,UAAI,QAAQ,WAAW,CAAC,QAAQ,QAAQ,SAAS,aAAa;AAC5D,UAAE,UAAU,QAAQ,UAAU,OAAO,EAAE;AACzC,YAAM,cAAc,WAAO,wCAAqB,WAAW,MAAM,EAAE,KAAK,IAAI,IAAI;AAChF,UAAI,YAAY,KAAK;AACnB,UAAE,QAAQ,EAAE,UAAU;AAAA;AAEtB,UAAE,QAAQ;AACZ,UAAI,CAAC,SAAS,UAAU;AACtB,cAAM,mBAAiD,CAAC;AACxD,gBAAQ,QAAQ;AAChB,aAAK,iBAAiB,kBAAkB,SAAS,GAAG,MAAM,gBAAgB;AAC1E,mBAAW,WAAW;AACpB,gBAAM,QAAQ;AAChB,mBAAW,KAAK,WAAW,QAAQ,MAAM,QAAQ,OAAO,SAAS;AACjE,aAAK,iBAAiB,aAAa,OAAO;AAAA,MAC5C;AACA,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEQ,SAAS;AAKf,WAAO;AAAA,MACL,OAAO,KAAK;AAAA,MACZ,OAAO,KAAK;AAAA,IACd;AAAA,EACF;AACF;AAEA,SAAS,WAAW,UAAoB,QAA4B,SAAiB;AACnF,MAAI,UAAU,OAAO,UAAU,OAAO,MAAM;AAC1C,WAAO,IAAI,OAAO,QAAQ,SAAS,CAAC,GAAG,EAAE,OAAO,OAAO,CAAC;AAC1D,WAAS,IAAI,OAAO,OAAO;AAC7B;AAEA,SAAS,mBAAmB,OAAuB,KAAU,MAAc,SAA2B;AACpG,MAAI,IAAI,mBAAmB,iBAAiB,UAAU,OAAO,MAAM,SAAS,IAAI,QAAQ,KAAK;AAC3F,WAAO,EAAE,MAAM,IAAI,QAAQ,MAAM;AACnC,QAAM,IAAI,iCAAgB,GAAG,IAAI,sBAAsB,MAAM,SAAS,CAAC,EAAE;AAC3E;",
  "names": []
}
