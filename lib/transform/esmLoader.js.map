{
  "version": 3,
  "sources": ["../../src/transform/esmLoader.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport url from 'url';\n\nimport { addToCompilationCache, currentFileDepsCollector, serializeCompilationCache, startCollectingFileDeps, stopCollectingFileDeps } from './compilationCache';\nimport { PortTransport } from './portTransport';\nimport { resolveHook, setSingleTSConfig, setTransformConfig, shouldTransform, transformHook } from './transform';\nimport { fileIsModule } from '../util';\n\n// Node < 18.6: defaultResolve takes 3 arguments.\n// Node >= 18.6: nextResolve from the chain takes 2 arguments.\nasync function resolve(specifier: string, context: { parentURL?: string }, defaultResolve: Function) {\n  if (context.parentURL && context.parentURL.startsWith('file://')) {\n    const filename = url.fileURLToPath(context.parentURL);\n    const resolved = resolveHook(filename, specifier);\n    if (resolved !== undefined)\n      specifier = url.pathToFileURL(resolved).toString();\n  }\n  const result = await defaultResolve(specifier, context, defaultResolve);\n  // Note: we collect dependencies here that will be sent to the main thread\n  // (and optionally runner process) after the loading finishes.\n  if (result?.url && result.url.startsWith('file://'))\n    currentFileDepsCollector()?.add(url.fileURLToPath(result.url));\n\n  return result;\n}\n\n// non-js files have undefined\n// some js files have null\n// {module/commonjs}-typescript are changed to {module,commonjs} because we handle typescript ourselves\nconst kSupportedFormats = new Map([\n  ['commonjs', 'commonjs'],\n  ['module', 'module'],\n  ['commonjs-typescript', 'commonjs'],\n  ['module-typescript', 'module'],\n  [null, null],\n  [undefined, undefined]\n]);\n\n// Node < 18.6: defaultLoad takes 3 arguments.\n// Node >= 18.6: nextLoad from the chain takes 2 arguments.\nasync function load(moduleUrl: string, context: { format?: string }, defaultLoad: Function) {\n  // Bail out for wasm, json, etc.\n  if (!kSupportedFormats.has(context.format))\n    return defaultLoad(moduleUrl, context, defaultLoad);\n\n  // Bail for built-in modules.\n  if (!moduleUrl.startsWith('file://'))\n    return defaultLoad(moduleUrl, context, defaultLoad);\n\n  const filename = url.fileURLToPath(moduleUrl);\n  // Bail for node_modules.\n  if (!shouldTransform(filename))\n    return defaultLoad(moduleUrl, context, defaultLoad);\n\n  const code = fs.readFileSync(filename, 'utf-8');\n  const transformed = transformHook(code, filename, moduleUrl);\n\n  // Flush the source maps to the main thread, so that errors during import() are source-mapped.\n  if (transformed.serializedCache) {\n    if (legacyWaitForSourceMaps)\n      await transport?.send('pushToCompilationCache', { cache: transformed.serializedCache });\n    else\n      transport?.post('pushToCompilationCache', { cache: transformed.serializedCache });\n  }\n\n  // Output format is required, so we determine it manually when unknown.\n  // shortCircuit is required by Node >= 18.6 to designate no more loaders should be called.\n  return {\n    format: kSupportedFormats.get(context.format) || (fileIsModule(filename) ? 'module' : 'commonjs'),\n    source: transformed.code,\n    shortCircuit: true,\n  };\n}\n\nlet transport: PortTransport | undefined;\nlet legacyWaitForSourceMaps = false;\n\nfunction initialize(data: { port: MessagePort }) {\n  transport = createTransport(data?.port);\n  legacyWaitForSourceMaps = !!process.env.PLAYWRIGHT_WAIT_FOR_SOURCE_MAPS;\n}\n\nfunction createTransport(port: MessagePort) {\n  return new PortTransport(port, async (method, params) => {\n    if (method === 'setSingleTSConfig') {\n      setSingleTSConfig(params.tsconfig);\n      return;\n    }\n\n    if (method === 'setTransformConfig') {\n      setTransformConfig(params.config);\n      return;\n    }\n\n    if (method === 'addToCompilationCache') {\n      addToCompilationCache(params.cache);\n      return;\n    }\n\n    if (method === 'getCompilationCache')\n      return { cache: serializeCompilationCache() };\n\n    if (method === 'startCollectingFileDeps') {\n      startCollectingFileDeps();\n      return;\n    }\n\n    if (method === 'stopCollectingFileDeps') {\n      stopCollectingFileDeps(params.file);\n      return;\n    }\n  });\n}\n\n\nmodule.exports = { initialize, load, resolve };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAgBA,gBAAe;AACf,iBAAgB;AAEhB,8BAA4I;AAC5I,2BAA8B;AAC9B,uBAAmG;AACnG,kBAA6B;AAI7B,eAAe,QAAQ,WAAmB,SAAiC,gBAA0B;AACnG,MAAI,QAAQ,aAAa,QAAQ,UAAU,WAAW,SAAS,GAAG;AAChE,UAAM,WAAW,WAAAA,QAAI,cAAc,QAAQ,SAAS;AACpD,UAAM,eAAW,8BAAY,UAAU,SAAS;AAChD,QAAI,aAAa;AACf,kBAAY,WAAAA,QAAI,cAAc,QAAQ,EAAE,SAAS;AAAA,EACrD;AACA,QAAM,SAAS,MAAM,eAAe,WAAW,SAAS,cAAc;AAGtE,MAAI,QAAQ,OAAO,OAAO,IAAI,WAAW,SAAS;AAChD,0DAAyB,GAAG,IAAI,WAAAA,QAAI,cAAc,OAAO,GAAG,CAAC;AAE/D,SAAO;AACT;AAKA,MAAM,oBAAoB,oBAAI,IAAI;AAAA,EAChC,CAAC,YAAY,UAAU;AAAA,EACvB,CAAC,UAAU,QAAQ;AAAA,EACnB,CAAC,uBAAuB,UAAU;AAAA,EAClC,CAAC,qBAAqB,QAAQ;AAAA,EAC9B,CAAC,MAAM,IAAI;AAAA,EACX,CAAC,QAAW,MAAS;AACvB,CAAC;AAID,eAAe,KAAK,WAAmB,SAA8B,aAAuB;AAE1F,MAAI,CAAC,kBAAkB,IAAI,QAAQ,MAAM;AACvC,WAAO,YAAY,WAAW,SAAS,WAAW;AAGpD,MAAI,CAAC,UAAU,WAAW,SAAS;AACjC,WAAO,YAAY,WAAW,SAAS,WAAW;AAEpD,QAAM,WAAW,WAAAA,QAAI,cAAc,SAAS;AAE5C,MAAI,KAAC,kCAAgB,QAAQ;AAC3B,WAAO,YAAY,WAAW,SAAS,WAAW;AAEpD,QAAM,OAAO,UAAAC,QAAG,aAAa,UAAU,OAAO;AAC9C,QAAM,kBAAc,gCAAc,MAAM,UAAU,SAAS;AAG3D,MAAI,YAAY,iBAAiB;AAC/B,QAAI;AACF,YAAM,WAAW,KAAK,0BAA0B,EAAE,OAAO,YAAY,gBAAgB,CAAC;AAAA;AAEtF,iBAAW,KAAK,0BAA0B,EAAE,OAAO,YAAY,gBAAgB,CAAC;AAAA,EACpF;AAIA,SAAO;AAAA,IACL,QAAQ,kBAAkB,IAAI,QAAQ,MAAM,UAAM,0BAAa,QAAQ,IAAI,WAAW;AAAA,IACtF,QAAQ,YAAY;AAAA,IACpB,cAAc;AAAA,EAChB;AACF;AAEA,IAAI;AACJ,IAAI,0BAA0B;AAE9B,SAAS,WAAW,MAA6B;AAC/C,cAAY,gBAAgB,MAAM,IAAI;AACtC,4BAA0B,CAAC,CAAC,QAAQ,IAAI;AAC1C;AAEA,SAAS,gBAAgB,MAAmB;AAC1C,SAAO,IAAI,mCAAc,MAAM,OAAO,QAAQ,WAAW;AACvD,QAAI,WAAW,qBAAqB;AAClC,8CAAkB,OAAO,QAAQ;AACjC;AAAA,IACF;AAEA,QAAI,WAAW,sBAAsB;AACnC,+CAAmB,OAAO,MAAM;AAChC;AAAA,IACF;AAEA,QAAI,WAAW,yBAAyB;AACtC,yDAAsB,OAAO,KAAK;AAClC;AAAA,IACF;AAEA,QAAI,WAAW;AACb,aAAO,EAAE,WAAO,mDAA0B,EAAE;AAE9C,QAAI,WAAW,2BAA2B;AACxC,2DAAwB;AACxB;AAAA,IACF;AAEA,QAAI,WAAW,0BAA0B;AACvC,0DAAuB,OAAO,IAAI;AAClC;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAGA,OAAO,UAAU,EAAE,YAAY,MAAM,QAAQ;",
  "names": ["url", "fs"]
}
