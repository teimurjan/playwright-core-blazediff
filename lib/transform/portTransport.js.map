{
  "version": 3,
  "sources": ["../../src/transform/portTransport.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class PortTransport {\n  private _lastId = 0;\n  private _port: MessagePort;\n  private _callbacks = new Map<number, (result: any) => void>();\n\n  constructor(port: MessagePort, handler: (method: string, params: any) => Promise<any>) {\n    this._port = port;\n    port.addEventListener('message', async event => {\n      const message = event.data;\n      const { id, ackId, method, params, result } = message;\n\n      if (ackId) {\n        const callback = this._callbacks.get(ackId);\n        this._callbacks.delete(ackId);\n        this._resetRef();\n        callback?.(result);\n        return;\n      }\n\n      const handlerResult = await handler(method, params);\n      if (id)\n        this._port.postMessage({ ackId: id, result: handlerResult });\n    });\n    // Make sure to unref **after** adding a 'message' event listener.\n    // https://nodejs.org/api/worker_threads.html#portref\n    this._resetRef();\n  }\n\n  post(method: string, params: any) {\n    this._port.postMessage({ method, params });\n  }\n\n  async send(method: string, params: any) {\n    return await new Promise<any>(f => {\n      const id = ++this._lastId;\n      this._callbacks.set(id, f);\n      this._resetRef();\n      this._port.postMessage({ id, method, params });\n    });\n  }\n\n  private _resetRef() {\n    if (this._callbacks.size) {\n      // When we are waiting for a response, ref the port to prevent this process from exiting.\n      (this._port as any).ref();\n    } else {\n      // When we are not waiting for a response, unref the port to prevent this process\n      // from hanging forever.\n      (this._port as any).unref();\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBO,MAAM,cAAc;AAAA,EAKzB,YAAY,MAAmB,SAAwD;AAJvF,SAAQ,UAAU;AAElB,SAAQ,aAAa,oBAAI,IAAmC;AAG1D,SAAK,QAAQ;AACb,SAAK,iBAAiB,WAAW,OAAM,UAAS;AAC9C,YAAM,UAAU,MAAM;AACtB,YAAM,EAAE,IAAI,OAAO,QAAQ,QAAQ,OAAO,IAAI;AAE9C,UAAI,OAAO;AACT,cAAM,WAAW,KAAK,WAAW,IAAI,KAAK;AAC1C,aAAK,WAAW,OAAO,KAAK;AAC5B,aAAK,UAAU;AACf,mBAAW,MAAM;AACjB;AAAA,MACF;AAEA,YAAM,gBAAgB,MAAM,QAAQ,QAAQ,MAAM;AAClD,UAAI;AACF,aAAK,MAAM,YAAY,EAAE,OAAO,IAAI,QAAQ,cAAc,CAAC;AAAA,IAC/D,CAAC;AAGD,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,KAAK,QAAgB,QAAa;AAChC,SAAK,MAAM,YAAY,EAAE,QAAQ,OAAO,CAAC;AAAA,EAC3C;AAAA,EAEA,MAAM,KAAK,QAAgB,QAAa;AACtC,WAAO,MAAM,IAAI,QAAa,OAAK;AACjC,YAAM,KAAK,EAAE,KAAK;AAClB,WAAK,WAAW,IAAI,IAAI,CAAC;AACzB,WAAK,UAAU;AACf,WAAK,MAAM,YAAY,EAAE,IAAI,QAAQ,OAAO,CAAC;AAAA,IAC/C,CAAC;AAAA,EACH;AAAA,EAEQ,YAAY;AAClB,QAAI,KAAK,WAAW,MAAM;AAExB,MAAC,KAAK,MAAc,IAAI;AAAA,IAC1B,OAAO;AAGL,MAAC,KAAK,MAAc,MAAM;AAAA,IAC5B;AAAA,EACF;AACF;",
  "names": []
}
