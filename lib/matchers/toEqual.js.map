{
  "version": 3,
  "sources": ["../../src/matchers/toEqual.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isRegExp } from 'playwright-core/lib/utils';\n\nimport { callLogText, expectTypes } from '../util';\nimport { matcherHint } from './matcherHint';\nimport { runBrowserBackendOnError } from '../mcp/browser/backend';\n\nimport type { MatcherResult } from './matcherHint';\nimport type { ExpectMatcherState } from '../../types/test';\nimport type { Locator } from 'playwright-core';\n\n// Omit colon and one or more spaces, so can call getLabelPrinter.\nconst EXPECTED_LABEL = 'Expected';\nconst RECEIVED_LABEL = 'Received';\n\nexport async function toEqual<T>(\n  this: ExpectMatcherState,\n  matcherName: string,\n  receiver: Locator,\n  receiverType: string,\n  query: (isNot: boolean, timeout: number) => Promise<{ matches: boolean, received?: any, log?: string[], timedOut?: boolean }>,\n  expected: T,\n  options: { timeout?: number, contains?: boolean } = {},\n  messagePreventExtraStatIndent?: boolean\n): Promise<MatcherResult<any, any>> {\n  expectTypes(receiver, [receiverType], matcherName);\n\n  const matcherOptions = {\n    comment: options.contains ? '' : 'deep equality',\n    isNot: this.isNot,\n    promise: this.promise,\n  };\n\n  const timeout = options.timeout ?? this.timeout;\n\n  const { matches: pass, received, log, timedOut } = await query(!!this.isNot, timeout).catch(async error => {\n    // FIXME: query should not throw, but it does for strict mode violations for example.\n    await runBrowserBackendOnError(receiver.page(), () => error.message);\n    throw error;\n  });\n\n  if (pass === !this.isNot) {\n    return {\n      name: matcherName,\n      message: () => '',\n      pass,\n      expected\n    };\n  }\n\n  let printedReceived: string | undefined;\n  let printedExpected: string | undefined;\n  let printedDiff: string | undefined;\n  if (pass) {\n    printedExpected = `Expected: not ${this.utils.printExpected(expected)}`;\n    printedReceived = `Received: ${this.utils.printReceived(received)}`;\n  } else if (Array.isArray(expected) && Array.isArray(received)) {\n    const normalizedExpected = expected.map((exp, index) => {\n      const rec = received[index];\n      if (isRegExp(exp))\n        return exp.test(rec) ? rec : exp;\n\n      return exp;\n    });\n    printedDiff = this.utils.printDiffOrStringify(\n        normalizedExpected,\n        received,\n        EXPECTED_LABEL,\n        RECEIVED_LABEL,\n        false,\n    );\n  } else {\n    printedDiff = this.utils.printDiffOrStringify(\n        expected,\n        received,\n        EXPECTED_LABEL,\n        RECEIVED_LABEL,\n        false,\n    );\n  }\n  const message = () => {\n    const details = printedDiff || `${printedExpected}\\n${printedReceived}`;\n    const header = matcherHint(this, receiver, matcherName, 'locator', undefined, matcherOptions, timedOut ? timeout : undefined, details, messagePreventExtraStatIndent);\n    return `${header}${callLogText(log)}`;\n  };\n\n  await runBrowserBackendOnError(receiver.page(), message);\n\n  // Passing the actual and expected objects so that a custom reporter\n  // could access them, for example in order to display a custom visual diff,\n  // or create a different error message\n  return {\n    actual: received,\n    expected, message,\n    name: matcherName,\n    pass,\n    log,\n    timeout: timedOut ? timeout : undefined,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,mBAAyB;AAEzB,kBAAyC;AACzC,yBAA4B;AAC5B,qBAAyC;AAOzC,MAAM,iBAAiB;AACvB,MAAM,iBAAiB;AAEvB,eAAsB,QAEpB,aACA,UACA,cACA,OACA,UACA,UAAoD,CAAC,GACrD,+BACkC;AAClC,+BAAY,UAAU,CAAC,YAAY,GAAG,WAAW;AAEjD,QAAM,iBAAiB;AAAA,IACrB,SAAS,QAAQ,WAAW,KAAK;AAAA,IACjC,OAAO,KAAK;AAAA,IACZ,SAAS,KAAK;AAAA,EAChB;AAEA,QAAM,UAAU,QAAQ,WAAW,KAAK;AAExC,QAAM,EAAE,SAAS,MAAM,UAAU,KAAK,SAAS,IAAI,MAAM,MAAM,CAAC,CAAC,KAAK,OAAO,OAAO,EAAE,MAAM,OAAM,UAAS;AAEzG,cAAM,yCAAyB,SAAS,KAAK,GAAG,MAAM,MAAM,OAAO;AACnE,UAAM;AAAA,EACR,CAAC;AAED,MAAI,SAAS,CAAC,KAAK,OAAO;AACxB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS,MAAM;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI,MAAM;AACR,sBAAkB,iBAAiB,KAAK,MAAM,cAAc,QAAQ,CAAC;AACrE,sBAAkB,aAAa,KAAK,MAAM,cAAc,QAAQ,CAAC;AAAA,EACnE,WAAW,MAAM,QAAQ,QAAQ,KAAK,MAAM,QAAQ,QAAQ,GAAG;AAC7D,UAAM,qBAAqB,SAAS,IAAI,CAAC,KAAK,UAAU;AACtD,YAAM,MAAM,SAAS,KAAK;AAC1B,cAAI,uBAAS,GAAG;AACd,eAAO,IAAI,KAAK,GAAG,IAAI,MAAM;AAE/B,aAAO;AAAA,IACT,CAAC;AACD,kBAAc,KAAK,MAAM;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACF,OAAO;AACL,kBAAc,KAAK,MAAM;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACF;AACA,QAAM,UAAU,MAAM;AACpB,UAAM,UAAU,eAAe,GAAG,eAAe;AAAA,EAAK,eAAe;AACrE,UAAM,aAAS,gCAAY,MAAM,UAAU,aAAa,WAAW,QAAW,gBAAgB,WAAW,UAAU,QAAW,SAAS,6BAA6B;AACpK,WAAO,GAAG,MAAM,OAAG,yBAAY,GAAG,CAAC;AAAA,EACrC;AAEA,YAAM,yCAAyB,SAAS,KAAK,GAAG,OAAO;AAKvD,SAAO;AAAA,IACL,QAAQ;AAAA,IACR;AAAA,IAAU;AAAA,IACV,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA,SAAS,WAAW,UAAU;AAAA,EAChC;AACF;",
  "names": []
}
