{
  "version": 3,
  "sources": ["../../src/matchers/toBeTruthy.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { callLogText, expectTypes } from '../util';\nimport { kNoElementsFoundError, matcherHint } from './matcherHint';\nimport { runBrowserBackendOnError } from '../mcp/browser/backend';\n\nimport type { MatcherResult } from './matcherHint';\nimport type { ExpectMatcherState } from '../../types/test';\nimport type { Locator } from 'playwright-core';\n\nexport async function toBeTruthy(\n  this: ExpectMatcherState,\n  matcherName: string,\n  receiver: Locator,\n  receiverType: string,\n  expected: string,\n  arg: string,\n  query: (isNot: boolean, timeout: number) => Promise<{ matches: boolean, log?: string[], received?: any, timedOut?: boolean }>,\n  options: { timeout?: number } = {},\n): Promise<MatcherResult<any, any>> {\n  expectTypes(receiver, [receiverType], matcherName);\n\n  const matcherOptions = {\n    isNot: this.isNot,\n    promise: this.promise,\n  };\n\n  const timeout = options.timeout ?? this.timeout;\n\n  const { matches: pass, log, timedOut, received } = await query(!!this.isNot, timeout).catch(async error => {\n    // FIXME: query should not throw, but it does for strict mode violations for example.\n    await runBrowserBackendOnError(receiver.page(), () => error.message);\n    throw error;\n  });\n\n  if (pass === !this.isNot) {\n    return {\n      name: matcherName,\n      message: () => '',\n      pass,\n      expected\n    };\n  }\n\n  const notFound = received === kNoElementsFoundError ? received : undefined;\n  let printedReceived: string | undefined;\n  let printedExpected: string | undefined;\n  if (pass) {\n    printedExpected = `Expected: not ${expected}`;\n    printedReceived = `Received: ${notFound ? kNoElementsFoundError : expected}`;\n  } else {\n    printedExpected = `Expected: ${expected}`;\n    printedReceived = `Received: ${notFound ? kNoElementsFoundError : received}`;\n  }\n  const message = () => {\n    const header = matcherHint(this, receiver, matcherName, 'locator', arg, matcherOptions, timedOut ? timeout : undefined, `${printedExpected}\\n${printedReceived}`);\n    const logText = callLogText(log);\n    return `${header}${logText}`;\n  };\n\n  await runBrowserBackendOnError(receiver.page(), message);\n\n  return {\n    message,\n    pass,\n    actual: received,\n    name: matcherName,\n    expected,\n    log,\n    timeout: timedOut ? timeout : undefined,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,kBAAyC;AACzC,yBAAmD;AACnD,qBAAyC;AAMzC,eAAsB,WAEpB,aACA,UACA,cACA,UACA,KACA,OACA,UAAgC,CAAC,GACC;AAClC,+BAAY,UAAU,CAAC,YAAY,GAAG,WAAW;AAEjD,QAAM,iBAAiB;AAAA,IACrB,OAAO,KAAK;AAAA,IACZ,SAAS,KAAK;AAAA,EAChB;AAEA,QAAM,UAAU,QAAQ,WAAW,KAAK;AAExC,QAAM,EAAE,SAAS,MAAM,KAAK,UAAU,SAAS,IAAI,MAAM,MAAM,CAAC,CAAC,KAAK,OAAO,OAAO,EAAE,MAAM,OAAM,UAAS;AAEzG,cAAM,yCAAyB,SAAS,KAAK,GAAG,MAAM,MAAM,OAAO;AACnE,UAAM;AAAA,EACR,CAAC;AAED,MAAI,SAAS,CAAC,KAAK,OAAO;AACxB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS,MAAM;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,QAAM,WAAW,aAAa,2CAAwB,WAAW;AACjE,MAAI;AACJ,MAAI;AACJ,MAAI,MAAM;AACR,sBAAkB,iBAAiB,QAAQ;AAC3C,sBAAkB,aAAa,WAAW,2CAAwB,QAAQ;AAAA,EAC5E,OAAO;AACL,sBAAkB,aAAa,QAAQ;AACvC,sBAAkB,aAAa,WAAW,2CAAwB,QAAQ;AAAA,EAC5E;AACA,QAAM,UAAU,MAAM;AACpB,UAAM,aAAS,gCAAY,MAAM,UAAU,aAAa,WAAW,KAAK,gBAAgB,WAAW,UAAU,QAAW,GAAG,eAAe;AAAA,EAAK,eAAe,EAAE;AAChK,UAAM,cAAU,yBAAY,GAAG;AAC/B,WAAO,GAAG,MAAM,GAAG,OAAO;AAAA,EAC5B;AAEA,YAAM,yCAAyB,SAAS,KAAK,GAAG,OAAO;AAEvD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,IACR,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA,SAAS,WAAW,UAAU;AAAA,EAChC;AACF;",
  "names": []
}
