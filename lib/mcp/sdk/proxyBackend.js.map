{
  "version": 3,
  "sources": ["../../../src/mcp/sdk/proxyBackend.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debug } from 'playwright-core/lib/utilsBundle';\nimport * as mcp from './bundle';\n\nimport type { ServerBackend, ClientVersion, Root, Server } from './server.js';\nimport type { Transport } from '@modelcontextprotocol/sdk/shared/transport.js';\nimport type { Tool, CallToolResult, CallToolRequest } from '@modelcontextprotocol/sdk/types.js';\nimport type { Client } from '@modelcontextprotocol/sdk/client/index.js';\n\nexport type MCPProvider = {\n  name: string;\n  description: string;\n  connect(): Promise<Transport>;\n};\n\nconst errorsDebug = debug('pw:mcp:errors');\n\nexport class ProxyBackend implements ServerBackend {\n  private _mcpProviders: MCPProvider[];\n  private _currentClient: Client | undefined;\n  private _contextSwitchTool: Tool;\n  private _roots: Root[] = [];\n\n  constructor(mcpProviders: MCPProvider[]) {\n    this._mcpProviders = mcpProviders;\n    this._contextSwitchTool = this._defineContextSwitchTool();\n  }\n\n  async initialize(server: Server, clientVersion: ClientVersion, roots: Root[]): Promise<void> {\n    this._roots = roots;\n    await this._setCurrentClient(this._mcpProviders[0]);\n  }\n\n  async listTools(): Promise<Tool[]> {\n    const response = await this._currentClient!.listTools();\n    if (this._mcpProviders.length === 1)\n      return response.tools;\n    return [\n      ...response.tools,\n      this._contextSwitchTool,\n    ];\n  }\n\n  async callTool(name: string, args: CallToolRequest['params']['arguments']): Promise<CallToolResult> {\n    if (name === this._contextSwitchTool.name)\n      return this._callContextSwitchTool(args);\n    return await this._currentClient!.callTool({\n      name,\n      arguments: args,\n    }) as CallToolResult;\n  }\n\n  serverClosed?(): void {\n    void this._currentClient?.close().catch(errorsDebug);\n  }\n\n  private async _callContextSwitchTool(params: any): Promise<CallToolResult> {\n    try {\n      const factory = this._mcpProviders.find(factory => factory.name === params.name);\n      if (!factory)\n        throw new Error('Unknown connection method: ' + params.name);\n\n      await this._setCurrentClient(factory);\n      return {\n        content: [{ type: 'text', text: '### Result\\nSuccessfully changed connection method.\\n' }],\n      };\n    } catch (error) {\n      return {\n        content: [{ type: 'text', text: `### Result\\nError: ${error}\\n` }],\n        isError: true,\n      };\n    }\n  }\n\n  private _defineContextSwitchTool(): Tool {\n    return {\n      name: 'browser_connect',\n      description: [\n        'Connect to a browser using one of the available methods:',\n        ...this._mcpProviders.map(factory => `- \"${factory.name}\": ${factory.description}`),\n      ].join('\\n'),\n      inputSchema: mcp.zodToJsonSchema(mcp.z.object({\n        name: mcp.z.enum(this._mcpProviders.map(factory => factory.name) as [string, ...string[]]).default(this._mcpProviders[0].name).describe('The method to use to connect to the browser'),\n      }), { strictUnions: true }) as Tool['inputSchema'],\n      annotations: {\n        title: 'Connect to a browser context',\n        readOnlyHint: true,\n        openWorldHint: false,\n      },\n    };\n  }\n\n  private async _setCurrentClient(factory: MCPProvider) {\n    await this._currentClient?.close();\n    this._currentClient = undefined;\n\n    const client = new mcp.Client({ name: 'Playwright MCP Proxy', version: '0.0.0' });\n    client.registerCapabilities({\n      roots: {\n        listRoots: true,\n      },\n    });\n    client.setRequestHandler(mcp.ListRootsRequestSchema, () => ({ roots: this._roots }));\n    client.setRequestHandler(mcp.PingRequestSchema, () => ({}));\n\n    const transport = await factory.connect();\n    await client.connect(transport);\n    this._currentClient = client;\n  }\n}\n"],
  "mappings": "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",
  "names": ["factory"]
}
