{
  "version": 3,
  "sources": ["../../../src/mcp/sdk/server.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debug } from 'playwright-core/lib/utilsBundle';\n\nimport * as mcp from './bundle';\nimport { InProcessTransport } from './inProcessTransport';\nimport { httpAddressToString, installHttpTransport, startHttpServer } from './http';\n\nimport type { Tool, CallToolResult, CallToolRequest, Root } from '@modelcontextprotocol/sdk/types.js';\nimport type { Transport } from '@modelcontextprotocol/sdk/shared/transport.js';\nimport type { Server } from '@modelcontextprotocol/sdk/server/index.js';\nexport type { Server } from '@modelcontextprotocol/sdk/server/index.js';\nexport type { Tool, CallToolResult, CallToolRequest, Root } from '@modelcontextprotocol/sdk/types.js';\n\nconst serverDebug = debug('pw:mcp:server');\nconst errorsDebug = debug('pw:mcp:errors');\n\nexport type ClientVersion = { name: string, version: string };\nexport interface ServerBackend {\n  initialize?(server: Server, clientVersion: ClientVersion, roots: Root[]): Promise<void>;\n  listTools(): Promise<Tool[]>;\n  callTool(name: string, args: CallToolRequest['params']['arguments']): Promise<CallToolResult>;\n  serverClosed?(server: Server): void;\n}\n\nexport type ServerBackendFactory = {\n  name: string;\n  nameInConfig: string;\n  version: string;\n  create: () => ServerBackend;\n};\n\nexport async function connect(factory: ServerBackendFactory, transport: Transport, runHeartbeat: boolean) {\n  const server = createServer(factory.name, factory.version, factory.create(), runHeartbeat);\n  await server.connect(transport);\n}\n\nexport async function wrapInProcess(backend: ServerBackend): Promise<Transport> {\n  const server = createServer('Internal', '0.0.0', backend, false);\n  return new InProcessTransport(server);\n}\n\nexport function createServer(name: string, version: string, backend: ServerBackend, runHeartbeat: boolean): Server {\n  let initializedPromiseResolve = () => {};\n  const initializedPromise = new Promise<void>(resolve => initializedPromiseResolve = resolve);\n  const server = new mcp.Server({ name, version }, {\n    capabilities: {\n      tools: {},\n    }\n  });\n\n  server.setRequestHandler(mcp.ListToolsRequestSchema, async () => {\n    serverDebug('listTools');\n    await initializedPromise;\n    const tools = await backend.listTools();\n    return { tools };\n  });\n\n  let heartbeatRunning = false;\n  server.setRequestHandler(mcp.CallToolRequestSchema, async request => {\n    serverDebug('callTool', request);\n    await initializedPromise;\n\n    if (runHeartbeat && !heartbeatRunning) {\n      heartbeatRunning = true;\n      startHeartbeat(server);\n    }\n\n    try {\n      return await backend.callTool(request.params.name, request.params.arguments || {});\n    } catch (error) {\n      return {\n        content: [{ type: 'text', text: '### Result\\n' + String(error) }],\n        isError: true,\n      };\n    }\n  });\n  addServerListener(server, 'initialized', async () => {\n    try {\n      const capabilities = server.getClientCapabilities();\n      let clientRoots: Root[] = [];\n      if (capabilities?.roots) {\n        const { roots } = await server.listRoots(undefined, { timeout: 2_000 }).catch(() => ({ roots: [] }));\n        clientRoots = roots;\n      }\n      const clientVersion = server.getClientVersion() ?? { name: 'unknown', version: 'unknown' };\n      await backend.initialize?.(server, clientVersion, clientRoots);\n      initializedPromiseResolve();\n    } catch (e) {\n      errorsDebug(e);\n    }\n  });\n  addServerListener(server, 'close', () => backend.serverClosed?.(server));\n  return server;\n}\n\nconst startHeartbeat = (server: Server) => {\n  const beat = () => {\n    Promise.race([\n      server.ping(),\n      new Promise((_, reject) => setTimeout(() => reject(new Error('ping timeout')), 5000)),\n    ]).then(() => {\n      setTimeout(beat, 3000);\n    }).catch(() => {\n      void server.close();\n    });\n  };\n\n  beat();\n};\n\nfunction addServerListener(server: Server, event: 'close' | 'initialized', listener: () => void) {\n  const oldListener = server[`on${event}`];\n  server[`on${event}`] = () => {\n    oldListener?.();\n    listener();\n  };\n}\n\nexport async function start(serverBackendFactory: ServerBackendFactory, options: { host?: string; port?: number }) {\n  if (options.port === undefined) {\n    await connect(serverBackendFactory, new mcp.StdioServerTransport(), false);\n    return;\n  }\n\n  const httpServer = await startHttpServer(options);\n  await installHttpTransport(httpServer, serverBackendFactory);\n  const url = httpAddressToString(httpServer.address());\n\n  const mcpConfig: any = { mcpServers: { } };\n  mcpConfig.mcpServers[serverBackendFactory.nameInConfig] = {\n    url: `${url}/mcp`\n  };\n  const message = [\n    `Listening on ${url}`,\n    'Put this in your client config:',\n    JSON.stringify(mcpConfig, undefined, 2),\n    'For legacy SSE transport support, you can use the /sse endpoint instead.',\n  ].join('\\n');\n    // eslint-disable-next-line no-console\n  console.error(message);\n}\n"],
  "mappings": "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",
  "names": []
}
