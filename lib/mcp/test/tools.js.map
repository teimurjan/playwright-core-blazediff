{
  "version": 3,
  "sources": ["../../../src/mcp/test/tools.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { noColors } from 'playwright-core/lib/utils';\n\nimport { z } from '../sdk/bundle';\nimport { terminalScreen } from '../../reporters/base';\nimport ListReporter from '../../reporters/list';\nimport ListModeReporter from '../../reporters/listModeReporter';\n\nimport { defineTool } from './tool';\nimport { StringWriteStream } from './streams';\n\nexport const listTests = defineTool({\n  schema: {\n    name: 'playwright_test_list_tests',\n    title: 'List tests',\n    description: 'List tests',\n    inputSchema: z.object({}),\n    type: 'readOnly',\n  },\n\n  handle: async context => {\n    const { screen, stream } = createScreen();\n    const reporter = new ListModeReporter({ screen, includeTestId: true });\n    const testRunner = await context.createTestRunner();\n    await testRunner.listTests(reporter, {});\n\n    return {\n      content: [{ type: 'text', text: stream.content() }],\n    };\n  },\n});\n\nexport const runTests = defineTool({\n  schema: {\n    name: 'playwright_test_run_tests',\n    title: 'Run tests',\n    description: 'Run tests',\n    inputSchema: z.object({\n      locations: z.array(z.string()).describe('Folder, file or location to run: \"test/e2e\" or \"test/e2e/file.spec.ts\" or \"test/e2e/file.spec.ts:20\"'),\n      projects: z.array(z.string()).optional().describe('Projects to run, projects from playwright.config.ts, by default runs all projects. Running with \"chromium\" is a good start'),\n    }),\n    type: 'readOnly',\n  },\n\n  handle: async (context, params) => {\n    const { screen, stream } = createScreen();\n    const configDir = context.configLocation.configDir;\n    const reporter = new ListReporter({ configDir, screen, includeTestId: true });\n    const testRunner = await context.createTestRunner();\n    const result = await testRunner.runTests(reporter, {\n      locations: params.locations,\n      projects: params.projects,\n    });\n\n    const text = stream.content();\n    return {\n      content: [\n        { type: 'text', text },\n      ],\n      isError: result.status !== 'passed',\n    };\n  },\n});\n\nexport const debugTest = defineTool({\n  schema: {\n    name: 'playwright_test_debug_test',\n    title: 'Debug single test',\n    description: 'Debug single test',\n    inputSchema: z.object({\n      test: z.object({\n        id: z.string().describe('Test ID to debug.'),\n        title: z.string().describe('Human readable test title for granting permission to debug the test.'),\n      }),\n    }),\n    type: 'readOnly',\n  },\n\n  handle: async (context, params) => {\n    const stream = new StringWriteStream();\n    const screen = {\n      ...terminalScreen,\n      isTTY: false,\n      colors: noColors,\n      stdout: stream as unknown as NodeJS.WriteStream,\n      stderr: stream as unknown as NodeJS.WriteStream,\n    };\n    const configDir = context.configLocation.configDir;\n    const reporter = new ListReporter({ configDir, screen });\n    const testRunner = await context.createTestRunner();\n    process.env.PLAYWRIGHT_DEBUGGER_ENABLED = '1';\n    const result = await testRunner.runTests(reporter, {\n      headed: true,\n      testIds: [params.test.id],\n      // For automatic recovery\n      timeout: 0,\n      workers: 1,\n    }).finally(() => {\n      process.env.PLAYWRIGHT_DEBUGGER_ENABLED = undefined;\n    });\n\n    const text = stream.content();\n    return {\n      content: [\n        { type: 'text', text },\n      ],\n      isError: result.status !== 'passed',\n    };\n  },\n});\n\nfunction createScreen() {\n  const stream = new StringWriteStream();\n  const screen = {\n    ...terminalScreen,\n    isTTY: false,\n    colors: noColors,\n    stdout: stream as unknown as NodeJS.WriteStream,\n    stderr: stream as unknown as NodeJS.WriteStream,\n  };\n  return { screen, stream };\n}\n"],
  "mappings": "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",
  "names": ["ListModeReporter", "ListReporter"]
}
