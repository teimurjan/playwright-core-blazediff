{
  "version": 3,
  "sources": ["../../src/common/testLoader.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\nimport util from 'util';\n\nimport * as esmLoaderHost from './esmLoaderHost';\nimport { isWorkerProcess, setCurrentlyLoadingFileSuite } from './globals';\nimport { Suite } from './test';\nimport { startCollectingFileDeps, stopCollectingFileDeps } from '../transform/compilationCache';\nimport { requireOrImport } from '../transform/transform';\nimport { filterStackTrace } from '../util';\n\nimport type { TestError } from '../../types/testReporter';\n\nexport const defaultTimeout = 30000;\n\n// To allow multiple loaders in the same process without clearing require cache,\n// we make these maps global.\nconst cachedFileSuites = new Map<string, Suite>();\n\nexport async function loadTestFile(file: string, rootDir: string, testErrors?: TestError[]): Promise<Suite> {\n  if (cachedFileSuites.has(file))\n    return cachedFileSuites.get(file)!;\n  const suite = new Suite(path.relative(rootDir, file) || path.basename(file), 'file');\n  suite._requireFile = file;\n  suite.location = { file, line: 0, column: 0 };\n\n  setCurrentlyLoadingFileSuite(suite);\n  if (!isWorkerProcess()) {\n    startCollectingFileDeps();\n    await esmLoaderHost.startCollectingFileDeps();\n  }\n  try {\n    await requireOrImport(file);\n    cachedFileSuites.set(file, suite);\n  } catch (e) {\n    if (!testErrors)\n      throw e;\n    testErrors.push(serializeLoadError(file, e));\n  } finally {\n    setCurrentlyLoadingFileSuite(undefined);\n    if (!isWorkerProcess()) {\n      stopCollectingFileDeps(file);\n      await esmLoaderHost.stopCollectingFileDeps(file);\n    }\n  }\n\n  {\n    // Test locations that we discover potentially have different file name.\n    // This could be due to either\n    //   a) use of source maps or due to\n    //   b) require of one file from another.\n    // Try fixing (a) w/o regressing (b).\n\n    const files = new Set<string>();\n    suite.allTests().map(t => files.add(t.location.file));\n    if (files.size === 1) {\n      // All tests point to one file.\n      const mappedFile = files.values().next().value!;\n      if (suite.location.file !== mappedFile) {\n        // The file is different, check for a likely source map case.\n        if (path.extname(mappedFile) !== path.extname(suite.location.file))\n          suite.location.file = mappedFile;\n      }\n    }\n  }\n\n  return suite;\n}\n\nfunction serializeLoadError(file: string, error: Error | any): TestError {\n  if (error instanceof Error) {\n    const result: TestError = filterStackTrace(error);\n    // Babel parse errors have location.\n    const loc = (error as any).loc;\n    result.location = loc ? {\n      file,\n      line: loc.line || 0,\n      column: loc.column || 0,\n    } : undefined;\n    return result;\n  }\n  return { value: util.inspect(error) };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,kBAAiB;AACjB,kBAAiB;AAEjB,oBAA+B;AAC/B,qBAA8D;AAC9D,kBAAsB;AACtB,8BAAgE;AAChE,uBAAgC;AAChC,IAAAA,eAAiC;AAI1B,MAAM,iBAAiB;AAI9B,MAAM,mBAAmB,oBAAI,IAAmB;AAEhD,eAAsB,aAAa,MAAc,SAAiB,YAA0C;AAC1G,MAAI,iBAAiB,IAAI,IAAI;AAC3B,WAAO,iBAAiB,IAAI,IAAI;AAClC,QAAM,QAAQ,IAAI,kBAAM,YAAAC,QAAK,SAAS,SAAS,IAAI,KAAK,YAAAA,QAAK,SAAS,IAAI,GAAG,MAAM;AACnF,QAAM,eAAe;AACrB,QAAM,WAAW,EAAE,MAAM,MAAM,GAAG,QAAQ,EAAE;AAE5C,mDAA6B,KAAK;AAClC,MAAI,KAAC,gCAAgB,GAAG;AACtB,yDAAwB;AACxB,UAAM,cAAc,wBAAwB;AAAA,EAC9C;AACA,MAAI;AACF,cAAM,kCAAgB,IAAI;AAC1B,qBAAiB,IAAI,MAAM,KAAK;AAAA,EAClC,SAAS,GAAG;AACV,QAAI,CAAC;AACH,YAAM;AACR,eAAW,KAAK,mBAAmB,MAAM,CAAC,CAAC;AAAA,EAC7C,UAAE;AACA,qDAA6B,MAAS;AACtC,QAAI,KAAC,gCAAgB,GAAG;AACtB,0DAAuB,IAAI;AAC3B,YAAM,cAAc,uBAAuB,IAAI;AAAA,IACjD;AAAA,EACF;AAEA;AAOE,UAAM,QAAQ,oBAAI,IAAY;AAC9B,UAAM,SAAS,EAAE,IAAI,OAAK,MAAM,IAAI,EAAE,SAAS,IAAI,CAAC;AACpD,QAAI,MAAM,SAAS,GAAG;AAEpB,YAAM,aAAa,MAAM,OAAO,EAAE,KAAK,EAAE;AACzC,UAAI,MAAM,SAAS,SAAS,YAAY;AAEtC,YAAI,YAAAA,QAAK,QAAQ,UAAU,MAAM,YAAAA,QAAK,QAAQ,MAAM,SAAS,IAAI;AAC/D,gBAAM,SAAS,OAAO;AAAA,MAC1B;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEA,SAAS,mBAAmB,MAAc,OAA+B;AACvE,MAAI,iBAAiB,OAAO;AAC1B,UAAM,aAAoB,+BAAiB,KAAK;AAEhD,UAAM,MAAO,MAAc;AAC3B,WAAO,WAAW,MAAM;AAAA,MACtB;AAAA,MACA,MAAM,IAAI,QAAQ;AAAA,MAClB,QAAQ,IAAI,UAAU;AAAA,IACxB,IAAI;AACJ,WAAO;AAAA,EACT;AACA,SAAO,EAAE,OAAO,YAAAC,QAAK,QAAQ,KAAK,EAAE;AACtC;",
  "names": ["import_util", "path", "util"]
}
