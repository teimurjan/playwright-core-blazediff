{
  "version": 3,
  "sources": ["../../src/common/test.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { rootTestType } from './testType';\nimport { computeTestCaseOutcome } from '../isomorphic/teleReceiver';\n\nimport type { FixturesWithLocation, FullProjectInternal } from './config';\nimport type { FixturePool } from './fixtures';\nimport type { TestTypeImpl } from './testType';\nimport type { TestAnnotation } from '../../types/test';\nimport type * as reporterTypes from '../../types/testReporter';\nimport type { FullProject, Location } from '../../types/testReporter';\n\n\nclass Base {\n  title: string;\n  _only = false;\n  _requireFile: string = '';\n\n  constructor(title: string) {\n    this.title = title;\n  }\n}\n\nexport type Modifier = {\n  type: 'slow' | 'fixme' | 'skip' | 'fail',\n  fn: Function,\n  location: Location,\n  description: string | undefined\n};\n\nexport class Suite extends Base {\n  location?: Location;\n  parent?: Suite;\n  _use: FixturesWithLocation[] = [];\n  _entries: (Suite | TestCase)[] = [];\n  _hooks: { type: 'beforeEach' | 'afterEach' | 'beforeAll' | 'afterAll', fn: Function, title: string, location: Location }[] = [];\n  _timeout: number | undefined;\n  _retries: number | undefined;\n  // Annotations known statically before running the test, e.g. `test.describe.skip()` or `test.describe({ annotation }, body)`.\n  _staticAnnotations: TestAnnotation[] = [];\n  // Explicitly declared tags that are not a part of the title.\n  _tags: string[] = [];\n  _modifiers: Modifier[] = [];\n  _parallelMode: 'none' | 'default' | 'serial' | 'parallel' = 'none';\n  _fullProject: FullProjectInternal | undefined;\n  _fileId: string | undefined;\n  readonly _type: 'root' | 'project' | 'file' | 'describe';\n\n  constructor(title: string, type: 'root' | 'project' | 'file' | 'describe') {\n    super(title);\n    this._type = type;\n  }\n\n  get type(): 'root' | 'project' | 'file' | 'describe' {\n    return this._type;\n  }\n\n  entries() {\n    return this._entries;\n  }\n\n  get suites(): Suite[] {\n    return this._entries.filter(entry => entry instanceof Suite) as Suite[];\n  }\n\n  get tests(): TestCase[] {\n    return this._entries.filter(entry => entry instanceof TestCase) as TestCase[];\n  }\n\n  _addTest(test: TestCase) {\n    test.parent = this;\n    this._entries.push(test);\n  }\n\n  _addSuite(suite: Suite) {\n    suite.parent = this;\n    this._entries.push(suite);\n  }\n\n  _prependSuite(suite: Suite) {\n    suite.parent = this;\n    this._entries.unshift(suite);\n  }\n\n  allTests(): TestCase[] {\n    const result: TestCase[] = [];\n    const visit = (suite: Suite) => {\n      for (const entry of suite._entries) {\n        if (entry instanceof Suite)\n          visit(entry);\n        else\n          result.push(entry);\n      }\n    };\n    visit(this);\n    return result;\n  }\n\n  _hasTests(): boolean {\n    let result = false;\n    const visit = (suite: Suite) => {\n      for (const entry of suite._entries) {\n        if (result)\n          return;\n        if (entry instanceof Suite)\n          visit(entry);\n        else\n          result = true;\n      }\n    };\n    visit(this);\n    return result;\n  }\n\n  titlePath(): string[] {\n    const titlePath = this.parent ? this.parent.titlePath() : [];\n    // Ignore anonymous describe blocks.\n    if (this.title || this._type !== 'describe')\n      titlePath.push(this.title);\n    return titlePath;\n  }\n\n  _collectGrepTitlePath(path: string[]) {\n    if (this.parent)\n      this.parent._collectGrepTitlePath(path);\n    if (this.title || this._type !== 'describe')\n      path.push(this.title);\n    path.push(...this._tags);\n  }\n\n  _getOnlyItems(): (TestCase | Suite)[] {\n    const items: (TestCase | Suite)[] = [];\n    if (this._only)\n      items.push(this);\n    for (const suite of this.suites)\n      items.push(...suite._getOnlyItems());\n    items.push(...this.tests.filter(test => test._only));\n    return items;\n  }\n\n  _deepClone(): Suite {\n    const suite = this._clone();\n    for (const entry of this._entries) {\n      if (entry instanceof Suite)\n        suite._addSuite(entry._deepClone());\n      else\n        suite._addTest(entry._clone());\n    }\n    return suite;\n  }\n\n  _deepSerialize(): any {\n    const suite = this._serialize();\n    suite.entries = [];\n    for (const entry of this._entries) {\n      if (entry instanceof Suite)\n        suite.entries.push(entry._deepSerialize());\n      else\n        suite.entries.push(entry._serialize());\n    }\n    return suite;\n  }\n\n  static _deepParse(data: any): Suite {\n    const suite = Suite._parse(data);\n    for (const entry of data.entries) {\n      if (entry.kind === 'suite')\n        suite._addSuite(Suite._deepParse(entry));\n      else\n        suite._addTest(TestCase._parse(entry));\n    }\n    return suite;\n  }\n\n  forEachTest(visitor: (test: TestCase, suite: Suite) => void) {\n    for (const entry of this._entries) {\n      if (entry instanceof Suite)\n        entry.forEachTest(visitor);\n      else\n        visitor(entry, this);\n    }\n  }\n\n  _serialize(): any {\n    return {\n      kind: 'suite',\n      title: this.title,\n      type: this._type,\n      location: this.location,\n      only: this._only,\n      requireFile: this._requireFile,\n      timeout: this._timeout,\n      retries: this._retries,\n      staticAnnotations: this._staticAnnotations.slice(),\n      tags: this._tags.slice(),\n      modifiers: this._modifiers.slice(),\n      parallelMode: this._parallelMode,\n      hooks: this._hooks.map(h => ({ type: h.type, location: h.location, title: h.title })),\n      fileId: this._fileId,\n    };\n  }\n\n  static _parse(data: any): Suite {\n    const suite = new Suite(data.title, data.type);\n    suite.location = data.location;\n    suite._only = data.only;\n    suite._requireFile = data.requireFile;\n    suite._timeout = data.timeout;\n    suite._retries = data.retries;\n    suite._staticAnnotations = data.staticAnnotations;\n    suite._tags = data.tags;\n    suite._modifiers = data.modifiers;\n    suite._parallelMode = data.parallelMode;\n    suite._hooks = data.hooks.map((h: any) => ({ type: h.type, location: h.location, title: h.title, fn: () => { } }));\n    suite._fileId = data.fileId;\n    return suite;\n  }\n\n  _clone(): Suite {\n    const data = this._serialize();\n    const suite = Suite._parse(data);\n    suite._use = this._use.slice();\n    suite._hooks = this._hooks.slice();\n    suite._fullProject = this._fullProject;\n    return suite;\n  }\n\n  project(): FullProject | undefined {\n    return this._fullProject?.project || this.parent?.project();\n  }\n}\n\nexport class TestCase extends Base implements reporterTypes.TestCase {\n  fn: Function;\n  results: reporterTypes.TestResult[] = [];\n  location: Location;\n  parent!: Suite;\n  type: 'test' = 'test';\n\n  expectedStatus: reporterTypes.TestStatus = 'passed';\n  timeout = 0;\n  annotations: TestAnnotation[] = [];\n  retries = 0;\n  repeatEachIndex = 0;\n\n  _testType: TestTypeImpl;\n  id = '';\n  _pool: FixturePool | undefined;\n  _poolDigest = '';\n  _workerHash = '';\n  _projectId = '';\n  // Explicitly declared tags that are not a part of the title.\n  _tags: string[] = [];\n\n  constructor(title: string, fn: Function, testType: TestTypeImpl, location: Location) {\n    super(title);\n    this.fn = fn;\n    this._testType = testType;\n    this.location = location;\n  }\n\n  titlePath(): string[] {\n    const titlePath = this.parent ? this.parent.titlePath() : [];\n    titlePath.push(this.title);\n    return titlePath;\n  }\n\n  outcome(): 'skipped' | 'expected' | 'unexpected' | 'flaky' {\n    return computeTestCaseOutcome(this);\n  }\n\n  ok(): boolean {\n    const status = this.outcome();\n    return status === 'expected' || status === 'flaky' || status === 'skipped';\n  }\n\n  get tags(): string[] {\n    const titleTags = this._grepBaseTitlePath().join(' ').match(/@[\\S]+/g) || [];\n\n    return [\n      ...titleTags,\n      ...this._tags,\n    ];\n  }\n\n  _serialize(): any {\n    return {\n      kind: 'test',\n      id: this.id,\n      title: this.title,\n      retries: this.retries,\n      timeout: this.timeout,\n      expectedStatus: this.expectedStatus,\n      location: this.location,\n      only: this._only,\n      requireFile: this._requireFile,\n      poolDigest: this._poolDigest,\n      workerHash: this._workerHash,\n      annotations: this.annotations.slice(),\n      tags: this._tags.slice(),\n      projectId: this._projectId,\n    };\n  }\n\n  static _parse(data: any): TestCase {\n    const test = new TestCase(data.title, () => {}, rootTestType, data.location);\n    test.id = data.id;\n    test.retries = data.retries;\n    test.timeout = data.timeout;\n    test.expectedStatus = data.expectedStatus;\n    test._only = data.only;\n    test._requireFile = data.requireFile;\n    test._poolDigest = data.poolDigest;\n    test._workerHash = data.workerHash;\n    test.annotations = data.annotations;\n    test._tags = data.tags;\n    test._projectId = data.projectId;\n    return test;\n  }\n\n  _clone(): TestCase {\n    const data = this._serialize();\n    const test = TestCase._parse(data);\n    test._testType = this._testType;\n    test.fn = this.fn;\n    return test;\n  }\n\n  _appendTestResult(): reporterTypes.TestResult {\n    const result: reporterTypes.TestResult = {\n      retry: this.results.length,\n      parallelIndex: -1,\n      workerIndex: -1,\n      duration: 0,\n      startTime: new Date(),\n      stdout: [],\n      stderr: [],\n      attachments: [],\n      status: 'skipped',\n      steps: [],\n      errors: [],\n      annotations: [],\n    };\n    this.results.push(result);\n    return result;\n  }\n\n  _grepBaseTitlePath(): string[] {\n    const path: string[] = [];\n    this.parent._collectGrepTitlePath(path);\n    path.push(this.title);\n    return path;\n  }\n\n  _grepTitleWithTags(): string {\n    const path = this._grepBaseTitlePath();\n    path.push(...this._tags);\n    return path.join(' ');\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
