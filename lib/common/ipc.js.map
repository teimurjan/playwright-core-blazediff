{
  "version": 3,
  "sources": ["../../src/common/ipc.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport util from 'util';\n\nimport { serializeCompilationCache } from '../transform/compilationCache';\n\nimport type { ConfigLocation, FullConfigInternal } from './config';\nimport type { ReporterDescription, TestInfoError, TestStatus } from '../../types/test';\nimport type { SerializedCompilationCache  } from '../transform/compilationCache';\n\nexport type ConfigCLIOverrides = {\n  debug?: boolean;\n  failOnFlakyTests?: boolean;\n  forbidOnly?: boolean;\n  fullyParallel?: boolean;\n  globalTimeout?: number;\n  maxFailures?: number;\n  outputDir?: string;\n  preserveOutputDir?: boolean;\n  quiet?: boolean;\n  repeatEach?: number;\n  retries?: number;\n  reporter?: ReporterDescription[];\n  additionalReporters?: ReporterDescription[];\n  shard?: { current: number, total: number };\n  timeout?: number;\n  tsconfig?: string;\n  ignoreSnapshots?: boolean;\n  updateSnapshots?: 'all' | 'changed' | 'missing' | 'none';\n  updateSourceMethod?: 'overwrite' | 'patch' | '3way';\n  workers?: number | string;\n  projects?: { name: string, use?: any }[],\n  use?: any;\n};\n\nexport type SerializedConfig = {\n  location: ConfigLocation;\n  configCLIOverrides: ConfigCLIOverrides;\n  compilationCache?: SerializedCompilationCache;\n  metadata?: string;\n};\n\nexport type ProcessInitParams = {\n  timeOrigin: number;\n  processName: string;\n};\n\nexport type WorkerInitParams = {\n  workerIndex: number;\n  parallelIndex: number;\n  repeatEachIndex: number;\n  projectId: string;\n  config: SerializedConfig;\n  artifactsDir: string;\n};\n\nexport type TestBeginPayload = {\n  testId: string;\n  startWallTime: number;  // milliseconds since unix epoch\n};\n\nexport type AttachmentPayload = {\n  testId: string;\n  name: string;\n  path?: string;\n  body?: string;\n  contentType: string;\n  stepId?: string;\n};\n\nexport type TestInfoErrorImpl = TestInfoError;\n\nexport type TestEndPayload = {\n  testId: string;\n  duration: number;\n  status: TestStatus;\n  errors: TestInfoErrorImpl[];\n  hasNonRetriableError: boolean;\n  expectedStatus: TestStatus;\n  annotations: { type: string, description?: string }[];\n  timeout: number;\n};\n\nexport type StepBeginPayload = {\n  testId: string;\n  stepId: string;\n  parentStepId: string | undefined;\n  title: string;\n  category: string;\n  wallTime: number;  // milliseconds since unix epoch\n  location?: { file: string, line: number, column: number };\n};\n\nexport type StepEndPayload = {\n  testId: string;\n  stepId: string;\n  wallTime: number;  // milliseconds since unix epoch\n  error?: TestInfoErrorImpl;\n  suggestedRebaseline?: string;\n  annotations: { type: string, description?: string }[];\n};\n\nexport type TestEntry = {\n  testId: string;\n  retry: number;\n};\n\nexport type RunPayload = {\n  file: string;\n  entries: TestEntry[];\n};\n\nexport type DonePayload = {\n  fatalErrors: TestInfoErrorImpl[];\n  skipTestsDueToSetupFailure: string[];  // test ids\n  fatalUnknownTestIds?: string[];\n};\n\nexport type TestOutputPayload = {\n  text?: string;\n  buffer?: string;\n};\n\nexport type TeardownErrorsPayload = {\n  fatalErrors: TestInfoErrorImpl[];\n};\n\nexport type EnvProducedPayload = [string, string | null][];\n\nexport function serializeConfig(config: FullConfigInternal, passCompilationCache: boolean): SerializedConfig {\n  const result: SerializedConfig = {\n    location: { configDir: config.configDir, resolvedConfigFile: config.config.configFile },\n    configCLIOverrides: config.configCLIOverrides,\n    compilationCache: passCompilationCache ? serializeCompilationCache() : undefined,\n  };\n\n  try {\n    result.metadata = JSON.stringify(config.config.metadata);\n  } catch (error) {}\n\n  return result;\n}\n\nexport function stdioChunkToParams(chunk: Uint8Array | string): TestOutputPayload {\n  if (chunk instanceof Uint8Array)\n    return { buffer: Buffer.from(chunk).toString('base64') };\n  if (typeof chunk !== 'string')\n    return { text: util.inspect(chunk) };\n  return { text: chunk };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,kBAAiB;AAEjB,8BAA0C;AA6HnC,SAAS,gBAAgB,QAA4B,sBAAiD;AAC3G,QAAM,SAA2B;AAAA,IAC/B,UAAU,EAAE,WAAW,OAAO,WAAW,oBAAoB,OAAO,OAAO,WAAW;AAAA,IACtF,oBAAoB,OAAO;AAAA,IAC3B,kBAAkB,2BAAuB,mDAA0B,IAAI;AAAA,EACzE;AAEA,MAAI;AACF,WAAO,WAAW,KAAK,UAAU,OAAO,OAAO,QAAQ;AAAA,EACzD,SAAS,OAAO;AAAA,EAAC;AAEjB,SAAO;AACT;AAEO,SAAS,mBAAmB,OAA+C;AAChF,MAAI,iBAAiB;AACnB,WAAO,EAAE,QAAQ,OAAO,KAAK,KAAK,EAAE,SAAS,QAAQ,EAAE;AACzD,MAAI,OAAO,UAAU;AACnB,WAAO,EAAE,MAAM,YAAAA,QAAK,QAAQ,KAAK,EAAE;AACrC,SAAO,EAAE,MAAM,MAAM;AACvB;",
  "names": ["util"]
}
