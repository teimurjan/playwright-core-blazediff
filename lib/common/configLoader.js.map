{
  "version": 3,
  "sources": ["../../src/common/configLoader.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { isRegExp } from 'playwright-core/lib/utils';\n\nimport { requireOrImport, setSingleTSConfig, setTransformConfig } from '../transform/transform';\nimport { errorWithFile, fileIsModule } from '../util';\nimport { FullConfigInternal } from './config';\nimport { configureESMLoader, configureESMLoaderTransformConfig, registerESMLoader } from './esmLoaderHost';\nimport { addToCompilationCache } from '../transform/compilationCache';\n\nimport type { ConfigLocation } from './config';\nimport type { ConfigCLIOverrides, SerializedConfig } from './ipc';\nimport type { Config, Project } from '../../types/test';\n\nconst kDefineConfigWasUsed = Symbol('defineConfigWasUsed');\nexport const defineConfig = (...configs: any[]) => {\n  let result = configs[0];\n  for (let i = 1; i < configs.length; ++i) {\n    const config = configs[i];\n    const prevProjects = result.projects;\n    result = {\n      ...result,\n      ...config,\n      expect: {\n        ...result.expect,\n        ...config.expect,\n      },\n      use: {\n        ...result.use,\n        ...config.use,\n      },\n      build: {\n        ...result.build,\n        ...config.build,\n      },\n      webServer: [\n        ...(Array.isArray(result.webServer) ? result.webServer : (result.webServer ? [result.webServer] : [])),\n        ...(Array.isArray(config.webServer) ? config.webServer : (config.webServer ? [config.webServer] : [])),\n      ]\n    };\n\n    if (!result.projects && !config.projects)\n      continue;\n\n    const projectOverrides = new Map<string, any>();\n    for (const project of config.projects || [])\n      projectOverrides.set(project.name, project);\n\n    const projects = [];\n    for (const project of prevProjects || []) {\n      const projectOverride = projectOverrides.get(project.name);\n      if (projectOverride) {\n        projects.push({\n          ...project,\n          ...projectOverride,\n          use: {\n            ...project.use,\n            ...projectOverride.use,\n          }\n        });\n        projectOverrides.delete(project.name);\n      } else {\n        projects.push(project);\n      }\n    }\n    projects.push(...projectOverrides.values());\n    result.projects = projects;\n  }\n  result[kDefineConfigWasUsed] = true;\n  return result;\n};\n\nexport async function deserializeConfig(data: SerializedConfig): Promise<FullConfigInternal> {\n  if (data.compilationCache)\n    addToCompilationCache(data.compilationCache);\n  return await loadConfig(data.location, data.configCLIOverrides, undefined, data.metadata ? JSON.parse(data.metadata) : undefined);\n}\n\nasync function loadUserConfig(location: ConfigLocation): Promise<Config> {\n  let object = location.resolvedConfigFile ? await requireOrImport(location.resolvedConfigFile) : {};\n  if (object && typeof object === 'object' && ('default' in object))\n    object = object['default'];\n  return object as Config;\n}\n\nexport async function loadConfig(location: ConfigLocation, overrides?: ConfigCLIOverrides, ignoreProjectDependencies = false, metadata?: Config['metadata']): Promise<FullConfigInternal> {\n  // 0. Setup ESM loader if needed.\n  if (!registerESMLoader()) {\n    // In Node.js < 18, complain if the config file is ESM. Historically, we would restart\n    // the process with --loader, but now we require newer Node.js.\n    if (location.resolvedConfigFile && fileIsModule(location.resolvedConfigFile))\n      throw errorWithFile(location.resolvedConfigFile, `Playwright requires Node.js 18.19 or higher to load esm modules. Please update your version of Node.js.`);\n  }\n\n  // 1. Setup tsconfig; configure ESM loader with tsconfig and compilation cache.\n  setSingleTSConfig(overrides?.tsconfig);\n  await configureESMLoader();\n\n  // 2. Load and validate playwright config.\n  const userConfig = await loadUserConfig(location);\n  validateConfig(location.resolvedConfigFile || '<default config>', userConfig);\n  const fullConfig = new FullConfigInternal(location, userConfig, overrides || {}, metadata);\n  fullConfig.defineConfigWasUsed = !!(userConfig as any)[kDefineConfigWasUsed];\n  if (ignoreProjectDependencies) {\n    for (const project of fullConfig.projects) {\n      project.deps = [];\n      project.teardown = undefined;\n    }\n  }\n\n  // 3. Load transform options from the playwright config.\n  const babelPlugins = (userConfig as any)['@playwright/test']?.babelPlugins || [];\n  const external = userConfig.build?.external || [];\n  setTransformConfig({ babelPlugins, external });\n  if (!overrides?.tsconfig)\n    setSingleTSConfig(fullConfig?.singleTSConfigPath);\n\n  // 4. Send transform options to ESM loader.\n  await configureESMLoaderTransformConfig();\n\n  return fullConfig;\n}\n\nfunction validateConfig(file: string, config: Config) {\n  if (typeof config !== 'object' || !config)\n    throw errorWithFile(file, `Configuration file must export a single object`);\n\n  validateProject(file, config, 'config');\n\n  if ('forbidOnly' in config && config.forbidOnly !== undefined) {\n    if (typeof config.forbidOnly !== 'boolean')\n      throw errorWithFile(file, `config.forbidOnly must be a boolean`);\n  }\n\n  if ('globalSetup' in config && config.globalSetup !== undefined) {\n    if (Array.isArray(config.globalSetup)) {\n      config.globalSetup.forEach((item, index) => {\n        if (typeof item !== 'string')\n          throw errorWithFile(file, `config.globalSetup[${index}] must be a string`);\n      });\n    } else if (typeof config.globalSetup !== 'string') {\n      throw errorWithFile(file, `config.globalSetup must be a string`);\n    }\n  }\n\n  if ('globalTeardown' in config && config.globalTeardown !== undefined) {\n    if (Array.isArray(config.globalTeardown)) {\n      config.globalTeardown.forEach((item, index) => {\n        if (typeof item !== 'string')\n          throw errorWithFile(file, `config.globalTeardown[${index}] must be a string`);\n      });\n    } else if (typeof config.globalTeardown !== 'string') {\n      throw errorWithFile(file, `config.globalTeardown must be a string`);\n    }\n  }\n\n  if ('globalTimeout' in config && config.globalTimeout !== undefined) {\n    if (typeof config.globalTimeout !== 'number' || config.globalTimeout < 0)\n      throw errorWithFile(file, `config.globalTimeout must be a non-negative number`);\n  }\n\n  if ('grep' in config && config.grep !== undefined) {\n    if (Array.isArray(config.grep)) {\n      config.grep.forEach((item, index) => {\n        if (!isRegExp(item))\n          throw errorWithFile(file, `config.grep[${index}] must be a RegExp`);\n      });\n    } else if (!isRegExp(config.grep)) {\n      throw errorWithFile(file, `config.grep must be a RegExp`);\n    }\n  }\n\n  if ('grepInvert' in config && config.grepInvert !== undefined) {\n    if (Array.isArray(config.grepInvert)) {\n      config.grepInvert.forEach((item, index) => {\n        if (!isRegExp(item))\n          throw errorWithFile(file, `config.grepInvert[${index}] must be a RegExp`);\n      });\n    } else if (!isRegExp(config.grepInvert)) {\n      throw errorWithFile(file, `config.grepInvert must be a RegExp`);\n    }\n  }\n\n  if ('maxFailures' in config && config.maxFailures !== undefined) {\n    if (typeof config.maxFailures !== 'number' || config.maxFailures < 0)\n      throw errorWithFile(file, `config.maxFailures must be a non-negative number`);\n  }\n\n  if ('preserveOutput' in config && config.preserveOutput !== undefined) {\n    if (typeof config.preserveOutput !== 'string' || !['always', 'never', 'failures-only'].includes(config.preserveOutput))\n      throw errorWithFile(file, `config.preserveOutput must be one of \"always\", \"never\" or \"failures-only\"`);\n  }\n\n  if ('projects' in config && config.projects !== undefined) {\n    if (!Array.isArray(config.projects))\n      throw errorWithFile(file, `config.projects must be an array`);\n    config.projects.forEach((project, index) => {\n      validateProject(file, project, `config.projects[${index}]`);\n    });\n  }\n\n  if ('quiet' in config && config.quiet !== undefined) {\n    if (typeof config.quiet !== 'boolean')\n      throw errorWithFile(file, `config.quiet must be a boolean`);\n  }\n\n  if ('reporter' in config && config.reporter !== undefined) {\n    if (Array.isArray(config.reporter)) {\n      config.reporter.forEach((item, index) => {\n        if (!Array.isArray(item) || item.length <= 0 || item.length > 2 || typeof item[0] !== 'string')\n          throw errorWithFile(file, `config.reporter[${index}] must be a tuple [name, optionalArgument]`);\n      });\n    } else if (typeof config.reporter !== 'string') {\n      throw errorWithFile(file, `config.reporter must be a string`);\n    }\n  }\n\n  if ('reportSlowTests' in config && config.reportSlowTests !== undefined && config.reportSlowTests !== null) {\n    if (!config.reportSlowTests || typeof config.reportSlowTests !== 'object')\n      throw errorWithFile(file, `config.reportSlowTests must be an object`);\n    if (!('max' in config.reportSlowTests) || typeof config.reportSlowTests.max !== 'number' || config.reportSlowTests.max < 0)\n      throw errorWithFile(file, `config.reportSlowTests.max must be a non-negative number`);\n    if (!('threshold' in config.reportSlowTests) || typeof config.reportSlowTests.threshold !== 'number' || config.reportSlowTests.threshold < 0)\n      throw errorWithFile(file, `config.reportSlowTests.threshold must be a non-negative number`);\n  }\n\n  if ('shard' in config && config.shard !== undefined && config.shard !== null) {\n    if (!config.shard || typeof config.shard !== 'object')\n      throw errorWithFile(file, `config.shard must be an object`);\n    if (!('total' in config.shard) || typeof config.shard.total !== 'number' || config.shard.total < 1)\n      throw errorWithFile(file, `config.shard.total must be a positive number`);\n    if (!('current' in config.shard) || typeof config.shard.current !== 'number' || config.shard.current < 1 || config.shard.current > config.shard.total)\n      throw errorWithFile(file, `config.shard.current must be a positive number, not greater than config.shard.total`);\n  }\n\n  if ('updateSnapshots' in config && config.updateSnapshots !== undefined) {\n    if (typeof config.updateSnapshots !== 'string' || !['all', 'changed', 'missing', 'none'].includes(config.updateSnapshots))\n      throw errorWithFile(file, `config.updateSnapshots must be one of \"all\", \"changed\", \"missing\" or \"none\"`);\n  }\n\n  if ('tsconfig' in config && config.tsconfig !== undefined) {\n    if (typeof config.tsconfig !== 'string')\n      throw errorWithFile(file, `config.tsconfig must be a string`);\n    if (!fs.existsSync(path.resolve(file, '..', config.tsconfig)))\n      throw errorWithFile(file, `config.tsconfig does not exist`);\n  }\n}\n\nfunction validateProject(file: string, project: Project, title: string) {\n  if (typeof project !== 'object' || !project)\n    throw errorWithFile(file, `${title} must be an object`);\n\n  if ('name' in project && project.name !== undefined) {\n    if (typeof project.name !== 'string')\n      throw errorWithFile(file, `${title}.name must be a string`);\n  }\n\n  if ('outputDir' in project && project.outputDir !== undefined) {\n    if (typeof project.outputDir !== 'string')\n      throw errorWithFile(file, `${title}.outputDir must be a string`);\n  }\n\n  if ('repeatEach' in project && project.repeatEach !== undefined) {\n    if (typeof project.repeatEach !== 'number' || project.repeatEach < 0)\n      throw errorWithFile(file, `${title}.repeatEach must be a non-negative number`);\n  }\n\n  if ('retries' in project && project.retries !== undefined) {\n    if (typeof project.retries !== 'number' || project.retries < 0)\n      throw errorWithFile(file, `${title}.retries must be a non-negative number`);\n  }\n\n  if ('testDir' in project && project.testDir !== undefined) {\n    if (typeof project.testDir !== 'string')\n      throw errorWithFile(file, `${title}.testDir must be a string`);\n  }\n\n  for (const prop of ['testIgnore', 'testMatch'] as const) {\n    if (prop in project && project[prop] !== undefined) {\n      const value = project[prop];\n      if (Array.isArray(value)) {\n        value.forEach((item, index) => {\n          if (typeof item !== 'string' && !isRegExp(item))\n            throw errorWithFile(file, `${title}.${prop}[${index}] must be a string or a RegExp`);\n        });\n      } else if (typeof value !== 'string' && !isRegExp(value)) {\n        throw errorWithFile(file, `${title}.${prop} must be a string or a RegExp`);\n      }\n    }\n  }\n\n  if ('timeout' in project && project.timeout !== undefined) {\n    if (typeof project.timeout !== 'number' || project.timeout < 0)\n      throw errorWithFile(file, `${title}.timeout must be a non-negative number`);\n  }\n\n  if ('use' in project && project.use !== undefined) {\n    if (!project.use || typeof project.use !== 'object')\n      throw errorWithFile(file, `${title}.use must be an object`);\n  }\n\n  if ('ignoreSnapshots' in project && project.ignoreSnapshots !== undefined) {\n    if (typeof project.ignoreSnapshots !== 'boolean')\n      throw errorWithFile(file, `${title}.ignoreSnapshots must be a boolean`);\n  }\n\n  if ('workers' in project && project.workers !== undefined) {\n    if (typeof project.workers === 'number' && project.workers <= 0)\n      throw errorWithFile(file, `${title}.workers must be a positive number`);\n    else if (typeof project.workers === 'string' && !project.workers.endsWith('%'))\n      throw errorWithFile(file, `${title}.workers must be a number or percentage`);\n  }\n}\n\nexport function resolveConfigLocation(configFile: string | undefined): ConfigLocation {\n  const configFileOrDirectory = configFile ? path.resolve(process.cwd(), configFile) : process.cwd();\n  const resolvedConfigFile = resolveConfigFile(configFileOrDirectory);\n  return {\n    resolvedConfigFile,\n    configDir: resolvedConfigFile ? path.dirname(resolvedConfigFile) : configFileOrDirectory,\n  };\n}\n\nfunction resolveConfigFile(configFileOrDirectory: string): string | undefined {\n  const resolveConfig = (configFile: string) => {\n    if (fs.existsSync(configFile))\n      return configFile;\n  };\n\n  const resolveConfigFileFromDirectory = (directory: string) => {\n    for (const ext of ['.ts', '.js', '.mts', '.mjs', '.cts', '.cjs']) {\n      const configFile = resolveConfig(path.resolve(directory, 'playwright.config' + ext));\n      if (configFile)\n        return configFile;\n    }\n  };\n\n  if (!fs.existsSync(configFileOrDirectory))\n    throw new Error(`${configFileOrDirectory} does not exist`);\n  if (fs.statSync(configFileOrDirectory).isDirectory()) {\n    // When passed a directory, look for a config file inside.\n    const configFile = resolveConfigFileFromDirectory(configFileOrDirectory);\n    if (configFile)\n      return configFile;\n    // If there is no config, assume this as a root testing directory.\n    return undefined;\n  }\n  // When passed a file, it must be a config file.\n  return configFileOrDirectory!;\n}\n\nexport async function loadConfigFromFile(configFile: string | undefined, overrides?: ConfigCLIOverrides, ignoreDeps?: boolean): Promise<FullConfigInternal> {\n  return await loadConfig(resolveConfigLocation(configFile), overrides, ignoreDeps);\n}\n\nexport async function loadEmptyConfigForMergeReports() {\n  // Merge reports is \"different\" for no good reason. It should not pick up local config from the cwd.\n  return await loadConfig({ configDir: process.cwd() });\n}\n"],
  "mappings": "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",
  "names": ["fs", "path"]
}
