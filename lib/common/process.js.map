{
  "version": 3,
  "sources": ["../../src/common/process.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { setTimeOrigin, startProfiling, stopProfiling } from 'playwright-core/lib/utils';\n\nimport { serializeError } from '../util';\n\nimport type { EnvProducedPayload, ProcessInitParams, TestInfoErrorImpl } from './ipc';\n\nexport type ProtocolRequest = {\n  id: number;\n  method: string;\n  params?: any;\n};\n\nexport type ProtocolResponse = {\n  id?: number;\n  error?: TestInfoErrorImpl;\n  method?: string;\n  params?: any;\n  result?: any;\n};\n\nexport class ProcessRunner {\n  async gracefullyClose(): Promise<void> { }\n\n  protected dispatchEvent(method: string, params: any) {\n    const response: ProtocolResponse = { method, params };\n    sendMessageToParent({ method: '__dispatch__', params: response });\n  }\n}\n\nlet gracefullyCloseCalled = false;\nlet forceExitInitiated = false;\n\nsendMessageToParent({ method: 'ready' });\n\nprocess.on('disconnect', () => gracefullyCloseAndExit(true));\nprocess.on('SIGINT', () => {});\nprocess.on('SIGTERM', () => {});\n\nlet processRunner: ProcessRunner | undefined;\nlet processName: string | undefined;\nconst startingEnv = { ...process.env };\n\nprocess.on('message', async (message: any) => {\n  if (message.method === '__init__') {\n    const { processParams, runnerParams, runnerScript } = message.params as { processParams: ProcessInitParams, runnerParams: any, runnerScript: string };\n    void startProfiling();\n    setTimeOrigin(processParams.timeOrigin);\n    const { create } = require(runnerScript);\n    processRunner = create(runnerParams) as ProcessRunner;\n    processName = processParams.processName;\n    return;\n  }\n  if (message.method === '__stop__') {\n    const keys = new Set([...Object.keys(process.env), ...Object.keys(startingEnv)]);\n    const producedEnv: EnvProducedPayload = [...keys].filter(key => startingEnv[key] !== process.env[key]).map(key => [key, process.env[key] ?? null]);\n    sendMessageToParent({ method: '__env_produced__', params: producedEnv });\n    await gracefullyCloseAndExit(false);\n    return;\n  }\n  if (message.method === '__dispatch__') {\n    const { id, method, params } = message.params as ProtocolRequest;\n    try {\n      const result = await (processRunner as any)[method](params);\n      const response: ProtocolResponse = { id, result };\n      sendMessageToParent({ method: '__dispatch__', params: response });\n    } catch (e) {\n      const response: ProtocolResponse = { id, error: serializeError(e) };\n      sendMessageToParent({ method: '__dispatch__', params: response });\n    }\n  }\n});\n\nconst kForceExitTimeout = +(process.env.PWTEST_FORCE_EXIT_TIMEOUT || 30000);\n\nasync function gracefullyCloseAndExit(forceExit: boolean) {\n  if (forceExit && !forceExitInitiated) {\n    forceExitInitiated = true;\n    // Force exit after 30 seconds.\n    // eslint-disable-next-line no-restricted-properties\n    setTimeout(() => process.exit(0), kForceExitTimeout);\n  }\n  if (!gracefullyCloseCalled) {\n    gracefullyCloseCalled = true;\n    // Meanwhile, try to gracefully shutdown.\n    await processRunner?.gracefullyClose().catch(() => {});\n    if (processName)\n      await stopProfiling(processName).catch(() => {});\n    // eslint-disable-next-line no-restricted-properties\n    process.exit(0);\n  }\n}\n\nfunction sendMessageToParent(message: { method: string, params?: any }) {\n  try {\n    process.send!(message);\n  } catch (e) {\n    try {\n      // By default, the IPC messages are serialized as JSON.\n      JSON.stringify(message);\n    } catch {\n      // Always throw serialization errors.\n      throw e;\n    }\n    // Can throw when closing.\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,mBAA6D;AAE7D,kBAA+B;AAkBxB,MAAM,cAAc;AAAA,EACzB,MAAM,kBAAiC;AAAA,EAAE;AAAA,EAE/B,cAAc,QAAgB,QAAa;AACnD,UAAM,WAA6B,EAAE,QAAQ,OAAO;AACpD,wBAAoB,EAAE,QAAQ,gBAAgB,QAAQ,SAAS,CAAC;AAAA,EAClE;AACF;AAEA,IAAI,wBAAwB;AAC5B,IAAI,qBAAqB;AAEzB,oBAAoB,EAAE,QAAQ,QAAQ,CAAC;AAEvC,QAAQ,GAAG,cAAc,MAAM,uBAAuB,IAAI,CAAC;AAC3D,QAAQ,GAAG,UAAU,MAAM;AAAC,CAAC;AAC7B,QAAQ,GAAG,WAAW,MAAM;AAAC,CAAC;AAE9B,IAAI;AACJ,IAAI;AACJ,MAAM,cAAc,EAAE,GAAG,QAAQ,IAAI;AAErC,QAAQ,GAAG,WAAW,OAAO,YAAiB;AAC5C,MAAI,QAAQ,WAAW,YAAY;AACjC,UAAM,EAAE,eAAe,cAAc,aAAa,IAAI,QAAQ;AAC9D,aAAK,6BAAe;AACpB,oCAAc,cAAc,UAAU;AACtC,UAAM,EAAE,OAAO,IAAI,QAAQ,YAAY;AACvC,oBAAgB,OAAO,YAAY;AACnC,kBAAc,cAAc;AAC5B;AAAA,EACF;AACA,MAAI,QAAQ,WAAW,YAAY;AACjC,UAAM,OAAO,oBAAI,IAAI,CAAC,GAAG,OAAO,KAAK,QAAQ,GAAG,GAAG,GAAG,OAAO,KAAK,WAAW,CAAC,CAAC;AAC/E,UAAM,cAAkC,CAAC,GAAG,IAAI,EAAE,OAAO,SAAO,YAAY,GAAG,MAAM,QAAQ,IAAI,GAAG,CAAC,EAAE,IAAI,SAAO,CAAC,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,CAAC;AACjJ,wBAAoB,EAAE,QAAQ,oBAAoB,QAAQ,YAAY,CAAC;AACvE,UAAM,uBAAuB,KAAK;AAClC;AAAA,EACF;AACA,MAAI,QAAQ,WAAW,gBAAgB;AACrC,UAAM,EAAE,IAAI,QAAQ,OAAO,IAAI,QAAQ;AACvC,QAAI;AACF,YAAM,SAAS,MAAO,cAAsB,MAAM,EAAE,MAAM;AAC1D,YAAM,WAA6B,EAAE,IAAI,OAAO;AAChD,0BAAoB,EAAE,QAAQ,gBAAgB,QAAQ,SAAS,CAAC;AAAA,IAClE,SAAS,GAAG;AACV,YAAM,WAA6B,EAAE,IAAI,WAAO,4BAAe,CAAC,EAAE;AAClE,0BAAoB,EAAE,QAAQ,gBAAgB,QAAQ,SAAS,CAAC;AAAA,IAClE;AAAA,EACF;AACF,CAAC;AAED,MAAM,oBAAoB,EAAE,QAAQ,IAAI,6BAA6B;AAErE,eAAe,uBAAuB,WAAoB;AACxD,MAAI,aAAa,CAAC,oBAAoB;AACpC,yBAAqB;AAGrB,eAAW,MAAM,QAAQ,KAAK,CAAC,GAAG,iBAAiB;AAAA,EACrD;AACA,MAAI,CAAC,uBAAuB;AAC1B,4BAAwB;AAExB,UAAM,eAAe,gBAAgB,EAAE,MAAM,MAAM;AAAA,IAAC,CAAC;AACrD,QAAI;AACF,gBAAM,4BAAc,WAAW,EAAE,MAAM,MAAM;AAAA,MAAC,CAAC;AAEjD,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF;AAEA,SAAS,oBAAoB,SAA2C;AACtE,MAAI;AACF,YAAQ,KAAM,OAAO;AAAA,EACvB,SAAS,GAAG;AACV,QAAI;AAEF,WAAK,UAAU,OAAO;AAAA,IACxB,QAAQ;AAEN,YAAM;AAAA,IACR;AAAA,EAEF;AACF;",
  "names": []
}
