{
  "version": 3,
  "sources": ["../../src/common/esmLoaderHost.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport url from 'url';\n\nimport { addToCompilationCache, serializeCompilationCache } from '../transform/compilationCache';\nimport { PortTransport } from '../transform/portTransport';\nimport { singleTSConfig, transformConfig } from '../transform/transform';\n\nlet loaderChannel: PortTransport | undefined;\n\nexport function registerESMLoader() {\n  // Opt-out switch.\n  if (process.env.PW_DISABLE_TS_ESM)\n    return true;\n\n  if (loaderChannel)\n    return true;\n\n  const register = require('node:module').register;\n  if (!register)\n    return false;\n\n  const { port1, port2 } = new MessageChannel();\n  // register will wait until the loader is initialized.\n  register(url.pathToFileURL(require.resolve('../transform/esmLoader')), {\n    data: { port: port2 },\n    transferList: [port2],\n  });\n  loaderChannel = createPortTransport(port1);\n  return true;\n}\n\nfunction createPortTransport(port: MessagePort) {\n  return new PortTransport(port, async (method, params) => {\n    if (method === 'pushToCompilationCache')\n      addToCompilationCache(params.cache);\n  });\n}\n\nexport async function startCollectingFileDeps() {\n  if (!loaderChannel)\n    return;\n  await loaderChannel.send('startCollectingFileDeps', {});\n}\n\nexport async function stopCollectingFileDeps(file: string) {\n  if (!loaderChannel)\n    return;\n  await loaderChannel.send('stopCollectingFileDeps', { file });\n}\n\nexport async function incorporateCompilationCache() {\n  if (!loaderChannel)\n    return;\n  // This is needed to gather dependency information from the esm loader\n  // that is populated from the resolve hook. We do not need to push\n  // this information proactively during load, but gather it at the end.\n  const result = await loaderChannel.send('getCompilationCache', {});\n  addToCompilationCache(result.cache);\n}\n\nexport async function configureESMLoader() {\n  if (!loaderChannel)\n    return;\n  await loaderChannel.send('setSingleTSConfig', { tsconfig: singleTSConfig() });\n  await loaderChannel.send('addToCompilationCache', { cache: serializeCompilationCache() });\n}\n\nexport async function configureESMLoaderTransformConfig() {\n  if (!loaderChannel)\n    return;\n  await loaderChannel.send('setSingleTSConfig', { tsconfig: singleTSConfig() });\n  await loaderChannel.send('setTransformConfig', { config: transformConfig() });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,iBAAgB;AAEhB,8BAAiE;AACjE,2BAA8B;AAC9B,uBAAgD;AAEhD,IAAI;AAEG,SAAS,oBAAoB;AAElC,MAAI,QAAQ,IAAI;AACd,WAAO;AAET,MAAI;AACF,WAAO;AAET,QAAM,WAAW,QAAQ,aAAa,EAAE;AACxC,MAAI,CAAC;AACH,WAAO;AAET,QAAM,EAAE,OAAO,MAAM,IAAI,IAAI,eAAe;AAE5C,WAAS,WAAAA,QAAI,cAAc,gBAAgB,wBAAwB,CAAC,GAAG;AAAA,IACrE,MAAM,EAAE,MAAM,MAAM;AAAA,IACpB,cAAc,CAAC,KAAK;AAAA,EACtB,CAAC;AACD,kBAAgB,oBAAoB,KAAK;AACzC,SAAO;AACT;AAEA,SAAS,oBAAoB,MAAmB;AAC9C,SAAO,IAAI,mCAAc,MAAM,OAAO,QAAQ,WAAW;AACvD,QAAI,WAAW;AACb,yDAAsB,OAAO,KAAK;AAAA,EACtC,CAAC;AACH;AAEA,eAAsB,0BAA0B;AAC9C,MAAI,CAAC;AACH;AACF,QAAM,cAAc,KAAK,2BAA2B,CAAC,CAAC;AACxD;AAEA,eAAsB,uBAAuB,MAAc;AACzD,MAAI,CAAC;AACH;AACF,QAAM,cAAc,KAAK,0BAA0B,EAAE,KAAK,CAAC;AAC7D;AAEA,eAAsB,8BAA8B;AAClD,MAAI,CAAC;AACH;AAIF,QAAM,SAAS,MAAM,cAAc,KAAK,uBAAuB,CAAC,CAAC;AACjE,qDAAsB,OAAO,KAAK;AACpC;AAEA,eAAsB,qBAAqB;AACzC,MAAI,CAAC;AACH;AACF,QAAM,cAAc,KAAK,qBAAqB,EAAE,cAAU,iCAAe,EAAE,CAAC;AAC5E,QAAM,cAAc,KAAK,yBAAyB,EAAE,WAAO,mDAA0B,EAAE,CAAC;AAC1F;AAEA,eAAsB,oCAAoC;AACxD,MAAI,CAAC;AACH;AACF,QAAM,cAAc,KAAK,qBAAqB,EAAE,cAAU,iCAAe,EAAE,CAAC;AAC5E,QAAM,cAAc,KAAK,sBAAsB,EAAE,YAAQ,kCAAgB,EAAE,CAAC;AAC9E;",
  "names": ["url"]
}
