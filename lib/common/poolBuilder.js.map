{
  "version": 3,
  "sources": ["../../src/common/poolBuilder.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FixturePool } from './fixtures';\nimport { formatLocation } from '../util';\n\nimport type { FullProjectInternal } from './config';\nimport type { LoadError } from './fixtures';\nimport type { Suite, TestCase } from './test';\nimport type { TestTypeImpl } from './testType';\nimport type { TestError } from '../../types/testReporter';\n\nexport class PoolBuilder {\n  private _project: FullProjectInternal | undefined;\n  private _testTypePools = new Map<TestTypeImpl, FixturePool>();\n  private _type: 'loader' | 'worker';\n\n  static createForLoader() {\n    return new PoolBuilder('loader');\n  }\n\n  static createForWorker(project: FullProjectInternal) {\n    return new PoolBuilder('worker', project);\n  }\n\n  private constructor(type: 'loader' | 'worker', project?: FullProjectInternal) {\n    this._type = type;\n    this._project = project;\n  }\n\n  buildPools(suite: Suite, testErrors?: TestError[]) {\n    suite.forEachTest(test => {\n      const pool = this._buildPoolForTest(test, testErrors);\n      if (this._type === 'loader')\n        test._poolDigest = pool.digest;\n      if (this._type === 'worker')\n        test._pool = pool;\n    });\n  }\n\n  private _buildPoolForTest(test: TestCase, testErrors?: TestError[]): FixturePool {\n    let pool = this._buildTestTypePool(test._testType, testErrors);\n\n    const parents: Suite[] = [];\n    for (let parent: Suite | undefined = test.parent; parent; parent = parent.parent)\n      parents.push(parent);\n    parents.reverse();\n\n    for (const parent of parents) {\n      if (parent._use.length)\n        pool = new FixturePool(parent._use, e => this._handleLoadError(e, testErrors), pool, parent._type === 'describe');\n      for (const hook of parent._hooks)\n        pool.validateFunction(hook.fn, hook.type + ' hook', hook.location);\n      for (const modifier of parent._modifiers)\n        pool.validateFunction(modifier.fn, modifier.type + ' modifier', modifier.location);\n    }\n\n    pool.validateFunction(test.fn, 'Test', test.location);\n    return pool;\n  }\n\n  private _buildTestTypePool(testType: TestTypeImpl, testErrors?: TestError[]): FixturePool {\n    if (!this._testTypePools.has(testType)) {\n      const optionOverrides = {\n        overrides: this._project?.project?.use ?? {},\n        location: { file: `project#${this._project?.id}`, line: 1, column: 1 }\n      };\n      const pool = new FixturePool(testType.fixtures, e => this._handleLoadError(e, testErrors), undefined, undefined, optionOverrides);\n      this._testTypePools.set(testType, pool);\n    }\n    return this._testTypePools.get(testType)!;\n  }\n\n  private _handleLoadError(e: LoadError, testErrors?: TestError[]): void {\n    if (testErrors)\n      testErrors.push(e);\n    else\n      throw new Error(`${formatLocation(e.location)}: ${e.message}`);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,sBAA4B;AAC5B,kBAA+B;AAQxB,MAAM,YAAY;AAAA,EAaf,YAAY,MAA2B,SAA+B;AAX9E,SAAQ,iBAAiB,oBAAI,IAA+B;AAY1D,SAAK,QAAQ;AACb,SAAK,WAAW;AAAA,EAClB;AAAA,EAXA,OAAO,kBAAkB;AACvB,WAAO,IAAI,YAAY,QAAQ;AAAA,EACjC;AAAA,EAEA,OAAO,gBAAgB,SAA8B;AACnD,WAAO,IAAI,YAAY,UAAU,OAAO;AAAA,EAC1C;AAAA,EAOA,WAAW,OAAc,YAA0B;AACjD,UAAM,YAAY,UAAQ;AACxB,YAAM,OAAO,KAAK,kBAAkB,MAAM,UAAU;AACpD,UAAI,KAAK,UAAU;AACjB,aAAK,cAAc,KAAK;AAC1B,UAAI,KAAK,UAAU;AACjB,aAAK,QAAQ;AAAA,IACjB,CAAC;AAAA,EACH;AAAA,EAEQ,kBAAkB,MAAgB,YAAuC;AAC/E,QAAI,OAAO,KAAK,mBAAmB,KAAK,WAAW,UAAU;AAE7D,UAAM,UAAmB,CAAC;AAC1B,aAAS,SAA4B,KAAK,QAAQ,QAAQ,SAAS,OAAO;AACxE,cAAQ,KAAK,MAAM;AACrB,YAAQ,QAAQ;AAEhB,eAAW,UAAU,SAAS;AAC5B,UAAI,OAAO,KAAK;AACd,eAAO,IAAI,4BAAY,OAAO,MAAM,OAAK,KAAK,iBAAiB,GAAG,UAAU,GAAG,MAAM,OAAO,UAAU,UAAU;AAClH,iBAAW,QAAQ,OAAO;AACxB,aAAK,iBAAiB,KAAK,IAAI,KAAK,OAAO,SAAS,KAAK,QAAQ;AACnE,iBAAW,YAAY,OAAO;AAC5B,aAAK,iBAAiB,SAAS,IAAI,SAAS,OAAO,aAAa,SAAS,QAAQ;AAAA,IACrF;AAEA,SAAK,iBAAiB,KAAK,IAAI,QAAQ,KAAK,QAAQ;AACpD,WAAO;AAAA,EACT;AAAA,EAEQ,mBAAmB,UAAwB,YAAuC;AACxF,QAAI,CAAC,KAAK,eAAe,IAAI,QAAQ,GAAG;AACtC,YAAM,kBAAkB;AAAA,QACtB,WAAW,KAAK,UAAU,SAAS,OAAO,CAAC;AAAA,QAC3C,UAAU,EAAE,MAAM,WAAW,KAAK,UAAU,EAAE,IAAI,MAAM,GAAG,QAAQ,EAAE;AAAA,MACvE;AACA,YAAM,OAAO,IAAI,4BAAY,SAAS,UAAU,OAAK,KAAK,iBAAiB,GAAG,UAAU,GAAG,QAAW,QAAW,eAAe;AAChI,WAAK,eAAe,IAAI,UAAU,IAAI;AAAA,IACxC;AACA,WAAO,KAAK,eAAe,IAAI,QAAQ;AAAA,EACzC;AAAA,EAEQ,iBAAiB,GAAc,YAAgC;AACrE,QAAI;AACF,iBAAW,KAAK,CAAC;AAAA;AAEjB,YAAM,IAAI,MAAM,OAAG,4BAAe,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,EAAE;AAAA,EACjE;AACF;",
  "names": []
}
