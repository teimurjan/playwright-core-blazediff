{
  "version": 3,
  "sources": ["../../src/common/testType.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { errors } from 'playwright-core';\nimport { getPackageManagerExecCommand, monotonicTime, raceAgainstDeadline, currentZone } from 'playwright-core/lib/utils';\n\nimport { currentTestInfo, currentlyLoadingFileSuite, setCurrentlyLoadingFileSuite } from './globals';\nimport { Suite, TestCase } from './test';\nimport { expect } from '../matchers/expect';\nimport { wrapFunctionWithLocation } from '../transform/transform';\n\nimport type { FixturesWithLocation } from './config';\nimport type { Fixtures, TestDetails, TestStepInfo, TestType } from '../../types/test';\nimport type { Location } from '../../types/testReporter';\n\nconst testTypeSymbol = Symbol('testType');\n\nexport class TestTypeImpl {\n  readonly fixtures: FixturesWithLocation[];\n  readonly test: TestType<any, any>;\n\n  constructor(fixtures: FixturesWithLocation[]) {\n    this.fixtures = fixtures;\n\n    const test: any = wrapFunctionWithLocation(this._createTest.bind(this, 'default'));\n    test[testTypeSymbol] = this;\n    test.expect = expect;\n    test.only = wrapFunctionWithLocation(this._createTest.bind(this, 'only'));\n    test.describe = wrapFunctionWithLocation(this._describe.bind(this, 'default'));\n    test.describe.only = wrapFunctionWithLocation(this._describe.bind(this, 'only'));\n    test.describe.configure = wrapFunctionWithLocation(this._configure.bind(this));\n    test.describe.fixme = wrapFunctionWithLocation(this._describe.bind(this, 'fixme'));\n    test.describe.parallel = wrapFunctionWithLocation(this._describe.bind(this, 'parallel'));\n    test.describe.parallel.only = wrapFunctionWithLocation(this._describe.bind(this, 'parallel.only'));\n    test.describe.serial = wrapFunctionWithLocation(this._describe.bind(this, 'serial'));\n    test.describe.serial.only = wrapFunctionWithLocation(this._describe.bind(this, 'serial.only'));\n    test.describe.skip = wrapFunctionWithLocation(this._describe.bind(this, 'skip'));\n    test.beforeEach = wrapFunctionWithLocation(this._hook.bind(this, 'beforeEach'));\n    test.afterEach = wrapFunctionWithLocation(this._hook.bind(this, 'afterEach'));\n    test.beforeAll = wrapFunctionWithLocation(this._hook.bind(this, 'beforeAll'));\n    test.afterAll = wrapFunctionWithLocation(this._hook.bind(this, 'afterAll'));\n    test.skip = wrapFunctionWithLocation(this._modifier.bind(this, 'skip'));\n    test.fixme = wrapFunctionWithLocation(this._modifier.bind(this, 'fixme'));\n    test.fail = wrapFunctionWithLocation(this._modifier.bind(this, 'fail'));\n    test.fail.only = wrapFunctionWithLocation(this._createTest.bind(this, 'fail.only'));\n    test.slow = wrapFunctionWithLocation(this._modifier.bind(this, 'slow'));\n    test.setTimeout = wrapFunctionWithLocation(this._setTimeout.bind(this));\n    test.step = this._step.bind(this, 'pass');\n    test.step.skip = this._step.bind(this, 'skip');\n    test.use = wrapFunctionWithLocation(this._use.bind(this));\n    test.extend = wrapFunctionWithLocation(this._extend.bind(this));\n    test.info = () => {\n      const result = currentTestInfo();\n      if (!result)\n        throw new Error('test.info() can only be called while test is running');\n      return result;\n    };\n    this.test = test;\n  }\n\n  private _currentSuite(location: Location, title: string): Suite | undefined {\n    const suite = currentlyLoadingFileSuite();\n    if (!suite) {\n      throw new Error([\n        `Playwright Test did not expect ${title} to be called here.`,\n        `Most common reasons include:`,\n        `- You are calling ${title} in a configuration file.`,\n        `- You are calling ${title} in a file that is imported by the configuration file.`,\n        `- You have two different versions of @playwright/test. This usually happens`,\n        `  when one of the dependencies in your package.json depends on @playwright/test.`,\n      ].join('\\n'));\n    }\n    return suite;\n  }\n\n  private _createTest(type: 'default' | 'only' | 'skip' | 'fixme' | 'fail' | 'fail.only', location: Location, title: string, fnOrDetails: Function | TestDetails, fn?: Function) {\n    throwIfRunningInsideJest();\n    const suite = this._currentSuite(location, 'test()');\n    if (!suite)\n      return;\n\n    let details: TestDetails;\n    let body: Function;\n    if (typeof fnOrDetails === 'function') {\n      body = fnOrDetails;\n      details = {};\n    } else {\n      body = fn!;\n      details = fnOrDetails;\n    }\n\n    const validatedDetails = validateTestDetails(details, location);\n    const test = new TestCase(title, body, this, location);\n    test._requireFile = suite._requireFile;\n    test.annotations.push(...validatedDetails.annotations);\n    test._tags.push(...validatedDetails.tags);\n    suite._addTest(test);\n\n    if (type === 'only' || type === 'fail.only')\n      test._only = true;\n    if (type === 'skip' || type === 'fixme' || type === 'fail')\n      test.annotations.push({ type, location });\n    else if (type === 'fail.only')\n      test.annotations.push({ type: 'fail', location });\n  }\n\n  private _describe(type: 'default' | 'only' | 'serial' | 'serial.only' | 'parallel' | 'parallel.only' | 'skip' | 'fixme', location: Location, titleOrFn: string | Function, fnOrDetails?: TestDetails | Function, fn?: Function) {\n    throwIfRunningInsideJest();\n    const suite = this._currentSuite(location, 'test.describe()');\n    if (!suite)\n      return;\n\n    let title: string;\n    let body: Function;\n    let details: TestDetails;\n\n    if (typeof titleOrFn === 'function') {\n      title = '';\n      details = {};\n      body = titleOrFn;\n    } else if (typeof fnOrDetails === 'function') {\n      title = titleOrFn;\n      details = {};\n      body = fnOrDetails;\n    } else {\n      title = titleOrFn;\n      details = fnOrDetails!;\n      body = fn!;\n    }\n\n    const validatedDetails = validateTestDetails(details, location);\n    const child = new Suite(title, 'describe');\n    child._requireFile = suite._requireFile;\n    child.location = location;\n    child._staticAnnotations.push(...validatedDetails.annotations);\n    child._tags.push(...validatedDetails.tags);\n    suite._addSuite(child);\n\n    if (type === 'only' || type === 'serial.only' || type === 'parallel.only')\n      child._only = true;\n    if (type === 'serial' || type === 'serial.only')\n      child._parallelMode = 'serial';\n    if (type === 'parallel' || type === 'parallel.only')\n      child._parallelMode = 'parallel';\n    if (type === 'skip' || type === 'fixme')\n      child._staticAnnotations.push({ type, location });\n\n    for (let parent: Suite | undefined = suite; parent; parent = parent.parent) {\n      if (parent._parallelMode === 'serial' && child._parallelMode === 'parallel')\n        throw new Error('describe.parallel cannot be nested inside describe.serial');\n      if (parent._parallelMode === 'default' && child._parallelMode === 'parallel')\n        throw new Error('describe.parallel cannot be nested inside describe with default mode');\n    }\n\n    setCurrentlyLoadingFileSuite(child);\n    body();\n    setCurrentlyLoadingFileSuite(suite);\n  }\n\n  private _hook(name: 'beforeEach' | 'afterEach' | 'beforeAll' | 'afterAll', location: Location, title: string | Function, fn?: Function) {\n    const suite = this._currentSuite(location, `test.${name}()`);\n    if (!suite)\n      return;\n    if (typeof title === 'function') {\n      fn = title;\n      title = `${name} hook`;\n    }\n\n    suite._hooks.push({ type: name, fn: fn!, title, location });\n  }\n\n  private _configure(location: Location, options: { mode?: 'default' | 'parallel' | 'serial', retries?: number, timeout?: number }) {\n    throwIfRunningInsideJest();\n    const suite = this._currentSuite(location, `test.describe.configure()`);\n    if (!suite)\n      return;\n\n    if (options.timeout !== undefined)\n      suite._timeout = options.timeout;\n\n    if (options.retries !== undefined)\n      suite._retries = options.retries;\n\n    if (options.mode !== undefined) {\n      if (suite._parallelMode !== 'none')\n        throw new Error(`\"${suite._parallelMode}\" mode is already assigned for the enclosing scope.`);\n      suite._parallelMode = options.mode;\n      for (let parent: Suite | undefined = suite.parent; parent; parent = parent.parent) {\n        if (parent._parallelMode === 'serial' && suite._parallelMode === 'parallel')\n          throw new Error('describe with parallel mode cannot be nested inside describe with serial mode');\n        if (parent._parallelMode === 'default' && suite._parallelMode === 'parallel')\n          throw new Error('describe with parallel mode cannot be nested inside describe with default mode');\n      }\n    }\n  }\n\n  private _modifier(type: 'skip' | 'fail' | 'fixme' | 'slow', location: Location, ...modifierArgs: any[]) {\n    const suite = currentlyLoadingFileSuite();\n    if (suite) {\n      if (typeof modifierArgs[0] === 'string' && typeof modifierArgs[1] === 'function' && (type === 'skip' || type === 'fixme' || type === 'fail')) {\n        // Support for test.{skip,fixme,fail}(title, body)\n        this._createTest(type, location, modifierArgs[0], modifierArgs[1]);\n        return;\n      }\n      if (typeof modifierArgs[0] === 'string' && typeof modifierArgs[1] === 'object' && typeof modifierArgs[2] === 'function' && (type === 'skip' || type === 'fixme' || type === 'fail')) {\n        // Support for test.{skip,fixme,fail}(title, details, body)\n        this._createTest(type, location, modifierArgs[0], modifierArgs[1], modifierArgs[2]);\n        return;\n      }\n\n      if (typeof modifierArgs[0] === 'function') {\n        suite._modifiers.push({ type, fn: modifierArgs[0], location, description: modifierArgs[1] });\n      } else {\n        if (modifierArgs.length >= 1 && !modifierArgs[0])\n          return;\n        const description = modifierArgs[1];\n        suite._staticAnnotations.push({ type, description, location });\n      }\n      return;\n    }\n\n    const testInfo = currentTestInfo();\n    if (!testInfo)\n      throw new Error(`test.${type}() can only be called inside test, describe block or fixture`);\n    if (typeof modifierArgs[0] === 'function')\n      throw new Error(`test.${type}() with a function can only be called inside describe block`);\n    testInfo._modifier(type, location, modifierArgs as [any, any]);\n  }\n\n  private _setTimeout(location: Location, timeout: number) {\n    const suite = currentlyLoadingFileSuite();\n    if (suite) {\n      suite._timeout = timeout;\n      return;\n    }\n\n    const testInfo = currentTestInfo();\n    if (!testInfo)\n      throw new Error(`test.setTimeout() can only be called from a test`);\n    testInfo.setTimeout(timeout);\n  }\n\n  private _use(location: Location, fixtures: Fixtures) {\n    const suite = this._currentSuite(location, `test.use()`);\n    if (!suite)\n      return;\n    suite._use.push({ fixtures, location });\n  }\n\n  async _step<T>(expectation: 'pass'|'skip', title: string, body: (step: TestStepInfo) => T | Promise<T>, options: {box?: boolean, location?: Location, timeout?: number } = {}): Promise<T> {\n    const testInfo = currentTestInfo();\n    if (!testInfo)\n      throw new Error(`test.step() can only be called from a test`);\n    const step = testInfo._addStep({ category: 'test.step', title, location: options.location, box: options.box });\n    return await currentZone().with('stepZone', step).run(async () => {\n      try {\n        let result: Awaited<ReturnType<typeof raceAgainstDeadline<T>>> | undefined = undefined;\n        result = await raceAgainstDeadline(async () => {\n          try {\n            return await step.info._runStepBody(expectation === 'skip', body, step.location);\n          } catch (e) {\n            // If the step timed out, the test fixtures will tear down, which in turn\n            // will abort unfinished actions in the step body. Record such errors here.\n            if (result?.timedOut)\n              testInfo._failWithError(e);\n            throw e;\n          }\n        }, options.timeout ? monotonicTime() + options.timeout : 0);\n        if (result.timedOut)\n          throw new errors.TimeoutError(`Step timeout of ${options.timeout}ms exceeded.`);\n        step.complete({});\n        return result.result;\n      } catch (error) {\n        step.complete({ error });\n        throw error;\n      }\n    });\n  }\n\n  private _extend(location: Location, fixtures: Fixtures) {\n    if ((fixtures as any)[testTypeSymbol])\n      throw new Error(`test.extend() accepts fixtures object, not a test object.\\nDid you mean to call mergeTests()?`);\n    const fixturesWithLocation: FixturesWithLocation = { fixtures, location };\n    return new TestTypeImpl([...this.fixtures, fixturesWithLocation]).test;\n  }\n}\n\nfunction throwIfRunningInsideJest() {\n  if (process.env.JEST_WORKER_ID) {\n    const packageManagerCommand = getPackageManagerExecCommand();\n    throw new Error(\n        `Playwright Test needs to be invoked via '${packageManagerCommand} playwright test' and excluded from Jest test runs.\\n` +\n        `Creating one directory for Playwright tests and one for Jest is the recommended way of doing it.\\n` +\n        `See https://playwright.dev/docs/intro for more information about Playwright Test.`,\n    );\n  }\n}\n\nfunction validateTestDetails(details: TestDetails, location: Location) {\n  const originalAnnotations = Array.isArray(details.annotation) ? details.annotation : (details.annotation ? [details.annotation] : []);\n  const annotations = originalAnnotations.map(annotation => ({ ...annotation, location }));\n  const tags = Array.isArray(details.tag) ? details.tag : (details.tag ? [details.tag] : []);\n  for (const tag of tags) {\n    if (tag[0] !== '@')\n      throw new Error(`Tag must start with \"@\" symbol, got \"${tag}\" instead.`);\n  }\n  return { annotations, tags };\n}\n\nexport const rootTestType = new TestTypeImpl([]);\n\nexport function mergeTests(...tests: TestType<any, any>[]) {\n  let result = rootTestType;\n  for (const t of tests) {\n    const testTypeImpl = (t as any)[testTypeSymbol] as TestTypeImpl;\n    if (!testTypeImpl)\n      throw new Error(`mergeTests() accepts \"test\" functions as parameters.\\nDid you mean to call test.extend() with fixtures instead?`);\n    // Filter out common ancestor fixtures.\n    const newFixtures = testTypeImpl.fixtures.filter(theirs => !result.fixtures.find(ours => ours.fixtures === theirs.fixtures));\n    result = new TestTypeImpl([...result.fixtures, ...newFixtures]);\n  }\n  return result.test;\n}\n"],
  "mappings": "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",
  "names": []
}
