{
  "version": 3,
  "sources": ["../../src/isomorphic/teleSuiteUpdater.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TeleReporterReceiver, TeleSuite } from './teleReceiver';\nimport { statusEx } from './testTree';\n\nimport type * as reporterTypes from '../../types/testReporter';\nimport type { ReporterV2 } from '../reporters/reporterV2';\n\nexport type TeleSuiteUpdaterProgress = {\n  total: number;\n  passed: number;\n  failed: number;\n  skipped: number;\n};\n\nexport type TeleSuiteUpdaterTestModel = {\n  config: reporterTypes.FullConfig;\n  rootSuite: reporterTypes.Suite;\n  loadErrors: reporterTypes.TestError[];\n  progress: TeleSuiteUpdaterProgress;\n};\n\nexport type TeleSuiteUpdaterOptions = {\n  onUpdate: (force?: boolean) => void,\n  onError?: (error: reporterTypes.TestError) => void;\n  pathSeparator: string;\n};\n\nexport class TeleSuiteUpdater {\n  rootSuite: TeleSuite | undefined;\n  config: reporterTypes.FullConfig | undefined;\n  readonly loadErrors: reporterTypes.TestError[] = [];\n  readonly progress: TeleSuiteUpdaterProgress = {\n    total: 0,\n    passed: 0,\n    failed: 0,\n    skipped: 0,\n  };\n\n  private _receiver: TeleReporterReceiver;\n  private _lastRunReceiver: TeleReporterReceiver | undefined;\n  private _lastRunTestCount = 0;\n  private _options: TeleSuiteUpdaterOptions;\n  private _testResultsSnapshot: Map<string, reporterTypes.TestResult[]> | undefined;\n\n  constructor(options: TeleSuiteUpdaterOptions) {\n    this._receiver = new TeleReporterReceiver(this._createReporter(), {\n      mergeProjects: true,\n      mergeTestCases: true,\n      resolvePath: (rootDir, relativePath) => rootDir + options.pathSeparator + relativePath,\n      clearPreviousResultsWhenTestBegins: true,\n    });\n    this._options = options;\n  }\n\n  private _createReporter(): ReporterV2 {\n    return {\n      version: () => 'v2',\n\n      onConfigure: (c: reporterTypes.FullConfig) => {\n        this.config = c;\n        // TeleReportReceiver is merging everything into a single suite, so when we\n        // run one test, we still get many tests via rootSuite.allTests().length.\n        // To work around that, have a dedicated per-run receiver that will only have\n        // suite for a single test run, and hence will have correct total.\n        this._lastRunReceiver = new TeleReporterReceiver({\n          version: () => 'v2',\n          onBegin: (suite: reporterTypes.Suite) => {\n            this._lastRunTestCount = suite.allTests().length;\n            this._lastRunReceiver = undefined;\n          }\n        }, {\n          mergeProjects: true,\n          mergeTestCases: false,\n          resolvePath: (rootDir, relativePath) => rootDir + this._options.pathSeparator + relativePath,\n        });\n      },\n\n      onBegin: (suite: reporterTypes.Suite) => {\n        if (!this.rootSuite)\n          this.rootSuite = suite as TeleSuite;\n        // As soon as new test tree is built add previous results, before calling onUpdate\n        // to avoid flashing empty results in the UI.\n        if (this._testResultsSnapshot) {\n          for (const test of this.rootSuite.allTests())\n            test.results = this._testResultsSnapshot?.get(test.id) || test.results;\n          this._testResultsSnapshot = undefined;\n        }\n        this.progress.total = this._lastRunTestCount;\n        this.progress.passed = 0;\n        this.progress.failed = 0;\n        this.progress.skipped = 0;\n        this._options.onUpdate(true);\n      },\n\n      onEnd: () => {\n        this._options.onUpdate(true);\n      },\n\n      onTestBegin: (test: reporterTypes.TestCase, testResult: reporterTypes.TestResult) => {\n        (testResult as any)[statusEx] = 'running';\n        this._options.onUpdate();\n      },\n\n      onTestEnd: (test: reporterTypes.TestCase, testResult: reporterTypes.TestResult) => {\n        if (test.outcome() === 'skipped')\n          ++this.progress.skipped;\n        else if (test.outcome() === 'unexpected')\n          ++this.progress.failed;\n        else\n          ++this.progress.passed;\n        (testResult as any)[statusEx] = testResult.status;\n        this._options.onUpdate();\n      },\n\n      onError: (error: reporterTypes.TestError) => this._handleOnError(error),\n\n      printsToStdio: () => false,\n    };\n  }\n\n  processGlobalReport(report: any[]) {\n    const receiver = new TeleReporterReceiver({\n      version: () => 'v2',\n      onConfigure: (c: reporterTypes.FullConfig) => {\n        this.config = c;\n      },\n      onError: (error: reporterTypes.TestError) => this._handleOnError(error)\n    });\n    for (const message of report)\n      void receiver.dispatch(message);\n  }\n\n  processListReport(report: any[]) {\n    // Save test results and reset all projects, the results will be restored after\n    // new project structure is built.\n    const tests = this.rootSuite?.allTests() || [];\n    this._testResultsSnapshot = new Map(tests.map(test => [test.id, test.results]));\n    this._receiver.reset();\n    for (const message of report)\n      void this._receiver.dispatch(message);\n  }\n\n  processTestReportEvent(message: any) {\n    // The order of receiver dispatches matters here, we want to assign `lastRunTestCount`\n    // before we use it.\n    this._lastRunReceiver?.dispatch(message)?.catch(() => { });\n    this._receiver.dispatch(message)?.catch(() => { });\n  }\n\n  private _handleOnError(error: reporterTypes.TestError) {\n    this.loadErrors.push(error);\n    this._options.onError?.(error);\n    this._options.onUpdate();\n  }\n\n  asModel(): TeleSuiteUpdaterTestModel {\n    return {\n      rootSuite: this.rootSuite || new TeleSuite('', 'root'),\n      config: this.config!,\n      loadErrors: this.loadErrors,\n      progress: this.progress,\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
