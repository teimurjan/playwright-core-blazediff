{
  "version": 3,
  "sources": ["../../src/isomorphic/testTree.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type TestItemStatus = 'none' | 'running' | 'scheduled' | 'passed' | 'failed' | 'skipped';\nimport type * as reporterTypes from '../../types/testReporter';\n\n// -- Reuse boundary -- Everything below this line is reused in the vscode extension.\n\nexport type TreeItemBase = {\n  kind: 'root' | 'group' | 'case' | 'test',\n  id: string;\n  title: string;\n  location: reporterTypes.Location,\n  duration: number;\n  parent: TreeItem | undefined;\n  children: TreeItem[];\n  status: TestItemStatus;\n};\n\nexport type GroupItem = TreeItemBase & {\n  kind: 'group';\n  subKind: 'folder' | 'file' | 'describe';\n  hasLoadErrors: boolean;\n  children: (TestCaseItem | GroupItem)[];\n};\n\nexport type TestCaseItem = TreeItemBase & {\n  kind: 'case',\n  tests: reporterTypes.TestCase[];\n  children: TestItem[];\n  test: reporterTypes.TestCase | undefined;\n  project: reporterTypes.FullProject | undefined;\n  tags: Array<string>;\n};\n\nexport type TestItem = TreeItemBase & {\n  kind: 'test',\n  test: reporterTypes.TestCase;\n  project: reporterTypes.FullProject;\n};\n\nexport type TreeItem = GroupItem | TestCaseItem | TestItem;\n\nexport class TestTree {\n  rootItem: GroupItem;\n  private _treeItemById = new Map<string, TreeItem>();\n  private _treeItemByTestId = new Map<string, TestItem | TestCaseItem>();\n  readonly pathSeparator: string;\n\n  constructor(rootFolder: string, rootSuite: reporterTypes.Suite | undefined, loadErrors: reporterTypes.TestError[], projectFilters: Map<string, boolean> | undefined, pathSeparator: string) {\n    const filterProjects = projectFilters && [...projectFilters.values()].some(Boolean);\n    this.pathSeparator = pathSeparator;\n    this.rootItem = {\n      kind: 'group',\n      subKind: 'folder',\n      id: rootFolder,\n      title: '',\n      location: { file: '', line: 0, column: 0 },\n      duration: 0,\n      parent: undefined,\n      children: [],\n      status: 'none',\n      hasLoadErrors: false,\n    };\n    this._treeItemById.set(rootFolder, this.rootItem);\n\n    const visitSuite = (project: reporterTypes.FullProject, parentSuite: reporterTypes.Suite, parentGroup: GroupItem) => {\n      for (const suite of parentSuite.suites) {\n        if (!suite.title) {\n          // Flatten anonymous describes.\n          visitSuite(project, suite, parentGroup);\n          continue;\n        }\n\n        let group = parentGroup.children.find(item => item.kind === 'group' && item.title === suite.title) as GroupItem | undefined;\n        if (!group) {\n          group = {\n            kind: 'group',\n            subKind: 'describe',\n            id: 'suite:' + parentSuite.titlePath().join('\\x1e') + '\\x1e' + suite.title,  // account for anonymous suites\n            title: suite.title,\n            location: suite.location!,\n            duration: 0,\n            parent: parentGroup,\n            children: [],\n            status: 'none',\n            hasLoadErrors: false,\n          };\n          this._addChild(parentGroup, group);\n        }\n        visitSuite(project, suite, group);\n      }\n\n      for (const test of parentSuite.tests) {\n        const title = test.title;\n        let testCaseItem = parentGroup.children.find(t => t.kind !== 'group' && t.title === title) as TestCaseItem;\n        if (!testCaseItem) {\n          testCaseItem = {\n            kind: 'case',\n            id: 'test:' + test.titlePath().join('\\x1e'),\n            title,\n            parent: parentGroup,\n            children: [],\n            tests: [],\n            location: test.location,\n            duration: 0,\n            status: 'none',\n            project: undefined,\n            test: undefined,\n            tags: test.tags,\n          };\n          this._addChild(parentGroup, testCaseItem);\n        }\n\n        const result = test.results[0];\n        let status: 'none' | 'running' | 'scheduled' | 'passed' | 'failed' | 'skipped' = 'none';\n        if ((result as any)?.[statusEx] === 'scheduled')\n          status = 'scheduled';\n        else if ((result as any)?.[statusEx] === 'running')\n          status = 'running';\n        else if (result?.status === 'skipped')\n          status = 'skipped';\n        else if (result?.status === 'interrupted')\n          status = 'none';\n        else if (result && test.outcome() !== 'expected')\n          status = 'failed';\n        else if (result && test.outcome() === 'expected')\n          status = 'passed';\n\n        testCaseItem.tests.push(test);\n        const testItem: TestItem = {\n          kind: 'test',\n          id: test.id,\n          title: project.name,\n          location: test.location!,\n          test,\n          parent: testCaseItem,\n          children: [],\n          status,\n          duration: test.results.length ? Math.max(0, test.results[0].duration) : 0,\n          project,\n        };\n        this._addChild(testCaseItem, testItem);\n        this._treeItemByTestId.set(test.id, testItem);\n        testCaseItem.duration = (testCaseItem.children as TestItem[]).reduce((a, b) => a + b.duration, 0);\n      }\n    };\n\n    for (const projectSuite of rootSuite?.suites || []) {\n      if (filterProjects && !projectFilters.get(projectSuite.title))\n        continue;\n      for (const fileSuite of projectSuite.suites) {\n        const fileItem = this._fileItem(fileSuite.location!.file.split(pathSeparator), true);\n        visitSuite(projectSuite.project()!, fileSuite, fileItem);\n      }\n    }\n\n    for (const loadError of loadErrors) {\n      if (!loadError.location)\n        continue;\n      const fileItem = this._fileItem(loadError.location.file.split(pathSeparator), true);\n      fileItem.hasLoadErrors = true;\n    }\n  }\n\n  private _addChild(parent: TreeItem, child: TreeItem) {\n    parent.children.push(child);\n    child.parent = parent;\n    this._treeItemById.set(child.id, child);\n  }\n\n  filterTree(filterText: string, statusFilters: Map<string, boolean>, runningTestIds: Set<string> | undefined) {\n    const tokens = filterText.trim().toLowerCase().split(' ');\n    const filtersStatuses = [...statusFilters.values()].some(Boolean);\n\n    const filter = (testCase: TestCaseItem) => {\n      const titleWithTags = [...testCase.tests[0].titlePath(), ...testCase.tests[0].tags].join(' ').toLowerCase();\n      if (!tokens.every(token => titleWithTags.includes(token)) && !testCase.tests.some(t => runningTestIds?.has(t.id)))\n        return false;\n      testCase.children = (testCase.children as TestItem[]).filter(test => {\n        return !filtersStatuses || runningTestIds?.has(test.test.id) || statusFilters.get(test.status);\n      });\n      testCase.tests = (testCase.children as TestItem[]).map(c => c.test);\n      return !!testCase.children.length;\n    };\n\n    const visit = (treeItem: GroupItem) => {\n      const newChildren: (GroupItem | TestCaseItem)[] = [];\n      for (const child of treeItem.children) {\n        if (child.kind === 'case') {\n          if (filter(child))\n            newChildren.push(child);\n        } else {\n          visit(child);\n          if (child.children.length || child.hasLoadErrors)\n            newChildren.push(child);\n        }\n      }\n      treeItem.children = newChildren;\n    };\n    visit(this.rootItem);\n  }\n\n  private _fileItem(filePath: string[], isFile: boolean): GroupItem {\n    if (filePath.length === 0)\n      return this.rootItem;\n    const fileName = filePath.join(this.pathSeparator);\n    const existingFileItem = this._treeItemById.get(fileName);\n    if (existingFileItem)\n      return existingFileItem as GroupItem;\n    const parentFileItem = this._fileItem(filePath.slice(0, filePath.length - 1), false);\n    const fileItem: GroupItem = {\n      kind: 'group',\n      subKind: isFile ? 'file' : 'folder',\n      id: fileName,\n      title: filePath[filePath.length - 1],\n      location: { file: fileName, line: 0, column: 0 },\n      duration: 0,\n      parent: parentFileItem,\n      children: [],\n      status: 'none',\n      hasLoadErrors: false,\n    };\n    this._addChild(parentFileItem, fileItem);\n    return fileItem;\n  }\n\n  sortAndPropagateStatus() {\n    sortAndPropagateStatus(this.rootItem);\n  }\n\n  flattenForSingleProject() {\n    const visit = (treeItem: TreeItem) => {\n      if (treeItem.kind === 'case' && treeItem.children.length === 1) {\n        treeItem.project = treeItem.children[0].project;\n        treeItem.test = treeItem.children[0].test;\n        treeItem.children = [];\n        this._treeItemByTestId.set(treeItem.test.id, treeItem);\n      } else {\n        treeItem.children.forEach(visit);\n      }\n    };\n    visit(this.rootItem);\n  }\n\n  shortenRoot() {\n    let shortRoot = this.rootItem;\n    while (shortRoot.children.length === 1 && shortRoot.children[0].kind === 'group' && shortRoot.children[0].subKind === 'folder')\n      shortRoot = shortRoot.children[0];\n    shortRoot.location = this.rootItem.location;\n    this.rootItem = shortRoot;\n  }\n\n  testIds(): Set<string> {\n    const result = new Set<string>();\n    const visit = (treeItem: TreeItem) => {\n      if (treeItem.kind === 'case')\n        treeItem.tests.forEach(t => result.add(t.id));\n      treeItem.children.forEach(visit);\n    };\n    visit(this.rootItem);\n    return result;\n  }\n\n  fileNames(): string[] {\n    const result = new Set<string>();\n    const visit = (treeItem: TreeItem) => {\n      if (treeItem.kind === 'group' && treeItem.subKind === 'file')\n        result.add(treeItem.id);\n      else\n        treeItem.children.forEach(visit);\n    };\n    visit(this.rootItem);\n    return [...result];\n  }\n\n  flatTreeItems(): TreeItem[] {\n    const result: TreeItem[] = [];\n    const visit = (treeItem: TreeItem) => {\n      result.push(treeItem);\n      treeItem.children.forEach(visit);\n    };\n    visit(this.rootItem);\n    return result;\n  }\n\n  treeItemById(id: string): TreeItem | undefined {\n    return this._treeItemById.get(id);\n  }\n\n  collectTestIds(treeItem?: TreeItem): Set<string> {\n    return treeItem ? collectTestIds(treeItem) : new Set();\n  }\n}\n\nexport function sortAndPropagateStatus(treeItem: TreeItem) {\n  for (const child of treeItem.children)\n    sortAndPropagateStatus(child);\n\n  if (treeItem.kind === 'group') {\n    treeItem.children.sort((a, b) => {\n      const fc = a.location.file.localeCompare(b.location.file);\n      return fc || a.location.line - b.location.line;\n    });\n  }\n\n  let allPassed = treeItem.children.length > 0;\n  let allSkipped = treeItem.children.length > 0;\n  let hasFailed = false;\n  let hasRunning = false;\n  let hasScheduled = false;\n\n  for (const child of treeItem.children) {\n    allSkipped = allSkipped && child.status === 'skipped';\n    allPassed = allPassed && (child.status === 'passed' || child.status === 'skipped');\n    hasFailed = hasFailed || child.status === 'failed';\n    hasRunning = hasRunning || child.status === 'running';\n    hasScheduled = hasScheduled || child.status === 'scheduled';\n  }\n\n  if (hasRunning)\n    treeItem.status = 'running';\n  else if (hasScheduled)\n    treeItem.status = 'scheduled';\n  else if (hasFailed)\n    treeItem.status = 'failed';\n  else if (allSkipped)\n    treeItem.status = 'skipped';\n  else if (allPassed)\n    treeItem.status = 'passed';\n}\n\nexport function collectTestIds(treeItem: TreeItem): Set<string> {\n  const testIds = new Set<string>();\n  const visit = (treeItem: TreeItem) => {\n    if (treeItem.kind === 'case')\n      treeItem.tests.map(t => t.id).forEach(id => testIds.add(id));\n    else if (treeItem.kind === 'test')\n      testIds.add(treeItem.id);\n    else\n      treeItem.children?.forEach(visit);\n  };\n  visit(treeItem);\n  return testIds;\n}\n\nexport const statusEx = Symbol('statusEx');\n"],
  "mappings": "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",
  "names": ["treeItem"]
}
