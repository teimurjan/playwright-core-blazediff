{
  "version": 3,
  "sources": ["../../src/isomorphic/teleReceiver.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Metadata, TestAnnotation } from '../../types/test';\nimport type * as reporterTypes from '../../types/testReporter';\nimport type { ReporterV2 } from '../reporters/reporterV2';\n\nexport type StringIntern = (s: string) => string;\nexport type JsonLocation = reporterTypes.Location;\nexport type JsonError = string;\nexport type JsonStackFrame = { file: string, line: number, column: number };\n\nexport type JsonStdIOType = 'stdout' | 'stderr';\n\nexport type JsonConfig = Pick<reporterTypes.FullConfig, 'configFile' | 'globalTimeout' | 'maxFailures' | 'metadata' | 'rootDir' | 'version' | 'workers' | 'globalSetup' | 'globalTeardown'>;\n\nexport type JsonPattern = {\n  s?: string;\n  r?: { source: string, flags: string };\n};\n\nexport type JsonProject = {\n  grep: JsonPattern[];\n  grepInvert: JsonPattern[];\n  metadata: Metadata;\n  name: string;\n  dependencies: string[];\n  // This is relative to root dir.\n  snapshotDir: string;\n  // This is relative to root dir.\n  outputDir: string;\n  repeatEach: number;\n  retries: number;\n  suites: JsonSuite[];\n  teardown?: string;\n  // This is relative to root dir.\n  testDir: string;\n  testIgnore: JsonPattern[];\n  testMatch: JsonPattern[];\n  timeout: number;\n  use: { [key: string]: any };\n};\n\nexport type JsonSuite = {\n  title: string;\n  location?: JsonLocation;\n  entries: (JsonSuite | JsonTestCase)[];\n};\n\nexport type JsonTestCase = {\n  testId: string;\n  title: string;\n  location: JsonLocation;\n  retries: number;\n  tags?: string[];\n  repeatEachIndex: number;\n  annotations?: TestAnnotation[];\n};\n\nexport type JsonTestEnd = {\n  testId: string;\n  expectedStatus: reporterTypes.TestStatus;\n  timeout: number;\n  // Dropped in 1.52. Kept as empty array for backwards compatibility.\n  annotations: [];\n};\n\nexport type JsonTestResultStart = {\n  id: string;\n  retry: number;\n  workerIndex: number;\n  parallelIndex: number;\n  startTime: number;\n};\n\nexport type JsonAttachment = Omit<reporterTypes.TestResult['attachments'][0], 'body'> & { base64?: string; };\n\nexport type JsonTestResultEnd = {\n  id: string;\n  duration: number;\n  status: reporterTypes.TestStatus;\n  errors: reporterTypes.TestError[];\n  /** No longer emitted, but kept for backwards compatibility */\n  attachments?: JsonAttachment[];\n  annotations?: TestAnnotation[];\n};\n\nexport type JsonTestStepStart = {\n  id: string;\n  parentStepId?: string;\n  title: string;\n  category: string,\n  startTime: number;\n  location?: reporterTypes.Location;\n};\n\nexport type JsonTestStepEnd = {\n  id: string;\n  duration: number;\n  error?: reporterTypes.TestError;\n  attachments?: number[]; // index of JsonTestResultEnd.attachments\n  annotations?: TestAnnotation[];\n};\n\nexport type JsonTestResultOnAttach = {\n  testId: string;\n  resultId: string;\n  attachments: JsonAttachment[];\n};\n\nexport type JsonFullResult = {\n  status: reporterTypes.FullResult['status'];\n  startTime: number;\n  duration: number;\n};\n\nexport type JsonEvent = JsonOnConfigureEvent | JsonOnBlobReportMetadataEvent | JsonOnEndEvent | JsonOnExitEvent | JsonOnProjectEvent | JsonOnBeginEvent | JsonOnTestBeginEvent\n  | JsonOnTestEndEvent | JsonOnStepBeginEvent | JsonOnStepEndEvent | JsonOnAttachEvent | JsonOnErrorEvent | JsonOnStdIOEvent;\n\nexport type JsonOnConfigureEvent = {\n  method: 'onConfigure';\n  params: {\n    config: JsonConfig;\n  };\n};\n\nexport type JsonOnBlobReportMetadataEvent = {\n  method: 'onBlobReportMetadata';\n  params: BlobReportMetadata;\n};\n\nexport type JsonOnProjectEvent = {\n  method: 'onProject';\n  params: {\n    project: JsonProject;\n  };\n};\n\nexport type JsonOnBeginEvent = {\n  method: 'onBegin';\n  params: undefined;\n};\n\nexport type JsonOnTestBeginEvent = {\n  method: 'onTestBegin';\n  params: {\n    testId: string;\n    result: JsonTestResultStart;\n  };\n};\n\nexport type JsonOnTestEndEvent = {\n  method: 'onTestEnd';\n  params: {\n    test: JsonTestEnd;\n    testId?: string;\n    result: JsonTestResultEnd;\n  };\n};\n\nexport type JsonOnStepBeginEvent = {\n  method: 'onStepBegin';\n  params: {\n    testId: string;\n    resultId: string;\n    step: JsonTestStepStart;\n  };\n};\n\nexport type JsonOnStepEndEvent = {\n  method: 'onStepEnd';\n  params: {\n    testId: string;\n    resultId: string;\n    step: JsonTestStepEnd;\n  };\n};\n\nexport type JsonOnAttachEvent = {\n  method: 'onAttach';\n  params: JsonTestResultOnAttach;\n};\n\nexport type JsonOnErrorEvent = {\n  method: 'onError';\n  params: {\n    error: reporterTypes.TestError;\n  };\n};\n\nexport type JsonOnStdIOEvent = {\n  method: 'onStdIO';\n  params: {\n    type: JsonStdIOType;\n    testId?: string;\n    resultId?: string;\n    data: string;\n    isBase64: boolean;\n  };\n};\n\nexport type JsonOnEndEvent = {\n  method: 'onEnd';\n  params: {\n    result: JsonFullResult;\n  };\n};\n\nexport type JsonOnExitEvent = {\n  method: 'onExit';\n  params: undefined;\n};\n\nexport type BlobReportMetadata = {\n  version: number;\n  userAgent: string;\n  name?: string;\n  shard?: { total: number, current: number };\n  pathSeparator?: string;\n};\n\ntype TeleReporterReceiverOptions = {\n  mergeProjects?: boolean;\n  mergeTestCases?: boolean;\n  resolvePath?: (rootDir: string, relativePath: string) => string;\n  configOverrides?: Pick<reporterTypes.FullConfig, 'configFile' | 'quiet' | 'reportSlowTests' | 'reporter'>;\n  clearPreviousResultsWhenTestBegins?: boolean;\n};\n\nexport class TeleReporterReceiver {\n  public isListing = false;\n  private _rootSuite: TeleSuite;\n  private _options: TeleReporterReceiverOptions;\n  private _reporter: ReporterV2;\n  private _tests = new Map<string, TeleTestCase>();\n  private _rootDir!: string;\n  private _config!: reporterTypes.FullConfig;\n\n  constructor(reporter: ReporterV2, options: TeleReporterReceiverOptions = {}) {\n    this._rootSuite = new TeleSuite('', 'root');\n    this._options = options;\n    this._reporter = reporter;\n  }\n\n  reset() {\n    this._rootSuite._entries = [];\n    this._tests.clear();\n  }\n\n  dispatch(message: JsonEvent): Promise<void> | void {\n    const { method, params } = message;\n    if (method === 'onConfigure') {\n      this._onConfigure(params.config);\n      return;\n    }\n    if (method === 'onProject') {\n      this._onProject(params.project);\n      return;\n    }\n    if (method === 'onBegin') {\n      this._onBegin();\n      return;\n    }\n    if (method === 'onTestBegin') {\n      this._onTestBegin(params.testId, params.result);\n      return;\n    }\n    if (method === 'onTestEnd') {\n      this._onTestEnd(params.test, params.result);\n      return;\n    }\n    if (method === 'onStepBegin') {\n      this._onStepBegin(params.testId, params.resultId, params.step);\n      return;\n    }\n    if (method === 'onAttach') {\n      this._onAttach(params.testId, params.resultId, params.attachments);\n      return;\n    }\n    if (method === 'onStepEnd') {\n      this._onStepEnd(params.testId, params.resultId, params.step);\n      return;\n    }\n    if (method === 'onError') {\n      this._onError(params.error);\n      return;\n    }\n    if (method === 'onStdIO') {\n      this._onStdIO(params.type, params.testId, params.resultId, params.data, params.isBase64);\n      return;\n    }\n    if (method === 'onEnd')\n      return this._onEnd(params.result);\n    if (method === 'onExit')\n      return this._onExit();\n  }\n\n  private _onConfigure(config: JsonConfig) {\n    this._rootDir = config.rootDir;\n    this._config = this._parseConfig(config);\n    this._reporter.onConfigure?.(this._config);\n  }\n\n  private _onProject(project: JsonProject) {\n    let projectSuite = this._options.mergeProjects ? this._rootSuite.suites.find(suite => suite.project()!.name === project.name) : undefined;\n    if (!projectSuite) {\n      projectSuite = new TeleSuite(project.name, 'project');\n      this._rootSuite._addSuite(projectSuite);\n    }\n    // Always update project in watch mode.\n    projectSuite._project = this._parseProject(project);\n    for (const suite of project.suites)\n      this._mergeSuiteInto(suite, projectSuite);\n  }\n\n  private _onBegin() {\n    this._reporter.onBegin?.(this._rootSuite);\n  }\n\n  private _onTestBegin(testId: string, payload: JsonTestResultStart) {\n    const test = this._tests.get(testId)!;\n    if (this._options.clearPreviousResultsWhenTestBegins)\n      test.results = [];\n    const testResult = test._createTestResult(payload.id);\n    testResult.retry = payload.retry;\n    testResult.workerIndex = payload.workerIndex;\n    testResult.parallelIndex = payload.parallelIndex;\n    testResult.setStartTimeNumber(payload.startTime);\n    this._reporter.onTestBegin?.(test, testResult);\n  }\n\n  private _onTestEnd(testEndPayload: JsonTestEnd, payload: JsonTestResultEnd) {\n    const test = this._tests.get(testEndPayload.testId)!;\n    test.timeout = testEndPayload.timeout;\n    test.expectedStatus = testEndPayload.expectedStatus;\n    const result = test.results.find(r => r._id === payload.id)!;\n    result.duration = payload.duration;\n    result.status = payload.status;\n    result.errors = payload.errors;\n    result.error = result.errors?.[0];\n    // Attachments are only present here from legacy blobs. These override all _onAttach events\n    if (!!payload.attachments)\n      result.attachments = this._parseAttachments(payload.attachments);\n    if (payload.annotations) {\n      this._absoluteAnnotationLocationsInplace(payload.annotations);\n      result.annotations = payload.annotations;\n      test.annotations = payload.annotations;\n    }\n    this._reporter.onTestEnd?.(test, result);\n    // Free up the memory as won't see these step ids.\n    result._stepMap = new Map();\n  }\n\n  private _onStepBegin(testId: string, resultId: string, payload: JsonTestStepStart) {\n    const test = this._tests.get(testId)!;\n    const result = test.results.find(r => r._id === resultId)!;\n    const parentStep = payload.parentStepId ? result._stepMap.get(payload.parentStepId) : undefined;\n\n    const location = this._absoluteLocation(payload.location);\n    const step = new TeleTestStep(payload, parentStep, location, result);\n    if (parentStep)\n      parentStep.steps.push(step);\n    else\n      result.steps.push(step);\n    result._stepMap.set(payload.id, step);\n    this._reporter.onStepBegin?.(test, result, step);\n  }\n\n  private _onStepEnd(testId: string, resultId: string, payload: JsonTestStepEnd) {\n    const test = this._tests.get(testId)!;\n    const result = test.results.find(r => r._id === resultId)!;\n    const step = result._stepMap.get(payload.id)!;\n    step._endPayload = payload;\n    step.duration = payload.duration;\n    step.error = payload.error;\n    this._reporter.onStepEnd?.(test, result, step);\n  }\n\n  private _onAttach(testId: string, resultId: string, attachments: JsonAttachment[]) {\n    const test = this._tests.get(testId)!;\n    const result = test.results.find(r => r._id === resultId)!;\n    result.attachments.push(...attachments.map(a => ({\n      name: a.name,\n      contentType: a.contentType,\n      path: a.path,\n      body: a.base64 && (globalThis as any).Buffer ? Buffer.from(a.base64, 'base64') : undefined,\n    })));\n  }\n\n  private _onError(error: reporterTypes.TestError) {\n    this._reporter.onError?.(error);\n  }\n\n  private _onStdIO(type: JsonStdIOType, testId: string | undefined, resultId: string | undefined, data: string, isBase64: boolean) {\n    const chunk = isBase64 ? ((globalThis as any).Buffer ? Buffer.from(data, 'base64') : atob(data)) : data;\n    const test = testId ? this._tests.get(testId) : undefined;\n    const result = test && resultId ? test.results.find(r => r._id === resultId) : undefined;\n    if (type === 'stdout') {\n      result?.stdout.push(chunk);\n      this._reporter.onStdOut?.(chunk, test, result);\n    } else {\n      result?.stderr.push(chunk);\n      this._reporter.onStdErr?.(chunk, test, result);\n    }\n  }\n\n  private async _onEnd(result: JsonFullResult): Promise<void> {\n    await this._reporter.onEnd?.({\n      status: result.status,\n      startTime: new Date(result.startTime),\n      duration: result.duration,\n    });\n  }\n\n  private _onExit(): Promise<void> | void {\n    return this._reporter.onExit?.();\n  }\n\n  private _parseConfig(config: JsonConfig): reporterTypes.FullConfig {\n    const result = { ...baseFullConfig, ...config };\n    if (this._options.configOverrides) {\n      result.configFile = this._options.configOverrides.configFile;\n      result.reportSlowTests = this._options.configOverrides.reportSlowTests;\n      result.quiet = this._options.configOverrides.quiet;\n      result.reporter = [...this._options.configOverrides.reporter];\n    }\n    return result;\n  }\n\n  private _parseProject(project: JsonProject): TeleFullProject {\n    return {\n      metadata: project.metadata,\n      name: project.name,\n      outputDir: this._absolutePath(project.outputDir),\n      repeatEach: project.repeatEach,\n      retries: project.retries,\n      testDir: this._absolutePath(project.testDir),\n      testIgnore: parseRegexPatterns(project.testIgnore),\n      testMatch: parseRegexPatterns(project.testMatch),\n      timeout: project.timeout,\n      grep: parseRegexPatterns(project.grep) as RegExp[],\n      grepInvert: parseRegexPatterns(project.grepInvert) as RegExp[],\n      dependencies: project.dependencies,\n      teardown: project.teardown,\n      snapshotDir: this._absolutePath(project.snapshotDir),\n      use: project.use,\n    };\n  }\n\n  private _parseAttachments(attachments: JsonAttachment[]): reporterTypes.TestResult['attachments'] {\n    return attachments.map(a => {\n      return {\n        ...a,\n        body: a.base64 && (globalThis as any).Buffer ? Buffer.from(a.base64, 'base64') : undefined,\n      };\n    });\n  }\n\n  private _mergeSuiteInto(jsonSuite: JsonSuite, parent: TeleSuite): void {\n    let targetSuite = parent.suites.find(s => s.title === jsonSuite.title);\n    if (!targetSuite) {\n      targetSuite = new TeleSuite(jsonSuite.title, parent.type === 'project' ? 'file' : 'describe');\n      parent._addSuite(targetSuite);\n    }\n    targetSuite.location = this._absoluteLocation(jsonSuite.location);\n    jsonSuite.entries.forEach(e => {\n      if ('testId' in e)\n        this._mergeTestInto(e, targetSuite!);\n      else\n        this._mergeSuiteInto(e, targetSuite!);\n    });\n  }\n\n  private _mergeTestInto(jsonTest: JsonTestCase, parent: TeleSuite) {\n    let targetTest = this._options.mergeTestCases ? parent.tests.find(s => s.title === jsonTest.title && s.repeatEachIndex === jsonTest.repeatEachIndex) : undefined;\n    if (!targetTest) {\n      targetTest = new TeleTestCase(jsonTest.testId, jsonTest.title, this._absoluteLocation(jsonTest.location), jsonTest.repeatEachIndex);\n      parent._addTest(targetTest);\n      this._tests.set(targetTest.id, targetTest);\n    }\n    this._updateTest(jsonTest, targetTest);\n  }\n\n  private _updateTest(payload: JsonTestCase, test: TeleTestCase): TeleTestCase {\n    test.id = payload.testId;\n    test.location = this._absoluteLocation(payload.location);\n    test.retries = payload.retries;\n    test.tags = payload.tags ?? [];\n    test.annotations = payload.annotations ?? [];\n    this._absoluteAnnotationLocationsInplace(test.annotations);\n    return test;\n  }\n\n  private _absoluteAnnotationLocationsInplace(annotations: TestAnnotation[]) {\n    for (const annotation of annotations) {\n      if (annotation.location)\n        annotation.location = this._absoluteLocation(annotation.location);\n    }\n  }\n\n  private _absoluteLocation(location: reporterTypes.Location): reporterTypes.Location;\n  private _absoluteLocation(location?: reporterTypes.Location): reporterTypes.Location | undefined;\n  private _absoluteLocation(location: reporterTypes.Location | undefined): reporterTypes.Location | undefined {\n    if (!location)\n      return location;\n    return {\n      ...location,\n      file: this._absolutePath(location.file),\n    };\n  }\n\n  private _absolutePath(relativePath: string): string;\n  private _absolutePath(relativePath?: string): string | undefined;\n  private _absolutePath(relativePath?: string): string | undefined {\n    if (relativePath === undefined)\n      return;\n    return this._options.resolvePath ? this._options.resolvePath(this._rootDir, relativePath) : this._rootDir + '/' + relativePath;\n  }\n}\n\nexport class TeleSuite implements reporterTypes.Suite {\n  title: string;\n  location?: reporterTypes.Location;\n  parent?: TeleSuite;\n  _entries: (TeleSuite | TeleTestCase)[] = [];\n  _requireFile: string = '';\n  _timeout: number | undefined;\n  _retries: number | undefined;\n  _project: TeleFullProject | undefined;\n  _parallelMode: 'none' | 'default' | 'serial' | 'parallel' = 'none';\n  private readonly _type: 'root' | 'project' | 'file' | 'describe';\n\n  constructor(title: string, type: 'root' | 'project' | 'file' | 'describe') {\n    this.title = title;\n    this._type = type;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get suites(): TeleSuite[] {\n    return this._entries.filter(e => e.type !== 'test') as TeleSuite[];\n  }\n\n  get tests(): TeleTestCase[] {\n    return this._entries.filter(e => e.type === 'test') as TeleTestCase[];\n  }\n\n  entries() {\n    return this._entries;\n  }\n\n  allTests(): reporterTypes.TestCase[] {\n    const result: reporterTypes.TestCase[] = [];\n    const visit = (suite: reporterTypes.Suite) => {\n      for (const entry of suite.entries()) {\n        if (entry.type === 'test')\n          result.push(entry);\n        else\n          visit(entry);\n      }\n    };\n    visit(this);\n    return result;\n  }\n\n  titlePath(): string[] {\n    const titlePath = this.parent ? this.parent.titlePath() : [];\n    // Ignore anonymous describe blocks.\n    if (this.title || this._type !== 'describe')\n      titlePath.push(this.title);\n    return titlePath;\n  }\n\n  project(): TeleFullProject | undefined {\n    return this._project ?? this.parent?.project();\n  }\n\n  _addTest(test: TeleTestCase) {\n    test.parent = this;\n    this._entries.push(test);\n  }\n\n  _addSuite(suite: TeleSuite) {\n    suite.parent = this;\n    this._entries.push(suite);\n  }\n}\n\nexport class TeleTestCase implements reporterTypes.TestCase {\n  title: string;\n  fn = () => {};\n  results: TeleTestResult[] = [];\n  location: reporterTypes.Location;\n  parent!: TeleSuite;\n  type: 'test' = 'test';\n\n  expectedStatus: reporterTypes.TestStatus = 'passed';\n  timeout = 0;\n  annotations: TestAnnotation[] = [];\n  retries = 0;\n  tags: string[] = [];\n  repeatEachIndex = 0;\n  id: string;\n\n  constructor(id: string, title: string, location: reporterTypes.Location, repeatEachIndex: number) {\n    this.id = id;\n    this.title = title;\n    this.location = location;\n    this.repeatEachIndex = repeatEachIndex;\n  }\n\n  titlePath(): string[] {\n    const titlePath = this.parent ? this.parent.titlePath() : [];\n    titlePath.push(this.title);\n    return titlePath;\n  }\n\n  outcome(): 'skipped' | 'expected' | 'unexpected' | 'flaky' {\n    return computeTestCaseOutcome(this);\n  }\n\n  ok(): boolean {\n    const status = this.outcome();\n    return status === 'expected' || status === 'flaky' || status === 'skipped';\n  }\n\n  _createTestResult(id: string): TeleTestResult {\n    const result = new TeleTestResult(this.results.length, id);\n    this.results.push(result);\n    return result;\n  }\n}\n\nclass TeleTestStep implements reporterTypes.TestStep {\n  title: string;\n  category: string;\n  location: reporterTypes.Location | undefined;\n  parent: reporterTypes.TestStep | undefined;\n  duration: number = -1;\n  steps: reporterTypes.TestStep[] = [];\n  error: reporterTypes.TestError | undefined;\n\n  private _result: TeleTestResult;\n  _endPayload?: JsonTestStepEnd;\n\n  private _startTime: number = 0;\n\n  constructor(payload: JsonTestStepStart, parentStep: reporterTypes.TestStep | undefined, location: reporterTypes.Location | undefined, result: TeleTestResult) {\n    this.title = payload.title;\n    this.category = payload.category;\n    this.location = location;\n    this.parent = parentStep;\n    this._startTime = payload.startTime;\n    this._result = result;\n  }\n\n  titlePath() {\n    const parentPath = this.parent?.titlePath() || [];\n    return [...parentPath, this.title];\n  }\n\n  get startTime(): Date {\n    return new Date(this._startTime);\n  }\n\n  set startTime(value: Date) {\n    this._startTime = +value;\n  }\n\n  get attachments() {\n    return this._endPayload?.attachments?.map(index => this._result.attachments[index]) ?? [];\n  }\n\n  get annotations() {\n    return this._endPayload?.annotations ?? [];\n  }\n}\n\nexport class TeleTestResult implements reporterTypes.TestResult {\n  retry: reporterTypes.TestResult['retry'];\n  parallelIndex: reporterTypes.TestResult['parallelIndex'] = -1;\n  workerIndex: reporterTypes.TestResult['workerIndex'] = -1;\n  duration: reporterTypes.TestResult['duration'] = -1;\n  stdout: reporterTypes.TestResult['stdout'] = [];\n  stderr: reporterTypes.TestResult['stderr'] = [];\n  attachments: reporterTypes.TestResult['attachments'] = [];\n  annotations: reporterTypes.TestResult['annotations'] = [];\n  status: reporterTypes.TestStatus = 'skipped';\n  steps: TeleTestStep[] = [];\n  errors: reporterTypes.TestResult['errors'] = [];\n  error: reporterTypes.TestResult['error'];\n\n  _stepMap = new Map<string, TeleTestStep>();\n  _id: string;\n\n  private _startTime: number = 0;\n\n  constructor(retry: number, id: string) {\n    this.retry = retry;\n    this._id = id;\n  }\n\n  setStartTimeNumber(startTime: number) {\n    this._startTime = startTime;\n  }\n\n  get startTime(): Date {\n    return new Date(this._startTime);\n  }\n\n  set startTime(value: Date) {\n    this._startTime = +value;\n  }\n}\n\nexport type TeleFullProject = reporterTypes.FullProject;\n\nexport const baseFullConfig: reporterTypes.FullConfig = {\n  forbidOnly: false,\n  fullyParallel: false,\n  globalSetup: null,\n  globalTeardown: null,\n  globalTimeout: 0,\n  grep: /.*/,\n  grepInvert: null,\n  maxFailures: 0,\n  metadata: {},\n  preserveOutput: 'always',\n  projects: [],\n  reporter: [[process.env.CI ? 'dot' : 'list']],\n  reportSlowTests: { max: 5, threshold: 300_000 /* 5 minutes */ },\n  configFile: '',\n  rootDir: '',\n  quiet: false,\n  shard: null,\n  updateSnapshots: 'missing',\n  updateSourceMethod: 'patch',\n  version: '',\n  workers: 0,\n  webServer: null,\n};\n\nexport function serializeRegexPatterns(patterns: string | RegExp | (string | RegExp)[]): JsonPattern[] {\n  if (!Array.isArray(patterns))\n    patterns = [patterns];\n  return patterns.map(s => {\n    if (typeof s === 'string')\n      return { s };\n    return { r: { source: s.source, flags: s.flags } };\n  });\n}\n\nexport function parseRegexPatterns(patterns: JsonPattern[]): (string | RegExp)[] {\n  return patterns.map(p => {\n    if (p.s !== undefined)\n      return p.s;\n    return new RegExp(p.r!.source, p.r!.flags);\n  });\n}\n\nexport function computeTestCaseOutcome(test: reporterTypes.TestCase) {\n  let skipped = 0;\n  let didNotRun = 0;\n  let expected = 0;\n  let interrupted = 0;\n  let unexpected = 0;\n  for (const result of test.results) {\n    if (result.status === 'interrupted') {\n      ++interrupted; // eslint-disable-line @typescript-eslint/no-unused-vars\n    } else if (result.status === 'skipped' && test.expectedStatus === 'skipped') {\n      // Only tests \"expected to be skipped\" are skipped. These were specifically\n      // marked with test.skip or test.fixme.\n      ++skipped;\n    } else if (result.status === 'skipped') {\n      // Tests that were expected to run, but were skipped are \"did not run\".\n      // This happens when:\n      // - testing finished early;\n      // - test failure prevented other tests in the serial suite to run;\n      // - probably more cases!\n      ++didNotRun; // eslint-disable-line @typescript-eslint/no-unused-vars\n    } else if (result.status === test.expectedStatus) {\n      // Either passed and expected to pass, or failed and expected to fail.\n      ++expected;\n    } else {\n      ++unexpected;\n    }\n  }\n\n  // Tests that were \"skipped as expected\" are considered equal to \"expected\" below,\n  // because that's the expected outcome.\n  //\n  // However, we specifically differentiate the case of \"only skipped\"\n  // and show it as \"skipped\" in all reporters.\n  //\n  // More exotic cases like \"failed on first run and skipped on retry\" are flaky.\n  if (expected === 0 && unexpected === 0)\n    return 'skipped';  // all results were skipped or interrupted\n  if (unexpected === 0)\n    return 'expected';  // no failures, just expected+skipped\n  if (expected === 0 && skipped === 0)\n    return 'unexpected';  // only failures\n  return 'flaky';  // expected+unexpected or skipped+unexpected\n}\n"],
  "mappings": "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",
  "names": []
}
