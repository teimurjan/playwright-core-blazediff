{
  "version": 3,
  "sources": ["../../src/isomorphic/events.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport namespace Disposable {\n  export function disposeAll(disposables: Disposable[]): void {\n    for (const disposable of disposables.splice(0))\n      disposable.dispose();\n  }\n}\n\nexport type Disposable = {\n  dispose(): void;\n};\n\nexport interface Event<T> {\n  (listener: (e: T) => any, disposables?: Disposable[]): Disposable;\n}\n\nexport class EventEmitter<T> {\n  public event: Event<T>;\n\n  private _deliveryQueue?: {listener: (e: T) => void, event: T}[];\n  private _listeners = new Set<(e: T) => void>();\n\n  constructor() {\n    this.event = (listener: (e: T) => any, disposables?: Disposable[]) => {\n      this._listeners.add(listener);\n      let disposed = false;\n      const self = this;\n      const result: Disposable = {\n        dispose() {\n          if (!disposed) {\n            disposed = true;\n            self._listeners.delete(listener);\n          }\n        }\n      };\n      if (disposables)\n        disposables.push(result);\n      return result;\n    };\n  }\n\n  fire(event: T): void {\n    const dispatch = !this._deliveryQueue;\n    if (!this._deliveryQueue)\n      this._deliveryQueue = [];\n    for (const listener of this._listeners)\n      this._deliveryQueue.push({ listener, event });\n    if (!dispatch)\n      return;\n    for (let index = 0; index < this._deliveryQueue.length; index++) {\n      const { listener, event } = this._deliveryQueue[index];\n      listener.call(null, event);\n    }\n    this._deliveryQueue = undefined;\n  }\n\n  dispose() {\n    this._listeners.clear();\n    if (this._deliveryQueue)\n      this._deliveryQueue = [];\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBO,IAAU;AAAA,CAAV,CAAUA,gBAAV;AACE,WAAS,WAAW,aAAiC;AAC1D,eAAW,cAAc,YAAY,OAAO,CAAC;AAC3C,iBAAW,QAAQ;AAAA,EACvB;AAHO,EAAAA,YAAS;AAAA,GADD;AAeV,MAAM,aAAgB;AAAA,EAM3B,cAAc;AAFd,SAAQ,aAAa,oBAAI,IAAoB;AAG3C,SAAK,QAAQ,CAAC,UAAyB,gBAA+B;AACpE,WAAK,WAAW,IAAI,QAAQ;AAC5B,UAAI,WAAW;AACf,YAAM,OAAO;AACb,YAAM,SAAqB;AAAA,QACzB,UAAU;AACR,cAAI,CAAC,UAAU;AACb,uBAAW;AACX,iBAAK,WAAW,OAAO,QAAQ;AAAA,UACjC;AAAA,QACF;AAAA,MACF;AACA,UAAI;AACF,oBAAY,KAAK,MAAM;AACzB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA,KAAK,OAAgB;AACnB,UAAM,WAAW,CAAC,KAAK;AACvB,QAAI,CAAC,KAAK;AACR,WAAK,iBAAiB,CAAC;AACzB,eAAW,YAAY,KAAK;AAC1B,WAAK,eAAe,KAAK,EAAE,UAAU,MAAM,CAAC;AAC9C,QAAI,CAAC;AACH;AACF,aAAS,QAAQ,GAAG,QAAQ,KAAK,eAAe,QAAQ,SAAS;AAC/D,YAAM,EAAE,UAAU,OAAAC,OAAM,IAAI,KAAK,eAAe,KAAK;AACrD,eAAS,KAAK,MAAMA,MAAK;AAAA,IAC3B;AACA,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEA,UAAU;AACR,SAAK,WAAW,MAAM;AACtB,QAAI,KAAK;AACP,WAAK,iBAAiB,CAAC;AAAA,EAC3B;AACF;",
  "names": ["Disposable", "event"]
}
