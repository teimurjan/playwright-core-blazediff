{
  "version": 3,
  "sources": ["../../src/runner/vcs.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport childProcess from 'child_process';\nimport path from 'path';\n\nimport { affectedTestFiles } from '../transform/compilationCache';\n\nexport async function detectChangedTestFiles(baseCommit: string, configDir: string): Promise<Set<string>> {\n  function gitFileList(command: string) {\n    try {\n      return childProcess.execSync(\n          `git ${command}`,\n          { encoding: 'utf-8', stdio: 'pipe', cwd: configDir }\n      ).split('\\n').filter(Boolean);\n    } catch (_error) {\n      const error = _error as childProcess.SpawnSyncReturns<string>;\n\n      const unknownRevision = error.output.some(line => line?.includes('unknown revision'));\n      if (unknownRevision) {\n        const isShallowClone = childProcess.execSync('git rev-parse --is-shallow-repository', { encoding: 'utf-8',  stdio: 'pipe', cwd: configDir }).trim() === 'true';\n        if (isShallowClone) {\n          throw new Error([\n            `The repository is a shallow clone and does not have '${baseCommit}' available locally.`,\n            `Note that GitHub Actions checkout is shallow by default: https://github.com/actions/checkout`\n          ].join('\\n'));\n        }\n      }\n\n      throw new Error([\n        `Cannot detect changed files for --only-changed mode:`,\n        `git ${command}`,\n        '',\n        ...error.output,\n      ].join('\\n'));\n    }\n  }\n\n  const untrackedFiles = gitFileList(`ls-files --others --exclude-standard`).map(file => path.join(configDir, file));\n\n  const [gitRoot] = gitFileList('rev-parse --show-toplevel');\n  const trackedFilesWithChanges = gitFileList(`diff ${baseCommit} --name-only`).map(file => path.join(gitRoot, file));\n\n  return new Set(affectedTestFiles([...untrackedFiles, ...trackedFilesWithChanges]));\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,2BAAyB;AACzB,kBAAiB;AAEjB,8BAAkC;AAElC,eAAsB,uBAAuB,YAAoB,WAAyC;AACxG,WAAS,YAAY,SAAiB;AACpC,QAAI;AACF,aAAO,qBAAAA,QAAa;AAAA,QAChB,OAAO,OAAO;AAAA,QACd,EAAE,UAAU,SAAS,OAAO,QAAQ,KAAK,UAAU;AAAA,MACvD,EAAE,MAAM,IAAI,EAAE,OAAO,OAAO;AAAA,IAC9B,SAAS,QAAQ;AACf,YAAM,QAAQ;AAEd,YAAM,kBAAkB,MAAM,OAAO,KAAK,UAAQ,MAAM,SAAS,kBAAkB,CAAC;AACpF,UAAI,iBAAiB;AACnB,cAAM,iBAAiB,qBAAAA,QAAa,SAAS,yCAAyC,EAAE,UAAU,SAAU,OAAO,QAAQ,KAAK,UAAU,CAAC,EAAE,KAAK,MAAM;AACxJ,YAAI,gBAAgB;AAClB,gBAAM,IAAI,MAAM;AAAA,YACd,wDAAwD,UAAU;AAAA,YAClE;AAAA,UACF,EAAE,KAAK,IAAI,CAAC;AAAA,QACd;AAAA,MACF;AAEA,YAAM,IAAI,MAAM;AAAA,QACd;AAAA,QACA,OAAO,OAAO;AAAA,QACd;AAAA,QACA,GAAG,MAAM;AAAA,MACX,EAAE,KAAK,IAAI,CAAC;AAAA,IACd;AAAA,EACF;AAEA,QAAM,iBAAiB,YAAY,sCAAsC,EAAE,IAAI,UAAQ,YAAAC,QAAK,KAAK,WAAW,IAAI,CAAC;AAEjH,QAAM,CAAC,OAAO,IAAI,YAAY,2BAA2B;AACzD,QAAM,0BAA0B,YAAY,QAAQ,UAAU,cAAc,EAAE,IAAI,UAAQ,YAAAA,QAAK,KAAK,SAAS,IAAI,CAAC;AAElH,SAAO,IAAI,QAAI,2CAAkB,CAAC,GAAG,gBAAgB,GAAG,uBAAuB,CAAC,CAAC;AACnF;",
  "names": ["childProcess", "path"]
}
