{
  "version": 3,
  "sources": ["../../src/runner/failureTracker.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { TestResult } from '../../types/testReporter';\nimport type { FullConfigInternal } from '../common/config';\nimport type { Suite, TestCase } from '../common/test';\n\nexport class FailureTracker {\n  private _failureCount = 0;\n  private _hasWorkerErrors = false;\n  private _rootSuite: Suite | undefined;\n\n  constructor(private _config: FullConfigInternal) {\n  }\n\n  onRootSuite(rootSuite: Suite) {\n    this._rootSuite = rootSuite;\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    // Test is considered failing after the last retry.\n    if (test.outcome() === 'unexpected' && test.results.length > test.retries)\n      ++this._failureCount;\n  }\n\n  onWorkerError() {\n    this._hasWorkerErrors = true;\n  }\n\n  hasReachedMaxFailures() {\n    return this.maxFailures() > 0 && this._failureCount >= this.maxFailures();\n  }\n\n  hasWorkerErrors() {\n    return this._hasWorkerErrors;\n  }\n\n  result(): 'failed' | 'passed' {\n    return this._hasWorkerErrors || this.hasReachedMaxFailures() || this.hasFailedTests() || (this._config.failOnFlakyTests && this.hasFlakyTests()) ? 'failed' : 'passed';\n  }\n\n  hasFailedTests() {\n    return this._rootSuite?.allTests().some(test => !test.ok());\n  }\n\n  hasFlakyTests() {\n    return this._rootSuite?.allTests().some(test => (test.outcome() === 'flaky'));\n  }\n\n  maxFailures() {\n    return this._config.config.maxFailures;\n  }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBO,MAAM,eAAe;AAAA,EAK1B,YAAoB,SAA6B;AAA7B;AAJpB,SAAQ,gBAAgB;AACxB,SAAQ,mBAAmB;AAAA,EAI3B;AAAA,EAEA,YAAY,WAAkB;AAC5B,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,UAAU,MAAgB,QAAoB;AAE5C,QAAI,KAAK,QAAQ,MAAM,gBAAgB,KAAK,QAAQ,SAAS,KAAK;AAChE,QAAE,KAAK;AAAA,EACX;AAAA,EAEA,gBAAgB;AACd,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EAEA,wBAAwB;AACtB,WAAO,KAAK,YAAY,IAAI,KAAK,KAAK,iBAAiB,KAAK,YAAY;AAAA,EAC1E;AAAA,EAEA,kBAAkB;AAChB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,SAA8B;AAC5B,WAAO,KAAK,oBAAoB,KAAK,sBAAsB,KAAK,KAAK,eAAe,KAAM,KAAK,QAAQ,oBAAoB,KAAK,cAAc,IAAK,WAAW;AAAA,EAChK;AAAA,EAEA,iBAAiB;AACf,WAAO,KAAK,YAAY,SAAS,EAAE,KAAK,UAAQ,CAAC,KAAK,GAAG,CAAC;AAAA,EAC5D;AAAA,EAEA,gBAAgB;AACd,WAAO,KAAK,YAAY,SAAS,EAAE,KAAK,UAAS,KAAK,QAAQ,MAAM,OAAQ;AAAA,EAC9E;AAAA,EAEA,cAAc;AACZ,WAAO,KAAK,QAAQ,OAAO;AAAA,EAC7B;AAEF;",
  "names": []
}
