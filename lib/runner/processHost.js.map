{
  "version": 3,
  "sources": ["../../src/runner/processHost.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport child_process from 'child_process';\nimport { EventEmitter } from 'events';\n\nimport { assert, timeOrigin } from 'playwright-core/lib/utils';\nimport { debug } from 'playwright-core/lib/utilsBundle';\n\nimport type { EnvProducedPayload, ProcessInitParams } from '../common/ipc';\nimport type { ProtocolResponse } from '../common/process';\n\nexport type ProcessExitData = {\n  unexpectedly: boolean;\n  code: number | null;\n  signal: NodeJS.Signals | null;\n};\n\nexport class ProcessHost extends EventEmitter {\n  private process: child_process.ChildProcess | undefined;\n  private _didSendStop = false;\n  private _processDidExit = false;\n  private _didExitAndRanOnExit = false;\n  private _runnerScript: string;\n  private _lastMessageId = 0;\n  private _callbacks = new Map<number, { resolve: (result: any) => void, reject: (error: Error) => void }>();\n  private _processName: string;\n  private _producedEnv: Record<string, string | undefined> = {};\n  private _extraEnv: Record<string, string | undefined>;\n\n  constructor(runnerScript: string, processName: string, env: Record<string, string | undefined>) {\n    super();\n    this._runnerScript = runnerScript;\n    this._processName = processName;\n    this._extraEnv = env;\n  }\n\n  async startRunner(runnerParams: any, options: { onStdOut?: (chunk: Buffer | string) => void, onStdErr?: (chunk: Buffer | string) => void } = {}): Promise<ProcessExitData | undefined> {\n    assert(!this.process, 'Internal error: starting the same process twice');\n    this.process = child_process.fork(require.resolve('../common/process'), {\n      detached: false,\n      env: {\n        ...process.env,\n        ...this._extraEnv,\n      },\n      stdio: [\n        'ignore',\n        options.onStdOut ? 'pipe' : 'inherit',\n        (options.onStdErr && !process.env.PW_RUNNER_DEBUG) ? 'pipe' : 'inherit',\n        'ipc',\n      ],\n    });\n    this.process.on('exit', async (code, signal) => {\n      this._processDidExit = true;\n      await this.onExit();\n      this._didExitAndRanOnExit = true;\n      this.emit('exit', { unexpectedly: !this._didSendStop, code, signal } as ProcessExitData);\n    });\n    this.process.on('error', e => {});  // do not yell at a send to dead process.\n    this.process.on('message', (message: any) => {\n      if (debug.enabled('pw:test:protocol'))\n        debug('pw:test:protocol')('\u25C0 RECV ' + JSON.stringify(message));\n      if (message.method === '__env_produced__') {\n        const producedEnv: EnvProducedPayload = message.params;\n        this._producedEnv = Object.fromEntries(producedEnv.map(e => [e[0], e[1] ?? undefined]));\n      } else if (message.method === '__dispatch__') {\n        const { id, error, method, params, result } = message.params as ProtocolResponse;\n        if (id && this._callbacks.has(id)) {\n          const { resolve, reject } = this._callbacks.get(id)!;\n          this._callbacks.delete(id);\n          if (error) {\n            const errorObject = new Error(error.message);\n            errorObject.stack = error.stack;\n            reject(errorObject);\n          } else {\n            resolve(result);\n          }\n        } else {\n          this.emit(method!, params);\n        }\n      } else {\n        this.emit(message.method!, message.params);\n      }\n    });\n\n    if (options.onStdOut)\n      this.process.stdout?.on('data', options.onStdOut);\n    if (options.onStdErr)\n      this.process.stderr?.on('data', options.onStdErr);\n\n    const error = await new Promise<ProcessExitData | undefined>(resolve => {\n      this.process!.once('exit', (code, signal) => resolve({ unexpectedly: true, code, signal }));\n      this.once('ready', () => resolve(undefined));\n    });\n\n    if (error)\n      return error;\n\n    const processParams: ProcessInitParams = {\n      processName: this._processName,\n      timeOrigin: timeOrigin(),\n    };\n\n    this.send({\n      method: '__init__', params: {\n        processParams,\n        runnerScript: this._runnerScript,\n        runnerParams\n      }\n    });\n  }\n\n  sendMessage(message: { method: string, params?: any }) {\n    const id = ++this._lastMessageId;\n    this.send({\n      method: '__dispatch__',\n      params: { id, ...message }\n    });\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, { resolve, reject });\n    });\n  }\n\n  protected sendMessageNoReply(message: { method: string, params?: any }) {\n    this.sendMessage(message).catch(() => {});\n  }\n\n  protected async onExit() {\n  }\n\n  async stop() {\n    if (!this._processDidExit && !this._didSendStop) {\n      this.send({ method: '__stop__' });\n      this._didSendStop = true;\n    }\n    if (!this._didExitAndRanOnExit)\n      await new Promise(f => this.once('exit', f));\n  }\n\n  didSendStop() {\n    return this._didSendStop;\n  }\n\n  producedEnv() {\n    return this._producedEnv;\n  }\n\n  private send(message: { method: string, params?: any }) {\n    if (debug.enabled('pw:test:protocol'))\n      debug('pw:test:protocol')('SEND \u25BA ' + JSON.stringify(message));\n    this.process?.send(message);\n  }\n}\n"],
  "mappings": "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",
  "names": ["child_process", "error"]
}
