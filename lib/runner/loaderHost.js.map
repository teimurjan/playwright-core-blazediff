{
  "version": 3,
  "sources": ["../../src/runner/loaderHost.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProcessHost } from './processHost';\nimport { incorporateCompilationCache } from '../common/esmLoaderHost';\nimport { serializeConfig } from '../common/ipc';\nimport { PoolBuilder } from '../common/poolBuilder';\nimport { Suite } from '../common/test';\nimport { loadTestFile } from '../common/testLoader';\nimport { addToCompilationCache } from '../transform/compilationCache';\n\nimport type { TestError } from '../../types/testReporter';\nimport type { FullConfigInternal } from '../common/config';\n\n\nexport class InProcessLoaderHost {\n  private _config: FullConfigInternal;\n  private _poolBuilder: PoolBuilder;\n\n  constructor(config: FullConfigInternal) {\n    this._config = config;\n    this._poolBuilder = PoolBuilder.createForLoader();\n  }\n\n  async start(errors: TestError[]) {\n    return true;\n  }\n\n  async loadTestFile(file: string, testErrors: TestError[]): Promise<Suite> {\n    const result = await loadTestFile(file, this._config.config.rootDir, testErrors);\n    this._poolBuilder.buildPools(result, testErrors);\n    return result;\n  }\n\n  async stop() {\n    await incorporateCompilationCache();\n  }\n}\n\nexport class OutOfProcessLoaderHost {\n  private _config: FullConfigInternal;\n  private _processHost: ProcessHost;\n\n  constructor(config: FullConfigInternal) {\n    this._config = config;\n    this._processHost = new ProcessHost(require.resolve('../loader/loaderMain.js'), 'loader', {});\n  }\n\n  async start(errors: TestError[]) {\n    const startError = await this._processHost.startRunner(serializeConfig(this._config, false));\n    if (startError) {\n      errors.push({\n        message: `Test loader process failed to start with code \"${startError.code}\" and signal \"${startError.signal}\"`,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  async loadTestFile(file: string, testErrors: TestError[]): Promise<Suite> {\n    const result = await this._processHost.sendMessage({ method: 'loadTestFile', params: { file } }) as any;\n    testErrors.push(...result.testErrors);\n    return Suite._deepParse(result.fileSuite);\n  }\n\n  async stop() {\n    const result = await this._processHost.sendMessage({ method: 'getCompilationCacheFromLoader' }) as any;\n    addToCompilationCache(result);\n    await this._processHost.stop();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,yBAA4B;AAC5B,2BAA4C;AAC5C,iBAAgC;AAChC,yBAA4B;AAC5B,kBAAsB;AACtB,wBAA6B;AAC7B,8BAAsC;AAM/B,MAAM,oBAAoB;AAAA,EAI/B,YAAY,QAA4B;AACtC,SAAK,UAAU;AACf,SAAK,eAAe,+BAAY,gBAAgB;AAAA,EAClD;AAAA,EAEA,MAAM,MAAM,QAAqB;AAC/B,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aAAa,MAAc,YAAyC;AACxE,UAAM,SAAS,UAAM,gCAAa,MAAM,KAAK,QAAQ,OAAO,SAAS,UAAU;AAC/E,SAAK,aAAa,WAAW,QAAQ,UAAU;AAC/C,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,OAAO;AACX,cAAM,kDAA4B;AAAA,EACpC;AACF;AAEO,MAAM,uBAAuB;AAAA,EAIlC,YAAY,QAA4B;AACtC,SAAK,UAAU;AACf,SAAK,eAAe,IAAI,+BAAY,gBAAgB,yBAAyB,GAAG,UAAU,CAAC,CAAC;AAAA,EAC9F;AAAA,EAEA,MAAM,MAAM,QAAqB;AAC/B,UAAM,aAAa,MAAM,KAAK,aAAa,gBAAY,4BAAgB,KAAK,SAAS,KAAK,CAAC;AAC3F,QAAI,YAAY;AACd,aAAO,KAAK;AAAA,QACV,SAAS,kDAAkD,WAAW,IAAI,iBAAiB,WAAW,MAAM;AAAA,MAC9G,CAAC;AACD,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aAAa,MAAc,YAAyC;AACxE,UAAM,SAAS,MAAM,KAAK,aAAa,YAAY,EAAE,QAAQ,gBAAgB,QAAQ,EAAE,KAAK,EAAE,CAAC;AAC/F,eAAW,KAAK,GAAG,OAAO,UAAU;AACpC,WAAO,kBAAM,WAAW,OAAO,SAAS;AAAA,EAC1C;AAAA,EAEA,MAAM,OAAO;AACX,UAAM,SAAS,MAAM,KAAK,aAAa,YAAY,EAAE,QAAQ,gCAAgC,CAAC;AAC9F,uDAAsB,MAAM;AAC5B,UAAM,KAAK,aAAa,KAAK;AAAA,EAC/B;AACF;",
  "names": []
}
