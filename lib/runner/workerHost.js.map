{
  "version": 3,
  "sources": ["../../src/runner/workerHost.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { removeFolders } from 'playwright-core/lib/utils';\n\nimport { ProcessHost } from './processHost';\nimport { stdioChunkToParams } from '../common/ipc';\nimport { artifactsFolderName } from '../isomorphic/folders';\n\nimport type { TestGroup } from './testGroups';\nimport type { RunPayload, SerializedConfig, WorkerInitParams } from '../common/ipc';\n\n\nlet lastWorkerIndex = 0;\n\nexport class WorkerHost extends ProcessHost {\n  readonly parallelIndex: number;\n  readonly workerIndex: number;\n  private _hash: string;\n  private _params: WorkerInitParams;\n  private _didFail = false;\n\n  constructor(testGroup: TestGroup, parallelIndex: number, config: SerializedConfig, extraEnv: Record<string, string | undefined>, outputDir: string) {\n    const workerIndex = lastWorkerIndex++;\n    super(require.resolve('../worker/workerMain.js'), `worker-${workerIndex}`, {\n      ...extraEnv,\n      FORCE_COLOR: '1',\n      DEBUG_COLORS: process.env.DEBUG_COLORS === undefined ? '1' : process.env.DEBUG_COLORS,\n    });\n    this.workerIndex = workerIndex;\n    this.parallelIndex = parallelIndex;\n    this._hash = testGroup.workerHash;\n\n    this._params = {\n      workerIndex: this.workerIndex,\n      parallelIndex,\n      repeatEachIndex: testGroup.repeatEachIndex,\n      projectId: testGroup.projectId,\n      config,\n      artifactsDir: path.join(outputDir, artifactsFolderName(workerIndex)),\n    };\n  }\n\n  async start() {\n    await fs.promises.mkdir(this._params.artifactsDir, { recursive: true });\n    return await this.startRunner(this._params, {\n      onStdOut: chunk => this.emit('stdOut', stdioChunkToParams(chunk)),\n      onStdErr: chunk => this.emit('stdErr', stdioChunkToParams(chunk)),\n    });\n  }\n\n  override async onExit() {\n    await removeFolders([this._params.artifactsDir]);\n  }\n\n  override async stop(didFail?: boolean) {\n    if (didFail)\n      this._didFail = true;\n    await super.stop();\n  }\n\n  runTestGroup(runPayload: RunPayload) {\n    this.sendMessageNoReply({ method: 'runTestGroup', params: runPayload });\n  }\n\n  hash() {\n    return this._hash;\n  }\n\n  projectId() {\n    return this._params.projectId;\n  }\n\n  didFail() {\n    return this._didFail;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,gBAAe;AACf,kBAAiB;AAEjB,mBAA8B;AAE9B,yBAA4B;AAC5B,iBAAmC;AACnC,qBAAoC;AAMpC,IAAI,kBAAkB;AAEf,MAAM,mBAAmB,+BAAY;AAAA,EAO1C,YAAY,WAAsB,eAAuB,QAA0B,UAA8C,WAAmB;AAClJ,UAAM,cAAc;AACpB,UAAM,gBAAgB,yBAAyB,GAAG,UAAU,WAAW,IAAI;AAAA,MACzE,GAAG;AAAA,MACH,aAAa;AAAA,MACb,cAAc,QAAQ,IAAI,iBAAiB,SAAY,MAAM,QAAQ,IAAI;AAAA,IAC3E,CAAC;AARH,SAAQ,WAAW;AASjB,SAAK,cAAc;AACnB,SAAK,gBAAgB;AACrB,SAAK,QAAQ,UAAU;AAEvB,SAAK,UAAU;AAAA,MACb,aAAa,KAAK;AAAA,MAClB;AAAA,MACA,iBAAiB,UAAU;AAAA,MAC3B,WAAW,UAAU;AAAA,MACrB;AAAA,MACA,cAAc,YAAAA,QAAK,KAAK,eAAW,oCAAoB,WAAW,CAAC;AAAA,IACrE;AAAA,EACF;AAAA,EAEA,MAAM,QAAQ;AACZ,UAAM,UAAAC,QAAG,SAAS,MAAM,KAAK,QAAQ,cAAc,EAAE,WAAW,KAAK,CAAC;AACtE,WAAO,MAAM,KAAK,YAAY,KAAK,SAAS;AAAA,MAC1C,UAAU,WAAS,KAAK,KAAK,cAAU,+BAAmB,KAAK,CAAC;AAAA,MAChE,UAAU,WAAS,KAAK,KAAK,cAAU,+BAAmB,KAAK,CAAC;AAAA,IAClE,CAAC;AAAA,EACH;AAAA,EAEA,MAAe,SAAS;AACtB,cAAM,4BAAc,CAAC,KAAK,QAAQ,YAAY,CAAC;AAAA,EACjD;AAAA,EAEA,MAAe,KAAK,SAAmB;AACrC,QAAI;AACF,WAAK,WAAW;AAClB,UAAM,MAAM,KAAK;AAAA,EACnB;AAAA,EAEA,aAAa,YAAwB;AACnC,SAAK,mBAAmB,EAAE,QAAQ,gBAAgB,QAAQ,WAAW,CAAC;AAAA,EACxE;AAAA,EAEA,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,YAAY;AACV,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEA,UAAU;AACR,WAAO,KAAK;AAAA,EACd;AACF;",
  "names": ["path", "fs"]
}
