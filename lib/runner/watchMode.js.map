{
  "version": 3,
  "sources": ["../../src/runner/watchMode.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\nimport readline from 'readline';\nimport { EventEmitter } from 'stream';\n\nimport { PlaywrightServer } from 'playwright-core/lib/remote/playwrightServer';\nimport { ManualPromise, createGuid, eventsHelper, getPackageManagerExecCommand } from 'playwright-core/lib/utils';\nimport { colors } from 'playwright-core/lib/utils';\n\nimport { separator, terminalScreen } from '../reporters/base';\nimport { enquirer } from '../utilsBundle';\nimport { TestServerDispatcher } from './testServer';\nimport { TeleSuiteUpdater } from '../isomorphic/teleSuiteUpdater';\nimport { TestServerConnection  } from '../isomorphic/testServerConnection';\n\nimport type * as reporterTypes from '../../types/testReporter';\nimport type { ConfigLocation } from '../common/config';\nimport type { TestServerTransport } from '../isomorphic/testServerConnection';\n\n/* eslint-disable no-restricted-properties */\n\nclass InMemoryTransport extends EventEmitter implements TestServerTransport {\n  public readonly _send: (data: string) => void;\n\n  constructor(send: (data: any) => void) {\n    super();\n    this._send = send;\n  }\n\n  close() {\n    this.emit('close');\n  }\n\n  onclose(listener: () => void): void {\n    this.on('close', listener);\n  }\n\n  onerror(listener: () => void): void {\n    // no-op to fulfil the interface, the user of InMemoryTransport doesn't emit any errors.\n  }\n\n  onmessage(listener: (message: string) => void): void {\n    this.on('message', listener);\n  }\n\n  onopen(listener: () => void): void {\n    this.on('open', listener);\n  }\n\n  send(data: string): void {\n    this._send(data);\n  }\n}\n\ninterface WatchModeOptions {\n  files?: string[];\n  projects?: string[];\n  grep?: string;\n}\n\nexport async function runWatchModeLoop(configLocation: ConfigLocation, initialOptions: WatchModeOptions): Promise<reporterTypes.FullResult['status']> {\n  const options: WatchModeOptions = { ...initialOptions };\n  let bufferMode = false;\n\n  const testServerDispatcher = new TestServerDispatcher(configLocation, {});\n  const transport = new InMemoryTransport(\n      async data => {\n        const { id, method, params } = JSON.parse(data);\n        try {\n          const result = await testServerDispatcher.transport.dispatch(method, params);\n          transport.emit('message', JSON.stringify({ id, result }));\n        } catch (e) {\n          transport.emit('message', JSON.stringify({ id, error: String(e) }));\n        }\n      }\n  );\n  testServerDispatcher.transport.sendEvent = (method, params) => {\n    transport.emit('message', JSON.stringify({ method, params }));\n  };\n  const testServerConnection = new TestServerConnection(transport);\n  transport.emit('open');\n\n  const teleSuiteUpdater = new TeleSuiteUpdater({ pathSeparator: path.sep, onUpdate() { } });\n\n  const dirtyTestFiles = new Set<string>();\n  const dirtyTestIds = new Set<string>();\n  let onDirtyTests = new ManualPromise<'changed'>();\n\n  let queue = Promise.resolve();\n  const changedFiles = new Set<string>();\n  testServerConnection.onTestFilesChanged(({ testFiles }) => {\n    testFiles.forEach(file => changedFiles.add(file));\n\n    queue = queue.then(async () => {\n      if (changedFiles.size === 0)\n        return;\n\n      const { report } = await testServerConnection.listTests({ locations: options.files, projects: options.projects, grep: options.grep });\n      teleSuiteUpdater.processListReport(report);\n\n      for (const test of teleSuiteUpdater.rootSuite!.allTests()) {\n        if (changedFiles.has(test.location.file)) {\n          dirtyTestFiles.add(test.location.file);\n          dirtyTestIds.add(test.id);\n        }\n      }\n      changedFiles.clear();\n\n      if (dirtyTestIds.size > 0) {\n        onDirtyTests.resolve('changed');\n        onDirtyTests = new ManualPromise();\n      }\n    });\n  });\n  testServerConnection.onReport(report => teleSuiteUpdater.processTestReportEvent(report));\n\n  await testServerConnection.initialize({\n    interceptStdio: false,\n    watchTestDirs: true,\n    populateDependenciesOnList: true,\n  });\n  await testServerConnection.runGlobalSetup({});\n\n  const { report } = await testServerConnection.listTests({});\n  teleSuiteUpdater.processListReport(report);\n\n  const projectNames = teleSuiteUpdater.rootSuite!.suites.map(s => s.title);\n\n  let lastRun: { type: 'changed' | 'regular' | 'failed', failedTestIds?: string[], dirtyTestIds?: string[] } = { type: 'regular' };\n  let result: reporterTypes.FullResult['status'] = 'passed';\n\n  while (true) {\n    if (bufferMode)\n      printBufferPrompt(dirtyTestFiles, teleSuiteUpdater.config!.rootDir);\n    else\n      printPrompt();\n\n    const waitForCommand = readCommand();\n    const command = await Promise.race([\n      onDirtyTests,\n      waitForCommand.result,\n    ]);\n    if (command === 'changed')\n      waitForCommand.dispose();\n    if (bufferMode && command === 'changed')\n      continue;\n\n    const shouldRunChangedFiles = bufferMode ? command === 'run' : command === 'changed';\n    if (shouldRunChangedFiles) {\n      if (dirtyTestIds.size === 0)\n        continue;\n\n      const testIds = [...dirtyTestIds];\n      dirtyTestIds.clear();\n      dirtyTestFiles.clear();\n      await runTests(options, testServerConnection, { testIds, title: 'files changed' });\n      lastRun = { type: 'changed', dirtyTestIds: testIds };\n      continue;\n    }\n\n    if (command === 'run') {\n      // All means reset filters.\n      await runTests(options, testServerConnection);\n      lastRun = { type: 'regular' };\n      continue;\n    }\n\n    if (command === 'project') {\n      const { selectedProjects } = await enquirer.prompt<{ selectedProjects: string[] }>({\n        type: 'multiselect',\n        name: 'selectedProjects',\n        message: 'Select projects',\n        choices: projectNames,\n      }).catch(() => ({ selectedProjects: null }));\n      if (!selectedProjects)\n        continue;\n      options.projects = selectedProjects.length ? selectedProjects : undefined;\n      await runTests(options, testServerConnection);\n      lastRun = { type: 'regular' };\n      continue;\n    }\n\n    if (command === 'file') {\n      const { filePattern } = await enquirer.prompt<{ filePattern: string }>({\n        type: 'text',\n        name: 'filePattern',\n        message: 'Input filename pattern (regex)',\n      }).catch(() => ({ filePattern: null }));\n      if (filePattern === null)\n        continue;\n      if (filePattern.trim())\n        options.files = filePattern.split(' ');\n      else\n        options.files = undefined;\n      await runTests(options, testServerConnection);\n      lastRun = { type: 'regular' };\n      continue;\n    }\n\n    if (command === 'grep') {\n      const { testPattern } = await enquirer.prompt<{ testPattern: string }>({\n        type: 'text',\n        name: 'testPattern',\n        message: 'Input test name pattern (regex)',\n      }).catch(() => ({ testPattern: null }));\n      if (testPattern === null)\n        continue;\n      if (testPattern.trim())\n        options.grep = testPattern;\n      else\n        options.grep = undefined;\n      await runTests(options, testServerConnection);\n      lastRun = { type: 'regular' };\n      continue;\n    }\n\n    if (command === 'failed') {\n      const failedTestIds = teleSuiteUpdater.rootSuite!.allTests().filter(t => !t.ok()).map(t => t.id);\n      await runTests({}, testServerConnection, { title: 'running failed tests', testIds: failedTestIds });\n      lastRun = { type: 'failed', failedTestIds };\n      continue;\n    }\n\n    if (command === 'repeat') {\n      if (lastRun.type === 'regular') {\n        await runTests(options, testServerConnection, { title: 're-running tests' });\n        continue;\n      } else if (lastRun.type === 'changed') {\n        await runTests(options, testServerConnection, { title: 're-running tests', testIds: lastRun.dirtyTestIds });\n      } else if (lastRun.type === 'failed') {\n        await runTests({}, testServerConnection, { title: 're-running tests', testIds: lastRun.failedTestIds });\n      }\n      continue;\n    }\n\n    if (command === 'toggle-show-browser') {\n      await toggleShowBrowser();\n      continue;\n    }\n\n    if (command === 'toggle-buffer-mode') {\n      bufferMode = !bufferMode;\n      continue;\n    }\n\n    if (command === 'exit')\n      break;\n\n    if (command === 'interrupted') {\n      result = 'interrupted';\n      break;\n    }\n  }\n\n  const teardown = await testServerConnection.runGlobalTeardown({});\n\n  return result === 'passed' ? teardown.status : result;\n}\n\nfunction readKeyPress<T extends string>(handler: (text: string, key: any) => T | undefined): { dispose(): void; result: Promise<T> } {\n  const promise = new ManualPromise<T>();\n\n  const rl = readline.createInterface({ input: process.stdin, escapeCodeTimeout: 50 });\n  readline.emitKeypressEvents(process.stdin, rl);\n  if (process.stdin.isTTY)\n    process.stdin.setRawMode(true);\n\n  const listener = eventsHelper.addEventListener(process.stdin, 'keypress', (text: string, key: any) => {\n    const result = handler(text, key);\n    if (result)\n      promise.resolve(result);\n  });\n\n  const dispose = () => {\n    eventsHelper.removeEventListeners([listener]);\n    rl.close();\n    if (process.stdin.isTTY)\n      process.stdin.setRawMode(false);\n  };\n\n  void promise.finally(dispose);\n\n  return { result: promise, dispose };\n}\n\nconst isInterrupt = (text: string, key: any) => text === '\\x03' || text === '\\x1B' || (key && key.name === 'escape') || (key && key.ctrl && key.name === 'c');\n\nasync function runTests(watchOptions: WatchModeOptions, testServerConnection: TestServerConnection, options?: {\n  title?: string,\n  testIds?: string[],\n}) {\n  printConfiguration(watchOptions, options?.title);\n\n  const waitForDone = readKeyPress((text: string, key: any) => {\n    if (isInterrupt(text, key)) {\n      testServerConnection.stopTestsNoReply({});\n      return 'done';\n    }\n  });\n\n  await testServerConnection.runTests({\n    grep: watchOptions.grep,\n    testIds: options?.testIds,\n    locations: watchOptions?.files,\n    projects: watchOptions.projects,\n    connectWsEndpoint,\n    reuseContext: connectWsEndpoint ? true : undefined,\n    workers: connectWsEndpoint ? 1 : undefined,\n    headed: connectWsEndpoint ? true : undefined,\n  }).finally(() => waitForDone.dispose());\n}\n\nfunction readCommand() {\n  return readKeyPress<Command>((text: string, key: any) => {\n    if (isInterrupt(text, key))\n      return 'interrupted';\n    if (process.platform !== 'win32' && key && key.ctrl && key.name === 'z') {\n      process.kill(process.ppid, 'SIGTSTP');\n      process.kill(process.pid, 'SIGTSTP');\n    }\n    const name = key?.name;\n    if (name === 'q')\n      return 'exit';\n\n    if (name === 'h') {\n      process.stdout.write(`${separator(terminalScreen)}\nRun tests\n  ${colors.bold('enter')}    ${colors.dim('run tests')}\n  ${colors.bold('f')}        ${colors.dim('run failed tests')}\n  ${colors.bold('r')}        ${colors.dim('repeat last run')}\n  ${colors.bold('q')}        ${colors.dim('quit')}\n\nChange settings\n  ${colors.bold('c')}        ${colors.dim('set project')}\n  ${colors.bold('p')}        ${colors.dim('set file filter')}\n  ${colors.bold('t')}        ${colors.dim('set title filter')}\n  ${colors.bold('s')}        ${colors.dim('toggle show & reuse the browser')}\n  ${colors.bold('b')}        ${colors.dim('toggle buffer mode')}\n`);\n      return;\n    }\n\n    switch (name) {\n      case 'return': return 'run';\n      case 'r': return 'repeat';\n      case 'c': return 'project';\n      case 'p': return 'file';\n      case 't': return 'grep';\n      case 'f': return 'failed';\n      case 's': return 'toggle-show-browser';\n      case 'b': return 'toggle-buffer-mode';\n    }\n  });\n}\n\nlet showBrowserServer: PlaywrightServer | undefined;\nlet connectWsEndpoint: string | undefined = undefined;\nlet seq = 1;\n\nfunction printConfiguration(options: WatchModeOptions, title?: string) {\n  const packageManagerCommand = getPackageManagerExecCommand();\n  const tokens: string[] = [];\n  tokens.push(`${packageManagerCommand} playwright test`);\n  if (options.projects)\n    tokens.push(...options.projects.map(p => colors.blue(`--project ${p}`)));\n  if (options.grep)\n    tokens.push(colors.red(`--grep ${options.grep}`));\n  if (options.files)\n    tokens.push(...options.files.map(a => colors.bold(a)));\n  if (title)\n    tokens.push(colors.dim(`(${title})`));\n  tokens.push(colors.dim(`#${seq++}`));\n  const lines: string[] = [];\n  const sep = separator(terminalScreen);\n  lines.push('\\x1Bc' + sep);\n  lines.push(`${tokens.join(' ')}`);\n  lines.push(`${colors.dim('Show & reuse browser:')} ${colors.bold(showBrowserServer ? 'on' : 'off')}`);\n  process.stdout.write(lines.join('\\n'));\n}\n\nfunction printBufferPrompt(dirtyTestFiles: Set<string>, rootDir: string) {\n  const sep = separator(terminalScreen);\n  process.stdout.write('\\x1Bc');\n  process.stdout.write(`${sep}\\n`);\n\n  if (dirtyTestFiles.size === 0) {\n    process.stdout.write(`${colors.dim('Waiting for file changes. Press')} ${colors.bold('q')} ${colors.dim('to quit or')} ${colors.bold('h')} ${colors.dim('for more options.')}\\n\\n`);\n    return;\n  }\n\n  process.stdout.write(`${colors.dim(`${dirtyTestFiles.size} test ${dirtyTestFiles.size === 1 ? 'file' : 'files'} changed:`)}\\n\\n`);\n  for (const file of dirtyTestFiles)\n    process.stdout.write(` \u00B7 ${path.relative(rootDir, file)}\\n`);\n  process.stdout.write(`\\n${colors.dim(`Press`)} ${colors.bold('enter')} ${colors.dim('to run')}, ${colors.bold('q')} ${colors.dim('to quit or')} ${colors.bold('h')} ${colors.dim('for more options.')}\\n\\n`);\n}\n\nfunction printPrompt() {\n  const sep = separator(terminalScreen);\n  process.stdout.write(`\n${sep}\n${colors.dim('Waiting for file changes. Press')} ${colors.bold('enter')} ${colors.dim('to run tests')}, ${colors.bold('q')} ${colors.dim('to quit or')} ${colors.bold('h')} ${colors.dim('for more options.')}\n`);\n}\n\nasync function toggleShowBrowser() {\n  if (!showBrowserServer) {\n    showBrowserServer = new PlaywrightServer({ mode: 'extension', path: '/' + createGuid(), maxConnections: 1 });\n    connectWsEndpoint = await showBrowserServer.listen();\n    process.stdout.write(`${colors.dim('Show & reuse browser:')} ${colors.bold('on')}\\n`);\n  } else {\n    await showBrowserServer?.close();\n    showBrowserServer = undefined;\n    connectWsEndpoint = undefined;\n    process.stdout.write(`${colors.dim('Show & reuse browser:')} ${colors.bold('off')}\\n`);\n  }\n}\n\ntype Command = 'run' | 'failed' | 'repeat' | 'changed' | 'project' | 'file' | 'grep' | 'exit' | 'interrupted' | 'toggle-show-browser' | 'toggle-buffer-mode';\n"],
  "mappings": "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",
  "names": ["import_utils", "result", "path", "report", "readline"]
}
