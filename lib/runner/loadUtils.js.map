{
  "version": 3,
  "sources": ["../../src/runner/loadUtils.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\n\nimport { InProcessLoaderHost, OutOfProcessLoaderHost } from './loaderHost';\nimport { createFileFiltersFromArguments, createFileMatcherFromArguments, createTitleMatcher, errorWithFile, forceRegExp } from '../util';\nimport { buildProjectsClosure, collectFilesForProject, filterProjects } from './projectUtils';\nimport {  createTestGroups, filterForShard } from './testGroups';\nimport { applyRepeatEachIndex, bindFileSuiteToProject, filterByFocusedLine, filterOnly, filterTestsRemoveEmptySuites } from '../common/suiteUtils';\nimport { Suite } from '../common/test';\nimport { dependenciesForTestFile } from '../transform/compilationCache';\nimport { requireOrImport } from '../transform/transform';\nimport { sourceMapSupport } from '../utilsBundle';\n\nimport type { TestRun } from './tasks';\nimport type { TestGroup } from './testGroups';\nimport type { FullConfig, Reporter, TestError } from '../../types/testReporter';\nimport type { FullProjectInternal } from '../common/config';\nimport type { FullConfigInternal } from '../common/config';\nimport type { TestCase } from '../common/test';\nimport type { Matcher, TestCaseFilter, TestFileFilter } from '../util';\nimport type { RawSourceMap } from '../utilsBundle';\n\n\nexport async function collectProjectsAndTestFiles(testRun: TestRun, doNotRunTestsOutsideProjectFilter: boolean) {\n  const config = testRun.config;\n  const fsCache = new Map();\n  const sourceMapCache = new Map();\n  const cliFileMatcher = config.cliArgs.length ? createFileMatcherFromArguments(config.cliArgs) : null;\n\n  // First collect all files for the projects in the command line, don't apply any file filters.\n  const allFilesForProject = new Map<FullProjectInternal, string[]>();\n  const filteredProjects = filterProjects(config.projects, config.cliProjectFilter);\n  for (const project of filteredProjects) {\n    const files = await collectFilesForProject(project, fsCache);\n    allFilesForProject.set(project, files);\n  }\n\n  // Filter files based on the file filters, eliminate the empty projects.\n  const filesToRunByProject = new Map<FullProjectInternal, string[]>();\n  for (const [project, files] of allFilesForProject) {\n    const matchedFiles = files.filter(file => {\n      const hasMatchingSources = sourceMapSources(file, sourceMapCache).some(source => {\n        if (cliFileMatcher && !cliFileMatcher(source))\n          return false;\n        return true;\n      });\n      return hasMatchingSources;\n    });\n    const filteredFiles = matchedFiles.filter(Boolean) as string[];\n    filesToRunByProject.set(project, filteredFiles);\n  }\n\n  // (Re-)add all files for dependent projects, disregard filters.\n  const projectClosure = buildProjectsClosure([...filesToRunByProject.keys()]);\n  for (const [project, type] of projectClosure) {\n    if (type === 'dependency') {\n      const treatProjectAsEmpty = doNotRunTestsOutsideProjectFilter && !filteredProjects.includes(project);\n      const files = treatProjectAsEmpty ? [] : allFilesForProject.get(project) || await collectFilesForProject(project, fsCache);\n      filesToRunByProject.set(project, files);\n    }\n  }\n\n  testRun.projectFiles = filesToRunByProject;\n  testRun.projectSuites = new Map();\n}\n\nexport async function loadFileSuites(testRun: TestRun, mode: 'out-of-process' | 'in-process', errors: TestError[]) {\n  // Determine all files to load.\n  const config = testRun.config;\n  const allTestFiles = new Set<string>();\n  for (const files of testRun.projectFiles.values())\n    files.forEach(file => allTestFiles.add(file));\n\n  // Load test files.\n  const fileSuiteByFile = new Map<string, Suite>();\n  const loaderHost = mode === 'out-of-process' ? new OutOfProcessLoaderHost(config) : new InProcessLoaderHost(config);\n  if (await loaderHost.start(errors)) {\n    for (const file of allTestFiles) {\n      const fileSuite = await loaderHost.loadTestFile(file, errors);\n      fileSuiteByFile.set(file, fileSuite);\n      errors.push(...createDuplicateTitlesErrors(config, fileSuite));\n    }\n    await loaderHost.stop();\n  }\n\n  // Check that no test file imports another test file.\n  // Loader must be stopped first, since it populates the dependency tree.\n  for (const file of allTestFiles) {\n    for (const dependency of dependenciesForTestFile(file)) {\n      if (allTestFiles.has(dependency)) {\n        const importer = path.relative(config.config.rootDir, file);\n        const importee = path.relative(config.config.rootDir, dependency);\n        errors.push({\n          message: `Error: test file \"${importer}\" should not import test file \"${importee}\"`,\n          location: { file, line: 1, column: 1 },\n        });\n      }\n    }\n  }\n\n  // Collect file suites for each project.\n  for (const [project, files] of testRun.projectFiles) {\n    const suites = files.map(file => fileSuiteByFile.get(file)).filter(Boolean) as Suite[];\n    testRun.projectSuites.set(project, suites);\n  }\n}\n\nexport async function createRootSuite(testRun: TestRun, errors: TestError[], shouldFilterOnly: boolean): Promise<Suite> {\n  const config = testRun.config;\n  // Create root suite, where each child will be a project suite with cloned file suites inside it.\n  const rootSuite = new Suite('', 'root');\n  const projectSuites = new Map<FullProjectInternal, Suite>();\n  const filteredProjectSuites = new Map<FullProjectInternal, Suite>();\n\n  // Filter all the projects using grep, testId, file names.\n  {\n    // Interpret cli parameters.\n    const cliFileFilters = createFileFiltersFromArguments(config.cliArgs);\n    const grepMatcher = config.cliGrep ? createTitleMatcher(forceRegExp(config.cliGrep)) : () => true;\n    const grepInvertMatcher = config.cliGrepInvert ? createTitleMatcher(forceRegExp(config.cliGrepInvert)) : () => false;\n    const cliTitleMatcher = (title: string) => !grepInvertMatcher(title) && grepMatcher(title);\n\n    // Filter file suites for all projects.\n    for (const [project, fileSuites] of testRun.projectSuites) {\n      const projectSuite = createProjectSuite(project, fileSuites);\n      projectSuites.set(project, projectSuite);\n\n      const filteredProjectSuite = filterProjectSuite(projectSuite, { cliFileFilters, cliTitleMatcher, testFilters: config.preOnlyTestFilters });\n      filteredProjectSuites.set(project, filteredProjectSuite);\n    }\n  }\n\n  if (shouldFilterOnly) {\n    // Create a fake root to execute the exclusive semantics across the projects.\n    const filteredRoot = new Suite('', 'root');\n    for (const filteredProjectSuite of filteredProjectSuites.values())\n      filteredRoot._addSuite(filteredProjectSuite);\n    filterOnly(filteredRoot);\n    for (const [project, filteredProjectSuite] of filteredProjectSuites) {\n      if (!filteredRoot.suites.includes(filteredProjectSuite))\n        filteredProjectSuites.delete(project);\n    }\n  }\n\n  // Add post-filtered top-level projects to the root suite for sharding and 'only' processing.\n  const projectClosure = buildProjectsClosure([...filteredProjectSuites.keys()], project => filteredProjectSuites.get(project)!._hasTests());\n  for (const [project, type] of projectClosure) {\n    if (type === 'top-level') {\n      project.project.repeatEach = project.fullConfig.configCLIOverrides.repeatEach ?? project.project.repeatEach;\n      rootSuite._addSuite(buildProjectSuite(project, filteredProjectSuites.get(project)!));\n    }\n  }\n\n  // Complain about only.\n  if (config.config.forbidOnly) {\n    const onlyTestsAndSuites = rootSuite._getOnlyItems();\n    if (onlyTestsAndSuites.length > 0) {\n      const configFilePath = config.config.configFile ? path.relative(config.config.rootDir, config.config.configFile) : undefined;\n      errors.push(...createForbidOnlyErrors(onlyTestsAndSuites, config.configCLIOverrides.forbidOnly, configFilePath));\n    }\n  }\n\n  // Shard only the top-level projects.\n  if (config.config.shard) {\n    // Create test groups for top-level projects.\n    const testGroups: TestGroup[] = [];\n    for (const projectSuite of rootSuite.suites) {\n      // Split beforeAll-grouped tests into \"config.shard.total\" groups when needed.\n      // Later on, we'll re-split them between workers by using \"config.workers\" instead.\n      testGroups.push(...createTestGroups(projectSuite, config.config.shard.total));\n    }\n\n    // Shard test groups.\n    const testGroupsInThisShard = filterForShard(config.config.shard, testGroups);\n    const testsInThisShard = new Set<TestCase>();\n    for (const group of testGroupsInThisShard) {\n      for (const test of group.tests)\n        testsInThisShard.add(test);\n    }\n\n    // Update project suites, removing empty ones.\n    filterTestsRemoveEmptySuites(rootSuite, test => testsInThisShard.has(test));\n  }\n\n  if (config.postShardTestFilters.length)\n    filterTestsRemoveEmptySuites(rootSuite, test => config.postShardTestFilters.every(filter => filter(test)));\n\n  // Now prepend dependency projects without filtration.\n  {\n    // Filtering 'only' and sharding might have reduced the number of top-level projects.\n    // Build the project closure to only include dependencies that are still needed.\n    const projectClosure = new Map(buildProjectsClosure(rootSuite.suites.map(suite => suite._fullProject!)));\n\n    // Clone file suites for dependency projects.\n    for (const [project, level] of projectClosure.entries()) {\n      if (level === 'dependency')\n        rootSuite._prependSuite(buildProjectSuite(project, projectSuites.get(project)!));\n    }\n  }\n\n  return rootSuite;\n}\n\nfunction createProjectSuite(project: FullProjectInternal, fileSuites: Suite[]): Suite {\n  const projectSuite = new Suite(project.project.name, 'project');\n  for (const fileSuite of fileSuites)\n    projectSuite._addSuite(bindFileSuiteToProject(project, fileSuite));\n\n  const grepMatcher = createTitleMatcher(project.project.grep);\n  const grepInvertMatcher = project.project.grepInvert ? createTitleMatcher(project.project.grepInvert) : null;\n  filterTestsRemoveEmptySuites(projectSuite, (test: TestCase) => {\n    const grepTitle = test._grepTitleWithTags();\n    if (grepInvertMatcher?.(grepTitle))\n      return false;\n    return grepMatcher(grepTitle);\n  });\n  return projectSuite;\n}\n\nfunction filterProjectSuite(projectSuite: Suite, options: { cliFileFilters: TestFileFilter[], cliTitleMatcher?: Matcher, testFilters: TestCaseFilter[] }): Suite {\n  // Fast path.\n  if (!options.cliFileFilters.length && !options.cliTitleMatcher && !options.testFilters.length)\n    return projectSuite;\n\n  const result = projectSuite._deepClone();\n  if (options.cliFileFilters.length)\n    filterByFocusedLine(result, options.cliFileFilters);\n  filterTestsRemoveEmptySuites(result, (test: TestCase) => {\n    if (!options.testFilters.every(filter => filter(test)))\n      return false;\n    if (options.cliTitleMatcher && !options.cliTitleMatcher(test._grepTitleWithTags()))\n      return false;\n    return true;\n  });\n  return result;\n}\n\nfunction buildProjectSuite(project: FullProjectInternal, projectSuite: Suite): Suite {\n  const result = new Suite(project.project.name, 'project');\n  result._fullProject = project;\n  if (project.fullyParallel)\n    result._parallelMode = 'parallel';\n\n  for (const fileSuite of projectSuite.suites) {\n    // Fast path for the repeatEach = 0.\n    result._addSuite(fileSuite);\n\n    for (let repeatEachIndex = 1; repeatEachIndex < project.project.repeatEach; repeatEachIndex++) {\n      const clone = fileSuite._deepClone();\n      applyRepeatEachIndex(project, clone, repeatEachIndex);\n      result._addSuite(clone);\n    }\n  }\n  return result;\n}\n\nfunction createForbidOnlyErrors(onlyTestsAndSuites: (TestCase | Suite)[], forbidOnlyCLIFlag: boolean | undefined, configFilePath: string | undefined): TestError[] {\n  const errors: TestError[] = [];\n  for (const testOrSuite of onlyTestsAndSuites) {\n    // Skip root and file.\n    const title = testOrSuite.titlePath().slice(2).join(' ');\n    const configFilePathName = configFilePath ? `'${configFilePath}'` : 'the Playwright configuration file';\n    const forbidOnlySource = forbidOnlyCLIFlag ? `'--forbid-only' CLI flag` : `'forbidOnly' option in ${configFilePathName}`;\n    const error: TestError = {\n      message: `Error: item focused with '.only' is not allowed due to the ${forbidOnlySource}: \"${title}\"`,\n      location: testOrSuite.location!,\n    };\n    errors.push(error);\n  }\n  return errors;\n}\n\nfunction createDuplicateTitlesErrors(config: FullConfigInternal, fileSuite: Suite): TestError[] {\n  const errors: TestError[] = [];\n  const testsByFullTitle = new Map<string, TestCase>();\n  for (const test of fileSuite.allTests()) {\n    const fullTitle = test.titlePath().slice(1).join(' \u203A ');\n    const existingTest = testsByFullTitle.get(fullTitle);\n    if (existingTest) {\n      const error: TestError = {\n        message: `Error: duplicate test title \"${fullTitle}\", first declared in ${buildItemLocation(config.config.rootDir, existingTest)}`,\n        location: test.location,\n      };\n      errors.push(error);\n    }\n    testsByFullTitle.set(fullTitle, test);\n  }\n  return errors;\n}\n\nfunction buildItemLocation(rootDir: string, testOrSuite: Suite | TestCase) {\n  if (!testOrSuite.location)\n    return '';\n  return `${path.relative(rootDir, testOrSuite.location.file)}:${testOrSuite.location.line}`;\n}\n\nasync function requireOrImportDefaultFunction(file: string, expectConstructor: boolean) {\n  let func = await requireOrImport(file);\n  if (func && typeof func === 'object' && ('default' in func))\n    func = func['default'];\n  if (typeof func !== 'function')\n    throw errorWithFile(file, `file must export a single ${expectConstructor ? 'class' : 'function'}.`);\n  return func;\n}\n\nexport function loadGlobalHook(config: FullConfigInternal, file: string): Promise<(config: FullConfig) => any> {\n  return requireOrImportDefaultFunction(path.resolve(config.config.rootDir, file), false);\n}\n\nexport function loadReporter(config: FullConfigInternal | null, file: string): Promise<new (arg?: any) => Reporter> {\n  return requireOrImportDefaultFunction(config ? path.resolve(config.config.rootDir, file) : file, true);\n}\n\nfunction sourceMapSources(file: string, cache: Map<string, string[]>): string[] {\n  let sources = [file];\n  if (!file.endsWith('.js'))\n    return sources;\n  if (cache.has(file))\n    return cache.get(file)!;\n\n  try {\n    const sourceMap = sourceMapSupport.retrieveSourceMap(file);\n    const sourceMapData: RawSourceMap | undefined = typeof sourceMap?.map === 'string' ? JSON.parse(sourceMap.map) : sourceMap?.map;\n    if (sourceMapData?.sources)\n      sources = sourceMapData.sources.map(source => path.resolve(path.dirname(file), source));\n  } finally {\n    cache.set(file, sources);\n    return sources;\n  }\n}\n"],
  "mappings": "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",
  "names": ["path", "projectClosure"]
}
