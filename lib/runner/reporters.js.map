{
  "version": 3,
  "sources": ["../../src/runner/reporters.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { calculateSha1 } from 'playwright-core/lib/utils';\n\nimport { loadReporter } from './loadUtils';\nimport { formatError } from '../reporters/base';\nimport { BlobReporter } from '../reporters/blob';\nimport DotReporter from '../reporters/dot';\nimport EmptyReporter from '../reporters/empty';\nimport GitHubReporter from '../reporters/github';\nimport HtmlReporter from '../reporters/html';\nimport JSONReporter from '../reporters/json';\nimport JUnitReporter from '../reporters/junit';\nimport LineReporter from '../reporters/line';\nimport ListReporter from '../reporters/list';\nimport ListModeReporter from '../reporters/listModeReporter';\nimport { wrapReporterAsV2 } from '../reporters/reporterV2';\n\nimport type { ReporterDescription } from '../../types/test';\nimport type { TestError } from '../../types/testReporter';\nimport type { BuiltInReporter, FullConfigInternal } from '../common/config';\nimport type { CommonReporterOptions, Screen } from '../reporters/base';\nimport type { ReporterV2 } from '../reporters/reporterV2';\n\nexport async function createReporters(config: FullConfigInternal, mode: 'list' | 'test' | 'merge', isTestServer: boolean, descriptions?: ReporterDescription[]): Promise<ReporterV2[]> {\n  const defaultReporters: { [key in BuiltInReporter]: new(arg: any) => ReporterV2 } = {\n    blob: BlobReporter,\n    dot: mode === 'list' ? ListModeReporter : DotReporter,\n    line: mode === 'list' ? ListModeReporter : LineReporter,\n    list: mode === 'list' ? ListModeReporter : ListReporter,\n    github: GitHubReporter,\n    json: JSONReporter,\n    junit: JUnitReporter,\n    null: EmptyReporter,\n    html: HtmlReporter,\n  };\n  const reporters: ReporterV2[] = [];\n  descriptions ??= config.config.reporter;\n  if (config.configCLIOverrides.additionalReporters)\n    descriptions = [...descriptions, ...config.configCLIOverrides.additionalReporters];\n  const runOptions = reporterOptions(config, mode, isTestServer);\n  for (const r of descriptions) {\n    const [name, arg] = r;\n    const options = { ...runOptions, ...arg };\n    if (name in defaultReporters) {\n      reporters.push(new defaultReporters[name as keyof typeof defaultReporters](options));\n    } else {\n      const reporterConstructor = await loadReporter(config, name);\n      reporters.push(wrapReporterAsV2(new reporterConstructor(options)));\n    }\n  }\n  if (process.env.PW_TEST_REPORTER) {\n    const reporterConstructor = await loadReporter(config, process.env.PW_TEST_REPORTER);\n    reporters.push(wrapReporterAsV2(new reporterConstructor(runOptions)));\n  }\n\n  const someReporterPrintsToStdio = reporters.some(r => r.printsToStdio ? r.printsToStdio() : true);\n  if (reporters.length && !someReporterPrintsToStdio) {\n    // Add a line/dot/list-mode reporter for convenience.\n    // Important to put it first, just in case some other reporter stalls onEnd.\n    if (mode === 'list')\n      reporters.unshift(new ListModeReporter());\n    else if (mode !== 'merge')\n      reporters.unshift(!process.env.CI ? new LineReporter() : new DotReporter());\n  }\n  return reporters;\n}\n\nexport async function createReporterForTestServer(file: string, messageSink: (message: any) => void): Promise<ReporterV2> {\n  const reporterConstructor = await loadReporter(null, file);\n  return wrapReporterAsV2(new reporterConstructor({\n    _send: messageSink,\n  }));\n}\n\ninterface ErrorCollectingReporter extends ReporterV2 {\n  errors(): TestError[];\n}\n\nexport function createErrorCollectingReporter(screen: Screen): ErrorCollectingReporter {\n  const errors: TestError[] = [];\n  return {\n    version: () => 'v2',\n    onError(error: TestError) {\n      errors.push(error);\n      screen.stderr?.write(formatError(screen, error).message + '\\n');\n    },\n    errors: () => errors,\n  };\n}\n\nfunction reporterOptions(config: FullConfigInternal, mode: 'list' | 'test' | 'merge', isTestServer: boolean): CommonReporterOptions {\n  return {\n    configDir: config.configDir,\n    _mode: mode,\n    _isTestServer: isTestServer,\n    _commandHash: computeCommandHash(config),\n  };\n}\n\nfunction computeCommandHash(config: FullConfigInternal) {\n  const parts = [];\n  // Include project names for readability.\n  if (config.cliProjectFilter)\n    parts.push(...config.cliProjectFilter);\n  const command = {} as any;\n  if (config.cliArgs.length)\n    command.cliArgs = config.cliArgs;\n  if (config.cliGrep)\n    command.cliGrep = config.cliGrep;\n  if (config.cliGrepInvert)\n    command.cliGrepInvert = config.cliGrepInvert;\n  if (config.cliOnlyChanged)\n    command.cliOnlyChanged = config.cliOnlyChanged;\n  if (Object.keys(command).length)\n    parts.push(calculateSha1(JSON.stringify(command)).substring(0, 7));\n  return parts.join('-');\n}\n"],
  "mappings": "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",
  "names": ["ListModeReporter", "DotReporter", "LineReporter", "ListReporter", "GitHubReporter", "JSONReporter", "JUnitReporter", "EmptyReporter", "HtmlReporter"]
}
