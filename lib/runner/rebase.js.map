{
  "version": 3,
  "sources": ["../../src/runner/rebase.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\n\nimport { MultiMap } from 'playwright-core/lib/utils';\nimport { colors } from 'playwright-core/lib/utils';\nimport { diff } from 'playwright-core/lib/utilsBundle';\n\nimport { filterProjects } from './projectUtils';\nimport { babelParse, traverse, types } from '../transform/babelBundle';\n\nimport type { FullConfigInternal } from '../common/config';\nimport type { InternalReporter } from '../reporters/internalReporter';\nimport type { T } from '../transform/babelBundle';\nconst t: typeof T = types;\n\ntype Location = {\n  file: string;\n  line: number;\n  column: number;\n};\n\ntype Replacement = {\n  // Points to the call expression.\n  location: Location;\n  code: string;\n};\n\nconst suggestedRebaselines = new MultiMap<string, Replacement>();\n\nexport function addSuggestedRebaseline(location: Location, suggestedRebaseline: string) {\n  suggestedRebaselines.set(location.file, { location, code: suggestedRebaseline });\n}\n\nexport function clearSuggestedRebaselines() {\n  suggestedRebaselines.clear();\n}\n\nexport async function applySuggestedRebaselines(config: FullConfigInternal, reporter: InternalReporter) {\n  if (config.config.updateSnapshots === 'none')\n    return;\n  if (!suggestedRebaselines.size)\n    return;\n  const [project] = filterProjects(config.projects, config.cliProjectFilter);\n  if (!project)\n    return;\n\n  const patches: string[] = [];\n  const files: string[] = [];\n  const gitCache = new Map<string, string | null>();\n\n  const patchFile = path.join(project.project.outputDir, 'rebaselines.patch');\n\n  for (const fileName of [...suggestedRebaselines.keys()].sort()) {\n    const source = await fs.promises.readFile(fileName, 'utf8');\n    const lines = source.split('\\n');\n    const replacements = suggestedRebaselines.get(fileName);\n    const fileNode = babelParse(source, fileName, true);\n    const ranges: { start: number, end: number, oldText: string, newText: string }[] = [];\n\n    traverse(fileNode, {\n      CallExpression: path => {\n        const node = path.node;\n        if (node.arguments.length < 1)\n          return;\n        if (!t.isMemberExpression(node.callee))\n          return;\n        const argument = node.arguments[0];\n        if (!t.isStringLiteral(argument) && !t.isTemplateLiteral(argument))\n          return;\n        const prop = node.callee.property;\n        if (!prop.loc || !argument.start || !argument.end)\n          return;\n        // Replacements are anchored by the location of the call expression.\n        // However, replacement text is meant to only replace the first argument.\n        for (const replacement of replacements) {\n          // In Babel, rows are 1-based, columns are 0-based.\n          if (prop.loc.start.line !== replacement.location.line)\n            continue;\n          if (prop.loc.start.column + 1 !== replacement.location.column)\n            continue;\n          const indent = lines[prop.loc.start.line - 1].match(/^\\s*/)![0];\n          const newText = replacement.code.replace(/\\{indent\\}/g, indent);\n          ranges.push({ start: argument.start, end: argument.end, oldText: source.substring(argument.start, argument.end), newText });\n          // We can have multiple, hopefully equal, replacements for the same location,\n          // for example when a single test runs multiple times because of projects or retries.\n          // Do not apply multiple replacements for the same assertion.\n          break;\n        }\n      }\n    });\n\n    ranges.sort((a, b) => b.start - a.start);\n    let result = source;\n    for (const range of ranges)\n      result = result.substring(0, range.start) + range.newText + result.substring(range.end);\n\n    const relativeName = path.relative(process.cwd(), fileName);\n    files.push(relativeName);\n\n    if (config.config.updateSourceMethod === 'overwrite') {\n      await fs.promises.writeFile(fileName, result);\n    } else if (config.config.updateSourceMethod === '3way') {\n      await fs.promises.writeFile(fileName, applyPatchWithConflictMarkers(source, result));\n    } else {\n      const gitFolder = findGitRoot(path.dirname(fileName), gitCache);\n      const relativeToGit = path.relative(gitFolder || process.cwd(), fileName);\n      patches.push(createPatch(relativeToGit, source, result));\n    }\n  }\n\n  const fileList = files.map(file => '  ' + colors.dim(file)).join('\\n');\n  reporter.onStdErr(`\\nNew baselines created for:\\n\\n${fileList}\\n`);\n  if (config.config.updateSourceMethod === 'patch') {\n    await fs.promises.mkdir(path.dirname(patchFile), { recursive: true });\n    await fs.promises.writeFile(patchFile, patches.join('\\n'));\n    reporter.onStdErr(`\\n  ` + colors.cyan('git apply ' + path.relative(process.cwd(), patchFile)) + '\\n');\n  }\n}\n\nfunction createPatch(fileName: string, before: string, after: string) {\n  const file = fileName.replace(/\\\\/g, '/');\n  const text = diff.createPatch(file, before, after, undefined, undefined, { context: 3 });\n  return [\n    'diff --git a/' + file + ' b/' + file,\n    '--- a/' + file,\n    '+++ b/' + file,\n    ...text.split('\\n').slice(4)\n  ].join('\\n');\n}\n\nfunction findGitRoot(dir: string, cache: Map<string, string | null>): string | null {\n  const result = cache.get(dir);\n  if (result !== undefined)\n    return result;\n\n  const gitPath = path.join(dir, '.git');\n  if (fs.existsSync(gitPath) && fs.lstatSync(gitPath).isDirectory()) {\n    cache.set(dir, dir);\n    return dir;\n  }\n\n  const parentDir = path.dirname(dir);\n  if (dir === parentDir) {\n    cache.set(dir, null);\n    return null;\n  }\n\n  const parentResult = findGitRoot(parentDir, cache);\n  cache.set(dir, parentResult);\n  return parentResult;\n}\n\nfunction applyPatchWithConflictMarkers(oldText: string, newText: string) {\n  const diffResult = diff.diffLines(oldText, newText);\n\n  let result = '';\n  let conflict = false;\n\n  diffResult.forEach(part => {\n    if (part.added) {\n      if (conflict) {\n        result += part.value;\n        result += '>>>>>>> SNAPSHOT\\n';\n        conflict = false;\n      } else {\n        result += '<<<<<<< HEAD\\n';\n        result += part.value;\n        result += '=======\\n';\n        conflict = true;\n      }\n    } else if (part.removed) {\n      result += '<<<<<<< HEAD\\n';\n      result += part.value;\n      result += '=======\\n';\n      conflict = true;\n    } else {\n      if (conflict) {\n        result += '>>>>>>> SNAPSHOT\\n';\n        conflict = false;\n      }\n      result += part.value;\n    }\n  });\n\n  if (conflict)\n    result += '>>>>>>> SNAPSHOT\\n';\n  return result;\n}\n"],
  "mappings": "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",
  "names": ["import_utils", "path", "fs"]
}
