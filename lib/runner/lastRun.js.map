{
  "version": 3,
  "sources": ["../../src/runner/lastRun.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { filterProjects } from './projectUtils';\n\nimport type { FullResult, Suite } from '../../types/testReporter';\nimport type { FullConfigInternal } from '../common/config';\nimport type { ReporterV2 } from '../reporters/reporterV2';\n\ntype LastRunInfo = {\n  status?: FullResult['status'];\n  failedTests?: string[];\n  filterTests?: string[];\n};\n\nexport class LastRunReporter implements ReporterV2 {\n  private _config: FullConfigInternal;\n  private _lastRunFile: string | undefined;\n  private _suite: Suite | undefined;\n\n  constructor(config: FullConfigInternal) {\n    this._config = config;\n    if (config.cliLastRunFile) {\n      this._lastRunFile = config.cliLastRunFile;\n    } else {\n      const [project] = filterProjects(config.projects, config.cliProjectFilter);\n      if (project)\n        this._lastRunFile = path.join(project.project.outputDir, '.last-run.json');\n    }\n  }\n\n  async applyFilter() {\n    if (!this._lastRunFile)\n      return;\n    try {\n      const lastRunInfo = JSON.parse(await fs.promises.readFile(this._lastRunFile, 'utf8')) as LastRunInfo;\n      if (lastRunInfo.filterTests) {\n        const filterTestIds = new Set(lastRunInfo.filterTests);\n        this._config.preOnlyTestFilters.push(test => filterTestIds.has(test.id));\n      }\n      if (this._config.cliLastFailed) {\n        const failedTestIds = new Set(lastRunInfo.failedTests ?? []);\n        this._config.postShardTestFilters.push(test => failedTestIds.has(test.id));\n      }\n    } catch {\n    }\n  }\n\n  version(): 'v2' {\n    return 'v2';\n  }\n\n  printsToStdio() {\n    return false;\n  }\n\n  onBegin(suite: Suite) {\n    this._suite = suite;\n  }\n\n  async onEnd(result: FullResult) {\n    if (!this._lastRunFile || this._config.cliListOnly)\n      return;\n    const lastRunInfo: LastRunInfo = {\n      status: result.status,\n      failedTests: this._suite?.allTests().filter(t => !t.ok()).map(t => t.id) || [],\n    };\n    await fs.promises.mkdir(path.dirname(this._lastRunFile), { recursive: true });\n    await fs.promises.writeFile(this._lastRunFile, JSON.stringify(lastRunInfo, undefined, 2));\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,gBAAe;AACf,kBAAiB;AAEjB,0BAA+B;AAYxB,MAAM,gBAAsC;AAAA,EAKjD,YAAY,QAA4B;AACtC,SAAK,UAAU;AACf,QAAI,OAAO,gBAAgB;AACzB,WAAK,eAAe,OAAO;AAAA,IAC7B,OAAO;AACL,YAAM,CAAC,OAAO,QAAI,oCAAe,OAAO,UAAU,OAAO,gBAAgB;AACzE,UAAI;AACF,aAAK,eAAe,YAAAA,QAAK,KAAK,QAAQ,QAAQ,WAAW,gBAAgB;AAAA,IAC7E;AAAA,EACF;AAAA,EAEA,MAAM,cAAc;AAClB,QAAI,CAAC,KAAK;AACR;AACF,QAAI;AACF,YAAM,cAAc,KAAK,MAAM,MAAM,UAAAC,QAAG,SAAS,SAAS,KAAK,cAAc,MAAM,CAAC;AACpF,UAAI,YAAY,aAAa;AAC3B,cAAM,gBAAgB,IAAI,IAAI,YAAY,WAAW;AACrD,aAAK,QAAQ,mBAAmB,KAAK,UAAQ,cAAc,IAAI,KAAK,EAAE,CAAC;AAAA,MACzE;AACA,UAAI,KAAK,QAAQ,eAAe;AAC9B,cAAM,gBAAgB,IAAI,IAAI,YAAY,eAAe,CAAC,CAAC;AAC3D,aAAK,QAAQ,qBAAqB,KAAK,UAAQ,cAAc,IAAI,KAAK,EAAE,CAAC;AAAA,MAC3E;AAAA,IACF,QAAQ;AAAA,IACR;AAAA,EACF;AAAA,EAEA,UAAgB;AACd,WAAO;AAAA,EACT;AAAA,EAEA,gBAAgB;AACd,WAAO;AAAA,EACT;AAAA,EAEA,QAAQ,OAAc;AACpB,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAM,MAAM,QAAoB;AAC9B,QAAI,CAAC,KAAK,gBAAgB,KAAK,QAAQ;AACrC;AACF,UAAM,cAA2B;AAAA,MAC/B,QAAQ,OAAO;AAAA,MACf,aAAa,KAAK,QAAQ,SAAS,EAAE,OAAO,OAAK,CAAC,EAAE,GAAG,CAAC,EAAE,IAAI,OAAK,EAAE,EAAE,KAAK,CAAC;AAAA,IAC/E;AACA,UAAM,UAAAA,QAAG,SAAS,MAAM,YAAAD,QAAK,QAAQ,KAAK,YAAY,GAAG,EAAE,WAAW,KAAK,CAAC;AAC5E,UAAM,UAAAC,QAAG,SAAS,UAAU,KAAK,cAAc,KAAK,UAAU,aAAa,QAAW,CAAC,CAAC;AAAA,EAC1F;AACF;",
  "names": ["path", "fs"]
}
