{
  "version": 3,
  "sources": ["../../src/runner/testRunner.ts"],
  "sourcesContent": ["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { registry } from 'playwright-core/lib/server';\nimport { ManualPromise, gracefullyProcessExitDoNotHang } from 'playwright-core/lib/utils';\n\nimport { loadConfig } from '../common/configLoader';\nimport { Watcher } from '../fsWatcher';\nimport { baseFullConfig } from '../isomorphic/teleReceiver';\nimport { addGitCommitInfoPlugin } from '../plugins/gitCommitInfoPlugin';\nimport { webServerPluginsForConfig } from '../plugins/webServerPlugin';\nimport { internalScreen } from '../reporters/base';\nimport { InternalReporter } from '../reporters/internalReporter';\nimport { affectedTestFiles, collectAffectedTestFiles, dependenciesForTestFile } from '../transform/compilationCache';\nimport { serializeError } from '../util';\nimport { createErrorCollectingReporter, createReporters } from './reporters';\nimport { TestRun, createApplyRebaselinesTask, createClearCacheTask, createGlobalSetupTasks, createListFilesTask, createLoadTask, createPluginSetupTasks, createReportBeginTask, createRunTestsTasks, createStartDevServerTask, runTasks, runTasksDeferCleanup } from './tasks';\nimport { LastRunReporter } from './lastRun';\n\nimport type * as reporterTypes from '../../types/testReporter';\nimport type { ConfigLocation, FullConfigInternal } from '../common/config';\nimport type { ConfigCLIOverrides } from '../common/ipc';\nimport type { TestRunnerPluginRegistration } from '../plugins';\nimport type { AnyReporter } from '../reporters/reporterV2';\n\nexport const TestRunnerEvent = {\n  TestFilesChanged: 'testFilesChanged',\n} as const;\n\nexport type TestRunnerEventMap = {\n  [TestRunnerEvent.TestFilesChanged]: [testFiles: string[]];\n};\n\nexport type ListTestsParams = {\n  projects?: string[];\n  locations?: string[];\n  grep?: string;\n  grepInvert?: string;\n};\n\nexport type RunTestsParams = {\n  timeout?: number;\n  locations?: string[];\n  grep?: string;\n  grepInvert?: string;\n  testIds?: string[];\n  headed?: boolean;\n  workers?: number | string;\n  updateSnapshots?: 'all' | 'changed' | 'missing' | 'none';\n  updateSourceMethod?: 'overwrite' | 'patch' | '3way';\n  reporters?: string[],\n  trace?: 'on' | 'off';\n  video?: 'on' | 'off';\n  projects?: string[];\n  reuseContext?: boolean;\n  connectWsEndpoint?: string;\n};\n\ntype FullResultStatus = reporterTypes.FullResult['status'];\n\nexport class TestRunner extends EventEmitter<TestRunnerEventMap> {\n  readonly configLocation: ConfigLocation;\n  private _configCLIOverrides: ConfigCLIOverrides;\n\n  private _watcher: Watcher;\n  private _watchedProjectDirs = new Set<string>();\n  private _ignoredProjectOutputs = new Set<string>();\n  private _watchedTestDependencies = new Set<string>();\n\n  private _testRun: { run: Promise<reporterTypes.FullResult['status']>, stop: ManualPromise<void> } | undefined;\n  private _queue = Promise.resolve();\n  private _globalSetup: { cleanup: () => Promise<any> } | undefined;\n  private _devServer: { cleanup: () => Promise<any> } | undefined;\n  private _plugins: TestRunnerPluginRegistration[] | undefined;\n  private _watchTestDirs = false;\n  private _populateDependenciesOnList = false;\n\n  constructor(configLocation: ConfigLocation, configCLIOverrides: ConfigCLIOverrides) {\n    super();\n    this.configLocation = configLocation;\n    this._configCLIOverrides = configCLIOverrides;\n    this._watcher = new Watcher(events => {\n      const collector = new Set<string>();\n      events.forEach(f => collectAffectedTestFiles(f.file, collector));\n      this.emit(TestRunnerEvent.TestFilesChanged, [...collector]);\n    });\n  }\n\n  async initialize(params: {\n    watchTestDirs?: boolean;\n    populateDependenciesOnList?: boolean;\n  }) {\n    this._watchTestDirs = !!params.watchTestDirs;\n    this._populateDependenciesOnList = !!params.populateDependenciesOnList;\n  }\n\n  resizeTerminal(params: { cols: number, rows: number }) {\n    /* eslint-disable no-restricted-properties */\n    process.stdout.columns = params.cols;\n    process.stdout.rows = params.rows;\n    process.stderr.columns = params.cols;\n    process.stderr.rows = params.rows;\n    /* eslint-enable no-restricted-properties */\n  }\n\n  hasSomeBrowsers(): boolean {\n    for (const browserName of ['chromium', 'webkit', 'firefox']) {\n      try {\n        registry.findExecutable(browserName)!.executablePathOrDie('javascript');\n        return true;\n      } catch {\n      }\n    }\n    return false;\n  }\n\n  async installBrowsers() {\n    const executables = registry.defaultExecutables();\n    await registry.install(executables, false);\n  }\n\n  async runGlobalSetup(userReporters: AnyReporter[]): Promise<{ status: FullResultStatus }> {\n    await this.runGlobalTeardown();\n\n    const reporter = new InternalReporter(userReporters);\n    const config = await this._loadConfigOrReportError(reporter, this._configCLIOverrides);\n    if (!config)\n      return { status: 'failed' };\n\n    const { status, cleanup } = await runTasksDeferCleanup(new TestRun(config, reporter), [\n      ...createGlobalSetupTasks(config),\n    ]);\n    if (status !== 'passed')\n      await cleanup();\n    else\n      this._globalSetup = { cleanup };\n    return { status };\n  }\n\n  async runGlobalTeardown() {\n    const globalSetup = this._globalSetup;\n    const status = await globalSetup?.cleanup();\n    this._globalSetup = undefined;\n    return { status };\n  }\n\n  async startDevServer(userReporter: AnyReporter, mode: 'in-process' | 'out-of-process'): Promise<{ status: FullResultStatus }> {\n    await this.stopDevServer();\n\n    const reporter = new InternalReporter([userReporter]);\n    const config = await this._loadConfigOrReportError(reporter);\n    if (!config)\n      return { status: 'failed' };\n\n    const { status, cleanup } = await runTasksDeferCleanup(new TestRun(config, reporter), [\n      ...createPluginSetupTasks(config),\n      createLoadTask(mode, { failOnLoadErrors: true, filterOnly: false }),\n      createStartDevServerTask(),\n    ]);\n    if (status !== 'passed')\n      await cleanup();\n    else\n      this._devServer = { cleanup };\n    return { status };\n  }\n\n  async stopDevServer(): Promise<{ status: FullResultStatus }> {\n    const devServer = this._devServer;\n    const status = await devServer?.cleanup();\n    this._devServer = undefined;\n    return { status };\n  }\n\n  async clearCache(userReporter?: AnyReporter): Promise<{ status: FullResultStatus }> {\n    const reporter = new InternalReporter(userReporter ? [userReporter] : []);\n    const config = await this._loadConfigOrReportError(reporter);\n    if (!config)\n      return { status: 'failed' };\n    const status = await runTasks(new TestRun(config, reporter), [\n      ...createPluginSetupTasks(config),\n      createClearCacheTask(config),\n    ]);\n    return { status };\n  }\n\n  async listFiles(userReporter: AnyReporter, projects?: string[]): Promise<{ status: FullResultStatus }> {\n    const reporter = new InternalReporter([userReporter]);\n    const config = await this._loadConfigOrReportError(reporter);\n    if (!config)\n      return { status: 'failed' };\n\n    config.cliProjectFilter = projects?.length ? projects : undefined;\n    const status = await runTasks(new TestRun(config, reporter), [\n      createListFilesTask(),\n      createReportBeginTask(),\n    ]);\n    return { status };\n  }\n\n  async listTests(userReporter: AnyReporter, params: ListTestsParams): Promise<{ status: FullResultStatus }> {\n    let result: { status: FullResultStatus } | undefined;\n    this._queue = this._queue.then(async () => {\n      const { config, status } = await this._innerListTests(userReporter, params);\n      if (config)\n        await this._updateWatchedDirs(config);\n      result = { status };\n    }).catch(printInternalError);\n    await this._queue;\n    return result!;\n  }\n\n  private async _innerListTests(userReporter: AnyReporter, params: ListTestsParams): Promise<{\n    status: reporterTypes.FullResult['status'],\n    config?: FullConfigInternal,\n  }> {\n    const overrides: ConfigCLIOverrides = {\n      ...this._configCLIOverrides,\n      repeatEach: 1,\n      retries: 0,\n    };\n    const reporter = new InternalReporter([userReporter]);\n    const config = await this._loadConfigOrReportError(reporter, overrides);\n    if (!config)\n      return { status: 'failed' };\n\n    config.cliArgs = params.locations || [];\n    config.cliGrep = params.grep;\n    config.cliGrepInvert = params.grepInvert;\n    config.cliProjectFilter = params.projects?.length ? params.projects : undefined;\n    config.cliListOnly = true;\n\n    const status = await runTasks(new TestRun(config, reporter), [\n      createLoadTask('out-of-process', { failOnLoadErrors: false, filterOnly: false, populateDependencies: this._populateDependenciesOnList }),\n      createReportBeginTask(),\n    ]);\n    return { config, status };\n  }\n\n  private async _updateWatchedDirs(config: FullConfigInternal) {\n    this._watchedProjectDirs = new Set();\n    this._ignoredProjectOutputs = new Set();\n    for (const p of config.projects) {\n      this._watchedProjectDirs.add(p.project.testDir);\n      this._ignoredProjectOutputs.add(p.project.outputDir);\n    }\n\n    const result = await resolveCtDirs(config);\n    if (result) {\n      this._watchedProjectDirs.add(result.templateDir);\n      this._ignoredProjectOutputs.add(result.outDir);\n    }\n\n    if (this._watchTestDirs)\n      await this._updateWatcher(false);\n  }\n\n  private async _updateWatcher(reportPending: boolean) {\n    await this._watcher.update([...this._watchedProjectDirs, ...this._watchedTestDependencies], [...this._ignoredProjectOutputs], reportPending);\n  }\n\n  async runTests(userReporter: AnyReporter, params: RunTestsParams): Promise<{ status: FullResultStatus }> {\n    let result: { status: FullResultStatus } = { status: 'passed' };\n    this._queue = this._queue.then(async () => {\n      result = await this._innerRunTests(userReporter, params).catch(e => { printInternalError(e); return { status: 'failed' }; });\n    });\n    await this._queue;\n    return result;\n  }\n\n  private async _innerRunTests(userReporter: AnyReporter, params: RunTestsParams): Promise<{ status: FullResultStatus }> {\n    await this.stopTests();\n    const overrides: ConfigCLIOverrides = {\n      ...this._configCLIOverrides,\n      repeatEach: 1,\n      retries: 0,\n      timeout: params.timeout,\n      preserveOutputDir: true,\n      reporter: params.reporters ? params.reporters.map(r => [r]) : undefined,\n      use: {\n        ...this._configCLIOverrides.use,\n        ...(params.trace === 'on' ? { trace: { mode: 'on', sources: false, _live: true } } : {}),\n        ...(params.trace === 'off' ? { trace: 'off' } : {}),\n        ...(params.video === 'on' || params.video === 'off' ? { video: params.video } : {}),\n        ...(params.headed !== undefined ? { headless: !params.headed } : {}),\n        _optionContextReuseMode: params.reuseContext ? 'when-possible' : undefined,\n        _optionConnectOptions: params.connectWsEndpoint ? { wsEndpoint: params.connectWsEndpoint } : undefined,\n      },\n      ...(params.updateSnapshots ? { updateSnapshots: params.updateSnapshots } : {}),\n      ...(params.updateSourceMethod ? { updateSourceMethod: params.updateSourceMethod } : {}),\n      ...(params.workers ? { workers: params.workers } : {}),\n    };\n    if (params.trace === 'on')\n      process.env.PW_LIVE_TRACE_STACKS = '1';\n    else\n      process.env.PW_LIVE_TRACE_STACKS = undefined;\n\n    const config = await this._loadConfigOrReportError(new InternalReporter([userReporter]), overrides);\n    if (!config)\n      return { status: 'failed' };\n\n    config.cliListOnly = false;\n    config.cliPassWithNoTests = true;\n    config.cliArgs = params.locations || [];\n    config.cliGrep = params.grep;\n    config.cliGrepInvert = params.grepInvert;\n    config.cliProjectFilter = params.projects?.length ? params.projects : undefined;\n    config.preOnlyTestFilters = [];\n    if (params.testIds) {\n      const testIdSet = new Set<string>(params.testIds);\n      config.preOnlyTestFilters.push(test => testIdSet.has(test.id));\n    }\n\n    const configReporters = await createReporters(config, 'test', true);\n    const reporter = new InternalReporter([...configReporters, userReporter]);\n    const stop = new ManualPromise();\n    const tasks = [\n      createApplyRebaselinesTask(),\n      createLoadTask('out-of-process', { filterOnly: true, failOnLoadErrors: false, doNotRunDepsOutsideProjectFilter: true }),\n      ...createRunTestsTasks(config),\n    ];\n    const testRun = new TestRun(config, reporter);\n    const run = runTasks(testRun, tasks, 0, stop).then(async status => {\n      this._testRun = undefined;\n      return status;\n    });\n    this._testRun = { run, stop };\n    return { status: await run };\n  }\n\n  async watch(fileNames: string[]) {\n    this._watchedTestDependencies = new Set();\n    for (const fileName of fileNames) {\n      this._watchedTestDependencies.add(fileName);\n      dependenciesForTestFile(fileName).forEach(file => this._watchedTestDependencies.add(file));\n    }\n    await this._updateWatcher(true);\n  }\n\n  async findRelatedTestFiles(files: string[], userReporter?: AnyReporter): Promise<{ testFiles: string[]; errors?: reporterTypes.TestError[]; }> {\n    const errorReporter = createErrorCollectingReporter(internalScreen);\n    const reporter = new InternalReporter(userReporter ? [userReporter, errorReporter] : [errorReporter]);\n    const config = await this._loadConfigOrReportError(reporter);\n    if (!config)\n      return { errors: errorReporter.errors(), testFiles: [] };\n    const status = await runTasks(new TestRun(config, reporter), [\n      ...createPluginSetupTasks(config),\n      createLoadTask('out-of-process', { failOnLoadErrors: true, filterOnly: false, populateDependencies: true }),\n    ]);\n    if (status !== 'passed')\n      return { errors: errorReporter.errors(), testFiles: [] };\n    return { testFiles: affectedTestFiles(files) };\n  }\n\n  async stopTests() {\n    this._testRun?.stop?.resolve();\n    await this._testRun?.run;\n  }\n\n  async closeGracefully() {\n    gracefullyProcessExitDoNotHang(0);\n  }\n\n  async stop() {\n    await this.runGlobalTeardown();\n  }\n\n  private async _loadConfig(overrides?: ConfigCLIOverrides): Promise<{ config: FullConfigInternal | null, error?: reporterTypes.TestError }> {\n    try {\n      const config = await loadConfig(this.configLocation, overrides);\n      // Preserve plugin instances between setup and build.\n      if (!this._plugins) {\n        webServerPluginsForConfig(config).forEach(p => config.plugins.push({ factory: p }));\n        addGitCommitInfoPlugin(config);\n        this._plugins = config.plugins || [];\n      } else {\n        config.plugins.splice(0, config.plugins.length, ...this._plugins);\n      }\n      return { config };\n    } catch (e) {\n      return { config: null, error: serializeError(e) };\n    }\n  }\n\n  private async _loadConfigOrReportError(reporter: InternalReporter, overrides?: ConfigCLIOverrides): Promise<FullConfigInternal | null> {\n    const { config, error } = await this._loadConfig(overrides);\n    if (config)\n      return config;\n    // Produce dummy config when it has an error.\n    reporter.onConfigure(baseFullConfig);\n    reporter.onError(error!);\n    await reporter.onEnd({ status: 'failed' });\n    await reporter.onExit();\n    return null;\n  }\n}\n\nfunction printInternalError(e: Error) {\n  // eslint-disable-next-line no-console\n  console.error('Internal error:', e);\n}\n\n// TODO: remove CT dependency.\nasync function resolveCtDirs(config: FullConfigInternal) {\n  const use = config.config.projects[0].use as any;\n  const relativeTemplateDir = use.ctTemplateDir || 'playwright';\n  const templateDir = await fs.promises.realpath(path.normalize(path.join(config.configDir, relativeTemplateDir))).catch(() => undefined);\n  if (!templateDir)\n    return null;\n  const outDir = use.ctCacheDir ? path.resolve(config.configDir, use.ctCacheDir) : path.resolve(templateDir, '.cache');\n  return {\n    outDir,\n    templateDir\n  };\n}\n\nexport async function runAllTestsWithConfig(config: FullConfigInternal): Promise<FullResultStatus> {\n  const listOnly = config.cliListOnly;\n\n  addGitCommitInfoPlugin(config);\n\n  // Legacy webServer support.\n  webServerPluginsForConfig(config).forEach(p => config.plugins.push({ factory: p }));\n\n  const reporters = await createReporters(config, listOnly ? 'list' : 'test', false);\n  const lastRun = new LastRunReporter(config);\n  await lastRun.applyFilter();\n\n  const reporter = new InternalReporter([...reporters, lastRun]);\n  const tasks = listOnly ? [\n    createLoadTask('in-process', { failOnLoadErrors: true, filterOnly: false }),\n    createReportBeginTask(),\n  ] : [\n    createApplyRebaselinesTask(),\n    ...createGlobalSetupTasks(config),\n    createLoadTask('in-process', { filterOnly: true, failOnLoadErrors: true }),\n    ...createRunTestsTasks(config),\n  ];\n  const status = await runTasks(new TestRun(config, reporter), tasks, config.config.globalTimeout);\n\n  // Calling process.exit() might truncate large stdout/stderr output.\n  // See https://github.com/nodejs/node/issues/6456.\n  // See https://github.com/nodejs/node/issues/12921\n  // eslint-disable-next-line no-restricted-properties\n  await new Promise<void>(resolve => process.stdout.write('', () => resolve()));\n  // eslint-disable-next-line no-restricted-properties\n  await new Promise<void>(resolve => process.stderr.write('', () => resolve()));\n  return status;\n}\n"],
  "mappings": "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",
  "names": ["EventEmitter", "fs", "path"]
}
